#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimGraphRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Enum AnimGraphRuntime.ERefPoseType
// NumValues: 0x0003
enum class ERefPoseType : uint8
{
	EIT_LocalSpace                           = 0,
	EIT_Additive                             = 1,
	EIT_MAX                                  = 2,
};

// Enum AnimGraphRuntime.AnimPhysLinearConstraintType
// NumValues: 0x0003
enum class EAnimPhysLinearConstraintType : uint8
{
	Free                                     = 0,
	Limited                                  = 1,
	AnimPhysLinearConstraintType_MAX         = 2,
};

// Enum AnimGraphRuntime.AnimPhysAngularConstraintType
// NumValues: 0x0003
enum class EAnimPhysAngularConstraintType : uint8
{
	Angular                                  = 0,
	Cone                                     = 1,
	AnimPhysAngularConstraintType_MAX        = 2,
};

// Enum AnimGraphRuntime.EDrivenBoneModificationMode
// NumValues: 0x0004
enum class EDrivenBoneModificationMode : uint8
{
	AddToInput                               = 0,
	ReplaceComponent                         = 1,
	AddToRefPose                             = 2,
	EDrivenBoneModificationMode_MAX          = 3,
};

// Enum AnimGraphRuntime.EComponentType
// NumValues: 0x000C
enum class EComponentType : uint8
{
	None                                     = 0,
	TranslationX                             = 1,
	TranslationY                             = 2,
	TranslationZ                             = 3,
	RotationX                                = 4,
	RotationY                                = 5,
	RotationZ                                = 6,
	Scale                                    = 7,
	ScaleX                                   = 8,
	ScaleY                                   = 9,
	ScaleZ                                   = 10,
	EComponentType_MAX                       = 11,
};

// Enum AnimGraphRuntime.EInterpolationBlend
// NumValues: 0x0009
enum class EInterpolationBlend : uint8
{
	Linear                                   = 0,
	Cubic                                    = 1,
	Sinusoidal                               = 2,
	EaseInOutExponent2                       = 3,
	EaseInOutExponent3                       = 4,
	EaseInOutExponent4                       = 5,
	EaseInOutExponent5                       = 6,
	MAX                                      = 7,
	EInterpolationBlend_MAX                  = 8,
};

// Enum AnimGraphRuntime.EAxisOption
// NumValues: 0x0007
enum class EAxisOption : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	X_Neg                                    = 3,
	Y_Neg                                    = 4,
	Z_Neg                                    = 5,
	EAxisOption_MAX                          = 6,
};

// Enum AnimGraphRuntime.EBoneModificationMode
// NumValues: 0x0004
enum class EBoneModificationMode : uint8
{
	BMM_Ignore                               = 0,
	BMM_Replace                              = 1,
	BMM_Additive                             = 2,
	BMM_MAX                                  = 3,
};

// Enum AnimGraphRuntime.EBoneAxis
// NumValues: 0x0004
enum class EBoneAxis : uint8
{
	BA_X                                     = 0,
	BA_Y                                     = 1,
	BA_Z                                     = 2,
	BA_MAX                                   = 3,
};

// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpacePlayer
// 0x0094 (0x00DC - 0x0048)
struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
{
public:
	float                                         X;                                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartPosition;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        BlendSpace;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlendFilter                           BlendFilter;                                       // 0x0064(0x006C)(Protected, NativeAccessSpecifierProtected)
	TArray<struct FBlendSampleData>               BlendSampleDataCache;                              // 0x00D0(0x000C)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAnimNode_BlendSpacePlayer) == 0x000004, "Wrong alignment on FAnimNode_BlendSpacePlayer");
static_assert(sizeof(FAnimNode_BlendSpacePlayer) == 0x0000DC, "Wrong size on FAnimNode_BlendSpacePlayer");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, X) == 0x000048, "Member 'FAnimNode_BlendSpacePlayer::X' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, Y) == 0x00004C, "Member 'FAnimNode_BlendSpacePlayer::Y' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, Z) == 0x000050, "Member 'FAnimNode_BlendSpacePlayer::Z' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, PlayRate) == 0x000054, "Member 'FAnimNode_BlendSpacePlayer::PlayRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, bLoop) == 0x000058, "Member 'FAnimNode_BlendSpacePlayer::bLoop' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, StartPosition) == 0x00005C, "Member 'FAnimNode_BlendSpacePlayer::StartPosition' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, BlendSpace) == 0x000060, "Member 'FAnimNode_BlendSpacePlayer::BlendSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, BlendFilter) == 0x000064, "Member 'FAnimNode_BlendSpacePlayer::BlendFilter' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, BlendSampleDataCache) == 0x0000D0, "Member 'FAnimNode_BlendSpacePlayer::BlendSampleDataCache' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpaceEvaluator
// 0x0004 (0x00E0 - 0x00DC)
struct FAnimNode_BlendSpaceEvaluator final : public FAnimNode_BlendSpacePlayer
{
public:
	float                                         NormalizedTime;                                    // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_BlendSpaceEvaluator) == 0x000004, "Wrong alignment on FAnimNode_BlendSpaceEvaluator");
static_assert(sizeof(FAnimNode_BlendSpaceEvaluator) == 0x0000E0, "Wrong size on FAnimNode_BlendSpaceEvaluator");
static_assert(offsetof(FAnimNode_BlendSpaceEvaluator, NormalizedTime) == 0x0000DC, "Member 'FAnimNode_BlendSpaceEvaluator::NormalizedTime' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendListBase
// 0x0068 (0x0088 - 0x0020)
struct FAnimNode_BlendListBase : public FAnimNode_Base
{
public:
	TArray<struct FPoseLink>                      BlendPose;                                         // 0x0020(0x000C)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 BlendTime;                                         // 0x002C(0x000C)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendType;                                         // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CustomBlendCurve;                                  // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendProfile*                          BlendProfile;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAlphaBlend>                    Blends;                                            // 0x0044(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 BlendWeights;                                      // 0x0050(0x000C)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 RemainingBlendTimes;                               // 0x005C(0x000C)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         LastActiveChildIndex;                              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FBlendSampleData>               PerBoneSampleData;                                 // 0x006C(0x000C)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_78[0xC];                                       // 0x0078(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bResetChildOnActivation;                           // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendListBase) == 0x000004, "Wrong alignment on FAnimNode_BlendListBase");
static_assert(sizeof(FAnimNode_BlendListBase) == 0x000088, "Wrong size on FAnimNode_BlendListBase");
static_assert(offsetof(FAnimNode_BlendListBase, BlendPose) == 0x000020, "Member 'FAnimNode_BlendListBase::BlendPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, BlendTime) == 0x00002C, "Member 'FAnimNode_BlendListBase::BlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, BlendType) == 0x000038, "Member 'FAnimNode_BlendListBase::BlendType' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, CustomBlendCurve) == 0x00003C, "Member 'FAnimNode_BlendListBase::CustomBlendCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, BlendProfile) == 0x000040, "Member 'FAnimNode_BlendListBase::BlendProfile' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, Blends) == 0x000044, "Member 'FAnimNode_BlendListBase::Blends' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, BlendWeights) == 0x000050, "Member 'FAnimNode_BlendListBase::BlendWeights' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, RemainingBlendTimes) == 0x00005C, "Member 'FAnimNode_BlendListBase::RemainingBlendTimes' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, LastActiveChildIndex) == 0x000068, "Member 'FAnimNode_BlendListBase::LastActiveChildIndex' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, PerBoneSampleData) == 0x00006C, "Member 'FAnimNode_BlendListBase::PerBoneSampleData' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListBase, bResetChildOnActivation) == 0x000084, "Member 'FAnimNode_BlendListBase::bResetChildOnActivation' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByEnum
// 0x0010 (0x0098 - 0x0088)
struct FAnimNode_BlendListByEnum final : public FAnimNode_BlendListBase
{
public:
	TArray<int32>                                 EnumToPoseIndex;                                   // 0x0088(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         ActiveEnumValue;                                   // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendListByEnum) == 0x000004, "Wrong alignment on FAnimNode_BlendListByEnum");
static_assert(sizeof(FAnimNode_BlendListByEnum) == 0x000098, "Wrong size on FAnimNode_BlendListByEnum");
static_assert(offsetof(FAnimNode_BlendListByEnum, EnumToPoseIndex) == 0x000088, "Member 'FAnimNode_BlendListByEnum::EnumToPoseIndex' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendListByEnum, ActiveEnumValue) == 0x000094, "Member 'FAnimNode_BlendListByEnum::ActiveEnumValue' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_ApplyAdditive
// 0x0028 (0x0048 - 0x0020)
struct FAnimNode_ApplyAdditive final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Base;                                              // 0x0020(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPoseLink                              Additive;                                          // 0x002C(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x003C(0x0008)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_ApplyAdditive) == 0x000004, "Wrong alignment on FAnimNode_ApplyAdditive");
static_assert(sizeof(FAnimNode_ApplyAdditive) == 0x000048, "Wrong size on FAnimNode_ApplyAdditive");
static_assert(offsetof(FAnimNode_ApplyAdditive, Base) == 0x000020, "Member 'FAnimNode_ApplyAdditive::Base' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, Additive) == 0x00002C, "Member 'FAnimNode_ApplyAdditive::Additive' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, Alpha) == 0x000038, "Member 'FAnimNode_ApplyAdditive::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, AlphaScaleBias) == 0x00003C, "Member 'FAnimNode_ApplyAdditive::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, LODThreshold) == 0x000044, "Member 'FAnimNode_ApplyAdditive::LODThreshold' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_SkeletalControlBase
// 0x0028 (0x0048 - 0x0020)
struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
{
public:
	struct FComponentSpacePoseLink                ComponentPose;                                     // 0x0020(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0xC];                                       // 0x003C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SkeletalControlBase) == 0x000004, "Wrong alignment on FAnimNode_SkeletalControlBase");
static_assert(sizeof(FAnimNode_SkeletalControlBase) == 0x000048, "Wrong size on FAnimNode_SkeletalControlBase");
static_assert(offsetof(FAnimNode_SkeletalControlBase, ComponentPose) == 0x000020, "Member 'FAnimNode_SkeletalControlBase::ComponentPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, Alpha) == 0x00002C, "Member 'FAnimNode_SkeletalControlBase::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, AlphaScaleBias) == 0x000030, "Member 'FAnimNode_SkeletalControlBase::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, LODThreshold) == 0x000038, "Member 'FAnimNode_SkeletalControlBase::LODThreshold' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_HandIKRetargeting
// 0x0040 (0x0088 - 0x0048)
struct FAnimNode_HandIKRetargeting final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         RightHandFK;                                       // 0x0048(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftHandFK;                                        // 0x0054(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightHandIK;                                       // 0x0060(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftHandIK;                                        // 0x006C(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 IKBonesToMove;                                     // 0x0078(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         HandFKWeight;                                      // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_HandIKRetargeting) == 0x000004, "Wrong alignment on FAnimNode_HandIKRetargeting");
static_assert(sizeof(FAnimNode_HandIKRetargeting) == 0x000088, "Wrong size on FAnimNode_HandIKRetargeting");
static_assert(offsetof(FAnimNode_HandIKRetargeting, RightHandFK) == 0x000048, "Member 'FAnimNode_HandIKRetargeting::RightHandFK' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, LeftHandFK) == 0x000054, "Member 'FAnimNode_HandIKRetargeting::LeftHandFK' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, RightHandIK) == 0x000060, "Member 'FAnimNode_HandIKRetargeting::RightHandIK' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, LeftHandIK) == 0x00006C, "Member 'FAnimNode_HandIKRetargeting::LeftHandIK' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, IKBonesToMove) == 0x000078, "Member 'FAnimNode_HandIKRetargeting::IKBonesToMove' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, HandFKWeight) == 0x000084, "Member 'FAnimNode_HandIKRetargeting::HandFKWeight' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByBool
// 0x0004 (0x008C - 0x0088)
struct FAnimNode_BlendListByBool final : public FAnimNode_BlendListBase
{
public:
	bool                                          bActiveValue;                                      // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendListByBool) == 0x000004, "Wrong alignment on FAnimNode_BlendListByBool");
static_assert(sizeof(FAnimNode_BlendListByBool) == 0x00008C, "Wrong size on FAnimNode_BlendListByBool");
static_assert(offsetof(FAnimNode_BlendListByBool, bActiveValue) == 0x000088, "Member 'FAnimNode_BlendListByBool::bActiveValue' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByInt
// 0x0004 (0x008C - 0x0088)
struct FAnimNode_BlendListByInt final : public FAnimNode_BlendListBase
{
public:
	int32                                         ActiveChildIndex;                                  // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_BlendListByInt) == 0x000004, "Wrong alignment on FAnimNode_BlendListByInt");
static_assert(sizeof(FAnimNode_BlendListByInt) == 0x00008C, "Wrong size on FAnimNode_BlendListByInt");
static_assert(offsetof(FAnimNode_BlendListByInt, ActiveChildIndex) == 0x000088, "Member 'FAnimNode_BlendListByInt::ActiveChildIndex' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BoneDrivenController
// 0x0044 (0x008C - 0x0048)
struct FAnimNode_BoneDrivenController final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x0048(0x000C)(Edit, NativeAccessSpecifierPublic)
	EComponentType                                SourceComponent;                                   // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DrivingCurve;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRange;                                         // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RangeMin;                                          // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemappedMin;                                       // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemappedMax;                                       // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x0074(0x000C)(Edit, NativeAccessSpecifierPublic)
	EComponentType                                TargetComponent;                                   // 0x0080(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bAffectTargetTranslationX : 1;                     // 0x0084(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetTranslationY : 1;                     // 0x0084(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetTranslationZ : 1;                     // 0x0084(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetRotationX : 1;                        // 0x0084(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetRotationY : 1;                        // 0x0084(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetRotationZ : 1;                        // 0x0084(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetScaleX : 1;                           // 0x0084(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetScaleY : 1;                           // 0x0084(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetScaleZ : 1;                           // 0x0085(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EDrivenBoneModificationMode                   ModificationMode;                                  // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BoneDrivenController) == 0x000004, "Wrong alignment on FAnimNode_BoneDrivenController");
static_assert(sizeof(FAnimNode_BoneDrivenController) == 0x00008C, "Wrong size on FAnimNode_BoneDrivenController");
static_assert(offsetof(FAnimNode_BoneDrivenController, SourceBone) == 0x000048, "Member 'FAnimNode_BoneDrivenController::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, SourceComponent) == 0x000054, "Member 'FAnimNode_BoneDrivenController::SourceComponent' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, DrivingCurve) == 0x000058, "Member 'FAnimNode_BoneDrivenController::DrivingCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, Multiplier) == 0x00005C, "Member 'FAnimNode_BoneDrivenController::Multiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, bUseRange) == 0x000060, "Member 'FAnimNode_BoneDrivenController::bUseRange' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, RangeMin) == 0x000064, "Member 'FAnimNode_BoneDrivenController::RangeMin' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, RangeMax) == 0x000068, "Member 'FAnimNode_BoneDrivenController::RangeMax' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, RemappedMin) == 0x00006C, "Member 'FAnimNode_BoneDrivenController::RemappedMin' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, RemappedMax) == 0x000070, "Member 'FAnimNode_BoneDrivenController::RemappedMax' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, TargetBone) == 0x000074, "Member 'FAnimNode_BoneDrivenController::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, TargetComponent) == 0x000080, "Member 'FAnimNode_BoneDrivenController::TargetComponent' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, ModificationMode) == 0x000088, "Member 'FAnimNode_BoneDrivenController::ModificationMode' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_CopyPoseFromMesh
// 0x0048 (0x0068 - 0x0020)
struct FAnimNode_CopyPoseFromMesh final : public FAnimNode_Base
{
public:
	class USkeletalMeshComponent*                 SourceMeshComponent;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x44];                                      // 0x0024(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_CopyPoseFromMesh) == 0x000004, "Wrong alignment on FAnimNode_CopyPoseFromMesh");
static_assert(sizeof(FAnimNode_CopyPoseFromMesh) == 0x000068, "Wrong size on FAnimNode_CopyPoseFromMesh");
static_assert(offsetof(FAnimNode_CopyPoseFromMesh, SourceMeshComponent) == 0x000020, "Member 'FAnimNode_CopyPoseFromMesh::SourceMeshComponent' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_LayeredBoneBlend
// 0x004C (0x006C - 0x0020)
struct FAnimNode_LayeredBoneBlend final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0020(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FPoseLink>                      BlendPoses;                                        // 0x002C(0x000C)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInputBlendPose>                LayerSetup;                                        // 0x0038(0x000C)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 BlendWeights;                                      // 0x0044(0x000C)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMeshSpaceRotationBlend;                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ECurveBlendOption                             CurveBlendOption;                                  // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasRelevantPoses;                                 // 0x0052(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x19];                                      // 0x0053(0x0019)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_LayeredBoneBlend) == 0x000004, "Wrong alignment on FAnimNode_LayeredBoneBlend");
static_assert(sizeof(FAnimNode_LayeredBoneBlend) == 0x00006C, "Wrong size on FAnimNode_LayeredBoneBlend");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, BasePose) == 0x000020, "Member 'FAnimNode_LayeredBoneBlend::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, BlendPoses) == 0x00002C, "Member 'FAnimNode_LayeredBoneBlend::BlendPoses' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, LayerSetup) == 0x000038, "Member 'FAnimNode_LayeredBoneBlend::LayerSetup' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, BlendWeights) == 0x000044, "Member 'FAnimNode_LayeredBoneBlend::BlendWeights' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend) == 0x000050, "Member 'FAnimNode_LayeredBoneBlend::bMeshSpaceRotationBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, CurveBlendOption) == 0x000051, "Member 'FAnimNode_LayeredBoneBlend::CurveBlendOption' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, bHasRelevantPoses) == 0x000052, "Member 'FAnimNode_LayeredBoneBlend::bHasRelevantPoses' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.RandomPlayerSequenceEntry
// 0x0044 (0x0044 - 0x0000)
struct FRandomPlayerSequenceEntry final
{
public:
	class UAnimSequence*                          Sequence;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceToPlay;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLoopCount;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLoopCount;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPlayRate;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPlayRate;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAlphaBlend                            BlendIn;                                           // 0x0018(0x002C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomPlayerSequenceEntry) == 0x000004, "Wrong alignment on FRandomPlayerSequenceEntry");
static_assert(sizeof(FRandomPlayerSequenceEntry) == 0x000044, "Wrong size on FRandomPlayerSequenceEntry");
static_assert(offsetof(FRandomPlayerSequenceEntry, Sequence) == 0x000000, "Member 'FRandomPlayerSequenceEntry::Sequence' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, ChanceToPlay) == 0x000004, "Member 'FRandomPlayerSequenceEntry::ChanceToPlay' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, MinLoopCount) == 0x000008, "Member 'FRandomPlayerSequenceEntry::MinLoopCount' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, MaxLoopCount) == 0x00000C, "Member 'FRandomPlayerSequenceEntry::MaxLoopCount' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, MinPlayRate) == 0x000010, "Member 'FRandomPlayerSequenceEntry::MinPlayRate' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, MaxPlayRate) == 0x000014, "Member 'FRandomPlayerSequenceEntry::MaxPlayRate' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, BlendIn) == 0x000018, "Member 'FRandomPlayerSequenceEntry::BlendIn' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RandomPlayer
// 0x0048 (0x0068 - 0x0020)
struct FAnimNode_RandomPlayer final : public FAnimNode_Base
{
public:
	bool                                          bShuffleMode;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRandomPlayerSequenceEntry>     Entries;                                           // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x38];                                      // 0x0030(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RandomPlayer) == 0x000004, "Wrong alignment on FAnimNode_RandomPlayer");
static_assert(sizeof(FAnimNode_RandomPlayer) == 0x000068, "Wrong size on FAnimNode_RandomPlayer");
static_assert(offsetof(FAnimNode_RandomPlayer, bShuffleMode) == 0x000020, "Member 'FAnimNode_RandomPlayer::bShuffleMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_RandomPlayer, Entries) == 0x000024, "Member 'FAnimNode_RandomPlayer::Entries' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_MeshSpaceRefPose
// 0x0000 (0x0020 - 0x0020)
struct FAnimNode_MeshSpaceRefPose final : public FAnimNode_Base
{
};
static_assert(alignof(FAnimNode_MeshSpaceRefPose) == 0x000004, "Wrong alignment on FAnimNode_MeshSpaceRefPose");
static_assert(sizeof(FAnimNode_MeshSpaceRefPose) == 0x000020, "Wrong size on FAnimNode_MeshSpaceRefPose");

// ScriptStruct AnimGraphRuntime.AnimNode_RefPose
// 0x0004 (0x0024 - 0x0020)
struct FAnimNode_RefPose final : public FAnimNode_Base
{
public:
	ERefPoseType                                  RefPoseType;                                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RefPose) == 0x000004, "Wrong alignment on FAnimNode_RefPose");
static_assert(sizeof(FAnimNode_RefPose) == 0x000024, "Wrong size on FAnimNode_RefPose");
static_assert(offsetof(FAnimNode_RefPose, RefPoseType) == 0x000020, "Member 'FAnimNode_RefPose::RefPoseType' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_Root
// 0x000C (0x002C - 0x0020)
struct FAnimNode_Root final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Result;                                            // 0x0020(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_Root) == 0x000004, "Wrong alignment on FAnimNode_Root");
static_assert(sizeof(FAnimNode_Root) == 0x00002C, "Wrong size on FAnimNode_Root");
static_assert(offsetof(FAnimNode_Root, Result) == 0x000020, "Member 'FAnimNode_Root::Result' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RotateRootBone
// 0x0020 (0x0040 - 0x0020)
struct FAnimNode_RotateRootBone final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0020(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MeshToComponent;                                   // 0x0034(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_RotateRootBone) == 0x000004, "Wrong alignment on FAnimNode_RotateRootBone");
static_assert(sizeof(FAnimNode_RotateRootBone) == 0x000040, "Wrong size on FAnimNode_RotateRootBone");
static_assert(offsetof(FAnimNode_RotateRootBone, BasePose) == 0x000020, "Member 'FAnimNode_RotateRootBone::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotateRootBone, Pitch) == 0x00002C, "Member 'FAnimNode_RotateRootBone::Pitch' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotateRootBone, Yaw) == 0x000030, "Member 'FAnimNode_RotateRootBone::Yaw' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotateRootBone, MeshToComponent) == 0x000034, "Member 'FAnimNode_RotateRootBone::MeshToComponent' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RotationOffsetBlendSpace
// 0x0010 (0x00EC - 0x00DC)
struct FAnimNode_RotationOffsetBlendSpace final : public FAnimNode_BlendSpacePlayer
{
public:
	struct FPoseLink                              BasePose;                                          // 0x00DC(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_RotationOffsetBlendSpace) == 0x000004, "Wrong alignment on FAnimNode_RotationOffsetBlendSpace");
static_assert(sizeof(FAnimNode_RotationOffsetBlendSpace) == 0x0000EC, "Wrong size on FAnimNode_RotationOffsetBlendSpace");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, BasePose) == 0x0000DC, "Member 'FAnimNode_RotationOffsetBlendSpace::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, LODThreshold) == 0x0000E8, "Member 'FAnimNode_RotationOffsetBlendSpace::LODThreshold' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_SaveCachedPose
// 0x003C (0x005C - 0x0020)
struct FAnimNode_SaveCachedPose final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Pose;                                              // 0x0020(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x30];                                      // 0x002C(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SaveCachedPose) == 0x000004, "Wrong alignment on FAnimNode_SaveCachedPose");
static_assert(sizeof(FAnimNode_SaveCachedPose) == 0x00005C, "Wrong size on FAnimNode_SaveCachedPose");
static_assert(offsetof(FAnimNode_SaveCachedPose, Pose) == 0x000020, "Member 'FAnimNode_SaveCachedPose::Pose' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_SequenceEvaluator
// 0x000C (0x0054 - 0x0048)
struct FAnimNode_SequenceEvaluator final : public FAnimNode_AssetPlayerBase
{
public:
	class UAnimSequenceBase*                      Sequence;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplicitTime;                                      // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldLoopWhenInSyncGroup;                        // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SequenceEvaluator) == 0x000004, "Wrong alignment on FAnimNode_SequenceEvaluator");
static_assert(sizeof(FAnimNode_SequenceEvaluator) == 0x000054, "Wrong size on FAnimNode_SequenceEvaluator");
static_assert(offsetof(FAnimNode_SequenceEvaluator, Sequence) == 0x000048, "Member 'FAnimNode_SequenceEvaluator::Sequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator, ExplicitTime) == 0x00004C, "Member 'FAnimNode_SequenceEvaluator::ExplicitTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator, bShouldLoopWhenInSyncGroup) == 0x000050, "Member 'FAnimNode_SequenceEvaluator::bShouldLoopWhenInSyncGroup' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_Slot
// 0x0024 (0x0044 - 0x0020)
struct FAnimNode_Slot final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0020(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x10];                                      // 0x0034(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_Slot) == 0x000004, "Wrong alignment on FAnimNode_Slot");
static_assert(sizeof(FAnimNode_Slot) == 0x000044, "Wrong size on FAnimNode_Slot");
static_assert(offsetof(FAnimNode_Slot, Source) == 0x000020, "Member 'FAnimNode_Slot::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_Slot, SlotName) == 0x00002C, "Member 'FAnimNode_Slot::SlotName' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimationNode_TwoWayBlend
// 0x0024 (0x0044 - 0x0020)
struct FAnimationNode_TwoWayBlend final : public FAnimNode_Base
{
public:
	struct FPoseLink                              A;                                                 // 0x0020(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPoseLink                              B;                                                 // 0x002C(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x003C(0x0008)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimationNode_TwoWayBlend) == 0x000004, "Wrong alignment on FAnimationNode_TwoWayBlend");
static_assert(sizeof(FAnimationNode_TwoWayBlend) == 0x000044, "Wrong size on FAnimationNode_TwoWayBlend");
static_assert(offsetof(FAnimationNode_TwoWayBlend, A) == 0x000020, "Member 'FAnimationNode_TwoWayBlend::A' has a wrong offset!");
static_assert(offsetof(FAnimationNode_TwoWayBlend, B) == 0x00002C, "Member 'FAnimationNode_TwoWayBlend::B' has a wrong offset!");
static_assert(offsetof(FAnimationNode_TwoWayBlend, Alpha) == 0x000038, "Member 'FAnimationNode_TwoWayBlend::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimationNode_TwoWayBlend, AlphaScaleBias) == 0x00003C, "Member 'FAnimationNode_TwoWayBlend::AlphaScaleBias' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimPhysConstraintSetup
// 0x005C (0x005C - 0x0000)
struct FAnimPhysConstraintSetup final
{
public:
	EAnimPhysLinearConstraintType                 LinearXLimitType;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysLinearConstraintType                 LinearYLimitType;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysLinearConstraintType                 LinearZLimitType;                                  // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LinearAxesMin;                                     // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LinearAxesMax;                                     // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAnimPhysAngularConstraintType                AngularConstraintType;                             // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysTwistAxis                            TwistAxis;                                         // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConeAngle;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularXAngle;                                     // 0x0024(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularYAngle;                                     // 0x0028(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularZAngle;                                     // 0x002C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularLimitsMin;                                  // 0x0030(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AngularLimitsMax;                                  // 0x003C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAnimPhysTwistAxis                            AngularTargetAxis;                                 // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AngularTarget;                                     // 0x004C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLinearFullyLocked;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimPhysConstraintSetup) == 0x000004, "Wrong alignment on FAnimPhysConstraintSetup");
static_assert(sizeof(FAnimPhysConstraintSetup) == 0x00005C, "Wrong size on FAnimPhysConstraintSetup");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearXLimitType) == 0x000000, "Member 'FAnimPhysConstraintSetup::LinearXLimitType' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearYLimitType) == 0x000001, "Member 'FAnimPhysConstraintSetup::LinearYLimitType' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearZLimitType) == 0x000002, "Member 'FAnimPhysConstraintSetup::LinearZLimitType' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearAxesMin) == 0x000004, "Member 'FAnimPhysConstraintSetup::LinearAxesMin' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearAxesMax) == 0x000010, "Member 'FAnimPhysConstraintSetup::LinearAxesMax' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularConstraintType) == 0x00001C, "Member 'FAnimPhysConstraintSetup::AngularConstraintType' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, TwistAxis) == 0x00001D, "Member 'FAnimPhysConstraintSetup::TwistAxis' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, ConeAngle) == 0x000020, "Member 'FAnimPhysConstraintSetup::ConeAngle' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularXAngle) == 0x000024, "Member 'FAnimPhysConstraintSetup::AngularXAngle' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularYAngle) == 0x000028, "Member 'FAnimPhysConstraintSetup::AngularYAngle' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularZAngle) == 0x00002C, "Member 'FAnimPhysConstraintSetup::AngularZAngle' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularLimitsMin) == 0x000030, "Member 'FAnimPhysConstraintSetup::AngularLimitsMin' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularLimitsMax) == 0x00003C, "Member 'FAnimPhysConstraintSetup::AngularLimitsMax' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularTargetAxis) == 0x000048, "Member 'FAnimPhysConstraintSetup::AngularTargetAxis' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularTarget) == 0x00004C, "Member 'FAnimPhysConstraintSetup::AngularTarget' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, bLinearFullyLocked) == 0x000058, "Member 'FAnimPhysConstraintSetup::bLinearFullyLocked' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimPhysPlanarLimit
// 0x0040 (0x0040 - 0x0000)
struct FAnimPhysPlanarLimit final
{
public:
	struct FBoneReference                         DrivingBone;                                       // 0x0000(0x000C)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PlaneTransform;                                    // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimPhysPlanarLimit) == 0x000010, "Wrong alignment on FAnimPhysPlanarLimit");
static_assert(sizeof(FAnimPhysPlanarLimit) == 0x000040, "Wrong size on FAnimPhysPlanarLimit");
static_assert(offsetof(FAnimPhysPlanarLimit, DrivingBone) == 0x000000, "Member 'FAnimPhysPlanarLimit::DrivingBone' has a wrong offset!");
static_assert(offsetof(FAnimPhysPlanarLimit, PlaneTransform) == 0x000010, "Member 'FAnimPhysPlanarLimit::PlaneTransform' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_AnimDynamics
// 0x014C (0x0194 - 0x0048)
struct FAnimNode_AnimDynamics final : public FAnimNode_SkeletalControlBase
{
public:
	bool                                          bChain;                                            // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         BoundBone;                                         // 0x004C(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBoneReference                         ChainEnd;                                          // 0x0058(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtents;                                        // 0x0064(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LocalJointOffset;                                  // 0x0070(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLinearSpring;                                     // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAngularSpring;                                    // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinearSpringConstant;                              // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSpringConstant;                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWind;                                       // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindScale;                                         // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLinearDamping;                            // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinearDampingOverride;                             // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAngularDamping;                           // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngularDampingOverride;                            // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoUpdate;                                         // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bDoEval;                                           // 0x00A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumSolverIterationsPreUpdate;                      // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSolverIterationsPostUpdate;                     // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimPhysConstraintSetup               ConstraintSetup;                                   // 0x00B0(0x005C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUsePlanarLimit;                                   // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAnimPhysPlanarLimit>           PlanarLimits;                                      // 0x0110(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EAnimPhysCollisionType                        CollisionType;                                     // 0x011C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereCollisionRadius;                             // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x70];                                     // 0x0124(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_AnimDynamics) == 0x000004, "Wrong alignment on FAnimNode_AnimDynamics");
static_assert(sizeof(FAnimNode_AnimDynamics) == 0x000194, "Wrong size on FAnimNode_AnimDynamics");
static_assert(offsetof(FAnimNode_AnimDynamics, bChain) == 0x000048, "Member 'FAnimNode_AnimDynamics::bChain' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, BoundBone) == 0x00004C, "Member 'FAnimNode_AnimDynamics::BoundBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, ChainEnd) == 0x000058, "Member 'FAnimNode_AnimDynamics::ChainEnd' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, BoxExtents) == 0x000064, "Member 'FAnimNode_AnimDynamics::BoxExtents' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, LocalJointOffset) == 0x000070, "Member 'FAnimNode_AnimDynamics::LocalJointOffset' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, GravityScale) == 0x00007C, "Member 'FAnimNode_AnimDynamics::GravityScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bLinearSpring) == 0x000080, "Member 'FAnimNode_AnimDynamics::bLinearSpring' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bAngularSpring) == 0x000081, "Member 'FAnimNode_AnimDynamics::bAngularSpring' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, LinearSpringConstant) == 0x000084, "Member 'FAnimNode_AnimDynamics::LinearSpringConstant' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, AngularSpringConstant) == 0x000088, "Member 'FAnimNode_AnimDynamics::AngularSpringConstant' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bEnableWind) == 0x00008C, "Member 'FAnimNode_AnimDynamics::bEnableWind' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, WindScale) == 0x000090, "Member 'FAnimNode_AnimDynamics::WindScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bOverrideLinearDamping) == 0x000094, "Member 'FAnimNode_AnimDynamics::bOverrideLinearDamping' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, LinearDampingOverride) == 0x000098, "Member 'FAnimNode_AnimDynamics::LinearDampingOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bOverrideAngularDamping) == 0x00009C, "Member 'FAnimNode_AnimDynamics::bOverrideAngularDamping' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, AngularDampingOverride) == 0x0000A0, "Member 'FAnimNode_AnimDynamics::AngularDampingOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bDoUpdate) == 0x0000A4, "Member 'FAnimNode_AnimDynamics::bDoUpdate' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bDoEval) == 0x0000A5, "Member 'FAnimNode_AnimDynamics::bDoEval' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate) == 0x0000A8, "Member 'FAnimNode_AnimDynamics::NumSolverIterationsPreUpdate' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate) == 0x0000AC, "Member 'FAnimNode_AnimDynamics::NumSolverIterationsPostUpdate' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, ConstraintSetup) == 0x0000B0, "Member 'FAnimNode_AnimDynamics::ConstraintSetup' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, bUsePlanarLimit) == 0x00010C, "Member 'FAnimNode_AnimDynamics::bUsePlanarLimit' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, PlanarLimits) == 0x000110, "Member 'FAnimNode_AnimDynamics::PlanarLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, CollisionType) == 0x00011C, "Member 'FAnimNode_AnimDynamics::CollisionType' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, SphereCollisionRadius) == 0x000120, "Member 'FAnimNode_AnimDynamics::SphereCollisionRadius' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_CopyBone
// 0x001C (0x0064 - 0x0048)
struct FAnimNode_CopyBone final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x0048(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x0054(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCopyTranslation;                                  // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCopyRotation;                                     // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCopyScale;                                        // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBoneControlSpace                             ControlSpace;                                      // 0x0063(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_CopyBone) == 0x000004, "Wrong alignment on FAnimNode_CopyBone");
static_assert(sizeof(FAnimNode_CopyBone) == 0x000064, "Wrong size on FAnimNode_CopyBone");
static_assert(offsetof(FAnimNode_CopyBone, SourceBone) == 0x000048, "Member 'FAnimNode_CopyBone::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, TargetBone) == 0x000054, "Member 'FAnimNode_CopyBone::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, bCopyTranslation) == 0x000060, "Member 'FAnimNode_CopyBone::bCopyTranslation' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, bCopyRotation) == 0x000061, "Member 'FAnimNode_CopyBone::bCopyRotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, bCopyScale) == 0x000062, "Member 'FAnimNode_CopyBone::bCopyScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, ControlSpace) == 0x000063, "Member 'FAnimNode_CopyBone::ControlSpace' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_Fabrik
// 0x0078 (0x00C0 - 0x0048)
struct FAnimNode_Fabrik final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             EffectorTransform;                                 // 0x0050(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBoneControlSpace                             EffectorTransformSpace;                            // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         EffectorTransformBone;                             // 0x0084(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EBoneRotationSource                           EffectorRotationSource;                            // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         TipBone;                                           // 0x0094(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBoneReference                         RootBone;                                          // 0x00A0(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDebugDraw;                                  // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0xB];                                       // 0x00B5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_Fabrik) == 0x000010, "Wrong alignment on FAnimNode_Fabrik");
static_assert(sizeof(FAnimNode_Fabrik) == 0x0000C0, "Wrong size on FAnimNode_Fabrik");
static_assert(offsetof(FAnimNode_Fabrik, EffectorTransform) == 0x000050, "Member 'FAnimNode_Fabrik::EffectorTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, EffectorTransformSpace) == 0x000080, "Member 'FAnimNode_Fabrik::EffectorTransformSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, EffectorTransformBone) == 0x000084, "Member 'FAnimNode_Fabrik::EffectorTransformBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, EffectorRotationSource) == 0x000090, "Member 'FAnimNode_Fabrik::EffectorRotationSource' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, TipBone) == 0x000094, "Member 'FAnimNode_Fabrik::TipBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, RootBone) == 0x0000A0, "Member 'FAnimNode_Fabrik::RootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, Precision) == 0x0000AC, "Member 'FAnimNode_Fabrik::Precision' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, MaxIterations) == 0x0000B0, "Member 'FAnimNode_Fabrik::MaxIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, bEnableDebugDraw) == 0x0000B4, "Member 'FAnimNode_Fabrik::bEnableDebugDraw' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_LookAt
// 0x0064 (0x00AC - 0x0048)
struct FAnimNode_LookAt final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x0048(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBoneReference                         LookAtBone;                                        // 0x0054(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                LookAtLocation;                                    // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAxisOption                                   LookAtAxis;                                        // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLookUpAxis;                                    // 0x006D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAxisOption                                   LookUpAxis;                                        // 0x006E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F[0x1];                                       // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookAtClamp;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInterpolationBlend                           InterpolationType;                                 // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpolationTime;                                 // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationTriggerThreashold;                    // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDebug;                                      // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x2B];                                      // 0x0081(0x002B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_LookAt) == 0x000004, "Wrong alignment on FAnimNode_LookAt");
static_assert(sizeof(FAnimNode_LookAt) == 0x0000AC, "Wrong size on FAnimNode_LookAt");
static_assert(offsetof(FAnimNode_LookAt, BoneToModify) == 0x000048, "Member 'FAnimNode_LookAt::BoneToModify' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAtBone) == 0x000054, "Member 'FAnimNode_LookAt::LookAtBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAtLocation) == 0x000060, "Member 'FAnimNode_LookAt::LookAtLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAtAxis) == 0x00006C, "Member 'FAnimNode_LookAt::LookAtAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, bUseLookUpAxis) == 0x00006D, "Member 'FAnimNode_LookAt::bUseLookUpAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookUpAxis) == 0x00006E, "Member 'FAnimNode_LookAt::LookUpAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAtClamp) == 0x000070, "Member 'FAnimNode_LookAt::LookAtClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, InterpolationType) == 0x000074, "Member 'FAnimNode_LookAt::InterpolationType' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, InterpolationTime) == 0x000078, "Member 'FAnimNode_LookAt::InterpolationTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, InterpolationTriggerThreashold) == 0x00007C, "Member 'FAnimNode_LookAt::InterpolationTriggerThreashold' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, bEnableDebug) == 0x000080, "Member 'FAnimNode_LookAt::bEnableDebug' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_ModifyBone
// 0x0038 (0x0080 - 0x0048)
struct FAnimNode_ModifyBone final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x0048(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                Translation;                                       // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBoneModificationMode                         TranslationMode;                                   // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         RotationMode;                                      // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         ScaleMode;                                         // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             TranslationSpace;                                  // 0x007B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             RotationSpace;                                     // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             ScaleSpace;                                        // 0x007D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ModifyBone) == 0x000004, "Wrong alignment on FAnimNode_ModifyBone");
static_assert(sizeof(FAnimNode_ModifyBone) == 0x000080, "Wrong size on FAnimNode_ModifyBone");
static_assert(offsetof(FAnimNode_ModifyBone, BoneToModify) == 0x000048, "Member 'FAnimNode_ModifyBone::BoneToModify' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, Translation) == 0x000054, "Member 'FAnimNode_ModifyBone::Translation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, Rotation) == 0x000060, "Member 'FAnimNode_ModifyBone::Rotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, Scale) == 0x00006C, "Member 'FAnimNode_ModifyBone::Scale' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, TranslationMode) == 0x000078, "Member 'FAnimNode_ModifyBone::TranslationMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, RotationMode) == 0x000079, "Member 'FAnimNode_ModifyBone::RotationMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, ScaleMode) == 0x00007A, "Member 'FAnimNode_ModifyBone::ScaleMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, TranslationSpace) == 0x00007B, "Member 'FAnimNode_ModifyBone::TranslationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, RotationSpace) == 0x00007C, "Member 'FAnimNode_ModifyBone::RotationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, ScaleSpace) == 0x00007D, "Member 'FAnimNode_ModifyBone::ScaleSpace' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_ObserveBone
// 0x0034 (0x007C - 0x0048)
struct FAnimNode_ObserveBone final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToObserve;                                     // 0x0048(0x000C)(Edit, NativeAccessSpecifierPublic)
	EBoneControlSpace                             DisplaySpace;                                      // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativeToRefPose;                                // 0x0055(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Translation;                                       // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_ObserveBone) == 0x000004, "Wrong alignment on FAnimNode_ObserveBone");
static_assert(sizeof(FAnimNode_ObserveBone) == 0x00007C, "Wrong size on FAnimNode_ObserveBone");
static_assert(offsetof(FAnimNode_ObserveBone, BoneToObserve) == 0x000048, "Member 'FAnimNode_ObserveBone::BoneToObserve' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, DisplaySpace) == 0x000054, "Member 'FAnimNode_ObserveBone::DisplaySpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, bRelativeToRefPose) == 0x000055, "Member 'FAnimNode_ObserveBone::bRelativeToRefPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, Translation) == 0x000058, "Member 'FAnimNode_ObserveBone::Translation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, Rotation) == 0x000064, "Member 'FAnimNode_ObserveBone::Rotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, Scale) == 0x000070, "Member 'FAnimNode_ObserveBone::Scale' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RotationMultiplier
// 0x0020 (0x0068 - 0x0048)
struct FAnimNode_RotationMultiplier final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         TargetBone;                                        // 0x0048(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBoneReference                         SourceBone;                                        // 0x0054(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneAxis                                     RotationAxisToRefer;                               // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAdditive;                                       // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RotationMultiplier) == 0x000004, "Wrong alignment on FAnimNode_RotationMultiplier");
static_assert(sizeof(FAnimNode_RotationMultiplier) == 0x000068, "Wrong size on FAnimNode_RotationMultiplier");
static_assert(offsetof(FAnimNode_RotationMultiplier, TargetBone) == 0x000048, "Member 'FAnimNode_RotationMultiplier::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationMultiplier, SourceBone) == 0x000054, "Member 'FAnimNode_RotationMultiplier::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationMultiplier, Multiplier) == 0x000060, "Member 'FAnimNode_RotationMultiplier::Multiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationMultiplier, RotationAxisToRefer) == 0x000064, "Member 'FAnimNode_RotationMultiplier::RotationAxisToRefer' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationMultiplier, bIsAdditive) == 0x000065, "Member 'FAnimNode_RotationMultiplier::bIsAdditive' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_SpringBone
// 0x0050 (0x0098 - 0x0048)
struct FAnimNode_SpringBone final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         SpringBone;                                        // 0x0048(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bLimitDisplacement;                                // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDisplacement;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringStiffness;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringDamping;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorResetThresh;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoZSpring;                                        // 0x0068(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTranslateX;                                       // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTranslateY;                                       // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTranslateZ;                                       // 0x006B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRotateX;                                          // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRotateY;                                          // 0x006D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRotateZ;                                          // 0x006E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F[0x29];                                      // 0x006F(0x0029)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SpringBone) == 0x000004, "Wrong alignment on FAnimNode_SpringBone");
static_assert(sizeof(FAnimNode_SpringBone) == 0x000098, "Wrong size on FAnimNode_SpringBone");
static_assert(offsetof(FAnimNode_SpringBone, SpringBone) == 0x000048, "Member 'FAnimNode_SpringBone::SpringBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bLimitDisplacement) == 0x000054, "Member 'FAnimNode_SpringBone::bLimitDisplacement' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, MaxDisplacement) == 0x000058, "Member 'FAnimNode_SpringBone::MaxDisplacement' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, SpringStiffness) == 0x00005C, "Member 'FAnimNode_SpringBone::SpringStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, SpringDamping) == 0x000060, "Member 'FAnimNode_SpringBone::SpringDamping' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, ErrorResetThresh) == 0x000064, "Member 'FAnimNode_SpringBone::ErrorResetThresh' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bNoZSpring) == 0x000068, "Member 'FAnimNode_SpringBone::bNoZSpring' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bTranslateX) == 0x000069, "Member 'FAnimNode_SpringBone::bTranslateX' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bTranslateY) == 0x00006A, "Member 'FAnimNode_SpringBone::bTranslateY' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bTranslateZ) == 0x00006B, "Member 'FAnimNode_SpringBone::bTranslateZ' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bRotateX) == 0x00006C, "Member 'FAnimNode_SpringBone::bRotateX' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bRotateY) == 0x00006D, "Member 'FAnimNode_SpringBone::bRotateY' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, bRotateZ) == 0x00006E, "Member 'FAnimNode_SpringBone::bRotateZ' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_Trail
// 0x00F8 (0x0140 - 0x0048)
struct alignas(0x10) FAnimNode_Trail final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         TrailBone;                                         // 0x0048(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         ChainLength;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         ChainBoneAxis;                                     // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertChainBoneAxis;                              // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TrailRelaxation;                                   // 0x005C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     TrailRelaxationSpeed;                              // 0x0060(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bLimitStretch;                                     // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StretchLimit;                                      // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FakeVelocity;                                      // 0x00C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bActorSpaceFakeVel;                                // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         BaseJoint;                                         // 0x00D0(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x64];                                      // 0x00DC(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_Trail) == 0x000010, "Wrong alignment on FAnimNode_Trail");
static_assert(sizeof(FAnimNode_Trail) == 0x000140, "Wrong size on FAnimNode_Trail");
static_assert(offsetof(FAnimNode_Trail, TrailBone) == 0x000048, "Member 'FAnimNode_Trail::TrailBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, ChainLength) == 0x000054, "Member 'FAnimNode_Trail::ChainLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, ChainBoneAxis) == 0x000058, "Member 'FAnimNode_Trail::ChainBoneAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, bInvertChainBoneAxis) == 0x000059, "Member 'FAnimNode_Trail::bInvertChainBoneAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, TrailRelaxation) == 0x00005C, "Member 'FAnimNode_Trail::TrailRelaxation' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, TrailRelaxationSpeed) == 0x000060, "Member 'FAnimNode_Trail::TrailRelaxationSpeed' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, bLimitStretch) == 0x0000B8, "Member 'FAnimNode_Trail::bLimitStretch' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, StretchLimit) == 0x0000BC, "Member 'FAnimNode_Trail::StretchLimit' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, FakeVelocity) == 0x0000C0, "Member 'FAnimNode_Trail::FakeVelocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, bActorSpaceFakeVel) == 0x0000CC, "Member 'FAnimNode_Trail::bActorSpaceFakeVel' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, BaseJoint) == 0x0000D0, "Member 'FAnimNode_Trail::BaseJoint' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_TwoBoneIK
// 0x0044 (0x008C - 0x0048)
struct FAnimNode_TwoBoneIK final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         IKBone;                                            // 0x0048(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                EffectorLocation;                                  // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                JointTargetLocation;                               // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              StretchLimits;                                     // 0x006C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   EffectorSpaceBoneName;                             // 0x0074(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bTakeRotationFromEffectorSpace : 1;                // 0x007C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bMaintainEffectorRelRot : 1;                       // 0x007C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bAllowStretching : 1;                              // 0x007C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EBoneControlSpace                             EffectorLocationSpace;                             // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             JointTargetLocationSpace;                          // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   JointTargetSpaceBoneName;                          // 0x0084(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_TwoBoneIK) == 0x000004, "Wrong alignment on FAnimNode_TwoBoneIK");
static_assert(sizeof(FAnimNode_TwoBoneIK) == 0x00008C, "Wrong size on FAnimNode_TwoBoneIK");
static_assert(offsetof(FAnimNode_TwoBoneIK, IKBone) == 0x000048, "Member 'FAnimNode_TwoBoneIK::IKBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, EffectorLocation) == 0x000054, "Member 'FAnimNode_TwoBoneIK::EffectorLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, JointTargetLocation) == 0x000060, "Member 'FAnimNode_TwoBoneIK::JointTargetLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, StretchLimits) == 0x00006C, "Member 'FAnimNode_TwoBoneIK::StretchLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, EffectorSpaceBoneName) == 0x000074, "Member 'FAnimNode_TwoBoneIK::EffectorSpaceBoneName' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, EffectorLocationSpace) == 0x000080, "Member 'FAnimNode_TwoBoneIK::EffectorLocationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, JointTargetLocationSpace) == 0x000081, "Member 'FAnimNode_TwoBoneIK::JointTargetLocationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, JointTargetSpaceBoneName) == 0x000084, "Member 'FAnimNode_TwoBoneIK::JointTargetSpaceBoneName' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_WheelHandler
// 0x0010 (0x0058 - 0x0048)
struct FAnimNode_WheelHandler final : public FAnimNode_SkeletalControlBase
{
public:
	class UWheeledVehicleMovementComponent*       VehicleSimComponent;                               // 0x0048(0x0004)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0xC];                                       // 0x004C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_WheelHandler) == 0x000004, "Wrong alignment on FAnimNode_WheelHandler");
static_assert(sizeof(FAnimNode_WheelHandler) == 0x000058, "Wrong size on FAnimNode_WheelHandler");
static_assert(offsetof(FAnimNode_WheelHandler, VehicleSimComponent) == 0x000048, "Member 'FAnimNode_WheelHandler::VehicleSimComponent' has a wrong offset!");

}

#pragma pack(pop)
