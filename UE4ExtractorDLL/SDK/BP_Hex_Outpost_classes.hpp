#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Hex_Outpost

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_Hex_PARENT_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass BP_Hex_Outpost.BP_Hex_Outpost_C
// 0x003C (0x0728 - 0x06EC)
class ABP_Hex_Outpost_C final : public ABP_Hex_PARENT_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Hex_Outpost_C;                   // 0x06EC(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   MeshFlagpole;                                      // 0x06F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   MeshCommandCenterFlag;                             // 0x06F4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   StaticMesh3;                                       // 0x06F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   StaticMesh2;                                       // 0x06FC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   MeshTowerBall;                                     // 0x0700(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   TestProp_RadarTower;                               // 0x0704(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   SM_Outpost_StorageVault_None;                      // 0x0708(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   StaticMesh1_0;                                     // 0x070C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   SM_Outpost_HarvestingOptimizer_None;               // 0x0710(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   SM_Outpost_Fabricator_None;                        // 0x0714(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   SM_Outpost_CraftingTable_None;                     // 0x0718(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   StaticMesh_0;                                      // 0x071C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   SM_Outpost_ShieldExtender;                         // 0x0720(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   SM_Outpost_Core;                                   // 0x0724(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)

public:
	void ExecuteUbergraph_BP_Hex_Outpost(int32 EntryPoint);
	void ActivateOutpost();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Hex_Outpost_C">();
	}
	static class ABP_Hex_Outpost_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Hex_Outpost_C>();
	}
};
static_assert(alignof(ABP_Hex_Outpost_C) == 0x000004, "Wrong alignment on ABP_Hex_Outpost_C");
static_assert(sizeof(ABP_Hex_Outpost_C) == 0x000728, "Wrong size on ABP_Hex_Outpost_C");
static_assert(offsetof(ABP_Hex_Outpost_C, UberGraphFrame_BP_Hex_Outpost_C) == 0x0006EC, "Member 'ABP_Hex_Outpost_C::UberGraphFrame_BP_Hex_Outpost_C' has a wrong offset!");
static_assert(offsetof(ABP_Hex_Outpost_C, MeshFlagpole) == 0x0006F0, "Member 'ABP_Hex_Outpost_C::MeshFlagpole' has a wrong offset!");
static_assert(offsetof(ABP_Hex_Outpost_C, MeshCommandCenterFlag) == 0x0006F4, "Member 'ABP_Hex_Outpost_C::MeshCommandCenterFlag' has a wrong offset!");
static_assert(offsetof(ABP_Hex_Outpost_C, StaticMesh3) == 0x0006F8, "Member 'ABP_Hex_Outpost_C::StaticMesh3' has a wrong offset!");
static_assert(offsetof(ABP_Hex_Outpost_C, StaticMesh2) == 0x0006FC, "Member 'ABP_Hex_Outpost_C::StaticMesh2' has a wrong offset!");
static_assert(offsetof(ABP_Hex_Outpost_C, MeshTowerBall) == 0x000700, "Member 'ABP_Hex_Outpost_C::MeshTowerBall' has a wrong offset!");
static_assert(offsetof(ABP_Hex_Outpost_C, TestProp_RadarTower) == 0x000704, "Member 'ABP_Hex_Outpost_C::TestProp_RadarTower' has a wrong offset!");
static_assert(offsetof(ABP_Hex_Outpost_C, SM_Outpost_StorageVault_None) == 0x000708, "Member 'ABP_Hex_Outpost_C::SM_Outpost_StorageVault_None' has a wrong offset!");
static_assert(offsetof(ABP_Hex_Outpost_C, StaticMesh1_0) == 0x00070C, "Member 'ABP_Hex_Outpost_C::StaticMesh1_0' has a wrong offset!");
static_assert(offsetof(ABP_Hex_Outpost_C, SM_Outpost_HarvestingOptimizer_None) == 0x000710, "Member 'ABP_Hex_Outpost_C::SM_Outpost_HarvestingOptimizer_None' has a wrong offset!");
static_assert(offsetof(ABP_Hex_Outpost_C, SM_Outpost_Fabricator_None) == 0x000714, "Member 'ABP_Hex_Outpost_C::SM_Outpost_Fabricator_None' has a wrong offset!");
static_assert(offsetof(ABP_Hex_Outpost_C, SM_Outpost_CraftingTable_None) == 0x000718, "Member 'ABP_Hex_Outpost_C::SM_Outpost_CraftingTable_None' has a wrong offset!");
static_assert(offsetof(ABP_Hex_Outpost_C, StaticMesh_0) == 0x00071C, "Member 'ABP_Hex_Outpost_C::StaticMesh_0' has a wrong offset!");
static_assert(offsetof(ABP_Hex_Outpost_C, SM_Outpost_ShieldExtender) == 0x000720, "Member 'ABP_Hex_Outpost_C::SM_Outpost_ShieldExtender' has a wrong offset!");
static_assert(offsetof(ABP_Hex_Outpost_C, SM_Outpost_Core) == 0x000724, "Member 'ABP_Hex_Outpost_C::SM_Outpost_Core' has a wrong offset!");

}

#pragma pack(pop)
