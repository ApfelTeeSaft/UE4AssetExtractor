#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Hex_PARENT

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass BP_Hex_PARENT.BP_Hex_PARENT_C
// 0x036C (0x06EC - 0x0380)
class ABP_Hex_PARENT_C : public AFortTheaterMapTile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0380(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Mission;                                           // 0x0384(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   S_HexMouseover01;                                  // 0x0388(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               P_Cine_Weapon_Beam_01;                             // 0x038C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UTextRenderComponent*                   NW;                                                // 0x0390(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UTextRenderComponent*                   SW;                                                // 0x0394(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UTextRenderComponent*                   S;                                                 // 0x0398(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UTextRenderComponent*                   SE;                                                // 0x039C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UTextRenderComponent*                   NE;                                                // 0x03A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UTextRenderComponent*                   N;                                                 // 0x03A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UTextRenderComponent*                   DebugTextRenderType;                               // 0x03A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   S_Hex_ZoneMarker01;                                // 0x03AC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UMaterialBillboardComponent*            MissionIconMesh;                                   // 0x03B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UTextRenderComponent*                   DebugTextRenderZone;                               // 0x03B4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UTextRenderComponent*                   DebugTextRenderState;                              // 0x03B8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   S_HexBase_CloudLarge;                              // 0x03BC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   S_HexBase_CloudSmall;                              // 0x03C0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UPointLightComponent*                   PointLight3;                                       // 0x03C4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UPointLightComponent*                   PointLight2;                                       // 0x03C8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UPointLightComponent*                   PointLight1;                                       // 0x03CC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        LightningAudio;                                    // 0x03D0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               lightning2;                                        // 0x03D4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Lightning;                                         // 0x03D8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   LightningMesh;                                     // 0x03DC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USceneComponent*                        LightningRoot;                                     // 0x03E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UWidgetComponent*                       Widget;                                            // 0x03E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USpotLightComponent*                    MouseoverLight;                                    // 0x03E8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   MissionPingMesh;                                   // 0x03EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        HexTileSound;                                      // 0x03F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         Timeline_12_NewTrack_3_9A9B376A4CE242AE90C66285F93293B7; // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_12_NewTrack_2_9A9B376A4CE242AE90C66285F93293B7; // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_12__Direction_9A9B376A4CE242AE90C66285F93293B7; // 0x03FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FD[0x3];                                      // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_12;                                       // 0x0400(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_11_NewTrack_1_ABB0E704455E70C66E9A21979F9D10BE; // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_11_NewTrack_0_ABB0E704455E70C66E9A21979F9D10BE; // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_11__Direction_ABB0E704455E70C66E9A21979F9D10BE; // 0x040C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_40D[0x3];                                      // 0x040D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_11;                                       // 0x0410(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_10_sizer_B74717A84E5DD929C04CAEAB4FDCCCCE; // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_10__Direction_B74717A84E5DD929C04CAEAB4FDCCCCE; // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419[0x3];                                      // 0x0419(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_10;                                       // 0x041C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_9_NewTrack_5_EB671039412778D781423EA0609CA999; // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_9__Direction_EB671039412778D781423EA0609CA999; // 0x0424(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_425[0x3];                                      // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_9;                                        // 0x0428(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_8_TMAop_88BBDA7046174AC5CBC29994DBD8817F; // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_8_TMAsize_88BBDA7046174AC5CBC29994DBD8817F; // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_8__Direction_88BBDA7046174AC5CBC29994DBD8817F; // 0x0434(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_435[0x3];                                      // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_8;                                        // 0x0438(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_7_TMAop_284B2D2D482F9795EC3A85A15CD36FBC; // 0x043C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_7_TMAsize_284B2D2D482F9795EC3A85A15CD36FBC; // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_7__Direction_284B2D2D482F9795EC3A85A15CD36FBC; // 0x0444(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_445[0x3];                                      // 0x0445(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_7;                                        // 0x0448(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_6_Selection_14F1BA454836EBA6C4AA60B6C3CFAB08; // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_6_revealmove_14F1BA454836EBA6C4AA60B6C3CFAB08; // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_6_reveal_14F1BA454836EBA6C4AA60B6C3CFAB08; // 0x0454(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_6__Direction_14F1BA454836EBA6C4AA60B6C3CFAB08; // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_459[0x3];                                      // 0x0459(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_6;                                        // 0x045C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_5_NewTrack_1_114F0FED4F202641E052DC910D8B5510; // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_5_MoveDown_114F0FED4F202641E052DC910D8B5510; // 0x0464(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_5__Direction_114F0FED4F202641E052DC910D8B5510; // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469[0x3];                                      // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_5;                                        // 0x046C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_4_NewTrack_0_84B454B948490561BC36DF883C082A78; // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_4_MoveUp_84B454B948490561BC36DF883C082A78; // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_4__Direction_84B454B948490561BC36DF883C082A78; // 0x0478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_4;                                        // 0x047C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_3_LowerOp_2907ADC34E2DB4308AC8BBAD3416C4E2; // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_3_SelectScale_2907ADC34E2DB4308AC8BBAD3416C4E2; // 0x0484(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_3_SelectFadeTrack_2907ADC34E2DB4308AC8BBAD3416C4E2; // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_3__Direction_2907ADC34E2DB4308AC8BBAD3416C4E2; // 0x048C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_3;                                        // 0x0490(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_2_Flash1_B9D819284D23B645F0DD4AB375C523CA; // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_2__Direction_B9D819284D23B645F0DD4AB375C523CA; // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_499[0x3];                                      // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_2;                                        // 0x049C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_1_Flash1_26547AAF4320D341B2E725B9A8F73E20; // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_1__Direction_26547AAF4320D341B2E725B9A8F73E20; // 0x04A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A5[0x3];                                      // 0x04A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x04A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_0_TimeOffset_6E6B0ED44383B4DC665F61BC2F514E17; // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_0_Flash1_6E6B0ED44383B4DC665F61BC2F514E17; // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_0__Direction_6E6B0ED44383B4DC665F61BC2F514E17; // 0x04B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B5[0x3];                                      // 0x04B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x04B8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               FogMID;                                            // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                   FogMesh;                                           // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                   CloudLvl1;                                         // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                   CloudLvl2;                                         // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               CloudLvl1MID;                                      // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               CloudLvl2MID;                                      // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                   CloudLvl1b;                                        // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               CloudLvl1bMID;                                     // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFading;                                          // 0x04DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DD[0x3];                                      // 0x04DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        HexAudioComponent;                                 // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             HexMapSound;                                       // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Delay;                                             // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LightningActive;                                   // 0x04EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Flash1done;                                        // 0x04ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Flash2done;                                        // 0x04EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Flash3done;                                        // 0x04EF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsUnhidden;                                        // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F1[0x3];                                      // 0x04F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StormChance;                                       // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               LightningMID;                                      // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               MissionSelectedMID;                                // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UStaticMesh*>                    Hex_Deco_Meshes;                                   // 0x0500(0x000C)(Edit, BlueprintVisible, ZeroConstructor)
	class UStaticMeshComponent*                   HexCliffMesh;                                      // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UStaticMesh*>                    Hex_Base_Meshes;                                   // 0x0510(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UStaticMesh*                            TargetBaseMesh;                                    // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         RandomIndex;                                       // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   SpawnLight;                                        // 0x0524(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   DieBolt;                                           // 0x052C(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   DieBolt2;                                          // 0x0534(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   DieBolt_01;                                        // 0x053C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   SpawnLight_01;                                     // 0x0544(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             LightningSound;                                    // 0x054C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               HexDecoMID;                                        // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                   HexDecoMesh;                                       // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MouseOver;                                         // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_559[0x3];                                      // 0x0559(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MissionPingMID;                                    // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MissionSelected;                                   // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TileIsPlayable;                                    // 0x0561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_562[0x2];                                      // 0x0562(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMesh*>                    GreyHexDecoMeshes;                                 // 0x0564(0x000C)(Edit, BlueprintVisible, ZeroConstructor)
	class UStaticMeshComponent*                   GreyHexDecoMesh;                                   // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               HexBaseMID;                                        // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           ThreatLevelLightColor;                             // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsQuickplayMission;                                // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InitialRevealDelay;                                // 0x0589(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          dummy;                                             // 0x058A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58B[0x1];                                      // 0x058B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MissionMarkerMID;                                  // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Focused;                                           // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_591[0x3];                                      // 0x0591(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ThreatLevelColor;                                  // 0x0594(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           ThreatLevelColor2;                                 // 0x05A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           SelectedLocationHolderOld;                         // 0x05B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           SelectedLocationHolderNew;                         // 0x05C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               HexBaseFalloffMID;                                 // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TileIsLocked;                                      // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TileIsHidden;                                      // 0x05D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsOutpost;                                         // 0x05DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5DB[0x1];                                      // 0x05DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CloudSmallMID;                                     // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               CloudLargeMID;                                     // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TileIsVaildMission;                                // 0x05E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E5[0x3];                                      // 0x05E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DEBUGRandomNumber;                                 // 0x05E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DEBUG_RandomMissionGenerator;                      // 0x05EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5ED[0x3];                                      // 0x05ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       HexDecoMaterials;                                  // 0x05F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FLinearColor                           WorldLocAsColor;                                   // 0x05FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsThreat1;                                         // 0x060C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsThreat2;                                         // 0x060D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsThreat3;                                         // 0x060E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsThreat4;                                         // 0x060F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsThreat5;                                         // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_611[0x3];                                      // 0x0611(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MIDMissionIcon;                                    // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               MIDZoneMarker;                                     // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DEBUGTileStates_;                                  // 0x061C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61D[0x3];                                      // 0x061D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       MIDForAdjacency;                                   // 0x0620(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          DEBUGBlending;                                     // 0x062C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62D[0x3];                                      // 0x062D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               HexBaseMID_0;                                      // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               HexBaseMID_01;                                     // 0x0634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               HexBaseMID_02;                                     // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               HexBaseMID_03;                                     // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               HexBaseMID_04;                                     // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               HexBaseMID_05;                                     // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                             Type1Texture;                                      // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                             Type2Texture;                                      // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                             Type3Texture;                                      // 0x0650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                             Type4Texture;                                      // 0x0654(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                             Type5Texture;                                      // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                             Type6Texture;                                      // 0x065C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                             TextureN;                                          // 0x0660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                             TextureNE;                                         // 0x0664(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                             TextureSE;                                         // 0x0668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                             Textures;                                          // 0x066C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                             TextureSW;                                         // 0x0670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                             TextureNW;                                         // 0x0674(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                             TileTypeBaseTexture;                               // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DEBUGTurnOffLightning;                             // 0x067C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67D[0x3];                                      // 0x067D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             TypeDEBUGTexture;                                  // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SameRegionNorth;                                   // 0x0684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SameRegionNorthEast;                               // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SameRegionSouthEast;                               // 0x068C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SameRegionSouth;                                   // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SameRegionSouthWest;                               // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SameRegionNorthWest;                               // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TileIsHidden_North;                                // 0x069C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TileIsHidden_NorthEast;                            // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TileIsHidden_SouthEast;                            // 0x06A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TileIsHidden_South;                                // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TileIsHidden_SouthWest;                            // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TileIsHidden_NorthWest;                            // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TileIsOnOuterEdge;                                 // 0x06B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B5[0x3];                                      // 0x06B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TileExistsNorth;                                   // 0x06B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TileExistsNorthEast;                               // 0x06BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TileExistsSouthEast;                               // 0x06C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TileExistsSouth;                                   // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TileExistsSouthWest;                               // 0x06C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TileExistsNorthWest;                               // 0x06CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                TooltipWidgetLoc;                                  // 0x06D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                MissionIconDefaultLoc;                             // 0x06DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               MID_Mouseover;                                     // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Hex_PARENT(int32 EntryPoint);
	void OnInitializeTile();
	void HandleTeamPowerChanged(int32 TeamPower, int32 PersonalPower);
	void DeactivateTheater();
	void FireLightningA();
	void InitializeTheater();
	void CheckFocus();
	void ForceDefocus();
	void PlayPing();
	void OnMissionDataUpdated();
	void OnParticleDieBolt_01(class FName EventName, float EmitterTime, int32 ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction);
	void OnParticleSpawnLight_01(class FName EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity);
	void OnParticleDieBolt2(class FName EventName, float EmitterTime, int32 ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction);
	void OnParticleDieBolt(class FName EventName, float EmitterTime, int32 ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction);
	void OnParticleSpawnLight(class FName EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity);
	void OnDefocus();
	void OnFocus();
	void OnHostDeselect();
	void OnHostSelect();
	void OnClientDeselect();
	void OnClientSelect();
	void Timeline_12__UpdateFunc();
	void Timeline_12__FinishedFunc();
	void Timeline_11__UpdateFunc();
	void Timeline_11__FinishedFunc();
	void Timeline_10__UpdateFunc();
	void Timeline_10__FinishedFunc();
	void Timeline_9__UpdateFunc();
	void Timeline_9__FinishedFunc();
	void Timeline_8__UpdateFunc();
	void Timeline_8__FinishedFunc();
	void Timeline_7__UpdateFunc();
	void Timeline_7__FinishedFunc();
	void Timeline_6__UpdateFunc();
	void Timeline_6__FinishedFunc();
	void Timeline_5__UpdateFunc();
	void Timeline_5__FinishedFunc();
	void Timeline_4__UpdateFunc();
	void Timeline_4__FinishedFunc();
	void Timeline_3__UpdateFunc();
	void Timeline_3__FinishedFunc();
	void Timeline_2__UpdateFunc();
	void Timeline_2__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	void SetDirectionalTextures(class UMaterialInstanceDynamic* SourceMaterial, class UTextRenderComponent* DebugTextDirection, class FName TileExistsParamName, class UTexture2D** TileExistsTexture);
	void GroundSliceSettings(class UMaterialInstanceDynamic* SourceMaterial, class UTexture2D* TileTypeA, class UTexture2D* TileTypeB, float TileIsSameRegionA, float TileIsSameRegionB, float TileIsHiddenA, float TileIsHiddenB, float TileExistsA, float TileExistsB);
	void GetBaseTextureForType(float TypeId, class UTexture2D** BaseTexture);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Hex_PARENT_C">();
	}
	static class ABP_Hex_PARENT_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Hex_PARENT_C>();
	}
};
static_assert(alignof(ABP_Hex_PARENT_C) == 0x000004, "Wrong alignment on ABP_Hex_PARENT_C");
static_assert(sizeof(ABP_Hex_PARENT_C) == 0x0006EC, "Wrong size on ABP_Hex_PARENT_C");
static_assert(offsetof(ABP_Hex_PARENT_C, UberGraphFrame) == 0x000380, "Member 'ABP_Hex_PARENT_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Mission) == 0x000384, "Member 'ABP_Hex_PARENT_C::Mission' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, S_HexMouseover01) == 0x000388, "Member 'ABP_Hex_PARENT_C::S_HexMouseover01' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, P_Cine_Weapon_Beam_01) == 0x00038C, "Member 'ABP_Hex_PARENT_C::P_Cine_Weapon_Beam_01' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, NW) == 0x000390, "Member 'ABP_Hex_PARENT_C::NW' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, SW) == 0x000394, "Member 'ABP_Hex_PARENT_C::SW' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, S) == 0x000398, "Member 'ABP_Hex_PARENT_C::S' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, SE) == 0x00039C, "Member 'ABP_Hex_PARENT_C::SE' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, NE) == 0x0003A0, "Member 'ABP_Hex_PARENT_C::NE' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, N) == 0x0003A4, "Member 'ABP_Hex_PARENT_C::N' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, DebugTextRenderType) == 0x0003A8, "Member 'ABP_Hex_PARENT_C::DebugTextRenderType' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, S_Hex_ZoneMarker01) == 0x0003AC, "Member 'ABP_Hex_PARENT_C::S_Hex_ZoneMarker01' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, MissionIconMesh) == 0x0003B0, "Member 'ABP_Hex_PARENT_C::MissionIconMesh' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, DebugTextRenderZone) == 0x0003B4, "Member 'ABP_Hex_PARENT_C::DebugTextRenderZone' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, DebugTextRenderState) == 0x0003B8, "Member 'ABP_Hex_PARENT_C::DebugTextRenderState' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, S_HexBase_CloudLarge) == 0x0003BC, "Member 'ABP_Hex_PARENT_C::S_HexBase_CloudLarge' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, S_HexBase_CloudSmall) == 0x0003C0, "Member 'ABP_Hex_PARENT_C::S_HexBase_CloudSmall' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, PointLight3) == 0x0003C4, "Member 'ABP_Hex_PARENT_C::PointLight3' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, PointLight2) == 0x0003C8, "Member 'ABP_Hex_PARENT_C::PointLight2' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, PointLight1) == 0x0003CC, "Member 'ABP_Hex_PARENT_C::PointLight1' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, LightningAudio) == 0x0003D0, "Member 'ABP_Hex_PARENT_C::LightningAudio' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, lightning2) == 0x0003D4, "Member 'ABP_Hex_PARENT_C::lightning2' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Lightning) == 0x0003D8, "Member 'ABP_Hex_PARENT_C::Lightning' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, LightningMesh) == 0x0003DC, "Member 'ABP_Hex_PARENT_C::LightningMesh' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, LightningRoot) == 0x0003E0, "Member 'ABP_Hex_PARENT_C::LightningRoot' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Widget) == 0x0003E4, "Member 'ABP_Hex_PARENT_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, MouseoverLight) == 0x0003E8, "Member 'ABP_Hex_PARENT_C::MouseoverLight' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, MissionPingMesh) == 0x0003EC, "Member 'ABP_Hex_PARENT_C::MissionPingMesh' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexTileSound) == 0x0003F0, "Member 'ABP_Hex_PARENT_C::HexTileSound' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_12_NewTrack_3_9A9B376A4CE242AE90C66285F93293B7) == 0x0003F4, "Member 'ABP_Hex_PARENT_C::Timeline_12_NewTrack_3_9A9B376A4CE242AE90C66285F93293B7' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_12_NewTrack_2_9A9B376A4CE242AE90C66285F93293B7) == 0x0003F8, "Member 'ABP_Hex_PARENT_C::Timeline_12_NewTrack_2_9A9B376A4CE242AE90C66285F93293B7' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_12__Direction_9A9B376A4CE242AE90C66285F93293B7) == 0x0003FC, "Member 'ABP_Hex_PARENT_C::Timeline_12__Direction_9A9B376A4CE242AE90C66285F93293B7' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_12) == 0x000400, "Member 'ABP_Hex_PARENT_C::Timeline_12' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_11_NewTrack_1_ABB0E704455E70C66E9A21979F9D10BE) == 0x000404, "Member 'ABP_Hex_PARENT_C::Timeline_11_NewTrack_1_ABB0E704455E70C66E9A21979F9D10BE' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_11_NewTrack_0_ABB0E704455E70C66E9A21979F9D10BE) == 0x000408, "Member 'ABP_Hex_PARENT_C::Timeline_11_NewTrack_0_ABB0E704455E70C66E9A21979F9D10BE' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_11__Direction_ABB0E704455E70C66E9A21979F9D10BE) == 0x00040C, "Member 'ABP_Hex_PARENT_C::Timeline_11__Direction_ABB0E704455E70C66E9A21979F9D10BE' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_11) == 0x000410, "Member 'ABP_Hex_PARENT_C::Timeline_11' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_10_sizer_B74717A84E5DD929C04CAEAB4FDCCCCE) == 0x000414, "Member 'ABP_Hex_PARENT_C::Timeline_10_sizer_B74717A84E5DD929C04CAEAB4FDCCCCE' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_10__Direction_B74717A84E5DD929C04CAEAB4FDCCCCE) == 0x000418, "Member 'ABP_Hex_PARENT_C::Timeline_10__Direction_B74717A84E5DD929C04CAEAB4FDCCCCE' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_10) == 0x00041C, "Member 'ABP_Hex_PARENT_C::Timeline_10' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_9_NewTrack_5_EB671039412778D781423EA0609CA999) == 0x000420, "Member 'ABP_Hex_PARENT_C::Timeline_9_NewTrack_5_EB671039412778D781423EA0609CA999' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_9__Direction_EB671039412778D781423EA0609CA999) == 0x000424, "Member 'ABP_Hex_PARENT_C::Timeline_9__Direction_EB671039412778D781423EA0609CA999' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_9) == 0x000428, "Member 'ABP_Hex_PARENT_C::Timeline_9' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_8_TMAop_88BBDA7046174AC5CBC29994DBD8817F) == 0x00042C, "Member 'ABP_Hex_PARENT_C::Timeline_8_TMAop_88BBDA7046174AC5CBC29994DBD8817F' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_8_TMAsize_88BBDA7046174AC5CBC29994DBD8817F) == 0x000430, "Member 'ABP_Hex_PARENT_C::Timeline_8_TMAsize_88BBDA7046174AC5CBC29994DBD8817F' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_8__Direction_88BBDA7046174AC5CBC29994DBD8817F) == 0x000434, "Member 'ABP_Hex_PARENT_C::Timeline_8__Direction_88BBDA7046174AC5CBC29994DBD8817F' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_8) == 0x000438, "Member 'ABP_Hex_PARENT_C::Timeline_8' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_7_TMAop_284B2D2D482F9795EC3A85A15CD36FBC) == 0x00043C, "Member 'ABP_Hex_PARENT_C::Timeline_7_TMAop_284B2D2D482F9795EC3A85A15CD36FBC' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_7_TMAsize_284B2D2D482F9795EC3A85A15CD36FBC) == 0x000440, "Member 'ABP_Hex_PARENT_C::Timeline_7_TMAsize_284B2D2D482F9795EC3A85A15CD36FBC' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_7__Direction_284B2D2D482F9795EC3A85A15CD36FBC) == 0x000444, "Member 'ABP_Hex_PARENT_C::Timeline_7__Direction_284B2D2D482F9795EC3A85A15CD36FBC' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_7) == 0x000448, "Member 'ABP_Hex_PARENT_C::Timeline_7' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_6_Selection_14F1BA454836EBA6C4AA60B6C3CFAB08) == 0x00044C, "Member 'ABP_Hex_PARENT_C::Timeline_6_Selection_14F1BA454836EBA6C4AA60B6C3CFAB08' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_6_revealmove_14F1BA454836EBA6C4AA60B6C3CFAB08) == 0x000450, "Member 'ABP_Hex_PARENT_C::Timeline_6_revealmove_14F1BA454836EBA6C4AA60B6C3CFAB08' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_6_reveal_14F1BA454836EBA6C4AA60B6C3CFAB08) == 0x000454, "Member 'ABP_Hex_PARENT_C::Timeline_6_reveal_14F1BA454836EBA6C4AA60B6C3CFAB08' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_6__Direction_14F1BA454836EBA6C4AA60B6C3CFAB08) == 0x000458, "Member 'ABP_Hex_PARENT_C::Timeline_6__Direction_14F1BA454836EBA6C4AA60B6C3CFAB08' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_6) == 0x00045C, "Member 'ABP_Hex_PARENT_C::Timeline_6' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_5_NewTrack_1_114F0FED4F202641E052DC910D8B5510) == 0x000460, "Member 'ABP_Hex_PARENT_C::Timeline_5_NewTrack_1_114F0FED4F202641E052DC910D8B5510' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_5_MoveDown_114F0FED4F202641E052DC910D8B5510) == 0x000464, "Member 'ABP_Hex_PARENT_C::Timeline_5_MoveDown_114F0FED4F202641E052DC910D8B5510' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_5__Direction_114F0FED4F202641E052DC910D8B5510) == 0x000468, "Member 'ABP_Hex_PARENT_C::Timeline_5__Direction_114F0FED4F202641E052DC910D8B5510' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_5) == 0x00046C, "Member 'ABP_Hex_PARENT_C::Timeline_5' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_4_NewTrack_0_84B454B948490561BC36DF883C082A78) == 0x000470, "Member 'ABP_Hex_PARENT_C::Timeline_4_NewTrack_0_84B454B948490561BC36DF883C082A78' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_4_MoveUp_84B454B948490561BC36DF883C082A78) == 0x000474, "Member 'ABP_Hex_PARENT_C::Timeline_4_MoveUp_84B454B948490561BC36DF883C082A78' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_4__Direction_84B454B948490561BC36DF883C082A78) == 0x000478, "Member 'ABP_Hex_PARENT_C::Timeline_4__Direction_84B454B948490561BC36DF883C082A78' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_4) == 0x00047C, "Member 'ABP_Hex_PARENT_C::Timeline_4' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_3_LowerOp_2907ADC34E2DB4308AC8BBAD3416C4E2) == 0x000480, "Member 'ABP_Hex_PARENT_C::Timeline_3_LowerOp_2907ADC34E2DB4308AC8BBAD3416C4E2' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_3_SelectScale_2907ADC34E2DB4308AC8BBAD3416C4E2) == 0x000484, "Member 'ABP_Hex_PARENT_C::Timeline_3_SelectScale_2907ADC34E2DB4308AC8BBAD3416C4E2' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_3_SelectFadeTrack_2907ADC34E2DB4308AC8BBAD3416C4E2) == 0x000488, "Member 'ABP_Hex_PARENT_C::Timeline_3_SelectFadeTrack_2907ADC34E2DB4308AC8BBAD3416C4E2' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_3__Direction_2907ADC34E2DB4308AC8BBAD3416C4E2) == 0x00048C, "Member 'ABP_Hex_PARENT_C::Timeline_3__Direction_2907ADC34E2DB4308AC8BBAD3416C4E2' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_3) == 0x000490, "Member 'ABP_Hex_PARENT_C::Timeline_3' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_2_Flash1_B9D819284D23B645F0DD4AB375C523CA) == 0x000494, "Member 'ABP_Hex_PARENT_C::Timeline_2_Flash1_B9D819284D23B645F0DD4AB375C523CA' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_2__Direction_B9D819284D23B645F0DD4AB375C523CA) == 0x000498, "Member 'ABP_Hex_PARENT_C::Timeline_2__Direction_B9D819284D23B645F0DD4AB375C523CA' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_2) == 0x00049C, "Member 'ABP_Hex_PARENT_C::Timeline_2' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_1_Flash1_26547AAF4320D341B2E725B9A8F73E20) == 0x0004A0, "Member 'ABP_Hex_PARENT_C::Timeline_1_Flash1_26547AAF4320D341B2E725B9A8F73E20' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_1__Direction_26547AAF4320D341B2E725B9A8F73E20) == 0x0004A4, "Member 'ABP_Hex_PARENT_C::Timeline_1__Direction_26547AAF4320D341B2E725B9A8F73E20' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_1) == 0x0004A8, "Member 'ABP_Hex_PARENT_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_0_TimeOffset_6E6B0ED44383B4DC665F61BC2F514E17) == 0x0004AC, "Member 'ABP_Hex_PARENT_C::Timeline_0_TimeOffset_6E6B0ED44383B4DC665F61BC2F514E17' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_0_Flash1_6E6B0ED44383B4DC665F61BC2F514E17) == 0x0004B0, "Member 'ABP_Hex_PARENT_C::Timeline_0_Flash1_6E6B0ED44383B4DC665F61BC2F514E17' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_0__Direction_6E6B0ED44383B4DC665F61BC2F514E17) == 0x0004B4, "Member 'ABP_Hex_PARENT_C::Timeline_0__Direction_6E6B0ED44383B4DC665F61BC2F514E17' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Timeline_0) == 0x0004B8, "Member 'ABP_Hex_PARENT_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, FogMID) == 0x0004BC, "Member 'ABP_Hex_PARENT_C::FogMID' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, FogMesh) == 0x0004C0, "Member 'ABP_Hex_PARENT_C::FogMesh' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, CloudLvl1) == 0x0004C4, "Member 'ABP_Hex_PARENT_C::CloudLvl1' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, CloudLvl2) == 0x0004C8, "Member 'ABP_Hex_PARENT_C::CloudLvl2' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, CloudLvl1MID) == 0x0004CC, "Member 'ABP_Hex_PARENT_C::CloudLvl1MID' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, CloudLvl2MID) == 0x0004D0, "Member 'ABP_Hex_PARENT_C::CloudLvl2MID' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, CloudLvl1b) == 0x0004D4, "Member 'ABP_Hex_PARENT_C::CloudLvl1b' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, CloudLvl1bMID) == 0x0004D8, "Member 'ABP_Hex_PARENT_C::CloudLvl1bMID' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, IsFading) == 0x0004DC, "Member 'ABP_Hex_PARENT_C::IsFading' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexAudioComponent) == 0x0004E0, "Member 'ABP_Hex_PARENT_C::HexAudioComponent' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexMapSound) == 0x0004E4, "Member 'ABP_Hex_PARENT_C::HexMapSound' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Delay) == 0x0004E8, "Member 'ABP_Hex_PARENT_C::Delay' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, LightningActive) == 0x0004EC, "Member 'ABP_Hex_PARENT_C::LightningActive' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Flash1done) == 0x0004ED, "Member 'ABP_Hex_PARENT_C::Flash1done' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Flash2done) == 0x0004EE, "Member 'ABP_Hex_PARENT_C::Flash2done' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Flash3done) == 0x0004EF, "Member 'ABP_Hex_PARENT_C::Flash3done' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, IsUnhidden) == 0x0004F0, "Member 'ABP_Hex_PARENT_C::IsUnhidden' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, StormChance) == 0x0004F4, "Member 'ABP_Hex_PARENT_C::StormChance' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, LightningMID) == 0x0004F8, "Member 'ABP_Hex_PARENT_C::LightningMID' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, MissionSelectedMID) == 0x0004FC, "Member 'ABP_Hex_PARENT_C::MissionSelectedMID' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Hex_Deco_Meshes) == 0x000500, "Member 'ABP_Hex_PARENT_C::Hex_Deco_Meshes' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexCliffMesh) == 0x00050C, "Member 'ABP_Hex_PARENT_C::HexCliffMesh' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Hex_Base_Meshes) == 0x000510, "Member 'ABP_Hex_PARENT_C::Hex_Base_Meshes' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TargetBaseMesh) == 0x00051C, "Member 'ABP_Hex_PARENT_C::TargetBaseMesh' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, RandomIndex) == 0x000520, "Member 'ABP_Hex_PARENT_C::RandomIndex' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, SpawnLight) == 0x000524, "Member 'ABP_Hex_PARENT_C::SpawnLight' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, DieBolt) == 0x00052C, "Member 'ABP_Hex_PARENT_C::DieBolt' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, DieBolt2) == 0x000534, "Member 'ABP_Hex_PARENT_C::DieBolt2' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, DieBolt_01) == 0x00053C, "Member 'ABP_Hex_PARENT_C::DieBolt_01' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, SpawnLight_01) == 0x000544, "Member 'ABP_Hex_PARENT_C::SpawnLight_01' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, LightningSound) == 0x00054C, "Member 'ABP_Hex_PARENT_C::LightningSound' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexDecoMID) == 0x000550, "Member 'ABP_Hex_PARENT_C::HexDecoMID' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexDecoMesh) == 0x000554, "Member 'ABP_Hex_PARENT_C::HexDecoMesh' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, MouseOver) == 0x000558, "Member 'ABP_Hex_PARENT_C::MouseOver' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, MissionPingMID) == 0x00055C, "Member 'ABP_Hex_PARENT_C::MissionPingMID' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, MissionSelected) == 0x000560, "Member 'ABP_Hex_PARENT_C::MissionSelected' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileIsPlayable) == 0x000561, "Member 'ABP_Hex_PARENT_C::TileIsPlayable' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, GreyHexDecoMeshes) == 0x000564, "Member 'ABP_Hex_PARENT_C::GreyHexDecoMeshes' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, GreyHexDecoMesh) == 0x000570, "Member 'ABP_Hex_PARENT_C::GreyHexDecoMesh' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexBaseMID) == 0x000574, "Member 'ABP_Hex_PARENT_C::HexBaseMID' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, ThreatLevelLightColor) == 0x000578, "Member 'ABP_Hex_PARENT_C::ThreatLevelLightColor' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, IsQuickplayMission) == 0x000588, "Member 'ABP_Hex_PARENT_C::IsQuickplayMission' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, InitialRevealDelay) == 0x000589, "Member 'ABP_Hex_PARENT_C::InitialRevealDelay' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, dummy) == 0x00058A, "Member 'ABP_Hex_PARENT_C::dummy' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, MissionMarkerMID) == 0x00058C, "Member 'ABP_Hex_PARENT_C::MissionMarkerMID' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Focused) == 0x000590, "Member 'ABP_Hex_PARENT_C::Focused' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, ThreatLevelColor) == 0x000594, "Member 'ABP_Hex_PARENT_C::ThreatLevelColor' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, ThreatLevelColor2) == 0x0005A4, "Member 'ABP_Hex_PARENT_C::ThreatLevelColor2' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, SelectedLocationHolderOld) == 0x0005B4, "Member 'ABP_Hex_PARENT_C::SelectedLocationHolderOld' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, SelectedLocationHolderNew) == 0x0005C4, "Member 'ABP_Hex_PARENT_C::SelectedLocationHolderNew' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexBaseFalloffMID) == 0x0005D4, "Member 'ABP_Hex_PARENT_C::HexBaseFalloffMID' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileIsLocked) == 0x0005D8, "Member 'ABP_Hex_PARENT_C::TileIsLocked' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileIsHidden) == 0x0005D9, "Member 'ABP_Hex_PARENT_C::TileIsHidden' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, IsOutpost) == 0x0005DA, "Member 'ABP_Hex_PARENT_C::IsOutpost' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, CloudSmallMID) == 0x0005DC, "Member 'ABP_Hex_PARENT_C::CloudSmallMID' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, CloudLargeMID) == 0x0005E0, "Member 'ABP_Hex_PARENT_C::CloudLargeMID' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileIsVaildMission) == 0x0005E4, "Member 'ABP_Hex_PARENT_C::TileIsVaildMission' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, DEBUGRandomNumber) == 0x0005E8, "Member 'ABP_Hex_PARENT_C::DEBUGRandomNumber' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, DEBUG_RandomMissionGenerator) == 0x0005EC, "Member 'ABP_Hex_PARENT_C::DEBUG_RandomMissionGenerator' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexDecoMaterials) == 0x0005F0, "Member 'ABP_Hex_PARENT_C::HexDecoMaterials' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, WorldLocAsColor) == 0x0005FC, "Member 'ABP_Hex_PARENT_C::WorldLocAsColor' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, IsThreat1) == 0x00060C, "Member 'ABP_Hex_PARENT_C::IsThreat1' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, IsThreat2) == 0x00060D, "Member 'ABP_Hex_PARENT_C::IsThreat2' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, IsThreat3) == 0x00060E, "Member 'ABP_Hex_PARENT_C::IsThreat3' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, IsThreat4) == 0x00060F, "Member 'ABP_Hex_PARENT_C::IsThreat4' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, IsThreat5) == 0x000610, "Member 'ABP_Hex_PARENT_C::IsThreat5' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, MIDMissionIcon) == 0x000614, "Member 'ABP_Hex_PARENT_C::MIDMissionIcon' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, MIDZoneMarker) == 0x000618, "Member 'ABP_Hex_PARENT_C::MIDZoneMarker' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, DEBUGTileStates_) == 0x00061C, "Member 'ABP_Hex_PARENT_C::DEBUGTileStates_' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, MIDForAdjacency) == 0x000620, "Member 'ABP_Hex_PARENT_C::MIDForAdjacency' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, DEBUGBlending) == 0x00062C, "Member 'ABP_Hex_PARENT_C::DEBUGBlending' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexBaseMID_0) == 0x000630, "Member 'ABP_Hex_PARENT_C::HexBaseMID_0' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexBaseMID_01) == 0x000634, "Member 'ABP_Hex_PARENT_C::HexBaseMID_01' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexBaseMID_02) == 0x000638, "Member 'ABP_Hex_PARENT_C::HexBaseMID_02' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexBaseMID_03) == 0x00063C, "Member 'ABP_Hex_PARENT_C::HexBaseMID_03' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexBaseMID_04) == 0x000640, "Member 'ABP_Hex_PARENT_C::HexBaseMID_04' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, HexBaseMID_05) == 0x000644, "Member 'ABP_Hex_PARENT_C::HexBaseMID_05' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Type1Texture) == 0x000648, "Member 'ABP_Hex_PARENT_C::Type1Texture' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Type2Texture) == 0x00064C, "Member 'ABP_Hex_PARENT_C::Type2Texture' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Type3Texture) == 0x000650, "Member 'ABP_Hex_PARENT_C::Type3Texture' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Type4Texture) == 0x000654, "Member 'ABP_Hex_PARENT_C::Type4Texture' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Type5Texture) == 0x000658, "Member 'ABP_Hex_PARENT_C::Type5Texture' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Type6Texture) == 0x00065C, "Member 'ABP_Hex_PARENT_C::Type6Texture' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TextureN) == 0x000660, "Member 'ABP_Hex_PARENT_C::TextureN' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TextureNE) == 0x000664, "Member 'ABP_Hex_PARENT_C::TextureNE' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TextureSE) == 0x000668, "Member 'ABP_Hex_PARENT_C::TextureSE' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, Textures) == 0x00066C, "Member 'ABP_Hex_PARENT_C::Textures' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TextureSW) == 0x000670, "Member 'ABP_Hex_PARENT_C::TextureSW' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TextureNW) == 0x000674, "Member 'ABP_Hex_PARENT_C::TextureNW' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileTypeBaseTexture) == 0x000678, "Member 'ABP_Hex_PARENT_C::TileTypeBaseTexture' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, DEBUGTurnOffLightning) == 0x00067C, "Member 'ABP_Hex_PARENT_C::DEBUGTurnOffLightning' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TypeDEBUGTexture) == 0x000680, "Member 'ABP_Hex_PARENT_C::TypeDEBUGTexture' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, SameRegionNorth) == 0x000684, "Member 'ABP_Hex_PARENT_C::SameRegionNorth' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, SameRegionNorthEast) == 0x000688, "Member 'ABP_Hex_PARENT_C::SameRegionNorthEast' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, SameRegionSouthEast) == 0x00068C, "Member 'ABP_Hex_PARENT_C::SameRegionSouthEast' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, SameRegionSouth) == 0x000690, "Member 'ABP_Hex_PARENT_C::SameRegionSouth' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, SameRegionSouthWest) == 0x000694, "Member 'ABP_Hex_PARENT_C::SameRegionSouthWest' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, SameRegionNorthWest) == 0x000698, "Member 'ABP_Hex_PARENT_C::SameRegionNorthWest' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileIsHidden_North) == 0x00069C, "Member 'ABP_Hex_PARENT_C::TileIsHidden_North' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileIsHidden_NorthEast) == 0x0006A0, "Member 'ABP_Hex_PARENT_C::TileIsHidden_NorthEast' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileIsHidden_SouthEast) == 0x0006A4, "Member 'ABP_Hex_PARENT_C::TileIsHidden_SouthEast' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileIsHidden_South) == 0x0006A8, "Member 'ABP_Hex_PARENT_C::TileIsHidden_South' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileIsHidden_SouthWest) == 0x0006AC, "Member 'ABP_Hex_PARENT_C::TileIsHidden_SouthWest' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileIsHidden_NorthWest) == 0x0006B0, "Member 'ABP_Hex_PARENT_C::TileIsHidden_NorthWest' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileIsOnOuterEdge) == 0x0006B4, "Member 'ABP_Hex_PARENT_C::TileIsOnOuterEdge' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileExistsNorth) == 0x0006B8, "Member 'ABP_Hex_PARENT_C::TileExistsNorth' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileExistsNorthEast) == 0x0006BC, "Member 'ABP_Hex_PARENT_C::TileExistsNorthEast' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileExistsSouthEast) == 0x0006C0, "Member 'ABP_Hex_PARENT_C::TileExistsSouthEast' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileExistsSouth) == 0x0006C4, "Member 'ABP_Hex_PARENT_C::TileExistsSouth' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileExistsSouthWest) == 0x0006C8, "Member 'ABP_Hex_PARENT_C::TileExistsSouthWest' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TileExistsNorthWest) == 0x0006CC, "Member 'ABP_Hex_PARENT_C::TileExistsNorthWest' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, TooltipWidgetLoc) == 0x0006D0, "Member 'ABP_Hex_PARENT_C::TooltipWidgetLoc' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, MissionIconDefaultLoc) == 0x0006DC, "Member 'ABP_Hex_PARENT_C::MissionIconDefaultLoc' has a wrong offset!");
static_assert(offsetof(ABP_Hex_PARENT_C, MID_Mouseover) == 0x0006E8, "Member 'ABP_Hex_PARENT_C::MID_Mouseover' has a wrong offset!");

}

#pragma pack(pop)
