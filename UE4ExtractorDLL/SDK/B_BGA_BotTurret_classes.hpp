#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_BGA_BotTurret

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass B_BGA_BotTurret.B_BGA_BotTurret_C
// 0x02A8 (0x0730 - 0x0488)
class AB_BGA_BotTurret_C final : public ABuildingGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0488(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UDecalComponent*                        ScannerDecal;                                      // 0x048C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               ScannerRays;                                       // 0x0490(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Thruster_L;                                        // 0x0494(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Thruster_R;                                        // 0x0498(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               P_BotTurret_MF_R;                                  // 0x049C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               P_BotTurret_MF_L;                                  // 0x04A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        Weapon_Fire_R_AudioComponent;                      // 0x04A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        Weapon_Fire_L_AudioComponent;                      // 0x04A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USkeletalMeshComponent*                 SK_Bot_Turret;                                     // 0x04AC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USphereComponent*                       Sphere_ViewRadius_Collision;                       // 0x04B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        Bot_Idle_AudioComponent;                           // 0x04B4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        Bot_Explode_Cue;                                   // 0x04B8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        Bot_WarmUP_Sound;                                  // 0x04BC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        Bot_StartUP_AudioComponent;                        // 0x04C0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x04C4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	struct FVector                                Timeline_2_Rotation_AC2F08D240A37A1E0A447EB04E197178; // 0x04C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_2__Direction_AC2F08D240A37A1E0A447EB04E197178; // 0x04D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D5[0x3];                                      // 0x04D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_2;                                        // 0x04D8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Timeline_0_NewTrack_0_2A6889104467A297A0FF38B63E176895; // 0x04DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_0__Direction_2A6889104467A297A0FF38B63E176895; // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x3];                                      // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x04EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Initial_Location;                                  // 0x04F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DeltaTimeRot;                                      // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         WarmupTime;                                        // 0x0500(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Bot_Rotation_Speed;                                // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         ShootingGun;                                       // 0x0508(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	float                                         Duration;                                          // 0x050C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             StartTransform;                                    // 0x0510(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AFortPawn*                              TargetPawnToTrack;                                 // 0x0540(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Movement_Start_Timer;                              // 0x0544(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         FireRate;                                          // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasTarget;                                         // 0x054C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54D[0x3];                                      // 0x054D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delta_Time;                                        // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         BotRadius;                                         // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class AFortPawn*>                      PotentialTargets;                                  // 0x0558(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         RangeSquared;                                      // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FString                                 TargetAcquisitionFunctionName;                     // 0x0568(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         TargetAcquisitionCheckTimer;                       // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FString                                 FiringFunctionName;                                // 0x0578(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         FireTimer;                                         // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Gun_Spawn_Loc;                                     // 0x0588(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Gun_Spawn_Rot;                                     // 0x0594(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 Projectile;                                        // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Bot_MID__0;                                        // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Bot_Turret_Emissive_Color__Friendly_;              // 0x05A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Bot_Turret_Emissive_Color__Enemy_;                 // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Scanner_Ray_Light_Color__Friendly_;                // 0x05C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Scanner_Ray_Light_Color__Enemy_;                   // 0x05D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Scanner_Ray_Core_Light_Color__Friendly_;           // 0x05E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Scanner_Ray_Core_Light_Color__Enemy_;              // 0x05F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           MF_Sparks_Color__Friendly_;                        // 0x0608(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           MF_Sparks_Color__Enemy_;                           // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           MF_Light_Color__Friendly_;                         // 0x0628(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           MF_Light_Color__Enemy_;                            // 0x0638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           MF_Ring_Color__Friendly_;                          // 0x0648(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           MF_Ring_Color__Enemy_;                             // 0x0658(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Thruster_Light_Color__Friendly_;                   // 0x0668(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Thruster_Light_Color__Enemy_;                      // 0x0678(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Actor_Init_Rot;                                    // 0x0688(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         Left_Right_Gun;                                    // 0x0694(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	class UParticleSystem*                        DeathExplodeTemplate;                              // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         BotPitch;                                          // 0x069C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               AimRotation;                                       // 0x06A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                ThrusterSize;                                      // 0x06AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                BotStartLocation;                                  // 0x06B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FFortGameplayEffectContainer           EC_ProjectileDamage;                               // 0x06C4(0x006C)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_B_BGA_BotTurret(int32 EntryPoint);
	void AttemptFire();
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void BndEvt__Sphere_ViewRadius_Collision_K2Node_ComponentBoundEvent_439_ComponentEndOverlapSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Sphere_ViewRadius_Collision_K2Node_ComponentBoundEvent_276_ComponentBeginOverlapSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void Bot_Explode();
	void PassBotInfo(float WarmupTime_0, float BotDuration, float FireRate_0, float Radius);
	void ReceiveBeginPlay();
	void Timeline_2__UpdateFunc();
	void Timeline_2__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	void OnRep_Target_Location();
	void OnRep_ShootingGun();
	void OnRep_NewVar0();
	void Perform_Bot_Rotation(class AActor* LookAtActor);
	void OnNewPotentialTargetTouched(class AFortPawn* PotentialTargetPawn);
	void IsValidTarget(class AFortPawn* PotentialTarget, bool IncludeSimpleRangeCheck, bool IncludeFireLimitCheck, bool IncludeObstructionCheck, bool* ValidTarget);
	void SetTrackingTarget(class AFortPawn* Target);
	void SetTargetAcquisitionTimer();
	void ClearTargetAcquisitionTimer();
	void ClearFiringTimer();
	void OnPotentialTargetUntouched(class AFortPawn* UntouchedPotentialTarget);
	void SetFiringTimer();
	void AttemptAcquireTarget();
	void UpdateScannerRay();
	void SetTeamColorsVFX();
	void OnRep_Left_Right_Gun();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_BGA_BotTurret_C">();
	}
	static class AB_BGA_BotTurret_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_BGA_BotTurret_C>();
	}
};
static_assert(alignof(AB_BGA_BotTurret_C) == 0x000010, "Wrong alignment on AB_BGA_BotTurret_C");
static_assert(sizeof(AB_BGA_BotTurret_C) == 0x000730, "Wrong size on AB_BGA_BotTurret_C");
static_assert(offsetof(AB_BGA_BotTurret_C, UberGraphFrame) == 0x000488, "Member 'AB_BGA_BotTurret_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, ScannerDecal) == 0x00048C, "Member 'AB_BGA_BotTurret_C::ScannerDecal' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, ScannerRays) == 0x000490, "Member 'AB_BGA_BotTurret_C::ScannerRays' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Thruster_L) == 0x000494, "Member 'AB_BGA_BotTurret_C::Thruster_L' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Thruster_R) == 0x000498, "Member 'AB_BGA_BotTurret_C::Thruster_R' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, P_BotTurret_MF_R) == 0x00049C, "Member 'AB_BGA_BotTurret_C::P_BotTurret_MF_R' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, P_BotTurret_MF_L) == 0x0004A0, "Member 'AB_BGA_BotTurret_C::P_BotTurret_MF_L' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Weapon_Fire_R_AudioComponent) == 0x0004A4, "Member 'AB_BGA_BotTurret_C::Weapon_Fire_R_AudioComponent' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Weapon_Fire_L_AudioComponent) == 0x0004A8, "Member 'AB_BGA_BotTurret_C::Weapon_Fire_L_AudioComponent' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, SK_Bot_Turret) == 0x0004AC, "Member 'AB_BGA_BotTurret_C::SK_Bot_Turret' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Sphere_ViewRadius_Collision) == 0x0004B0, "Member 'AB_BGA_BotTurret_C::Sphere_ViewRadius_Collision' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Bot_Idle_AudioComponent) == 0x0004B4, "Member 'AB_BGA_BotTurret_C::Bot_Idle_AudioComponent' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Bot_Explode_Cue) == 0x0004B8, "Member 'AB_BGA_BotTurret_C::Bot_Explode_Cue' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Bot_WarmUP_Sound) == 0x0004BC, "Member 'AB_BGA_BotTurret_C::Bot_WarmUP_Sound' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Bot_StartUP_AudioComponent) == 0x0004C0, "Member 'AB_BGA_BotTurret_C::Bot_StartUP_AudioComponent' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, DefaultSceneRoot) == 0x0004C4, "Member 'AB_BGA_BotTurret_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Timeline_2_Rotation_AC2F08D240A37A1E0A447EB04E197178) == 0x0004C8, "Member 'AB_BGA_BotTurret_C::Timeline_2_Rotation_AC2F08D240A37A1E0A447EB04E197178' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Timeline_2__Direction_AC2F08D240A37A1E0A447EB04E197178) == 0x0004D4, "Member 'AB_BGA_BotTurret_C::Timeline_2__Direction_AC2F08D240A37A1E0A447EB04E197178' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Timeline_2) == 0x0004D8, "Member 'AB_BGA_BotTurret_C::Timeline_2' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Timeline_0_NewTrack_0_2A6889104467A297A0FF38B63E176895) == 0x0004DC, "Member 'AB_BGA_BotTurret_C::Timeline_0_NewTrack_0_2A6889104467A297A0FF38B63E176895' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Timeline_0__Direction_2A6889104467A297A0FF38B63E176895) == 0x0004E8, "Member 'AB_BGA_BotTurret_C::Timeline_0__Direction_2A6889104467A297A0FF38B63E176895' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Timeline_0) == 0x0004EC, "Member 'AB_BGA_BotTurret_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Initial_Location) == 0x0004F0, "Member 'AB_BGA_BotTurret_C::Initial_Location' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, DeltaTimeRot) == 0x0004FC, "Member 'AB_BGA_BotTurret_C::DeltaTimeRot' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, WarmupTime) == 0x000500, "Member 'AB_BGA_BotTurret_C::WarmupTime' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Bot_Rotation_Speed) == 0x000504, "Member 'AB_BGA_BotTurret_C::Bot_Rotation_Speed' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, ShootingGun) == 0x000508, "Member 'AB_BGA_BotTurret_C::ShootingGun' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Duration) == 0x00050C, "Member 'AB_BGA_BotTurret_C::Duration' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, StartTransform) == 0x000510, "Member 'AB_BGA_BotTurret_C::StartTransform' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, TargetPawnToTrack) == 0x000540, "Member 'AB_BGA_BotTurret_C::TargetPawnToTrack' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Movement_Start_Timer) == 0x000544, "Member 'AB_BGA_BotTurret_C::Movement_Start_Timer' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, FireRate) == 0x000548, "Member 'AB_BGA_BotTurret_C::FireRate' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, HasTarget) == 0x00054C, "Member 'AB_BGA_BotTurret_C::HasTarget' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Delta_Time) == 0x000550, "Member 'AB_BGA_BotTurret_C::Delta_Time' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, BotRadius) == 0x000554, "Member 'AB_BGA_BotTurret_C::BotRadius' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, PotentialTargets) == 0x000558, "Member 'AB_BGA_BotTurret_C::PotentialTargets' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, RangeSquared) == 0x000564, "Member 'AB_BGA_BotTurret_C::RangeSquared' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, TargetAcquisitionFunctionName) == 0x000568, "Member 'AB_BGA_BotTurret_C::TargetAcquisitionFunctionName' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, TargetAcquisitionCheckTimer) == 0x000574, "Member 'AB_BGA_BotTurret_C::TargetAcquisitionCheckTimer' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, FiringFunctionName) == 0x000578, "Member 'AB_BGA_BotTurret_C::FiringFunctionName' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, FireTimer) == 0x000584, "Member 'AB_BGA_BotTurret_C::FireTimer' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Gun_Spawn_Loc) == 0x000588, "Member 'AB_BGA_BotTurret_C::Gun_Spawn_Loc' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Gun_Spawn_Rot) == 0x000594, "Member 'AB_BGA_BotTurret_C::Gun_Spawn_Rot' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Projectile) == 0x0005A0, "Member 'AB_BGA_BotTurret_C::Projectile' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Bot_MID__0) == 0x0005A4, "Member 'AB_BGA_BotTurret_C::Bot_MID__0' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Bot_Turret_Emissive_Color__Friendly_) == 0x0005A8, "Member 'AB_BGA_BotTurret_C::Bot_Turret_Emissive_Color__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Bot_Turret_Emissive_Color__Enemy_) == 0x0005B8, "Member 'AB_BGA_BotTurret_C::Bot_Turret_Emissive_Color__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Scanner_Ray_Light_Color__Friendly_) == 0x0005C8, "Member 'AB_BGA_BotTurret_C::Scanner_Ray_Light_Color__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Scanner_Ray_Light_Color__Enemy_) == 0x0005D8, "Member 'AB_BGA_BotTurret_C::Scanner_Ray_Light_Color__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Scanner_Ray_Core_Light_Color__Friendly_) == 0x0005E8, "Member 'AB_BGA_BotTurret_C::Scanner_Ray_Core_Light_Color__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Scanner_Ray_Core_Light_Color__Enemy_) == 0x0005F8, "Member 'AB_BGA_BotTurret_C::Scanner_Ray_Core_Light_Color__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, MF_Sparks_Color__Friendly_) == 0x000608, "Member 'AB_BGA_BotTurret_C::MF_Sparks_Color__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, MF_Sparks_Color__Enemy_) == 0x000618, "Member 'AB_BGA_BotTurret_C::MF_Sparks_Color__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, MF_Light_Color__Friendly_) == 0x000628, "Member 'AB_BGA_BotTurret_C::MF_Light_Color__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, MF_Light_Color__Enemy_) == 0x000638, "Member 'AB_BGA_BotTurret_C::MF_Light_Color__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, MF_Ring_Color__Friendly_) == 0x000648, "Member 'AB_BGA_BotTurret_C::MF_Ring_Color__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, MF_Ring_Color__Enemy_) == 0x000658, "Member 'AB_BGA_BotTurret_C::MF_Ring_Color__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Thruster_Light_Color__Friendly_) == 0x000668, "Member 'AB_BGA_BotTurret_C::Thruster_Light_Color__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Thruster_Light_Color__Enemy_) == 0x000678, "Member 'AB_BGA_BotTurret_C::Thruster_Light_Color__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Actor_Init_Rot) == 0x000688, "Member 'AB_BGA_BotTurret_C::Actor_Init_Rot' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, Left_Right_Gun) == 0x000694, "Member 'AB_BGA_BotTurret_C::Left_Right_Gun' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, DeathExplodeTemplate) == 0x000698, "Member 'AB_BGA_BotTurret_C::DeathExplodeTemplate' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, BotPitch) == 0x00069C, "Member 'AB_BGA_BotTurret_C::BotPitch' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, AimRotation) == 0x0006A0, "Member 'AB_BGA_BotTurret_C::AimRotation' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, ThrusterSize) == 0x0006AC, "Member 'AB_BGA_BotTurret_C::ThrusterSize' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, BotStartLocation) == 0x0006B8, "Member 'AB_BGA_BotTurret_C::BotStartLocation' has a wrong offset!");
static_assert(offsetof(AB_BGA_BotTurret_C, EC_ProjectileDamage) == 0x0006C4, "Member 'AB_BGA_BotTurret_C::EC_ProjectileDamage' has a wrong offset!");

}

#pragma pack(pop)
