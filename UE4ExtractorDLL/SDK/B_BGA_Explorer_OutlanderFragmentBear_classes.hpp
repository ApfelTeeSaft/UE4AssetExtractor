#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_BGA_Explorer_OutlanderFragmentBear

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass B_BGA_Explorer_OutlanderFragmentBear.B_BGA_Explorer_OutlanderFragmentBear_C
// 0x0120 (0x05A8 - 0x0488)
class AB_BGA_Explorer_OutlanderFragmentBear_C final : public ABuildingGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0488(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        FiringAudioComponent;                              // 0x048C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               MuzzleFlashParticleComponent_L;                    // 0x0490(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USkeletalMeshComponent*                 BearMesh;                                          // 0x0494(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USphereComponent*                       SightRadiusSphereComponent;                        // 0x0498(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               MuzzleFlashParticleComponent_R;                    // 0x049C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UCapsuleComponent*                      CollisionComponent;                                // 0x04A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	struct FGameplayTagContainer                  TC_TargetAcquisitionAbility;                       // 0x04A4(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   EyeSocketName;                                     // 0x04BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AFortPawn*                              TargetPawnToTrack;                                 // 0x04C4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TargetAcquisitionCheckTimer;                       // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FString                                 TargetAcquisitionFunctionName;                     // 0x04CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class FString                                 FiringFunctionName;                                // 0x04D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         FireTimer;                                         // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               InitialRelativeGunRotation;                        // 0x04E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         GunInterpSpeed;                                    // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_SentryFireAbility;                              // 0x04F8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 TracerClass;                                       // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        ImpactEffect;                                      // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RangeSquared;                                      // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         FiringDotProductThreshold;                         // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        DeathEffects;                                      // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDeployed;                                        // 0x0524(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_525[0x3];                                      // 0x0525(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         YawRotationLimit;                                  // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PitchRotationLimit;                                // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SightRadius;                                       // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class AFortPawn*>                      PotentialTargets;                                  // 0x0534(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         RotationClampMax;                                  // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             DeploymentSound;                                   // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Tracer_Scale;                                      // 0x0548(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Cue_SpawnBear;                                     // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             CueBearDies;                                       // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             CueBearBark;                                       // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTimerHandle                           BearBarkTimer;                                     // 0x0560(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           FireCueTag;                                        // 0x0564(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRotator                               TargetRelativeRotation;                            // 0x056C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   MuzzleLeftSocketName;                              // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   MuzzleRightSocketName;                             // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               CurrentRelativeRotation;                           // 0x0588(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RotateToTargetInterpSpeed;                         // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RotationResetInterpSpeed;                          // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bLeftTracer;                                       // 0x059C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59D[0x3];                                      // 0x059D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastKillSoundTime;                                 // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MinKillSoundInterval;                              // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_B_BGA_Explorer_OutlanderFragmentBear(int32 EntryPoint);
	void Bearricade();
	void OnTargetPawnDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void SetTargetPawn(class AFortPawn* NewTargetPawn);
	void GameplayCue_Weapons_Activation(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void KilledTargetPawn();
	void BndEvt__SightRadiusSphereComponent_K2Node_ComponentBoundEvent_275_ComponentEndOverlapSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__SightRadiusSphereComponent_K2Node_ComponentBoundEvent_271_ComponentBeginOverlapSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void ReceiveTick(float DeltaSeconds);
	void GameplayCue_Impact_Physical(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void AttemptAcquireTarget();
	void AttemptFire();
	void SetFiringTimer();
	void SetTargetAcquisitionTimer();
	void UpdateRotation(class AActor* LookAtActor, float DeltaSeconds);
	void SpawnTracer(const struct FVector& HitLocation, bool bLeftTracer_0);
	void SpawnImpactEffects(const struct FVector& HitLocation);
	void ClearFiringTimer();
	void ClearTargetAcquisitionTimer();
	void ShouldFire(bool* ShouldFire_0);
	void OnNewPotentialTargetTouched(class AFortPawn* PotentialTargetPawn);
	void OnPotentialTargetUntouched(class AFortPawn* UntouchedPotentialTarget);
	void IsValidTarget(class AFortPawn* PotentialTarget, bool bIncludeSimpleRangeCheck, bool bIncludeFiringLimitCheck, bool bIncludeObstructionCheck, bool* bValidTarget);
	void Is_Pawn_Inside_Pitch_Limits(class AFortPawn* Pawn, bool* bInsidePitchLimits);
	void ToggleFireCue(bool bEnable);
	void OnRep_TargetPawnToTrack();

	struct FTransform GetTargetingSourceTransform(EFortAbilityTargetingSource Source) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_BGA_Explorer_OutlanderFragmentBear_C">();
	}
	static class AB_BGA_Explorer_OutlanderFragmentBear_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_BGA_Explorer_OutlanderFragmentBear_C>();
	}
};
static_assert(alignof(AB_BGA_Explorer_OutlanderFragmentBear_C) == 0x000004, "Wrong alignment on AB_BGA_Explorer_OutlanderFragmentBear_C");
static_assert(sizeof(AB_BGA_Explorer_OutlanderFragmentBear_C) == 0x0005A8, "Wrong size on AB_BGA_Explorer_OutlanderFragmentBear_C");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, UberGraphFrame) == 0x000488, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, FiringAudioComponent) == 0x00048C, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::FiringAudioComponent' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, MuzzleFlashParticleComponent_L) == 0x000490, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::MuzzleFlashParticleComponent_L' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, BearMesh) == 0x000494, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::BearMesh' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, SightRadiusSphereComponent) == 0x000498, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::SightRadiusSphereComponent' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, MuzzleFlashParticleComponent_R) == 0x00049C, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::MuzzleFlashParticleComponent_R' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, CollisionComponent) == 0x0004A0, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::CollisionComponent' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, TC_TargetAcquisitionAbility) == 0x0004A4, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::TC_TargetAcquisitionAbility' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, EyeSocketName) == 0x0004BC, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::EyeSocketName' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, TargetPawnToTrack) == 0x0004C4, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::TargetPawnToTrack' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, TargetAcquisitionCheckTimer) == 0x0004C8, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::TargetAcquisitionCheckTimer' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, TargetAcquisitionFunctionName) == 0x0004CC, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::TargetAcquisitionFunctionName' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, FiringFunctionName) == 0x0004D8, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::FiringFunctionName' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, FireTimer) == 0x0004E4, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::FireTimer' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, InitialRelativeGunRotation) == 0x0004E8, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::InitialRelativeGunRotation' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, GunInterpSpeed) == 0x0004F4, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::GunInterpSpeed' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, TC_SentryFireAbility) == 0x0004F8, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::TC_SentryFireAbility' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, TracerClass) == 0x000510, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::TracerClass' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, ImpactEffect) == 0x000514, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::ImpactEffect' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, RangeSquared) == 0x000518, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::RangeSquared' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, FiringDotProductThreshold) == 0x00051C, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::FiringDotProductThreshold' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, DeathEffects) == 0x000520, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::DeathEffects' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, IsDeployed) == 0x000524, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::IsDeployed' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, YawRotationLimit) == 0x000528, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::YawRotationLimit' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, PitchRotationLimit) == 0x00052C, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::PitchRotationLimit' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, SightRadius) == 0x000530, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::SightRadius' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, PotentialTargets) == 0x000534, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::PotentialTargets' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, RotationClampMax) == 0x000540, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::RotationClampMax' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, DeploymentSound) == 0x000544, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::DeploymentSound' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, Tracer_Scale) == 0x000548, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::Tracer_Scale' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, Cue_SpawnBear) == 0x000554, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::Cue_SpawnBear' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, CueBearDies) == 0x000558, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::CueBearDies' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, CueBearBark) == 0x00055C, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::CueBearBark' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, BearBarkTimer) == 0x000560, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::BearBarkTimer' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, FireCueTag) == 0x000564, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::FireCueTag' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, TargetRelativeRotation) == 0x00056C, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::TargetRelativeRotation' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, MuzzleLeftSocketName) == 0x000578, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::MuzzleLeftSocketName' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, MuzzleRightSocketName) == 0x000580, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::MuzzleRightSocketName' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, CurrentRelativeRotation) == 0x000588, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::CurrentRelativeRotation' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, RotateToTargetInterpSpeed) == 0x000594, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::RotateToTargetInterpSpeed' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, RotationResetInterpSpeed) == 0x000598, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::RotationResetInterpSpeed' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, bLeftTracer) == 0x00059C, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::bLeftTracer' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, LastKillSoundTime) == 0x0005A0, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::LastKillSoundTime' has a wrong offset!");
static_assert(offsetof(AB_BGA_Explorer_OutlanderFragmentBear_C, MinKillSoundInterval) == 0x0005A4, "Member 'AB_BGA_Explorer_OutlanderFragmentBear_C::MinKillSoundInterval' has a wrong offset!");

}

#pragma pack(pop)
