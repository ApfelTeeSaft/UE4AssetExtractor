#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Constructor_BASE

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "StructRecyclingResource_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass B_Constructor_BASE.B_Constructor_BASE_C
// 0x02D0 (0x0E50 - 0x0B80)
class AB_Constructor_BASE_C final : public AFortConstructorBASE
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B80(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x0B84(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USphereComponent*                       Sphere_Collision_For_Anim;                         // 0x0B88(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USkeletalMeshComponent*                 SK_Base_Device;                                    // 0x0B8C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UFortMiniMapComponent*                  FortMiniMap1;                                      // 0x0B90(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        Workbench_Ticking;                                 // 0x0B94(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Screen_Lightbeam_01;                               // 0x0B98(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               smoke_puff;                                        // 0x0B9C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               lightning2;                                        // 0x0BA0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               lightning1;                                        // 0x0BA4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USceneComponent*                        Root;                                              // 0x0BA8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	struct FGameplayTagContainer                  TC_BigBrother;                                     // 0x0BAC(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         BigBrotherAdditionalNodes;                         // 0x0BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UTexture2D*                             MiniMapIcon;                                       // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Minimap_View_Distance;                             // 0x0BCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 GE_ContainmentUnit;                                // 0x0BD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 GE_Hyperthreading;                                 // 0x0BD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_Hyperthreading;                                 // 0x0BD8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_SubroutineOptimization;                         // 0x0BF0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_SubroutineOptimization;                         // 0x0C08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_Recycling;                                      // 0x0C0C(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         ConnectedWood;                                     // 0x0C24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         ConnectedStone;                                    // 0x0C28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         ConnectedMetal;                                    // 0x0C2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UFortWorldItemDefinition*               Wood;                                              // 0x0C30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UFortWorldItemDefinition*               Stone;                                             // 0x0C34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UFortWorldItemDefinition*               Metal;                                             // 0x0C38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RecyclingMultiplier;                               // 0x0C3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MinRandomVector;                                   // 0x0C40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MaxRandomVector;                                   // 0x0C44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SpawnWood;                                         // 0x0C48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SpawnStone;                                        // 0x0C49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SpawnMetal;                                        // 0x0C4A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C4B[0x1];                                      // 0x0C4B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnMax;                                          // 0x0C4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         HyperThreadingMultiplier;                          // 0x0C50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_DefensiveIntegration;                           // 0x0C54(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_DefensiveIntegration;                           // 0x0C6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_AutomatedDefenses;                              // 0x0C70(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AutomatedDefenses_Additional_Nodes;                // 0x0C88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_TotalIntegration;                               // 0x0C8C(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_PowerModulation;                                // 0x0CA4(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_PowerModulation;                                // 0x0CBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_ExitPlan;                                       // 0x0CC0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         DefensiveIntegrationLevel;                         // 0x0CD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 GE_LoftyArchitecture;                              // 0x0CDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_LoftyArchitecture;                              // 0x0CE0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  Safety_Protocols;                                  // 0x0CF8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_SafetyProtocols;                                // 0x0D10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BaseIsPlaced;                                      // 0x0D14(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_D15[0x3];                                      // 0x0D15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumbPlayersNearBase;                               // 0x0D18(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BaseStaticMeshArrays;                              // 0x0D1C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1D[0x3];                                      // 0x0D1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BasePowerLevel;                                    // 0x0D20(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         BaseAnimPlayRate;                                  // 0x0D24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         TotalResourcesSpawned;                             // 0x0D28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         ResourceLimit;                                     // 0x0D2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_Overclocking;                                   // 0x0D30(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_UpgradedPowerModulation;                        // 0x0D48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_ElectrifiedFloors;                              // 0x0D4C(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_SlowUnit;                                       // 0x0D64(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_SlowUnit;                                       // 0x0D7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_ContainmentUnit;                                // 0x0D80(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_WallContainmentUnit;                            // 0x0D98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_StrongerExit;                                   // 0x0D9C(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_StrongerExit;                                   // 0x0DB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_CardioFeedbackLoop;                             // 0x0DB8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_ShieldCapacitor;                                // 0x0DD0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_ShieldCapacitor;                                // 0x0DE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FStructRecyclingResource               StoredWood;                                        // 0x0DEC(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	struct FStructRecyclingResource               StoredStone;                                       // 0x0DF4(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	struct FStructRecyclingResource               StoredMetal;                                       // 0x0DFC(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	int32                                         HyperthreadingResourceLimit;                       // 0x0E04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CollectResources;                                  // 0x0E08(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_E09[0x3];                                      // 0x0E09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CraneLv5AdditionalNodes;                           // 0x0E0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 GE_NeuroFeedbackLoop;                              // 0x0E10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAbilitySystemComponent*                ConstructorAbilitySystemComponent;                 // 0x0E14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 GE_OutgoingDamageAmp;                              // 0x0E18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DamageAmp;                                         // 0x0E1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 GE_FullyContained;                                 // 0x0E20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UMaterialInterface*>             Outer_MIDs;                                        // 0x0E24(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UStaticMeshComponent*                   Effect_Mesh_Comp;                                  // 0x0E30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UMaterialInterface*>             Inner_MIDs;                                        // 0x0E34(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UStaticMesh*>                    BASEMeshes;                                        // 0x0E40(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         Transition_Start_Delay;                            // 0x0E4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_B_Constructor_BASE(int32 EntryPoint);
	void ResourcesCreated();
	void GetDamageAmp();
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn);
	void StopBuildingActorVisuals(class ABuildingSMActor* BuildingActor, class UStaticMeshComponent* EffectMeshComp);
	void StartBuildingActorVisuals(class ABuildingSMActor* BuildingActor, class UStaticMeshComponent* EffectMeshComp);
	void AnimateLegs(bool LegsUp);
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_267_ComponentEndOverlapSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_264_ComponentBeginOverlapSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Recycling();
	void OnPlaced(class UAbilitySystemComponent* InstigatorAbilitySystemComponent);
	void UserConstructionScript();
	void SetupBaseDefaultValues(class UAbilitySystemComponent* Ability_System_Component, int32* NodesToAffect_0);
	void Setup_Base_Effect_Array(class UAbilitySystemComponent* Instigator_Ability_System, TArray<struct FBASEGameplayEffect>* BASEBuildingEffects, TArray<struct FBASEGameplayEffect>* BASEFriendlyEffects, TArray<struct FBASEGameplayEffect>* BASEHostileEffects);
	void SetupBuildingEffects(class UAbilitySystemComponent* AbilitySystemComponent_0, TArray<struct FBASEGameplayEffect>* BuildingEffects);
	void SetupFriendlyEffects(class UAbilitySystemComponent* AbilitySystemComponent_0, TArray<struct FBASEGameplayEffect>* FriendlyEffects);
	void SetupHostileEffects(class UAbilitySystemComponent* AbilitySystemComponent_0, TArray<struct FBASEGameplayEffect>* HostileEffects);
	void RecycleResources();
	void OnRep_BaseIsPlaced();
	void OnRep_NumbPlayersNearBase();
	void AddGEToBaseArray(TArray<struct FBASEGameplayEffect>& BaseArray, class UClass* GameplayEffect, int32 LevelOverride);
	void SpawnResourceForRecycling(class UFortWorldItemDefinition* ItemDefinition, int32 AmountToSpawn, EFortResourceType ResourceType_0);
	void AddResourceToStack(const struct FStructRecyclingResource& RecyclingResource, int32 AmountToSpawn, class UFortWorldItemDefinition* Stored_Resource, struct FStructRecyclingResource* SetValue);
	void OnRep_CollectResources();
	void SetDamageMultiplier();
	void SetBaseVisualGlow();
	void BaseSelfApplyGameplaySpec(const struct FGameplayEffectSpecHandle& GE_Spec);

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Constructor_BASE_C">();
	}
	static class AB_Constructor_BASE_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Constructor_BASE_C>();
	}
};
static_assert(alignof(AB_Constructor_BASE_C) == 0x000004, "Wrong alignment on AB_Constructor_BASE_C");
static_assert(sizeof(AB_Constructor_BASE_C) == 0x000E50, "Wrong size on AB_Constructor_BASE_C");
static_assert(offsetof(AB_Constructor_BASE_C, UberGraphFrame) == 0x000B80, "Member 'AB_Constructor_BASE_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, Box) == 0x000B84, "Member 'AB_Constructor_BASE_C::Box' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, Sphere_Collision_For_Anim) == 0x000B88, "Member 'AB_Constructor_BASE_C::Sphere_Collision_For_Anim' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, SK_Base_Device) == 0x000B8C, "Member 'AB_Constructor_BASE_C::SK_Base_Device' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, FortMiniMap1) == 0x000B90, "Member 'AB_Constructor_BASE_C::FortMiniMap1' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, Workbench_Ticking) == 0x000B94, "Member 'AB_Constructor_BASE_C::Workbench_Ticking' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, Screen_Lightbeam_01) == 0x000B98, "Member 'AB_Constructor_BASE_C::Screen_Lightbeam_01' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, smoke_puff) == 0x000B9C, "Member 'AB_Constructor_BASE_C::smoke_puff' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, lightning2) == 0x000BA0, "Member 'AB_Constructor_BASE_C::lightning2' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, lightning1) == 0x000BA4, "Member 'AB_Constructor_BASE_C::lightning1' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, Root) == 0x000BA8, "Member 'AB_Constructor_BASE_C::Root' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_BigBrother) == 0x000BAC, "Member 'AB_Constructor_BASE_C::TC_BigBrother' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, BigBrotherAdditionalNodes) == 0x000BC4, "Member 'AB_Constructor_BASE_C::BigBrotherAdditionalNodes' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, MiniMapIcon) == 0x000BC8, "Member 'AB_Constructor_BASE_C::MiniMapIcon' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, Minimap_View_Distance) == 0x000BCC, "Member 'AB_Constructor_BASE_C::Minimap_View_Distance' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_ContainmentUnit) == 0x000BD0, "Member 'AB_Constructor_BASE_C::GE_ContainmentUnit' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_Hyperthreading) == 0x000BD4, "Member 'AB_Constructor_BASE_C::GE_Hyperthreading' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_Hyperthreading) == 0x000BD8, "Member 'AB_Constructor_BASE_C::TC_Hyperthreading' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_SubroutineOptimization) == 0x000BF0, "Member 'AB_Constructor_BASE_C::TC_SubroutineOptimization' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_SubroutineOptimization) == 0x000C08, "Member 'AB_Constructor_BASE_C::GE_SubroutineOptimization' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_Recycling) == 0x000C0C, "Member 'AB_Constructor_BASE_C::TC_Recycling' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, ConnectedWood) == 0x000C24, "Member 'AB_Constructor_BASE_C::ConnectedWood' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, ConnectedStone) == 0x000C28, "Member 'AB_Constructor_BASE_C::ConnectedStone' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, ConnectedMetal) == 0x000C2C, "Member 'AB_Constructor_BASE_C::ConnectedMetal' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, Wood) == 0x000C30, "Member 'AB_Constructor_BASE_C::Wood' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, Stone) == 0x000C34, "Member 'AB_Constructor_BASE_C::Stone' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, Metal) == 0x000C38, "Member 'AB_Constructor_BASE_C::Metal' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, RecyclingMultiplier) == 0x000C3C, "Member 'AB_Constructor_BASE_C::RecyclingMultiplier' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, MinRandomVector) == 0x000C40, "Member 'AB_Constructor_BASE_C::MinRandomVector' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, MaxRandomVector) == 0x000C44, "Member 'AB_Constructor_BASE_C::MaxRandomVector' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, SpawnWood) == 0x000C48, "Member 'AB_Constructor_BASE_C::SpawnWood' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, SpawnStone) == 0x000C49, "Member 'AB_Constructor_BASE_C::SpawnStone' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, SpawnMetal) == 0x000C4A, "Member 'AB_Constructor_BASE_C::SpawnMetal' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, SpawnMax) == 0x000C4C, "Member 'AB_Constructor_BASE_C::SpawnMax' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, HyperThreadingMultiplier) == 0x000C50, "Member 'AB_Constructor_BASE_C::HyperThreadingMultiplier' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_DefensiveIntegration) == 0x000C54, "Member 'AB_Constructor_BASE_C::TC_DefensiveIntegration' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_DefensiveIntegration) == 0x000C6C, "Member 'AB_Constructor_BASE_C::GE_DefensiveIntegration' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_AutomatedDefenses) == 0x000C70, "Member 'AB_Constructor_BASE_C::TC_AutomatedDefenses' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, AutomatedDefenses_Additional_Nodes) == 0x000C88, "Member 'AB_Constructor_BASE_C::AutomatedDefenses_Additional_Nodes' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_TotalIntegration) == 0x000C8C, "Member 'AB_Constructor_BASE_C::TC_TotalIntegration' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_PowerModulation) == 0x000CA4, "Member 'AB_Constructor_BASE_C::TC_PowerModulation' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_PowerModulation) == 0x000CBC, "Member 'AB_Constructor_BASE_C::GE_PowerModulation' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_ExitPlan) == 0x000CC0, "Member 'AB_Constructor_BASE_C::TC_ExitPlan' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, DefensiveIntegrationLevel) == 0x000CD8, "Member 'AB_Constructor_BASE_C::DefensiveIntegrationLevel' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_LoftyArchitecture) == 0x000CDC, "Member 'AB_Constructor_BASE_C::GE_LoftyArchitecture' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_LoftyArchitecture) == 0x000CE0, "Member 'AB_Constructor_BASE_C::TC_LoftyArchitecture' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, Safety_Protocols) == 0x000CF8, "Member 'AB_Constructor_BASE_C::Safety_Protocols' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_SafetyProtocols) == 0x000D10, "Member 'AB_Constructor_BASE_C::GE_SafetyProtocols' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, BaseIsPlaced) == 0x000D14, "Member 'AB_Constructor_BASE_C::BaseIsPlaced' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, NumbPlayersNearBase) == 0x000D18, "Member 'AB_Constructor_BASE_C::NumbPlayersNearBase' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, BaseStaticMeshArrays) == 0x000D1C, "Member 'AB_Constructor_BASE_C::BaseStaticMeshArrays' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, BasePowerLevel) == 0x000D20, "Member 'AB_Constructor_BASE_C::BasePowerLevel' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, BaseAnimPlayRate) == 0x000D24, "Member 'AB_Constructor_BASE_C::BaseAnimPlayRate' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TotalResourcesSpawned) == 0x000D28, "Member 'AB_Constructor_BASE_C::TotalResourcesSpawned' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, ResourceLimit) == 0x000D2C, "Member 'AB_Constructor_BASE_C::ResourceLimit' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_Overclocking) == 0x000D30, "Member 'AB_Constructor_BASE_C::TC_Overclocking' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_UpgradedPowerModulation) == 0x000D48, "Member 'AB_Constructor_BASE_C::GE_UpgradedPowerModulation' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_ElectrifiedFloors) == 0x000D4C, "Member 'AB_Constructor_BASE_C::TC_ElectrifiedFloors' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_SlowUnit) == 0x000D64, "Member 'AB_Constructor_BASE_C::TC_SlowUnit' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_SlowUnit) == 0x000D7C, "Member 'AB_Constructor_BASE_C::GE_SlowUnit' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_ContainmentUnit) == 0x000D80, "Member 'AB_Constructor_BASE_C::TC_ContainmentUnit' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_WallContainmentUnit) == 0x000D98, "Member 'AB_Constructor_BASE_C::GE_WallContainmentUnit' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_StrongerExit) == 0x000D9C, "Member 'AB_Constructor_BASE_C::TC_StrongerExit' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_StrongerExit) == 0x000DB4, "Member 'AB_Constructor_BASE_C::GE_StrongerExit' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_CardioFeedbackLoop) == 0x000DB8, "Member 'AB_Constructor_BASE_C::TC_CardioFeedbackLoop' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, TC_ShieldCapacitor) == 0x000DD0, "Member 'AB_Constructor_BASE_C::TC_ShieldCapacitor' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_ShieldCapacitor) == 0x000DE8, "Member 'AB_Constructor_BASE_C::GE_ShieldCapacitor' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, StoredWood) == 0x000DEC, "Member 'AB_Constructor_BASE_C::StoredWood' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, StoredStone) == 0x000DF4, "Member 'AB_Constructor_BASE_C::StoredStone' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, StoredMetal) == 0x000DFC, "Member 'AB_Constructor_BASE_C::StoredMetal' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, HyperthreadingResourceLimit) == 0x000E04, "Member 'AB_Constructor_BASE_C::HyperthreadingResourceLimit' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, CollectResources) == 0x000E08, "Member 'AB_Constructor_BASE_C::CollectResources' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, CraneLv5AdditionalNodes) == 0x000E0C, "Member 'AB_Constructor_BASE_C::CraneLv5AdditionalNodes' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_NeuroFeedbackLoop) == 0x000E10, "Member 'AB_Constructor_BASE_C::GE_NeuroFeedbackLoop' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, ConstructorAbilitySystemComponent) == 0x000E14, "Member 'AB_Constructor_BASE_C::ConstructorAbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_OutgoingDamageAmp) == 0x000E18, "Member 'AB_Constructor_BASE_C::GE_OutgoingDamageAmp' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, DamageAmp) == 0x000E1C, "Member 'AB_Constructor_BASE_C::DamageAmp' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, GE_FullyContained) == 0x000E20, "Member 'AB_Constructor_BASE_C::GE_FullyContained' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, Outer_MIDs) == 0x000E24, "Member 'AB_Constructor_BASE_C::Outer_MIDs' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, Effect_Mesh_Comp) == 0x000E30, "Member 'AB_Constructor_BASE_C::Effect_Mesh_Comp' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, Inner_MIDs) == 0x000E34, "Member 'AB_Constructor_BASE_C::Inner_MIDs' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, BASEMeshes) == 0x000E40, "Member 'AB_Constructor_BASE_C::BASEMeshes' has a wrong offset!");
static_assert(offsetof(AB_Constructor_BASE_C, Transition_Start_Delay) == 0x000E4C, "Member 'AB_Constructor_BASE_C::Transition_Start_Delay' has a wrong offset!");

}

#pragma pack(pop)
