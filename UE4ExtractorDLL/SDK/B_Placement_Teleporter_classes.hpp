#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Placement_Teleporter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass B_Placement_Teleporter.B_Placement_Teleporter_C
// 0x0010 (0x036C - 0x035C)
class AB_Placement_Teleporter_C final : public AFortDecoPreview
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x035C(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Placement_Audio;                                   // 0x0360(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UBoxComponent*                          Box1;                                              // 0x0364(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Good;                                              // 0x0368(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)

public:
	void ExecuteUbergraph_B_Placement_Teleporter(int32 EntryPoint);
	void ReceiveBeginPlay();
	void SetVectorParameterValueOnAllPreviewMIDs(class FName ParamName, const struct FLinearColor& ParamValue);
	void SetScalarParameterValueOnAllPreviewMIDs(class FName ParamName, float ParamValue);
	void OnUpdateVisuals(float DeltaSeconds, bool bSafeToPlace);
	void OnUpdateScale(float Scale, const struct FVector& InWorldSpacePivot);
	void OnInitializeDecoPreview(const class ABuildingActor* NewBuildingActor, const class UFortDecoItemDefinition* NewDecoItemDefinition);
	void OnBounceMotionUpdate(float VectorScale);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Placement_Teleporter_C">();
	}
	static class AB_Placement_Teleporter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Placement_Teleporter_C>();
	}
};
static_assert(alignof(AB_Placement_Teleporter_C) == 0x000004, "Wrong alignment on AB_Placement_Teleporter_C");
static_assert(sizeof(AB_Placement_Teleporter_C) == 0x00036C, "Wrong size on AB_Placement_Teleporter_C");
static_assert(offsetof(AB_Placement_Teleporter_C, UberGraphFrame) == 0x00035C, "Member 'AB_Placement_Teleporter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Placement_Teleporter_C, Placement_Audio) == 0x000360, "Member 'AB_Placement_Teleporter_C::Placement_Audio' has a wrong offset!");
static_assert(offsetof(AB_Placement_Teleporter_C, Box1) == 0x000364, "Member 'AB_Placement_Teleporter_C::Box1' has a wrong offset!");
static_assert(offsetof(AB_Placement_Teleporter_C, Good) == 0x000368, "Member 'AB_Placement_Teleporter_C::Good' has a wrong offset!");

}

#pragma pack(pop)
