#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Prj_AdrenalineRush

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass B_Prj_AdrenalineRush.B_Prj_AdrenalineRush_C
// 0x0058 (0x0470 - 0x0418)
class AB_Prj_AdrenalineRush_C final : public AFortProjectileBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0418(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               P_AdrenalineRush_HealingSparkleInit_01;            // 0x041C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UPostProcessComponent*                  ShockwavePostProcess;                              // 0x0420(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Shockwave;                                         // 0x0424(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         PP_Shockwave_Transition_9A3E45BA49610747DB8700A8BAA24ED4; // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         PP_Shockwave_Fader_9A3E45BA49610747DB8700A8BAA24ED4; // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            PP_Shockwave__Direction_9A3E45BA49610747DB8700A8BAA24ED4; // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_431[0x3];                                      // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PP_Shockwave;                                      // 0x0434(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Shockwave_Ring_Size_Z;                             // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UPostProcessComponent*                  ShockwavePP;                                       // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<float>                                 PP_Shockwave_PlayRate;                             // 0x0440(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         Minimum_Level_To_Cast_Shockwave_Particles;         // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<float>                                 PP_Shockwave_SpawnRate;                            // 0x0450(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         Minimum_Level_To_Cast_Shockwave_Post_Process;      // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Shockwave_Particle_Max_Radius_Clamp;               // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Sound_AdrenalineRush_Start;                        // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Sound_AdrenalineShockWave_FP;                      // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Sound_AdrenalineShockWave_TP;                      // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_B_Prj_AdrenalineRush(int32 EntryPoint);
	void PassInfo(float Radius, class AFortPlayerPawn* Owner_0, int32 Level);
	void PP_Shockwave__UpdateFunc();
	void PP_Shockwave__FinishedFunc();
	void UserConstructionScript();
	void DestroyPP();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Prj_AdrenalineRush_C">();
	}
	static class AB_Prj_AdrenalineRush_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Prj_AdrenalineRush_C>();
	}
};
static_assert(alignof(AB_Prj_AdrenalineRush_C) == 0x000004, "Wrong alignment on AB_Prj_AdrenalineRush_C");
static_assert(sizeof(AB_Prj_AdrenalineRush_C) == 0x000470, "Wrong size on AB_Prj_AdrenalineRush_C");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, UberGraphFrame) == 0x000418, "Member 'AB_Prj_AdrenalineRush_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, P_AdrenalineRush_HealingSparkleInit_01) == 0x00041C, "Member 'AB_Prj_AdrenalineRush_C::P_AdrenalineRush_HealingSparkleInit_01' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, ShockwavePostProcess) == 0x000420, "Member 'AB_Prj_AdrenalineRush_C::ShockwavePostProcess' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, Shockwave) == 0x000424, "Member 'AB_Prj_AdrenalineRush_C::Shockwave' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, PP_Shockwave_Transition_9A3E45BA49610747DB8700A8BAA24ED4) == 0x000428, "Member 'AB_Prj_AdrenalineRush_C::PP_Shockwave_Transition_9A3E45BA49610747DB8700A8BAA24ED4' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, PP_Shockwave_Fader_9A3E45BA49610747DB8700A8BAA24ED4) == 0x00042C, "Member 'AB_Prj_AdrenalineRush_C::PP_Shockwave_Fader_9A3E45BA49610747DB8700A8BAA24ED4' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, PP_Shockwave__Direction_9A3E45BA49610747DB8700A8BAA24ED4) == 0x000430, "Member 'AB_Prj_AdrenalineRush_C::PP_Shockwave__Direction_9A3E45BA49610747DB8700A8BAA24ED4' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, PP_Shockwave) == 0x000434, "Member 'AB_Prj_AdrenalineRush_C::PP_Shockwave' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, Shockwave_Ring_Size_Z) == 0x000438, "Member 'AB_Prj_AdrenalineRush_C::Shockwave_Ring_Size_Z' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, ShockwavePP) == 0x00043C, "Member 'AB_Prj_AdrenalineRush_C::ShockwavePP' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, PP_Shockwave_PlayRate) == 0x000440, "Member 'AB_Prj_AdrenalineRush_C::PP_Shockwave_PlayRate' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, Minimum_Level_To_Cast_Shockwave_Particles) == 0x00044C, "Member 'AB_Prj_AdrenalineRush_C::Minimum_Level_To_Cast_Shockwave_Particles' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, PP_Shockwave_SpawnRate) == 0x000450, "Member 'AB_Prj_AdrenalineRush_C::PP_Shockwave_SpawnRate' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, Minimum_Level_To_Cast_Shockwave_Post_Process) == 0x00045C, "Member 'AB_Prj_AdrenalineRush_C::Minimum_Level_To_Cast_Shockwave_Post_Process' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, Shockwave_Particle_Max_Radius_Clamp) == 0x000460, "Member 'AB_Prj_AdrenalineRush_C::Shockwave_Particle_Max_Radius_Clamp' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, Sound_AdrenalineRush_Start) == 0x000464, "Member 'AB_Prj_AdrenalineRush_C::Sound_AdrenalineRush_Start' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, Sound_AdrenalineShockWave_FP) == 0x000468, "Member 'AB_Prj_AdrenalineRush_C::Sound_AdrenalineShockWave_FP' has a wrong offset!");
static_assert(offsetof(AB_Prj_AdrenalineRush_C, Sound_AdrenalineShockWave_TP) == 0x00046C, "Member 'AB_Prj_AdrenalineRush_C::Sound_AdrenalineShockWave_TP' has a wrong offset!");

}

#pragma pack(pop)
