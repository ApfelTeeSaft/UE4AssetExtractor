#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Prj_BotTurret

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass B_Prj_BotTurret.B_Prj_BotTurret_C
// 0x0120 (0x0538 - 0x0418)
class AB_Prj_BotTurret_C final : public AFortProjectileBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0418(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               P_BotTurret_ProjectileRings_01;                    // 0x041C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UPointLightComponent*                   Projectile_Light;                                  // 0x0420(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UBoxComponent*                          ImpactSpawnLocation;                               // 0x0424(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   Projectile_Mesh;                                   // 0x0428(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Ribbon_Trail_PSC;                                  // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*               Water_Explosion_PSC;                               // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Ribbon_Trail_PS;                                   // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Water_Explosion_PS;                                // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Explosion_Generic_PS;                              // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*               Explosion_Generic_PSC;                             // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Explosion_Generic_Sound;                           // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                StopLocation;                                      // 0x0448(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<EObjectTypeQuery>                      ObjectsToTraceAgainst;                             // 0x0454(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UParticleSystem*                        Explosion_Flesh_Damage_PS;                         // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               StopRotX;                                          // 0x0464(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TrailLifetime;                                     // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*               Explosion_Flesh_Damage_PSC;                        // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         NumberOfBounces;                                   // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 LaserDamage;                                       // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldBounce;                                      // 0x0480(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_481[0x3];                                      // 0x0481(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Impact_Effect;                                     // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         MaxBounces;                                        // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Bounce;                                            // 0x048C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_48D[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Projectile_MID__0;                                 // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Projectile_Inner_Color_A__Friendly_;               // 0x0494(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Projectile_Inner_Color_A__Enemy_;                  // 0x04A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Projectile_Inner_Color_B__Friendly_;               // 0x04B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Projectile_Inner_Color_B__Enemy_;                  // 0x04C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Projectile_Highlight_Color__Friendly_;             // 0x04D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Projectile_Highlight_Color__Enemy_;                // 0x04E4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Light_Color__Enemy_;                               // 0x04F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Start_Position;                                    // 0x0504(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AFortPawn*                              Pawn_Hit;                                          // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                End_Position;                                      // 0x0514(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Impact_Effect__Enemy_;                             // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Light_Color__Friendly_;                            // 0x0524(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AFortPlayerState*                       PlayerState;                                       // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_B_Prj_BotTurret(int32 EntryPoint);
	void OnBounce(const struct FHitResult& Hit);
	void OnExploded(const TArray<class AActor*>& HitActors, const TArray<struct FHitResult>& HitResults);
	void Hit_Pawn();
	void HitStaticMesh();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void OnRep_ShouldBounce();
	void OnRep_Bounce();
	void SetTeamColorVFX();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Prj_BotTurret_C">();
	}
	static class AB_Prj_BotTurret_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Prj_BotTurret_C>();
	}
};
static_assert(alignof(AB_Prj_BotTurret_C) == 0x000004, "Wrong alignment on AB_Prj_BotTurret_C");
static_assert(sizeof(AB_Prj_BotTurret_C) == 0x000538, "Wrong size on AB_Prj_BotTurret_C");
static_assert(offsetof(AB_Prj_BotTurret_C, UberGraphFrame) == 0x000418, "Member 'AB_Prj_BotTurret_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, P_BotTurret_ProjectileRings_01) == 0x00041C, "Member 'AB_Prj_BotTurret_C::P_BotTurret_ProjectileRings_01' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Projectile_Light) == 0x000420, "Member 'AB_Prj_BotTurret_C::Projectile_Light' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, ImpactSpawnLocation) == 0x000424, "Member 'AB_Prj_BotTurret_C::ImpactSpawnLocation' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Projectile_Mesh) == 0x000428, "Member 'AB_Prj_BotTurret_C::Projectile_Mesh' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Ribbon_Trail_PSC) == 0x00042C, "Member 'AB_Prj_BotTurret_C::Ribbon_Trail_PSC' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Water_Explosion_PSC) == 0x000430, "Member 'AB_Prj_BotTurret_C::Water_Explosion_PSC' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Ribbon_Trail_PS) == 0x000434, "Member 'AB_Prj_BotTurret_C::Ribbon_Trail_PS' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Water_Explosion_PS) == 0x000438, "Member 'AB_Prj_BotTurret_C::Water_Explosion_PS' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Explosion_Generic_PS) == 0x00043C, "Member 'AB_Prj_BotTurret_C::Explosion_Generic_PS' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Explosion_Generic_PSC) == 0x000440, "Member 'AB_Prj_BotTurret_C::Explosion_Generic_PSC' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Explosion_Generic_Sound) == 0x000444, "Member 'AB_Prj_BotTurret_C::Explosion_Generic_Sound' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, StopLocation) == 0x000448, "Member 'AB_Prj_BotTurret_C::StopLocation' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, ObjectsToTraceAgainst) == 0x000454, "Member 'AB_Prj_BotTurret_C::ObjectsToTraceAgainst' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Explosion_Flesh_Damage_PS) == 0x000460, "Member 'AB_Prj_BotTurret_C::Explosion_Flesh_Damage_PS' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, StopRotX) == 0x000464, "Member 'AB_Prj_BotTurret_C::StopRotX' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, TrailLifetime) == 0x000470, "Member 'AB_Prj_BotTurret_C::TrailLifetime' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Explosion_Flesh_Damage_PSC) == 0x000474, "Member 'AB_Prj_BotTurret_C::Explosion_Flesh_Damage_PSC' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, NumberOfBounces) == 0x000478, "Member 'AB_Prj_BotTurret_C::NumberOfBounces' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, LaserDamage) == 0x00047C, "Member 'AB_Prj_BotTurret_C::LaserDamage' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, ShouldBounce) == 0x000480, "Member 'AB_Prj_BotTurret_C::ShouldBounce' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Impact_Effect) == 0x000484, "Member 'AB_Prj_BotTurret_C::Impact_Effect' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, MaxBounces) == 0x000488, "Member 'AB_Prj_BotTurret_C::MaxBounces' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Bounce) == 0x00048C, "Member 'AB_Prj_BotTurret_C::Bounce' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Projectile_MID__0) == 0x000490, "Member 'AB_Prj_BotTurret_C::Projectile_MID__0' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Projectile_Inner_Color_A__Friendly_) == 0x000494, "Member 'AB_Prj_BotTurret_C::Projectile_Inner_Color_A__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Projectile_Inner_Color_A__Enemy_) == 0x0004A4, "Member 'AB_Prj_BotTurret_C::Projectile_Inner_Color_A__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Projectile_Inner_Color_B__Friendly_) == 0x0004B4, "Member 'AB_Prj_BotTurret_C::Projectile_Inner_Color_B__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Projectile_Inner_Color_B__Enemy_) == 0x0004C4, "Member 'AB_Prj_BotTurret_C::Projectile_Inner_Color_B__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Projectile_Highlight_Color__Friendly_) == 0x0004D4, "Member 'AB_Prj_BotTurret_C::Projectile_Highlight_Color__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Projectile_Highlight_Color__Enemy_) == 0x0004E4, "Member 'AB_Prj_BotTurret_C::Projectile_Highlight_Color__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Light_Color__Enemy_) == 0x0004F4, "Member 'AB_Prj_BotTurret_C::Light_Color__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Start_Position) == 0x000504, "Member 'AB_Prj_BotTurret_C::Start_Position' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Pawn_Hit) == 0x000510, "Member 'AB_Prj_BotTurret_C::Pawn_Hit' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, End_Position) == 0x000514, "Member 'AB_Prj_BotTurret_C::End_Position' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Impact_Effect__Enemy_) == 0x000520, "Member 'AB_Prj_BotTurret_C::Impact_Effect__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, Light_Color__Friendly_) == 0x000524, "Member 'AB_Prj_BotTurret_C::Light_Color__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_Prj_BotTurret_C, PlayerState) == 0x000534, "Member 'AB_Prj_BotTurret_C::PlayerState' has a wrong offset!");

}

#pragma pack(pop)
