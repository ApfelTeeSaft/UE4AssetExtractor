#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Prj_Commando_FragGrenade_Cluster

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass B_Prj_Commando_FragGrenade_Cluster.B_Prj_Commando_FragGrenade_Cluster_C
// 0x0048 (0x0460 - 0x0418)
class AB_Prj_Commando_FragGrenade_Cluster_C final : public AFortProj_M80
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0418(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               ParticleSystem1;                                   // 0x041C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        Audio1;                                            // 0x0420(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	bool                                          IsPlaced;                                          // 0x0424(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x0425(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_426[0x2];                                      // 0x0426(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Mine_Material;                                     // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AFortProjectileBase*                    Projectile;                                        // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 Projectile_Cluster;                                // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Rotation_Direction;                                // 0x0434(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             BounceSound;                                       // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        P_Explosion;                                       // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             ExplosionSound;                                    // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                ExplosionLocation;                                 // 0x044C(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MinExplosionDelay;                                 // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MaxExplosionDelay;                                 // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_B_Prj_Commando_FragGrenade_Cluster(int32 EntryPoint);
	void OnExploded(const TArray<class AActor*>& HitActors, const TArray<struct FHitResult>& HitResults);
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void OnStop(const struct FHitResult& Hit);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Prj_Commando_FragGrenade_Cluster_C">();
	}
	static class AB_Prj_Commando_FragGrenade_Cluster_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Prj_Commando_FragGrenade_Cluster_C>();
	}
};
static_assert(alignof(AB_Prj_Commando_FragGrenade_Cluster_C) == 0x000004, "Wrong alignment on AB_Prj_Commando_FragGrenade_Cluster_C");
static_assert(sizeof(AB_Prj_Commando_FragGrenade_Cluster_C) == 0x000460, "Wrong size on AB_Prj_Commando_FragGrenade_Cluster_C");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, UberGraphFrame) == 0x000418, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, ParticleSystem1) == 0x00041C, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::ParticleSystem1' has a wrong offset!");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, Audio1) == 0x000420, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::Audio1' has a wrong offset!");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, IsPlaced) == 0x000424, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::IsPlaced' has a wrong offset!");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, Active) == 0x000425, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::Active' has a wrong offset!");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, Mine_Material) == 0x000428, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::Mine_Material' has a wrong offset!");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, Projectile) == 0x00042C, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::Projectile' has a wrong offset!");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, Projectile_Cluster) == 0x000430, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::Projectile_Cluster' has a wrong offset!");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, Rotation_Direction) == 0x000434, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::Rotation_Direction' has a wrong offset!");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, BounceSound) == 0x000440, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::BounceSound' has a wrong offset!");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, P_Explosion) == 0x000444, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::P_Explosion' has a wrong offset!");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, ExplosionSound) == 0x000448, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::ExplosionSound' has a wrong offset!");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, ExplosionLocation) == 0x00044C, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::ExplosionLocation' has a wrong offset!");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, MinExplosionDelay) == 0x000458, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::MinExplosionDelay' has a wrong offset!");
static_assert(offsetof(AB_Prj_Commando_FragGrenade_Cluster_C, MaxExplosionDelay) == 0x00045C, "Member 'AB_Prj_Commando_FragGrenade_Cluster_C::MaxExplosionDelay' has a wrong offset!");

}

#pragma pack(pop)
