#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Prj_Constructor_MiniPulse

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass B_Prj_Constructor_MiniPulse.B_Prj_Constructor_MiniPulse_C
// 0x002C (0x0444 - 0x0418)
class AB_Prj_Constructor_MiniPulse_C final : public AFortProjectileBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0418(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Radius_Sphere;                                     // 0x041C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   Mesh;                                              // 0x0420(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               ParticleSystem1;                                   // 0x0424(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UMaterialInstanceDynamic*               Mine_Material;                                     // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             MiniPulseCue;                                      // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        P_Explosion;                                       // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             ExplosionCue;                                      // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 B_PostFX;                                          // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         PostFX_BoxScale;                                   // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PostFX_UseCameraShake;                             // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_B_Prj_Constructor_MiniPulse(int32 EntryPoint);
	void OnExploded(const TArray<class AActor*>& HitActors, const TArray<struct FHitResult>& HitResults);
	void OnBounce(const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Prj_Constructor_MiniPulse_C">();
	}
	static class AB_Prj_Constructor_MiniPulse_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Prj_Constructor_MiniPulse_C>();
	}
};
static_assert(alignof(AB_Prj_Constructor_MiniPulse_C) == 0x000004, "Wrong alignment on AB_Prj_Constructor_MiniPulse_C");
static_assert(sizeof(AB_Prj_Constructor_MiniPulse_C) == 0x000444, "Wrong size on AB_Prj_Constructor_MiniPulse_C");
static_assert(offsetof(AB_Prj_Constructor_MiniPulse_C, UberGraphFrame) == 0x000418, "Member 'AB_Prj_Constructor_MiniPulse_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Prj_Constructor_MiniPulse_C, Radius_Sphere) == 0x00041C, "Member 'AB_Prj_Constructor_MiniPulse_C::Radius_Sphere' has a wrong offset!");
static_assert(offsetof(AB_Prj_Constructor_MiniPulse_C, Mesh) == 0x000420, "Member 'AB_Prj_Constructor_MiniPulse_C::Mesh' has a wrong offset!");
static_assert(offsetof(AB_Prj_Constructor_MiniPulse_C, ParticleSystem1) == 0x000424, "Member 'AB_Prj_Constructor_MiniPulse_C::ParticleSystem1' has a wrong offset!");
static_assert(offsetof(AB_Prj_Constructor_MiniPulse_C, Mine_Material) == 0x000428, "Member 'AB_Prj_Constructor_MiniPulse_C::Mine_Material' has a wrong offset!");
static_assert(offsetof(AB_Prj_Constructor_MiniPulse_C, MiniPulseCue) == 0x00042C, "Member 'AB_Prj_Constructor_MiniPulse_C::MiniPulseCue' has a wrong offset!");
static_assert(offsetof(AB_Prj_Constructor_MiniPulse_C, P_Explosion) == 0x000430, "Member 'AB_Prj_Constructor_MiniPulse_C::P_Explosion' has a wrong offset!");
static_assert(offsetof(AB_Prj_Constructor_MiniPulse_C, ExplosionCue) == 0x000434, "Member 'AB_Prj_Constructor_MiniPulse_C::ExplosionCue' has a wrong offset!");
static_assert(offsetof(AB_Prj_Constructor_MiniPulse_C, B_PostFX) == 0x000438, "Member 'AB_Prj_Constructor_MiniPulse_C::B_PostFX' has a wrong offset!");
static_assert(offsetof(AB_Prj_Constructor_MiniPulse_C, PostFX_BoxScale) == 0x00043C, "Member 'AB_Prj_Constructor_MiniPulse_C::PostFX_BoxScale' has a wrong offset!");
static_assert(offsetof(AB_Prj_Constructor_MiniPulse_C, PostFX_UseCameraShake) == 0x000440, "Member 'AB_Prj_Constructor_MiniPulse_C::PostFX_UseCameraShake' has a wrong offset!");

}

#pragma pack(pop)
