#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Prj_Llama_Head

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass B_Prj_Llama_Head.B_Prj_Llama_Head_C
// 0x004C (0x0464 - 0x0418)
class AB_Prj_Llama_Head_C final : public AFortProjectileBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0418(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   HeadMesh;                                          // 0x041C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	EPhysicalSurface                              WaterPhysMat;                                      // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_421[0x3];                                      // 0x0421(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Bounce_WaterSplash_PS;                             // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Bounce_Generic_PS;                                 // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             BounceGenericSound;                                // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             BounceWaterSound;                                  // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        SmokeTrailFX;                                      // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   AttachSocketName;                                  // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         RotTickDelta;                                      // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShouldRotate;                                      // 0x0444(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_445[0x3];                                      // 0x0445(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RelativeRotation;                                  // 0x0448(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        DeathExplodeFX;                                    // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             BounceSound;                                       // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             ExplodeHeadSound;                                  // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ProjectileActivated;                               // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_B_Prj_Llama_Head(int32 EntryPoint);
	void ReceiveBeginPlay();
	void OnProjectileStop_Event_0(const struct FHitResult& ImpactResult);
	void ReceiveTick(float DeltaSeconds);
	void OnBounce(const struct FHitResult& Hit);
	void UserConstructionScript();
	void SpawnBounceFX(struct FHitResult& Hit, struct FHitResult* HitResult, EPhysicalSurface* SurfaceType, struct FRotator* HitResultRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Prj_Llama_Head_C">();
	}
	static class AB_Prj_Llama_Head_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Prj_Llama_Head_C>();
	}
};
static_assert(alignof(AB_Prj_Llama_Head_C) == 0x000004, "Wrong alignment on AB_Prj_Llama_Head_C");
static_assert(sizeof(AB_Prj_Llama_Head_C) == 0x000464, "Wrong size on AB_Prj_Llama_Head_C");
static_assert(offsetof(AB_Prj_Llama_Head_C, UberGraphFrame) == 0x000418, "Member 'AB_Prj_Llama_Head_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, HeadMesh) == 0x00041C, "Member 'AB_Prj_Llama_Head_C::HeadMesh' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, WaterPhysMat) == 0x000420, "Member 'AB_Prj_Llama_Head_C::WaterPhysMat' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, Bounce_WaterSplash_PS) == 0x000424, "Member 'AB_Prj_Llama_Head_C::Bounce_WaterSplash_PS' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, Bounce_Generic_PS) == 0x000428, "Member 'AB_Prj_Llama_Head_C::Bounce_Generic_PS' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, BounceGenericSound) == 0x00042C, "Member 'AB_Prj_Llama_Head_C::BounceGenericSound' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, BounceWaterSound) == 0x000430, "Member 'AB_Prj_Llama_Head_C::BounceWaterSound' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, SmokeTrailFX) == 0x000434, "Member 'AB_Prj_Llama_Head_C::SmokeTrailFX' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, AttachSocketName) == 0x000438, "Member 'AB_Prj_Llama_Head_C::AttachSocketName' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, RotTickDelta) == 0x000440, "Member 'AB_Prj_Llama_Head_C::RotTickDelta' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, ShouldRotate) == 0x000444, "Member 'AB_Prj_Llama_Head_C::ShouldRotate' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, RelativeRotation) == 0x000448, "Member 'AB_Prj_Llama_Head_C::RelativeRotation' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, DeathExplodeFX) == 0x000454, "Member 'AB_Prj_Llama_Head_C::DeathExplodeFX' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, BounceSound) == 0x000458, "Member 'AB_Prj_Llama_Head_C::BounceSound' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, ExplodeHeadSound) == 0x00045C, "Member 'AB_Prj_Llama_Head_C::ExplodeHeadSound' has a wrong offset!");
static_assert(offsetof(AB_Prj_Llama_Head_C, ProjectileActivated) == 0x000460, "Member 'AB_Prj_Llama_Head_C::ProjectileActivated' has a wrong offset!");

}

#pragma pack(pop)
