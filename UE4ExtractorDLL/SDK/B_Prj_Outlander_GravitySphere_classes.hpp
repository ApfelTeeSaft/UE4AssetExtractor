#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Prj_Outlander_GravitySphere

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass B_Prj_Outlander_GravitySphere.B_Prj_Outlander_GravitySphere_C
// 0x00F4 (0x050C - 0x0418)
class AB_Prj_Outlander_GravitySphere_C final : public AFortProjectileBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0418(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               P_Outlander_GravitySphere_Running_01;              // 0x041C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0420(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USphereComponent*                       ActualCollide;                                     // 0x0424(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               P_Outlander_GravityWell_01;                        // 0x0428(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   GravitySphere;                                     // 0x042C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Effect_Distance_Guide;                             // 0x0430(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   Mesh;                                              // 0x0434(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Effect_land;                                       // 0x0438(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         SphereEnemyReact_LERP_3B5F4B8A40E5A9B40A8066878C7931B6; // 0x043C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            SphereEnemyReact__Direction_3B5F4B8A40E5A9B40A8066878C7931B6; // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_441[0x3];                                      // 0x0441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SphereEnemyReact;                                  // 0x0444(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         EnterTheSphere_PPBlendWeight_EFA485B548B488E7BF5B40B928962649; // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            EnterTheSphere__Direction_EFA485B548B488E7BF5B40B928962649; // 0x044C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44D[0x3];                                      // 0x044D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     EnterTheSphere;                                    // 0x0450(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         ScaleSphere_FresnelExponent_0D305844404C6ED95C6E6DA4497EDD45; // 0x0454(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         ScaleSphere_Scale_0D305844404C6ED95C6E6DA4497EDD45; // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            ScaleSphere__Direction_0D305844404C6ED95C6E6DA4497EDD45; // 0x045C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45D[0x3];                                      // 0x045D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ScaleSphere;                                       // 0x0460(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAudioComponent*                        Alarm_Sound;                                       // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                EffectSizeScale;                                   // 0x0468(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         SphereSize;                                        // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         LifeTime;                                          // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             ExplosionSound;                                    // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                HitLocation;                                       // 0x0480(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               SphereMID;                                         // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFriendly;                                        // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        RippleFX;                                          // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Scale_Sphere_Reverse_Play_Rate;                    // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RefractionAmountExterior;                          // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Fresnel_Brightness_A;                              // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Jiggle_Intensity_A;                                // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Fresnel_Exponent_A;                                // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Distorion_Tile;                                    // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          isActive_;                                         // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B1[0x3];                                      // 0x04B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Ripple_Location_Offset;                            // 0x04B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Jiggle_Speed;                                      // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanLoop_;                                          // 0x04C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHasEnemyExtraGravity;                             // 0x04C5(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bHasHeavyStuff;                                    // 0x04C6(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_4C7[0x1];                                      // 0x04C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinesTile;                                         // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SphereEnemyReactLERP;                              // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         EnemyCounter;                                      // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           GravityTag;                                        // 0x04D4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 InsideGravitySphereGE;                             // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 FriendlyGravityGE;                                 // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 EnemyGravityGE;                                    // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 HeavyStuffGE;                                      // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         EnemyExitGravityDuration;                          // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         FriendlyExitGravityDuration;                       // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UFortGameplayAbility*                   InstigatingAbility;                                // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Sound_Sphere_Start;                                // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Sound_Sphere_Enter;                                // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Sound_Sphere_Exit;                                 // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Sound_Sphere_End;                                  // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Sound_Sphere_Loop;                                 // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_B_Prj_Outlander_GravitySphere(int32 EntryPoint);
	void SetHasEnemyExtraGravity(bool bHasEnemyExtraGravity_0);
	void OnExitGravitySphere(class AActor* ExitingActor);
	void OnEnterGravitySphere(class AActor* EnteringActor);
	void SetHasHeavyStuff(bool bInHasHeavyStuff);
	void Loop();
	void RewindPP();
	void RewindSphere();
	void BndEvt__ActualCollide_K2Node_ComponentBoundEvent_496_ComponentEndOverlapSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__ActualCollide_K2Node_ComponentBoundEvent_493_ComponentBeginOverlapSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Planted(const struct FVector& ImpactPoint, const struct FVector& ImpactNormal);
	void OnBounce(const struct FHitResult& Hit);
	void SphereEnemyReact__UpdateFunc();
	void SphereEnemyReact__FinishedFunc();
	void EnterTheSphere__UpdateFunc();
	void EnterTheSphere__FinishedFunc();
	void ScaleSphere__UpdateFunc();
	void ScaleSphere__FinishedFunc();
	void UserConstructionScript();
	void SpawnRippleFX(class AActor* As_Fort_Pawn);
	void OnRep_bHasHeavyStuff();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Prj_Outlander_GravitySphere_C">();
	}
	static class AB_Prj_Outlander_GravitySphere_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Prj_Outlander_GravitySphere_C>();
	}
};
static_assert(alignof(AB_Prj_Outlander_GravitySphere_C) == 0x000004, "Wrong alignment on AB_Prj_Outlander_GravitySphere_C");
static_assert(sizeof(AB_Prj_Outlander_GravitySphere_C) == 0x00050C, "Wrong size on AB_Prj_Outlander_GravitySphere_C");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, UberGraphFrame) == 0x000418, "Member 'AB_Prj_Outlander_GravitySphere_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, P_Outlander_GravitySphere_Running_01) == 0x00041C, "Member 'AB_Prj_Outlander_GravitySphere_C::P_Outlander_GravitySphere_Running_01' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, PostProcess) == 0x000420, "Member 'AB_Prj_Outlander_GravitySphere_C::PostProcess' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, ActualCollide) == 0x000424, "Member 'AB_Prj_Outlander_GravitySphere_C::ActualCollide' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, P_Outlander_GravityWell_01) == 0x000428, "Member 'AB_Prj_Outlander_GravitySphere_C::P_Outlander_GravityWell_01' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, GravitySphere) == 0x00042C, "Member 'AB_Prj_Outlander_GravitySphere_C::GravitySphere' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Effect_Distance_Guide) == 0x000430, "Member 'AB_Prj_Outlander_GravitySphere_C::Effect_Distance_Guide' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Mesh) == 0x000434, "Member 'AB_Prj_Outlander_GravitySphere_C::Mesh' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Effect_land) == 0x000438, "Member 'AB_Prj_Outlander_GravitySphere_C::Effect_land' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, SphereEnemyReact_LERP_3B5F4B8A40E5A9B40A8066878C7931B6) == 0x00043C, "Member 'AB_Prj_Outlander_GravitySphere_C::SphereEnemyReact_LERP_3B5F4B8A40E5A9B40A8066878C7931B6' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, SphereEnemyReact__Direction_3B5F4B8A40E5A9B40A8066878C7931B6) == 0x000440, "Member 'AB_Prj_Outlander_GravitySphere_C::SphereEnemyReact__Direction_3B5F4B8A40E5A9B40A8066878C7931B6' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, SphereEnemyReact) == 0x000444, "Member 'AB_Prj_Outlander_GravitySphere_C::SphereEnemyReact' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, EnterTheSphere_PPBlendWeight_EFA485B548B488E7BF5B40B928962649) == 0x000448, "Member 'AB_Prj_Outlander_GravitySphere_C::EnterTheSphere_PPBlendWeight_EFA485B548B488E7BF5B40B928962649' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, EnterTheSphere__Direction_EFA485B548B488E7BF5B40B928962649) == 0x00044C, "Member 'AB_Prj_Outlander_GravitySphere_C::EnterTheSphere__Direction_EFA485B548B488E7BF5B40B928962649' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, EnterTheSphere) == 0x000450, "Member 'AB_Prj_Outlander_GravitySphere_C::EnterTheSphere' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, ScaleSphere_FresnelExponent_0D305844404C6ED95C6E6DA4497EDD45) == 0x000454, "Member 'AB_Prj_Outlander_GravitySphere_C::ScaleSphere_FresnelExponent_0D305844404C6ED95C6E6DA4497EDD45' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, ScaleSphere_Scale_0D305844404C6ED95C6E6DA4497EDD45) == 0x000458, "Member 'AB_Prj_Outlander_GravitySphere_C::ScaleSphere_Scale_0D305844404C6ED95C6E6DA4497EDD45' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, ScaleSphere__Direction_0D305844404C6ED95C6E6DA4497EDD45) == 0x00045C, "Member 'AB_Prj_Outlander_GravitySphere_C::ScaleSphere__Direction_0D305844404C6ED95C6E6DA4497EDD45' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, ScaleSphere) == 0x000460, "Member 'AB_Prj_Outlander_GravitySphere_C::ScaleSphere' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Alarm_Sound) == 0x000464, "Member 'AB_Prj_Outlander_GravitySphere_C::Alarm_Sound' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, EffectSizeScale) == 0x000468, "Member 'AB_Prj_Outlander_GravitySphere_C::EffectSizeScale' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, SphereSize) == 0x000474, "Member 'AB_Prj_Outlander_GravitySphere_C::SphereSize' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, LifeTime) == 0x000478, "Member 'AB_Prj_Outlander_GravitySphere_C::LifeTime' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, ExplosionSound) == 0x00047C, "Member 'AB_Prj_Outlander_GravitySphere_C::ExplosionSound' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, HitLocation) == 0x000480, "Member 'AB_Prj_Outlander_GravitySphere_C::HitLocation' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, SphereMID) == 0x00048C, "Member 'AB_Prj_Outlander_GravitySphere_C::SphereMID' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, IsFriendly) == 0x000490, "Member 'AB_Prj_Outlander_GravitySphere_C::IsFriendly' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, RippleFX) == 0x000494, "Member 'AB_Prj_Outlander_GravitySphere_C::RippleFX' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Scale_Sphere_Reverse_Play_Rate) == 0x000498, "Member 'AB_Prj_Outlander_GravitySphere_C::Scale_Sphere_Reverse_Play_Rate' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, RefractionAmountExterior) == 0x00049C, "Member 'AB_Prj_Outlander_GravitySphere_C::RefractionAmountExterior' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Fresnel_Brightness_A) == 0x0004A0, "Member 'AB_Prj_Outlander_GravitySphere_C::Fresnel_Brightness_A' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Jiggle_Intensity_A) == 0x0004A4, "Member 'AB_Prj_Outlander_GravitySphere_C::Jiggle_Intensity_A' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Fresnel_Exponent_A) == 0x0004A8, "Member 'AB_Prj_Outlander_GravitySphere_C::Fresnel_Exponent_A' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Distorion_Tile) == 0x0004AC, "Member 'AB_Prj_Outlander_GravitySphere_C::Distorion_Tile' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, isActive_) == 0x0004B0, "Member 'AB_Prj_Outlander_GravitySphere_C::isActive_' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Ripple_Location_Offset) == 0x0004B4, "Member 'AB_Prj_Outlander_GravitySphere_C::Ripple_Location_Offset' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Jiggle_Speed) == 0x0004C0, "Member 'AB_Prj_Outlander_GravitySphere_C::Jiggle_Speed' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, CanLoop_) == 0x0004C4, "Member 'AB_Prj_Outlander_GravitySphere_C::CanLoop_' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, bHasEnemyExtraGravity) == 0x0004C5, "Member 'AB_Prj_Outlander_GravitySphere_C::bHasEnemyExtraGravity' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, bHasHeavyStuff) == 0x0004C6, "Member 'AB_Prj_Outlander_GravitySphere_C::bHasHeavyStuff' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, LinesTile) == 0x0004C8, "Member 'AB_Prj_Outlander_GravitySphere_C::LinesTile' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, SphereEnemyReactLERP) == 0x0004CC, "Member 'AB_Prj_Outlander_GravitySphere_C::SphereEnemyReactLERP' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, EnemyCounter) == 0x0004D0, "Member 'AB_Prj_Outlander_GravitySphere_C::EnemyCounter' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, GravityTag) == 0x0004D4, "Member 'AB_Prj_Outlander_GravitySphere_C::GravityTag' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, InsideGravitySphereGE) == 0x0004DC, "Member 'AB_Prj_Outlander_GravitySphere_C::InsideGravitySphereGE' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, FriendlyGravityGE) == 0x0004E0, "Member 'AB_Prj_Outlander_GravitySphere_C::FriendlyGravityGE' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, EnemyGravityGE) == 0x0004E4, "Member 'AB_Prj_Outlander_GravitySphere_C::EnemyGravityGE' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, HeavyStuffGE) == 0x0004E8, "Member 'AB_Prj_Outlander_GravitySphere_C::HeavyStuffGE' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, EnemyExitGravityDuration) == 0x0004EC, "Member 'AB_Prj_Outlander_GravitySphere_C::EnemyExitGravityDuration' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, FriendlyExitGravityDuration) == 0x0004F0, "Member 'AB_Prj_Outlander_GravitySphere_C::FriendlyExitGravityDuration' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, InstigatingAbility) == 0x0004F4, "Member 'AB_Prj_Outlander_GravitySphere_C::InstigatingAbility' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Sound_Sphere_Start) == 0x0004F8, "Member 'AB_Prj_Outlander_GravitySphere_C::Sound_Sphere_Start' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Sound_Sphere_Enter) == 0x0004FC, "Member 'AB_Prj_Outlander_GravitySphere_C::Sound_Sphere_Enter' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Sound_Sphere_Exit) == 0x000500, "Member 'AB_Prj_Outlander_GravitySphere_C::Sound_Sphere_Exit' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Sound_Sphere_End) == 0x000504, "Member 'AB_Prj_Outlander_GravitySphere_C::Sound_Sphere_End' has a wrong offset!");
static_assert(offsetof(AB_Prj_Outlander_GravitySphere_C, Sound_Sphere_Loop) == 0x000508, "Member 'AB_Prj_Outlander_GravitySphere_C::Sound_Sphere_Loop' has a wrong offset!");

}

#pragma pack(pop)
