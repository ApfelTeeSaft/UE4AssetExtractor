#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Teleporter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass B_Teleporter.B_Teleporter_C
// 0x02E4 (0x076C - 0x0488)
class AB_Teleporter_C final : public ABuildingGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0488(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  TeleportPostProcess;                               // 0x048C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UProjectileMovementComponent*           ProjectileMovement;                                // 0x0490(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               P_Teleporter_Explo;                                // 0x0494(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               P_Teleporter_ReloadRingRays_01;                    // 0x0498(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               P_Teleporter_ReloadRing_01;                        // 0x049C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        teleporter_recharge_audiocomponent;                // 0x04A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   DirectionalArrow;                                  // 0x04A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   Glow;                                              // 0x04A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   Sm_Teleporter_LightRay_01;                         // 0x04AC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               P_Teleporter_Teleported_01;                        // 0x04B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               P_Teleporter_Active_01;                            // 0x04B4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   Vortex;                                            // 0x04B8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   PortalCollisionCylinder;                           // 0x04BC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   BaseCollisionCylinder;                             // 0x04C0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USkeletalMeshComponent*                 SK_Teleporter;                                     // 0x04C4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        Generic_Object_Place_AudioComponent;               // 0x04C8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        Teleport_AudioComponent;                           // 0x04CC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        Teleporter_Active_AudioComponent;                  // 0x04D0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USceneComponent*                        Root;                                              // 0x04D4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         PostProcessTL_Weight_313874CC47D4DBB662B568BCDD322E9F; // 0x04D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            PostProcessTL__Direction_313874CC47D4DBB662B568BCDD322E9F; // 0x04DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DD[0x3];                                      // 0x04DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PostProcessTL;                                     // 0x04E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         ScaleLoadingRings_Scale_345064B24064419D4DE5E8B77DB3B3D1; // 0x04E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            ScaleLoadingRings__Direction_345064B24064419D4DE5E8B77DB3B3D1; // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x3];                                      // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ScaleLoadingRings;                                 // 0x04EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         RotateArrowTimeline_LERP_99FA82E342C18773DC608F9F875A3EF9; // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            RotateArrowTimeline__Direction_99FA82E342C18773DC608F9F875A3EF9; // 0x04F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F5[0x3];                                      // 0x04F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RotateArrowTimeline;                               // 0x04F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         LightrayFade_Fade_67FB9E7D4463CA9FF6EF76A3ABCB0711; // 0x04FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            LightrayFade__Direction_67FB9E7D4463CA9FF6EF76A3ABCB0711; // 0x0500(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_501[0x3];                                      // 0x0501(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LightrayFade;                                      // 0x0504(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                GlowMaterialTransitionOut_GlowScaleUp_D9E5F98943366B98E4291E87A0E1761D; // 0x0508(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         GlowMaterialTransitionOut_Transition_D9E5F98943366B98E4291E87A0E1761D; // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            GlowMaterialTransitionOut__Direction_D9E5F98943366B98E4291E87A0E1761D; // 0x0518(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_519[0x3];                                      // 0x0519(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     GlowMaterialTransitionOut;                         // 0x051C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                GlowMaterialTransitionIn_GlowScaleUp_548E265F40FFA1630EB18389B54EB18C; // 0x0520(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         GlowMaterialTransitionIn_Transition_548E265F40FFA1630EB18389B54EB18C; // 0x052C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            GlowMaterialTransitionIn__Direction_548E265F40FFA1630EB18389B54EB18C; // 0x0530(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_531[0x3];                                      // 0x0531(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     GlowMaterialTransitionIn;                          // 0x0534(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         RingSpeedUp_LERP2_53EA52B84A17D3E71A5C89BF02051BB3; // 0x0538(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         RingSpeedUp_LERP_53EA52B84A17D3E71A5C89BF02051BB3; // 0x053C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            RingSpeedUp__Direction_53EA52B84A17D3E71A5C89BF02051BB3; // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_541[0x3];                                      // 0x0541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RingSpeedUp;                                       // 0x0544(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AB_Teleporter_C*                        TargetTeleporter;                                  // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTeleporting;                                      // 0x054C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54D[0x3];                                      // 0x054D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InteractText;                                      // 0x0550(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFortDecoItemDefinition*                PickupDecoDefinition;                              // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTeleporterActive;                                 // 0x0560(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bRecharging;                                       // 0x0561(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_562[0x2];                                      // 0x0562(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RechargeTime;                                      // 0x0564(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         TeleportCount;                                     // 0x0568(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	TArray<class AActor*>                         ActorsToTeleport;                                  // 0x056C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         MaxTeleportRange;                                  // 0x0578(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FText                                   TooFarAwayMessage;                                 // 0x057C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                TargetTeleporterLocation;                          // 0x0588(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Teleporter_MID__0;                                 // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RingChargeStartSpeed;                              // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RingChargeEndSpeed;                                // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Teleporter_MID__1;                                 // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Glow_MID;                                          // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Vortex_MID;                                        // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                GlowSizeScale;                                     // 0x05AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBeingCarried;                                     // 0x05B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bShowGlow;                                         // 0x05B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5BA[0x2];                                      // 0x05BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Teleporter_Size_Placed;                            // 0x05BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Teleporter_Size_Held;                              // 0x05C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DirectionalRayActivate_Delay;                      // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Lightray_MID;                                      // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Lightray_Light_Intensity;                          // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Lightray_Size_Length;                              // 0x05E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Glow_Color_Inner__Friendly_;                       // 0x05EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Glow_Color_Inner__Enemy_;                          // 0x05FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Glow_Color_Outer__Friendly_;                       // 0x060C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Glow_Color_Outer__Enemy_;                          // 0x061C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Vortex_Color_Inner__Friendly_;                     // 0x062C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Vortex_Color_Inner__Enemy_;                        // 0x063C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Vortex_Color_Outer__Friendly_;                     // 0x064C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Vortex_Color_Outer__Enemy_;                        // 0x065C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Vortex_Reflection__Friendly_;                      // 0x066C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Vortex_Reflection__Enemy_;                         // 0x067C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Ray_Color_Dark__Friendly_;                         // 0x068C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Ray_Color_Dark__Enemy_;                            // 0x069C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Ray_Color_Bright__Friendly_;                       // 0x06AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Ray_Color_Bright__Enemy_;                          // 0x06BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Teleporter_Light_Color__Friendly_;                 // 0x06CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Teleporter_Light_Color__Enemy_;                    // 0x06DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Teleporter_Mesh_Emissive__Friendly_;               // 0x06EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Teleporter_Mesh_Emissive__Enemy_;                  // 0x06FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Streak_Color__Friendly_;                           // 0x070C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Streak_Color__Enemy_;                              // 0x071C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Arrow_Rotation_New;                                // 0x072C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Arrow_Rotation_Previous;                           // 0x0738(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RechargeDecay;                                     // 0x0744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           TeleporterArrowColor;                              // 0x0748(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	class UMaterialInstanceDynamic*               Directional_Arrow_MID;                             // 0x0758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Ring_Radius_Start;                                 // 0x075C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Ring_Radius_End;                                   // 0x0760(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               LoadingRingMID;                                    // 0x0764(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Steps;                                             // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_B_Teleporter(int32 EntryPoint);
	void ClientActorsTeleported(class AActor* TeleportedActor);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnWorldReady();
	void OnRechargingChanged();
	void UpdateArrowDirection();
	void DirectionalRayDeactivate();
	void DirectionalRayActivate();
	void OnActiveChanged();
	void ReceiveDestroyed();
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnComponentBeginOverlap_Event_0(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn);
	void PostProcessTL__UpdateFunc();
	void PostProcessTL__FinishedFunc();
	void ScaleLoadingRings__UpdateFunc();
	void ScaleLoadingRings__FinishedFunc();
	void RotateArrowTimeline__UpdateFunc();
	void RotateArrowTimeline__FinishedFunc();
	void LightrayFade__UpdateFunc();
	void LightrayFade__FinishedFunc();
	void GlowMaterialTransitionOut__UpdateFunc();
	void GlowMaterialTransitionOut__FinishedFunc();
	void GlowMaterialTransitionIn__UpdateFunc();
	void GlowMaterialTransitionIn__FinishedFunc();
	void RingSpeedUp__UpdateFunc();
	void RingSpeedUp__FinishedFunc();
	void UserConstructionScript();
	void SetTargetTeleporter(class AB_Teleporter_C* NewTarget);
	void TeleportToTarget(class AActor* ActorToTeleport);
	void IsValidActorToTeleport(class AActor* ActorToTeleport, bool* ValidActor);
	void UpdateTeleportersActive();
	void IsExclusivelyActive(bool* IsActive);
	void OnRep_bTeleporterActive();
	void RechargeComplete();
	void TriggerRecharge();
	void OnRep_TeleportCount();
	void UpdateTargetTeleporterLocation();
	void OnRep_bBeingCarried();
	void UpdateGlowVisuals();
	void SetShowGlow(bool Show);
	void InitializeTeleporter(float NewMaxRange, float NewRechargeDecay, const struct FLinearColor& TeleporterArrowColor_0);
	void OnRep_bRecharging();
	void OnRep_TeleporterArrowColor();
	void TriggerRechargeInternal();
	void InternalSetActive(bool bActive);

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn) const;
	bool IsAcceptablePositionForPlacement(const struct FVector& InLocation, const struct FRotator& InRotation, class AFortDecoTool* DecoTool, bool bIsCDO, class FText* OutFailureReason) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_Teleporter_C">();
	}
	static class AB_Teleporter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_Teleporter_C>();
	}
};
static_assert(alignof(AB_Teleporter_C) == 0x000004, "Wrong alignment on AB_Teleporter_C");
static_assert(sizeof(AB_Teleporter_C) == 0x00076C, "Wrong size on AB_Teleporter_C");
static_assert(offsetof(AB_Teleporter_C, UberGraphFrame) == 0x000488, "Member 'AB_Teleporter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, TeleportPostProcess) == 0x00048C, "Member 'AB_Teleporter_C::TeleportPostProcess' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, ProjectileMovement) == 0x000490, "Member 'AB_Teleporter_C::ProjectileMovement' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, P_Teleporter_Explo) == 0x000494, "Member 'AB_Teleporter_C::P_Teleporter_Explo' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, P_Teleporter_ReloadRingRays_01) == 0x000498, "Member 'AB_Teleporter_C::P_Teleporter_ReloadRingRays_01' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, P_Teleporter_ReloadRing_01) == 0x00049C, "Member 'AB_Teleporter_C::P_Teleporter_ReloadRing_01' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, teleporter_recharge_audiocomponent) == 0x0004A0, "Member 'AB_Teleporter_C::teleporter_recharge_audiocomponent' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, DirectionalArrow) == 0x0004A4, "Member 'AB_Teleporter_C::DirectionalArrow' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Glow) == 0x0004A8, "Member 'AB_Teleporter_C::Glow' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Sm_Teleporter_LightRay_01) == 0x0004AC, "Member 'AB_Teleporter_C::Sm_Teleporter_LightRay_01' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, P_Teleporter_Teleported_01) == 0x0004B0, "Member 'AB_Teleporter_C::P_Teleporter_Teleported_01' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, P_Teleporter_Active_01) == 0x0004B4, "Member 'AB_Teleporter_C::P_Teleporter_Active_01' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Vortex) == 0x0004B8, "Member 'AB_Teleporter_C::Vortex' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, PortalCollisionCylinder) == 0x0004BC, "Member 'AB_Teleporter_C::PortalCollisionCylinder' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, BaseCollisionCylinder) == 0x0004C0, "Member 'AB_Teleporter_C::BaseCollisionCylinder' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, SK_Teleporter) == 0x0004C4, "Member 'AB_Teleporter_C::SK_Teleporter' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Generic_Object_Place_AudioComponent) == 0x0004C8, "Member 'AB_Teleporter_C::Generic_Object_Place_AudioComponent' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Teleport_AudioComponent) == 0x0004CC, "Member 'AB_Teleporter_C::Teleport_AudioComponent' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Teleporter_Active_AudioComponent) == 0x0004D0, "Member 'AB_Teleporter_C::Teleporter_Active_AudioComponent' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Root) == 0x0004D4, "Member 'AB_Teleporter_C::Root' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, PostProcessTL_Weight_313874CC47D4DBB662B568BCDD322E9F) == 0x0004D8, "Member 'AB_Teleporter_C::PostProcessTL_Weight_313874CC47D4DBB662B568BCDD322E9F' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, PostProcessTL__Direction_313874CC47D4DBB662B568BCDD322E9F) == 0x0004DC, "Member 'AB_Teleporter_C::PostProcessTL__Direction_313874CC47D4DBB662B568BCDD322E9F' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, PostProcessTL) == 0x0004E0, "Member 'AB_Teleporter_C::PostProcessTL' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, ScaleLoadingRings_Scale_345064B24064419D4DE5E8B77DB3B3D1) == 0x0004E4, "Member 'AB_Teleporter_C::ScaleLoadingRings_Scale_345064B24064419D4DE5E8B77DB3B3D1' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, ScaleLoadingRings__Direction_345064B24064419D4DE5E8B77DB3B3D1) == 0x0004E8, "Member 'AB_Teleporter_C::ScaleLoadingRings__Direction_345064B24064419D4DE5E8B77DB3B3D1' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, ScaleLoadingRings) == 0x0004EC, "Member 'AB_Teleporter_C::ScaleLoadingRings' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, RotateArrowTimeline_LERP_99FA82E342C18773DC608F9F875A3EF9) == 0x0004F0, "Member 'AB_Teleporter_C::RotateArrowTimeline_LERP_99FA82E342C18773DC608F9F875A3EF9' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, RotateArrowTimeline__Direction_99FA82E342C18773DC608F9F875A3EF9) == 0x0004F4, "Member 'AB_Teleporter_C::RotateArrowTimeline__Direction_99FA82E342C18773DC608F9F875A3EF9' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, RotateArrowTimeline) == 0x0004F8, "Member 'AB_Teleporter_C::RotateArrowTimeline' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, LightrayFade_Fade_67FB9E7D4463CA9FF6EF76A3ABCB0711) == 0x0004FC, "Member 'AB_Teleporter_C::LightrayFade_Fade_67FB9E7D4463CA9FF6EF76A3ABCB0711' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, LightrayFade__Direction_67FB9E7D4463CA9FF6EF76A3ABCB0711) == 0x000500, "Member 'AB_Teleporter_C::LightrayFade__Direction_67FB9E7D4463CA9FF6EF76A3ABCB0711' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, LightrayFade) == 0x000504, "Member 'AB_Teleporter_C::LightrayFade' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, GlowMaterialTransitionOut_GlowScaleUp_D9E5F98943366B98E4291E87A0E1761D) == 0x000508, "Member 'AB_Teleporter_C::GlowMaterialTransitionOut_GlowScaleUp_D9E5F98943366B98E4291E87A0E1761D' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, GlowMaterialTransitionOut_Transition_D9E5F98943366B98E4291E87A0E1761D) == 0x000514, "Member 'AB_Teleporter_C::GlowMaterialTransitionOut_Transition_D9E5F98943366B98E4291E87A0E1761D' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, GlowMaterialTransitionOut__Direction_D9E5F98943366B98E4291E87A0E1761D) == 0x000518, "Member 'AB_Teleporter_C::GlowMaterialTransitionOut__Direction_D9E5F98943366B98E4291E87A0E1761D' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, GlowMaterialTransitionOut) == 0x00051C, "Member 'AB_Teleporter_C::GlowMaterialTransitionOut' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, GlowMaterialTransitionIn_GlowScaleUp_548E265F40FFA1630EB18389B54EB18C) == 0x000520, "Member 'AB_Teleporter_C::GlowMaterialTransitionIn_GlowScaleUp_548E265F40FFA1630EB18389B54EB18C' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, GlowMaterialTransitionIn_Transition_548E265F40FFA1630EB18389B54EB18C) == 0x00052C, "Member 'AB_Teleporter_C::GlowMaterialTransitionIn_Transition_548E265F40FFA1630EB18389B54EB18C' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, GlowMaterialTransitionIn__Direction_548E265F40FFA1630EB18389B54EB18C) == 0x000530, "Member 'AB_Teleporter_C::GlowMaterialTransitionIn__Direction_548E265F40FFA1630EB18389B54EB18C' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, GlowMaterialTransitionIn) == 0x000534, "Member 'AB_Teleporter_C::GlowMaterialTransitionIn' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, RingSpeedUp_LERP2_53EA52B84A17D3E71A5C89BF02051BB3) == 0x000538, "Member 'AB_Teleporter_C::RingSpeedUp_LERP2_53EA52B84A17D3E71A5C89BF02051BB3' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, RingSpeedUp_LERP_53EA52B84A17D3E71A5C89BF02051BB3) == 0x00053C, "Member 'AB_Teleporter_C::RingSpeedUp_LERP_53EA52B84A17D3E71A5C89BF02051BB3' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, RingSpeedUp__Direction_53EA52B84A17D3E71A5C89BF02051BB3) == 0x000540, "Member 'AB_Teleporter_C::RingSpeedUp__Direction_53EA52B84A17D3E71A5C89BF02051BB3' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, RingSpeedUp) == 0x000544, "Member 'AB_Teleporter_C::RingSpeedUp' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, TargetTeleporter) == 0x000548, "Member 'AB_Teleporter_C::TargetTeleporter' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, bTeleporting) == 0x00054C, "Member 'AB_Teleporter_C::bTeleporting' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, InteractText) == 0x000550, "Member 'AB_Teleporter_C::InteractText' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, PickupDecoDefinition) == 0x00055C, "Member 'AB_Teleporter_C::PickupDecoDefinition' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, bTeleporterActive) == 0x000560, "Member 'AB_Teleporter_C::bTeleporterActive' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, bRecharging) == 0x000561, "Member 'AB_Teleporter_C::bRecharging' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, RechargeTime) == 0x000564, "Member 'AB_Teleporter_C::RechargeTime' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, TeleportCount) == 0x000568, "Member 'AB_Teleporter_C::TeleportCount' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, ActorsToTeleport) == 0x00056C, "Member 'AB_Teleporter_C::ActorsToTeleport' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, MaxTeleportRange) == 0x000578, "Member 'AB_Teleporter_C::MaxTeleportRange' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, TooFarAwayMessage) == 0x00057C, "Member 'AB_Teleporter_C::TooFarAwayMessage' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, TargetTeleporterLocation) == 0x000588, "Member 'AB_Teleporter_C::TargetTeleporterLocation' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Teleporter_MID__0) == 0x000594, "Member 'AB_Teleporter_C::Teleporter_MID__0' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, RingChargeStartSpeed) == 0x000598, "Member 'AB_Teleporter_C::RingChargeStartSpeed' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, RingChargeEndSpeed) == 0x00059C, "Member 'AB_Teleporter_C::RingChargeEndSpeed' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Teleporter_MID__1) == 0x0005A0, "Member 'AB_Teleporter_C::Teleporter_MID__1' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Glow_MID) == 0x0005A4, "Member 'AB_Teleporter_C::Glow_MID' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Vortex_MID) == 0x0005A8, "Member 'AB_Teleporter_C::Vortex_MID' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, GlowSizeScale) == 0x0005AC, "Member 'AB_Teleporter_C::GlowSizeScale' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, bBeingCarried) == 0x0005B8, "Member 'AB_Teleporter_C::bBeingCarried' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, bShowGlow) == 0x0005B9, "Member 'AB_Teleporter_C::bShowGlow' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Teleporter_Size_Placed) == 0x0005BC, "Member 'AB_Teleporter_C::Teleporter_Size_Placed' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Teleporter_Size_Held) == 0x0005C8, "Member 'AB_Teleporter_C::Teleporter_Size_Held' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, DirectionalRayActivate_Delay) == 0x0005D4, "Member 'AB_Teleporter_C::DirectionalRayActivate_Delay' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Lightray_MID) == 0x0005D8, "Member 'AB_Teleporter_C::Lightray_MID' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Lightray_Light_Intensity) == 0x0005DC, "Member 'AB_Teleporter_C::Lightray_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Lightray_Size_Length) == 0x0005E0, "Member 'AB_Teleporter_C::Lightray_Size_Length' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Glow_Color_Inner__Friendly_) == 0x0005EC, "Member 'AB_Teleporter_C::Glow_Color_Inner__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Glow_Color_Inner__Enemy_) == 0x0005FC, "Member 'AB_Teleporter_C::Glow_Color_Inner__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Glow_Color_Outer__Friendly_) == 0x00060C, "Member 'AB_Teleporter_C::Glow_Color_Outer__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Glow_Color_Outer__Enemy_) == 0x00061C, "Member 'AB_Teleporter_C::Glow_Color_Outer__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Vortex_Color_Inner__Friendly_) == 0x00062C, "Member 'AB_Teleporter_C::Vortex_Color_Inner__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Vortex_Color_Inner__Enemy_) == 0x00063C, "Member 'AB_Teleporter_C::Vortex_Color_Inner__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Vortex_Color_Outer__Friendly_) == 0x00064C, "Member 'AB_Teleporter_C::Vortex_Color_Outer__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Vortex_Color_Outer__Enemy_) == 0x00065C, "Member 'AB_Teleporter_C::Vortex_Color_Outer__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Vortex_Reflection__Friendly_) == 0x00066C, "Member 'AB_Teleporter_C::Vortex_Reflection__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Vortex_Reflection__Enemy_) == 0x00067C, "Member 'AB_Teleporter_C::Vortex_Reflection__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Ray_Color_Dark__Friendly_) == 0x00068C, "Member 'AB_Teleporter_C::Ray_Color_Dark__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Ray_Color_Dark__Enemy_) == 0x00069C, "Member 'AB_Teleporter_C::Ray_Color_Dark__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Ray_Color_Bright__Friendly_) == 0x0006AC, "Member 'AB_Teleporter_C::Ray_Color_Bright__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Ray_Color_Bright__Enemy_) == 0x0006BC, "Member 'AB_Teleporter_C::Ray_Color_Bright__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Teleporter_Light_Color__Friendly_) == 0x0006CC, "Member 'AB_Teleporter_C::Teleporter_Light_Color__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Teleporter_Light_Color__Enemy_) == 0x0006DC, "Member 'AB_Teleporter_C::Teleporter_Light_Color__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Teleporter_Mesh_Emissive__Friendly_) == 0x0006EC, "Member 'AB_Teleporter_C::Teleporter_Mesh_Emissive__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Teleporter_Mesh_Emissive__Enemy_) == 0x0006FC, "Member 'AB_Teleporter_C::Teleporter_Mesh_Emissive__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Streak_Color__Friendly_) == 0x00070C, "Member 'AB_Teleporter_C::Streak_Color__Friendly_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Streak_Color__Enemy_) == 0x00071C, "Member 'AB_Teleporter_C::Streak_Color__Enemy_' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Arrow_Rotation_New) == 0x00072C, "Member 'AB_Teleporter_C::Arrow_Rotation_New' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Arrow_Rotation_Previous) == 0x000738, "Member 'AB_Teleporter_C::Arrow_Rotation_Previous' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, RechargeDecay) == 0x000744, "Member 'AB_Teleporter_C::RechargeDecay' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, TeleporterArrowColor) == 0x000748, "Member 'AB_Teleporter_C::TeleporterArrowColor' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Directional_Arrow_MID) == 0x000758, "Member 'AB_Teleporter_C::Directional_Arrow_MID' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Ring_Radius_Start) == 0x00075C, "Member 'AB_Teleporter_C::Ring_Radius_Start' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Ring_Radius_End) == 0x000760, "Member 'AB_Teleporter_C::Ring_Radius_End' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, LoadingRingMID) == 0x000764, "Member 'AB_Teleporter_C::LoadingRingMID' has a wrong offset!");
static_assert(offsetof(AB_Teleporter_C, Steps) == 0x000768, "Member 'AB_Teleporter_C::Steps' has a wrong offset!");

}

#pragma pack(pop)
