#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BannerGATooltip

#include "Basic.hpp"

#include "BannerGATooltip_classes.hpp"
#include "BannerGATooltip_parameters.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Function BannerGATooltip.BannerGATooltip_C.GetTextForTokenInternal
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const class UObject*                    ObjectToDescribe                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FGameplayTag&              Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm)
// const class UFortTooltipContext*        Context                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FName&                      Token                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// class FText*                            OutText                                                (Parm, OutParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBannerGATooltip_C::GetTextForTokenInternal(const class UObject* ObjectToDescribe, const struct FGameplayTag& Tag, const class UFortTooltipContext* Context, const class FName& Token, class FText* OutText) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BannerGATooltip_C", "GetTextForTokenInternal");

	Params::BannerGATooltip_C_GetTextForTokenInternal Parms{};

	Parms.ObjectToDescribe = ObjectToDescribe;
	Parms.Tag = std::move(Tag);
	Parms.Context = Context;
	Parms.Token = Token;

	UObject::ProcessEvent(Func, &Parms);

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);

	return Parms.ReturnValue;
}


// Function BannerGATooltip.BannerGATooltip_C.GetTextForTokenFromAbilitySpecInternal
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const struct FGameplayAbilitySpec&      Spec                                                   (ConstParm, Parm, OutParm, ReferenceParm)
// const struct FGameplayTag&              Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm)
// const class UFortTooltipContext*        Context                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FName&                      Token                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
// class FText*                            OutText                                                (Parm, OutParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBannerGATooltip_C::GetTextForTokenFromAbilitySpecInternal(const struct FGameplayAbilitySpec& Spec, const struct FGameplayTag& Tag, const class UFortTooltipContext* Context, const class FName& Token, class FText* OutText) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BannerGATooltip_C", "GetTextForTokenFromAbilitySpecInternal");

	Params::BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal Parms{};

	Parms.Spec = std::move(Spec);
	Parms.Tag = std::move(Tag);
	Parms.Context = Context;
	Parms.Token = Token;

	UObject::ProcessEvent(Func, &Parms);

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);

	return Parms.ReturnValue;
}

}

#pragma pack(pop)
