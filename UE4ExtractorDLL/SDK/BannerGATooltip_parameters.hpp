#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BannerGATooltip

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function BannerGATooltip.BannerGATooltip_C.GetTextForTokenInternal
// 0x0028 (0x0028 - 0x0000)
struct BannerGATooltip_C_GetTextForTokenInternal final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	class FText                                   OutText;                                           // 0x0018(0x000C)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BannerGATooltip_C_GetTextForTokenInternal) == 0x000004, "Wrong alignment on BannerGATooltip_C_GetTextForTokenInternal");
static_assert(sizeof(BannerGATooltip_C_GetTextForTokenInternal) == 0x000028, "Wrong size on BannerGATooltip_C_GetTextForTokenInternal");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenInternal, ObjectToDescribe) == 0x000000, "Member 'BannerGATooltip_C_GetTextForTokenInternal::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenInternal, Tag) == 0x000004, "Member 'BannerGATooltip_C_GetTextForTokenInternal::Tag' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenInternal, Context) == 0x00000C, "Member 'BannerGATooltip_C_GetTextForTokenInternal::Context' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenInternal, Token) == 0x000010, "Member 'BannerGATooltip_C_GetTextForTokenInternal::Token' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenInternal, OutText) == 0x000018, "Member 'BannerGATooltip_C_GetTextForTokenInternal::OutText' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenInternal, ReturnValue) == 0x000024, "Member 'BannerGATooltip_C_GetTextForTokenInternal::ReturnValue' has a wrong offset!");

// Function BannerGATooltip.BannerGATooltip_C.GetTextForTokenFromAbilitySpecInternal
// 0x0160 (0x0160 - 0x0000)
struct BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal final
{
public:
	struct FGameplayAbilitySpec                   Spec;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FGameplayTag                           Tag;                                               // 0x0050(0x0008)(ConstParm, Parm, OutParm, ReferenceParm)
	const class UFortTooltipContext*              Context;                                           // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   Token;                                             // 0x005C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	class FText                                   OutText;                                           // 0x0064(0x000C)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayAbility*                       CallFunc_GetPrimaryInstance_ReturnValue;           // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UGA_Generic_Banner_C*                   K2Node_DynamicCast_AsGA_Generic_Banner;            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAbilityTargetSelectionList        CallFunc_GetTargetSelectionList_ReturnValue;       // 0x0084(0x001C)()
	struct FFortAbilityTargetSelection            CallFunc_Array_Get_Item;                           // 0x00A0(0x004C)()
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x00EC(0x000C)()
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue2;            // 0x00F8(0x000C)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0108(0x000C)()
	class FText                                   Temp_text_Variable;                                // 0x0114(0x000C)()
	bool                                          Temp_bool_Variable2;                               // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable2;                               // 0x0124(0x000C)()
	class FText                                   K2Node_Select_Default;                             // 0x0130(0x000C)()
	class FText                                   K2Node_Select2_Default;                            // 0x013C(0x000C)()
	class FText                                   UpgradeText;                                       // 0x0148(0x000C)(Edit)
	class FText                                   KnockbackText;                                     // 0x0154(0x000C)(Edit)
};
static_assert(alignof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal) == 0x000004, "Wrong alignment on BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal");
static_assert(sizeof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal) == 0x000160, "Wrong size on BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, Spec) == 0x000000, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::Spec' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, Tag) == 0x000050, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::Tag' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, Context) == 0x000058, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::Context' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, Token) == 0x00005C, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::Token' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, OutText) == 0x000064, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::OutText' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, ReturnValue) == 0x000070, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::ReturnValue' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, K2Node_SwitchName_CmpSuccess) == 0x000071, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, CallFunc_GetPrimaryInstance_ReturnValue) == 0x000074, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::CallFunc_GetPrimaryInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, Temp_bool_Variable) == 0x000078, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, CallFunc_IsValid_ReturnValue) == 0x000079, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, K2Node_DynamicCast_AsGA_Generic_Banner) == 0x00007C, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::K2Node_DynamicCast_AsGA_Generic_Banner' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, CallFunc_GetTargetSelectionList_ReturnValue) == 0x000084, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::CallFunc_GetTargetSelectionList_ReturnValue' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, CallFunc_Conv_FloatToText_ReturnValue) == 0x0000EC, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, CallFunc_Conv_FloatToText_ReturnValue2) == 0x0000F8, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::CallFunc_Conv_FloatToText_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, CallFunc_Greater_IntInt_ReturnValue) == 0x000104, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, CallFunc_Conv_IntToText_ReturnValue) == 0x000108, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, Temp_text_Variable) == 0x000114, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, Temp_bool_Variable2) == 0x000120, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, Temp_text_Variable2) == 0x000124, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::Temp_text_Variable2' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, K2Node_Select_Default) == 0x000130, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, K2Node_Select2_Default) == 0x00013C, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, UpgradeText) == 0x000148, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::UpgradeText' has a wrong offset!");
static_assert(offsetof(BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal, KnockbackText) == 0x000154, "Member 'BannerGATooltip_C_GetTextForTokenFromAbilitySpecInternal::KnockbackText' has a wrong offset!");

}

#pragma pack(pop)
