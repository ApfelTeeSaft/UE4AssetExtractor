#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlasterPawn

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "HuskPawn_classes.hpp"
#include "GameplayAbilities_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass BlasterPawn.BlasterPawn_C
// 0x0020 (0x10A0 - 0x1080)
class ABlasterPawn_C final : public AHuskPawn_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BlasterPawn_C;                      // 0x107C(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               Beam;                                              // 0x1080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        BlastSound;                                        // 0x1084(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               HeadEffect;                                        // 0x1088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        HeadEffectTemplate;                                // 0x108C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HeadEffectStatus;                                  // 0x1090(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void ExecuteUbergraph_BlasterPawn(int32 EntryPoint);
	void GameplayCue_Impact_Physical_Energy(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void UserConstructionScript();
	void OnRep_HeadEffectStatus();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BlasterPawn_C">();
	}
	static class ABlasterPawn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlasterPawn_C>();
	}
};
static_assert(alignof(ABlasterPawn_C) == 0x000010, "Wrong alignment on ABlasterPawn_C");
static_assert(sizeof(ABlasterPawn_C) == 0x0010A0, "Wrong size on ABlasterPawn_C");
static_assert(offsetof(ABlasterPawn_C, UberGraphFrame_BlasterPawn_C) == 0x00107C, "Member 'ABlasterPawn_C::UberGraphFrame_BlasterPawn_C' has a wrong offset!");
static_assert(offsetof(ABlasterPawn_C, Beam) == 0x001080, "Member 'ABlasterPawn_C::Beam' has a wrong offset!");
static_assert(offsetof(ABlasterPawn_C, BlastSound) == 0x001084, "Member 'ABlasterPawn_C::BlastSound' has a wrong offset!");
static_assert(offsetof(ABlasterPawn_C, HeadEffect) == 0x001088, "Member 'ABlasterPawn_C::HeadEffect' has a wrong offset!");
static_assert(offsetof(ABlasterPawn_C, HeadEffectTemplate) == 0x00108C, "Member 'ABlasterPawn_C::HeadEffectTemplate' has a wrong offset!");
static_assert(offsetof(ABlasterPawn_C, HeadEffectStatus) == 0x001090, "Member 'ABlasterPawn_C::HeadEffectStatus' has a wrong offset!");

}

#pragma pack(pop)
