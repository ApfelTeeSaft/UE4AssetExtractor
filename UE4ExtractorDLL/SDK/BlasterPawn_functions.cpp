#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlasterPawn

#include "Basic.hpp"

#include "BlasterPawn_classes.hpp"
#include "BlasterPawn_parameters.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Function BlasterPawn.BlasterPawn_C.ExecuteUbergraph_BlasterPawn
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABlasterPawn_C::ExecuteUbergraph_BlasterPawn(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlasterPawn_C", "ExecuteUbergraph_BlasterPawn");

	Params::BlasterPawn_C_ExecuteUbergraph_BlasterPawn Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BlasterPawn.BlasterPawn_C.GameplayCue.Impact.Physical.Energy
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameplayCueEvent                       EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FGameplayCueParameters&    Parameters                                             (Parm)

void ABlasterPawn_C::GameplayCue_Impact_Physical_Energy(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlasterPawn_C", "GameplayCue.Impact.Physical.Energy");

	Params::BlasterPawn_C_GameplayCue_Impact_Physical_Energy Parms{};

	Parms.EventType = EventType;
	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BlasterPawn.BlasterPawn_C.OnDeathServer
// (BlueprintAuthorityOnly, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FGameplayTagContainer&     DamageTags                                             (ConstParm, Parm, OutParm, ReferenceParm)
// const struct FVector&                   Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                HitInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FGameplayEffectContextHandle&EffectContext                                          (Parm)

void ABlasterPawn_C::OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlasterPawn_C", "OnDeathServer");

	Params::BlasterPawn_C_OnDeathServer Parms{};

	Parms.Damage = Damage;
	Parms.DamageTags = std::move(DamageTags);
	Parms.Momentum = std::move(Momentum);
	Parms.HitInfo = std::move(HitInfo);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.EffectContext = std::move(EffectContext);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BlasterPawn.BlasterPawn_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABlasterPawn_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlasterPawn_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BlasterPawn.BlasterPawn_C.OnRep_HeadEffectStatus
// (BlueprintCallable, BlueprintEvent)

void ABlasterPawn_C::OnRep_HeadEffectStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlasterPawn_C", "OnRep_HeadEffectStatus");

	UObject::ProcessEvent(Func, nullptr);
}

}

#pragma pack(pop)
