#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DayPhaseLightingAndFog

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass DayPhaseLightingAndFog.DayPhaseLightingAndFog_C
// 0x007C (0x09AC - 0x0930)
class ADayPhaseLightingAndFog_C final : public AFortDayNightLightingAndFog
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0930(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   BackgroundBox;                                     // 0x0934(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UBillboardComponent*                    Component_container;                               // 0x0938(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         New_Storm_Timeline_Wind_Strength_4A2EEAF540854C2F80980F8E37C7ADF3; // 0x093C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         New_Storm_Timeline_RainInt_4A2EEAF540854C2F80980F8E37C7ADF3; // 0x0940(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         New_Storm_Timeline_Lightning_Modulator_4A2EEAF540854C2F80980F8E37C7ADF3; // 0x0944(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         New_Storm_Timeline_Storm_Ramp_In_Value_4A2EEAF540854C2F80980F8E37C7ADF3; // 0x0948(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            New_Storm_Timeline__Direction_4A2EEAF540854C2F80980F8E37C7ADF3; // 0x094C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_94D[0x3];                                      // 0x094D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     New_Storm_Timeline;                                // 0x0950(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FlashLightning_lightning_alpha_0111C5F84B3EFF4A81A138BBC08CCD75; // 0x0954(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FlashLightning_Lightning_Intensity_0111C5F84B3EFF4A81A138BBC08CCD75; // 0x0958(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            FlashLightning__Direction_0111C5F84B3EFF4A81A138BBC08CCD75; // 0x095C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95D[0x3];                                      // 0x095D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FlashLightning;                                    // 0x0960(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         WindSpeed;                                         // 0x0964(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RandomWeatherWaitTime;                             // 0x0968(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         CurrentAmountOfRandomWeatherTimeLeft;              // 0x096C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         NewWeatherLerpAmount;                              // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         WindStrength;                                      // 0x0974(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         FutureWindStrength;                                // 0x0978(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         FutureWindSpeed;                                   // 0x097C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPickNewWindConditions;                            // 0x0980(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_981[0x3];                                      // 0x0981(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightningStrength;                                 // 0x0984(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         ThreatCloudStormAmount;                            // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseRainWithStorms;                                 // 0x098C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Play_a_Particle_Effect_Near_the_players_Feet;      // 0x098D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WindEffects_Should_be_Active;                      // 0x098E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_98F[0x1];                                      // 0x098F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               Storm_Foot_Particle_Outdoor;                       // 0x0990(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Storm_Foot_Particle_While_on_Terrain;              // 0x0994(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*               Storm_Foot_Particle_Indoor;                        // 0x0998(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Storm_Foot_Particle_While_NOT_on_Terrain;          // 0x099C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Storm_Wind_Strength;                               // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Generate_Foliage_Wind_Gusts;                       // 0x09A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A5[0x3];                                      // 0x09A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LightningStrikeTimerHandle;                        // 0x09A8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_DayPhaseLightingAndFog(int32 EntryPoint);
	void LightningStrike();
	void OnStormEnd();
	void OnStormStart();
	void StartStorm();
	void DisableLightAndFog(bool Enable);
	void FlashLightning__UpdateFunc();
	void FlashLightning__FinishedFunc();
	void New_Storm_Timeline__FireOffRain__EventFunc();
	void New_Storm_Timeline__UpdateFunc();
	void New_Storm_Timeline__FinishedFunc();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DayPhaseLightingAndFog_C">();
	}
	static class ADayPhaseLightingAndFog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADayPhaseLightingAndFog_C>();
	}
};
static_assert(alignof(ADayPhaseLightingAndFog_C) == 0x000004, "Wrong alignment on ADayPhaseLightingAndFog_C");
static_assert(sizeof(ADayPhaseLightingAndFog_C) == 0x0009AC, "Wrong size on ADayPhaseLightingAndFog_C");
static_assert(offsetof(ADayPhaseLightingAndFog_C, UberGraphFrame) == 0x000930, "Member 'ADayPhaseLightingAndFog_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, BackgroundBox) == 0x000934, "Member 'ADayPhaseLightingAndFog_C::BackgroundBox' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, Component_container) == 0x000938, "Member 'ADayPhaseLightingAndFog_C::Component_container' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, New_Storm_Timeline_Wind_Strength_4A2EEAF540854C2F80980F8E37C7ADF3) == 0x00093C, "Member 'ADayPhaseLightingAndFog_C::New_Storm_Timeline_Wind_Strength_4A2EEAF540854C2F80980F8E37C7ADF3' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, New_Storm_Timeline_RainInt_4A2EEAF540854C2F80980F8E37C7ADF3) == 0x000940, "Member 'ADayPhaseLightingAndFog_C::New_Storm_Timeline_RainInt_4A2EEAF540854C2F80980F8E37C7ADF3' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, New_Storm_Timeline_Lightning_Modulator_4A2EEAF540854C2F80980F8E37C7ADF3) == 0x000944, "Member 'ADayPhaseLightingAndFog_C::New_Storm_Timeline_Lightning_Modulator_4A2EEAF540854C2F80980F8E37C7ADF3' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, New_Storm_Timeline_Storm_Ramp_In_Value_4A2EEAF540854C2F80980F8E37C7ADF3) == 0x000948, "Member 'ADayPhaseLightingAndFog_C::New_Storm_Timeline_Storm_Ramp_In_Value_4A2EEAF540854C2F80980F8E37C7ADF3' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, New_Storm_Timeline__Direction_4A2EEAF540854C2F80980F8E37C7ADF3) == 0x00094C, "Member 'ADayPhaseLightingAndFog_C::New_Storm_Timeline__Direction_4A2EEAF540854C2F80980F8E37C7ADF3' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, New_Storm_Timeline) == 0x000950, "Member 'ADayPhaseLightingAndFog_C::New_Storm_Timeline' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, FlashLightning_lightning_alpha_0111C5F84B3EFF4A81A138BBC08CCD75) == 0x000954, "Member 'ADayPhaseLightingAndFog_C::FlashLightning_lightning_alpha_0111C5F84B3EFF4A81A138BBC08CCD75' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, FlashLightning_Lightning_Intensity_0111C5F84B3EFF4A81A138BBC08CCD75) == 0x000958, "Member 'ADayPhaseLightingAndFog_C::FlashLightning_Lightning_Intensity_0111C5F84B3EFF4A81A138BBC08CCD75' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, FlashLightning__Direction_0111C5F84B3EFF4A81A138BBC08CCD75) == 0x00095C, "Member 'ADayPhaseLightingAndFog_C::FlashLightning__Direction_0111C5F84B3EFF4A81A138BBC08CCD75' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, FlashLightning) == 0x000960, "Member 'ADayPhaseLightingAndFog_C::FlashLightning' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, WindSpeed) == 0x000964, "Member 'ADayPhaseLightingAndFog_C::WindSpeed' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, RandomWeatherWaitTime) == 0x000968, "Member 'ADayPhaseLightingAndFog_C::RandomWeatherWaitTime' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, CurrentAmountOfRandomWeatherTimeLeft) == 0x00096C, "Member 'ADayPhaseLightingAndFog_C::CurrentAmountOfRandomWeatherTimeLeft' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, NewWeatherLerpAmount) == 0x000970, "Member 'ADayPhaseLightingAndFog_C::NewWeatherLerpAmount' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, WindStrength) == 0x000974, "Member 'ADayPhaseLightingAndFog_C::WindStrength' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, FutureWindStrength) == 0x000978, "Member 'ADayPhaseLightingAndFog_C::FutureWindStrength' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, FutureWindSpeed) == 0x00097C, "Member 'ADayPhaseLightingAndFog_C::FutureWindSpeed' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, bPickNewWindConditions) == 0x000980, "Member 'ADayPhaseLightingAndFog_C::bPickNewWindConditions' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, LightningStrength) == 0x000984, "Member 'ADayPhaseLightingAndFog_C::LightningStrength' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, ThreatCloudStormAmount) == 0x000988, "Member 'ADayPhaseLightingAndFog_C::ThreatCloudStormAmount' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, UseRainWithStorms) == 0x00098C, "Member 'ADayPhaseLightingAndFog_C::UseRainWithStorms' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, Play_a_Particle_Effect_Near_the_players_Feet) == 0x00098D, "Member 'ADayPhaseLightingAndFog_C::Play_a_Particle_Effect_Near_the_players_Feet' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, WindEffects_Should_be_Active) == 0x00098E, "Member 'ADayPhaseLightingAndFog_C::WindEffects_Should_be_Active' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, Storm_Foot_Particle_Outdoor) == 0x000990, "Member 'ADayPhaseLightingAndFog_C::Storm_Foot_Particle_Outdoor' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, Storm_Foot_Particle_While_on_Terrain) == 0x000994, "Member 'ADayPhaseLightingAndFog_C::Storm_Foot_Particle_While_on_Terrain' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, Storm_Foot_Particle_Indoor) == 0x000998, "Member 'ADayPhaseLightingAndFog_C::Storm_Foot_Particle_Indoor' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, Storm_Foot_Particle_While_NOT_on_Terrain) == 0x00099C, "Member 'ADayPhaseLightingAndFog_C::Storm_Foot_Particle_While_NOT_on_Terrain' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, Storm_Wind_Strength) == 0x0009A0, "Member 'ADayPhaseLightingAndFog_C::Storm_Wind_Strength' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, Generate_Foliage_Wind_Gusts) == 0x0009A4, "Member 'ADayPhaseLightingAndFog_C::Generate_Foliage_Wind_Gusts' has a wrong offset!");
static_assert(offsetof(ADayPhaseLightingAndFog_C, LightningStrikeTimerHandle) == 0x0009A8, "Member 'ADayPhaseLightingAndFog_C::LightningStrikeTimerHandle' has a wrong offset!");

}

#pragma pack(pop)
