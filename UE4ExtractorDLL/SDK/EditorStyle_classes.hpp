#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EditorStyle

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "EditorStyle_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Class EditorStyle.EditorStyleSettings
// 0x0068 (0x0084 - 0x001C)
class UEditorStyleSettings final : public UObject
{
public:
	struct FLinearColor                           SelectionColor;                                    // 0x001C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           PressedSelectionColor;                             // 0x002C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           InactiveSelectionColor;                            // 0x003C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           KeyboardFocusColor;                                // 0x004C(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EColorVisionDeficiency                        ColorVisionDeficiencyPreviewType;                  // 0x005C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseSmallToolBarIcons : 1;                         // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bEnableWindowAnimations : 1;                       // 0x0060(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bShowFriendlyNames : 1;                            // 0x0060(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bExpandConfigurationMenus : 1;                     // 0x0060(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic))
	uint8                                         bShowProjectMenus : 1;                             // 0x0060(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Config, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bShowLaunchMenus : 1;                              // 0x0060(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Config, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ELogTimes                                     LogTimestampMode;                                  // 0x0064(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPromoteOutputLogWarningsDuringPIE;                // 0x0065(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOpenAssetEditorTabsInNewWindow;                   // 0x0066(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_67[0x1D];                                      // 0x0067(0x001D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EditorStyleSettings">();
	}
	static class UEditorStyleSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEditorStyleSettings>();
	}
};
static_assert(alignof(UEditorStyleSettings) == 0x000004, "Wrong alignment on UEditorStyleSettings");
static_assert(sizeof(UEditorStyleSettings) == 0x000084, "Wrong size on UEditorStyleSettings");
static_assert(offsetof(UEditorStyleSettings, SelectionColor) == 0x00001C, "Member 'UEditorStyleSettings::SelectionColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, PressedSelectionColor) == 0x00002C, "Member 'UEditorStyleSettings::PressedSelectionColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, InactiveSelectionColor) == 0x00003C, "Member 'UEditorStyleSettings::InactiveSelectionColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, KeyboardFocusColor) == 0x00004C, "Member 'UEditorStyleSettings::KeyboardFocusColor' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, ColorVisionDeficiencyPreviewType) == 0x00005C, "Member 'UEditorStyleSettings::ColorVisionDeficiencyPreviewType' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, LogTimestampMode) == 0x000064, "Member 'UEditorStyleSettings::LogTimestampMode' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, bPromoteOutputLogWarningsDuringPIE) == 0x000065, "Member 'UEditorStyleSettings::bPromoteOutputLogWarningsDuringPIE' has a wrong offset!");
static_assert(offsetof(UEditorStyleSettings, bOpenAssetEditorTabsInNewWindow) == 0x000066, "Member 'UEditorStyleSettings::bOpenAssetEditorTabsInNewWindow' has a wrong offset!");

}

#pragma pack(pop)
