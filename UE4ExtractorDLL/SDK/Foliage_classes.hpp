#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Foliage

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Foliage_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Class Foliage.FoliageInstancedStaticMeshComponent
// 0x0018 (0x0650 - 0x0638)
class UFoliageInstancedStaticMeshComponent final : public UHierarchicalInstancedStaticMeshComponent
{
public:
	UMulticastDelegateProperty_                   OnInstanceTakePointDamage;                         // 0x0638(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnInstanceTakeRadialDamage;                        // 0x0644(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoliageInstancedStaticMeshComponent">();
	}
	static class UFoliageInstancedStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoliageInstancedStaticMeshComponent>();
	}
};
static_assert(alignof(UFoliageInstancedStaticMeshComponent) == 0x000004, "Wrong alignment on UFoliageInstancedStaticMeshComponent");
static_assert(sizeof(UFoliageInstancedStaticMeshComponent) == 0x000650, "Wrong size on UFoliageInstancedStaticMeshComponent");
static_assert(offsetof(UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage) == 0x000638, "Member 'UFoliageInstancedStaticMeshComponent::OnInstanceTakePointDamage' has a wrong offset!");
static_assert(offsetof(UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage) == 0x000644, "Member 'UFoliageInstancedStaticMeshComponent::OnInstanceTakeRadialDamage' has a wrong offset!");

// Class Foliage.FoliageStatistics
// 0x0000 (0x001C - 0x001C)
class UFoliageStatistics final : public UBlueprintFunctionLibrary
{
public:
	static int32 FoliageOverlappingBoxCount(class UObject* WorldContextObject, const class UStaticMesh* StaticMesh, const struct FBox& Box);
	static int32 FoliageOverlappingSphereCount(class UObject* WorldContextObject, const class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoliageStatistics">();
	}
	static class UFoliageStatistics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoliageStatistics>();
	}
};
static_assert(alignof(UFoliageStatistics) == 0x000004, "Wrong alignment on UFoliageStatistics");
static_assert(sizeof(UFoliageStatistics) == 0x00001C, "Wrong size on UFoliageStatistics");

// Class Foliage.FoliageType
// 0x02A8 (0x02C4 - 0x001C)
class UFoliageType : public UObject
{
public:
	struct FGuid                                  UpdateGuid;                                        // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityAdjustmentFactor;                           // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFoliageScaling                               Scaling;                                           // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         ScaleX;                                            // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatInterval                         ScaleY;                                            // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatInterval                         ScaleZ;                                            // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFoliageVertexColorMask                       VertexColorMask;                                   // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VertexColorMaskThreshold;                          // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VertexColorMaskInvert : 1;                         // 0x005C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic))
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         ZOffset;                                           // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         AlignToNormal : 1;                                 // 0x0068(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlignMaxAngle;                                     // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RandomYaw : 1;                                     // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomPitchAngle;                                  // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         GroundSlopeAngle;                                  // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatInterval                         Height;                                            // 0x0080(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LandscapeLayers;                                   // 0x0088(0x000C)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FName                                   LandscapeLayer;                                    // 0x0094(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CollisionWithWorld : 1;                            // 0x009C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic))
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CollisionScale;                                    // 0x00A0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         MinimumLayerWeight;                                // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       MeshBounds;                                        // 0x00B0(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LowBoundOriginRadius;                              // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EComponentMobility                            Mobility;                                          // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInt32Interval                         CullDistance;                                      // 0x00DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bEnableStaticLighting : 1;                         // 0x00E4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Deprecated, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         CastShadow : 1;                                    // 0x00E4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bAffectDynamicIndirectLighting : 1;                // 0x00E4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bAffectDistanceFieldLighting : 1;                  // 0x00E4(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bCastDynamicShadow : 1;                            // 0x00E4(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bCastStaticShadow : 1;                             // 0x00E4(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bCastShadowAsTwoSided : 1;                         // 0x00E4(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic))
	uint8                                         bReceivesDecals : 1;                               // 0x00E4(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic))
	uint8                                         bOverrideLightMapRes : 1;                          // 0x00E5(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_E6[0x2];                                       // 0x00E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverriddenLightMapRes;                             // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseAsOccluder : 1;                                // 0x00EC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic))
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBodyInstance                          BodyInstance;                                      // 0x00F0(0x0128)(Edit, NativeAccessSpecifierPublic)
	EHasCustomNavigableGeometry                   CustomNavigableGeometry;                           // 0x0218(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        HiddenEditorViews;                                 // 0x021C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsSelected : 1;                                    // 0x0224(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_225[0x3];                                      // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionRadius;                                   // 0x0228(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadeRadius;                                       // 0x022C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSteps;                                          // 0x0230(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSeedDensity;                                // 0x0234(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageSpreadDistance;                             // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadVariance;                                    // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeedsPerStep;                                      // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DistributionSeed;                                  // 0x0244(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInitialSeedOffset;                              // 0x0248(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanGrowInShade;                                   // 0x024C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSpawnsInShade;                                    // 0x024D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E[0x2];                                      // 0x024E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxInitialAge;                                     // 0x0250(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAge;                                            // 0x0254(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlapPriority;                                   // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         ProceduralScale;                                   // 0x025C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     ScaleCurve;                                        // 0x0264(0x0058)(Edit, NativeAccessSpecifierPublic)
	int32                                         ChangeCount;                                       // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReapplyDensity : 1;                                // 0x02C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         ReapplyRadius : 1;                                 // 0x02C0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         ReapplyAlignToNormal : 1;                          // 0x02C0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         ReapplyRandomYaw : 1;                              // 0x02C0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         ReapplyScaling : 1;                                // 0x02C0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         ReapplyScaleX : 1;                                 // 0x02C0(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         ReapplyScaleY : 1;                                 // 0x02C0(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         ReapplyScaleZ : 1;                                 // 0x02C0(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         ReapplyRandomPitchAngle : 1;                       // 0x02C1(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         ReapplyGroundSlope : 1;                            // 0x02C1(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         ReapplyHeight : 1;                                 // 0x02C1(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         ReapplyLandscapeLayers : 1;                        // 0x02C1(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         ReapplyZOffset : 1;                                // 0x02C1(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         ReapplyCollisionWithWorld : 1;                     // 0x02C1(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         ReapplyVertexColorMask : 1;                        // 0x02C1(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_2C2[0x2];                                      // 0x02C2(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoliageType">();
	}
	static class UFoliageType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoliageType>();
	}
};
static_assert(alignof(UFoliageType) == 0x000004, "Wrong alignment on UFoliageType");
static_assert(sizeof(UFoliageType) == 0x0002C4, "Wrong size on UFoliageType");
static_assert(offsetof(UFoliageType, UpdateGuid) == 0x00001C, "Member 'UFoliageType::UpdateGuid' has a wrong offset!");
static_assert(offsetof(UFoliageType, Density) == 0x00002C, "Member 'UFoliageType::Density' has a wrong offset!");
static_assert(offsetof(UFoliageType, DensityAdjustmentFactor) == 0x000030, "Member 'UFoliageType::DensityAdjustmentFactor' has a wrong offset!");
static_assert(offsetof(UFoliageType, Radius) == 0x000034, "Member 'UFoliageType::Radius' has a wrong offset!");
static_assert(offsetof(UFoliageType, Scaling) == 0x000038, "Member 'UFoliageType::Scaling' has a wrong offset!");
static_assert(offsetof(UFoliageType, ScaleX) == 0x00003C, "Member 'UFoliageType::ScaleX' has a wrong offset!");
static_assert(offsetof(UFoliageType, ScaleY) == 0x000044, "Member 'UFoliageType::ScaleY' has a wrong offset!");
static_assert(offsetof(UFoliageType, ScaleZ) == 0x00004C, "Member 'UFoliageType::ScaleZ' has a wrong offset!");
static_assert(offsetof(UFoliageType, VertexColorMask) == 0x000054, "Member 'UFoliageType::VertexColorMask' has a wrong offset!");
static_assert(offsetof(UFoliageType, VertexColorMaskThreshold) == 0x000058, "Member 'UFoliageType::VertexColorMaskThreshold' has a wrong offset!");
static_assert(offsetof(UFoliageType, ZOffset) == 0x000060, "Member 'UFoliageType::ZOffset' has a wrong offset!");
static_assert(offsetof(UFoliageType, AlignMaxAngle) == 0x00006C, "Member 'UFoliageType::AlignMaxAngle' has a wrong offset!");
static_assert(offsetof(UFoliageType, RandomPitchAngle) == 0x000074, "Member 'UFoliageType::RandomPitchAngle' has a wrong offset!");
static_assert(offsetof(UFoliageType, GroundSlopeAngle) == 0x000078, "Member 'UFoliageType::GroundSlopeAngle' has a wrong offset!");
static_assert(offsetof(UFoliageType, Height) == 0x000080, "Member 'UFoliageType::Height' has a wrong offset!");
static_assert(offsetof(UFoliageType, LandscapeLayers) == 0x000088, "Member 'UFoliageType::LandscapeLayers' has a wrong offset!");
static_assert(offsetof(UFoliageType, LandscapeLayer) == 0x000094, "Member 'UFoliageType::LandscapeLayer' has a wrong offset!");
static_assert(offsetof(UFoliageType, CollisionScale) == 0x0000A0, "Member 'UFoliageType::CollisionScale' has a wrong offset!");
static_assert(offsetof(UFoliageType, MinimumLayerWeight) == 0x0000AC, "Member 'UFoliageType::MinimumLayerWeight' has a wrong offset!");
static_assert(offsetof(UFoliageType, MeshBounds) == 0x0000B0, "Member 'UFoliageType::MeshBounds' has a wrong offset!");
static_assert(offsetof(UFoliageType, LowBoundOriginRadius) == 0x0000CC, "Member 'UFoliageType::LowBoundOriginRadius' has a wrong offset!");
static_assert(offsetof(UFoliageType, Mobility) == 0x0000D8, "Member 'UFoliageType::Mobility' has a wrong offset!");
static_assert(offsetof(UFoliageType, CullDistance) == 0x0000DC, "Member 'UFoliageType::CullDistance' has a wrong offset!");
static_assert(offsetof(UFoliageType, OverriddenLightMapRes) == 0x0000E8, "Member 'UFoliageType::OverriddenLightMapRes' has a wrong offset!");
static_assert(offsetof(UFoliageType, BodyInstance) == 0x0000F0, "Member 'UFoliageType::BodyInstance' has a wrong offset!");
static_assert(offsetof(UFoliageType, CustomNavigableGeometry) == 0x000218, "Member 'UFoliageType::CustomNavigableGeometry' has a wrong offset!");
static_assert(offsetof(UFoliageType, HiddenEditorViews) == 0x00021C, "Member 'UFoliageType::HiddenEditorViews' has a wrong offset!");
static_assert(offsetof(UFoliageType, CollisionRadius) == 0x000228, "Member 'UFoliageType::CollisionRadius' has a wrong offset!");
static_assert(offsetof(UFoliageType, ShadeRadius) == 0x00022C, "Member 'UFoliageType::ShadeRadius' has a wrong offset!");
static_assert(offsetof(UFoliageType, NumSteps) == 0x000230, "Member 'UFoliageType::NumSteps' has a wrong offset!");
static_assert(offsetof(UFoliageType, InitialSeedDensity) == 0x000234, "Member 'UFoliageType::InitialSeedDensity' has a wrong offset!");
static_assert(offsetof(UFoliageType, AverageSpreadDistance) == 0x000238, "Member 'UFoliageType::AverageSpreadDistance' has a wrong offset!");
static_assert(offsetof(UFoliageType, SpreadVariance) == 0x00023C, "Member 'UFoliageType::SpreadVariance' has a wrong offset!");
static_assert(offsetof(UFoliageType, SeedsPerStep) == 0x000240, "Member 'UFoliageType::SeedsPerStep' has a wrong offset!");
static_assert(offsetof(UFoliageType, DistributionSeed) == 0x000244, "Member 'UFoliageType::DistributionSeed' has a wrong offset!");
static_assert(offsetof(UFoliageType, MaxInitialSeedOffset) == 0x000248, "Member 'UFoliageType::MaxInitialSeedOffset' has a wrong offset!");
static_assert(offsetof(UFoliageType, bCanGrowInShade) == 0x00024C, "Member 'UFoliageType::bCanGrowInShade' has a wrong offset!");
static_assert(offsetof(UFoliageType, bSpawnsInShade) == 0x00024D, "Member 'UFoliageType::bSpawnsInShade' has a wrong offset!");
static_assert(offsetof(UFoliageType, MaxInitialAge) == 0x000250, "Member 'UFoliageType::MaxInitialAge' has a wrong offset!");
static_assert(offsetof(UFoliageType, MaxAge) == 0x000254, "Member 'UFoliageType::MaxAge' has a wrong offset!");
static_assert(offsetof(UFoliageType, OverlapPriority) == 0x000258, "Member 'UFoliageType::OverlapPriority' has a wrong offset!");
static_assert(offsetof(UFoliageType, ProceduralScale) == 0x00025C, "Member 'UFoliageType::ProceduralScale' has a wrong offset!");
static_assert(offsetof(UFoliageType, ScaleCurve) == 0x000264, "Member 'UFoliageType::ScaleCurve' has a wrong offset!");
static_assert(offsetof(UFoliageType, ChangeCount) == 0x0002BC, "Member 'UFoliageType::ChangeCount' has a wrong offset!");

// Class Foliage.FoliageType_InstancedStaticMesh
// 0x0014 (0x02D8 - 0x02C4)
class UFoliageType_InstancedStaticMesh final : public UFoliageType
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             OverrideMaterials;                                 // 0x02C8(0x000C)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TSubclassOf<class UFoliageInstancedStaticMeshComponent> ComponentClass;                                    // 0x02D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoliageType_InstancedStaticMesh">();
	}
	static class UFoliageType_InstancedStaticMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoliageType_InstancedStaticMesh>();
	}
};
static_assert(alignof(UFoliageType_InstancedStaticMesh) == 0x000004, "Wrong alignment on UFoliageType_InstancedStaticMesh");
static_assert(sizeof(UFoliageType_InstancedStaticMesh) == 0x0002D8, "Wrong size on UFoliageType_InstancedStaticMesh");
static_assert(offsetof(UFoliageType_InstancedStaticMesh, Mesh) == 0x0002C4, "Member 'UFoliageType_InstancedStaticMesh::Mesh' has a wrong offset!");
static_assert(offsetof(UFoliageType_InstancedStaticMesh, OverrideMaterials) == 0x0002C8, "Member 'UFoliageType_InstancedStaticMesh::OverrideMaterials' has a wrong offset!");
static_assert(offsetof(UFoliageType_InstancedStaticMesh, ComponentClass) == 0x0002D4, "Member 'UFoliageType_InstancedStaticMesh::ComponentClass' has a wrong offset!");

// Class Foliage.InstancedFoliageActor
// 0x003C (0x027C - 0x0240)
class AInstancedFoliageActor final : public AActor
{
public:
	uint8                                         Pad_240[0x3C];                                     // 0x0240(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InstancedFoliageActor">();
	}
	static class AInstancedFoliageActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInstancedFoliageActor>();
	}
};
static_assert(alignof(AInstancedFoliageActor) == 0x000004, "Wrong alignment on AInstancedFoliageActor");
static_assert(sizeof(AInstancedFoliageActor) == 0x00027C, "Wrong size on AInstancedFoliageActor");

// Class Foliage.InteractiveFoliageActor
// 0x0058 (0x02A0 - 0x0248)
class AInteractiveFoliageActor final : public AStaticMeshActor
{
public:
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x0248(0x0004)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                TouchingActorEntryPosition;                        // 0x024C(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                FoliageVelocity;                                   // 0x0258(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                FoliageForce;                                      // 0x0264(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                                FoliagePosition;                                   // 0x0270(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         FoliageDamageImpulseScale;                         // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoliageTouchImpulseScale;                          // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoliageStiffness;                                  // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoliageStiffnessQuadratic;                         // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoliageDamping;                                    // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamageImpulse;                                  // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTouchImpulse;                                   // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForce;                                          // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void CapsuleTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InteractiveFoliageActor">();
	}
	static class AInteractiveFoliageActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInteractiveFoliageActor>();
	}
};
static_assert(alignof(AInteractiveFoliageActor) == 0x000004, "Wrong alignment on AInteractiveFoliageActor");
static_assert(sizeof(AInteractiveFoliageActor) == 0x0002A0, "Wrong size on AInteractiveFoliageActor");
static_assert(offsetof(AInteractiveFoliageActor, CapsuleComponent) == 0x000248, "Member 'AInteractiveFoliageActor::CapsuleComponent' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, TouchingActorEntryPosition) == 0x00024C, "Member 'AInteractiveFoliageActor::TouchingActorEntryPosition' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageVelocity) == 0x000258, "Member 'AInteractiveFoliageActor::FoliageVelocity' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageForce) == 0x000264, "Member 'AInteractiveFoliageActor::FoliageForce' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliagePosition) == 0x000270, "Member 'AInteractiveFoliageActor::FoliagePosition' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageDamageImpulseScale) == 0x00027C, "Member 'AInteractiveFoliageActor::FoliageDamageImpulseScale' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageTouchImpulseScale) == 0x000280, "Member 'AInteractiveFoliageActor::FoliageTouchImpulseScale' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageStiffness) == 0x000284, "Member 'AInteractiveFoliageActor::FoliageStiffness' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageStiffnessQuadratic) == 0x000288, "Member 'AInteractiveFoliageActor::FoliageStiffnessQuadratic' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, FoliageDamping) == 0x00028C, "Member 'AInteractiveFoliageActor::FoliageDamping' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, MaxDamageImpulse) == 0x000290, "Member 'AInteractiveFoliageActor::MaxDamageImpulse' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, MaxTouchImpulse) == 0x000294, "Member 'AInteractiveFoliageActor::MaxTouchImpulse' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, MaxForce) == 0x000298, "Member 'AInteractiveFoliageActor::MaxForce' has a wrong offset!");
static_assert(offsetof(AInteractiveFoliageActor, Mass) == 0x00029C, "Member 'AInteractiveFoliageActor::Mass' has a wrong offset!");

// Class Foliage.InteractiveFoliageComponent
// 0x000C (0x0520 - 0x0514)
class UInteractiveFoliageComponent final : public UStaticMeshComponent
{
public:
	uint8                                         Pad_514[0xC];                                      // 0x0514(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InteractiveFoliageComponent">();
	}
	static class UInteractiveFoliageComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInteractiveFoliageComponent>();
	}
};
static_assert(alignof(UInteractiveFoliageComponent) == 0x000004, "Wrong alignment on UInteractiveFoliageComponent");
static_assert(sizeof(UInteractiveFoliageComponent) == 0x000520, "Wrong size on UInteractiveFoliageComponent");

// Class Foliage.ProceduralFoliageBlockingVolume
// 0x0004 (0x026C - 0x0268)
class AProceduralFoliageBlockingVolume final : public AVolume
{
public:
	class AProceduralFoliageVolume*               ProceduralFoliageVolume;                           // 0x0268(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageBlockingVolume">();
	}
	static class AProceduralFoliageBlockingVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProceduralFoliageBlockingVolume>();
	}
};
static_assert(alignof(AProceduralFoliageBlockingVolume) == 0x000004, "Wrong alignment on AProceduralFoliageBlockingVolume");
static_assert(sizeof(AProceduralFoliageBlockingVolume) == 0x00026C, "Wrong size on AProceduralFoliageBlockingVolume");
static_assert(offsetof(AProceduralFoliageBlockingVolume, ProceduralFoliageVolume) == 0x000268, "Member 'AProceduralFoliageBlockingVolume::ProceduralFoliageVolume' has a wrong offset!");

// Class Foliage.ProceduralFoliageComponent
// 0x001C (0x00A8 - 0x008C)
class UProceduralFoliageComponent final : public UActorComponent
{
public:
	class UProceduralFoliageSpawner*              FoliageSpawner;                                    // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileOverlap;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVolume*                                SpawningVolume;                                    // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  ProceduralGuid;                                    // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageComponent">();
	}
	static class UProceduralFoliageComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProceduralFoliageComponent>();
	}
};
static_assert(alignof(UProceduralFoliageComponent) == 0x000004, "Wrong alignment on UProceduralFoliageComponent");
static_assert(sizeof(UProceduralFoliageComponent) == 0x0000A8, "Wrong size on UProceduralFoliageComponent");
static_assert(offsetof(UProceduralFoliageComponent, FoliageSpawner) == 0x00008C, "Member 'UProceduralFoliageComponent::FoliageSpawner' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageComponent, TileOverlap) == 0x000090, "Member 'UProceduralFoliageComponent::TileOverlap' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageComponent, SpawningVolume) == 0x000094, "Member 'UProceduralFoliageComponent::SpawningVolume' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageComponent, ProceduralGuid) == 0x000098, "Member 'UProceduralFoliageComponent::ProceduralGuid' has a wrong offset!");

// Class Foliage.ProceduralFoliageSpawner
// 0x0034 (0x0050 - 0x001C)
class UProceduralFoliageSpawner final : public UObject
{
public:
	int32                                         RandomSeed;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileSize;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumUniqueTiles;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x4];                                       // 0x0028(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFoliageTypeObject>             FoliageTypes;                                      // 0x002C(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bNeedsSimulation;                                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x17];                                      // 0x0039(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Simulate(int32 NumSteps);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageSpawner">();
	}
	static class UProceduralFoliageSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProceduralFoliageSpawner>();
	}
};
static_assert(alignof(UProceduralFoliageSpawner) == 0x000004, "Wrong alignment on UProceduralFoliageSpawner");
static_assert(sizeof(UProceduralFoliageSpawner) == 0x000050, "Wrong size on UProceduralFoliageSpawner");
static_assert(offsetof(UProceduralFoliageSpawner, RandomSeed) == 0x00001C, "Member 'UProceduralFoliageSpawner::RandomSeed' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, TileSize) == 0x000020, "Member 'UProceduralFoliageSpawner::TileSize' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, NumUniqueTiles) == 0x000024, "Member 'UProceduralFoliageSpawner::NumUniqueTiles' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, FoliageTypes) == 0x00002C, "Member 'UProceduralFoliageSpawner::FoliageTypes' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageSpawner, bNeedsSimulation) == 0x000038, "Member 'UProceduralFoliageSpawner::bNeedsSimulation' has a wrong offset!");

// Class Foliage.ProceduralFoliageTile
// 0x00DC (0x00F8 - 0x001C)
class UProceduralFoliageTile final : public UObject
{
public:
	class UProceduralFoliageSpawner*              FoliageSpawner;                                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_20[0x78];                                      // 0x0020(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProceduralFoliageInstance>     InstancesArray;                                    // 0x0098(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A4[0x54];                                      // 0x00A4(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageTile">();
	}
	static class UProceduralFoliageTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProceduralFoliageTile>();
	}
};
static_assert(alignof(UProceduralFoliageTile) == 0x000004, "Wrong alignment on UProceduralFoliageTile");
static_assert(sizeof(UProceduralFoliageTile) == 0x0000F8, "Wrong size on UProceduralFoliageTile");
static_assert(offsetof(UProceduralFoliageTile, FoliageSpawner) == 0x00001C, "Member 'UProceduralFoliageTile::FoliageSpawner' has a wrong offset!");
static_assert(offsetof(UProceduralFoliageTile, InstancesArray) == 0x000098, "Member 'UProceduralFoliageTile::InstancesArray' has a wrong offset!");

// Class Foliage.ProceduralFoliageVolume
// 0x0004 (0x026C - 0x0268)
class AProceduralFoliageVolume final : public AVolume
{
public:
	class UProceduralFoliageComponent*            ProceduralComponent;                               // 0x0268(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralFoliageVolume">();
	}
	static class AProceduralFoliageVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProceduralFoliageVolume>();
	}
};
static_assert(alignof(AProceduralFoliageVolume) == 0x000004, "Wrong alignment on AProceduralFoliageVolume");
static_assert(sizeof(AProceduralFoliageVolume) == 0x00026C, "Wrong size on AProceduralFoliageVolume");
static_assert(offsetof(AProceduralFoliageVolume, ProceduralComponent) == 0x000268, "Member 'AProceduralFoliageVolume::ProceduralComponent' has a wrong offset!");

}

#pragma pack(pop)
