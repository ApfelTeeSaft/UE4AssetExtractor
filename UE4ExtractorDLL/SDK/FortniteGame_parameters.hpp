#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteGame

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Party_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "McpProfileSys_structs.hpp"
#include "AIModule_structs.hpp"
#include "OnlineSubsystem_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function FortniteGame.AIHotSpot.AssignFromWaitingList
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpot_AssignFromWaitingList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_AssignFromWaitingList) == 0x000001, "Wrong alignment on AIHotSpot_AssignFromWaitingList");
static_assert(sizeof(AIHotSpot_AssignFromWaitingList) == 0x000001, "Wrong size on AIHotSpot_AssignFromWaitingList");
static_assert(offsetof(AIHotSpot_AssignFromWaitingList, ReturnValue) == 0x000000, "Member 'AIHotSpot_AssignFromWaitingList::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.AssignGroupToHotspot
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_AssignGroupToHotspot final
{
public:
	TArray<class AAIController*>                  GroupOfAI;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_AssignGroupToHotspot) == 0x000004, "Wrong alignment on AIHotSpot_AssignGroupToHotspot");
static_assert(sizeof(AIHotSpot_AssignGroupToHotspot) == 0x000010, "Wrong size on AIHotSpot_AssignGroupToHotspot");
static_assert(offsetof(AIHotSpot_AssignGroupToHotspot, GroupOfAI) == 0x000000, "Member 'AIHotSpot_AssignGroupToHotspot::GroupOfAI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_AssignGroupToHotspot, ReturnValue) == 0x00000C, "Member 'AIHotSpot_AssignGroupToHotspot::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.AssignToHotspot
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_AssignToHotspot final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_AssignToHotspot) == 0x000004, "Wrong alignment on AIHotSpot_AssignToHotspot");
static_assert(sizeof(AIHotSpot_AssignToHotspot) == 0x000008, "Wrong size on AIHotSpot_AssignToHotspot");
static_assert(offsetof(AIHotSpot_AssignToHotspot, AI) == 0x000000, "Member 'AIHotSpot_AssignToHotspot::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_AssignToHotspot, ReturnValue) == 0x000004, "Member 'AIHotSpot_AssignToHotspot::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.AssignToSlotByIndex
// 0x000C (0x000C - 0x0000)
struct AIHotSpot_AssignToSlotByIndex final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_AssignToSlotByIndex) == 0x000004, "Wrong alignment on AIHotSpot_AssignToSlotByIndex");
static_assert(sizeof(AIHotSpot_AssignToSlotByIndex) == 0x00000C, "Wrong size on AIHotSpot_AssignToSlotByIndex");
static_assert(offsetof(AIHotSpot_AssignToSlotByIndex, AI) == 0x000000, "Member 'AIHotSpot_AssignToSlotByIndex::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_AssignToSlotByIndex, INDEX) == 0x000004, "Member 'AIHotSpot_AssignToSlotByIndex::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_AssignToSlotByIndex, ReturnValue) == 0x000008, "Member 'AIHotSpot_AssignToSlotByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.AssignToSlotByUserId
// 0x000C (0x000C - 0x0000)
struct AIHotSpot_AssignToSlotByUserId final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_AssignToSlotByUserId) == 0x000004, "Wrong alignment on AIHotSpot_AssignToSlotByUserId");
static_assert(sizeof(AIHotSpot_AssignToSlotByUserId) == 0x00000C, "Wrong size on AIHotSpot_AssignToSlotByUserId");
static_assert(offsetof(AIHotSpot_AssignToSlotByUserId, AI) == 0x000000, "Member 'AIHotSpot_AssignToSlotByUserId::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_AssignToSlotByUserId, UserId) == 0x000004, "Member 'AIHotSpot_AssignToSlotByUserId::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_AssignToSlotByUserId, ReturnValue) == 0x000008, "Member 'AIHotSpot_AssignToSlotByUserId::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OccupySlotByIndex
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_OccupySlotByIndex final
{
public:
	int32                                         INDEX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OccupySlotByIndex) == 0x000004, "Wrong alignment on AIHotSpot_OccupySlotByIndex");
static_assert(sizeof(AIHotSpot_OccupySlotByIndex) == 0x000008, "Wrong size on AIHotSpot_OccupySlotByIndex");
static_assert(offsetof(AIHotSpot_OccupySlotByIndex, INDEX) == 0x000000, "Member 'AIHotSpot_OccupySlotByIndex::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OccupySlotByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_OccupySlotByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OccupySlotByOwner
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_OccupySlotByOwner final
{
public:
	const class AAIController*                    AIOwner;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OccupySlotByOwner) == 0x000004, "Wrong alignment on AIHotSpot_OccupySlotByOwner");
static_assert(sizeof(AIHotSpot_OccupySlotByOwner) == 0x000008, "Wrong size on AIHotSpot_OccupySlotByOwner");
static_assert(offsetof(AIHotSpot_OccupySlotByOwner, AIOwner) == 0x000000, "Member 'AIHotSpot_OccupySlotByOwner::AIOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OccupySlotByOwner, ReturnValue) == 0x000004, "Member 'AIHotSpot_OccupySlotByOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OccupySlotByUserId
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_OccupySlotByUserId final
{
public:
	int32                                         UserId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OccupySlotByUserId) == 0x000004, "Wrong alignment on AIHotSpot_OccupySlotByUserId");
static_assert(sizeof(AIHotSpot_OccupySlotByUserId) == 0x000008, "Wrong size on AIHotSpot_OccupySlotByUserId");
static_assert(offsetof(AIHotSpot_OccupySlotByUserId, UserId) == 0x000000, "Member 'AIHotSpot_OccupySlotByUserId::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OccupySlotByUserId, ReturnValue) == 0x000004, "Member 'AIHotSpot_OccupySlotByUserId::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnAssignedClaimedBehavior
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnAssignedClaimedBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasOnWaitingList;                                 // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnAssignedClaimedBehavior) == 0x000004, "Wrong alignment on AIHotSpot_OnAssignedClaimedBehavior");
static_assert(sizeof(AIHotSpot_OnAssignedClaimedBehavior) == 0x000010, "Wrong size on AIHotSpot_OnAssignedClaimedBehavior");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnAssignedClaimedBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, INDEX) == 0x000004, "Member 'AIHotSpot_OnAssignedClaimedBehavior::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, UserId) == 0x000008, "Member 'AIHotSpot_OnAssignedClaimedBehavior::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, bWasOnWaitingList) == 0x00000C, "Member 'AIHotSpot_OnAssignedClaimedBehavior::bWasOnWaitingList' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedClaimedBehavior, ReturnValue) == 0x00000D, "Member 'AIHotSpot_OnAssignedClaimedBehavior::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnAssignedOccupiedBehavior
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnAssignedOccupiedBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnAssignedOccupiedBehavior) == 0x000004, "Wrong alignment on AIHotSpot_OnAssignedOccupiedBehavior");
static_assert(sizeof(AIHotSpot_OnAssignedOccupiedBehavior) == 0x000010, "Wrong size on AIHotSpot_OnAssignedOccupiedBehavior");
static_assert(offsetof(AIHotSpot_OnAssignedOccupiedBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnAssignedOccupiedBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedOccupiedBehavior, INDEX) == 0x000004, "Member 'AIHotSpot_OnAssignedOccupiedBehavior::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedOccupiedBehavior, UserId) == 0x000008, "Member 'AIHotSpot_OnAssignedOccupiedBehavior::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedOccupiedBehavior, ReturnValue) == 0x00000C, "Member 'AIHotSpot_OnAssignedOccupiedBehavior::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnAssignedSlotlessBehavior
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_OnAssignedSlotlessBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnAssignedSlotlessBehavior) == 0x000004, "Wrong alignment on AIHotSpot_OnAssignedSlotlessBehavior");
static_assert(sizeof(AIHotSpot_OnAssignedSlotlessBehavior) == 0x000008, "Wrong size on AIHotSpot_OnAssignedSlotlessBehavior");
static_assert(offsetof(AIHotSpot_OnAssignedSlotlessBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnAssignedSlotlessBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnAssignedSlotlessBehavior, ReturnValue) == 0x000004, "Member 'AIHotSpot_OnAssignedSlotlessBehavior::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnMoveToSlotFinished
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnMoveToSlotFinished final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResult;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnMoveToSlotFinished) == 0x000004, "Wrong alignment on AIHotSpot_OnMoveToSlotFinished");
static_assert(sizeof(AIHotSpot_OnMoveToSlotFinished) == 0x000010, "Wrong size on AIHotSpot_OnMoveToSlotFinished");
static_assert(offsetof(AIHotSpot_OnMoveToSlotFinished, AI) == 0x000000, "Member 'AIHotSpot_OnMoveToSlotFinished::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnMoveToSlotFinished, INDEX) == 0x000004, "Member 'AIHotSpot_OnMoveToSlotFinished::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnMoveToSlotFinished, UserId) == 0x000008, "Member 'AIHotSpot_OnMoveToSlotFinished::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnMoveToSlotFinished, bResult) == 0x00000C, "Member 'AIHotSpot_OnMoveToSlotFinished::bResult' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnRemovedBehavior
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_OnRemovedBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                PrevState;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasOnWaitingList;                                 // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnRemovedBehavior) == 0x000004, "Wrong alignment on AIHotSpot_OnRemovedBehavior");
static_assert(sizeof(AIHotSpot_OnRemovedBehavior) == 0x000010, "Wrong size on AIHotSpot_OnRemovedBehavior");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnRemovedBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, INDEX) == 0x000004, "Member 'AIHotSpot_OnRemovedBehavior::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, UserId) == 0x000008, "Member 'AIHotSpot_OnRemovedBehavior::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, PrevState) == 0x00000C, "Member 'AIHotSpot_OnRemovedBehavior::PrevState' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedBehavior, bWasOnWaitingList) == 0x00000D, "Member 'AIHotSpot_OnRemovedBehavior::bWasOnWaitingList' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnRemovedSlotlessBehavior
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_OnRemovedSlotlessBehavior final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsClamingSlot;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_OnRemovedSlotlessBehavior) == 0x000004, "Wrong alignment on AIHotSpot_OnRemovedSlotlessBehavior");
static_assert(sizeof(AIHotSpot_OnRemovedSlotlessBehavior) == 0x000008, "Wrong size on AIHotSpot_OnRemovedSlotlessBehavior");
static_assert(offsetof(AIHotSpot_OnRemovedSlotlessBehavior, AI) == 0x000000, "Member 'AIHotSpot_OnRemovedSlotlessBehavior::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnRemovedSlotlessBehavior, bIsClamingSlot) == 0x000004, "Member 'AIHotSpot_OnRemovedSlotlessBehavior::bIsClamingSlot' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnSlotBlocked
// 0x000C (0x000C - 0x0000)
struct AIHotSpot_OnSlotBlocked final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotBlocked) == 0x000004, "Wrong alignment on AIHotSpot_OnSlotBlocked");
static_assert(sizeof(AIHotSpot_OnSlotBlocked) == 0x00000C, "Wrong size on AIHotSpot_OnSlotBlocked");
static_assert(offsetof(AIHotSpot_OnSlotBlocked, AI) == 0x000000, "Member 'AIHotSpot_OnSlotBlocked::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotBlocked, INDEX) == 0x000004, "Member 'AIHotSpot_OnSlotBlocked::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotBlocked, UserId) == 0x000008, "Member 'AIHotSpot_OnSlotBlocked::UserId' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnSlotClaimed
// 0x000C (0x000C - 0x0000)
struct AIHotSpot_OnSlotClaimed final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotClaimed) == 0x000004, "Wrong alignment on AIHotSpot_OnSlotClaimed");
static_assert(sizeof(AIHotSpot_OnSlotClaimed) == 0x00000C, "Wrong size on AIHotSpot_OnSlotClaimed");
static_assert(offsetof(AIHotSpot_OnSlotClaimed, AI) == 0x000000, "Member 'AIHotSpot_OnSlotClaimed::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotClaimed, INDEX) == 0x000004, "Member 'AIHotSpot_OnSlotClaimed::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotClaimed, UserId) == 0x000008, "Member 'AIHotSpot_OnSlotClaimed::UserId' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnSlotDisabled
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_OnSlotDisabled final
{
public:
	int32                                         INDEX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotDisabled) == 0x000004, "Wrong alignment on AIHotSpot_OnSlotDisabled");
static_assert(sizeof(AIHotSpot_OnSlotDisabled) == 0x000008, "Wrong size on AIHotSpot_OnSlotDisabled");
static_assert(offsetof(AIHotSpot_OnSlotDisabled, INDEX) == 0x000000, "Member 'AIHotSpot_OnSlotDisabled::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotDisabled, UserId) == 0x000004, "Member 'AIHotSpot_OnSlotDisabled::UserId' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnSlotEnabled
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_OnSlotEnabled final
{
public:
	int32                                         INDEX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotEnabled) == 0x000004, "Wrong alignment on AIHotSpot_OnSlotEnabled");
static_assert(sizeof(AIHotSpot_OnSlotEnabled) == 0x000008, "Wrong size on AIHotSpot_OnSlotEnabled");
static_assert(offsetof(AIHotSpot_OnSlotEnabled, INDEX) == 0x000000, "Member 'AIHotSpot_OnSlotEnabled::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotEnabled, UserId) == 0x000004, "Member 'AIHotSpot_OnSlotEnabled::UserId' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnSlotFreed
// 0x000C (0x000C - 0x0000)
struct AIHotSpot_OnSlotFreed final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotFreed) == 0x000004, "Wrong alignment on AIHotSpot_OnSlotFreed");
static_assert(sizeof(AIHotSpot_OnSlotFreed) == 0x00000C, "Wrong size on AIHotSpot_OnSlotFreed");
static_assert(offsetof(AIHotSpot_OnSlotFreed, AI) == 0x000000, "Member 'AIHotSpot_OnSlotFreed::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotFreed, INDEX) == 0x000004, "Member 'AIHotSpot_OnSlotFreed::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotFreed, UserId) == 0x000008, "Member 'AIHotSpot_OnSlotFreed::UserId' has a wrong offset!");

// Function FortniteGame.AIHotSpot.OnSlotOccupied
// 0x000C (0x000C - 0x0000)
struct AIHotSpot_OnSlotOccupied final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_OnSlotOccupied) == 0x000004, "Wrong alignment on AIHotSpot_OnSlotOccupied");
static_assert(sizeof(AIHotSpot_OnSlotOccupied) == 0x00000C, "Wrong size on AIHotSpot_OnSlotOccupied");
static_assert(offsetof(AIHotSpot_OnSlotOccupied, AI) == 0x000000, "Member 'AIHotSpot_OnSlotOccupied::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotOccupied, INDEX) == 0x000004, "Member 'AIHotSpot_OnSlotOccupied::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_OnSlotOccupied, UserId) == 0x000008, "Member 'AIHotSpot_OnSlotOccupied::UserId' has a wrong offset!");

// Function FortniteGame.AIHotSpot.RemoveFromHotspot
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_RemoveFromHotspot final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssignFromWaitingList;                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_RemoveFromHotspot) == 0x000004, "Wrong alignment on AIHotSpot_RemoveFromHotspot");
static_assert(sizeof(AIHotSpot_RemoveFromHotspot) == 0x000008, "Wrong size on AIHotSpot_RemoveFromHotspot");
static_assert(offsetof(AIHotSpot_RemoveFromHotspot, AI) == 0x000000, "Member 'AIHotSpot_RemoveFromHotspot::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_RemoveFromHotspot, bAssignFromWaitingList) == 0x000004, "Member 'AIHotSpot_RemoveFromHotspot::bAssignFromWaitingList' has a wrong offset!");
static_assert(offsetof(AIHotSpot_RemoveFromHotspot, ReturnValue) == 0x000005, "Member 'AIHotSpot_RemoveFromHotspot::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.RemoveGroupFromHotspot
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_RemoveGroupFromHotspot final
{
public:
	TArray<class AAIController*>                  GroupOfAI;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_RemoveGroupFromHotspot) == 0x000004, "Wrong alignment on AIHotSpot_RemoveGroupFromHotspot");
static_assert(sizeof(AIHotSpot_RemoveGroupFromHotspot) == 0x000010, "Wrong size on AIHotSpot_RemoveGroupFromHotspot");
static_assert(offsetof(AIHotSpot_RemoveGroupFromHotspot, GroupOfAI) == 0x000000, "Member 'AIHotSpot_RemoveGroupFromHotspot::GroupOfAI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_RemoveGroupFromHotspot, ReturnValue) == 0x00000C, "Member 'AIHotSpot_RemoveGroupFromHotspot::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpot_SetEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_SetEnabled) == 0x000001, "Wrong alignment on AIHotSpot_SetEnabled");
static_assert(sizeof(AIHotSpot_SetEnabled) == 0x000001, "Wrong size on AIHotSpot_SetEnabled");
static_assert(offsetof(AIHotSpot_SetEnabled, bEnabled) == 0x000000, "Member 'AIHotSpot_SetEnabled::bEnabled' has a wrong offset!");

// Function FortniteGame.AIHotSpot.CanUseSlotByIndex
// 0x000C (0x000C - 0x0000)
struct AIHotSpot_CanUseSlotByIndex final
{
public:
	const class AAIController*                    AI;                                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_CanUseSlotByIndex) == 0x000004, "Wrong alignment on AIHotSpot_CanUseSlotByIndex");
static_assert(sizeof(AIHotSpot_CanUseSlotByIndex) == 0x00000C, "Wrong size on AIHotSpot_CanUseSlotByIndex");
static_assert(offsetof(AIHotSpot_CanUseSlotByIndex, AI) == 0x000000, "Member 'AIHotSpot_CanUseSlotByIndex::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_CanUseSlotByIndex, INDEX) == 0x000004, "Member 'AIHotSpot_CanUseSlotByIndex::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_CanUseSlotByIndex, ReturnValue) == 0x000008, "Member 'AIHotSpot_CanUseSlotByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.CanUseSlotByUserId
// 0x000C (0x000C - 0x0000)
struct AIHotSpot_CanUseSlotByUserId final
{
public:
	const class AAIController*                    AI;                                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_CanUseSlotByUserId) == 0x000004, "Wrong alignment on AIHotSpot_CanUseSlotByUserId");
static_assert(sizeof(AIHotSpot_CanUseSlotByUserId) == 0x00000C, "Wrong size on AIHotSpot_CanUseSlotByUserId");
static_assert(offsetof(AIHotSpot_CanUseSlotByUserId, AI) == 0x000000, "Member 'AIHotSpot_CanUseSlotByUserId::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_CanUseSlotByUserId, UserId) == 0x000004, "Member 'AIHotSpot_CanUseSlotByUserId::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_CanUseSlotByUserId, ReturnValue) == 0x000008, "Member 'AIHotSpot_CanUseSlotByUserId::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.FindBestSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_FindBestSlotIndex final
{
public:
	class AAIController*                          AI;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_FindBestSlotIndex) == 0x000004, "Wrong alignment on AIHotSpot_FindBestSlotIndex");
static_assert(sizeof(AIHotSpot_FindBestSlotIndex) == 0x000008, "Wrong size on AIHotSpot_FindBestSlotIndex");
static_assert(offsetof(AIHotSpot_FindBestSlotIndex, AI) == 0x000000, "Member 'AIHotSpot_FindBestSlotIndex::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_FindBestSlotIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_FindBestSlotIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.FindBestSlotIndices
// 0x0018 (0x0018 - 0x0000)
struct AIHotSpot_FindBestSlotIndices final
{
public:
	TArray<class AAIController*>                  AI;                                                // 0x0000(0x000C)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_FindBestSlotIndices) == 0x000004, "Wrong alignment on AIHotSpot_FindBestSlotIndices");
static_assert(sizeof(AIHotSpot_FindBestSlotIndices) == 0x000018, "Wrong size on AIHotSpot_FindBestSlotIndices");
static_assert(offsetof(AIHotSpot_FindBestSlotIndices, AI) == 0x000000, "Member 'AIHotSpot_FindBestSlotIndices::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_FindBestSlotIndices, ReturnValue) == 0x00000C, "Member 'AIHotSpot_FindBestSlotIndices::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetAssignedAI
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetAssignedAI final
{
public:
	EAIHotSpotAssignmentFilter                    Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AAIController*>                  ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetAssignedAI) == 0x000004, "Wrong alignment on AIHotSpot_GetAssignedAI");
static_assert(sizeof(AIHotSpot_GetAssignedAI) == 0x000010, "Wrong size on AIHotSpot_GetAssignedAI");
static_assert(offsetof(AIHotSpot_GetAssignedAI, Filter) == 0x000000, "Member 'AIHotSpot_GetAssignedAI::Filter' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetAssignedAI, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetAssignedAI::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetAssignedAICount
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetAssignedAICount final
{
public:
	EAIHotSpotAssignmentFilter                    Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetAssignedAICount) == 0x000004, "Wrong alignment on AIHotSpot_GetAssignedAICount");
static_assert(sizeof(AIHotSpot_GetAssignedAICount) == 0x000008, "Wrong size on AIHotSpot_GetAssignedAICount");
static_assert(offsetof(AIHotSpot_GetAssignedAICount, Filter) == 0x000000, "Member 'AIHotSpot_GetAssignedAICount::Filter' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetAssignedAICount, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetAssignedAICount::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotByIndex
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotByIndex final
{
public:
	int32                                         INDEX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIHotSpotSlot*                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotByIndex) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotByIndex");
static_assert(sizeof(AIHotSpot_GetSlotByIndex) == 0x000008, "Wrong size on AIHotSpot_GetSlotByIndex");
static_assert(offsetof(AIHotSpot_GetSlotByIndex, INDEX) == 0x000000, "Member 'AIHotSpot_GetSlotByIndex::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotByOwner
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotByOwner final
{
public:
	const class AAIController*                    AIOwner;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIHotSpotSlot*                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotByOwner) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotByOwner");
static_assert(sizeof(AIHotSpot_GetSlotByOwner) == 0x000008, "Wrong size on AIHotSpot_GetSlotByOwner");
static_assert(offsetof(AIHotSpot_GetSlotByOwner, AIOwner) == 0x000000, "Member 'AIHotSpot_GetSlotByOwner::AIOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotByOwner, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotByOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotByUserId
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotByUserId final
{
public:
	int32                                         UserId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIHotSpotSlot*                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotByUserId) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotByUserId");
static_assert(sizeof(AIHotSpot_GetSlotByUserId) == 0x000008, "Wrong size on AIHotSpot_GetSlotByUserId");
static_assert(offsetof(AIHotSpot_GetSlotByUserId, UserId) == 0x000000, "Member 'AIHotSpot_GetSlotByUserId::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotByUserId, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotByUserId::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotCount
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotCount final
{
public:
	EAIHotSpotSlotFilter                          Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotCount) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotCount");
static_assert(sizeof(AIHotSpot_GetSlotCount) == 0x000008, "Wrong size on AIHotSpot_GetSlotCount");
static_assert(offsetof(AIHotSpot_GetSlotCount, Filter) == 0x000000, "Member 'AIHotSpot_GetSlotCount::Filter' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotCount, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotCount::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotIndexByOwner
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotIndexByOwner final
{
public:
	const class AAIController*                    AIOwner;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotIndexByOwner) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotIndexByOwner");
static_assert(sizeof(AIHotSpot_GetSlotIndexByOwner) == 0x000008, "Wrong size on AIHotSpot_GetSlotIndexByOwner");
static_assert(offsetof(AIHotSpot_GetSlotIndexByOwner, AIOwner) == 0x000000, "Member 'AIHotSpot_GetSlotIndexByOwner::AIOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotIndexByOwner, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotIndexByOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotIndexByUserId
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotIndexByUserId final
{
public:
	int32                                         UserId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotIndexByUserId) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotIndexByUserId");
static_assert(sizeof(AIHotSpot_GetSlotIndexByUserId) == 0x000008, "Wrong size on AIHotSpot_GetSlotIndexByUserId");
static_assert(offsetof(AIHotSpot_GetSlotIndexByUserId, UserId) == 0x000000, "Member 'AIHotSpot_GetSlotIndexByUserId::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotIndexByUserId, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotIndexByUserId::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotLocationByIndex
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotLocationByIndex final
{
public:
	int32                                         INDEX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotLocationByIndex) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotLocationByIndex");
static_assert(sizeof(AIHotSpot_GetSlotLocationByIndex) == 0x000010, "Wrong size on AIHotSpot_GetSlotLocationByIndex");
static_assert(offsetof(AIHotSpot_GetSlotLocationByIndex, INDEX) == 0x000000, "Member 'AIHotSpot_GetSlotLocationByIndex::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotLocationByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotLocationByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotLocationByOwner
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotLocationByOwner final
{
public:
	const class AAIController*                    AIOwner;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotLocationByOwner) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotLocationByOwner");
static_assert(sizeof(AIHotSpot_GetSlotLocationByOwner) == 0x000010, "Wrong size on AIHotSpot_GetSlotLocationByOwner");
static_assert(offsetof(AIHotSpot_GetSlotLocationByOwner, AIOwner) == 0x000000, "Member 'AIHotSpot_GetSlotLocationByOwner::AIOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotLocationByOwner, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotLocationByOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotLocationByUserId
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotLocationByUserId final
{
public:
	int32                                         UserId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotLocationByUserId) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotLocationByUserId");
static_assert(sizeof(AIHotSpot_GetSlotLocationByUserId) == 0x000010, "Wrong size on AIHotSpot_GetSlotLocationByUserId");
static_assert(offsetof(AIHotSpot_GetSlotLocationByUserId, UserId) == 0x000000, "Member 'AIHotSpot_GetSlotLocationByUserId::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotLocationByUserId, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotLocationByUserId::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotOwnerByIndex
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotOwnerByIndex final
{
public:
	int32                                         INDEX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAIController*                          ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotOwnerByIndex) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotOwnerByIndex");
static_assert(sizeof(AIHotSpot_GetSlotOwnerByIndex) == 0x000008, "Wrong size on AIHotSpot_GetSlotOwnerByIndex");
static_assert(offsetof(AIHotSpot_GetSlotOwnerByIndex, INDEX) == 0x000000, "Member 'AIHotSpot_GetSlotOwnerByIndex::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotOwnerByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotOwnerByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotOwnerByUserId
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotOwnerByUserId final
{
public:
	int32                                         UserId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAIController*                          ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotOwnerByUserId) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotOwnerByUserId");
static_assert(sizeof(AIHotSpot_GetSlotOwnerByUserId) == 0x000008, "Wrong size on AIHotSpot_GetSlotOwnerByUserId");
static_assert(offsetof(AIHotSpot_GetSlotOwnerByUserId, UserId) == 0x000000, "Member 'AIHotSpot_GetSlotOwnerByUserId::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotOwnerByUserId, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotOwnerByUserId::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotRotationByIndex
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotRotationByIndex final
{
public:
	int32                                         INDEX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotRotationByIndex) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotRotationByIndex");
static_assert(sizeof(AIHotSpot_GetSlotRotationByIndex) == 0x000010, "Wrong size on AIHotSpot_GetSlotRotationByIndex");
static_assert(offsetof(AIHotSpot_GetSlotRotationByIndex, INDEX) == 0x000000, "Member 'AIHotSpot_GetSlotRotationByIndex::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotRotationByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotRotationByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotRotationByOwner
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotRotationByOwner final
{
public:
	const class AAIController*                    AIOwner;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotRotationByOwner) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotRotationByOwner");
static_assert(sizeof(AIHotSpot_GetSlotRotationByOwner) == 0x000010, "Wrong size on AIHotSpot_GetSlotRotationByOwner");
static_assert(offsetof(AIHotSpot_GetSlotRotationByOwner, AIOwner) == 0x000000, "Member 'AIHotSpot_GetSlotRotationByOwner::AIOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotRotationByOwner, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotRotationByOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotRotationByUserId
// 0x0010 (0x0010 - 0x0000)
struct AIHotSpot_GetSlotRotationByUserId final
{
public:
	int32                                         UserId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotRotationByUserId) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotRotationByUserId");
static_assert(sizeof(AIHotSpot_GetSlotRotationByUserId) == 0x000010, "Wrong size on AIHotSpot_GetSlotRotationByUserId");
static_assert(offsetof(AIHotSpot_GetSlotRotationByUserId, UserId) == 0x000000, "Member 'AIHotSpot_GetSlotRotationByUserId::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotRotationByUserId, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotRotationByUserId::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotStateByIndex
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotStateByIndex final
{
public:
	int32                                         INDEX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_GetSlotStateByIndex) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotStateByIndex");
static_assert(sizeof(AIHotSpot_GetSlotStateByIndex) == 0x000008, "Wrong size on AIHotSpot_GetSlotStateByIndex");
static_assert(offsetof(AIHotSpot_GetSlotStateByIndex, INDEX) == 0x000000, "Member 'AIHotSpot_GetSlotStateByIndex::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotStateByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotStateByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotStateByOwner
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotStateByOwner final
{
public:
	const class AAIController*                    AIOwner;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_GetSlotStateByOwner) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotStateByOwner");
static_assert(sizeof(AIHotSpot_GetSlotStateByOwner) == 0x000008, "Wrong size on AIHotSpot_GetSlotStateByOwner");
static_assert(offsetof(AIHotSpot_GetSlotStateByOwner, AIOwner) == 0x000000, "Member 'AIHotSpot_GetSlotStateByOwner::AIOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotStateByOwner, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotStateByOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotStateByUserId
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotStateByUserId final
{
public:
	int32                                         UserId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_GetSlotStateByUserId) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotStateByUserId");
static_assert(sizeof(AIHotSpot_GetSlotStateByUserId) == 0x000008, "Wrong size on AIHotSpot_GetSlotStateByUserId");
static_assert(offsetof(AIHotSpot_GetSlotStateByUserId, UserId) == 0x000000, "Member 'AIHotSpot_GetSlotStateByUserId::UserId' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotStateByUserId, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotStateByUserId::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotUserIdByIndex
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotUserIdByIndex final
{
public:
	int32                                         INDEX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotUserIdByIndex) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotUserIdByIndex");
static_assert(sizeof(AIHotSpot_GetSlotUserIdByIndex) == 0x000008, "Wrong size on AIHotSpot_GetSlotUserIdByIndex");
static_assert(offsetof(AIHotSpot_GetSlotUserIdByIndex, INDEX) == 0x000000, "Member 'AIHotSpot_GetSlotUserIdByIndex::INDEX' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotUserIdByIndex, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotUserIdByIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.GetSlotUserIdByOwner
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_GetSlotUserIdByOwner final
{
public:
	const class AAIController*                    AIOwner;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_GetSlotUserIdByOwner) == 0x000004, "Wrong alignment on AIHotSpot_GetSlotUserIdByOwner");
static_assert(sizeof(AIHotSpot_GetSlotUserIdByOwner) == 0x000008, "Wrong size on AIHotSpot_GetSlotUserIdByOwner");
static_assert(offsetof(AIHotSpot_GetSlotUserIdByOwner, AIOwner) == 0x000000, "Member 'AIHotSpot_GetSlotUserIdByOwner::AIOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpot_GetSlotUserIdByOwner, ReturnValue) == 0x000004, "Member 'AIHotSpot_GetSlotUserIdByOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.HasAssignedAI
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_HasAssignedAI final
{
public:
	const class AAIController*                    AI;                                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotAssignmentFilter                    Filter;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_HasAssignedAI) == 0x000004, "Wrong alignment on AIHotSpot_HasAssignedAI");
static_assert(sizeof(AIHotSpot_HasAssignedAI) == 0x000008, "Wrong size on AIHotSpot_HasAssignedAI");
static_assert(offsetof(AIHotSpot_HasAssignedAI, AI) == 0x000000, "Member 'AIHotSpot_HasAssignedAI::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_HasAssignedAI, Filter) == 0x000004, "Member 'AIHotSpot_HasAssignedAI::Filter' has a wrong offset!");
static_assert(offsetof(AIHotSpot_HasAssignedAI, ReturnValue) == 0x000005, "Member 'AIHotSpot_HasAssignedAI::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.HasEnabledSlots
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpot_HasEnabledSlots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_HasEnabledSlots) == 0x000001, "Wrong alignment on AIHotSpot_HasEnabledSlots");
static_assert(sizeof(AIHotSpot_HasEnabledSlots) == 0x000001, "Wrong size on AIHotSpot_HasEnabledSlots");
static_assert(offsetof(AIHotSpot_HasEnabledSlots, ReturnValue) == 0x000000, "Member 'AIHotSpot_HasEnabledSlots::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.IsAIAllowed
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpot_IsAIAllowed final
{
public:
	const class AAIController*                    AI;                                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpot_IsAIAllowed) == 0x000004, "Wrong alignment on AIHotSpot_IsAIAllowed");
static_assert(sizeof(AIHotSpot_IsAIAllowed) == 0x000008, "Wrong size on AIHotSpot_IsAIAllowed");
static_assert(offsetof(AIHotSpot_IsAIAllowed, AI) == 0x000000, "Member 'AIHotSpot_IsAIAllowed::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpot_IsAIAllowed, ReturnValue) == 0x000004, "Member 'AIHotSpot_IsAIAllowed::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpot_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_IsEnabled) == 0x000001, "Wrong alignment on AIHotSpot_IsEnabled");
static_assert(sizeof(AIHotSpot_IsEnabled) == 0x000001, "Wrong size on AIHotSpot_IsEnabled");
static_assert(offsetof(AIHotSpot_IsEnabled, ReturnValue) == 0x000000, "Member 'AIHotSpot_IsEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpot.IsSlotlessAssignmentAllowed
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpot_IsSlotlessAssignmentAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpot_IsSlotlessAssignmentAllowed) == 0x000001, "Wrong alignment on AIHotSpot_IsSlotlessAssignmentAllowed");
static_assert(sizeof(AIHotSpot_IsSlotlessAssignmentAllowed) == 0x000001, "Wrong size on AIHotSpot_IsSlotlessAssignmentAllowed");
static_assert(offsetof(AIHotSpot_IsSlotlessAssignmentAllowed, ReturnValue) == 0x000000, "Member 'AIHotSpot_IsSlotlessAssignmentAllowed::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuickBars.Empty
// 0x0001 (0x0001 - 0x0000)
struct FortQuickBars_Empty final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBars_Empty) == 0x000001, "Wrong alignment on FortQuickBars_Empty");
static_assert(sizeof(FortQuickBars_Empty) == 0x000001, "Wrong size on FortQuickBars_Empty");
static_assert(offsetof(FortQuickBars_Empty, InQuickBar) == 0x000000, "Member 'FortQuickBars_Empty::InQuickBar' has a wrong offset!");

// Function FortniteGame.FortQuickBars.ServerActivateSlotInternal
// 0x000C (0x000C - 0x0000)
struct FortQuickBars_ServerActivateSlotInternal final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcivateDelay;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBars_ServerActivateSlotInternal) == 0x000004, "Wrong alignment on FortQuickBars_ServerActivateSlotInternal");
static_assert(sizeof(FortQuickBars_ServerActivateSlotInternal) == 0x00000C, "Wrong size on FortQuickBars_ServerActivateSlotInternal");
static_assert(offsetof(FortQuickBars_ServerActivateSlotInternal, InQuickBar) == 0x000000, "Member 'FortQuickBars_ServerActivateSlotInternal::InQuickBar' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerActivateSlotInternal, Slot) == 0x000004, "Member 'FortQuickBars_ServerActivateSlotInternal::Slot' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerActivateSlotInternal, AcivateDelay) == 0x000008, "Member 'FortQuickBars_ServerActivateSlotInternal::AcivateDelay' has a wrong offset!");

// Function FortniteGame.FortQuickBars.ServerAddItemInternal
// 0x0018 (0x0018 - 0x0000)
struct FortQuickBars_ServerAddItemInternal final
{
public:
	struct FGuid                                  Item;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortQuickBars                                InQuickBar;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBars_ServerAddItemInternal) == 0x000004, "Wrong alignment on FortQuickBars_ServerAddItemInternal");
static_assert(sizeof(FortQuickBars_ServerAddItemInternal) == 0x000018, "Wrong size on FortQuickBars_ServerAddItemInternal");
static_assert(offsetof(FortQuickBars_ServerAddItemInternal, Item) == 0x000000, "Member 'FortQuickBars_ServerAddItemInternal::Item' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerAddItemInternal, InQuickBar) == 0x000010, "Member 'FortQuickBars_ServerAddItemInternal::InQuickBar' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerAddItemInternal, Slot) == 0x000014, "Member 'FortQuickBars_ServerAddItemInternal::Slot' has a wrong offset!");

// Function FortniteGame.FortQuickBars.ServerRemoveItemInternal
// 0x0014 (0x0014 - 0x0000)
struct FortQuickBars_ServerRemoveItemInternal final
{
public:
	struct FGuid                                  Item;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFindReplacement;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuickBars_ServerRemoveItemInternal) == 0x000004, "Wrong alignment on FortQuickBars_ServerRemoveItemInternal");
static_assert(sizeof(FortQuickBars_ServerRemoveItemInternal) == 0x000014, "Wrong size on FortQuickBars_ServerRemoveItemInternal");
static_assert(offsetof(FortQuickBars_ServerRemoveItemInternal, Item) == 0x000000, "Member 'FortQuickBars_ServerRemoveItemInternal::Item' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerRemoveItemInternal, bFindReplacement) == 0x000010, "Member 'FortQuickBars_ServerRemoveItemInternal::bFindReplacement' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerRemoveItemInternal, bForce) == 0x000011, "Member 'FortQuickBars_ServerRemoveItemInternal::bForce' has a wrong offset!");

// Function FortniteGame.FortQuickBars.ServerSwapItemsInternal
// 0x0010 (0x0010 - 0x0000)
struct FortQuickBars_ServerSwapItemsInternal final
{
public:
	EFortQuickBars                                QuickBarA;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndexA;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortQuickBars                                QuickBarB;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndexB;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuickBars_ServerSwapItemsInternal) == 0x000004, "Wrong alignment on FortQuickBars_ServerSwapItemsInternal");
static_assert(sizeof(FortQuickBars_ServerSwapItemsInternal) == 0x000010, "Wrong size on FortQuickBars_ServerSwapItemsInternal");
static_assert(offsetof(FortQuickBars_ServerSwapItemsInternal, QuickBarA) == 0x000000, "Member 'FortQuickBars_ServerSwapItemsInternal::QuickBarA' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerSwapItemsInternal, SlotIndexA) == 0x000004, "Member 'FortQuickBars_ServerSwapItemsInternal::SlotIndexA' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerSwapItemsInternal, QuickBarB) == 0x000008, "Member 'FortQuickBars_ServerSwapItemsInternal::QuickBarB' has a wrong offset!");
static_assert(offsetof(FortQuickBars_ServerSwapItemsInternal, SlotIndexB) == 0x00000C, "Member 'FortQuickBars_ServerSwapItemsInternal::SlotIndexB' has a wrong offset!");

// Function FortniteGame.AccumulatedGameplayEffectInfo.GetRelativeEffectAtRating
// 0x0028 (0x0028 - 0x0000)
struct AccumulatedGameplayEffectInfo_GetRelativeEffectAtRating final
{
public:
	int32                                         NewRating;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectInfo                    ReturnValue;                                       // 0x0004(0x0024)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccumulatedGameplayEffectInfo_GetRelativeEffectAtRating) == 0x000004, "Wrong alignment on AccumulatedGameplayEffectInfo_GetRelativeEffectAtRating");
static_assert(sizeof(AccumulatedGameplayEffectInfo_GetRelativeEffectAtRating) == 0x000028, "Wrong size on AccumulatedGameplayEffectInfo_GetRelativeEffectAtRating");
static_assert(offsetof(AccumulatedGameplayEffectInfo_GetRelativeEffectAtRating, NewRating) == 0x000000, "Member 'AccumulatedGameplayEffectInfo_GetRelativeEffectAtRating::NewRating' has a wrong offset!");
static_assert(offsetof(AccumulatedGameplayEffectInfo_GetRelativeEffectAtRating, ReturnValue) == 0x000004, "Member 'AccumulatedGameplayEffectInfo_GetRelativeEffectAtRating::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemCollectedParams.BreakData
// 0x000C (0x000C - 0x0000)
struct FortItemCollectedParams_BreakData final
{
public:
	class UFortWorldItemDefinition*               _CollectedItemDefinition;                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _CollectedBy;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _AmountCollected;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCollectedParams_BreakData) == 0x000004, "Wrong alignment on FortItemCollectedParams_BreakData");
static_assert(sizeof(FortItemCollectedParams_BreakData) == 0x00000C, "Wrong size on FortItemCollectedParams_BreakData");
static_assert(offsetof(FortItemCollectedParams_BreakData, _CollectedItemDefinition) == 0x000000, "Member 'FortItemCollectedParams_BreakData::_CollectedItemDefinition' has a wrong offset!");
static_assert(offsetof(FortItemCollectedParams_BreakData, _CollectedBy) == 0x000004, "Member 'FortItemCollectedParams_BreakData::_CollectedBy' has a wrong offset!");
static_assert(offsetof(FortItemCollectedParams_BreakData, _AmountCollected) == 0x000008, "Member 'FortItemCollectedParams_BreakData::_AmountCollected' has a wrong offset!");

// Function FortniteGame.FortItemCollectedParams.MakeData
// 0x0010 (0x0010 - 0x0000)
struct FortItemCollectedParams_MakeData final
{
public:
	const class UFortWorldItemDefinition*         _CollectedItemDefinition;                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _CollectedBy;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _AmountCollected;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemCollectedParams*               ThisParam;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCollectedParams_MakeData) == 0x000004, "Wrong alignment on FortItemCollectedParams_MakeData");
static_assert(sizeof(FortItemCollectedParams_MakeData) == 0x000010, "Wrong size on FortItemCollectedParams_MakeData");
static_assert(offsetof(FortItemCollectedParams_MakeData, _CollectedItemDefinition) == 0x000000, "Member 'FortItemCollectedParams_MakeData::_CollectedItemDefinition' has a wrong offset!");
static_assert(offsetof(FortItemCollectedParams_MakeData, _CollectedBy) == 0x000004, "Member 'FortItemCollectedParams_MakeData::_CollectedBy' has a wrong offset!");
static_assert(offsetof(FortItemCollectedParams_MakeData, _AmountCollected) == 0x000008, "Member 'FortItemCollectedParams_MakeData::_AmountCollected' has a wrong offset!");
static_assert(offsetof(FortItemCollectedParams_MakeData, ThisParam) == 0x00000C, "Member 'FortItemCollectedParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.WorldMapPin.SetTheaterIndex
// 0x0004 (0x0004 - 0x0000)
struct WorldMapPin_SetTheaterIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMapPin_SetTheaterIndex) == 0x000004, "Wrong alignment on WorldMapPin_SetTheaterIndex");
static_assert(sizeof(WorldMapPin_SetTheaterIndex) == 0x000004, "Wrong size on WorldMapPin_SetTheaterIndex");
static_assert(offsetof(WorldMapPin_SetTheaterIndex, NewIndex) == 0x000000, "Member 'WorldMapPin_SetTheaterIndex::NewIndex' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.OnStateChanged
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpotSlot_OnStateChanged final
{
public:
	class AAIController*                          SlotOwner;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                NewState;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpotSlot_OnStateChanged) == 0x000004, "Wrong alignment on AIHotSpotSlot_OnStateChanged");
static_assert(sizeof(AIHotSpotSlot_OnStateChanged) == 0x000008, "Wrong size on AIHotSpotSlot_OnStateChanged");
static_assert(offsetof(AIHotSpotSlot_OnStateChanged, SlotOwner) == 0x000000, "Member 'AIHotSpotSlot_OnStateChanged::SlotOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlot_OnStateChanged, NewState) == 0x000004, "Member 'AIHotSpotSlot_OnStateChanged::NewState' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.SetSlotEnabled
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_SetSlotEnabled final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_SetSlotEnabled) == 0x000001, "Wrong alignment on AIHotSpotSlot_SetSlotEnabled");
static_assert(sizeof(AIHotSpotSlot_SetSlotEnabled) == 0x000001, "Wrong size on AIHotSpotSlot_SetSlotEnabled");
static_assert(offsetof(AIHotSpotSlot_SetSlotEnabled, bNewEnabled) == 0x000000, "Member 'AIHotSpotSlot_SetSlotEnabled::bNewEnabled' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.SetSlotOwnerAndState
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpotSlot_SetSlotOwnerAndState final
{
public:
	class AAIController*                          NewOwner;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIHotSpotSlot                                NewState;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpotSlot_SetSlotOwnerAndState) == 0x000004, "Wrong alignment on AIHotSpotSlot_SetSlotOwnerAndState");
static_assert(sizeof(AIHotSpotSlot_SetSlotOwnerAndState) == 0x000008, "Wrong size on AIHotSpotSlot_SetSlotOwnerAndState");
static_assert(offsetof(AIHotSpotSlot_SetSlotOwnerAndState, NewOwner) == 0x000000, "Member 'AIHotSpotSlot_SetSlotOwnerAndState::NewOwner' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlot_SetSlotOwnerAndState, NewState) == 0x000004, "Member 'AIHotSpotSlot_SetSlotOwnerAndState::NewState' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.SetSlotState
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_SetSlotState final
{
public:
	EAIHotSpotSlot                                NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_SetSlotState) == 0x000001, "Wrong alignment on AIHotSpotSlot_SetSlotState");
static_assert(sizeof(AIHotSpotSlot_SetSlotState) == 0x000001, "Wrong size on AIHotSpotSlot_SetSlotState");
static_assert(offsetof(AIHotSpotSlot_SetSlotState, NewState) == 0x000000, "Member 'AIHotSpotSlot_SetSlotState::NewState' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetHotSpot
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlot_GetHotSpot final
{
public:
	class AAIHotSpot*                             ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetHotSpot) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetHotSpot");
static_assert(sizeof(AIHotSpotSlot_GetHotSpot) == 0x000004, "Wrong size on AIHotSpotSlot_GetHotSpot");
static_assert(offsetof(AIHotSpotSlot_GetHotSpot, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetHotSpot::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotBounds
// 0x001C (0x001C - 0x0000)
struct AIHotSpotSlot_GetSlotBounds final
{
public:
	struct FBox                                   ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotBounds) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotBounds");
static_assert(sizeof(AIHotSpotSlot_GetSlotBounds) == 0x00001C, "Wrong size on AIHotSpotSlot_GetSlotBounds");
static_assert(offsetof(AIHotSpotSlot_GetSlotBounds, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotBounds::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotHeight
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlot_GetSlotHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotHeight) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotHeight");
static_assert(sizeof(AIHotSpotSlot_GetSlotHeight) == 0x000004, "Wrong size on AIHotSpotSlot_GetSlotHeight");
static_assert(offsetof(AIHotSpotSlot_GetSlotHeight, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotHeight::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlot_GetSlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotIndex) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotIndex");
static_assert(sizeof(AIHotSpotSlot_GetSlotIndex) == 0x000004, "Wrong size on AIHotSpotSlot_GetSlotIndex");
static_assert(offsetof(AIHotSpotSlot_GetSlotIndex, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotLocation
// 0x000C (0x000C - 0x0000)
struct AIHotSpotSlot_GetSlotLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotLocation) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotLocation");
static_assert(sizeof(AIHotSpotSlot_GetSlotLocation) == 0x00000C, "Wrong size on AIHotSpotSlot_GetSlotLocation");
static_assert(offsetof(AIHotSpotSlot_GetSlotLocation, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotOwner
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlot_GetSlotOwner final
{
public:
	class AAIController*                          ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotOwner) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotOwner");
static_assert(sizeof(AIHotSpotSlot_GetSlotOwner) == 0x000004, "Wrong size on AIHotSpotSlot_GetSlotOwner");
static_assert(offsetof(AIHotSpotSlot_GetSlotOwner, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotRadius
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlot_GetSlotRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotRadius) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotRadius");
static_assert(sizeof(AIHotSpotSlot_GetSlotRadius) == 0x000004, "Wrong size on AIHotSpotSlot_GetSlotRadius");
static_assert(offsetof(AIHotSpotSlot_GetSlotRadius, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotRadius::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotRotation
// 0x000C (0x000C - 0x0000)
struct AIHotSpotSlot_GetSlotRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotRotation) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotRotation");
static_assert(sizeof(AIHotSpotSlot_GetSlotRotation) == 0x00000C, "Wrong size on AIHotSpotSlot_GetSlotRotation");
static_assert(offsetof(AIHotSpotSlot_GetSlotRotation, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotState
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_GetSlotState final
{
public:
	EAIHotSpotSlot                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotState) == 0x000001, "Wrong alignment on AIHotSpotSlot_GetSlotState");
static_assert(sizeof(AIHotSpotSlot_GetSlotState) == 0x000001, "Wrong size on AIHotSpotSlot_GetSlotState");
static_assert(offsetof(AIHotSpotSlot_GetSlotState, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotState::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.GetSlotUserId
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlot_GetSlotUserId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_GetSlotUserId) == 0x000004, "Wrong alignment on AIHotSpotSlot_GetSlotUserId");
static_assert(sizeof(AIHotSpotSlot_GetSlotUserId) == 0x000004, "Wrong size on AIHotSpotSlot_GetSlotUserId");
static_assert(offsetof(AIHotSpotSlot_GetSlotUserId, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_GetSlotUserId::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.HasUserId
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_HasUserId final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_HasUserId) == 0x000001, "Wrong alignment on AIHotSpotSlot_HasUserId");
static_assert(sizeof(AIHotSpotSlot_HasUserId) == 0x000001, "Wrong size on AIHotSpotSlot_HasUserId");
static_assert(offsetof(AIHotSpotSlot_HasUserId, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_HasUserId::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.IsAIAllowed
// 0x0008 (0x0008 - 0x0000)
struct AIHotSpotSlot_IsAIAllowed final
{
public:
	const class AAIController*                    AI;                                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHotSpotSlot_IsAIAllowed) == 0x000004, "Wrong alignment on AIHotSpotSlot_IsAIAllowed");
static_assert(sizeof(AIHotSpotSlot_IsAIAllowed) == 0x000008, "Wrong size on AIHotSpotSlot_IsAIAllowed");
static_assert(offsetof(AIHotSpotSlot_IsAIAllowed, AI) == 0x000000, "Member 'AIHotSpotSlot_IsAIAllowed::AI' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlot_IsAIAllowed, ReturnValue) == 0x000004, "Member 'AIHotSpotSlot_IsAIAllowed::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlot.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct AIHotSpotSlot_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlot_IsEnabled) == 0x000001, "Wrong alignment on AIHotSpotSlot_IsEnabled");
static_assert(sizeof(AIHotSpotSlot_IsEnabled) == 0x000001, "Wrong size on AIHotSpotSlot_IsEnabled");
static_assert(offsetof(AIHotSpotSlot_IsEnabled, ReturnValue) == 0x000000, "Member 'AIHotSpotSlot_IsEnabled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.ApplyGameplayEffectContainer
// 0x002C (0x002C - 0x0000)
struct FortGameplayAbility_ApplyGameplayEffectContainer final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0014)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0014(0x0008)(Parm, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActiveGameplayEffectHandle>    ReturnValue;                                       // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_ApplyGameplayEffectContainer) == 0x000004, "Wrong alignment on FortGameplayAbility_ApplyGameplayEffectContainer");
static_assert(sizeof(FortGameplayAbility_ApplyGameplayEffectContainer) == 0x00002C, "Wrong size on FortGameplayAbility_ApplyGameplayEffectContainer");
static_assert(offsetof(FortGameplayAbility_ApplyGameplayEffectContainer, TargetData) == 0x000000, "Member 'FortGameplayAbility_ApplyGameplayEffectContainer::TargetData' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_ApplyGameplayEffectContainer, ApplicationTag) == 0x000014, "Member 'FortGameplayAbility_ApplyGameplayEffectContainer::ApplicationTag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_ApplyGameplayEffectContainer, GameplayEffectLevel) == 0x00001C, "Member 'FortGameplayAbility_ApplyGameplayEffectContainer::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_ApplyGameplayEffectContainer, ReturnValue) == 0x000020, "Member 'FortGameplayAbility_ApplyGameplayEffectContainer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.EquipAbilityWeapon
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_EquipAbilityWeapon final
{
public:
	class UFortWeaponItemDefinition*              WeaponDefinition;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_EquipAbilityWeapon) == 0x000004, "Wrong alignment on FortGameplayAbility_EquipAbilityWeapon");
static_assert(sizeof(FortGameplayAbility_EquipAbilityWeapon) == 0x000008, "Wrong size on FortGameplayAbility_EquipAbilityWeapon");
static_assert(offsetof(FortGameplayAbility_EquipAbilityWeapon, WeaponDefinition) == 0x000000, "Member 'FortGameplayAbility_EquipAbilityWeapon::WeaponDefinition' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_EquipAbilityWeapon, ItemLevel) == 0x000004, "Member 'FortGameplayAbility_EquipAbilityWeapon::ItemLevel' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetAimLocationNearestPawn
// 0x0010 (0x0010 - 0x0000)
struct FortGameplayAbility_GetAimLocationNearestPawn final
{
public:
	class AFortPawn*                              Instigator;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetAimLocationNearestPawn) == 0x000004, "Wrong alignment on FortGameplayAbility_GetAimLocationNearestPawn");
static_assert(sizeof(FortGameplayAbility_GetAimLocationNearestPawn) == 0x000010, "Wrong size on FortGameplayAbility_GetAimLocationNearestPawn");
static_assert(offsetof(FortGameplayAbility_GetAimLocationNearestPawn, Instigator) == 0x000000, "Member 'FortGameplayAbility_GetAimLocationNearestPawn::Instigator' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetAimLocationNearestPawn, ReturnValue) == 0x000004, "Member 'FortGameplayAbility_GetAimLocationNearestPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.K2_TriggerFromAnimation
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_K2_TriggerFromAnimation final
{
public:
	struct FGameplayTag                           ApplicationTag;                                    // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_K2_TriggerFromAnimation) == 0x000004, "Wrong alignment on FortGameplayAbility_K2_TriggerFromAnimation");
static_assert(sizeof(FortGameplayAbility_K2_TriggerFromAnimation) == 0x000008, "Wrong size on FortGameplayAbility_K2_TriggerFromAnimation");
static_assert(offsetof(FortGameplayAbility_K2_TriggerFromAnimation, ApplicationTag) == 0x000000, "Member 'FortGameplayAbility_K2_TriggerFromAnimation::ApplicationTag' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.MakeGameplayEffectContainerSpec
// 0x0070 (0x0070 - 0x0000)
struct FortGameplayAbility_MakeGameplayEffectContainerSpec final
{
public:
	struct FGameplayTag                           ApplicationTag;                                    // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainerSpec       ReturnValue;                                       // 0x000C(0x0064)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_MakeGameplayEffectContainerSpec) == 0x000004, "Wrong alignment on FortGameplayAbility_MakeGameplayEffectContainerSpec");
static_assert(sizeof(FortGameplayAbility_MakeGameplayEffectContainerSpec) == 0x000070, "Wrong size on FortGameplayAbility_MakeGameplayEffectContainerSpec");
static_assert(offsetof(FortGameplayAbility_MakeGameplayEffectContainerSpec, ApplicationTag) == 0x000000, "Member 'FortGameplayAbility_MakeGameplayEffectContainerSpec::ApplicationTag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_MakeGameplayEffectContainerSpec, GameplayEffectLevel) == 0x000008, "Member 'FortGameplayAbility_MakeGameplayEffectContainerSpec::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_MakeGameplayEffectContainerSpec, ReturnValue) == 0x00000C, "Member 'FortGameplayAbility_MakeGameplayEffectContainerSpec::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.SetAIFocalPoint
// 0x0010 (0x0010 - 0x0000)
struct FortGameplayAbility_SetAIFocalPoint final
{
public:
	class AActor*                                 FocusTarget;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FocalPoint;                                        // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_SetAIFocalPoint) == 0x000004, "Wrong alignment on FortGameplayAbility_SetAIFocalPoint");
static_assert(sizeof(FortGameplayAbility_SetAIFocalPoint) == 0x000010, "Wrong size on FortGameplayAbility_SetAIFocalPoint");
static_assert(offsetof(FortGameplayAbility_SetAIFocalPoint, FocusTarget) == 0x000000, "Member 'FortGameplayAbility_SetAIFocalPoint::FocusTarget' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_SetAIFocalPoint, FocalPoint) == 0x000004, "Member 'FortGameplayAbility_SetAIFocalPoint::FocalPoint' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.SetupIconOverride
// 0x0001 (0x0001 - 0x0000)
struct FortGameplayAbility_SetupIconOverride final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_SetupIconOverride) == 0x000001, "Wrong alignment on FortGameplayAbility_SetupIconOverride");
static_assert(sizeof(FortGameplayAbility_SetupIconOverride) == 0x000001, "Wrong size on FortGameplayAbility_SetupIconOverride");
static_assert(offsetof(FortGameplayAbility_SetupIconOverride, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_SetupIconOverride::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.ApplyAccuracyToTargetLocation
// 0x0028 (0x0028 - 0x0000)
struct FortGameplayAbility_ApplyAccuracyToTargetLocation final
{
public:
	struct FVector                                SourceLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         inDesiredThrowAngle;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_ApplyAccuracyToTargetLocation) == 0x000004, "Wrong alignment on FortGameplayAbility_ApplyAccuracyToTargetLocation");
static_assert(sizeof(FortGameplayAbility_ApplyAccuracyToTargetLocation) == 0x000028, "Wrong size on FortGameplayAbility_ApplyAccuracyToTargetLocation");
static_assert(offsetof(FortGameplayAbility_ApplyAccuracyToTargetLocation, SourceLocation) == 0x000000, "Member 'FortGameplayAbility_ApplyAccuracyToTargetLocation::SourceLocation' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_ApplyAccuracyToTargetLocation, TargetLocation) == 0x00000C, "Member 'FortGameplayAbility_ApplyAccuracyToTargetLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_ApplyAccuracyToTargetLocation, inDesiredThrowAngle) == 0x000018, "Member 'FortGameplayAbility_ApplyAccuracyToTargetLocation::inDesiredThrowAngle' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_ApplyAccuracyToTargetLocation, ReturnValue) == 0x00001C, "Member 'FortGameplayAbility_ApplyAccuracyToTargetLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.DoesTargetHaveProhibitedTagsForAI
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI) == 0x000004, "Wrong alignment on FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI");
static_assert(sizeof(FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI) == 0x000008, "Wrong size on FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI");
static_assert(offsetof(FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI, Target) == 0x000000, "Member 'FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI::Target' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI, ReturnValue) == 0x000004, "Member 'FortGameplayAbility_DoesTargetHaveProhibitedTagsForAI::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.DoesTargetHaveTags
// 0x0020 (0x0020 - 0x0000)
struct FortGameplayAbility_DoesTargetHaveTags final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0004(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_DoesTargetHaveTags) == 0x000004, "Wrong alignment on FortGameplayAbility_DoesTargetHaveTags");
static_assert(sizeof(FortGameplayAbility_DoesTargetHaveTags) == 0x000020, "Wrong size on FortGameplayAbility_DoesTargetHaveTags");
static_assert(offsetof(FortGameplayAbility_DoesTargetHaveTags, Target) == 0x000000, "Member 'FortGameplayAbility_DoesTargetHaveTags::Target' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_DoesTargetHaveTags, Tags) == 0x000004, "Member 'FortGameplayAbility_DoesTargetHaveTags::Tags' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_DoesTargetHaveTags, ReturnValue) == 0x00001C, "Member 'FortGameplayAbility_DoesTargetHaveTags::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetActivatingAbilityComponent
// 0x0004 (0x0004 - 0x0000)
struct FortGameplayAbility_GetActivatingAbilityComponent final
{
public:
	class UFortAbilitySystemComponent*            ReturnValue;                                       // 0x0000(0x0004)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetActivatingAbilityComponent) == 0x000004, "Wrong alignment on FortGameplayAbility_GetActivatingAbilityComponent");
static_assert(sizeof(FortGameplayAbility_GetActivatingAbilityComponent) == 0x000004, "Wrong size on FortGameplayAbility_GetActivatingAbilityComponent");
static_assert(offsetof(FortGameplayAbility_GetActivatingAbilityComponent, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetActivatingAbilityComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetActivatingPawn
// 0x0004 (0x0004 - 0x0000)
struct FortGameplayAbility_GetActivatingPawn final
{
public:
	class AFortPawn*                              ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetActivatingPawn) == 0x000004, "Wrong alignment on FortGameplayAbility_GetActivatingPawn");
static_assert(sizeof(FortGameplayAbility_GetActivatingPawn) == 0x000004, "Wrong size on FortGameplayAbility_GetActivatingPawn");
static_assert(offsetof(FortGameplayAbility_GetActivatingPawn, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetActivatingPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetAIAbilityTarget
// 0x0004 (0x0004 - 0x0000)
struct FortGameplayAbility_GetAIAbilityTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetAIAbilityTarget) == 0x000004, "Wrong alignment on FortGameplayAbility_GetAIAbilityTarget");
static_assert(sizeof(FortGameplayAbility_GetAIAbilityTarget) == 0x000004, "Wrong size on FortGameplayAbility_GetAIAbilityTarget");
static_assert(offsetof(FortGameplayAbility_GetAIAbilityTarget, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetAIAbilityTarget::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetCurrentAbilitySource
// 0x0008 (0x0008 - 0x0000)
struct FortGameplayAbility_GetCurrentAbilitySource final
{
public:
	EFortAbilitySourceType                        OutSourceType;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutSourceLevel;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetCurrentAbilitySource) == 0x000004, "Wrong alignment on FortGameplayAbility_GetCurrentAbilitySource");
static_assert(sizeof(FortGameplayAbility_GetCurrentAbilitySource) == 0x000008, "Wrong size on FortGameplayAbility_GetCurrentAbilitySource");
static_assert(offsetof(FortGameplayAbility_GetCurrentAbilitySource, OutSourceType) == 0x000000, "Member 'FortGameplayAbility_GetCurrentAbilitySource::OutSourceType' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetCurrentAbilitySource, OutSourceLevel) == 0x000004, "Member 'FortGameplayAbility_GetCurrentAbilitySource::OutSourceLevel' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetCurrentSourceItemDefinition
// 0x0004 (0x0004 - 0x0000)
struct FortGameplayAbility_GetCurrentSourceItemDefinition final
{
public:
	class UFortWorldItemDefinition*               ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetCurrentSourceItemDefinition) == 0x000004, "Wrong alignment on FortGameplayAbility_GetCurrentSourceItemDefinition");
static_assert(sizeof(FortGameplayAbility_GetCurrentSourceItemDefinition) == 0x000004, "Wrong size on FortGameplayAbility_GetCurrentSourceItemDefinition");
static_assert(offsetof(FortGameplayAbility_GetCurrentSourceItemDefinition, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetCurrentSourceItemDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetCurrentSourceWeapon
// 0x0004 (0x0004 - 0x0000)
struct FortGameplayAbility_GetCurrentSourceWeapon final
{
public:
	class AFortWeapon*                            ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetCurrentSourceWeapon) == 0x000004, "Wrong alignment on FortGameplayAbility_GetCurrentSourceWeapon");
static_assert(sizeof(FortGameplayAbility_GetCurrentSourceWeapon) == 0x000004, "Wrong size on FortGameplayAbility_GetCurrentSourceWeapon");
static_assert(offsetof(FortGameplayAbility_GetCurrentSourceWeapon, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetCurrentSourceWeapon::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetCustomAbilitySourceTransform
// 0x0030 (0x0030 - 0x0000)
struct FortGameplayAbility_GetCustomAbilitySourceTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetCustomAbilitySourceTransform) == 0x000010, "Wrong alignment on FortGameplayAbility_GetCustomAbilitySourceTransform");
static_assert(sizeof(FortGameplayAbility_GetCustomAbilitySourceTransform) == 0x000030, "Wrong size on FortGameplayAbility_GetCustomAbilitySourceTransform");
static_assert(offsetof(FortGameplayAbility_GetCustomAbilitySourceTransform, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetCustomAbilitySourceTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetFireLocation
// 0x000C (0x000C - 0x0000)
struct FortGameplayAbility_GetFireLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetFireLocation) == 0x000004, "Wrong alignment on FortGameplayAbility_GetFireLocation");
static_assert(sizeof(FortGameplayAbility_GetFireLocation) == 0x00000C, "Wrong size on FortGameplayAbility_GetFireLocation");
static_assert(offsetof(FortGameplayAbility_GetFireLocation, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetFireLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetFireRotation
// 0x0010 (0x0010 - 0x0000)
struct FortGameplayAbility_GetFireRotation final
{
public:
	bool                                          bApplyLeading;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bApplyInaccuracy;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bApplyClampedMaxYawAngleToFire;                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetFireRotation) == 0x000004, "Wrong alignment on FortGameplayAbility_GetFireRotation");
static_assert(sizeof(FortGameplayAbility_GetFireRotation) == 0x000010, "Wrong size on FortGameplayAbility_GetFireRotation");
static_assert(offsetof(FortGameplayAbility_GetFireRotation, bApplyLeading) == 0x000000, "Member 'FortGameplayAbility_GetFireRotation::bApplyLeading' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetFireRotation, bApplyInaccuracy) == 0x000001, "Member 'FortGameplayAbility_GetFireRotation::bApplyInaccuracy' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetFireRotation, bApplyClampedMaxYawAngleToFire) == 0x000002, "Member 'FortGameplayAbility_GetFireRotation::bApplyClampedMaxYawAngleToFire' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetFireRotation, ReturnValue) == 0x000004, "Member 'FortGameplayAbility_GetFireRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetGameplayEffectContainer
// 0x0074 (0x0074 - 0x0000)
struct FortGameplayAbility_GetGameplayEffectContainer final
{
public:
	struct FGameplayTag                           ApplicationTag;                                    // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainer           ReturnValue;                                       // 0x0008(0x006C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetGameplayEffectContainer) == 0x000004, "Wrong alignment on FortGameplayAbility_GetGameplayEffectContainer");
static_assert(sizeof(FortGameplayAbility_GetGameplayEffectContainer) == 0x000074, "Wrong size on FortGameplayAbility_GetGameplayEffectContainer");
static_assert(offsetof(FortGameplayAbility_GetGameplayEffectContainer, ApplicationTag) == 0x000000, "Member 'FortGameplayAbility_GetGameplayEffectContainer::ApplicationTag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetGameplayEffectContainer, ReturnValue) == 0x000008, "Member 'FortGameplayAbility_GetGameplayEffectContainer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetProjectileInitialValues
// 0x001C (0x001C - 0x0000)
struct FortGameplayAbility_GetProjectileInitialValues final
{
public:
	float                                         outProjectileSpeed;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               outSpawnDirection;                                 // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         outProjectileGravity;                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HomingTarget;                                      // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyInaccuracy;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bApplyClampedMaxYawAngleToFire;                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bApplyLeading;                                     // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_GetProjectileInitialValues) == 0x000004, "Wrong alignment on FortGameplayAbility_GetProjectileInitialValues");
static_assert(sizeof(FortGameplayAbility_GetProjectileInitialValues) == 0x00001C, "Wrong size on FortGameplayAbility_GetProjectileInitialValues");
static_assert(offsetof(FortGameplayAbility_GetProjectileInitialValues, outProjectileSpeed) == 0x000000, "Member 'FortGameplayAbility_GetProjectileInitialValues::outProjectileSpeed' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetProjectileInitialValues, outSpawnDirection) == 0x000004, "Member 'FortGameplayAbility_GetProjectileInitialValues::outSpawnDirection' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetProjectileInitialValues, outProjectileGravity) == 0x000010, "Member 'FortGameplayAbility_GetProjectileInitialValues::outProjectileGravity' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetProjectileInitialValues, HomingTarget) == 0x000014, "Member 'FortGameplayAbility_GetProjectileInitialValues::HomingTarget' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetProjectileInitialValues, bApplyInaccuracy) == 0x000018, "Member 'FortGameplayAbility_GetProjectileInitialValues::bApplyInaccuracy' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetProjectileInitialValues, bApplyClampedMaxYawAngleToFire) == 0x000019, "Member 'FortGameplayAbility_GetProjectileInitialValues::bApplyClampedMaxYawAngleToFire' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetProjectileInitialValues, bApplyLeading) == 0x00001A, "Member 'FortGameplayAbility_GetProjectileInitialValues::bApplyLeading' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetTargetSelectionList
// 0x0024 (0x0024 - 0x0000)
struct FortGameplayAbility_GetTargetSelectionList final
{
public:
	struct FGameplayTag                           ApplicationTag;                                    // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	struct FFortAbilityTargetSelectionList        ReturnValue;                                       // 0x0008(0x001C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetTargetSelectionList) == 0x000004, "Wrong alignment on FortGameplayAbility_GetTargetSelectionList");
static_assert(sizeof(FortGameplayAbility_GetTargetSelectionList) == 0x000024, "Wrong size on FortGameplayAbility_GetTargetSelectionList");
static_assert(offsetof(FortGameplayAbility_GetTargetSelectionList, ApplicationTag) == 0x000000, "Member 'FortGameplayAbility_GetTargetSelectionList::ApplicationTag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_GetTargetSelectionList, ReturnValue) == 0x000008, "Member 'FortGameplayAbility_GetTargetSelectionList::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.GetTooltip
// 0x0004 (0x0004 - 0x0000)
struct FortGameplayAbility_GetTooltip final
{
public:
	TSubclassOf<class UFortTooltip>               ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_GetTooltip) == 0x000004, "Wrong alignment on FortGameplayAbility_GetTooltip");
static_assert(sizeof(FortGameplayAbility_GetTooltip) == 0x000004, "Wrong size on FortGameplayAbility_GetTooltip");
static_assert(offsetof(FortGameplayAbility_GetTooltip, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_GetTooltip::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.IsTargetOutsideOfMaxYawRotation
// 0x0001 (0x0001 - 0x0000)
struct FortGameplayAbility_IsTargetOutsideOfMaxYawRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_IsTargetOutsideOfMaxYawRotation) == 0x000001, "Wrong alignment on FortGameplayAbility_IsTargetOutsideOfMaxYawRotation");
static_assert(sizeof(FortGameplayAbility_IsTargetOutsideOfMaxYawRotation) == 0x000001, "Wrong size on FortGameplayAbility_IsTargetOutsideOfMaxYawRotation");
static_assert(offsetof(FortGameplayAbility_IsTargetOutsideOfMaxYawRotation, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_IsTargetOutsideOfMaxYawRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility.K2_ShouldUseDecoTool
// 0x0038 (0x0038 - 0x0000)
struct FortGameplayAbility_K2_ShouldUseDecoTool final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0034)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbility_K2_ShouldUseDecoTool) == 0x000004, "Wrong alignment on FortGameplayAbility_K2_ShouldUseDecoTool");
static_assert(sizeof(FortGameplayAbility_K2_ShouldUseDecoTool) == 0x000038, "Wrong size on FortGameplayAbility_K2_ShouldUseDecoTool");
static_assert(offsetof(FortGameplayAbility_K2_ShouldUseDecoTool, ActorInfo) == 0x000000, "Member 'FortGameplayAbility_K2_ShouldUseDecoTool::ActorInfo' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_K2_ShouldUseDecoTool, ReturnValue) == 0x000034, "Member 'FortGameplayAbility_K2_ShouldUseDecoTool::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlotGenerator.AddSlot
// 0x0024 (0x0024 - 0x0000)
struct AIHotSpotSlotGenerator_AddSlot final
{
public:
	struct FVector                                RelativeLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UAIHotSpotSlot>             CustomSlotClass;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIHotSpotSlot*                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlotGenerator_AddSlot) == 0x000004, "Wrong alignment on AIHotSpotSlotGenerator_AddSlot");
static_assert(sizeof(AIHotSpotSlotGenerator_AddSlot) == 0x000024, "Wrong size on AIHotSpotSlotGenerator_AddSlot");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, RelativeLocation) == 0x000000, "Member 'AIHotSpotSlotGenerator_AddSlot::RelativeLocation' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, RelativeRotation) == 0x00000C, "Member 'AIHotSpotSlotGenerator_AddSlot::RelativeRotation' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, CustomSlotClass) == 0x000018, "Member 'AIHotSpotSlotGenerator_AddSlot::CustomSlotClass' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, bEnabled) == 0x00001C, "Member 'AIHotSpotSlotGenerator_AddSlot::bEnabled' has a wrong offset!");
static_assert(offsetof(AIHotSpotSlotGenerator_AddSlot, ReturnValue) == 0x000020, "Member 'AIHotSpotSlotGenerator_AddSlot::ReturnValue' has a wrong offset!");

// Function FortniteGame.AIHotSpotSlotGenerator.GetHotSpot
// 0x0004 (0x0004 - 0x0000)
struct AIHotSpotSlotGenerator_GetHotSpot final
{
public:
	class AAIHotSpot*                             ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHotSpotSlotGenerator_GetHotSpot) == 0x000004, "Wrong alignment on AIHotSpotSlotGenerator_GetHotSpot");
static_assert(sizeof(AIHotSpotSlotGenerator_GetHotSpot) == 0x000004, "Wrong size on AIHotSpotSlotGenerator_GetHotSpot");
static_assert(offsetof(AIHotSpotSlotGenerator_GetHotSpot, ReturnValue) == 0x000000, "Member 'AIHotSpotSlotGenerator_GetHotSpot::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCarriedObject.OnRep_HolderInfo
// 0x0024 (0x0024 - 0x0000)
struct FortCarriedObject_OnRep_HolderInfo final
{
public:
	struct FCarriedObjectAttachmentInfo           PreviousInfo;                                      // 0x0000(0x0024)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCarriedObject_OnRep_HolderInfo) == 0x000004, "Wrong alignment on FortCarriedObject_OnRep_HolderInfo");
static_assert(sizeof(FortCarriedObject_OnRep_HolderInfo) == 0x000024, "Wrong size on FortCarriedObject_OnRep_HolderInfo");
static_assert(offsetof(FortCarriedObject_OnRep_HolderInfo, PreviousInfo) == 0x000000, "Member 'FortCarriedObject_OnRep_HolderInfo::PreviousInfo' has a wrong offset!");

// Function FortniteGame.FortCarriedObject.GetHoldingActor
// 0x0004 (0x0004 - 0x0000)
struct FortCarriedObject_GetHoldingActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCarriedObject_GetHoldingActor) == 0x000004, "Wrong alignment on FortCarriedObject_GetHoldingActor");
static_assert(sizeof(FortCarriedObject_GetHoldingActor) == 0x000004, "Wrong size on FortCarriedObject_GetHoldingActor");
static_assert(offsetof(FortCarriedObject_GetHoldingActor, ReturnValue) == 0x000000, "Member 'FortCarriedObject_GetHoldingActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeatherAugment.GetWeatherTags
// 0x0018 (0x0018 - 0x0000)
struct FortWeatherAugment_GetWeatherTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeatherAugment_GetWeatherTags) == 0x000004, "Wrong alignment on FortWeatherAugment_GetWeatherTags");
static_assert(sizeof(FortWeatherAugment_GetWeatherTags) == 0x000018, "Wrong size on FortWeatherAugment_GetWeatherTags");
static_assert(offsetof(FortWeatherAugment_GetWeatherTags, ReturnValue) == 0x000000, "Member 'FortWeatherAugment_GetWeatherTags::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCameraBase.Exhibit
// 0x0004 (0x0004 - 0x0000)
struct FortCameraBase_Exhibit final
{
public:
	class AFortExhibitActor*                      TargetActor;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCameraBase_Exhibit) == 0x000004, "Wrong alignment on FortCameraBase_Exhibit");
static_assert(sizeof(FortCameraBase_Exhibit) == 0x000004, "Wrong size on FortCameraBase_Exhibit");
static_assert(offsetof(FortCameraBase_Exhibit, TargetActor) == 0x000000, "Member 'FortCameraBase_Exhibit::TargetActor' has a wrong offset!");

// Function FortniteGame.FortHomeBaseCamera.SetBuildingFocus
// 0x0004 (0x0004 - 0x0000)
struct FortHomeBaseCamera_SetBuildingFocus final
{
public:
	class UCameraComponent*                       BuildingCameraComponent;                           // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomeBaseCamera_SetBuildingFocus) == 0x000004, "Wrong alignment on FortHomeBaseCamera_SetBuildingFocus");
static_assert(sizeof(FortHomeBaseCamera_SetBuildingFocus) == 0x000004, "Wrong size on FortHomeBaseCamera_SetBuildingFocus");
static_assert(offsetof(FortHomeBaseCamera_SetBuildingFocus, BuildingCameraComponent) == 0x000000, "Member 'FortHomeBaseCamera_SetBuildingFocus::BuildingCameraComponent' has a wrong offset!");

// Function FortniteGame.FortHomeBaseCamera.LimitTo
// 0x001C (0x001C - 0x0000)
struct FortHomeBaseCamera_LimitTo final
{
public:
	struct FVector                                DesiredPosition;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class APostProcessVolume*                     Volume;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomeBaseCamera_LimitTo) == 0x000004, "Wrong alignment on FortHomeBaseCamera_LimitTo");
static_assert(sizeof(FortHomeBaseCamera_LimitTo) == 0x00001C, "Wrong size on FortHomeBaseCamera_LimitTo");
static_assert(offsetof(FortHomeBaseCamera_LimitTo, DesiredPosition) == 0x000000, "Member 'FortHomeBaseCamera_LimitTo::DesiredPosition' has a wrong offset!");
static_assert(offsetof(FortHomeBaseCamera_LimitTo, Volume) == 0x00000C, "Member 'FortHomeBaseCamera_LimitTo::Volume' has a wrong offset!");
static_assert(offsetof(FortHomeBaseCamera_LimitTo, ReturnValue) == 0x000010, "Member 'FortHomeBaseCamera_LimitTo::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.GetBannerColor
// 0x0014 (0x0014 - 0x0000)
struct MyTownLibrary_GetBannerColor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownLibrary_GetBannerColor) == 0x000004, "Wrong alignment on MyTownLibrary_GetBannerColor");
static_assert(sizeof(MyTownLibrary_GetBannerColor) == 0x000014, "Wrong size on MyTownLibrary_GetBannerColor");
static_assert(offsetof(MyTownLibrary_GetBannerColor, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_GetBannerColor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_GetBannerColor, ReturnValue) == 0x000004, "Member 'MyTownLibrary_GetBannerColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.GetBannerPattern
// 0x0008 (0x0008 - 0x0000)
struct MyTownLibrary_GetBannerPattern final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownLibrary_GetBannerPattern) == 0x000004, "Wrong alignment on MyTownLibrary_GetBannerPattern");
static_assert(sizeof(MyTownLibrary_GetBannerPattern) == 0x000008, "Wrong size on MyTownLibrary_GetBannerPattern");
static_assert(offsetof(MyTownLibrary_GetBannerPattern, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_GetBannerPattern::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_GetBannerPattern, ReturnValue) == 0x000004, "Member 'MyTownLibrary_GetBannerPattern::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.GetBuildingActor
// 0x0014 (0x0014 - 0x0000)
struct MyTownLibrary_GetBuildingActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildingTemplateId;                                // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMyTownBuildingActor*                   ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownLibrary_GetBuildingActor) == 0x000004, "Wrong alignment on MyTownLibrary_GetBuildingActor");
static_assert(sizeof(MyTownLibrary_GetBuildingActor) == 0x000014, "Wrong size on MyTownLibrary_GetBuildingActor");
static_assert(offsetof(MyTownLibrary_GetBuildingActor, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_GetBuildingActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_GetBuildingActor, BuildingTemplateId) == 0x000004, "Member 'MyTownLibrary_GetBuildingActor::BuildingTemplateId' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_GetBuildingActor, ReturnValue) == 0x000010, "Member 'MyTownLibrary_GetBuildingActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.GetBuildingDefinition
// 0x0014 (0x0014 - 0x0000)
struct MyTownLibrary_GetBuildingDefinition final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildingTemplateId;                                // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMyTownBuildingDefinitionData*          ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownLibrary_GetBuildingDefinition) == 0x000004, "Wrong alignment on MyTownLibrary_GetBuildingDefinition");
static_assert(sizeof(MyTownLibrary_GetBuildingDefinition) == 0x000014, "Wrong size on MyTownLibrary_GetBuildingDefinition");
static_assert(offsetof(MyTownLibrary_GetBuildingDefinition, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_GetBuildingDefinition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_GetBuildingDefinition, BuildingTemplateId) == 0x000004, "Member 'MyTownLibrary_GetBuildingDefinition::BuildingTemplateId' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_GetBuildingDefinition, ReturnValue) == 0x000010, "Member 'MyTownLibrary_GetBuildingDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.GetBuildingLevel
// 0x0014 (0x0014 - 0x0000)
struct MyTownLibrary_GetBuildingLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildingTemplateId;                                // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownLibrary_GetBuildingLevel) == 0x000004, "Wrong alignment on MyTownLibrary_GetBuildingLevel");
static_assert(sizeof(MyTownLibrary_GetBuildingLevel) == 0x000014, "Wrong size on MyTownLibrary_GetBuildingLevel");
static_assert(offsetof(MyTownLibrary_GetBuildingLevel, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_GetBuildingLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_GetBuildingLevel, BuildingTemplateId) == 0x000004, "Member 'MyTownLibrary_GetBuildingLevel::BuildingTemplateId' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_GetBuildingLevel, ReturnValue) == 0x000010, "Member 'MyTownLibrary_GetBuildingLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.GetBuildingState
// 0x0014 (0x0014 - 0x0000)
struct MyTownLibrary_GetBuildingState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildingTemplateId;                                // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMyTownBuildingState                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyTownLibrary_GetBuildingState) == 0x000004, "Wrong alignment on MyTownLibrary_GetBuildingState");
static_assert(sizeof(MyTownLibrary_GetBuildingState) == 0x000014, "Wrong size on MyTownLibrary_GetBuildingState");
static_assert(offsetof(MyTownLibrary_GetBuildingState, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_GetBuildingState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_GetBuildingState, BuildingTemplateId) == 0x000004, "Member 'MyTownLibrary_GetBuildingState::BuildingTemplateId' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_GetBuildingState, ReturnValue) == 0x000010, "Member 'MyTownLibrary_GetBuildingState::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.GetMyTownData
// 0x0008 (0x0008 - 0x0000)
struct MyTownLibrary_GetMyTownData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMyTownData*                            ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownLibrary_GetMyTownData) == 0x000004, "Wrong alignment on MyTownLibrary_GetMyTownData");
static_assert(sizeof(MyTownLibrary_GetMyTownData) == 0x000008, "Wrong size on MyTownLibrary_GetMyTownData");
static_assert(offsetof(MyTownLibrary_GetMyTownData, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_GetMyTownData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_GetMyTownData, ReturnValue) == 0x000004, "Member 'MyTownLibrary_GetMyTownData::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.GetMyTownName
// 0x0010 (0x0010 - 0x0000)
struct MyTownLibrary_GetMyTownName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownLibrary_GetMyTownName) == 0x000004, "Wrong alignment on MyTownLibrary_GetMyTownName");
static_assert(sizeof(MyTownLibrary_GetMyTownName) == 0x000010, "Wrong size on MyTownLibrary_GetMyTownName");
static_assert(offsetof(MyTownLibrary_GetMyTownName, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_GetMyTownName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_GetMyTownName, ReturnValue) == 0x000004, "Member 'MyTownLibrary_GetMyTownName::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.GetRoadsInfo
// 0x0010 (0x0010 - 0x0000)
struct MyTownLibrary_GetRoadsInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMyTownRoadData3D>              ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownLibrary_GetRoadsInfo) == 0x000004, "Wrong alignment on MyTownLibrary_GetRoadsInfo");
static_assert(sizeof(MyTownLibrary_GetRoadsInfo) == 0x000010, "Wrong size on MyTownLibrary_GetRoadsInfo");
static_assert(offsetof(MyTownLibrary_GetRoadsInfo, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_GetRoadsInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_GetRoadsInfo, ReturnValue) == 0x000004, "Member 'MyTownLibrary_GetRoadsInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.IsKeepAvailable
// 0x0008 (0x0008 - 0x0000)
struct MyTownLibrary_IsKeepAvailable final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyTownLibrary_IsKeepAvailable) == 0x000004, "Wrong alignment on MyTownLibrary_IsKeepAvailable");
static_assert(sizeof(MyTownLibrary_IsKeepAvailable) == 0x000008, "Wrong size on MyTownLibrary_IsKeepAvailable");
static_assert(offsetof(MyTownLibrary_IsKeepAvailable, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_IsKeepAvailable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_IsKeepAvailable, ReturnValue) == 0x000004, "Member 'MyTownLibrary_IsKeepAvailable::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.IsManorAvailable
// 0x0008 (0x0008 - 0x0000)
struct MyTownLibrary_IsManorAvailable final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyTownLibrary_IsManorAvailable) == 0x000004, "Wrong alignment on MyTownLibrary_IsManorAvailable");
static_assert(sizeof(MyTownLibrary_IsManorAvailable) == 0x000008, "Wrong size on MyTownLibrary_IsManorAvailable");
static_assert(offsetof(MyTownLibrary_IsManorAvailable, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_IsManorAvailable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_IsManorAvailable, ReturnValue) == 0x000004, "Member 'MyTownLibrary_IsManorAvailable::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.IsShowingFriendsHomeBase
// 0x0008 (0x0008 - 0x0000)
struct MyTownLibrary_IsShowingFriendsHomeBase final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyTownLibrary_IsShowingFriendsHomeBase) == 0x000004, "Wrong alignment on MyTownLibrary_IsShowingFriendsHomeBase");
static_assert(sizeof(MyTownLibrary_IsShowingFriendsHomeBase) == 0x000008, "Wrong size on MyTownLibrary_IsShowingFriendsHomeBase");
static_assert(offsetof(MyTownLibrary_IsShowingFriendsHomeBase, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_IsShowingFriendsHomeBase::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_IsShowingFriendsHomeBase, ReturnValue) == 0x000004, "Member 'MyTownLibrary_IsShowingFriendsHomeBase::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.RegisterSlotCamera
// 0x000C (0x000C - 0x0000)
struct MyTownLibrary_RegisterSlotCamera final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapSlotId;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       InCameraComponent;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownLibrary_RegisterSlotCamera) == 0x000004, "Wrong alignment on MyTownLibrary_RegisterSlotCamera");
static_assert(sizeof(MyTownLibrary_RegisterSlotCamera) == 0x00000C, "Wrong size on MyTownLibrary_RegisterSlotCamera");
static_assert(offsetof(MyTownLibrary_RegisterSlotCamera, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_RegisterSlotCamera::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_RegisterSlotCamera, MapSlotId) == 0x000004, "Member 'MyTownLibrary_RegisterSlotCamera::MapSlotId' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_RegisterSlotCamera, InCameraComponent) == 0x000008, "Member 'MyTownLibrary_RegisterSlotCamera::InCameraComponent' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.ReinitializeManagerData
// 0x0004 (0x0004 - 0x0000)
struct MyTownLibrary_ReinitializeManagerData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownLibrary_ReinitializeManagerData) == 0x000004, "Wrong alignment on MyTownLibrary_ReinitializeManagerData");
static_assert(sizeof(MyTownLibrary_ReinitializeManagerData) == 0x000004, "Wrong size on MyTownLibrary_ReinitializeManagerData");
static_assert(offsetof(MyTownLibrary_ReinitializeManagerData, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_ReinitializeManagerData::WorldContextObject' has a wrong offset!");

// Function FortniteGame.MyTownLibrary.SetInputEnabled
// 0x0008 (0x0008 - 0x0000)
struct MyTownLibrary_SetInputEnabled final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyTownLibrary_SetInputEnabled) == 0x000004, "Wrong alignment on MyTownLibrary_SetInputEnabled");
static_assert(sizeof(MyTownLibrary_SetInputEnabled) == 0x000008, "Wrong size on MyTownLibrary_SetInputEnabled");
static_assert(offsetof(MyTownLibrary_SetInputEnabled, WorldContextObject) == 0x000000, "Member 'MyTownLibrary_SetInputEnabled::WorldContextObject' has a wrong offset!");
static_assert(offsetof(MyTownLibrary_SetInputEnabled, bEnable) == 0x000004, "Member 'MyTownLibrary_SetInputEnabled::bEnable' has a wrong offset!");

// Function FortniteGame.FortClientNotification.PlayFeedbackLine
// 0x0020 (0x0020 - 0x0000)
struct FortClientNotification_PlayFeedbackLine final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0004(0x0014)(Parm, NativeAccessSpecifierPublic)
	class USoundBase*                             Audio;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideDelay;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientNotification_PlayFeedbackLine) == 0x000004, "Wrong alignment on FortClientNotification_PlayFeedbackLine");
static_assert(sizeof(FortClientNotification_PlayFeedbackLine) == 0x000020, "Wrong size on FortClientNotification_PlayFeedbackLine");
static_assert(offsetof(FortClientNotification_PlayFeedbackLine, WorldContextObject) == 0x000000, "Member 'FortClientNotification_PlayFeedbackLine::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortClientNotification_PlayFeedbackLine, LatentInfo) == 0x000004, "Member 'FortClientNotification_PlayFeedbackLine::LatentInfo' has a wrong offset!");
static_assert(offsetof(FortClientNotification_PlayFeedbackLine, Audio) == 0x000018, "Member 'FortClientNotification_PlayFeedbackLine::Audio' has a wrong offset!");
static_assert(offsetof(FortClientNotification_PlayFeedbackLine, OverrideDelay) == 0x00001C, "Member 'FortClientNotification_PlayFeedbackLine::OverrideDelay' has a wrong offset!");

// Function FortniteGame.FortClientNotification.SetDisplayText
// 0x0010 (0x0010 - 0x0000)
struct FortClientNotification_SetDisplayText final
{
public:
	class FText                                   DisplayText;                                       // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortClientNotification_SetDisplayText) == 0x000004, "Wrong alignment on FortClientNotification_SetDisplayText");
static_assert(sizeof(FortClientNotification_SetDisplayText) == 0x000010, "Wrong size on FortClientNotification_SetDisplayText");
static_assert(offsetof(FortClientNotification_SetDisplayText, DisplayText) == 0x000000, "Member 'FortClientNotification_SetDisplayText::DisplayText' has a wrong offset!");
static_assert(offsetof(FortClientNotification_SetDisplayText, bForce) == 0x00000C, "Member 'FortClientNotification_SetDisplayText::bForce' has a wrong offset!");

// Function FortniteGame.FortClientNotification.SetupDelayedStop
// 0x0004 (0x0004 - 0x0000)
struct FortClientNotification_SetupDelayedStop final
{
public:
	float                                         KillTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientNotification_SetupDelayedStop) == 0x000004, "Wrong alignment on FortClientNotification_SetupDelayedStop");
static_assert(sizeof(FortClientNotification_SetupDelayedStop) == 0x000004, "Wrong size on FortClientNotification_SetupDelayedStop");
static_assert(offsetof(FortClientNotification_SetupDelayedStop, KillTime) == 0x000000, "Member 'FortClientNotification_SetupDelayedStop::KillTime' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.EnterOutpost
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_EnterOutpost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_EnterOutpost) == 0x000001, "Wrong alignment on FortMatchmakingContext_EnterOutpost");
static_assert(sizeof(FortMatchmakingContext_EnterOutpost) == 0x000001, "Wrong size on FortMatchmakingContext_EnterOutpost");
static_assert(offsetof(FortMatchmakingContext_EnterOutpost, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_EnterOutpost::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.GetLobbyWaitForPlayersTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct FortMatchmakingContext_GetLobbyWaitForPlayersTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_GetLobbyWaitForPlayersTimeRemaining) == 0x000004, "Wrong alignment on FortMatchmakingContext_GetLobbyWaitForPlayersTimeRemaining");
static_assert(sizeof(FortMatchmakingContext_GetLobbyWaitForPlayersTimeRemaining) == 0x000004, "Wrong size on FortMatchmakingContext_GetLobbyWaitForPlayersTimeRemaining");
static_assert(offsetof(FortMatchmakingContext_GetLobbyWaitForPlayersTimeRemaining, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_GetLobbyWaitForPlayersTimeRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.IsConnectedToGame
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_IsConnectedToGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_IsConnectedToGame) == 0x000001, "Wrong alignment on FortMatchmakingContext_IsConnectedToGame");
static_assert(sizeof(FortMatchmakingContext_IsConnectedToGame) == 0x000001, "Wrong size on FortMatchmakingContext_IsConnectedToGame");
static_assert(offsetof(FortMatchmakingContext_IsConnectedToGame, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_IsConnectedToGame::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.IsWorldRecordLoaded
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_IsWorldRecordLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_IsWorldRecordLoaded) == 0x000001, "Wrong alignment on FortMatchmakingContext_IsWorldRecordLoaded");
static_assert(sizeof(FortMatchmakingContext_IsWorldRecordLoaded) == 0x000001, "Wrong size on FortMatchmakingContext_IsWorldRecordLoaded");
static_assert(offsetof(FortMatchmakingContext_IsWorldRecordLoaded, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_IsWorldRecordLoaded::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.StartCriticalMission
// 0x0008 (0x0008 - 0x0000)
struct FortMatchmakingContext_StartCriticalMission final
{
public:
	int32                                         MinMissionPower;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxMissionPower;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_StartCriticalMission) == 0x000004, "Wrong alignment on FortMatchmakingContext_StartCriticalMission");
static_assert(sizeof(FortMatchmakingContext_StartCriticalMission) == 0x000008, "Wrong size on FortMatchmakingContext_StartCriticalMission");
static_assert(offsetof(FortMatchmakingContext_StartCriticalMission, MinMissionPower) == 0x000000, "Member 'FortMatchmakingContext_StartCriticalMission::MinMissionPower' has a wrong offset!");
static_assert(offsetof(FortMatchmakingContext_StartCriticalMission, MaxMissionPower) == 0x000004, "Member 'FortMatchmakingContext_StartCriticalMission::MaxMissionPower' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.IsInLobby
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_IsInLobby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_IsInLobby) == 0x000001, "Wrong alignment on FortMatchmakingContext_IsInLobby");
static_assert(sizeof(FortMatchmakingContext_IsInLobby) == 0x000001, "Wrong size on FortMatchmakingContext_IsInLobby");
static_assert(offsetof(FortMatchmakingContext_IsInLobby, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_IsInLobby::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMatchmakingContext.IsOutpostPermitted
// 0x0001 (0x0001 - 0x0000)
struct FortMatchmakingContext_IsOutpostPermitted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMatchmakingContext_IsOutpostPermitted) == 0x000001, "Wrong alignment on FortMatchmakingContext_IsOutpostPermitted");
static_assert(sizeof(FortMatchmakingContext_IsOutpostPermitted) == 0x000001, "Wrong size on FortMatchmakingContext_IsOutpostPermitted");
static_assert(offsetof(FortMatchmakingContext_IsOutpostPermitted, ReturnValue) == 0x000000, "Member 'FortMatchmakingContext_IsOutpostPermitted::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ActivateSlot
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_ActivateSlot final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcivateDelay;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ActivateSlot) == 0x000004, "Wrong alignment on FortPlayerController_ActivateSlot");
static_assert(sizeof(FortPlayerController_ActivateSlot) == 0x00000C, "Wrong size on FortPlayerController_ActivateSlot");
static_assert(offsetof(FortPlayerController_ActivateSlot, InQuickBar) == 0x000000, "Member 'FortPlayerController_ActivateSlot::InQuickBar' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ActivateSlot, Slot) == 0x000004, "Member 'FortPlayerController_ActivateSlot::Slot' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ActivateSlot, AcivateDelay) == 0x000008, "Member 'FortPlayerController_ActivateSlot::AcivateDelay' has a wrong offset!");

// Function FortniteGame.FortPlayerController.Cheat
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_Cheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_Cheat) == 0x000004, "Wrong alignment on FortPlayerController_Cheat");
static_assert(sizeof(FortPlayerController_Cheat) == 0x00000C, "Wrong size on FortPlayerController_Cheat");
static_assert(offsetof(FortPlayerController_Cheat, Msg) == 0x000000, "Member 'FortPlayerController_Cheat::Msg' has a wrong offset!");

// Function FortniteGame.FortPlayerController.CheatAll
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_CheatAll final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_CheatAll) == 0x000004, "Wrong alignment on FortPlayerController_CheatAll");
static_assert(sizeof(FortPlayerController_CheatAll) == 0x00000C, "Wrong size on FortPlayerController_CheatAll");
static_assert(offsetof(FortPlayerController_CheatAll, Msg) == 0x000000, "Member 'FortPlayerController_CheatAll::Msg' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientAddHeroSpecialization
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_ClientAddHeroSpecialization final
{
public:
	class UFortHeroSpecialization*                NewSpecialization;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientAddHeroSpecialization) == 0x000004, "Wrong alignment on FortPlayerController_ClientAddHeroSpecialization");
static_assert(sizeof(FortPlayerController_ClientAddHeroSpecialization) == 0x000004, "Wrong size on FortPlayerController_ClientAddHeroSpecialization");
static_assert(offsetof(FortPlayerController_ClientAddHeroSpecialization, NewSpecialization) == 0x000000, "Member 'FortPlayerController_ClientAddHeroSpecialization::NewSpecialization' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientDrawAttentionToUI
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerController_ClientDrawAttentionToUI final
{
public:
	struct FGuid                                  MissionGuid;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientDrawAttentionToUI) == 0x000004, "Wrong alignment on FortPlayerController_ClientDrawAttentionToUI");
static_assert(sizeof(FortPlayerController_ClientDrawAttentionToUI) == 0x000028, "Wrong size on FortPlayerController_ClientDrawAttentionToUI");
static_assert(offsetof(FortPlayerController_ClientDrawAttentionToUI, MissionGuid) == 0x000000, "Member 'FortPlayerController_ClientDrawAttentionToUI::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientDrawAttentionToUI, ObjectiveHandle) == 0x000010, "Member 'FortPlayerController_ClientDrawAttentionToUI::ObjectiveHandle' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientExecuteInventoryItem
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerController_ClientExecuteInventoryItem final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientExecuteInventoryItem) == 0x000004, "Wrong alignment on FortPlayerController_ClientExecuteInventoryItem");
static_assert(sizeof(FortPlayerController_ClientExecuteInventoryItem) == 0x000014, "Wrong size on FortPlayerController_ClientExecuteInventoryItem");
static_assert(offsetof(FortPlayerController_ClientExecuteInventoryItem, ItemGuid) == 0x000000, "Member 'FortPlayerController_ClientExecuteInventoryItem::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientExecuteInventoryItem, Delay) == 0x000010, "Member 'FortPlayerController_ClientExecuteInventoryItem::Delay' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientGivePlayerLocalAccountItem
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ClientGivePlayerLocalAccountItem final
{
public:
	class UFortAccountItemDefinition*             ItemDefinition;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientGivePlayerLocalAccountItem) == 0x000004, "Wrong alignment on FortPlayerController_ClientGivePlayerLocalAccountItem");
static_assert(sizeof(FortPlayerController_ClientGivePlayerLocalAccountItem) == 0x000008, "Wrong size on FortPlayerController_ClientGivePlayerLocalAccountItem");
static_assert(offsetof(FortPlayerController_ClientGivePlayerLocalAccountItem, ItemDefinition) == 0x000000, "Member 'FortPlayerController_ClientGivePlayerLocalAccountItem::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientGivePlayerLocalAccountItem, Count) == 0x000004, "Member 'FortPlayerController_ClientGivePlayerLocalAccountItem::Count' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientHandleNotification
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ClientHandleNotification final
{
public:
	class FString                                 TypeStr;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PayloadStr;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientHandleNotification) == 0x000004, "Wrong alignment on FortPlayerController_ClientHandleNotification");
static_assert(sizeof(FortPlayerController_ClientHandleNotification) == 0x000018, "Wrong size on FortPlayerController_ClientHandleNotification");
static_assert(offsetof(FortPlayerController_ClientHandleNotification, TypeStr) == 0x000000, "Member 'FortPlayerController_ClientHandleNotification::TypeStr' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientHandleNotification, PayloadStr) == 0x00000C, "Member 'FortPlayerController_ClientHandleNotification::PayloadStr' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientHideTutorialWidget
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ClientHideTutorialWidget final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientHideTutorialWidget) == 0x000004, "Wrong alignment on FortPlayerController_ClientHideTutorialWidget");
static_assert(sizeof(FortPlayerController_ClientHideTutorialWidget) == 0x000008, "Wrong size on FortPlayerController_ClientHideTutorialWidget");
static_assert(offsetof(FortPlayerController_ClientHideTutorialWidget, WidgetName) == 0x000000, "Member 'FortPlayerController_ClientHideTutorialWidget::WidgetName' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientOpenChoiceUI
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerController_ClientOpenChoiceUI final
{
public:
	struct FChoiceData                            ChoiceItems;                                       // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientOpenChoiceUI) == 0x000004, "Wrong alignment on FortPlayerController_ClientOpenChoiceUI");
static_assert(sizeof(FortPlayerController_ClientOpenChoiceUI) == 0x000020, "Wrong size on FortPlayerController_ClientOpenChoiceUI");
static_assert(offsetof(FortPlayerController_ClientOpenChoiceUI, ChoiceItems) == 0x000000, "Member 'FortPlayerController_ClientOpenChoiceUI::ChoiceItems' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientPingMinimap
// 0x001C (0x001C - 0x0000)
struct FortPlayerController_ClientPingMinimap final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           PingColor;                                         // 0x000C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientPingMinimap) == 0x000004, "Wrong alignment on FortPlayerController_ClientPingMinimap");
static_assert(sizeof(FortPlayerController_ClientPingMinimap) == 0x00001C, "Wrong size on FortPlayerController_ClientPingMinimap");
static_assert(offsetof(FortPlayerController_ClientPingMinimap, WorldLocation) == 0x000000, "Member 'FortPlayerController_ClientPingMinimap::WorldLocation' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientPingMinimap, PingColor) == 0x00000C, "Member 'FortPlayerController_ClientPingMinimap::PingColor' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientReadyCheckComplete
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ClientReadyCheckComplete final
{
public:
	bool                                          bPassed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientReadyCheckComplete) == 0x000001, "Wrong alignment on FortPlayerController_ClientReadyCheckComplete");
static_assert(sizeof(FortPlayerController_ClientReadyCheckComplete) == 0x000001, "Wrong size on FortPlayerController_ClientReadyCheckComplete");
static_assert(offsetof(FortPlayerController_ClientReadyCheckComplete, bPassed) == 0x000000, "Member 'FortPlayerController_ClientReadyCheckComplete::bPassed' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientRequestReadyCheck
// 0x0024 (0x0024 - 0x0000)
struct FortPlayerController_ClientRequestReadyCheck final
{
public:
	class FText                                   QueryText;                                         // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   YesText;                                           // 0x000C(0x000C)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   NoText;                                            // 0x0018(0x000C)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientRequestReadyCheck) == 0x000004, "Wrong alignment on FortPlayerController_ClientRequestReadyCheck");
static_assert(sizeof(FortPlayerController_ClientRequestReadyCheck) == 0x000024, "Wrong size on FortPlayerController_ClientRequestReadyCheck");
static_assert(offsetof(FortPlayerController_ClientRequestReadyCheck, QueryText) == 0x000000, "Member 'FortPlayerController_ClientRequestReadyCheck::QueryText' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientRequestReadyCheck, YesText) == 0x00000C, "Member 'FortPlayerController_ClientRequestReadyCheck::YesText' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientRequestReadyCheck, NoText) == 0x000018, "Member 'FortPlayerController_ClientRequestReadyCheck::NoText' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientSendClientNotification
// 0x0114 (0x0114 - 0x0000)
struct FortPlayerController_ClientSendClientNotification final
{
public:
	struct FFortClientNotificationData            NewClientNotification;                             // 0x0000(0x0114)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientSendClientNotification) == 0x000004, "Wrong alignment on FortPlayerController_ClientSendClientNotification");
static_assert(sizeof(FortPlayerController_ClientSendClientNotification) == 0x000114, "Wrong size on FortPlayerController_ClientSendClientNotification");
static_assert(offsetof(FortPlayerController_ClientSendClientNotification, NewClientNotification) == 0x000000, "Member 'FortPlayerController_ClientSendClientNotification::NewClientNotification' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientSendEventNotification
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ClientSendEventNotification final
{
public:
	class FName                                   NotificationName;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          NotificationParameter;                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveIfActive;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ClientSendEventNotification) == 0x000004, "Wrong alignment on FortPlayerController_ClientSendEventNotification");
static_assert(sizeof(FortPlayerController_ClientSendEventNotification) == 0x000010, "Wrong size on FortPlayerController_ClientSendEventNotification");
static_assert(offsetof(FortPlayerController_ClientSendEventNotification, NotificationName) == 0x000000, "Member 'FortPlayerController_ClientSendEventNotification::NotificationName' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientSendEventNotification, NotificationParameter) == 0x000008, "Member 'FortPlayerController_ClientSendEventNotification::NotificationParameter' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientSendEventNotification, bRemoveIfActive) == 0x00000C, "Member 'FortPlayerController_ClientSendEventNotification::bRemoveIfActive' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientSendTutorialNotification
// 0x0144 (0x0144 - 0x0000)
struct FortPlayerController_ClientSendTutorialNotification final
{
public:
	struct FFortTutorialNotificationData          NewTutorialNotification;                           // 0x0000(0x0144)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientSendTutorialNotification) == 0x000004, "Wrong alignment on FortPlayerController_ClientSendTutorialNotification");
static_assert(sizeof(FortPlayerController_ClientSendTutorialNotification) == 0x000144, "Wrong size on FortPlayerController_ClientSendTutorialNotification");
static_assert(offsetof(FortPlayerController_ClientSendTutorialNotification, NewTutorialNotification) == 0x000000, "Member 'FortPlayerController_ClientSendTutorialNotification::NewTutorialNotification' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientSetActionMappingEnabled
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_ClientSetActionMappingEnabled final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ClientSetActionMappingEnabled) == 0x000004, "Wrong alignment on FortPlayerController_ClientSetActionMappingEnabled");
static_assert(sizeof(FortPlayerController_ClientSetActionMappingEnabled) == 0x00000C, "Wrong size on FortPlayerController_ClientSetActionMappingEnabled");
static_assert(offsetof(FortPlayerController_ClientSetActionMappingEnabled, ActionName) == 0x000000, "Member 'FortPlayerController_ClientSetActionMappingEnabled::ActionName' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientSetActionMappingEnabled, bEnabled) == 0x000008, "Member 'FortPlayerController_ClientSetActionMappingEnabled::bEnabled' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientSetInviteFlags
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerController_ClientSetInviteFlags final
{
public:
	struct FJoinabilitySettings                   Settings;                                          // 0x0000(0x0014)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientSetInviteFlags) == 0x000004, "Wrong alignment on FortPlayerController_ClientSetInviteFlags");
static_assert(sizeof(FortPlayerController_ClientSetInviteFlags) == 0x000014, "Wrong size on FortPlayerController_ClientSetInviteFlags");
static_assert(offsetof(FortPlayerController_ClientSetInviteFlags, Settings) == 0x000000, "Member 'FortPlayerController_ClientSetInviteFlags::Settings' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientSetSpectatorCamera
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ClientSetSpectatorCamera final
{
public:
	struct FVector                                CameraLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientSetSpectatorCamera) == 0x000004, "Wrong alignment on FortPlayerController_ClientSetSpectatorCamera");
static_assert(sizeof(FortPlayerController_ClientSetSpectatorCamera) == 0x000018, "Wrong size on FortPlayerController_ClientSetSpectatorCamera");
static_assert(offsetof(FortPlayerController_ClientSetSpectatorCamera, CameraLocation) == 0x000000, "Member 'FortPlayerController_ClientSetSpectatorCamera::CameraLocation' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientSetSpectatorCamera, CameraRotation) == 0x00000C, "Member 'FortPlayerController_ClientSetSpectatorCamera::CameraRotation' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientStayWithParty
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ClientStayWithParty final
{
public:
	bool                                          bStayWithParty;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientStayWithParty) == 0x000001, "Wrong alignment on FortPlayerController_ClientStayWithParty");
static_assert(sizeof(FortPlayerController_ClientStayWithParty) == 0x000001, "Wrong size on FortPlayerController_ClientStayWithParty");
static_assert(offsetof(FortPlayerController_ClientStayWithParty, bStayWithParty) == 0x000000, "Member 'FortPlayerController_ClientStayWithParty::bStayWithParty' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientStopUIFeedbackEvent
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ClientStopUIFeedbackEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientStopUIFeedbackEvent) == 0x000004, "Wrong alignment on FortPlayerController_ClientStopUIFeedbackEvent");
static_assert(sizeof(FortPlayerController_ClientStopUIFeedbackEvent) == 0x000008, "Wrong size on FortPlayerController_ClientStopUIFeedbackEvent");
static_assert(offsetof(FortPlayerController_ClientStopUIFeedbackEvent, EventName) == 0x000000, "Member 'FortPlayerController_ClientStopUIFeedbackEvent::EventName' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientTriggerUIFeedbackEvent
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ClientTriggerUIFeedbackEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientTriggerUIFeedbackEvent) == 0x000004, "Wrong alignment on FortPlayerController_ClientTriggerUIFeedbackEvent");
static_assert(sizeof(FortPlayerController_ClientTriggerUIFeedbackEvent) == 0x000008, "Wrong size on FortPlayerController_ClientTriggerUIFeedbackEvent");
static_assert(offsetof(FortPlayerController_ClientTriggerUIFeedbackEvent, EventName) == 0x000000, "Member 'FortPlayerController_ClientTriggerUIFeedbackEvent::EventName' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientUnhideTutorialWidget
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ClientUnhideTutorialWidget final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientUnhideTutorialWidget) == 0x000004, "Wrong alignment on FortPlayerController_ClientUnhideTutorialWidget");
static_assert(sizeof(FortPlayerController_ClientUnhideTutorialWidget) == 0x000008, "Wrong size on FortPlayerController_ClientUnhideTutorialWidget");
static_assert(offsetof(FortPlayerController_ClientUnhideTutorialWidget, WidgetName) == 0x000000, "Member 'FortPlayerController_ClientUnhideTutorialWidget::WidgetName' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientUpdateRichPresence
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerController_ClientUpdateRichPresence final
{
public:
	ERichPresenceStateChange                      RichPresenceChange;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImportant;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientUpdateRichPresence) == 0x000001, "Wrong alignment on FortPlayerController_ClientUpdateRichPresence");
static_assert(sizeof(FortPlayerController_ClientUpdateRichPresence) == 0x000002, "Wrong size on FortPlayerController_ClientUpdateRichPresence");
static_assert(offsetof(FortPlayerController_ClientUpdateRichPresence, RichPresenceChange) == 0x000000, "Member 'FortPlayerController_ClientUpdateRichPresence::RichPresenceChange' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientUpdateRichPresence, bImportant) == 0x000001, "Member 'FortPlayerController_ClientUpdateRichPresence::bImportant' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ClientZoneSay
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ClientZoneSay final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ClientZoneSay) == 0x000004, "Wrong alignment on FortPlayerController_ClientZoneSay");
static_assert(sizeof(FortPlayerController_ClientZoneSay) == 0x000018, "Wrong size on FortPlayerController_ClientZoneSay");
static_assert(offsetof(FortPlayerController_ClientZoneSay, PlayerName) == 0x000000, "Member 'FortPlayerController_ClientZoneSay::PlayerName' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ClientZoneSay, Message) == 0x00000C, "Member 'FortPlayerController_ClientZoneSay::Message' has a wrong offset!");

// Function FortniteGame.FortPlayerController.Emote
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_Emote final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_Emote) == 0x000004, "Wrong alignment on FortPlayerController_Emote");
static_assert(sizeof(FortPlayerController_Emote) == 0x00000C, "Wrong size on FortPlayerController_Emote");
static_assert(offsetof(FortPlayerController_Emote, Msg) == 0x000000, "Member 'FortPlayerController_Emote::Msg' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ForceUpdateQuickbar
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ForceUpdateQuickbar final
{
public:
	EFortQuickBars                                QuickbarToRefresh;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ForceUpdateQuickbar) == 0x000001, "Wrong alignment on FortPlayerController_ForceUpdateQuickbar");
static_assert(sizeof(FortPlayerController_ForceUpdateQuickbar) == 0x000001, "Wrong size on FortPlayerController_ForceUpdateQuickbar");
static_assert(offsetof(FortPlayerController_ForceUpdateQuickbar, QuickbarToRefresh) == 0x000000, "Member 'FortPlayerController_ForceUpdateQuickbar::QuickbarToRefresh' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetAIDirectorDataManager
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_GetAIDirectorDataManager final
{
public:
	class AFortAIDirectorDataManager*             ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetAIDirectorDataManager) == 0x000004, "Wrong alignment on FortPlayerController_GetAIDirectorDataManager");
static_assert(sizeof(FortPlayerController_GetAIDirectorDataManager) == 0x000004, "Wrong size on FortPlayerController_GetAIDirectorDataManager");
static_assert(offsetof(FortPlayerController_GetAIDirectorDataManager, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetAIDirectorDataManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GivePlayerAmmo
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_GivePlayerAmmo final
{
public:
	int32                                         AmmoCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GivePlayerAmmo) == 0x000004, "Wrong alignment on FortPlayerController_GivePlayerAmmo");
static_assert(sizeof(FortPlayerController_GivePlayerAmmo) == 0x000004, "Wrong size on FortPlayerController_GivePlayerAmmo");
static_assert(offsetof(FortPlayerController_GivePlayerAmmo, AmmoCount) == 0x000000, "Member 'FortPlayerController_GivePlayerAmmo::AmmoCount' has a wrong offset!");

// Function FortniteGame.FortPlayerController.LocalOnBlueprintEdit
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_LocalOnBlueprintEdit final
{
public:
	class ABuildingSMActor*                       EditedActor;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_LocalOnBlueprintEdit) == 0x000004, "Wrong alignment on FortPlayerController_LocalOnBlueprintEdit");
static_assert(sizeof(FortPlayerController_LocalOnBlueprintEdit) == 0x000004, "Wrong size on FortPlayerController_LocalOnBlueprintEdit");
static_assert(offsetof(FortPlayerController_LocalOnBlueprintEdit, EditedActor) == 0x000000, "Member 'FortPlayerController_LocalOnBlueprintEdit::EditedActor' has a wrong offset!");

// Function FortniteGame.FortPlayerController.OpenChoiceUI
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerController_OpenChoiceUI final
{
public:
	struct FChoiceData                            ChoiceData;                                        // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_OpenChoiceUI) == 0x000004, "Wrong alignment on FortPlayerController_OpenChoiceUI");
static_assert(sizeof(FortPlayerController_OpenChoiceUI) == 0x000020, "Wrong size on FortPlayerController_OpenChoiceUI");
static_assert(offsetof(FortPlayerController_OpenChoiceUI, ChoiceData) == 0x000000, "Member 'FortPlayerController_OpenChoiceUI::ChoiceData' has a wrong offset!");

// Function FortniteGame.FortPlayerController.PlaySpatialSound
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_PlaySpatialSound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_PlaySpatialSound) == 0x000004, "Wrong alignment on FortPlayerController_PlaySpatialSound");
static_assert(sizeof(FortPlayerController_PlaySpatialSound) == 0x000010, "Wrong size on FortPlayerController_PlaySpatialSound");
static_assert(offsetof(FortPlayerController_PlaySpatialSound, Sound) == 0x000000, "Member 'FortPlayerController_PlaySpatialSound::Sound' has a wrong offset!");
static_assert(offsetof(FortPlayerController_PlaySpatialSound, Location) == 0x000004, "Member 'FortPlayerController_PlaySpatialSound::Location' has a wrong offset!");

// Function FortniteGame.FortPlayerController.RemoveItemFromQuickBars
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_RemoveItemFromQuickBars final
{
public:
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_RemoveItemFromQuickBars) == 0x000004, "Wrong alignment on FortPlayerController_RemoveItemFromQuickBars");
static_assert(sizeof(FortPlayerController_RemoveItemFromQuickBars) == 0x000004, "Wrong size on FortPlayerController_RemoveItemFromQuickBars");
static_assert(offsetof(FortPlayerController_RemoveItemFromQuickBars, ItemDefinition) == 0x000000, "Member 'FortPlayerController_RemoveItemFromQuickBars::ItemDefinition' has a wrong offset!");

// Function FortniteGame.FortPlayerController.Say
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_Say final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_Say) == 0x000004, "Wrong alignment on FortPlayerController_Say");
static_assert(sizeof(FortPlayerController_Say) == 0x00000C, "Wrong size on FortPlayerController_Say");
static_assert(offsetof(FortPlayerController_Say, Msg) == 0x000000, "Member 'FortPlayerController_Say::Msg' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SayTeam
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_SayTeam final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SayTeam) == 0x000004, "Wrong alignment on FortPlayerController_SayTeam");
static_assert(sizeof(FortPlayerController_SayTeam) == 0x00000C, "Wrong size on FortPlayerController_SayTeam");
static_assert(offsetof(FortPlayerController_SayTeam, Msg) == 0x000000, "Member 'FortPlayerController_SayTeam::Msg' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SendMessage
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_SendMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Type;                                              // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Source;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SendMessage) == 0x000004, "Wrong alignment on FortPlayerController_SendMessage");
static_assert(sizeof(FortPlayerController_SendMessage) == 0x000018, "Wrong size on FortPlayerController_SendMessage");
static_assert(offsetof(FortPlayerController_SendMessage, Message) == 0x000000, "Member 'FortPlayerController_SendMessage::Message' has a wrong offset!");
static_assert(offsetof(FortPlayerController_SendMessage, Type) == 0x00000C, "Member 'FortPlayerController_SendMessage::Type' has a wrong offset!");
static_assert(offsetof(FortPlayerController_SendMessage, Source) == 0x000014, "Member 'FortPlayerController_SendMessage::Source' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SendTextNotification
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_SendTextNotification final
{
public:
	class FText                                   NotificationText;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SendTextNotification) == 0x000004, "Wrong alignment on FortPlayerController_SendTextNotification");
static_assert(sizeof(FortPlayerController_SendTextNotification) == 0x000010, "Wrong size on FortPlayerController_SendTextNotification");
static_assert(offsetof(FortPlayerController_SendTextNotification, NotificationText) == 0x000000, "Member 'FortPlayerController_SendTextNotification::NotificationText' has a wrong offset!");
static_assert(offsetof(FortPlayerController_SendTextNotification, DisplayTime) == 0x00000C, "Member 'FortPlayerController_SendTextNotification::DisplayTime' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerAttemptInteract
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_ServerAttemptInteract final
{
public:
	class AActor*                                 ReceivingActor;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InteractComponent;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETInteractionType                             InteractType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerAttemptInteract) == 0x000004, "Wrong alignment on FortPlayerController_ServerAttemptInteract");
static_assert(sizeof(FortPlayerController_ServerAttemptInteract) == 0x00000C, "Wrong size on FortPlayerController_ServerAttemptInteract");
static_assert(offsetof(FortPlayerController_ServerAttemptInteract, ReceivingActor) == 0x000000, "Member 'FortPlayerController_ServerAttemptInteract::ReceivingActor' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerAttemptInteract, InteractComponent) == 0x000004, "Member 'FortPlayerController_ServerAttemptInteract::InteractComponent' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerAttemptInteract, InteractType) == 0x000008, "Member 'FortPlayerController_ServerAttemptInteract::InteractType' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerAttemptPinSchematic
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerAttemptPinSchematic final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSave;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerAttemptPinSchematic) == 0x000004, "Wrong alignment on FortPlayerController_ServerAttemptPinSchematic");
static_assert(sizeof(FortPlayerController_ServerAttemptPinSchematic) == 0x000010, "Wrong size on FortPlayerController_ServerAttemptPinSchematic");
static_assert(offsetof(FortPlayerController_ServerAttemptPinSchematic, ItemId) == 0x000000, "Member 'FortPlayerController_ServerAttemptPinSchematic::ItemId' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerAttemptPinSchematic, bSave) == 0x00000C, "Member 'FortPlayerController_ServerAttemptPinSchematic::bSave' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerAttemptUnpinSchematic
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerAttemptUnpinSchematic final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSave;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerAttemptUnpinSchematic) == 0x000004, "Wrong alignment on FortPlayerController_ServerAttemptUnpinSchematic");
static_assert(sizeof(FortPlayerController_ServerAttemptUnpinSchematic) == 0x000010, "Wrong size on FortPlayerController_ServerAttemptUnpinSchematic");
static_assert(offsetof(FortPlayerController_ServerAttemptUnpinSchematic, ItemId) == 0x000000, "Member 'FortPlayerController_ServerAttemptUnpinSchematic::ItemId' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerAttemptUnpinSchematic, bSave) == 0x00000C, "Member 'FortPlayerController_ServerAttemptUnpinSchematic::bSave' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerBanPlayer
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerBanPlayer final
{
public:
	struct FUniqueNetIdRepl                       PlayerToBan;                                       // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerBanPlayer) == 0x000004, "Wrong alignment on FortPlayerController_ServerBanPlayer");
static_assert(sizeof(FortPlayerController_ServerBanPlayer) == 0x000008, "Wrong size on FortPlayerController_ServerBanPlayer");
static_assert(offsetof(FortPlayerController_ServerBanPlayer, PlayerToBan) == 0x000000, "Member 'FortPlayerController_ServerBanPlayer::PlayerToBan' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerBeginEditingBuildingActor
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_ServerBeginEditingBuildingActor final
{
public:
	class ABuildingSMActor*                       BuildingActorToEdit;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerBeginEditingBuildingActor) == 0x000004, "Wrong alignment on FortPlayerController_ServerBeginEditingBuildingActor");
static_assert(sizeof(FortPlayerController_ServerBeginEditingBuildingActor) == 0x000004, "Wrong size on FortPlayerController_ServerBeginEditingBuildingActor");
static_assert(offsetof(FortPlayerController_ServerBeginEditingBuildingActor, BuildingActorToEdit) == 0x000000, "Member 'FortPlayerController_ServerBeginEditingBuildingActor::BuildingActorToEdit' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerBroadcastUIFeedbackEvent
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerBroadcastUIFeedbackEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerBroadcastUIFeedbackEvent) == 0x000004, "Wrong alignment on FortPlayerController_ServerBroadcastUIFeedbackEvent");
static_assert(sizeof(FortPlayerController_ServerBroadcastUIFeedbackEvent) == 0x000008, "Wrong size on FortPlayerController_ServerBroadcastUIFeedbackEvent");
static_assert(offsetof(FortPlayerController_ServerBroadcastUIFeedbackEvent, EventName) == 0x000000, "Member 'FortPlayerController_ServerBroadcastUIFeedbackEvent::EventName' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerCheat
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_ServerCheat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerCheat) == 0x000004, "Wrong alignment on FortPlayerController_ServerCheat");
static_assert(sizeof(FortPlayerController_ServerCheat) == 0x00000C, "Wrong size on FortPlayerController_ServerCheat");
static_assert(offsetof(FortPlayerController_ServerCheat, Msg) == 0x000000, "Member 'FortPlayerController_ServerCheat::Msg' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerCheatAll
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_ServerCheatAll final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerCheatAll) == 0x000004, "Wrong alignment on FortPlayerController_ServerCheatAll");
static_assert(sizeof(FortPlayerController_ServerCheatAll) == 0x00000C, "Wrong size on FortPlayerController_ServerCheatAll");
static_assert(offsetof(FortPlayerController_ServerCheatAll, Msg) == 0x000000, "Member 'FortPlayerController_ServerCheatAll::Msg' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerClientPawnLoaded
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ServerClientPawnLoaded final
{
public:
	bool                                          bIsPawnLoaded;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerClientPawnLoaded) == 0x000001, "Wrong alignment on FortPlayerController_ServerClientPawnLoaded");
static_assert(sizeof(FortPlayerController_ServerClientPawnLoaded) == 0x000001, "Wrong size on FortPlayerController_ServerClientPawnLoaded");
static_assert(offsetof(FortPlayerController_ServerClientPawnLoaded, bIsPawnLoaded) == 0x000000, "Member 'FortPlayerController_ServerClientPawnLoaded::bIsPawnLoaded' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerCraftSchematic
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_ServerCraftSchematic final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerCraftSchematic) == 0x000004, "Wrong alignment on FortPlayerController_ServerCraftSchematic");
static_assert(sizeof(FortPlayerController_ServerCraftSchematic) == 0x00000C, "Wrong size on FortPlayerController_ServerCraftSchematic");
static_assert(offsetof(FortPlayerController_ServerCraftSchematic, ItemId) == 0x000000, "Member 'FortPlayerController_ServerCraftSchematic::ItemId' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerCreateBuildingActor
// 0x0028 (0x0028 - 0x0000)
struct FortPlayerController_ServerCreateBuildingActor final
{
public:
	struct FBuildingClassData                     BuildingClassData;                                 // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  BuildLoc;                                          // 0x000C(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FRotator                               BuildRot;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerCreateBuildingActor) == 0x000004, "Wrong alignment on FortPlayerController_ServerCreateBuildingActor");
static_assert(sizeof(FortPlayerController_ServerCreateBuildingActor) == 0x000028, "Wrong size on FortPlayerController_ServerCreateBuildingActor");
static_assert(offsetof(FortPlayerController_ServerCreateBuildingActor, BuildingClassData) == 0x000000, "Member 'FortPlayerController_ServerCreateBuildingActor::BuildingClassData' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerCreateBuildingActor, BuildLoc) == 0x00000C, "Member 'FortPlayerController_ServerCreateBuildingActor::BuildLoc' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerCreateBuildingActor, BuildRot) == 0x000018, "Member 'FortPlayerController_ServerCreateBuildingActor::BuildRot' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerCreateBuildingActor, bMirrored) == 0x000024, "Member 'FortPlayerController_ServerCreateBuildingActor::bMirrored' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerDisassembleInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerDisassembleInventoryItem final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerDisassembleInventoryItem) == 0x000004, "Wrong alignment on FortPlayerController_ServerDisassembleInventoryItem");
static_assert(sizeof(FortPlayerController_ServerDisassembleInventoryItem) == 0x000010, "Wrong size on FortPlayerController_ServerDisassembleInventoryItem");
static_assert(offsetof(FortPlayerController_ServerDisassembleInventoryItem, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerDisassembleInventoryItem::ItemGuid' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerEditBuildingActor
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerEditBuildingActor final
{
public:
	class ABuildingSMActor*                       BuildingActorToEdit;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingSMActor>           NewBuildingClass;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RotationIterations;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerEditBuildingActor) == 0x000004, "Wrong alignment on FortPlayerController_ServerEditBuildingActor");
static_assert(sizeof(FortPlayerController_ServerEditBuildingActor) == 0x000010, "Wrong size on FortPlayerController_ServerEditBuildingActor");
static_assert(offsetof(FortPlayerController_ServerEditBuildingActor, BuildingActorToEdit) == 0x000000, "Member 'FortPlayerController_ServerEditBuildingActor::BuildingActorToEdit' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerEditBuildingActor, NewBuildingClass) == 0x000004, "Member 'FortPlayerController_ServerEditBuildingActor::NewBuildingClass' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerEditBuildingActor, RotationIterations) == 0x000008, "Member 'FortPlayerController_ServerEditBuildingActor::RotationIterations' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerEditBuildingActor, bMirrored) == 0x00000C, "Member 'FortPlayerController_ServerEditBuildingActor::bMirrored' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerEmote
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_ServerEmote final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerEmote) == 0x000004, "Wrong alignment on FortPlayerController_ServerEmote");
static_assert(sizeof(FortPlayerController_ServerEmote) == 0x00000C, "Wrong size on FortPlayerController_ServerEmote");
static_assert(offsetof(FortPlayerController_ServerEmote, Msg) == 0x000000, "Member 'FortPlayerController_ServerEmote::Msg' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerEndEditingBuildingActor
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_ServerEndEditingBuildingActor final
{
public:
	class ABuildingSMActor*                       BuildingActorToStopEditing;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerEndEditingBuildingActor) == 0x000004, "Wrong alignment on FortPlayerController_ServerEndEditingBuildingActor");
static_assert(sizeof(FortPlayerController_ServerEndEditingBuildingActor) == 0x000004, "Wrong size on FortPlayerController_ServerEndEditingBuildingActor");
static_assert(offsetof(FortPlayerController_ServerEndEditingBuildingActor, BuildingActorToStopEditing) == 0x000000, "Member 'FortPlayerController_ServerEndEditingBuildingActor::BuildingActorToStopEditing' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerExecuteInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerExecuteInventoryItem final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerExecuteInventoryItem) == 0x000004, "Wrong alignment on FortPlayerController_ServerExecuteInventoryItem");
static_assert(sizeof(FortPlayerController_ServerExecuteInventoryItem) == 0x000010, "Wrong size on FortPlayerController_ServerExecuteInventoryItem");
static_assert(offsetof(FortPlayerController_ServerExecuteInventoryItem, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerExecuteInventoryItem::ItemGuid' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerGiftInventoryItemToOtherPlayer
// 0x001C (0x001C - 0x0000)
struct FortPlayerController_ServerGiftInventoryItemToOtherPlayer final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0010(0x0008)(Parm, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerGiftInventoryItemToOtherPlayer) == 0x000004, "Wrong alignment on FortPlayerController_ServerGiftInventoryItemToOtherPlayer");
static_assert(sizeof(FortPlayerController_ServerGiftInventoryItemToOtherPlayer) == 0x00001C, "Wrong size on FortPlayerController_ServerGiftInventoryItemToOtherPlayer");
static_assert(offsetof(FortPlayerController_ServerGiftInventoryItemToOtherPlayer, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerGiftInventoryItemToOtherPlayer::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerGiftInventoryItemToOtherPlayer, PlayerID) == 0x000010, "Member 'FortPlayerController_ServerGiftInventoryItemToOtherPlayer::PlayerID' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerGiftInventoryItemToOtherPlayer, Quantity) == 0x000018, "Member 'FortPlayerController_ServerGiftInventoryItemToOtherPlayer::Quantity' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerGrantAdminPlayer
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerGrantAdminPlayer final
{
public:
	struct FUniqueNetIdRepl                       PlayerToAdmin;                                     // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerGrantAdminPlayer) == 0x000004, "Wrong alignment on FortPlayerController_ServerGrantAdminPlayer");
static_assert(sizeof(FortPlayerController_ServerGrantAdminPlayer) == 0x000008, "Wrong size on FortPlayerController_ServerGrantAdminPlayer");
static_assert(offsetof(FortPlayerController_ServerGrantAdminPlayer, PlayerToAdmin) == 0x000000, "Member 'FortPlayerController_ServerGrantAdminPlayer::PlayerToAdmin' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerHandleMissionEvent_ToggledCursorMode
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode final
{
public:
	class AFortPlayerController*                  PlayerThatToggledCursorMode;                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpened;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode) == 0x000004, "Wrong alignment on FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode");
static_assert(sizeof(FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode) == 0x000008, "Wrong size on FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode");
static_assert(offsetof(FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode, PlayerThatToggledCursorMode) == 0x000000, "Member 'FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode::PlayerThatToggledCursorMode' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode, bOpened) == 0x000004, "Member 'FortPlayerController_ServerHandleMissionEvent_ToggledCursorMode::bOpened' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerHandleMissionEvent_ToggledEditMode
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerHandleMissionEvent_ToggledEditMode final
{
public:
	class AFortPlayerController*                  PlayerThatToggledEditMode;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpened;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerHandleMissionEvent_ToggledEditMode) == 0x000004, "Wrong alignment on FortPlayerController_ServerHandleMissionEvent_ToggledEditMode");
static_assert(sizeof(FortPlayerController_ServerHandleMissionEvent_ToggledEditMode) == 0x000008, "Wrong size on FortPlayerController_ServerHandleMissionEvent_ToggledEditMode");
static_assert(offsetof(FortPlayerController_ServerHandleMissionEvent_ToggledEditMode, PlayerThatToggledEditMode) == 0x000000, "Member 'FortPlayerController_ServerHandleMissionEvent_ToggledEditMode::PlayerThatToggledEditMode' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerHandleMissionEvent_ToggledEditMode, bOpened) == 0x000004, "Member 'FortPlayerController_ServerHandleMissionEvent_ToggledEditMode::bOpened' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerHandleMissionEvent_ToggledOptionsMenu
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerHandleMissionEvent_ToggledOptionsMenu final
{
public:
	class AFortPlayerController*                  PlayerThatToggledOptionsMenu;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpened;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerHandleMissionEvent_ToggledOptionsMenu) == 0x000004, "Wrong alignment on FortPlayerController_ServerHandleMissionEvent_ToggledOptionsMenu");
static_assert(sizeof(FortPlayerController_ServerHandleMissionEvent_ToggledOptionsMenu) == 0x000008, "Wrong size on FortPlayerController_ServerHandleMissionEvent_ToggledOptionsMenu");
static_assert(offsetof(FortPlayerController_ServerHandleMissionEvent_ToggledOptionsMenu, PlayerThatToggledOptionsMenu) == 0x000000, "Member 'FortPlayerController_ServerHandleMissionEvent_ToggledOptionsMenu::PlayerThatToggledOptionsMenu' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerHandleMissionEvent_ToggledOptionsMenu, bOpened) == 0x000004, "Member 'FortPlayerController_ServerHandleMissionEvent_ToggledOptionsMenu::bOpened' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerItemWillBeDestroyed
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerController_ServerItemWillBeDestroyed final
{
public:
	struct FGuid                                  DestroyedItemGuid;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerItemWillBeDestroyed) == 0x000004, "Wrong alignment on FortPlayerController_ServerItemWillBeDestroyed");
static_assert(sizeof(FortPlayerController_ServerItemWillBeDestroyed) == 0x000014, "Wrong size on FortPlayerController_ServerItemWillBeDestroyed");
static_assert(offsetof(FortPlayerController_ServerItemWillBeDestroyed, DestroyedItemGuid) == 0x000000, "Member 'FortPlayerController_ServerItemWillBeDestroyed::DestroyedItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerItemWillBeDestroyed, Count) == 0x000010, "Member 'FortPlayerController_ServerItemWillBeDestroyed::Count' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerKickPlayer
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerController_ServerKickPlayer final
{
public:
	struct FUniqueNetIdRepl                       PlayerToKick;                                      // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Reason;                                            // 0x0008(0x000C)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerKickPlayer) == 0x000004, "Wrong alignment on FortPlayerController_ServerKickPlayer");
static_assert(sizeof(FortPlayerController_ServerKickPlayer) == 0x000014, "Wrong size on FortPlayerController_ServerKickPlayer");
static_assert(offsetof(FortPlayerController_ServerKickPlayer, PlayerToKick) == 0x000000, "Member 'FortPlayerController_ServerKickPlayer::PlayerToKick' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerKickPlayer, Reason) == 0x000008, "Member 'FortPlayerController_ServerKickPlayer::Reason' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerModDurability
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ServerModDurability final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DurabilityMod;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSet;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerModDurability) == 0x000004, "Wrong alignment on FortPlayerController_ServerModDurability");
static_assert(sizeof(FortPlayerController_ServerModDurability) == 0x000018, "Wrong size on FortPlayerController_ServerModDurability");
static_assert(offsetof(FortPlayerController_ServerModDurability, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerModDurability::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerModDurability, DurabilityMod) == 0x000010, "Member 'FortPlayerController_ServerModDurability::DurabilityMod' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerModDurability, bForceSet) == 0x000014, "Member 'FortPlayerController_ServerModDurability::bForceSet' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerModifyStat
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerModifyStat final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatMod                                      ModType;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceStatSave;                                    // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerModifyStat) == 0x000004, "Wrong alignment on FortPlayerController_ServerModifyStat");
static_assert(sizeof(FortPlayerController_ServerModifyStat) == 0x000010, "Wrong size on FortPlayerController_ServerModifyStat");
static_assert(offsetof(FortPlayerController_ServerModifyStat, StatName) == 0x000000, "Member 'FortPlayerController_ServerModifyStat::StatName' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerModifyStat, Amount) == 0x000008, "Member 'FortPlayerController_ServerModifyStat::Amount' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerModifyStat, ModType) == 0x00000C, "Member 'FortPlayerController_ServerModifyStat::ModType' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerModifyStat, bForceStatSave) == 0x00000D, "Member 'FortPlayerController_ServerModifyStat::bForceStatSave' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerNotificationIsFinished
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerNotificationIsFinished final
{
public:
	struct FGuid                                  NotificationID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerNotificationIsFinished) == 0x000004, "Wrong alignment on FortPlayerController_ServerNotificationIsFinished");
static_assert(sizeof(FortPlayerController_ServerNotificationIsFinished) == 0x000010, "Wrong size on FortPlayerController_ServerNotificationIsFinished");
static_assert(offsetof(FortPlayerController_ServerNotificationIsFinished, NotificationID) == 0x000000, "Member 'FortPlayerController_ServerNotificationIsFinished::NotificationID' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerPingMinimap
// 0x001C (0x001C - 0x0000)
struct FortPlayerController_ServerPingMinimap final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           PingColor;                                         // 0x000C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerPingMinimap) == 0x000004, "Wrong alignment on FortPlayerController_ServerPingMinimap");
static_assert(sizeof(FortPlayerController_ServerPingMinimap) == 0x00001C, "Wrong size on FortPlayerController_ServerPingMinimap");
static_assert(offsetof(FortPlayerController_ServerPingMinimap, WorldLocation) == 0x000000, "Member 'FortPlayerController_ServerPingMinimap::WorldLocation' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerPingMinimap, PingColor) == 0x00000C, "Member 'FortPlayerController_ServerPingMinimap::PingColor' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerReconcileGiftsFromPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerReconcileGiftsFromPlayer final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccept;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerReconcileGiftsFromPlayer) == 0x000004, "Wrong alignment on FortPlayerController_ServerReconcileGiftsFromPlayer");
static_assert(sizeof(FortPlayerController_ServerReconcileGiftsFromPlayer) == 0x000010, "Wrong size on FortPlayerController_ServerReconcileGiftsFromPlayer");
static_assert(offsetof(FortPlayerController_ServerReconcileGiftsFromPlayer, PlayerName) == 0x000000, "Member 'FortPlayerController_ServerReconcileGiftsFromPlayer::PlayerName' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerReconcileGiftsFromPlayer, bAccept) == 0x00000C, "Member 'FortPlayerController_ServerReconcileGiftsFromPlayer::bAccept' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerReleaseInventoryItemKey
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerReleaseInventoryItemKey final
{
public:
	EFortQuickBars                                InQuickBar;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerReleaseInventoryItemKey) == 0x000004, "Wrong alignment on FortPlayerController_ServerReleaseInventoryItemKey");
static_assert(sizeof(FortPlayerController_ServerReleaseInventoryItemKey) == 0x000008, "Wrong size on FortPlayerController_ServerReleaseInventoryItemKey");
static_assert(offsetof(FortPlayerController_ServerReleaseInventoryItemKey, InQuickBar) == 0x000000, "Member 'FortPlayerController_ServerReleaseInventoryItemKey::InQuickBar' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerReleaseInventoryItemKey, Slot) == 0x000004, "Member 'FortPlayerController_ServerReleaseInventoryItemKey::Slot' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerRemoveAdminPlayer
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerRemoveAdminPlayer final
{
public:
	struct FUniqueNetIdRepl                       PlayerToAdmin;                                     // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerRemoveAdminPlayer) == 0x000004, "Wrong alignment on FortPlayerController_ServerRemoveAdminPlayer");
static_assert(sizeof(FortPlayerController_ServerRemoveAdminPlayer) == 0x000008, "Wrong size on FortPlayerController_ServerRemoveAdminPlayer");
static_assert(offsetof(FortPlayerController_ServerRemoveAdminPlayer, PlayerToAdmin) == 0x000000, "Member 'FortPlayerController_ServerRemoveAdminPlayer::PlayerToAdmin' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerRemoveInventoryItem
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ServerRemoveInventoryItem final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRemoveFromQuickBars;                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerRemoveInventoryItem) == 0x000004, "Wrong alignment on FortPlayerController_ServerRemoveInventoryItem");
static_assert(sizeof(FortPlayerController_ServerRemoveInventoryItem) == 0x000018, "Wrong size on FortPlayerController_ServerRemoveInventoryItem");
static_assert(offsetof(FortPlayerController_ServerRemoveInventoryItem, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerRemoveInventoryItem::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerRemoveInventoryItem, Count) == 0x000010, "Member 'FortPlayerController_ServerRemoveInventoryItem::Count' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerRemoveInventoryItem, bForceRemoveFromQuickBars) == 0x000014, "Member 'FortPlayerController_ServerRemoveInventoryItem::bForceRemoveFromQuickBars' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerRemoveInventoryStateValue
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerController_ServerRemoveInventoryStateValue final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortItemEntryState                           StateValueType;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_ServerRemoveInventoryStateValue) == 0x000004, "Wrong alignment on FortPlayerController_ServerRemoveInventoryStateValue");
static_assert(sizeof(FortPlayerController_ServerRemoveInventoryStateValue) == 0x000014, "Wrong size on FortPlayerController_ServerRemoveInventoryStateValue");
static_assert(offsetof(FortPlayerController_ServerRemoveInventoryStateValue, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerRemoveInventoryStateValue::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerRemoveInventoryStateValue, StateValueType) == 0x000010, "Member 'FortPlayerController_ServerRemoveInventoryStateValue::StateValueType' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerRepairBuildingActor
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_ServerRepairBuildingActor final
{
public:
	class ABuildingSMActor*                       BuildingActorToRepair;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerRepairBuildingActor) == 0x000004, "Wrong alignment on FortPlayerController_ServerRepairBuildingActor");
static_assert(sizeof(FortPlayerController_ServerRepairBuildingActor) == 0x000004, "Wrong size on FortPlayerController_ServerRepairBuildingActor");
static_assert(offsetof(FortPlayerController_ServerRepairBuildingActor, BuildingActorToRepair) == 0x000000, "Member 'FortPlayerController_ServerRepairBuildingActor::BuildingActorToRepair' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerReplyToReadyCheck
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ServerReplyToReadyCheck final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerReplyToReadyCheck) == 0x000001, "Wrong alignment on FortPlayerController_ServerReplyToReadyCheck");
static_assert(sizeof(FortPlayerController_ServerReplyToReadyCheck) == 0x000001, "Wrong size on FortPlayerController_ServerReplyToReadyCheck");
static_assert(offsetof(FortPlayerController_ServerReplyToReadyCheck, bReady) == 0x000000, "Member 'FortPlayerController_ServerReplyToReadyCheck::bReady' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerRequestGameplayAction
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ServerRequestGameplayAction final
{
public:
	EFortRequestedGameplayAction                  RequestedAction;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerRequestGameplayAction) == 0x000001, "Wrong alignment on FortPlayerController_ServerRequestGameplayAction");
static_assert(sizeof(FortPlayerController_ServerRequestGameplayAction) == 0x000001, "Wrong size on FortPlayerController_ServerRequestGameplayAction");
static_assert(offsetof(FortPlayerController_ServerRequestGameplayAction, RequestedAction) == 0x000000, "Member 'FortPlayerController_ServerRequestGameplayAction::RequestedAction' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSaveLoadoutData
// 0x0070 (0x0070 - 0x0000)
struct FortPlayerController_ServerSaveLoadoutData final
{
public:
	class FString                                 NewHeroID;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSelectedClassAbilityKits              ForceSelectedAbilities;                            // 0x000C(0x0064)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSaveLoadoutData) == 0x000004, "Wrong alignment on FortPlayerController_ServerSaveLoadoutData");
static_assert(sizeof(FortPlayerController_ServerSaveLoadoutData) == 0x000070, "Wrong size on FortPlayerController_ServerSaveLoadoutData");
static_assert(offsetof(FortPlayerController_ServerSaveLoadoutData, NewHeroID) == 0x000000, "Member 'FortPlayerController_ServerSaveLoadoutData::NewHeroID' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSaveLoadoutData, ForceSelectedAbilities) == 0x00000C, "Member 'FortPlayerController_ServerSaveLoadoutData::ForceSelectedAbilities' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSay
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_ServerSay final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSay) == 0x000004, "Wrong alignment on FortPlayerController_ServerSay");
static_assert(sizeof(FortPlayerController_ServerSay) == 0x00000C, "Wrong size on FortPlayerController_ServerSay");
static_assert(offsetof(FortPlayerController_ServerSay, Msg) == 0x000000, "Member 'FortPlayerController_ServerSay::Msg' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSayTeam
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_ServerSayTeam final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSayTeam) == 0x000004, "Wrong alignment on FortPlayerController_ServerSayTeam");
static_assert(sizeof(FortPlayerController_ServerSayTeam) == 0x00000C, "Wrong size on FortPlayerController_ServerSayTeam");
static_assert(offsetof(FortPlayerController_ServerSayTeam, Msg) == 0x000000, "Member 'FortPlayerController_ServerSayTeam::Msg' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetAnalyticsIds
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerController_ServerSetAnalyticsIds final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetAnalyticsIds) == 0x000004, "Wrong alignment on FortPlayerController_ServerSetAnalyticsIds");
static_assert(sizeof(FortPlayerController_ServerSetAnalyticsIds) == 0x000018, "Wrong size on FortPlayerController_ServerSetAnalyticsIds");
static_assert(offsetof(FortPlayerController_ServerSetAnalyticsIds, SessionId) == 0x000000, "Member 'FortPlayerController_ServerSetAnalyticsIds::SessionId' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSetAnalyticsIds, UserId) == 0x00000C, "Member 'FortPlayerController_ServerSetAnalyticsIds::UserId' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetAutoEquipBetterItems
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ServerSetAutoEquipBetterItems final
{
public:
	bool                                          bAutoEquip;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetAutoEquipBetterItems) == 0x000001, "Wrong alignment on FortPlayerController_ServerSetAutoEquipBetterItems");
static_assert(sizeof(FortPlayerController_ServerSetAutoEquipBetterItems) == 0x000001, "Wrong size on FortPlayerController_ServerSetAutoEquipBetterItems");
static_assert(offsetof(FortPlayerController_ServerSetAutoEquipBetterItems, bAutoEquip) == 0x000000, "Member 'FortPlayerController_ServerSetAutoEquipBetterItems::bAutoEquip' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetClientHasFinishedLoading
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ServerSetClientHasFinishedLoading final
{
public:
	bool                                          bInHasFinishedLoading;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetClientHasFinishedLoading) == 0x000001, "Wrong alignment on FortPlayerController_ServerSetClientHasFinishedLoading");
static_assert(sizeof(FortPlayerController_ServerSetClientHasFinishedLoading) == 0x000001, "Wrong size on FortPlayerController_ServerSetClientHasFinishedLoading");
static_assert(offsetof(FortPlayerController_ServerSetClientHasFinishedLoading, bInHasFinishedLoading) == 0x000000, "Member 'FortPlayerController_ServerSetClientHasFinishedLoading::bInHasFinishedLoading' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetHero
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_ServerSetHero final
{
public:
	class FString                                 NewHeroID;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetHero) == 0x000004, "Wrong alignment on FortPlayerController_ServerSetHero");
static_assert(sizeof(FortPlayerController_ServerSetHero) == 0x00000C, "Wrong size on FortPlayerController_ServerSetHero");
static_assert(offsetof(FortPlayerController_ServerSetHero, NewHeroID) == 0x000000, "Member 'FortPlayerController_ServerSetHero::NewHeroID' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetInventoryStateValue
// 0x0020 (0x0020 - 0x0000)
struct FortPlayerController_ServerSetInventoryStateValue final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortItemEntryStateValue               StateValue;                                        // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetInventoryStateValue) == 0x000004, "Wrong alignment on FortPlayerController_ServerSetInventoryStateValue");
static_assert(sizeof(FortPlayerController_ServerSetInventoryStateValue) == 0x000020, "Wrong size on FortPlayerController_ServerSetInventoryStateValue");
static_assert(offsetof(FortPlayerController_ServerSetInventoryStateValue, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerSetInventoryStateValue::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSetInventoryStateValue, StateValue) == 0x000010, "Member 'FortPlayerController_ServerSetInventoryStateValue::StateValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetInvincibleDueToUI
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_ServerSetInvincibleDueToUI final
{
public:
	bool                                          bInvincible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetInvincibleDueToUI) == 0x000001, "Wrong alignment on FortPlayerController_ServerSetInvincibleDueToUI");
static_assert(sizeof(FortPlayerController_ServerSetInvincibleDueToUI) == 0x000001, "Wrong size on FortPlayerController_ServerSetInvincibleDueToUI");
static_assert(offsetof(FortPlayerController_ServerSetInvincibleDueToUI, bInvincible) == 0x000000, "Member 'FortPlayerController_ServerSetInvincibleDueToUI::bInvincible' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetMarkText
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerSetMarkText final
{
public:
	class AFortMarkActor*                         MarkActor;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MarkText;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetMarkText) == 0x000004, "Wrong alignment on FortPlayerController_ServerSetMarkText");
static_assert(sizeof(FortPlayerController_ServerSetMarkText) == 0x000010, "Wrong size on FortPlayerController_ServerSetMarkText");
static_assert(offsetof(FortPlayerController_ServerSetMarkText, MarkActor) == 0x000000, "Member 'FortPlayerController_ServerSetMarkText::MarkActor' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSetMarkText, MarkText) == 0x000004, "Member 'FortPlayerController_ServerSetMarkText::MarkText' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetPartyOwner
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerSetPartyOwner final
{
public:
	struct FUniqueNetIdRepl                       PartyOwnerUniqueId;                                // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetPartyOwner) == 0x000004, "Wrong alignment on FortPlayerController_ServerSetPartyOwner");
static_assert(sizeof(FortPlayerController_ServerSetPartyOwner) == 0x000008, "Wrong size on FortPlayerController_ServerSetPartyOwner");
static_assert(offsetof(FortPlayerController_ServerSetPartyOwner, PartyOwnerUniqueId) == 0x000000, "Member 'FortPlayerController_ServerSetPartyOwner::PartyOwnerUniqueId' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetPlayerStatus
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_ServerSetPlayerStatus final
{
public:
	uint32                                        PlayerStatus;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetPlayerStatus) == 0x000004, "Wrong alignment on FortPlayerController_ServerSetPlayerStatus");
static_assert(sizeof(FortPlayerController_ServerSetPlayerStatus) == 0x000004, "Wrong size on FortPlayerController_ServerSetPlayerStatus");
static_assert(offsetof(FortPlayerController_ServerSetPlayerStatus, PlayerStatus) == 0x000000, "Member 'FortPlayerController_ServerSetPlayerStatus::PlayerStatus' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetReadyToContinue
// 0x0003 (0x0003 - 0x0000)
struct FortPlayerController_ServerSetReadyToContinue final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortGameplayState                            RequestedState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTryStartTimer;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetReadyToContinue) == 0x000001, "Wrong alignment on FortPlayerController_ServerSetReadyToContinue");
static_assert(sizeof(FortPlayerController_ServerSetReadyToContinue) == 0x000003, "Wrong size on FortPlayerController_ServerSetReadyToContinue");
static_assert(offsetof(FortPlayerController_ServerSetReadyToContinue, bReady) == 0x000000, "Member 'FortPlayerController_ServerSetReadyToContinue::bReady' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSetReadyToContinue, RequestedState) == 0x000001, "Member 'FortPlayerController_ServerSetReadyToContinue::RequestedState' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSetReadyToContinue, bTryStartTimer) == 0x000002, "Member 'FortPlayerController_ServerSetReadyToContinue::bTryStartTimer' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetTimeOfDay
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_ServerSetTimeOfDay final
{
public:
	float                                         TimeOfDay;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetTimeOfDay) == 0x000004, "Wrong alignment on FortPlayerController_ServerSetTimeOfDay");
static_assert(sizeof(FortPlayerController_ServerSetTimeOfDay) == 0x000004, "Wrong size on FortPlayerController_ServerSetTimeOfDay");
static_assert(offsetof(FortPlayerController_ServerSetTimeOfDay, TimeOfDay) == 0x000000, "Member 'FortPlayerController_ServerSetTimeOfDay::TimeOfDay' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSetupWeakSpotsOnBuildingActor
// 0x0024 (0x0024 - 0x0000)
struct FortPlayerController_ServerSetupWeakSpotsOnBuildingActor final
{
public:
	class ABuildingSMActor*                       BuildingActor;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortCrackEffectData                   CrackData;                                         // 0x0004(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSetupWeakSpotsOnBuildingActor) == 0x000004, "Wrong alignment on FortPlayerController_ServerSetupWeakSpotsOnBuildingActor");
static_assert(sizeof(FortPlayerController_ServerSetupWeakSpotsOnBuildingActor) == 0x000024, "Wrong size on FortPlayerController_ServerSetupWeakSpotsOnBuildingActor");
static_assert(offsetof(FortPlayerController_ServerSetupWeakSpotsOnBuildingActor, BuildingActor) == 0x000000, "Member 'FortPlayerController_ServerSetupWeakSpotsOnBuildingActor::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSetupWeakSpotsOnBuildingActor, CrackData) == 0x000004, "Member 'FortPlayerController_ServerSetupWeakSpotsOnBuildingActor::CrackData' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSpawnInventoryDrop
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerController_ServerSpawnInventoryDrop final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSpawnInventoryDrop) == 0x000004, "Wrong alignment on FortPlayerController_ServerSpawnInventoryDrop");
static_assert(sizeof(FortPlayerController_ServerSpawnInventoryDrop) == 0x000014, "Wrong size on FortPlayerController_ServerSpawnInventoryDrop");
static_assert(offsetof(FortPlayerController_ServerSpawnInventoryDrop, ItemGuid) == 0x000000, "Member 'FortPlayerController_ServerSpawnInventoryDrop::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSpawnInventoryDrop, Count) == 0x000010, "Member 'FortPlayerController_ServerSpawnInventoryDrop::Count' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSpawnMark
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerController_ServerSpawnMark final
{
public:
	class AActor*                                 ActorToAttachTo;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AttachOffset;                                      // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSpawnMark) == 0x000004, "Wrong alignment on FortPlayerController_ServerSpawnMark");
static_assert(sizeof(FortPlayerController_ServerSpawnMark) == 0x000010, "Wrong size on FortPlayerController_ServerSpawnMark");
static_assert(offsetof(FortPlayerController_ServerSpawnMark, ActorToAttachTo) == 0x000000, "Member 'FortPlayerController_ServerSpawnMark::ActorToAttachTo' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerSpawnMark, AttachOffset) == 0x000004, "Member 'FortPlayerController_ServerSpawnMark::AttachOffset' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerSpotActor
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_ServerSpotActor final
{
public:
	class AActor*                                 NewlySpottedActor;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerSpotActor) == 0x000004, "Wrong alignment on FortPlayerController_ServerSpotActor");
static_assert(sizeof(FortPlayerController_ServerSpotActor) == 0x000004, "Wrong size on FortPlayerController_ServerSpotActor");
static_assert(offsetof(FortPlayerController_ServerSpotActor, NewlySpottedActor) == 0x000000, "Member 'FortPlayerController_ServerSpotActor::NewlySpottedActor' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerTeleportToReticle
// 0x000C (0x000C - 0x0000)
struct FortPlayerController_ServerTeleportToReticle final
{
public:
	struct FVector                                TeleportLocation;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerTeleportToReticle) == 0x000004, "Wrong alignment on FortPlayerController_ServerTeleportToReticle");
static_assert(sizeof(FortPlayerController_ServerTeleportToReticle) == 0x00000C, "Wrong size on FortPlayerController_ServerTeleportToReticle");
static_assert(offsetof(FortPlayerController_ServerTeleportToReticle, TeleportLocation) == 0x000000, "Member 'FortPlayerController_ServerTeleportToReticle::TeleportLocation' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerTriggerCombatEvent
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerTriggerCombatEvent final
{
public:
	EFortCombatEvents                             TriggeredEvent;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeatMultiplier;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerTriggerCombatEvent) == 0x000004, "Wrong alignment on FortPlayerController_ServerTriggerCombatEvent");
static_assert(sizeof(FortPlayerController_ServerTriggerCombatEvent) == 0x000008, "Wrong size on FortPlayerController_ServerTriggerCombatEvent");
static_assert(offsetof(FortPlayerController_ServerTriggerCombatEvent, TriggeredEvent) == 0x000000, "Member 'FortPlayerController_ServerTriggerCombatEvent::TriggeredEvent' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerTriggerCombatEvent, HeatMultiplier) == 0x000004, "Member 'FortPlayerController_ServerTriggerCombatEvent::HeatMultiplier' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerUIChoiceCompleted
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerUIChoiceCompleted final
{
public:
	int32                                         ChosenItem;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MenuIdentifier;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerUIChoiceCompleted) == 0x000004, "Wrong alignment on FortPlayerController_ServerUIChoiceCompleted");
static_assert(sizeof(FortPlayerController_ServerUIChoiceCompleted) == 0x000008, "Wrong size on FortPlayerController_ServerUIChoiceCompleted");
static_assert(offsetof(FortPlayerController_ServerUIChoiceCompleted, ChosenItem) == 0x000000, "Member 'FortPlayerController_ServerUIChoiceCompleted::ChosenItem' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerUIChoiceCompleted, MenuIdentifier) == 0x000004, "Member 'FortPlayerController_ServerUIChoiceCompleted::MenuIdentifier' has a wrong offset!");

// Function FortniteGame.FortPlayerController.ServerUpgradeBuildingActor
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerController_ServerUpgradeBuildingActor final
{
public:
	class ABuildingActor*                         BuildingActorToUpgrade;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewUpgradeLevel;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_ServerUpgradeBuildingActor) == 0x000004, "Wrong alignment on FortPlayerController_ServerUpgradeBuildingActor");
static_assert(sizeof(FortPlayerController_ServerUpgradeBuildingActor) == 0x000008, "Wrong size on FortPlayerController_ServerUpgradeBuildingActor");
static_assert(offsetof(FortPlayerController_ServerUpgradeBuildingActor, BuildingActorToUpgrade) == 0x000000, "Member 'FortPlayerController_ServerUpgradeBuildingActor::BuildingActorToUpgrade' has a wrong offset!");
static_assert(offsetof(FortPlayerController_ServerUpgradeBuildingActor, NewUpgradeLevel) == 0x000004, "Member 'FortPlayerController_ServerUpgradeBuildingActor::NewUpgradeLevel' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SetCinematicOverrideClass
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_SetCinematicOverrideClass final
{
public:
	TSubclassOf<class UFortCinematicCamera>       OverrideCameraClass;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SetCinematicOverrideClass) == 0x000004, "Wrong alignment on FortPlayerController_SetCinematicOverrideClass");
static_assert(sizeof(FortPlayerController_SetCinematicOverrideClass) == 0x000004, "Wrong size on FortPlayerController_SetCinematicOverrideClass");
static_assert(offsetof(FortPlayerController_SetCinematicOverrideClass, OverrideCameraClass) == 0x000000, "Member 'FortPlayerController_SetCinematicOverrideClass::OverrideCameraClass' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SetInputPitchScale
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_SetInputPitchScale final
{
public:
	float                                         InInputPitchScale;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SetInputPitchScale) == 0x000004, "Wrong alignment on FortPlayerController_SetInputPitchScale");
static_assert(sizeof(FortPlayerController_SetInputPitchScale) == 0x000004, "Wrong size on FortPlayerController_SetInputPitchScale");
static_assert(offsetof(FortPlayerController_SetInputPitchScale, InInputPitchScale) == 0x000000, "Member 'FortPlayerController_SetInputPitchScale::InInputPitchScale' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SetInputYawScale
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_SetInputYawScale final
{
public:
	float                                         InInputYawScale;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SetInputYawScale) == 0x000004, "Wrong alignment on FortPlayerController_SetInputYawScale");
static_assert(sizeof(FortPlayerController_SetInputYawScale) == 0x000004, "Wrong size on FortPlayerController_SetInputYawScale");
static_assert(offsetof(FortPlayerController_SetInputYawScale, InInputYawScale) == 0x000000, "Member 'FortPlayerController_SetInputYawScale::InInputYawScale' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SetShowHUD
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_SetShowHUD final
{
public:
	bool                                          bNewShowHUD;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SetShowHUD) == 0x000001, "Wrong alignment on FortPlayerController_SetShowHUD");
static_assert(sizeof(FortPlayerController_SetShowHUD) == 0x000001, "Wrong size on FortPlayerController_SetShowHUD");
static_assert(offsetof(FortPlayerController_SetShowHUD, bNewShowHUD) == 0x000000, "Member 'FortPlayerController_SetShowHUD::bNewShowHUD' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SpawnCameraLensEffectDirectional
// 0x008C (0x008C - 0x0000)
struct FortPlayerController_SpawnCameraLensEffectDirectional final
{
public:
	TSubclassOf<class AFortEmitterCameraLensEffectDirectional> LensEffectEmitterClass;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              DamageDealer;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AFortEmitterCameraLensEffectDirectional* ReturnValue;                                       // 0x0088(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SpawnCameraLensEffectDirectional) == 0x000004, "Wrong alignment on FortPlayerController_SpawnCameraLensEffectDirectional");
static_assert(sizeof(FortPlayerController_SpawnCameraLensEffectDirectional) == 0x00008C, "Wrong size on FortPlayerController_SpawnCameraLensEffectDirectional");
static_assert(offsetof(FortPlayerController_SpawnCameraLensEffectDirectional, LensEffectEmitterClass) == 0x000000, "Member 'FortPlayerController_SpawnCameraLensEffectDirectional::LensEffectEmitterClass' has a wrong offset!");
static_assert(offsetof(FortPlayerController_SpawnCameraLensEffectDirectional, DamageDealer) == 0x000004, "Member 'FortPlayerController_SpawnCameraLensEffectDirectional::DamageDealer' has a wrong offset!");
static_assert(offsetof(FortPlayerController_SpawnCameraLensEffectDirectional, HitInfo) == 0x000008, "Member 'FortPlayerController_SpawnCameraLensEffectDirectional::HitInfo' has a wrong offset!");
static_assert(offsetof(FortPlayerController_SpawnCameraLensEffectDirectional, ReturnValue) == 0x000088, "Member 'FortPlayerController_SpawnCameraLensEffectDirectional::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.StartReadyCheck
// 0x002C (0x002C - 0x0000)
struct FortPlayerController_StartReadyCheck final
{
public:
	class FText                                   QueryText;                                         // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	class FText                                   YesText;                                           // 0x000C(0x000C)(Parm, NativeAccessSpecifierPublic)
	class FText                                   NoText;                                            // 0x0018(0x000C)(Parm, NativeAccessSpecifierPublic)
	float                                         PercentageToPass;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_StartReadyCheck) == 0x000004, "Wrong alignment on FortPlayerController_StartReadyCheck");
static_assert(sizeof(FortPlayerController_StartReadyCheck) == 0x00002C, "Wrong size on FortPlayerController_StartReadyCheck");
static_assert(offsetof(FortPlayerController_StartReadyCheck, QueryText) == 0x000000, "Member 'FortPlayerController_StartReadyCheck::QueryText' has a wrong offset!");
static_assert(offsetof(FortPlayerController_StartReadyCheck, YesText) == 0x00000C, "Member 'FortPlayerController_StartReadyCheck::YesText' has a wrong offset!");
static_assert(offsetof(FortPlayerController_StartReadyCheck, NoText) == 0x000018, "Member 'FortPlayerController_StartReadyCheck::NoText' has a wrong offset!");
static_assert(offsetof(FortPlayerController_StartReadyCheck, PercentageToPass) == 0x000024, "Member 'FortPlayerController_StartReadyCheck::PercentageToPass' has a wrong offset!");
static_assert(offsetof(FortPlayerController_StartReadyCheck, ReturnValue) == 0x000028, "Member 'FortPlayerController_StartReadyCheck::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.SuppressEventNotifications
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_SuppressEventNotifications final
{
public:
	bool                                          bSuppress;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_SuppressEventNotifications) == 0x000001, "Wrong alignment on FortPlayerController_SuppressEventNotifications");
static_assert(sizeof(FortPlayerController_SuppressEventNotifications) == 0x000001, "Wrong size on FortPlayerController_SuppressEventNotifications");
static_assert(offsetof(FortPlayerController_SuppressEventNotifications, bSuppress) == 0x000000, "Member 'FortPlayerController_SuppressEventNotifications::bSuppress' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetAccountLevel
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_GetAccountLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetAccountLevel) == 0x000004, "Wrong alignment on FortPlayerController_GetAccountLevel");
static_assert(sizeof(FortPlayerController_GetAccountLevel) == 0x000004, "Wrong size on FortPlayerController_GetAccountLevel");
static_assert(offsetof(FortPlayerController_GetAccountLevel, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetAccountLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetAccountLevelProgression
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_GetAccountLevelProgression final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetAccountLevelProgression) == 0x000004, "Wrong alignment on FortPlayerController_GetAccountLevelProgression");
static_assert(sizeof(FortPlayerController_GetAccountLevelProgression) == 0x000004, "Wrong size on FortPlayerController_GetAccountLevelProgression");
static_assert(offsetof(FortPlayerController_GetAccountLevelProgression, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetAccountLevelProgression::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetActorUnderReticle
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_GetActorUnderReticle final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetActorUnderReticle) == 0x000004, "Wrong alignment on FortPlayerController_GetActorUnderReticle");
static_assert(sizeof(FortPlayerController_GetActorUnderReticle) == 0x000004, "Wrong size on FortPlayerController_GetActorUnderReticle");
static_assert(offsetof(FortPlayerController_GetActorUnderReticle, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetActorUnderReticle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.GetQuestManager
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerController_GetQuestManager final
{
public:
	class UFortQuestManager*                      ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_GetQuestManager) == 0x000004, "Wrong alignment on FortPlayerController_GetQuestManager");
static_assert(sizeof(FortPlayerController_GetQuestManager) == 0x000004, "Wrong size on FortPlayerController_GetQuestManager");
static_assert(offsetof(FortPlayerController_GetQuestManager, ReturnValue) == 0x000000, "Member 'FortPlayerController_GetQuestManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.IsClientBot
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_IsClientBot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_IsClientBot) == 0x000001, "Wrong alignment on FortPlayerController_IsClientBot");
static_assert(sizeof(FortPlayerController_IsClientBot) == 0x000001, "Wrong size on FortPlayerController_IsClientBot");
static_assert(offsetof(FortPlayerController_IsClientBot, ReturnValue) == 0x000000, "Member 'FortPlayerController_IsClientBot::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.IsRequirementsMet
// 0x0024 (0x0024 - 0x0000)
struct FortPlayerController_IsRequirementsMet final
{
public:
	struct FFortRequirementsInfo                  InRequirements;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerController_IsRequirementsMet) == 0x000004, "Wrong alignment on FortPlayerController_IsRequirementsMet");
static_assert(sizeof(FortPlayerController_IsRequirementsMet) == 0x000024, "Wrong size on FortPlayerController_IsRequirementsMet");
static_assert(offsetof(FortPlayerController_IsRequirementsMet, InRequirements) == 0x000000, "Member 'FortPlayerController_IsRequirementsMet::InRequirements' has a wrong offset!");
static_assert(offsetof(FortPlayerController_IsRequirementsMet, ReturnValue) == 0x000020, "Member 'FortPlayerController_IsRequirementsMet::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerController.IsUsingFirstPersonCamera
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerController_IsUsingFirstPersonCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerController_IsUsingFirstPersonCamera) == 0x000001, "Wrong alignment on FortPlayerController_IsUsingFirstPersonCamera");
static_assert(sizeof(FortPlayerController_IsUsingFirstPersonCamera) == 0x000001, "Wrong size on FortPlayerController_IsUsingFirstPersonCamera");
static_assert(offsetof(FortPlayerController_IsUsingFirstPersonCamera, ReturnValue) == 0x000000, "Member 'FortPlayerController_IsUsingFirstPersonCamera::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltipInterface.GetTooltip
// 0x0004 (0x0004 - 0x0000)
struct FortTooltipInterface_GetTooltip final
{
public:
	TSubclassOf<class UFortTooltip>               ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTooltipInterface_GetTooltip) == 0x000004, "Wrong alignment on FortTooltipInterface_GetTooltip");
static_assert(sizeof(FortTooltipInterface_GetTooltip) == 0x000004, "Wrong size on FortTooltipInterface_GetTooltip");
static_assert(offsetof(FortTooltipInterface_GetTooltip, ReturnValue) == 0x000000, "Member 'FortTooltipInterface_GetTooltip::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltipContext.SpawnTooltipContext
// 0x0004 (0x0004 - 0x0000)
struct FortTooltipContext_SpawnTooltipContext final
{
public:
	class UFortTooltipContext*                    ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTooltipContext_SpawnTooltipContext) == 0x000004, "Wrong alignment on FortTooltipContext_SpawnTooltipContext");
static_assert(sizeof(FortTooltipContext_SpawnTooltipContext) == 0x000004, "Wrong size on FortTooltipContext_SpawnTooltipContext");
static_assert(offsetof(FortTooltipContext_SpawnTooltipContext, ReturnValue) == 0x000000, "Member 'FortTooltipContext_SpawnTooltipContext::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.CreateTemporaryItemInstanceBP
// 0x0004 (0x0004 - 0x0000)
struct FortItemDefinition_CreateTemporaryItemInstanceBP final
{
public:
	class UFortItem*                              ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_CreateTemporaryItemInstanceBP) == 0x000004, "Wrong alignment on FortItemDefinition_CreateTemporaryItemInstanceBP");
static_assert(sizeof(FortItemDefinition_CreateTemporaryItemInstanceBP) == 0x000004, "Wrong size on FortItemDefinition_CreateTemporaryItemInstanceBP");
static_assert(offsetof(FortItemDefinition_CreateTemporaryItemInstanceBP, ReturnValue) == 0x000000, "Member 'FortItemDefinition_CreateTemporaryItemInstanceBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetDescription
// 0x000C (0x000C - 0x0000)
struct FortItemDefinition_GetDescription final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetDescription) == 0x000004, "Wrong alignment on FortItemDefinition_GetDescription");
static_assert(sizeof(FortItemDefinition_GetDescription) == 0x00000C, "Wrong size on FortItemDefinition_GetDescription");
static_assert(offsetof(FortItemDefinition_GetDescription, ReturnValue) == 0x000000, "Member 'FortItemDefinition_GetDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct FortItemDefinition_GetDisplayName final
{
public:
	bool                                          bBaseName;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetDisplayName) == 0x000004, "Wrong alignment on FortItemDefinition_GetDisplayName");
static_assert(sizeof(FortItemDefinition_GetDisplayName) == 0x000010, "Wrong size on FortItemDefinition_GetDisplayName");
static_assert(offsetof(FortItemDefinition_GetDisplayName, bBaseName) == 0x000000, "Member 'FortItemDefinition_GetDisplayName::bBaseName' has a wrong offset!");
static_assert(offsetof(FortItemDefinition_GetDisplayName, ReturnValue) == 0x000004, "Member 'FortItemDefinition_GetDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetIconBrush
// 0x0078 (0x0078 - 0x0000)
struct FortItemDefinition_GetIconBrush final
{
public:
	struct FSlateBrush                            IconBrush_0;                                       // 0x0000(0x0074)(Parm, OutParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemDefinition_GetIconBrush) == 0x000004, "Wrong alignment on FortItemDefinition_GetIconBrush");
static_assert(sizeof(FortItemDefinition_GetIconBrush) == 0x000078, "Wrong size on FortItemDefinition_GetIconBrush");
static_assert(offsetof(FortItemDefinition_GetIconBrush, IconBrush_0) == 0x000000, "Member 'FortItemDefinition_GetIconBrush::IconBrush_0' has a wrong offset!");
static_assert(offsetof(FortItemDefinition_GetIconBrush, BrushSize) == 0x000074, "Member 'FortItemDefinition_GetIconBrush::BrushSize' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetSingleLineDescription
// 0x000C (0x000C - 0x0000)
struct FortItemDefinition_GetSingleLineDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetSingleLineDescription) == 0x000004, "Wrong alignment on FortItemDefinition_GetSingleLineDescription");
static_assert(sizeof(FortItemDefinition_GetSingleLineDescription) == 0x00000C, "Wrong size on FortItemDefinition_GetSingleLineDescription");
static_assert(offsetof(FortItemDefinition_GetSingleLineDescription, ReturnValue) == 0x000000, "Member 'FortItemDefinition_GetSingleLineDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinition.GetTooltip
// 0x0004 (0x0004 - 0x0000)
struct FortItemDefinition_GetTooltip final
{
public:
	TSubclassOf<class UFortTooltip>               ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDefinition_GetTooltip) == 0x000004, "Wrong alignment on FortItemDefinition_GetTooltip");
static_assert(sizeof(FortItemDefinition_GetTooltip) == 0x000004, "Wrong size on FortItemDefinition_GetTooltip");
static_assert(offsetof(FortItemDefinition_GetTooltip, ReturnValue) == 0x000000, "Member 'FortItemDefinition_GetTooltip::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDamageNumbersActor.OnNewDamageNumber
// 0x0058 (0x0058 - 0x0000)
struct FortDamageNumbersActor_OnNewDamageNumber final
{
public:
	struct FFortDamageNumberInfo                  NewDamageNumberInfo;                               // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDamageNumbersActor_OnNewDamageNumber) == 0x000004, "Wrong alignment on FortDamageNumbersActor_OnNewDamageNumber");
static_assert(sizeof(FortDamageNumbersActor_OnNewDamageNumber) == 0x000058, "Wrong size on FortDamageNumbersActor_OnNewDamageNumber");
static_assert(offsetof(FortDamageNumbersActor_OnNewDamageNumber, NewDamageNumberInfo) == 0x000000, "Member 'FortDamageNumbersActor_OnNewDamageNumber::NewDamageNumberInfo' has a wrong offset!");

// Function FortniteGame.FortTrait.GetAbilityKitSlots
// 0x000C (0x000C - 0x0000)
struct FortTrait_GetAbilityKitSlots final
{
public:
	TArray<struct FFortAbilityKitSlot>            ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrait_GetAbilityKitSlots) == 0x000004, "Wrong alignment on FortTrait_GetAbilityKitSlots");
static_assert(sizeof(FortTrait_GetAbilityKitSlots) == 0x00000C, "Wrong size on FortTrait_GetAbilityKitSlots");
static_assert(offsetof(FortTrait_GetAbilityKitSlots, ReturnValue) == 0x000000, "Member 'FortTrait_GetAbilityKitSlots::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ApplyWeaponAlteration
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_ApplyWeaponAlteration final
{
public:
	class FString                                 AlterationName;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ApplyWeaponAlteration) == 0x000004, "Wrong alignment on FortCheatManager_ApplyWeaponAlteration");
static_assert(sizeof(FortCheatManager_ApplyWeaponAlteration) == 0x00000C, "Wrong size on FortCheatManager_ApplyWeaponAlteration");
static_assert(offsetof(FortCheatManager_ApplyWeaponAlteration, AlterationName) == 0x000000, "Member 'FortCheatManager_ApplyWeaponAlteration::AlterationName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.BackpackSetSize
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_BackpackSetSize final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_BackpackSetSize) == 0x000004, "Wrong alignment on FortCheatManager_BackpackSetSize");
static_assert(sizeof(FortCheatManager_BackpackSetSize) == 0x000004, "Wrong size on FortCheatManager_BackpackSetSize");
static_assert(offsetof(FortCheatManager_BackpackSetSize, Size) == 0x000000, "Member 'FortCheatManager_BackpackSetSize::Size' has a wrong offset!");

// Function FortniteGame.FortCheatManager.BanPlayer
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_BanPlayer final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_BanPlayer) == 0x000004, "Wrong alignment on FortCheatManager_BanPlayer");
static_assert(sizeof(FortCheatManager_BanPlayer) == 0x00000C, "Wrong size on FortCheatManager_BanPlayer");
static_assert(offsetof(FortCheatManager_BanPlayer, PlayerName) == 0x000000, "Member 'FortCheatManager_BanPlayer::PlayerName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.BuildWith
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_BuildWith final
{
public:
	class FString                                 ResourceTypeAndOrLevel;                            // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_BuildWith) == 0x000004, "Wrong alignment on FortCheatManager_BuildWith");
static_assert(sizeof(FortCheatManager_BuildWith) == 0x00000C, "Wrong size on FortCheatManager_BuildWith");
static_assert(offsetof(FortCheatManager_BuildWith, ResourceTypeAndOrLevel) == 0x000000, "Member 'FortCheatManager_BuildWith::ResourceTypeAndOrLevel' has a wrong offset!");

// Function FortniteGame.FortCheatManager.CheatScript
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_CheatScript final
{
public:
	class FString                                 ScriptName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_CheatScript) == 0x000004, "Wrong alignment on FortCheatManager_CheatScript");
static_assert(sizeof(FortCheatManager_CheatScript) == 0x00000C, "Wrong size on FortCheatManager_CheatScript");
static_assert(offsetof(FortCheatManager_CheatScript, ScriptName) == 0x000000, "Member 'FortCheatManager_CheatScript::ScriptName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ConstructTileWorld
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_ConstructTileWorld final
{
public:
	int32                                         MaxTiles;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ConstructTileWorld) == 0x000004, "Wrong alignment on FortCheatManager_ConstructTileWorld");
static_assert(sizeof(FortCheatManager_ConstructTileWorld) == 0x00000C, "Wrong size on FortCheatManager_ConstructTileWorld");
static_assert(offsetof(FortCheatManager_ConstructTileWorld, MaxTiles) == 0x000000, "Member 'FortCheatManager_ConstructTileWorld::MaxTiles' has a wrong offset!");
static_assert(offsetof(FortCheatManager_ConstructTileWorld, X) == 0x000004, "Member 'FortCheatManager_ConstructTileWorld::X' has a wrong offset!");
static_assert(offsetof(FortCheatManager_ConstructTileWorld, Y) == 0x000008, "Member 'FortCheatManager_ConstructTileWorld::Y' has a wrong offset!");

// Function FortniteGame.FortCheatManager.DebugAttribute
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_DebugAttribute final
{
public:
	class FString                                 Attribute;                                         // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_DebugAttribute) == 0x000004, "Wrong alignment on FortCheatManager_DebugAttribute");
static_assert(sizeof(FortCheatManager_DebugAttribute) == 0x00000C, "Wrong size on FortCheatManager_DebugAttribute");
static_assert(offsetof(FortCheatManager_DebugAttribute, Attribute) == 0x000000, "Member 'FortCheatManager_DebugAttribute::Attribute' has a wrong offset!");

// Function FortniteGame.FortCheatManager.DebugLoadingScreen
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_DebugLoadingScreen final
{
public:
	class FString                                 MissionGen;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_DebugLoadingScreen) == 0x000004, "Wrong alignment on FortCheatManager_DebugLoadingScreen");
static_assert(sizeof(FortCheatManager_DebugLoadingScreen) == 0x00000C, "Wrong size on FortCheatManager_DebugLoadingScreen");
static_assert(offsetof(FortCheatManager_DebugLoadingScreen, MissionGen) == 0x000000, "Member 'FortCheatManager_DebugLoadingScreen::MissionGen' has a wrong offset!");

// Function FortniteGame.FortCheatManager.DebugUseDedicatedServer
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_DebugUseDedicatedServer final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_DebugUseDedicatedServer) == 0x000001, "Wrong alignment on FortCheatManager_DebugUseDedicatedServer");
static_assert(sizeof(FortCheatManager_DebugUseDedicatedServer) == 0x000001, "Wrong size on FortCheatManager_DebugUseDedicatedServer");
static_assert(offsetof(FortCheatManager_DebugUseDedicatedServer, bUse) == 0x000000, "Member 'FortCheatManager_DebugUseDedicatedServer::bUse' has a wrong offset!");

// Function FortniteGame.FortCheatManager.DeleteWorld
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_DeleteWorld final
{
public:
	class FString                                 WorldName;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_DeleteWorld) == 0x000004, "Wrong alignment on FortCheatManager_DeleteWorld");
static_assert(sizeof(FortCheatManager_DeleteWorld) == 0x00000C, "Wrong size on FortCheatManager_DeleteWorld");
static_assert(offsetof(FortCheatManager_DeleteWorld, WorldName) == 0x000000, "Member 'FortCheatManager_DeleteWorld::WorldName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.DumpActorsWithAssetTags
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_DumpActorsWithAssetTags final
{
public:
	class FString                                 TagList;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_DumpActorsWithAssetTags) == 0x000004, "Wrong alignment on FortCheatManager_DumpActorsWithAssetTags");
static_assert(sizeof(FortCheatManager_DumpActorsWithAssetTags) == 0x00000C, "Wrong size on FortCheatManager_DumpActorsWithAssetTags");
static_assert(offsetof(FortCheatManager_DumpActorsWithAssetTags, TagList) == 0x000000, "Member 'FortCheatManager_DumpActorsWithAssetTags::TagList' has a wrong offset!");

// Function FortniteGame.FortCheatManager.DumpGameStats
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_DumpGameStats final
{
public:
	class FString                                 FilterName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_DumpGameStats) == 0x000004, "Wrong alignment on FortCheatManager_DumpGameStats");
static_assert(sizeof(FortCheatManager_DumpGameStats) == 0x00000C, "Wrong size on FortCheatManager_DumpGameStats");
static_assert(offsetof(FortCheatManager_DumpGameStats, FilterName) == 0x000000, "Member 'FortCheatManager_DumpGameStats::FilterName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.EnableAltKeybinds
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_EnableAltKeybinds final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_EnableAltKeybinds) == 0x000001, "Wrong alignment on FortCheatManager_EnableAltKeybinds");
static_assert(sizeof(FortCheatManager_EnableAltKeybinds) == 0x000001, "Wrong size on FortCheatManager_EnableAltKeybinds");
static_assert(offsetof(FortCheatManager_EnableAltKeybinds, bEnable) == 0x000000, "Member 'FortCheatManager_EnableAltKeybinds::bEnable' has a wrong offset!");

// Function FortniteGame.FortCheatManager.EnableNewCustomizationPanel
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_EnableNewCustomizationPanel final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_EnableNewCustomizationPanel) == 0x000001, "Wrong alignment on FortCheatManager_EnableNewCustomizationPanel");
static_assert(sizeof(FortCheatManager_EnableNewCustomizationPanel) == 0x000001, "Wrong size on FortCheatManager_EnableNewCustomizationPanel");
static_assert(offsetof(FortCheatManager_EnableNewCustomizationPanel, bEnable) == 0x000000, "Member 'FortCheatManager_EnableNewCustomizationPanel::bEnable' has a wrong offset!");

// Function FortniteGame.FortCheatManager.EncounterSetDifficultyLevel
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_EncounterSetDifficultyLevel final
{
public:
	float                                         NewDifficulty;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_EncounterSetDifficultyLevel) == 0x000004, "Wrong alignment on FortCheatManager_EncounterSetDifficultyLevel");
static_assert(sizeof(FortCheatManager_EncounterSetDifficultyLevel) == 0x000004, "Wrong size on FortCheatManager_EncounterSetDifficultyLevel");
static_assert(offsetof(FortCheatManager_EncounterSetDifficultyLevel, NewDifficulty) == 0x000000, "Member 'FortCheatManager_EncounterSetDifficultyLevel::NewDifficulty' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ExecuteNewMissionGeneration
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_ExecuteNewMissionGeneration final
{
public:
	float                                         DifficultyLevel;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GeneratorName;                                     // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ExecuteNewMissionGeneration) == 0x000004, "Wrong alignment on FortCheatManager_ExecuteNewMissionGeneration");
static_assert(sizeof(FortCheatManager_ExecuteNewMissionGeneration) == 0x000010, "Wrong size on FortCheatManager_ExecuteNewMissionGeneration");
static_assert(offsetof(FortCheatManager_ExecuteNewMissionGeneration, DifficultyLevel) == 0x000000, "Member 'FortCheatManager_ExecuteNewMissionGeneration::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FortCheatManager_ExecuteNewMissionGeneration, GeneratorName) == 0x000004, "Member 'FortCheatManager_ExecuteNewMissionGeneration::GeneratorName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ForceAILODs
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_ForceAILODs final
{
public:
	EFortAILODLevel                               inForcedAILODValue;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ForceAILODs) == 0x000001, "Wrong alignment on FortCheatManager_ForceAILODs");
static_assert(sizeof(FortCheatManager_ForceAILODs) == 0x000001, "Wrong size on FortCheatManager_ForceAILODs");
static_assert(offsetof(FortCheatManager_ForceAILODs, inForcedAILODValue) == 0x000000, "Member 'FortCheatManager_ForceAILODs::inForcedAILODValue' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ForceHeroType
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_ForceHeroType final
{
public:
	class FString                                 HeroPersistentName;                                // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ForceHeroType) == 0x000004, "Wrong alignment on FortCheatManager_ForceHeroType");
static_assert(sizeof(FortCheatManager_ForceHeroType) == 0x00000C, "Wrong size on FortCheatManager_ForceHeroType");
static_assert(offsetof(FortCheatManager_ForceHeroType, HeroPersistentName) == 0x000000, "Member 'FortCheatManager_ForceHeroType::HeroPersistentName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ForceSaveMissionStateAndWorld
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_ForceSaveMissionStateAndWorld final
{
public:
	class FString                                 SaveFilename;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ForceSaveMissionStateAndWorld) == 0x000004, "Wrong alignment on FortCheatManager_ForceSaveMissionStateAndWorld");
static_assert(sizeof(FortCheatManager_ForceSaveMissionStateAndWorld) == 0x00000C, "Wrong size on FortCheatManager_ForceSaveMissionStateAndWorld");
static_assert(offsetof(FortCheatManager_ForceSaveMissionStateAndWorld, SaveFilename) == 0x000000, "Member 'FortCheatManager_ForceSaveMissionStateAndWorld::SaveFilename' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ForceSaveWorld
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_ForceSaveWorld final
{
public:
	class FString                                 SaveFilename;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ForceSaveWorld) == 0x000004, "Wrong alignment on FortCheatManager_ForceSaveWorld");
static_assert(sizeof(FortCheatManager_ForceSaveWorld) == 0x00000C, "Wrong size on FortCheatManager_ForceSaveWorld");
static_assert(offsetof(FortCheatManager_ForceSaveWorld, SaveFilename) == 0x000000, "Member 'FortCheatManager_ForceSaveWorld::SaveFilename' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ForceSetHeroRemoteCharacter
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_ForceSetHeroRemoteCharacter final
{
public:
	int32                                         PartyMemberIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_ForceSetHeroRemoteCharacter) == 0x000004, "Wrong alignment on FortCheatManager_ForceSetHeroRemoteCharacter");
static_assert(sizeof(FortCheatManager_ForceSetHeroRemoteCharacter) == 0x000008, "Wrong size on FortCheatManager_ForceSetHeroRemoteCharacter");
static_assert(offsetof(FortCheatManager_ForceSetHeroRemoteCharacter, PartyMemberIndex) == 0x000000, "Member 'FortCheatManager_ForceSetHeroRemoteCharacter::PartyMemberIndex' has a wrong offset!");
static_assert(offsetof(FortCheatManager_ForceSetHeroRemoteCharacter, bEnabled) == 0x000004, "Member 'FortCheatManager_ForceSetHeroRemoteCharacter::bEnabled' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GeneratePolysInPathingRange
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_GeneratePolysInPathingRange final
{
public:
	float                                         MaxDistance;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistance;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GeneratePolysInPathingRange) == 0x000004, "Wrong alignment on FortCheatManager_GeneratePolysInPathingRange");
static_assert(sizeof(FortCheatManager_GeneratePolysInPathingRange) == 0x000008, "Wrong size on FortCheatManager_GeneratePolysInPathingRange");
static_assert(offsetof(FortCheatManager_GeneratePolysInPathingRange, MaxDistance) == 0x000000, "Member 'FortCheatManager_GeneratePolysInPathingRange::MaxDistance' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GeneratePolysInPathingRange, MinDistance) == 0x000004, "Member 'FortCheatManager_GeneratePolysInPathingRange::MinDistance' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GetGameStat
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_GetGameStat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GetGameStat) == 0x000004, "Wrong alignment on FortCheatManager_GetGameStat");
static_assert(sizeof(FortCheatManager_GetGameStat) == 0x00000C, "Wrong size on FortCheatManager_GetGameStat");
static_assert(offsetof(FortCheatManager_GetGameStat, StatName) == 0x000000, "Member 'FortCheatManager_GetGameStat::StatName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GetReplStat
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_GetReplStat final
{
public:
	EFortReplicatedStat                           Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GetReplStat) == 0x000001, "Wrong alignment on FortCheatManager_GetReplStat");
static_assert(sizeof(FortCheatManager_GetReplStat) == 0x000001, "Wrong size on FortCheatManager_GetReplStat");
static_assert(offsetof(FortCheatManager_GetReplStat, Stat) == 0x000000, "Member 'FortCheatManager_GetReplStat::Stat' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GetWorldLockStatus
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_GetWorldLockStatus final
{
public:
	class FString                                 WUID;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GetWorldLockStatus) == 0x000004, "Wrong alignment on FortCheatManager_GetWorldLockStatus");
static_assert(sizeof(FortCheatManager_GetWorldLockStatus) == 0x00000C, "Wrong size on FortCheatManager_GetWorldLockStatus");
static_assert(offsetof(FortCheatManager_GetWorldLockStatus, WUID) == 0x000000, "Member 'FortCheatManager_GetWorldLockStatus::WUID' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveAllConsumables
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveAllConsumables final
{
public:
	int32                                         NumItems;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveAllConsumables) == 0x000004, "Wrong alignment on FortCheatManager_GiveAllConsumables");
static_assert(sizeof(FortCheatManager_GiveAllConsumables) == 0x000004, "Wrong size on FortCheatManager_GiveAllConsumables");
static_assert(offsetof(FortCheatManager_GiveAllConsumables, NumItems) == 0x000000, "Member 'FortCheatManager_GiveAllConsumables::NumItems' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveAllIngredients
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveAllIngredients final
{
public:
	int32                                         NumIngredients;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveAllIngredients) == 0x000004, "Wrong alignment on FortCheatManager_GiveAllIngredients");
static_assert(sizeof(FortCheatManager_GiveAllIngredients) == 0x000004, "Wrong size on FortCheatManager_GiveAllIngredients");
static_assert(offsetof(FortCheatManager_GiveAllIngredients, NumIngredients) == 0x000000, "Member 'FortCheatManager_GiveAllIngredients::NumIngredients' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveAllTraps
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveAllTraps final
{
public:
	int32                                         NumItems;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveAllTraps) == 0x000004, "Wrong alignment on FortCheatManager_GiveAllTraps");
static_assert(sizeof(FortCheatManager_GiveAllTraps) == 0x000004, "Wrong size on FortCheatManager_GiveAllTraps");
static_assert(offsetof(FortCheatManager_GiveAllTraps, NumItems) == 0x000000, "Member 'FortCheatManager_GiveAllTraps::NumItems' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveAmmo
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_GiveAmmo final
{
public:
	class FString                                 AmmoNameAndAmmount;                                // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveAmmo) == 0x000004, "Wrong alignment on FortCheatManager_GiveAmmo");
static_assert(sizeof(FortCheatManager_GiveAmmo) == 0x00000C, "Wrong size on FortCheatManager_GiveAmmo");
static_assert(offsetof(FortCheatManager_GiveAmmo, AmmoNameAndAmmount) == 0x000000, "Member 'FortCheatManager_GiveAmmo::AmmoNameAndAmmount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveBluGlo
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveBluGlo final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveBluGlo) == 0x000004, "Wrong alignment on FortCheatManager_GiveBluGlo");
static_assert(sizeof(FortCheatManager_GiveBluGlo) == 0x000004, "Wrong size on FortCheatManager_GiveBluGlo");
static_assert(offsetof(FortCheatManager_GiveBluGlo, Amount) == 0x000000, "Member 'FortCheatManager_GiveBluGlo::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveFakeBuildingGameplayEffect
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_GiveFakeBuildingGameplayEffect final
{
public:
	class FString                                 BuildingTemplateId;                                // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveFakeBuildingGameplayEffect) == 0x000004, "Wrong alignment on FortCheatManager_GiveFakeBuildingGameplayEffect");
static_assert(sizeof(FortCheatManager_GiveFakeBuildingGameplayEffect) == 0x000010, "Wrong size on FortCheatManager_GiveFakeBuildingGameplayEffect");
static_assert(offsetof(FortCheatManager_GiveFakeBuildingGameplayEffect, BuildingTemplateId) == 0x000000, "Member 'FortCheatManager_GiveFakeBuildingGameplayEffect::BuildingTemplateId' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveFakeBuildingGameplayEffect, Level) == 0x00000C, "Member 'FortCheatManager_GiveFakeBuildingGameplayEffect::Level' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveGadget
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_GiveGadget final
{
public:
	class FString                                 GadgetName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveGadget) == 0x000004, "Wrong alignment on FortCheatManager_GiveGadget");
static_assert(sizeof(FortCheatManager_GiveGadget) == 0x000010, "Wrong size on FortCheatManager_GiveGadget");
static_assert(offsetof(FortCheatManager_GiveGadget, GadgetName) == 0x000000, "Member 'FortCheatManager_GiveGadget::GadgetName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveGadget, ItemLevel) == 0x00000C, "Member 'FortCheatManager_GiveGadget::ItemLevel' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveGadgets
// 0x0014 (0x0014 - 0x0000)
struct FortCheatManager_GiveGadgets final
{
public:
	class FString                                 GadgetName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveGadgets) == 0x000004, "Wrong alignment on FortCheatManager_GiveGadgets");
static_assert(sizeof(FortCheatManager_GiveGadgets) == 0x000014, "Wrong size on FortCheatManager_GiveGadgets");
static_assert(offsetof(FortCheatManager_GiveGadgets, GadgetName) == 0x000000, "Member 'FortCheatManager_GiveGadgets::GadgetName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveGadgets, Quantity) == 0x00000C, "Member 'FortCheatManager_GiveGadgets::Quantity' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveGadgets, ItemLevel) == 0x000010, "Member 'FortCheatManager_GiveGadgets::ItemLevel' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveHeroSpecialization
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_GiveHeroSpecialization final
{
public:
	class FString                                 SpecializationName;                                // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveHeroSpecialization) == 0x000004, "Wrong alignment on FortCheatManager_GiveHeroSpecialization");
static_assert(sizeof(FortCheatManager_GiveHeroSpecialization) == 0x00000C, "Wrong size on FortCheatManager_GiveHeroSpecialization");
static_assert(offsetof(FortCheatManager_GiveHeroSpecialization, SpecializationName) == 0x000000, "Member 'FortCheatManager_GiveHeroSpecialization::SpecializationName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveMetal
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveMetal final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveMetal) == 0x000004, "Wrong alignment on FortCheatManager_GiveMetal");
static_assert(sizeof(FortCheatManager_GiveMetal) == 0x000004, "Wrong size on FortCheatManager_GiveMetal");
static_assert(offsetof(FortCheatManager_GiveMetal, Amount) == 0x000000, "Member 'FortCheatManager_GiveMetal::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveResources
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveResources final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveResources) == 0x000004, "Wrong alignment on FortCheatManager_GiveResources");
static_assert(sizeof(FortCheatManager_GiveResources) == 0x000004, "Wrong size on FortCheatManager_GiveResources");
static_assert(offsetof(FortCheatManager_GiveResources, Amount) == 0x000000, "Member 'FortCheatManager_GiveResources::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveSBA
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_GiveSBA final
{
public:
	class FString                                 StrategicBuildingName;                             // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveSBA) == 0x000004, "Wrong alignment on FortCheatManager_GiveSBA");
static_assert(sizeof(FortCheatManager_GiveSBA) == 0x00000C, "Wrong size on FortCheatManager_GiveSBA");
static_assert(offsetof(FortCheatManager_GiveSBA, StrategicBuildingName) == 0x000000, "Member 'FortCheatManager_GiveSBA::StrategicBuildingName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveSpecificItem
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_GiveSpecificItem final
{
public:
	class FString                                 ItemPath;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveSpecificItem) == 0x000004, "Wrong alignment on FortCheatManager_GiveSpecificItem");
static_assert(sizeof(FortCheatManager_GiveSpecificItem) == 0x000010, "Wrong size on FortCheatManager_GiveSpecificItem");
static_assert(offsetof(FortCheatManager_GiveSpecificItem, ItemPath) == 0x000000, "Member 'FortCheatManager_GiveSpecificItem::ItemPath' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveSpecificItem, ItemLevel) == 0x00000C, "Member 'FortCheatManager_GiveSpecificItem::ItemLevel' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveStone
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveStone final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveStone) == 0x000004, "Wrong alignment on FortCheatManager_GiveStone");
static_assert(sizeof(FortCheatManager_GiveStone) == 0x000004, "Wrong size on FortCheatManager_GiveStone");
static_assert(offsetof(FortCheatManager_GiveStone, Amount) == 0x000000, "Member 'FortCheatManager_GiveStone::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveTrap
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_GiveTrap final
{
public:
	class FString                                 TrapName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestedLevel;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveTrap) == 0x000004, "Wrong alignment on FortCheatManager_GiveTrap");
static_assert(sizeof(FortCheatManager_GiveTrap) == 0x000010, "Wrong size on FortCheatManager_GiveTrap");
static_assert(offsetof(FortCheatManager_GiveTrap, TrapName) == 0x000000, "Member 'FortCheatManager_GiveTrap::TrapName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveTrap, RequestedLevel) == 0x00000C, "Member 'FortCheatManager_GiveTrap::RequestedLevel' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveUsefulThings
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveUsefulThings final
{
public:
	int32                                         NumOfUsefulThings;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveUsefulThings) == 0x000004, "Wrong alignment on FortCheatManager_GiveUsefulThings");
static_assert(sizeof(FortCheatManager_GiveUsefulThings) == 0x000004, "Wrong size on FortCheatManager_GiveUsefulThings");
static_assert(offsetof(FortCheatManager_GiveUsefulThings, NumOfUsefulThings) == 0x000000, "Member 'FortCheatManager_GiveUsefulThings::NumOfUsefulThings' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveWeapon
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_GiveWeapon final
{
public:
	class FString                                 WeaponName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestedLevel;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveWeapon) == 0x000004, "Wrong alignment on FortCheatManager_GiveWeapon");
static_assert(sizeof(FortCheatManager_GiveWeapon) == 0x000010, "Wrong size on FortCheatManager_GiveWeapon");
static_assert(offsetof(FortCheatManager_GiveWeapon, WeaponName) == 0x000000, "Member 'FortCheatManager_GiveWeapon::WeaponName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_GiveWeapon, RequestedLevel) == 0x00000C, "Member 'FortCheatManager_GiveWeapon::RequestedLevel' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveWeapons
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_GiveWeapons final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveWeapons) == 0x000004, "Wrong alignment on FortCheatManager_GiveWeapons");
static_assert(sizeof(FortCheatManager_GiveWeapons) == 0x000008, "Wrong size on FortCheatManager_GiveWeapons");
static_assert(offsetof(FortCheatManager_GiveWeapons, Tag) == 0x000000, "Member 'FortCheatManager_GiveWeapons::Tag' has a wrong offset!");

// Function FortniteGame.FortCheatManager.GiveWood
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_GiveWood final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_GiveWood) == 0x000004, "Wrong alignment on FortCheatManager_GiveWood");
static_assert(sizeof(FortCheatManager_GiveWood) == 0x000004, "Wrong size on FortCheatManager_GiveWood");
static_assert(offsetof(FortCheatManager_GiveWood, Amount) == 0x000000, "Member 'FortCheatManager_GiveWood::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.KillPawns
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_KillPawns final
{
public:
	TSubclassOf<class AFortPawn>                  aClass;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_KillPawns) == 0x000004, "Wrong alignment on FortCheatManager_KillPawns");
static_assert(sizeof(FortCheatManager_KillPawns) == 0x000004, "Wrong size on FortCheatManager_KillPawns");
static_assert(offsetof(FortCheatManager_KillPawns, aClass) == 0x000000, "Member 'FortCheatManager_KillPawns::aClass' has a wrong offset!");

// Function FortniteGame.FortCheatManager.LoadMission
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_LoadMission final
{
public:
	class FString                                 MissionName;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_LoadMission) == 0x000004, "Wrong alignment on FortCheatManager_LoadMission");
static_assert(sizeof(FortCheatManager_LoadMission) == 0x00000C, "Wrong size on FortCheatManager_LoadMission");
static_assert(offsetof(FortCheatManager_LoadMission, MissionName) == 0x000000, "Member 'FortCheatManager_LoadMission::MissionName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.LoadMissionGenerator
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_LoadMissionGenerator final
{
public:
	class FString                                 GeneratorName;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_LoadMissionGenerator) == 0x000004, "Wrong alignment on FortCheatManager_LoadMissionGenerator");
static_assert(sizeof(FortCheatManager_LoadMissionGenerator) == 0x00000C, "Wrong size on FortCheatManager_LoadMissionGenerator");
static_assert(offsetof(FortCheatManager_LoadMissionGenerator, GeneratorName) == 0x000000, "Member 'FortCheatManager_LoadMissionGenerator::GeneratorName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpApplyAlteration
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_McpApplyAlteration final
{
public:
	class FString                                 Schematic;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Alteration;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpApplyAlteration) == 0x000004, "Wrong alignment on FortCheatManager_McpApplyAlteration");
static_assert(sizeof(FortCheatManager_McpApplyAlteration) == 0x000018, "Wrong size on FortCheatManager_McpApplyAlteration");
static_assert(offsetof(FortCheatManager_McpApplyAlteration, Schematic) == 0x000000, "Member 'FortCheatManager_McpApplyAlteration::Schematic' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpApplyAlteration, Alteration) == 0x00000C, "Member 'FortCheatManager_McpApplyAlteration::Alteration' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpCompleteCurrentPrimaryMission
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_McpCompleteCurrentPrimaryMission final
{
public:
	int32                                         NumMissionPoints;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpCompleteCurrentPrimaryMission) == 0x000004, "Wrong alignment on FortCheatManager_McpCompleteCurrentPrimaryMission");
static_assert(sizeof(FortCheatManager_McpCompleteCurrentPrimaryMission) == 0x000004, "Wrong size on FortCheatManager_McpCompleteCurrentPrimaryMission");
static_assert(offsetof(FortCheatManager_McpCompleteCurrentPrimaryMission, NumMissionPoints) == 0x000000, "Member 'FortCheatManager_McpCompleteCurrentPrimaryMission::NumMissionPoints' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpEarnScore
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_McpEarnScore final
{
public:
	int32                                         ScoreAmount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpEarnScore) == 0x000004, "Wrong alignment on FortCheatManager_McpEarnScore");
static_assert(sizeof(FortCheatManager_McpEarnScore) == 0x000004, "Wrong size on FortCheatManager_McpEarnScore");
static_assert(offsetof(FortCheatManager_McpEarnScore, ScoreAmount) == 0x000000, "Member 'FortCheatManager_McpEarnScore::ScoreAmount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpEquipCharCosmetic
// 0x001C (0x001C - 0x0000)
struct FortCheatManager_McpEquipCharCosmetic final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CosmeticId;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CosmeticType;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpEquipCharCosmetic) == 0x000004, "Wrong alignment on FortCheatManager_McpEquipCharCosmetic");
static_assert(sizeof(FortCheatManager_McpEquipCharCosmetic) == 0x00001C, "Wrong size on FortCheatManager_McpEquipCharCosmetic");
static_assert(offsetof(FortCheatManager_McpEquipCharCosmetic, CharacterId) == 0x000000, "Member 'FortCheatManager_McpEquipCharCosmetic::CharacterId' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpEquipCharCosmetic, CosmeticId) == 0x00000C, "Member 'FortCheatManager_McpEquipCharCosmetic::CosmeticId' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpEquipCharCosmetic, CosmeticType) == 0x000018, "Member 'FortCheatManager_McpEquipCharCosmetic::CosmeticType' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpGrantCurrency
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_McpGrantCurrency final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpGrantCurrency) == 0x000004, "Wrong alignment on FortCheatManager_McpGrantCurrency");
static_assert(sizeof(FortCheatManager_McpGrantCurrency) == 0x000004, "Wrong size on FortCheatManager_McpGrantCurrency");
static_assert(offsetof(FortCheatManager_McpGrantCurrency, Amount) == 0x000000, "Member 'FortCheatManager_McpGrantCurrency::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpGrantItem
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_McpGrantItem final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpGrantItem) == 0x000004, "Wrong alignment on FortCheatManager_McpGrantItem");
static_assert(sizeof(FortCheatManager_McpGrantItem) == 0x00000C, "Wrong size on FortCheatManager_McpGrantItem");
static_assert(offsetof(FortCheatManager_McpGrantItem, ItemId) == 0x000000, "Member 'FortCheatManager_McpGrantItem::ItemId' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpGrantPersonnelXP
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_McpGrantPersonnelXP final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpGrantPersonnelXP) == 0x000004, "Wrong alignment on FortCheatManager_McpGrantPersonnelXP");
static_assert(sizeof(FortCheatManager_McpGrantPersonnelXP) == 0x000004, "Wrong size on FortCheatManager_McpGrantPersonnelXP");
static_assert(offsetof(FortCheatManager_McpGrantPersonnelXP, Amount) == 0x000000, "Member 'FortCheatManager_McpGrantPersonnelXP::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpGrantSchematicXP
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_McpGrantSchematicXP final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpGrantSchematicXP) == 0x000004, "Wrong alignment on FortCheatManager_McpGrantSchematicXP");
static_assert(sizeof(FortCheatManager_McpGrantSchematicXP) == 0x000004, "Wrong size on FortCheatManager_McpGrantSchematicXP");
static_assert(offsetof(FortCheatManager_McpGrantSchematicXP, Amount) == 0x000000, "Member 'FortCheatManager_McpGrantSchematicXP::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpHeroAssignToBuilding
// 0x001C (0x001C - 0x0000)
struct FortCheatManager_McpHeroAssignToBuilding final
{
public:
	class FString                                 HeroName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildingType;                                      // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIdx;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpHeroAssignToBuilding) == 0x000004, "Wrong alignment on FortCheatManager_McpHeroAssignToBuilding");
static_assert(sizeof(FortCheatManager_McpHeroAssignToBuilding) == 0x00001C, "Wrong size on FortCheatManager_McpHeroAssignToBuilding");
static_assert(offsetof(FortCheatManager_McpHeroAssignToBuilding, HeroName) == 0x000000, "Member 'FortCheatManager_McpHeroAssignToBuilding::HeroName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpHeroAssignToBuilding, BuildingType) == 0x00000C, "Member 'FortCheatManager_McpHeroAssignToBuilding::BuildingType' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpHeroAssignToBuilding, SlotIdx) == 0x000018, "Member 'FortCheatManager_McpHeroAssignToBuilding::SlotIdx' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpHeroCreate
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_McpHeroCreate final
{
public:
	class FString                                 HeroType;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpHeroCreate) == 0x000004, "Wrong alignment on FortCheatManager_McpHeroCreate");
static_assert(sizeof(FortCheatManager_McpHeroCreate) == 0x000018, "Wrong size on FortCheatManager_McpHeroCreate");
static_assert(offsetof(FortCheatManager_McpHeroCreate, HeroType) == 0x000000, "Member 'FortCheatManager_McpHeroCreate::HeroType' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpHeroCreate, Name_0) == 0x00000C, "Member 'FortCheatManager_McpHeroCreate::Name_0' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpHeroDelete
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_McpHeroDelete final
{
public:
	class FString                                 HeroName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpHeroDelete) == 0x000004, "Wrong alignment on FortCheatManager_McpHeroDelete");
static_assert(sizeof(FortCheatManager_McpHeroDelete) == 0x00000C, "Wrong size on FortCheatManager_McpHeroDelete");
static_assert(offsetof(FortCheatManager_McpHeroDelete, HeroName) == 0x000000, "Member 'FortCheatManager_McpHeroDelete::HeroName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpHeroRename
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_McpHeroRename final
{
public:
	class FString                                 OldHeroName;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewHeroName;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpHeroRename) == 0x000004, "Wrong alignment on FortCheatManager_McpHeroRename");
static_assert(sizeof(FortCheatManager_McpHeroRename) == 0x000018, "Wrong size on FortCheatManager_McpHeroRename");
static_assert(offsetof(FortCheatManager_McpHeroRename, OldHeroName) == 0x000000, "Member 'FortCheatManager_McpHeroRename::OldHeroName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpHeroRename, NewHeroName) == 0x00000C, "Member 'FortCheatManager_McpHeroRename::NewHeroName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpHostGrantAllPlayersSchematic
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_McpHostGrantAllPlayersSchematic final
{
public:
	class FString                                 SchematicId;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpHostGrantAllPlayersSchematic) == 0x000004, "Wrong alignment on FortCheatManager_McpHostGrantAllPlayersSchematic");
static_assert(sizeof(FortCheatManager_McpHostGrantAllPlayersSchematic) == 0x00000C, "Wrong size on FortCheatManager_McpHostGrantAllPlayersSchematic");
static_assert(offsetof(FortCheatManager_McpHostGrantAllPlayersSchematic, SchematicId) == 0x000000, "Member 'FortCheatManager_McpHostGrantAllPlayersSchematic::SchematicId' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpOpenCardPack
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_McpOpenCardPack final
{
public:
	class FString                                 CardPackItemId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectionIdx;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpOpenCardPack) == 0x000004, "Wrong alignment on FortCheatManager_McpOpenCardPack");
static_assert(sizeof(FortCheatManager_McpOpenCardPack) == 0x000010, "Wrong size on FortCheatManager_McpOpenCardPack");
static_assert(offsetof(FortCheatManager_McpOpenCardPack, CardPackItemId) == 0x000000, "Member 'FortCheatManager_McpOpenCardPack::CardPackItemId' has a wrong offset!");
static_assert(offsetof(FortCheatManager_McpOpenCardPack, SelectionIdx) == 0x00000C, "Member 'FortCheatManager_McpOpenCardPack::SelectionIdx' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpRecycleItem
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_McpRecycleItem final
{
public:
	class FString                                 ItemToRecycle;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpRecycleItem) == 0x000004, "Wrong alignment on FortCheatManager_McpRecycleItem");
static_assert(sizeof(FortCheatManager_McpRecycleItem) == 0x00000C, "Wrong size on FortCheatManager_McpRecycleItem");
static_assert(offsetof(FortCheatManager_McpRecycleItem, ItemToRecycle) == 0x000000, "Member 'FortCheatManager_McpRecycleItem::ItemToRecycle' has a wrong offset!");

// Function FortniteGame.FortCheatManager.McpUpgradeItem
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_McpUpgradeItem final
{
public:
	class FString                                 ItemToUpgrade;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_McpUpgradeItem) == 0x000004, "Wrong alignment on FortCheatManager_McpUpgradeItem");
static_assert(sizeof(FortCheatManager_McpUpgradeItem) == 0x00000C, "Wrong size on FortCheatManager_McpUpgradeItem");
static_assert(offsetof(FortCheatManager_McpUpgradeItem, ItemToUpgrade) == 0x000000, "Member 'FortCheatManager_McpUpgradeItem::ItemToUpgrade' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MissionForceFailure
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_MissionForceFailure final
{
public:
	class FString                                 MissionName;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MissionForceFailure) == 0x000004, "Wrong alignment on FortCheatManager_MissionForceFailure");
static_assert(sizeof(FortCheatManager_MissionForceFailure) == 0x00000C, "Wrong size on FortCheatManager_MissionForceFailure");
static_assert(offsetof(FortCheatManager_MissionForceFailure, MissionName) == 0x000000, "Member 'FortCheatManager_MissionForceFailure::MissionName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MissionForceSuccess
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_MissionForceSuccess final
{
public:
	class FString                                 MissionName;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MissionForceSuccess) == 0x000004, "Wrong alignment on FortCheatManager_MissionForceSuccess");
static_assert(sizeof(FortCheatManager_MissionForceSuccess) == 0x00000C, "Wrong size on FortCheatManager_MissionForceSuccess");
static_assert(offsetof(FortCheatManager_MissionForceSuccess, MissionName) == 0x000000, "Member 'FortCheatManager_MissionForceSuccess::MissionName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ModItemDurability
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_ModItemDurability final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ModItemDurability) == 0x000004, "Wrong alignment on FortCheatManager_ModItemDurability");
static_assert(sizeof(FortCheatManager_ModItemDurability) == 0x000004, "Wrong size on FortCheatManager_ModItemDurability");
static_assert(offsetof(FortCheatManager_ModItemDurability, InValue) == 0x000000, "Member 'FortCheatManager_ModItemDurability::InValue' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MyFortCollectAccumulatedResources
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_MyFortCollectAccumulatedResources final
{
public:
	EFortPersistentResources                      ResourceType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MyFortCollectAccumulatedResources) == 0x000001, "Wrong alignment on FortCheatManager_MyFortCollectAccumulatedResources");
static_assert(sizeof(FortCheatManager_MyFortCollectAccumulatedResources) == 0x000001, "Wrong size on FortCheatManager_MyFortCollectAccumulatedResources");
static_assert(offsetof(FortCheatManager_MyFortCollectAccumulatedResources, ResourceType) == 0x000000, "Member 'FortCheatManager_MyFortCollectAccumulatedResources::ResourceType' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MyFortConsumeAllResources
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_MyFortConsumeAllResources final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MyFortConsumeAllResources) == 0x000004, "Wrong alignment on FortCheatManager_MyFortConsumeAllResources");
static_assert(sizeof(FortCheatManager_MyFortConsumeAllResources) == 0x000004, "Wrong size on FortCheatManager_MyFortConsumeAllResources");
static_assert(offsetof(FortCheatManager_MyFortConsumeAllResources, Amount) == 0x000000, "Member 'FortCheatManager_MyFortConsumeAllResources::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MyFortConsumeResources
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_MyFortConsumeResources final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPersistentResources                      ResourceType;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_MyFortConsumeResources) == 0x000004, "Wrong alignment on FortCheatManager_MyFortConsumeResources");
static_assert(sizeof(FortCheatManager_MyFortConsumeResources) == 0x000008, "Wrong size on FortCheatManager_MyFortConsumeResources");
static_assert(offsetof(FortCheatManager_MyFortConsumeResources, Amount) == 0x000000, "Member 'FortCheatManager_MyFortConsumeResources::Amount' has a wrong offset!");
static_assert(offsetof(FortCheatManager_MyFortConsumeResources, ResourceType) == 0x000004, "Member 'FortCheatManager_MyFortConsumeResources::ResourceType' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MyFortFillWarehouse
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_MyFortFillWarehouse final
{
public:
	EFortPersistentResources                      ResourceType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MyFortFillWarehouse) == 0x000001, "Wrong alignment on FortCheatManager_MyFortFillWarehouse");
static_assert(sizeof(FortCheatManager_MyFortFillWarehouse) == 0x000001, "Wrong size on FortCheatManager_MyFortFillWarehouse");
static_assert(offsetof(FortCheatManager_MyFortFillWarehouse, ResourceType) == 0x000000, "Member 'FortCheatManager_MyFortFillWarehouse::ResourceType' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MyFortGrantAllResources
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_MyFortGrantAllResources final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MyFortGrantAllResources) == 0x000004, "Wrong alignment on FortCheatManager_MyFortGrantAllResources");
static_assert(sizeof(FortCheatManager_MyFortGrantAllResources) == 0x000004, "Wrong size on FortCheatManager_MyFortGrantAllResources");
static_assert(offsetof(FortCheatManager_MyFortGrantAllResources, Amount) == 0x000000, "Member 'FortCheatManager_MyFortGrantAllResources::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MyFortSetChecksDisabled
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_MyFortSetChecksDisabled final
{
public:
	bool                                          bSet;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MyFortSetChecksDisabled) == 0x000001, "Wrong alignment on FortCheatManager_MyFortSetChecksDisabled");
static_assert(sizeof(FortCheatManager_MyFortSetChecksDisabled) == 0x000001, "Wrong size on FortCheatManager_MyFortSetChecksDisabled");
static_assert(offsetof(FortCheatManager_MyFortSetChecksDisabled, bSet) == 0x000000, "Member 'FortCheatManager_MyFortSetChecksDisabled::bSet' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MyFortTestLastRatings
// 0x0014 (0x0014 - 0x0000)
struct FortCheatManager_MyFortTestLastRatings final
{
public:
	class FString                                 BuildingId;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastMaxLevel;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastMaxRating;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MyFortTestLastRatings) == 0x000004, "Wrong alignment on FortCheatManager_MyFortTestLastRatings");
static_assert(sizeof(FortCheatManager_MyFortTestLastRatings) == 0x000014, "Wrong size on FortCheatManager_MyFortTestLastRatings");
static_assert(offsetof(FortCheatManager_MyFortTestLastRatings, BuildingId) == 0x000000, "Member 'FortCheatManager_MyFortTestLastRatings::BuildingId' has a wrong offset!");
static_assert(offsetof(FortCheatManager_MyFortTestLastRatings, LastMaxLevel) == 0x00000C, "Member 'FortCheatManager_MyFortTestLastRatings::LastMaxLevel' has a wrong offset!");
static_assert(offsetof(FortCheatManager_MyFortTestLastRatings, LastMaxRating) == 0x000010, "Member 'FortCheatManager_MyFortTestLastRatings::LastMaxRating' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MyFortUpgradeBuilding
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_MyFortUpgradeBuilding final
{
public:
	class FString                                 BuildingId;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MyFortUpgradeBuilding) == 0x000004, "Wrong alignment on FortCheatManager_MyFortUpgradeBuilding");
static_assert(sizeof(FortCheatManager_MyFortUpgradeBuilding) == 0x00000C, "Wrong size on FortCheatManager_MyFortUpgradeBuilding");
static_assert(offsetof(FortCheatManager_MyFortUpgradeBuilding, BuildingId) == 0x000000, "Member 'FortCheatManager_MyFortUpgradeBuilding::BuildingId' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MyTownToggleBetweenKeepAndManor
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_MyTownToggleBetweenKeepAndManor final
{
public:
	bool                                          bNowShowKeep;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MyTownToggleBetweenKeepAndManor) == 0x000001, "Wrong alignment on FortCheatManager_MyTownToggleBetweenKeepAndManor");
static_assert(sizeof(FortCheatManager_MyTownToggleBetweenKeepAndManor) == 0x000001, "Wrong size on FortCheatManager_MyTownToggleBetweenKeepAndManor");
static_assert(offsetof(FortCheatManager_MyTownToggleBetweenKeepAndManor, bNowShowKeep) == 0x000000, "Member 'FortCheatManager_MyTownToggleBetweenKeepAndManor::bNowShowKeep' has a wrong offset!");

// Function FortniteGame.FortCheatManager.MyTownToggleFriendsHomeBase
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_MyTownToggleFriendsHomeBase final
{
public:
	class FString                                 FriendsAccountId;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FriendsName;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_MyTownToggleFriendsHomeBase) == 0x000004, "Wrong alignment on FortCheatManager_MyTownToggleFriendsHomeBase");
static_assert(sizeof(FortCheatManager_MyTownToggleFriendsHomeBase) == 0x000018, "Wrong size on FortCheatManager_MyTownToggleFriendsHomeBase");
static_assert(offsetof(FortCheatManager_MyTownToggleFriendsHomeBase, FriendsAccountId) == 0x000000, "Member 'FortCheatManager_MyTownToggleFriendsHomeBase::FriendsAccountId' has a wrong offset!");
static_assert(offsetof(FortCheatManager_MyTownToggleFriendsHomeBase, FriendsName) == 0x00000C, "Member 'FortCheatManager_MyTownToggleFriendsHomeBase::FriendsName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.RegenerateZoneMissions
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_RegenerateZoneMissions final
{
public:
	bool                                          bUseNewMissionGeneration;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_RegenerateZoneMissions) == 0x000001, "Wrong alignment on FortCheatManager_RegenerateZoneMissions");
static_assert(sizeof(FortCheatManager_RegenerateZoneMissions) == 0x000001, "Wrong size on FortCheatManager_RegenerateZoneMissions");
static_assert(offsetof(FortCheatManager_RegenerateZoneMissions, bUseNewMissionGeneration) == 0x000000, "Member 'FortCheatManager_RegenerateZoneMissions::bUseNewMissionGeneration' has a wrong offset!");

// Function FortniteGame.FortCheatManager.RegenerateZoneMissionsWithDifficultyLevel
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel final
{
public:
	bool                                          bUseNewMissionGeneration;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DifficultyLevelOverride;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel) == 0x000004, "Wrong alignment on FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel");
static_assert(sizeof(FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel) == 0x000008, "Wrong size on FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel");
static_assert(offsetof(FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel, bUseNewMissionGeneration) == 0x000000, "Member 'FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel::bUseNewMissionGeneration' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel, DifficultyLevelOverride) == 0x000004, "Member 'FortCheatManager_RegenerateZoneMissionsWithDifficultyLevel::DifficultyLevelOverride' has a wrong offset!");

// Function FortniteGame.FortCheatManager.RunMonteCarlo
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_RunMonteCarlo final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TileGroup;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIterations;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_RunMonteCarlo) == 0x000004, "Wrong alignment on FortCheatManager_RunMonteCarlo");
static_assert(sizeof(FortCheatManager_RunMonteCarlo) == 0x000018, "Wrong size on FortCheatManager_RunMonteCarlo");
static_assert(offsetof(FortCheatManager_RunMonteCarlo, X) == 0x000000, "Member 'FortCheatManager_RunMonteCarlo::X' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RunMonteCarlo, Y) == 0x000004, "Member 'FortCheatManager_RunMonteCarlo::Y' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RunMonteCarlo, TileGroup) == 0x000008, "Member 'FortCheatManager_RunMonteCarlo::TileGroup' has a wrong offset!");
static_assert(offsetof(FortCheatManager_RunMonteCarlo, NumIterations) == 0x000014, "Member 'FortCheatManager_RunMonteCarlo::NumIterations' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SendCheatNotifications
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SendCheatNotifications final
{
public:
	int32                                         NumOfNotifications;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SendCheatNotifications) == 0x000004, "Wrong alignment on FortCheatManager_SendCheatNotifications");
static_assert(sizeof(FortCheatManager_SendCheatNotifications) == 0x000004, "Wrong size on FortCheatManager_SendCheatNotifications");
static_assert(offsetof(FortCheatManager_SendCheatNotifications, NumOfNotifications) == 0x000000, "Member 'FortCheatManager_SendCheatNotifications::NumOfNotifications' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SendMissionEvent
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_SendMissionEvent final
{
public:
	class FString                                 MissionEventName;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SendMissionEvent) == 0x000004, "Wrong alignment on FortCheatManager_SendMissionEvent");
static_assert(sizeof(FortCheatManager_SendMissionEvent) == 0x00000C, "Wrong size on FortCheatManager_SendMissionEvent");
static_assert(offsetof(FortCheatManager_SendMissionEvent, MissionEventName) == 0x000000, "Member 'FortCheatManager_SendMissionEvent::MissionEventName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SendQuestEvent
// 0x0020 (0x0020 - 0x0000)
struct FortCheatManager_SendQuestEvent final
{
public:
	class FName                                   Type;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetTag;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourceTag;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContextTag;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SendQuestEvent) == 0x000004, "Wrong alignment on FortCheatManager_SendQuestEvent");
static_assert(sizeof(FortCheatManager_SendQuestEvent) == 0x000020, "Wrong size on FortCheatManager_SendQuestEvent");
static_assert(offsetof(FortCheatManager_SendQuestEvent, Type) == 0x000000, "Member 'FortCheatManager_SendQuestEvent::Type' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SendQuestEvent, TargetTag) == 0x000008, "Member 'FortCheatManager_SendQuestEvent::TargetTag' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SendQuestEvent, SourceTag) == 0x000010, "Member 'FortCheatManager_SendQuestEvent::SourceTag' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SendQuestEvent, ContextTag) == 0x000018, "Member 'FortCheatManager_SendQuestEvent::ContextTag' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetActionMappingEnabled
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_SetActionMappingEnabled final
{
public:
	class FName                                   Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_SetActionMappingEnabled) == 0x000004, "Wrong alignment on FortCheatManager_SetActionMappingEnabled");
static_assert(sizeof(FortCheatManager_SetActionMappingEnabled) == 0x00000C, "Wrong size on FortCheatManager_SetActionMappingEnabled");
static_assert(offsetof(FortCheatManager_SetActionMappingEnabled, Action) == 0x000000, "Member 'FortCheatManager_SetActionMappingEnabled::Action' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetActionMappingEnabled, bEnabled) == 0x000008, "Member 'FortCheatManager_SetActionMappingEnabled::bEnabled' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetAimMode
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetAimMode final
{
public:
	uint32                                        Mode;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetAimMode) == 0x000004, "Wrong alignment on FortCheatManager_SetAimMode");
static_assert(sizeof(FortCheatManager_SetAimMode) == 0x000004, "Wrong size on FortCheatManager_SetAimMode");
static_assert(offsetof(FortCheatManager_SetAimMode, Mode) == 0x000000, "Member 'FortCheatManager_SetAimMode::Mode' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetBaseScaleLevelOverride
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetBaseScaleLevelOverride final
{
public:
	float                                         BaseScaleLevelOverrideValue;                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetBaseScaleLevelOverride) == 0x000004, "Wrong alignment on FortCheatManager_SetBaseScaleLevelOverride");
static_assert(sizeof(FortCheatManager_SetBaseScaleLevelOverride) == 0x000004, "Wrong size on FortCheatManager_SetBaseScaleLevelOverride");
static_assert(offsetof(FortCheatManager_SetBaseScaleLevelOverride, BaseScaleLevelOverrideValue) == 0x000000, "Member 'FortCheatManager_SetBaseScaleLevelOverride::BaseScaleLevelOverrideValue' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetBTProbability
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetBTProbability final
{
public:
	float                                         Propability;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetBTProbability) == 0x000004, "Wrong alignment on FortCheatManager_SetBTProbability");
static_assert(sizeof(FortCheatManager_SetBTProbability) == 0x000004, "Wrong size on FortCheatManager_SetBTProbability");
static_assert(offsetof(FortCheatManager_SetBTProbability, Propability) == 0x000000, "Member 'FortCheatManager_SetBTProbability::Propability' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetBuildAnimCheatHeight
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetBuildAnimCheatHeight final
{
public:
	float                                         NewHeight;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetBuildAnimCheatHeight) == 0x000004, "Wrong alignment on FortCheatManager_SetBuildAnimCheatHeight");
static_assert(sizeof(FortCheatManager_SetBuildAnimCheatHeight) == 0x000004, "Wrong size on FortCheatManager_SetBuildAnimCheatHeight");
static_assert(offsetof(FortCheatManager_SetBuildAnimCheatHeight, NewHeight) == 0x000000, "Member 'FortCheatManager_SetBuildAnimCheatHeight::NewHeight' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetBuildAnimCheatSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetBuildAnimCheatSpeedMultiplier final
{
public:
	float                                         NewMultiplier;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetBuildAnimCheatSpeedMultiplier) == 0x000004, "Wrong alignment on FortCheatManager_SetBuildAnimCheatSpeedMultiplier");
static_assert(sizeof(FortCheatManager_SetBuildAnimCheatSpeedMultiplier) == 0x000004, "Wrong size on FortCheatManager_SetBuildAnimCheatSpeedMultiplier");
static_assert(offsetof(FortCheatManager_SetBuildAnimCheatSpeedMultiplier, NewMultiplier) == 0x000000, "Member 'FortCheatManager_SetBuildAnimCheatSpeedMultiplier::NewMultiplier' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetBuildAnimCheatStartDelay
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetBuildAnimCheatStartDelay final
{
public:
	float                                         MaxRandDelay;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetBuildAnimCheatStartDelay) == 0x000004, "Wrong alignment on FortCheatManager_SetBuildAnimCheatStartDelay");
static_assert(sizeof(FortCheatManager_SetBuildAnimCheatStartDelay) == 0x000004, "Wrong size on FortCheatManager_SetBuildAnimCheatStartDelay");
static_assert(offsetof(FortCheatManager_SetBuildAnimCheatStartDelay, MaxRandDelay) == 0x000000, "Member 'FortCheatManager_SetBuildAnimCheatStartDelay::MaxRandDelay' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCameraDistanceMultiplier
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_SetCameraDistanceMultiplier final
{
public:
	float                                         XMultiplier;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YMultiplier;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZMultiplier;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCameraDistanceMultiplier) == 0x000004, "Wrong alignment on FortCheatManager_SetCameraDistanceMultiplier");
static_assert(sizeof(FortCheatManager_SetCameraDistanceMultiplier) == 0x00000C, "Wrong size on FortCheatManager_SetCameraDistanceMultiplier");
static_assert(offsetof(FortCheatManager_SetCameraDistanceMultiplier, XMultiplier) == 0x000000, "Member 'FortCheatManager_SetCameraDistanceMultiplier::XMultiplier' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetCameraDistanceMultiplier, YMultiplier) == 0x000004, "Member 'FortCheatManager_SetCameraDistanceMultiplier::YMultiplier' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetCameraDistanceMultiplier, ZMultiplier) == 0x000008, "Member 'FortCheatManager_SetCameraDistanceMultiplier::ZMultiplier' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCameraFOVMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetCameraFOVMultiplier final
{
public:
	float                                         Multiplier;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCameraFOVMultiplier) == 0x000004, "Wrong alignment on FortCheatManager_SetCameraFOVMultiplier");
static_assert(sizeof(FortCheatManager_SetCameraFOVMultiplier) == 0x000004, "Wrong size on FortCheatManager_SetCameraFOVMultiplier");
static_assert(offsetof(FortCheatManager_SetCameraFOVMultiplier, Multiplier) == 0x000000, "Member 'FortCheatManager_SetCameraFOVMultiplier::Multiplier' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCameraPrototype
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_SetCameraPrototype final
{
public:
	class FName                                   ProtoName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCameraPrototype) == 0x000004, "Wrong alignment on FortCheatManager_SetCameraPrototype");
static_assert(sizeof(FortCheatManager_SetCameraPrototype) == 0x000008, "Wrong size on FortCheatManager_SetCameraPrototype");
static_assert(offsetof(FortCheatManager_SetCameraPrototype, ProtoName) == 0x000000, "Member 'FortCheatManager_SetCameraPrototype::ProtoName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCapturePercentage
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetCapturePercentage final
{
public:
	float                                         NewCapturePercentage;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCapturePercentage) == 0x000004, "Wrong alignment on FortCheatManager_SetCapturePercentage");
static_assert(sizeof(FortCheatManager_SetCapturePercentage) == 0x000004, "Wrong size on FortCheatManager_SetCapturePercentage");
static_assert(offsetof(FortCheatManager_SetCapturePercentage, NewCapturePercentage) == 0x000000, "Member 'FortCheatManager_SetCapturePercentage::NewCapturePercentage' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCombatGraphHistoryLength
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetCombatGraphHistoryLength final
{
public:
	int32                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCombatGraphHistoryLength) == 0x000004, "Wrong alignment on FortCheatManager_SetCombatGraphHistoryLength");
static_assert(sizeof(FortCheatManager_SetCombatGraphHistoryLength) == 0x000004, "Wrong size on FortCheatManager_SetCombatGraphHistoryLength");
static_assert(offsetof(FortCheatManager_SetCombatGraphHistoryLength, Seconds) == 0x000000, "Member 'FortCheatManager_SetCombatGraphHistoryLength::Seconds' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCullValues
// 0x0018 (0x0018 - 0x0000)
struct FortCheatManager_SetCullValues final
{
public:
	float                                         DefaultCullObjectSize;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultCullDistance;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCullObjectSize;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCullDistance;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCullObjectSize;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCullDistance;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCullValues) == 0x000004, "Wrong alignment on FortCheatManager_SetCullValues");
static_assert(sizeof(FortCheatManager_SetCullValues) == 0x000018, "Wrong size on FortCheatManager_SetCullValues");
static_assert(offsetof(FortCheatManager_SetCullValues, DefaultCullObjectSize) == 0x000000, "Member 'FortCheatManager_SetCullValues::DefaultCullObjectSize' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetCullValues, DefaultCullDistance) == 0x000004, "Member 'FortCheatManager_SetCullValues::DefaultCullDistance' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetCullValues, MinCullObjectSize) == 0x000008, "Member 'FortCheatManager_SetCullValues::MinCullObjectSize' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetCullValues, MinCullDistance) == 0x00000C, "Member 'FortCheatManager_SetCullValues::MinCullDistance' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetCullValues, MaxCullObjectSize) == 0x000010, "Member 'FortCheatManager_SetCullValues::MaxCullObjectSize' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetCullValues, MaxCullDistance) == 0x000014, "Member 'FortCheatManager_SetCullValues::MaxCullDistance' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetCurrentEncounterToDebug
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetCurrentEncounterToDebug final
{
public:
	int32                                         EncounterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetCurrentEncounterToDebug) == 0x000004, "Wrong alignment on FortCheatManager_SetCurrentEncounterToDebug");
static_assert(sizeof(FortCheatManager_SetCurrentEncounterToDebug) == 0x000004, "Wrong size on FortCheatManager_SetCurrentEncounterToDebug");
static_assert(offsetof(FortCheatManager_SetCurrentEncounterToDebug, EncounterIndex) == 0x000000, "Member 'FortCheatManager_SetCurrentEncounterToDebug::EncounterIndex' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetEncounterDirections
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_SetEncounterDirections final
{
public:
	TArray<EFortEncounterDirection>               Directions;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetEncounterDirections) == 0x000004, "Wrong alignment on FortCheatManager_SetEncounterDirections");
static_assert(sizeof(FortCheatManager_SetEncounterDirections) == 0x00000C, "Wrong size on FortCheatManager_SetEncounterDirections");
static_assert(offsetof(FortCheatManager_SetEncounterDirections, Directions) == 0x000000, "Member 'FortCheatManager_SetEncounterDirections::Directions' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetEncounterGraphsHistoryLength
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetEncounterGraphsHistoryLength final
{
public:
	int32                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetEncounterGraphsHistoryLength) == 0x000004, "Wrong alignment on FortCheatManager_SetEncounterGraphsHistoryLength");
static_assert(sizeof(FortCheatManager_SetEncounterGraphsHistoryLength) == 0x000004, "Wrong size on FortCheatManager_SetEncounterGraphsHistoryLength");
static_assert(offsetof(FortCheatManager_SetEncounterGraphsHistoryLength, Seconds) == 0x000000, "Member 'FortCheatManager_SetEncounterGraphsHistoryLength::Seconds' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetEncounterSimulatedNumberOfPlayers
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetEncounterSimulatedNumberOfPlayers final
{
public:
	int32                                         NumPlayers;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetEncounterSimulatedNumberOfPlayers) == 0x000004, "Wrong alignment on FortCheatManager_SetEncounterSimulatedNumberOfPlayers");
static_assert(sizeof(FortCheatManager_SetEncounterSimulatedNumberOfPlayers) == 0x000004, "Wrong size on FortCheatManager_SetEncounterSimulatedNumberOfPlayers");
static_assert(offsetof(FortCheatManager_SetEncounterSimulatedNumberOfPlayers, NumPlayers) == 0x000000, "Member 'FortCheatManager_SetEncounterSimulatedNumberOfPlayers::NumPlayers' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetEncounterSpawnPointsCap
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetEncounterSpawnPointsCap final
{
public:
	int32                                         SpawnPointsCap;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetEncounterSpawnPointsCap) == 0x000004, "Wrong alignment on FortCheatManager_SetEncounterSpawnPointsCap");
static_assert(sizeof(FortCheatManager_SetEncounterSpawnPointsCap) == 0x000004, "Wrong size on FortCheatManager_SetEncounterSpawnPointsCap");
static_assert(offsetof(FortCheatManager_SetEncounterSpawnPointsCap, SpawnPointsCap) == 0x000000, "Member 'FortCheatManager_SetEncounterSpawnPointsCap::SpawnPointsCap' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetEncounterSpawnPointsCurve
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_SetEncounterSpawnPointsCurve final
{
public:
	class FString                                 CurveName;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetEncounterSpawnPointsCurve) == 0x000004, "Wrong alignment on FortCheatManager_SetEncounterSpawnPointsCurve");
static_assert(sizeof(FortCheatManager_SetEncounterSpawnPointsCurve) == 0x00000C, "Wrong size on FortCheatManager_SetEncounterSpawnPointsCurve");
static_assert(offsetof(FortCheatManager_SetEncounterSpawnPointsCurve, CurveName) == 0x000000, "Member 'FortCheatManager_SetEncounterSpawnPointsCurve::CurveName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetEncounterTopUtilityPercentages
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_SetEncounterTopUtilityPercentages final
{
public:
	class FString                                 UtilitiesAndPercentages;                           // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetEncounterTopUtilityPercentages) == 0x000004, "Wrong alignment on FortCheatManager_SetEncounterTopUtilityPercentages");
static_assert(sizeof(FortCheatManager_SetEncounterTopUtilityPercentages) == 0x00000C, "Wrong size on FortCheatManager_SetEncounterTopUtilityPercentages");
static_assert(offsetof(FortCheatManager_SetEncounterTopUtilityPercentages, UtilitiesAndPercentages) == 0x000000, "Member 'FortCheatManager_SetEncounterTopUtilityPercentages::UtilitiesAndPercentages' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetGameDifficultyOverride
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetGameDifficultyOverride final
{
public:
	float                                         GameDifficultyOverrideValue;                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetGameDifficultyOverride) == 0x000004, "Wrong alignment on FortCheatManager_SetGameDifficultyOverride");
static_assert(sizeof(FortCheatManager_SetGameDifficultyOverride) == 0x000004, "Wrong size on FortCheatManager_SetGameDifficultyOverride");
static_assert(offsetof(FortCheatManager_SetGameDifficultyOverride, GameDifficultyOverrideValue) == 0x000000, "Member 'FortCheatManager_SetGameDifficultyOverride::GameDifficultyOverrideValue' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetGameStat
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_SetGameStat final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetGameStat) == 0x000004, "Wrong alignment on FortCheatManager_SetGameStat");
static_assert(sizeof(FortCheatManager_SetGameStat) == 0x000010, "Wrong size on FortCheatManager_SetGameStat");
static_assert(offsetof(FortCheatManager_SetGameStat, StatName) == 0x000000, "Member 'FortCheatManager_SetGameStat::StatName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetGameStat, Amount) == 0x00000C, "Member 'FortCheatManager_SetGameStat::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetHealthPercent
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetHealthPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetHealthPercent) == 0x000004, "Wrong alignment on FortCheatManager_SetHealthPercent");
static_assert(sizeof(FortCheatManager_SetHealthPercent) == 0x000004, "Wrong size on FortCheatManager_SetHealthPercent");
static_assert(offsetof(FortCheatManager_SetHealthPercent, Percent) == 0x000000, "Member 'FortCheatManager_SetHealthPercent::Percent' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetInteractExtent
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetInteractExtent final
{
public:
	float                                         Extent;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetInteractExtent) == 0x000004, "Wrong alignment on FortCheatManager_SetInteractExtent");
static_assert(sizeof(FortCheatManager_SetInteractExtent) == 0x000004, "Wrong size on FortCheatManager_SetInteractExtent");
static_assert(offsetof(FortCheatManager_SetInteractExtent, Extent) == 0x000000, "Member 'FortCheatManager_SetInteractExtent::Extent' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetInteractionDistances
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_SetInteractionDistances final
{
public:
	float                                         InteractionDistance;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractionHighlightDistance;                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetInteractionDistances) == 0x000004, "Wrong alignment on FortCheatManager_SetInteractionDistances");
static_assert(sizeof(FortCheatManager_SetInteractionDistances) == 0x000008, "Wrong size on FortCheatManager_SetInteractionDistances");
static_assert(offsetof(FortCheatManager_SetInteractionDistances, InteractionDistance) == 0x000000, "Member 'FortCheatManager_SetInteractionDistances::InteractionDistance' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetInteractionDistances, InteractionHighlightDistance) == 0x000004, "Member 'FortCheatManager_SetInteractionDistances::InteractionHighlightDistance' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetJumpStaminaCost
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_SetJumpStaminaCost final
{
public:
	class FName                                   ModeName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetJumpStaminaCost) == 0x000004, "Wrong alignment on FortCheatManager_SetJumpStaminaCost");
static_assert(sizeof(FortCheatManager_SetJumpStaminaCost) == 0x000008, "Wrong size on FortCheatManager_SetJumpStaminaCost");
static_assert(offsetof(FortCheatManager_SetJumpStaminaCost, ModeName) == 0x000000, "Member 'FortCheatManager_SetJumpStaminaCost::ModeName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetMaxClouds
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetMaxClouds final
{
public:
	int32                                         MaxClouds;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetMaxClouds) == 0x000004, "Wrong alignment on FortCheatManager_SetMaxClouds");
static_assert(sizeof(FortCheatManager_SetMaxClouds) == 0x000004, "Wrong size on FortCheatManager_SetMaxClouds");
static_assert(offsetof(FortCheatManager_SetMaxClouds, MaxClouds) == 0x000000, "Member 'FortCheatManager_SetMaxClouds::MaxClouds' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetPvPRoundTime
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_SetPvPRoundTime final
{
public:
	int32                                         NumSeconds;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalThreshold;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetPvPRoundTime) == 0x000004, "Wrong alignment on FortCheatManager_SetPvPRoundTime");
static_assert(sizeof(FortCheatManager_SetPvPRoundTime) == 0x000008, "Wrong size on FortCheatManager_SetPvPRoundTime");
static_assert(offsetof(FortCheatManager_SetPvPRoundTime, NumSeconds) == 0x000000, "Member 'FortCheatManager_SetPvPRoundTime::NumSeconds' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetPvPRoundTime, CriticalThreshold) == 0x000004, "Member 'FortCheatManager_SetPvPRoundTime::CriticalThreshold' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetPvPStalemateTime
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetPvPStalemateTime final
{
public:
	int32                                         NumSeconds;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetPvPStalemateTime) == 0x000004, "Wrong alignment on FortCheatManager_SetPvPStalemateTime");
static_assert(sizeof(FortCheatManager_SetPvPStalemateTime) == 0x000004, "Wrong size on FortCheatManager_SetPvPStalemateTime");
static_assert(offsetof(FortCheatManager_SetPvPStalemateTime, NumSeconds) == 0x000000, "Member 'FortCheatManager_SetPvPStalemateTime::NumSeconds' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetReplStat
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_SetReplStat final
{
public:
	EFortReplicatedStat                           Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetReplStat) == 0x000004, "Wrong alignment on FortCheatManager_SetReplStat");
static_assert(sizeof(FortCheatManager_SetReplStat) == 0x000008, "Wrong size on FortCheatManager_SetReplStat");
static_assert(offsetof(FortCheatManager_SetReplStat, Stat) == 0x000000, "Member 'FortCheatManager_SetReplStat::Stat' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SetReplStat, Amount) == 0x000004, "Member 'FortCheatManager_SetReplStat::Amount' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetRespawnTimerOverride
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetRespawnTimerOverride final
{
public:
	float                                         TimeUntilRespawn;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetRespawnTimerOverride) == 0x000004, "Wrong alignment on FortCheatManager_SetRespawnTimerOverride");
static_assert(sizeof(FortCheatManager_SetRespawnTimerOverride) == 0x000004, "Wrong size on FortCheatManager_SetRespawnTimerOverride");
static_assert(offsetof(FortCheatManager_SetRespawnTimerOverride, TimeUntilRespawn) == 0x000000, "Member 'FortCheatManager_SetRespawnTimerOverride::TimeUntilRespawn' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetWorldDaysElapsed
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetWorldDaysElapsed final
{
public:
	float                                         days;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetWorldDaysElapsed) == 0x000004, "Wrong alignment on FortCheatManager_SetWorldDaysElapsed");
static_assert(sizeof(FortCheatManager_SetWorldDaysElapsed) == 0x000004, "Wrong size on FortCheatManager_SetWorldDaysElapsed");
static_assert(offsetof(FortCheatManager_SetWorldDaysElapsed, days) == 0x000000, "Member 'FortCheatManager_SetWorldDaysElapsed::days' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SetWorldLevel
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_SetWorldLevel final
{
public:
	float                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SetWorldLevel) == 0x000004, "Wrong alignment on FortCheatManager_SetWorldLevel");
static_assert(sizeof(FortCheatManager_SetWorldLevel) == 0x000004, "Wrong size on FortCheatManager_SetWorldLevel");
static_assert(offsetof(FortCheatManager_SetWorldLevel, Level) == 0x000000, "Member 'FortCheatManager_SetWorldLevel::Level' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SimulateLoot
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_SimulateLoot final
{
public:
	class FName                                   TierGroup;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootTier;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SimulateLoot) == 0x000004, "Wrong alignment on FortCheatManager_SimulateLoot");
static_assert(sizeof(FortCheatManager_SimulateLoot) == 0x00000C, "Wrong size on FortCheatManager_SimulateLoot");
static_assert(offsetof(FortCheatManager_SimulateLoot, TierGroup) == 0x000000, "Member 'FortCheatManager_SimulateLoot::TierGroup' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SimulateLoot, LootTier) == 0x000008, "Member 'FortCheatManager_SimulateLoot::LootTier' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SpawnAIGroup
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_SpawnAIGroup final
{
public:
	class FString                                 SpawnGroupName;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SpawnAIGroup) == 0x000004, "Wrong alignment on FortCheatManager_SpawnAIGroup");
static_assert(sizeof(FortCheatManager_SpawnAIGroup) == 0x00000C, "Wrong size on FortCheatManager_SpawnAIGroup");
static_assert(offsetof(FortCheatManager_SpawnAIGroup, SpawnGroupName) == 0x000000, "Member 'FortCheatManager_SpawnAIGroup::SpawnGroupName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SpawnAIGroupFromExternalSpawner
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_SpawnAIGroupFromExternalSpawner final
{
public:
	class FString                                 SpawnGroupName;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SpawnAIGroupFromExternalSpawner) == 0x000004, "Wrong alignment on FortCheatManager_SpawnAIGroupFromExternalSpawner");
static_assert(sizeof(FortCheatManager_SpawnAIGroupFromExternalSpawner) == 0x00000C, "Wrong size on FortCheatManager_SpawnAIGroupFromExternalSpawner");
static_assert(offsetof(FortCheatManager_SpawnAIGroupFromExternalSpawner, SpawnGroupName) == 0x000000, "Member 'FortCheatManager_SpawnAIGroupFromExternalSpawner::SpawnGroupName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SpawnAIGroupWithMutator
// 0x001C (0x001C - 0x0000)
struct FortCheatManager_SpawnAIGroupWithMutator final
{
public:
	class FString                                 SpawnGroupName;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MutatorName;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DummyInt;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SpawnAIGroupWithMutator) == 0x000004, "Wrong alignment on FortCheatManager_SpawnAIGroupWithMutator");
static_assert(sizeof(FortCheatManager_SpawnAIGroupWithMutator) == 0x00001C, "Wrong size on FortCheatManager_SpawnAIGroupWithMutator");
static_assert(offsetof(FortCheatManager_SpawnAIGroupWithMutator, SpawnGroupName) == 0x000000, "Member 'FortCheatManager_SpawnAIGroupWithMutator::SpawnGroupName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SpawnAIGroupWithMutator, MutatorName) == 0x00000C, "Member 'FortCheatManager_SpawnAIGroupWithMutator::MutatorName' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SpawnAIGroupWithMutator, DummyInt) == 0x000018, "Member 'FortCheatManager_SpawnAIGroupWithMutator::DummyInt' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SpawnPawn
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_SpawnPawn final
{
public:
	class FString                                 PawnType;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SpawnPawn) == 0x000004, "Wrong alignment on FortCheatManager_SpawnPawn");
static_assert(sizeof(FortCheatManager_SpawnPawn) == 0x000010, "Wrong size on FortCheatManager_SpawnPawn");
static_assert(offsetof(FortCheatManager_SpawnPawn, PawnType) == 0x000000, "Member 'FortCheatManager_SpawnPawn::PawnType' has a wrong offset!");
static_assert(offsetof(FortCheatManager_SpawnPawn, ReturnValue) == 0x00000C, "Member 'FortCheatManager_SpawnPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCheatManager.SwitchHeroToClass
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_SwitchHeroToClass final
{
public:
	class FString                                 NewHeroID;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_SwitchHeroToClass) == 0x000004, "Wrong alignment on FortCheatManager_SwitchHeroToClass");
static_assert(sizeof(FortCheatManager_SwitchHeroToClass) == 0x00000C, "Wrong size on FortCheatManager_SwitchHeroToClass");
static_assert(offsetof(FortCheatManager_SwitchHeroToClass, NewHeroID) == 0x000000, "Member 'FortCheatManager_SwitchHeroToClass::NewHeroID' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TeleportToActor
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_TeleportToActor final
{
public:
	class FString                                 ClassOrInstanceName;                               // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TeleportToActor) == 0x000004, "Wrong alignment on FortCheatManager_TeleportToActor");
static_assert(sizeof(FortCheatManager_TeleportToActor) == 0x00000C, "Wrong size on FortCheatManager_TeleportToActor");
static_assert(offsetof(FortCheatManager_TeleportToActor, ClassOrInstanceName) == 0x000000, "Member 'FortCheatManager_TeleportToActor::ClassOrInstanceName' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TeleportToLocation
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_TeleportToLocation final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TeleportToLocation) == 0x000004, "Wrong alignment on FortCheatManager_TeleportToLocation");
static_assert(sizeof(FortCheatManager_TeleportToLocation) == 0x00000C, "Wrong size on FortCheatManager_TeleportToLocation");
static_assert(offsetof(FortCheatManager_TeleportToLocation, X) == 0x000000, "Member 'FortCheatManager_TeleportToLocation::X' has a wrong offset!");
static_assert(offsetof(FortCheatManager_TeleportToLocation, Y) == 0x000004, "Member 'FortCheatManager_TeleportToLocation::Y' has a wrong offset!");
static_assert(offsetof(FortCheatManager_TeleportToLocation, Z) == 0x000008, "Member 'FortCheatManager_TeleportToLocation::Z' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestChangePartyPrivacy
// 0x0003 (0x0003 - 0x0000)
struct FortCheatManager_TestChangePartyPrivacy final
{
public:
	bool                                          bPrivate;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLeaderFriendsOnly;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLeaderInvitesOnly;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestChangePartyPrivacy) == 0x000001, "Wrong alignment on FortCheatManager_TestChangePartyPrivacy");
static_assert(sizeof(FortCheatManager_TestChangePartyPrivacy) == 0x000003, "Wrong size on FortCheatManager_TestChangePartyPrivacy");
static_assert(offsetof(FortCheatManager_TestChangePartyPrivacy, bPrivate) == 0x000000, "Member 'FortCheatManager_TestChangePartyPrivacy::bPrivate' has a wrong offset!");
static_assert(offsetof(FortCheatManager_TestChangePartyPrivacy, bLeaderFriendsOnly) == 0x000001, "Member 'FortCheatManager_TestChangePartyPrivacy::bLeaderFriendsOnly' has a wrong offset!");
static_assert(offsetof(FortCheatManager_TestChangePartyPrivacy, bLeaderInvitesOnly) == 0x000002, "Member 'FortCheatManager_TestChangePartyPrivacy::bLeaderInvitesOnly' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestChangePartySize
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_TestChangePartySize final
{
public:
	int32                                         NewSize;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestChangePartySize) == 0x000004, "Wrong alignment on FortCheatManager_TestChangePartySize");
static_assert(sizeof(FortCheatManager_TestChangePartySize) == 0x000004, "Wrong size on FortCheatManager_TestChangePartySize");
static_assert(offsetof(FortCheatManager_TestChangePartySize, NewSize) == 0x000000, "Member 'FortCheatManager_TestChangePartySize::NewSize' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestKnockback
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_TestKnockback final
{
public:
	float                                         KnockbackMagnitude;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockbackZAngle;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestKnockback) == 0x000004, "Wrong alignment on FortCheatManager_TestKnockback");
static_assert(sizeof(FortCheatManager_TestKnockback) == 0x000008, "Wrong size on FortCheatManager_TestKnockback");
static_assert(offsetof(FortCheatManager_TestKnockback, KnockbackMagnitude) == 0x000000, "Member 'FortCheatManager_TestKnockback::KnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FortCheatManager_TestKnockback, KnockbackZAngle) == 0x000004, "Member 'FortCheatManager_TestKnockback::KnockbackZAngle' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestLockWorld
// 0x0010 (0x0010 - 0x0000)
struct FortCheatManager_TestLockWorld final
{
public:
	class FString                                 WUID;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLock;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_TestLockWorld) == 0x000004, "Wrong alignment on FortCheatManager_TestLockWorld");
static_assert(sizeof(FortCheatManager_TestLockWorld) == 0x000010, "Wrong size on FortCheatManager_TestLockWorld");
static_assert(offsetof(FortCheatManager_TestLockWorld, WUID) == 0x000000, "Member 'FortCheatManager_TestLockWorld::WUID' has a wrong offset!");
static_assert(offsetof(FortCheatManager_TestLockWorld, bLock) == 0x00000C, "Member 'FortCheatManager_TestLockWorld::bLock' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestSetOutpostDefenseActive
// 0x0001 (0x0001 - 0x0000)
struct FortCheatManager_TestSetOutpostDefenseActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestSetOutpostDefenseActive) == 0x000001, "Wrong alignment on FortCheatManager_TestSetOutpostDefenseActive");
static_assert(sizeof(FortCheatManager_TestSetOutpostDefenseActive) == 0x000001, "Wrong size on FortCheatManager_TestSetOutpostDefenseActive");
static_assert(offsetof(FortCheatManager_TestSetOutpostDefenseActive, bActive) == 0x000000, "Member 'FortCheatManager_TestSetOutpostDefenseActive::bActive' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestStun
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_TestStun final
{
public:
	float                                         StunStime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestStun) == 0x000004, "Wrong alignment on FortCheatManager_TestStun");
static_assert(sizeof(FortCheatManager_TestStun) == 0x000004, "Wrong size on FortCheatManager_TestStun");
static_assert(offsetof(FortCheatManager_TestStun, StunStime) == 0x000000, "Member 'FortCheatManager_TestStun::StunStime' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TestUpgradeOutpostItem
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_TestUpgradeOutpostItem final
{
public:
	class FString                                 ItemTemplateId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TestUpgradeOutpostItem) == 0x000004, "Wrong alignment on FortCheatManager_TestUpgradeOutpostItem");
static_assert(sizeof(FortCheatManager_TestUpgradeOutpostItem) == 0x00000C, "Wrong size on FortCheatManager_TestUpgradeOutpostItem");
static_assert(offsetof(FortCheatManager_TestUpgradeOutpostItem, ItemTemplateId) == 0x000000, "Member 'FortCheatManager_TestUpgradeOutpostItem::ItemTemplateId' has a wrong offset!");

// Function FortniteGame.FortCheatManager.ToggleDrawTargetSelectionDebugByClass
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_ToggleDrawTargetSelectionDebugByClass final
{
public:
	TSubclassOf<class AActor>                     TargetSelectionDebugSourceClass;                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_ToggleDrawTargetSelectionDebugByClass) == 0x000004, "Wrong alignment on FortCheatManager_ToggleDrawTargetSelectionDebugByClass");
static_assert(sizeof(FortCheatManager_ToggleDrawTargetSelectionDebugByClass) == 0x000004, "Wrong size on FortCheatManager_ToggleDrawTargetSelectionDebugByClass");
static_assert(offsetof(FortCheatManager_ToggleDrawTargetSelectionDebugByClass, TargetSelectionDebugSourceClass) == 0x000000, "Member 'FortCheatManager_ToggleDrawTargetSelectionDebugByClass::TargetSelectionDebugSourceClass' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TutorialAddHidden
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_TutorialAddHidden final
{
public:
	class FName                                   Hidden;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TutorialAddHidden) == 0x000004, "Wrong alignment on FortCheatManager_TutorialAddHidden");
static_assert(sizeof(FortCheatManager_TutorialAddHidden) == 0x000008, "Wrong size on FortCheatManager_TutorialAddHidden");
static_assert(offsetof(FortCheatManager_TutorialAddHidden, Hidden) == 0x000000, "Member 'FortCheatManager_TutorialAddHidden::Hidden' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TutorialAddHighlight
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_TutorialAddHighlight final
{
public:
	class FName                                   Highlight;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TutorialAddHighlight) == 0x000004, "Wrong alignment on FortCheatManager_TutorialAddHighlight");
static_assert(sizeof(FortCheatManager_TutorialAddHighlight) == 0x000008, "Wrong size on FortCheatManager_TutorialAddHighlight");
static_assert(offsetof(FortCheatManager_TutorialAddHighlight, Highlight) == 0x000000, "Member 'FortCheatManager_TutorialAddHighlight::Highlight' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TutorialRemoveHidden
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_TutorialRemoveHidden final
{
public:
	class FName                                   Hidden;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TutorialRemoveHidden) == 0x000004, "Wrong alignment on FortCheatManager_TutorialRemoveHidden");
static_assert(sizeof(FortCheatManager_TutorialRemoveHidden) == 0x000008, "Wrong size on FortCheatManager_TutorialRemoveHidden");
static_assert(offsetof(FortCheatManager_TutorialRemoveHidden, Hidden) == 0x000000, "Member 'FortCheatManager_TutorialRemoveHidden::Hidden' has a wrong offset!");

// Function FortniteGame.FortCheatManager.TutorialRemoveHighlight
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_TutorialRemoveHighlight final
{
public:
	class FName                                   Highlight;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_TutorialRemoveHighlight) == 0x000004, "Wrong alignment on FortCheatManager_TutorialRemoveHighlight");
static_assert(sizeof(FortCheatManager_TutorialRemoveHighlight) == 0x000008, "Wrong size on FortCheatManager_TutorialRemoveHighlight");
static_assert(offsetof(FortCheatManager_TutorialRemoveHighlight, Highlight) == 0x000000, "Member 'FortCheatManager_TutorialRemoveHighlight::Highlight' has a wrong offset!");

// Function FortniteGame.FortCheatManager.UnbanPlayer
// 0x000C (0x000C - 0x0000)
struct FortCheatManager_UnbanPlayer final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_UnbanPlayer) == 0x000004, "Wrong alignment on FortCheatManager_UnbanPlayer");
static_assert(sizeof(FortCheatManager_UnbanPlayer) == 0x00000C, "Wrong size on FortCheatManager_UnbanPlayer");
static_assert(offsetof(FortCheatManager_UnbanPlayer, PlayerName) == 0x000000, "Member 'FortCheatManager_UnbanPlayer::PlayerName' has a wrong offset!");

// Function FortniteGame.FortAbilityKit.GetDescription
// 0x000C (0x000C - 0x0000)
struct FortAbilityKit_GetDescription final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityKit_GetDescription) == 0x000004, "Wrong alignment on FortAbilityKit_GetDescription");
static_assert(sizeof(FortAbilityKit_GetDescription) == 0x00000C, "Wrong size on FortAbilityKit_GetDescription");
static_assert(offsetof(FortAbilityKit_GetDescription, ReturnValue) == 0x000000, "Member 'FortAbilityKit_GetDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.CanBeDropped
// 0x0001 (0x0001 - 0x0000)
struct FortItem_CanBeDropped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_CanBeDropped) == 0x000001, "Wrong alignment on FortItem_CanBeDropped");
static_assert(sizeof(FortItem_CanBeDropped) == 0x000001, "Wrong size on FortItem_CanBeDropped");
static_assert(offsetof(FortItem_CanBeDropped, ReturnValue) == 0x000000, "Member 'FortItem_CanBeDropped::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.CanBeUnslotted
// 0x0001 (0x0001 - 0x0000)
struct FortItem_CanBeUnslotted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_CanBeUnslotted) == 0x000001, "Wrong alignment on FortItem_CanBeUnslotted");
static_assert(sizeof(FortItem_CanBeUnslotted) == 0x000001, "Wrong size on FortItem_CanBeUnslotted");
static_assert(offsetof(FortItem_CanBeUnslotted, ReturnValue) == 0x000000, "Member 'FortItem_CanBeUnslotted::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.CanBeUpgraded
// 0x0001 (0x0001 - 0x0000)
struct FortItem_CanBeUpgraded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_CanBeUpgraded) == 0x000001, "Wrong alignment on FortItem_CanBeUpgraded");
static_assert(sizeof(FortItem_CanBeUpgraded) == 0x000001, "Wrong size on FortItem_CanBeUpgraded");
static_assert(offsetof(FortItem_CanBeUpgraded, ReturnValue) == 0x000000, "Member 'FortItem_CanBeUpgraded::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.DoesMatchSearchString
// 0x0010 (0x0010 - 0x0000)
struct FortItem_DoesMatchSearchString final
{
public:
	class FString                                 SearchString;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_DoesMatchSearchString) == 0x000004, "Wrong alignment on FortItem_DoesMatchSearchString");
static_assert(sizeof(FortItem_DoesMatchSearchString) == 0x000010, "Wrong size on FortItem_DoesMatchSearchString");
static_assert(offsetof(FortItem_DoesMatchSearchString, SearchString) == 0x000000, "Member 'FortItem_DoesMatchSearchString::SearchString' has a wrong offset!");
static_assert(offsetof(FortItem_DoesMatchSearchString, ReturnValue) == 0x00000C, "Member 'FortItem_DoesMatchSearchString::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetAlterations
// 0x000C (0x000C - 0x0000)
struct FortItem_GetAlterations final
{
public:
	TArray<class UFortAlterationItemDefinition*>  ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetAlterations) == 0x000004, "Wrong alignment on FortItem_GetAlterations");
static_assert(sizeof(FortItem_GetAlterations) == 0x00000C, "Wrong size on FortItem_GetAlterations");
static_assert(offsetof(FortItem_GetAlterations, ReturnValue) == 0x000000, "Member 'FortItem_GetAlterations::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetAlterationSlotActivationRequirement
// 0x0010 (0x0010 - 0x0000)
struct FortItem_GetAlterationSlotActivationRequirement final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetAlterationSlotActivationRequirement) == 0x000004, "Wrong alignment on FortItem_GetAlterationSlotActivationRequirement");
static_assert(sizeof(FortItem_GetAlterationSlotActivationRequirement) == 0x000010, "Wrong size on FortItem_GetAlterationSlotActivationRequirement");
static_assert(offsetof(FortItem_GetAlterationSlotActivationRequirement, SlotIndex) == 0x000000, "Member 'FortItem_GetAlterationSlotActivationRequirement::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortItem_GetAlterationSlotActivationRequirement, ReturnValue) == 0x000004, "Member 'FortItem_GetAlterationSlotActivationRequirement::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetCoolDownPercentageRemaining
// 0x0008 (0x0008 - 0x0000)
struct FortItem_GetCoolDownPercentageRemaining final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetCoolDownPercentageRemaining) == 0x000004, "Wrong alignment on FortItem_GetCoolDownPercentageRemaining");
static_assert(sizeof(FortItem_GetCoolDownPercentageRemaining) == 0x000008, "Wrong size on FortItem_GetCoolDownPercentageRemaining");
static_assert(offsetof(FortItem_GetCoolDownPercentageRemaining, FortPC) == 0x000000, "Member 'FortItem_GetCoolDownPercentageRemaining::FortPC' has a wrong offset!");
static_assert(offsetof(FortItem_GetCoolDownPercentageRemaining, ReturnValue) == 0x000004, "Member 'FortItem_GetCoolDownPercentageRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetCoolDownTimeRemaining
// 0x000C (0x000C - 0x0000)
struct FortItem_GetCoolDownTimeRemaining final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownDuration;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetCoolDownTimeRemaining) == 0x000004, "Wrong alignment on FortItem_GetCoolDownTimeRemaining");
static_assert(sizeof(FortItem_GetCoolDownTimeRemaining) == 0x00000C, "Wrong size on FortItem_GetCoolDownTimeRemaining");
static_assert(offsetof(FortItem_GetCoolDownTimeRemaining, FortPC) == 0x000000, "Member 'FortItem_GetCoolDownTimeRemaining::FortPC' has a wrong offset!");
static_assert(offsetof(FortItem_GetCoolDownTimeRemaining, CooldownDuration) == 0x000004, "Member 'FortItem_GetCoolDownTimeRemaining::CooldownDuration' has a wrong offset!");
static_assert(offsetof(FortItem_GetCoolDownTimeRemaining, ReturnValue) == 0x000008, "Member 'FortItem_GetCoolDownTimeRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetDescription
// 0x000C (0x000C - 0x0000)
struct FortItem_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetDescription) == 0x000004, "Wrong alignment on FortItem_GetDescription");
static_assert(sizeof(FortItem_GetDescription) == 0x00000C, "Wrong size on FortItem_GetDescription");
static_assert(offsetof(FortItem_GetDescription, ReturnValue) == 0x000000, "Member 'FortItem_GetDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetDisplayName
// 0x000C (0x000C - 0x0000)
struct FortItem_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetDisplayName) == 0x000004, "Wrong alignment on FortItem_GetDisplayName");
static_assert(sizeof(FortItem_GetDisplayName) == 0x00000C, "Wrong size on FortItem_GetDisplayName");
static_assert(offsetof(FortItem_GetDisplayName, ReturnValue) == 0x000000, "Member 'FortItem_GetDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetDurability
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetDurability final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetDurability) == 0x000004, "Wrong alignment on FortItem_GetDurability");
static_assert(sizeof(FortItem_GetDurability) == 0x000004, "Wrong size on FortItem_GetDurability");
static_assert(offsetof(FortItem_GetDurability, ReturnValue) == 0x000000, "Member 'FortItem_GetDurability::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetFilterCategory
// 0x0001 (0x0001 - 0x0000)
struct FortItem_GetFilterCategory final
{
public:
	EFortInventoryFilter                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetFilterCategory) == 0x000001, "Wrong alignment on FortItem_GetFilterCategory");
static_assert(sizeof(FortItem_GetFilterCategory) == 0x000001, "Wrong size on FortItem_GetFilterCategory");
static_assert(offsetof(FortItem_GetFilterCategory, ReturnValue) == 0x000000, "Member 'FortItem_GetFilterCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetIconBrush
// 0x0078 (0x0078 - 0x0000)
struct FortItem_GetIconBrush final
{
public:
	struct FSlateBrush                            IconBrush;                                         // 0x0000(0x0074)(Parm, OutParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_GetIconBrush) == 0x000004, "Wrong alignment on FortItem_GetIconBrush");
static_assert(sizeof(FortItem_GetIconBrush) == 0x000078, "Wrong size on FortItem_GetIconBrush");
static_assert(offsetof(FortItem_GetIconBrush, IconBrush) == 0x000000, "Member 'FortItem_GetIconBrush::IconBrush' has a wrong offset!");
static_assert(offsetof(FortItem_GetIconBrush, BrushSize) == 0x000074, "Member 'FortItem_GetIconBrush::BrushSize' has a wrong offset!");

// Function FortniteGame.FortItem.GetItemDefinitionBP
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetItemDefinitionBP final
{
public:
	class UFortItemDefinition*                    ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetItemDefinitionBP) == 0x000004, "Wrong alignment on FortItem_GetItemDefinitionBP");
static_assert(sizeof(FortItem_GetItemDefinitionBP) == 0x000004, "Wrong size on FortItem_GetItemDefinitionBP");
static_assert(offsetof(FortItem_GetItemDefinitionBP, ReturnValue) == 0x000000, "Member 'FortItem_GetItemDefinitionBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetItemGuid
// 0x0010 (0x0010 - 0x0000)
struct FortItem_GetItemGuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetItemGuid) == 0x000004, "Wrong alignment on FortItem_GetItemGuid");
static_assert(sizeof(FortItem_GetItemGuid) == 0x000010, "Wrong size on FortItem_GetItemGuid");
static_assert(offsetof(FortItem_GetItemGuid, ReturnValue) == 0x000000, "Member 'FortItem_GetItemGuid::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetLevel
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetLevel) == 0x000004, "Wrong alignment on FortItem_GetLevel");
static_assert(sizeof(FortItem_GetLevel) == 0x000004, "Wrong size on FortItem_GetLevel");
static_assert(offsetof(FortItem_GetLevel, ReturnValue) == 0x000000, "Member 'FortItem_GetLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetLoadedAmmo
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetLoadedAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetLoadedAmmo) == 0x000004, "Wrong alignment on FortItem_GetLoadedAmmo");
static_assert(sizeof(FortItem_GetLoadedAmmo) == 0x000004, "Wrong size on FortItem_GetLoadedAmmo");
static_assert(offsetof(FortItem_GetLoadedAmmo, ReturnValue) == 0x000000, "Member 'FortItem_GetLoadedAmmo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetMaxLevel
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetMaxLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetMaxLevel) == 0x000004, "Wrong alignment on FortItem_GetMaxLevel");
static_assert(sizeof(FortItem_GetMaxLevel) == 0x000004, "Wrong size on FortItem_GetMaxLevel");
static_assert(offsetof(FortItem_GetMaxLevel, ReturnValue) == 0x000000, "Member 'FortItem_GetMaxLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetNormalizedDurability
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetNormalizedDurability final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetNormalizedDurability) == 0x000004, "Wrong alignment on FortItem_GetNormalizedDurability");
static_assert(sizeof(FortItem_GetNormalizedDurability) == 0x000004, "Wrong size on FortItem_GetNormalizedDurability");
static_assert(offsetof(FortItem_GetNormalizedDurability, ReturnValue) == 0x000000, "Member 'FortItem_GetNormalizedDurability::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetNumInStack
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetNumInStack final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetNumInStack) == 0x000004, "Wrong alignment on FortItem_GetNumInStack");
static_assert(sizeof(FortItem_GetNumInStack) == 0x000004, "Wrong size on FortItem_GetNumInStack");
static_assert(offsetof(FortItem_GetNumInStack, ReturnValue) == 0x000000, "Member 'FortItem_GetNumInStack::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetPrimaryCategory
// 0x0010 (0x0010 - 0x0000)
struct FortItem_GetPrimaryCategory final
{
public:
	class FText                                   ItemCategoryText;                                  // 0x0000(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_GetPrimaryCategory) == 0x000004, "Wrong alignment on FortItem_GetPrimaryCategory");
static_assert(sizeof(FortItem_GetPrimaryCategory) == 0x000010, "Wrong size on FortItem_GetPrimaryCategory");
static_assert(offsetof(FortItem_GetPrimaryCategory, ItemCategoryText) == 0x000000, "Member 'FortItem_GetPrimaryCategory::ItemCategoryText' has a wrong offset!");
static_assert(offsetof(FortItem_GetPrimaryCategory, ReturnValue) == 0x00000C, "Member 'FortItem_GetPrimaryCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetRarity
// 0x0001 (0x0001 - 0x0000)
struct FortItem_GetRarity final
{
public:
	EFortRarity                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetRarity) == 0x000001, "Wrong alignment on FortItem_GetRarity");
static_assert(sizeof(FortItem_GetRarity) == 0x000001, "Wrong size on FortItem_GetRarity");
static_assert(offsetof(FortItem_GetRarity, ReturnValue) == 0x000000, "Member 'FortItem_GetRarity::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetRarityColor
// 0x0010 (0x0010 - 0x0000)
struct FortItem_GetRarityColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetRarityColor) == 0x000004, "Wrong alignment on FortItem_GetRarityColor");
static_assert(sizeof(FortItem_GetRarityColor) == 0x000010, "Wrong size on FortItem_GetRarityColor");
static_assert(offsetof(FortItem_GetRarityColor, ReturnValue) == 0x000000, "Member 'FortItem_GetRarityColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetRaritySecondaryColor
// 0x0010 (0x0010 - 0x0000)
struct FortItem_GetRaritySecondaryColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetRaritySecondaryColor) == 0x000004, "Wrong alignment on FortItem_GetRaritySecondaryColor");
static_assert(sizeof(FortItem_GetRaritySecondaryColor) == 0x000010, "Wrong size on FortItem_GetRaritySecondaryColor");
static_assert(offsetof(FortItem_GetRaritySecondaryColor, ReturnValue) == 0x000000, "Member 'FortItem_GetRaritySecondaryColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetRarityTextShadowColor
// 0x0010 (0x0010 - 0x0000)
struct FortItem_GetRarityTextShadowColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetRarityTextShadowColor) == 0x000004, "Wrong alignment on FortItem_GetRarityTextShadowColor");
static_assert(sizeof(FortItem_GetRarityTextShadowColor) == 0x000010, "Wrong size on FortItem_GetRarityTextShadowColor");
static_assert(offsetof(FortItem_GetRarityTextShadowColor, ReturnValue) == 0x000000, "Member 'FortItem_GetRarityTextShadowColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetRecycleValue
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetRecycleValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetRecycleValue) == 0x000004, "Wrong alignment on FortItem_GetRecycleValue");
static_assert(sizeof(FortItem_GetRecycleValue) == 0x000004, "Wrong size on FortItem_GetRecycleValue");
static_assert(offsetof(FortItem_GetRecycleValue, ReturnValue) == 0x000000, "Member 'FortItem_GetRecycleValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetRemainingAmmo
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetRemainingAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetRemainingAmmo) == 0x000004, "Wrong alignment on FortItem_GetRemainingAmmo");
static_assert(sizeof(FortItem_GetRemainingAmmo) == 0x000004, "Wrong size on FortItem_GetRemainingAmmo");
static_assert(offsetof(FortItem_GetRemainingAmmo, ReturnValue) == 0x000000, "Member 'FortItem_GetRemainingAmmo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetSchematicCraftingResultBP
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetSchematicCraftingResultBP final
{
public:
	class UFortItemDefinition*                    ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetSchematicCraftingResultBP) == 0x000004, "Wrong alignment on FortItem_GetSchematicCraftingResultBP");
static_assert(sizeof(FortItem_GetSchematicCraftingResultBP) == 0x000004, "Wrong size on FortItem_GetSchematicCraftingResultBP");
static_assert(offsetof(FortItem_GetSchematicCraftingResultBP, ReturnValue) == 0x000000, "Member 'FortItem_GetSchematicCraftingResultBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetSchematicResultType
// 0x0001 (0x0001 - 0x0000)
struct FortItem_GetSchematicResultType final
{
public:
	EFortItemType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetSchematicResultType) == 0x000001, "Wrong alignment on FortItem_GetSchematicResultType");
static_assert(sizeof(FortItem_GetSchematicResultType) == 0x000001, "Wrong size on FortItem_GetSchematicResultType");
static_assert(offsetof(FortItem_GetSchematicResultType, ReturnValue) == 0x000000, "Member 'FortItem_GetSchematicResultType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetSearchTags
// 0x000C (0x000C - 0x0000)
struct FortItem_GetSearchTags final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetSearchTags) == 0x000004, "Wrong alignment on FortItem_GetSearchTags");
static_assert(sizeof(FortItem_GetSearchTags) == 0x00000C, "Wrong size on FortItem_GetSearchTags");
static_assert(offsetof(FortItem_GetSearchTags, ReturnValue) == 0x000000, "Member 'FortItem_GetSearchTags::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetSecondaryCategory
// 0x0084 (0x0084 - 0x0000)
struct FortItem_GetSecondaryCategory final
{
public:
	class FText                                   ItemCategoryText;                                  // 0x0000(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ItemCategoryBrush;                                 // 0x000C(0x0074)(Parm, OutParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_GetSecondaryCategory) == 0x000004, "Wrong alignment on FortItem_GetSecondaryCategory");
static_assert(sizeof(FortItem_GetSecondaryCategory) == 0x000084, "Wrong size on FortItem_GetSecondaryCategory");
static_assert(offsetof(FortItem_GetSecondaryCategory, ItemCategoryText) == 0x000000, "Member 'FortItem_GetSecondaryCategory::ItemCategoryText' has a wrong offset!");
static_assert(offsetof(FortItem_GetSecondaryCategory, ItemCategoryBrush) == 0x00000C, "Member 'FortItem_GetSecondaryCategory::ItemCategoryBrush' has a wrong offset!");
static_assert(offsetof(FortItem_GetSecondaryCategory, BrushSize) == 0x000080, "Member 'FortItem_GetSecondaryCategory::BrushSize' has a wrong offset!");
static_assert(offsetof(FortItem_GetSecondaryCategory, ReturnValue) == 0x000081, "Member 'FortItem_GetSecondaryCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetTertiaryCategory
// 0x0084 (0x0084 - 0x0000)
struct FortItem_GetTertiaryCategory final
{
public:
	class FText                                   ItemCategoryText;                                  // 0x0000(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ItemCategoryBrush;                                 // 0x000C(0x0074)(Parm, OutParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_GetTertiaryCategory) == 0x000004, "Wrong alignment on FortItem_GetTertiaryCategory");
static_assert(sizeof(FortItem_GetTertiaryCategory) == 0x000084, "Wrong size on FortItem_GetTertiaryCategory");
static_assert(offsetof(FortItem_GetTertiaryCategory, ItemCategoryText) == 0x000000, "Member 'FortItem_GetTertiaryCategory::ItemCategoryText' has a wrong offset!");
static_assert(offsetof(FortItem_GetTertiaryCategory, ItemCategoryBrush) == 0x00000C, "Member 'FortItem_GetTertiaryCategory::ItemCategoryBrush' has a wrong offset!");
static_assert(offsetof(FortItem_GetTertiaryCategory, BrushSize) == 0x000080, "Member 'FortItem_GetTertiaryCategory::BrushSize' has a wrong offset!");
static_assert(offsetof(FortItem_GetTertiaryCategory, ReturnValue) == 0x000081, "Member 'FortItem_GetTertiaryCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetTier
// 0x0001 (0x0001 - 0x0000)
struct FortItem_GetTier final
{
public:
	EFortItemTier                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetTier) == 0x000001, "Wrong alignment on FortItem_GetTier");
static_assert(sizeof(FortItem_GetTier) == 0x000001, "Wrong size on FortItem_GetTier");
static_assert(offsetof(FortItem_GetTier, ReturnValue) == 0x000000, "Member 'FortItem_GetTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetType
// 0x0001 (0x0001 - 0x0000)
struct FortItem_GetType final
{
public:
	EFortItemType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetType) == 0x000001, "Wrong alignment on FortItem_GetType");
static_assert(sizeof(FortItem_GetType) == 0x000001, "Wrong size on FortItem_GetType");
static_assert(offsetof(FortItem_GetType, ReturnValue) == 0x000000, "Member 'FortItem_GetType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.GetUpgradeCost
// 0x0004 (0x0004 - 0x0000)
struct FortItem_GetUpgradeCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_GetUpgradeCost) == 0x000004, "Wrong alignment on FortItem_GetUpgradeCost");
static_assert(sizeof(FortItem_GetUpgradeCost) == 0x000004, "Wrong size on FortItem_GetUpgradeCost");
static_assert(offsetof(FortItem_GetUpgradeCost, ReturnValue) == 0x000000, "Member 'FortItem_GetUpgradeCost::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.HasDurability
// 0x0001 (0x0001 - 0x0000)
struct FortItem_HasDurability final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_HasDurability) == 0x000001, "Wrong alignment on FortItem_HasDurability");
static_assert(sizeof(FortItem_HasDurability) == 0x000001, "Wrong size on FortItem_HasDurability");
static_assert(offsetof(FortItem_HasDurability, ReturnValue) == 0x000000, "Member 'FortItem_HasDurability::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsActivatable
// 0x0008 (0x0008 - 0x0000)
struct FortItem_IsActivatable final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_IsActivatable) == 0x000004, "Wrong alignment on FortItem_IsActivatable");
static_assert(sizeof(FortItem_IsActivatable) == 0x000008, "Wrong size on FortItem_IsActivatable");
static_assert(offsetof(FortItem_IsActivatable, FortPC) == 0x000000, "Member 'FortItem_IsActivatable::FortPC' has a wrong offset!");
static_assert(offsetof(FortItem_IsActivatable, ReturnValue) == 0x000004, "Member 'FortItem_IsActivatable::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsAlterationSlotActive
// 0x0008 (0x0008 - 0x0000)
struct FortItem_IsAlterationSlotActive final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_IsAlterationSlotActive) == 0x000004, "Wrong alignment on FortItem_IsAlterationSlotActive");
static_assert(sizeof(FortItem_IsAlterationSlotActive) == 0x000008, "Wrong size on FortItem_IsAlterationSlotActive");
static_assert(offsetof(FortItem_IsAlterationSlotActive, SlotIndex) == 0x000000, "Member 'FortItem_IsAlterationSlotActive::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortItem_IsAlterationSlotActive, ReturnValue) == 0x000004, "Member 'FortItem_IsAlterationSlotActive::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsEquipable
// 0x0008 (0x0008 - 0x0000)
struct FortItem_IsEquipable final
{
public:
	const class AFortPlayerController*            EquippingPC;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItem_IsEquipable) == 0x000004, "Wrong alignment on FortItem_IsEquipable");
static_assert(sizeof(FortItem_IsEquipable) == 0x000008, "Wrong size on FortItem_IsEquipable");
static_assert(offsetof(FortItem_IsEquipable, EquippingPC) == 0x000000, "Member 'FortItem_IsEquipable::EquippingPC' has a wrong offset!");
static_assert(offsetof(FortItem_IsEquipable, ReturnValue) == 0x000004, "Member 'FortItem_IsEquipable::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct FortItem_IsEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_IsEquipped) == 0x000001, "Wrong alignment on FortItem_IsEquipped");
static_assert(sizeof(FortItem_IsEquipped) == 0x000001, "Wrong size on FortItem_IsEquipped");
static_assert(offsetof(FortItem_IsEquipped, ReturnValue) == 0x000000, "Member 'FortItem_IsEquipped::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsInBackpackOverflow
// 0x0001 (0x0001 - 0x0000)
struct FortItem_IsInBackpackOverflow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_IsInBackpackOverflow) == 0x000001, "Wrong alignment on FortItem_IsInBackpackOverflow");
static_assert(sizeof(FortItem_IsInBackpackOverflow) == 0x000001, "Wrong size on FortItem_IsInBackpackOverflow");
static_assert(offsetof(FortItem_IsInBackpackOverflow, ReturnValue) == 0x000000, "Member 'FortItem_IsInBackpackOverflow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsInStorageVault
// 0x0001 (0x0001 - 0x0000)
struct FortItem_IsInStorageVault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_IsInStorageVault) == 0x000001, "Wrong alignment on FortItem_IsInStorageVault");
static_assert(sizeof(FortItem_IsInStorageVault) == 0x000001, "Wrong size on FortItem_IsInStorageVault");
static_assert(offsetof(FortItem_IsInStorageVault, ReturnValue) == 0x000000, "Member 'FortItem_IsInStorageVault::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsSchematic
// 0x0001 (0x0001 - 0x0000)
struct FortItem_IsSchematic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_IsSchematic) == 0x000001, "Wrong alignment on FortItem_IsSchematic");
static_assert(sizeof(FortItem_IsSchematic) == 0x000001, "Wrong size on FortItem_IsSchematic");
static_assert(offsetof(FortItem_IsSchematic, ReturnValue) == 0x000000, "Member 'FortItem_IsSchematic::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItem.IsSlotted
// 0x0001 (0x0001 - 0x0000)
struct FortItem_IsSlotted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItem_IsSlotted) == 0x000001, "Wrong alignment on FortItem_IsSlotted");
static_assert(sizeof(FortItem_IsSlotted) == 0x000001, "Wrong size on FortItem_IsSlotted");
static_assert(offsetof(FortItem_IsSlotted, ReturnValue) == 0x000000, "Member 'FortItem_IsSlotted::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDialogNotification.OpenTalkingHead
// 0x0010 (0x0010 - 0x0000)
struct FortDialogNotification_OpenTalkingHead final
{
public:
	class UTexture2D*                             Image;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0004(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDialogNotification_OpenTalkingHead) == 0x000004, "Wrong alignment on FortDialogNotification_OpenTalkingHead");
static_assert(sizeof(FortDialogNotification_OpenTalkingHead) == 0x000010, "Wrong size on FortDialogNotification_OpenTalkingHead");
static_assert(offsetof(FortDialogNotification_OpenTalkingHead, Image) == 0x000000, "Member 'FortDialogNotification_OpenTalkingHead::Image' has a wrong offset!");
static_assert(offsetof(FortDialogNotification_OpenTalkingHead, Title) == 0x000004, "Member 'FortDialogNotification_OpenTalkingHead::Title' has a wrong offset!");

// Function FortniteGame.FortAccountItem.HasBeenSeenLocally
// 0x0001 (0x0001 - 0x0000)
struct FortAccountItem_HasBeenSeenLocally final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAccountItem_HasBeenSeenLocally) == 0x000001, "Wrong alignment on FortAccountItem_HasBeenSeenLocally");
static_assert(sizeof(FortAccountItem_HasBeenSeenLocally) == 0x000001, "Wrong size on FortAccountItem_HasBeenSeenLocally");
static_assert(offsetof(FortAccountItem_HasBeenSeenLocally, ReturnValue) == 0x000000, "Member 'FortAccountItem_HasBeenSeenLocally::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorker.GetSecondaryCategory
// 0x0084 (0x0084 - 0x0000)
struct FortWorker_GetSecondaryCategory final
{
public:
	class FText                                   ItemCategoryText;                                  // 0x0000(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ItemCategoryBrush;                                 // 0x000C(0x0074)(Parm, OutParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWorker_GetSecondaryCategory) == 0x000004, "Wrong alignment on FortWorker_GetSecondaryCategory");
static_assert(sizeof(FortWorker_GetSecondaryCategory) == 0x000084, "Wrong size on FortWorker_GetSecondaryCategory");
static_assert(offsetof(FortWorker_GetSecondaryCategory, ItemCategoryText) == 0x000000, "Member 'FortWorker_GetSecondaryCategory::ItemCategoryText' has a wrong offset!");
static_assert(offsetof(FortWorker_GetSecondaryCategory, ItemCategoryBrush) == 0x00000C, "Member 'FortWorker_GetSecondaryCategory::ItemCategoryBrush' has a wrong offset!");
static_assert(offsetof(FortWorker_GetSecondaryCategory, BrushSize) == 0x000080, "Member 'FortWorker_GetSecondaryCategory::BrushSize' has a wrong offset!");
static_assert(offsetof(FortWorker_GetSecondaryCategory, ReturnValue) == 0x000081, "Member 'FortWorker_GetSecondaryCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorker.GetTertiaryCategory
// 0x0084 (0x0084 - 0x0000)
struct FortWorker_GetTertiaryCategory final
{
public:
	class FText                                   ItemCategoryText;                                  // 0x0000(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ItemCategoryBrush;                                 // 0x000C(0x0074)(Parm, OutParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                BrushSize;                                         // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0081(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWorker_GetTertiaryCategory) == 0x000004, "Wrong alignment on FortWorker_GetTertiaryCategory");
static_assert(sizeof(FortWorker_GetTertiaryCategory) == 0x000084, "Wrong size on FortWorker_GetTertiaryCategory");
static_assert(offsetof(FortWorker_GetTertiaryCategory, ItemCategoryText) == 0x000000, "Member 'FortWorker_GetTertiaryCategory::ItemCategoryText' has a wrong offset!");
static_assert(offsetof(FortWorker_GetTertiaryCategory, ItemCategoryBrush) == 0x00000C, "Member 'FortWorker_GetTertiaryCategory::ItemCategoryBrush' has a wrong offset!");
static_assert(offsetof(FortWorker_GetTertiaryCategory, BrushSize) == 0x000080, "Member 'FortWorker_GetTertiaryCategory::BrushSize' has a wrong offset!");
static_assert(offsetof(FortWorker_GetTertiaryCategory, ReturnValue) == 0x000081, "Member 'FortWorker_GetTertiaryCategory::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorker.GetWorkerTypeBP
// 0x0004 (0x0004 - 0x0000)
struct FortWorker_GetWorkerTypeBP final
{
public:
	class UFortWorkerType*                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWorker_GetWorkerTypeBP) == 0x000004, "Wrong alignment on FortWorker_GetWorkerTypeBP");
static_assert(sizeof(FortWorker_GetWorkerTypeBP) == 0x000004, "Wrong size on FortWorker_GetWorkerTypeBP");
static_assert(offsetof(FortWorker_GetWorkerTypeBP, ReturnValue) == 0x000000, "Member 'FortWorker_GetWorkerTypeBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHero.GetHeroTypeBP
// 0x0004 (0x0004 - 0x0000)
struct FortHero_GetHeroTypeBP final
{
public:
	class UFortHeroType*                          ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHero_GetHeroTypeBP) == 0x000004, "Wrong alignment on FortHero_GetHeroTypeBP");
static_assert(sizeof(FortHero_GetHeroTypeBP) == 0x000004, "Wrong size on FortHero_GetHeroTypeBP");
static_assert(offsetof(FortHero_GetHeroTypeBP, ReturnValue) == 0x000000, "Member 'FortHero_GetHeroTypeBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownBuildingDefinitionData.GetBuildingTemplateId
// 0x000C (0x000C - 0x0000)
struct MyTownBuildingDefinitionData_GetBuildingTemplateId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownBuildingDefinitionData_GetBuildingTemplateId) == 0x000004, "Wrong alignment on MyTownBuildingDefinitionData_GetBuildingTemplateId");
static_assert(sizeof(MyTownBuildingDefinitionData_GetBuildingTemplateId) == 0x00000C, "Wrong size on MyTownBuildingDefinitionData_GetBuildingTemplateId");
static_assert(offsetof(MyTownBuildingDefinitionData_GetBuildingTemplateId, ReturnValue) == 0x000000, "Member 'MyTownBuildingDefinitionData_GetBuildingTemplateId::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownBuildingDefinitionData.GetDescription
// 0x000C (0x000C - 0x0000)
struct MyTownBuildingDefinitionData_GetDescription final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownBuildingDefinitionData_GetDescription) == 0x000004, "Wrong alignment on MyTownBuildingDefinitionData_GetDescription");
static_assert(sizeof(MyTownBuildingDefinitionData_GetDescription) == 0x00000C, "Wrong size on MyTownBuildingDefinitionData_GetDescription");
static_assert(offsetof(MyTownBuildingDefinitionData_GetDescription, ReturnValue) == 0x000000, "Member 'MyTownBuildingDefinitionData_GetDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.ApplyAlteration
// 0x0008 (0x0008 - 0x0000)
struct FortMcpContext_ApplyAlteration final
{
public:
	class UFortAlterableItem*                     Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAlterationItem*                    AlterationToApply;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_ApplyAlteration) == 0x000004, "Wrong alignment on FortMcpContext_ApplyAlteration");
static_assert(sizeof(FortMcpContext_ApplyAlteration) == 0x000008, "Wrong size on FortMcpContext_ApplyAlteration");
static_assert(offsetof(FortMcpContext_ApplyAlteration, Item) == 0x000000, "Member 'FortMcpContext_ApplyAlteration::Item' has a wrong offset!");
static_assert(offsetof(FortMcpContext_ApplyAlteration, AlterationToApply) == 0x000004, "Member 'FortMcpContext_ApplyAlteration::AlterationToApply' has a wrong offset!");

// Function FortniteGame.FortMcpContext.ListMtxPackages
// 0x0010 (0x0010 - 0x0000)
struct FortMcpContext_ListMtxPackages final
{
public:
	TDelegate<void(const TArray<struct FMtxPackage>& Offers)> Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_ListMtxPackages) == 0x000004, "Wrong alignment on FortMcpContext_ListMtxPackages");
static_assert(sizeof(FortMcpContext_ListMtxPackages) == 0x000010, "Wrong size on FortMcpContext_ListMtxPackages");
static_assert(offsetof(FortMcpContext_ListMtxPackages, Callback) == 0x000000, "Member 'FortMcpContext_ListMtxPackages::Callback' has a wrong offset!");

// Function FortniteGame.FortMcpContext.MarkItemSeen
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_MarkItemSeen final
{
public:
	const class UFortAccountItem*                 ItemToMarkSeen;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_MarkItemSeen) == 0x000004, "Wrong alignment on FortMcpContext_MarkItemSeen");
static_assert(sizeof(FortMcpContext_MarkItemSeen) == 0x000004, "Wrong size on FortMcpContext_MarkItemSeen");
static_assert(offsetof(FortMcpContext_MarkItemSeen, ItemToMarkSeen) == 0x000000, "Member 'FortMcpContext_MarkItemSeen::ItemToMarkSeen' has a wrong offset!");

// Function FortniteGame.FortMcpContext.PurchaseRealMoneyCatalogEntry
// 0x001C (0x001C - 0x0000)
struct FortMcpContext_PurchaseRealMoneyCatalogEntry final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess)>                Callback;                                          // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_PurchaseRealMoneyCatalogEntry) == 0x000004, "Wrong alignment on FortMcpContext_PurchaseRealMoneyCatalogEntry");
static_assert(sizeof(FortMcpContext_PurchaseRealMoneyCatalogEntry) == 0x00001C, "Wrong size on FortMcpContext_PurchaseRealMoneyCatalogEntry");
static_assert(offsetof(FortMcpContext_PurchaseRealMoneyCatalogEntry, OfferId) == 0x000000, "Member 'FortMcpContext_PurchaseRealMoneyCatalogEntry::OfferId' has a wrong offset!");
static_assert(offsetof(FortMcpContext_PurchaseRealMoneyCatalogEntry, Callback) == 0x00000C, "Member 'FortMcpContext_PurchaseRealMoneyCatalogEntry::Callback' has a wrong offset!");

// Function FortniteGame.FortMcpContext.RecycleItem
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_RecycleItem final
{
public:
	const class UFortItem*                        ItemToRecycle;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_RecycleItem) == 0x000004, "Wrong alignment on FortMcpContext_RecycleItem");
static_assert(sizeof(FortMcpContext_RecycleItem) == 0x000004, "Wrong size on FortMcpContext_RecycleItem");
static_assert(offsetof(FortMcpContext_RecycleItem, ItemToRecycle) == 0x000000, "Member 'FortMcpContext_RecycleItem::ItemToRecycle' has a wrong offset!");

// Function FortniteGame.FortMcpContext.RegisterForEpicPurchasingDisplay
// 0x0020 (0x0020 - 0x0000)
struct FortMcpContext_RegisterForEpicPurchasingDisplay final
{
public:
	TDelegate<void(class UWidget* WebWidget, const class FString& OfferId)> DisplayCallback;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void()>                             DismissCallback;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_RegisterForEpicPurchasingDisplay) == 0x000004, "Wrong alignment on FortMcpContext_RegisterForEpicPurchasingDisplay");
static_assert(sizeof(FortMcpContext_RegisterForEpicPurchasingDisplay) == 0x000020, "Wrong size on FortMcpContext_RegisterForEpicPurchasingDisplay");
static_assert(offsetof(FortMcpContext_RegisterForEpicPurchasingDisplay, DisplayCallback) == 0x000000, "Member 'FortMcpContext_RegisterForEpicPurchasingDisplay::DisplayCallback' has a wrong offset!");
static_assert(offsetof(FortMcpContext_RegisterForEpicPurchasingDisplay, DismissCallback) == 0x000010, "Member 'FortMcpContext_RegisterForEpicPurchasingDisplay::DismissCallback' has a wrong offset!");

// Function FortniteGame.FortMcpContext.UpgradeItem
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_UpgradeItem final
{
public:
	const class UFortItem*                        ItemToUpgrade;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_UpgradeItem) == 0x000004, "Wrong alignment on FortMcpContext_UpgradeItem");
static_assert(sizeof(FortMcpContext_UpgradeItem) == 0x000004, "Wrong size on FortMcpContext_UpgradeItem");
static_assert(offsetof(FortMcpContext_UpgradeItem, ItemToUpgrade) == 0x000000, "Member 'FortMcpContext_UpgradeItem::ItemToUpgrade' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetAccountItemWithDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortMcpContext_GetAccountItemWithDefinition final
{
public:
	const class UFortAccountItemDefinition*       AccountItemDefinition;                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAccountItem*                       ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetAccountItemWithDefinition) == 0x000004, "Wrong alignment on FortMcpContext_GetAccountItemWithDefinition");
static_assert(sizeof(FortMcpContext_GetAccountItemWithDefinition) == 0x000008, "Wrong size on FortMcpContext_GetAccountItemWithDefinition");
static_assert(offsetof(FortMcpContext_GetAccountItemWithDefinition, AccountItemDefinition) == 0x000000, "Member 'FortMcpContext_GetAccountItemWithDefinition::AccountItemDefinition' has a wrong offset!");
static_assert(offsetof(FortMcpContext_GetAccountItemWithDefinition, ReturnValue) == 0x000004, "Member 'FortMcpContext_GetAccountItemWithDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetAllAlterations
// 0x0010 (0x0010 - 0x0000)
struct FortMcpContext_GetAllAlterations final
{
public:
	TArray<class UFortAlterationItem*>            OutAlterations;                                    // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EFortAlteration                               InAlterationType;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpContext_GetAllAlterations) == 0x000004, "Wrong alignment on FortMcpContext_GetAllAlterations");
static_assert(sizeof(FortMcpContext_GetAllAlterations) == 0x000010, "Wrong size on FortMcpContext_GetAllAlterations");
static_assert(offsetof(FortMcpContext_GetAllAlterations, OutAlterations) == 0x000000, "Member 'FortMcpContext_GetAllAlterations::OutAlterations' has a wrong offset!");
static_assert(offsetof(FortMcpContext_GetAllAlterations, InAlterationType) == 0x00000C, "Member 'FortMcpContext_GetAllAlterations::InAlterationType' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetAllHeroes
// 0x000C (0x000C - 0x0000)
struct FortMcpContext_GetAllHeroes final
{
public:
	TArray<class UFortHero*>                      Result;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetAllHeroes) == 0x000004, "Wrong alignment on FortMcpContext_GetAllHeroes");
static_assert(sizeof(FortMcpContext_GetAllHeroes) == 0x00000C, "Wrong size on FortMcpContext_GetAllHeroes");
static_assert(offsetof(FortMcpContext_GetAllHeroes, Result) == 0x000000, "Member 'FortMcpContext_GetAllHeroes::Result' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetCurrentlyViewedAccountInfo
// 0x0018 (0x0018 - 0x0000)
struct FortMcpContext_GetCurrentlyViewedAccountInfo final
{
public:
	struct FFortPublicAccountInfo                 Result;                                            // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetCurrentlyViewedAccountInfo) == 0x000004, "Wrong alignment on FortMcpContext_GetCurrentlyViewedAccountInfo");
static_assert(sizeof(FortMcpContext_GetCurrentlyViewedAccountInfo) == 0x000018, "Wrong size on FortMcpContext_GetCurrentlyViewedAccountInfo");
static_assert(offsetof(FortMcpContext_GetCurrentlyViewedAccountInfo, Result) == 0x000000, "Member 'FortMcpContext_GetCurrentlyViewedAccountInfo::Result' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetDefaultHero
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_GetDefaultHero final
{
public:
	class UFortHero*                              ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetDefaultHero) == 0x000004, "Wrong alignment on FortMcpContext_GetDefaultHero");
static_assert(sizeof(FortMcpContext_GetDefaultHero) == 0x000004, "Wrong size on FortMcpContext_GetDefaultHero");
static_assert(offsetof(FortMcpContext_GetDefaultHero, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetDefaultHero::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetHomeBaseInfo
// 0x011C (0x011C - 0x0000)
struct FortMcpContext_GetHomeBaseInfo final
{
public:
	struct FFortHomeBaseInfo                      Result;                                            // 0x0000(0x011C)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetHomeBaseInfo) == 0x000004, "Wrong alignment on FortMcpContext_GetHomeBaseInfo");
static_assert(sizeof(FortMcpContext_GetHomeBaseInfo) == 0x00011C, "Wrong size on FortMcpContext_GetHomeBaseInfo");
static_assert(offsetof(FortMcpContext_GetHomeBaseInfo, Result) == 0x000000, "Member 'FortMcpContext_GetHomeBaseInfo::Result' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetHomeBaseInfoForPlayer
// 0x0124 (0x0124 - 0x0000)
struct FortMcpContext_GetHomeBaseInfoForPlayer final
{
public:
	struct FFortHomeBaseInfo                      Result;                                            // 0x0000(0x011C)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       MemberUniqueId;                                    // 0x011C(0x0008)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetHomeBaseInfoForPlayer) == 0x000004, "Wrong alignment on FortMcpContext_GetHomeBaseInfoForPlayer");
static_assert(sizeof(FortMcpContext_GetHomeBaseInfoForPlayer) == 0x000124, "Wrong size on FortMcpContext_GetHomeBaseInfoForPlayer");
static_assert(offsetof(FortMcpContext_GetHomeBaseInfoForPlayer, Result) == 0x000000, "Member 'FortMcpContext_GetHomeBaseInfoForPlayer::Result' has a wrong offset!");
static_assert(offsetof(FortMcpContext_GetHomeBaseInfoForPlayer, MemberUniqueId) == 0x00011C, "Member 'FortMcpContext_GetHomeBaseInfoForPlayer::MemberUniqueId' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetLocalAccountInfo
// 0x001C (0x001C - 0x0000)
struct FortMcpContext_GetLocalAccountInfo final
{
public:
	struct FFortPrivateAccountInfo                Result;                                            // 0x0000(0x001C)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetLocalAccountInfo) == 0x000004, "Wrong alignment on FortMcpContext_GetLocalAccountInfo");
static_assert(sizeof(FortMcpContext_GetLocalAccountInfo) == 0x00001C, "Wrong size on FortMcpContext_GetLocalAccountInfo");
static_assert(offsetof(FortMcpContext_GetLocalAccountInfo, Result) == 0x000000, "Member 'FortMcpContext_GetLocalAccountInfo::Result' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetPersonnelXpBalance
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_GetPersonnelXpBalance final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetPersonnelXpBalance) == 0x000004, "Wrong alignment on FortMcpContext_GetPersonnelXpBalance");
static_assert(sizeof(FortMcpContext_GetPersonnelXpBalance) == 0x000004, "Wrong size on FortMcpContext_GetPersonnelXpBalance");
static_assert(offsetof(FortMcpContext_GetPersonnelXpBalance, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetPersonnelXpBalance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.GetSchematicXpBalance
// 0x0004 (0x0004 - 0x0000)
struct FortMcpContext_GetSchematicXpBalance final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpContext_GetSchematicXpBalance) == 0x000004, "Wrong alignment on FortMcpContext_GetSchematicXpBalance");
static_assert(sizeof(FortMcpContext_GetSchematicXpBalance) == 0x000004, "Wrong size on FortMcpContext_GetSchematicXpBalance");
static_assert(offsetof(FortMcpContext_GetSchematicXpBalance, ReturnValue) == 0x000000, "Member 'FortMcpContext_GetSchematicXpBalance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.IsDailyRewardAvailable
// 0x0008 (0x0008 - 0x0000)
struct FortMcpContext_IsDailyRewardAvailable final
{
public:
	float                                         OutSecondsUntilNextReward;                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutRewardAvailable;                                // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpContext_IsDailyRewardAvailable) == 0x000004, "Wrong alignment on FortMcpContext_IsDailyRewardAvailable");
static_assert(sizeof(FortMcpContext_IsDailyRewardAvailable) == 0x000008, "Wrong size on FortMcpContext_IsDailyRewardAvailable");
static_assert(offsetof(FortMcpContext_IsDailyRewardAvailable, OutSecondsUntilNextReward) == 0x000000, "Member 'FortMcpContext_IsDailyRewardAvailable::OutSecondsUntilNextReward' has a wrong offset!");
static_assert(offsetof(FortMcpContext_IsDailyRewardAvailable, OutRewardAvailable) == 0x000004, "Member 'FortMcpContext_IsDailyRewardAvailable::OutRewardAvailable' has a wrong offset!");
static_assert(offsetof(FortMcpContext_IsDailyRewardAvailable, ReturnValue) == 0x000005, "Member 'FortMcpContext_IsDailyRewardAvailable::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpContext.IsLocalPlayersUniqueID
// 0x000C (0x000C - 0x0000)
struct FortMcpContext_IsLocalPlayersUniqueID final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMcpContext_IsLocalPlayersUniqueID) == 0x000004, "Wrong alignment on FortMcpContext_IsLocalPlayersUniqueID");
static_assert(sizeof(FortMcpContext_IsLocalPlayersUniqueID) == 0x00000C, "Wrong size on FortMcpContext_IsLocalPlayersUniqueID");
static_assert(offsetof(FortMcpContext_IsLocalPlayersUniqueID, PlayerID) == 0x000000, "Member 'FortMcpContext_IsLocalPlayersUniqueID::PlayerID' has a wrong offset!");
static_assert(offsetof(FortMcpContext_IsLocalPlayersUniqueID, ReturnValue) == 0x000008, "Member 'FortMcpContext_IsLocalPlayersUniqueID::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.DepositPOSTResource
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostContext_DepositPOSTResource final
{
public:
	const class UFortItemDefinition*              ResourceItem;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_DepositPOSTResource) == 0x000004, "Wrong alignment on FortOutpostContext_DepositPOSTResource");
static_assert(sizeof(FortOutpostContext_DepositPOSTResource) == 0x000008, "Wrong size on FortOutpostContext_DepositPOSTResource");
static_assert(offsetof(FortOutpostContext_DepositPOSTResource, ResourceItem) == 0x000000, "Member 'FortOutpostContext_DepositPOSTResource::ResourceItem' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_DepositPOSTResource, Count) == 0x000004, "Member 'FortOutpostContext_DepositPOSTResource::Count' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.UpgradeStructure
// 0x0004 (0x0004 - 0x0000)
struct FortOutpostContext_UpgradeStructure final
{
public:
	class UFortOutpostItemDefinition*             StructureToUpgrade;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_UpgradeStructure) == 0x000004, "Wrong alignment on FortOutpostContext_UpgradeStructure");
static_assert(sizeof(FortOutpostContext_UpgradeStructure) == 0x000004, "Wrong size on FortOutpostContext_UpgradeStructure");
static_assert(offsetof(FortOutpostContext_UpgradeStructure, StructureToUpgrade) == 0x000000, "Member 'FortOutpostContext_UpgradeStructure::StructureToUpgrade' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.CanUpgradePOST
// 0x0001 (0x0001 - 0x0000)
struct FortOutpostContext_CanUpgradePOST final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_CanUpgradePOST) == 0x000001, "Wrong alignment on FortOutpostContext_CanUpgradePOST");
static_assert(sizeof(FortOutpostContext_CanUpgradePOST) == 0x000001, "Wrong size on FortOutpostContext_CanUpgradePOST");
static_assert(offsetof(FortOutpostContext_CanUpgradePOST, ReturnValue) == 0x000000, "Member 'FortOutpostContext_CanUpgradePOST::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.CanUpgradeStructure
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostContext_CanUpgradeStructure final
{
public:
	class UFortOutpostItemDefinition*             OutpostStructure;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLog;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostContext_CanUpgradeStructure) == 0x000004, "Wrong alignment on FortOutpostContext_CanUpgradeStructure");
static_assert(sizeof(FortOutpostContext_CanUpgradeStructure) == 0x000008, "Wrong size on FortOutpostContext_CanUpgradeStructure");
static_assert(offsetof(FortOutpostContext_CanUpgradeStructure, OutpostStructure) == 0x000000, "Member 'FortOutpostContext_CanUpgradeStructure::OutpostStructure' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_CanUpgradeStructure, bLog) == 0x000004, "Member 'FortOutpostContext_CanUpgradeStructure::bLog' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_CanUpgradeStructure, ReturnValue) == 0x000005, "Member 'FortOutpostContext_CanUpgradeStructure::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetHarvestingToolForLevel
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostContext_GetHarvestingToolForLevel final
{
public:
	int32                                         InHarvestingOptimizerLevel;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetHarvestingToolForLevel) == 0x000004, "Wrong alignment on FortOutpostContext_GetHarvestingToolForLevel");
static_assert(sizeof(FortOutpostContext_GetHarvestingToolForLevel) == 0x000008, "Wrong size on FortOutpostContext_GetHarvestingToolForLevel");
static_assert(offsetof(FortOutpostContext_GetHarvestingToolForLevel, InHarvestingOptimizerLevel) == 0x000000, "Member 'FortOutpostContext_GetHarvestingToolForLevel::InHarvestingOptimizerLevel' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetHarvestingToolForLevel, ReturnValue) == 0x000004, "Member 'FortOutpostContext_GetHarvestingToolForLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetNextPOSTLevelRequirements
// 0x000C (0x000C - 0x0000)
struct FortOutpostContext_GetNextPOSTLevelRequirements final
{
public:
	TArray<class UOutpostPOSTRequirementData*>    ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetNextPOSTLevelRequirements) == 0x000004, "Wrong alignment on FortOutpostContext_GetNextPOSTLevelRequirements");
static_assert(sizeof(FortOutpostContext_GetNextPOSTLevelRequirements) == 0x00000C, "Wrong size on FortOutpostContext_GetNextPOSTLevelRequirements");
static_assert(offsetof(FortOutpostContext_GetNextPOSTLevelRequirements, ReturnValue) == 0x000000, "Member 'FortOutpostContext_GetNextPOSTLevelRequirements::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetOutpostPrestigeLevel
// 0x0004 (0x0004 - 0x0000)
struct FortOutpostContext_GetOutpostPrestigeLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetOutpostPrestigeLevel) == 0x000004, "Wrong alignment on FortOutpostContext_GetOutpostPrestigeLevel");
static_assert(sizeof(FortOutpostContext_GetOutpostPrestigeLevel) == 0x000004, "Wrong size on FortOutpostContext_GetOutpostPrestigeLevel");
static_assert(offsetof(FortOutpostContext_GetOutpostPrestigeLevel, ReturnValue) == 0x000000, "Member 'FortOutpostContext_GetOutpostPrestigeLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetOutpostStructure
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostContext_GetOutpostStructure final
{
public:
	class UFortOutpostItemDefinition*             OutpostStructure;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AOutpostStructureBase*                  ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetOutpostStructure) == 0x000004, "Wrong alignment on FortOutpostContext_GetOutpostStructure");
static_assert(sizeof(FortOutpostContext_GetOutpostStructure) == 0x000008, "Wrong size on FortOutpostContext_GetOutpostStructure");
static_assert(offsetof(FortOutpostContext_GetOutpostStructure, OutpostStructure) == 0x000000, "Member 'FortOutpostContext_GetOutpostStructure::OutpostStructure' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetOutpostStructure, ReturnValue) == 0x000004, "Member 'FortOutpostContext_GetOutpostStructure::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetPOSTBuildingHealthMod
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostContext_GetPOSTBuildingHealthMod final
{
public:
	int32                                         POSTLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetPOSTBuildingHealthMod) == 0x000004, "Wrong alignment on FortOutpostContext_GetPOSTBuildingHealthMod");
static_assert(sizeof(FortOutpostContext_GetPOSTBuildingHealthMod) == 0x000008, "Wrong size on FortOutpostContext_GetPOSTBuildingHealthMod");
static_assert(offsetof(FortOutpostContext_GetPOSTBuildingHealthMod, POSTLevel) == 0x000000, "Member 'FortOutpostContext_GetPOSTBuildingHealthMod::POSTLevel' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetPOSTBuildingHealthMod, ReturnValue) == 0x000004, "Member 'FortOutpostContext_GetPOSTBuildingHealthMod::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetStormShieldLevelDefended
// 0x0004 (0x0004 - 0x0000)
struct FortOutpostContext_GetStormShieldLevelDefended final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetStormShieldLevelDefended) == 0x000004, "Wrong alignment on FortOutpostContext_GetStormShieldLevelDefended");
static_assert(sizeof(FortOutpostContext_GetStormShieldLevelDefended) == 0x000004, "Wrong size on FortOutpostContext_GetStormShieldLevelDefended");
static_assert(offsetof(FortOutpostContext_GetStormShieldLevelDefended, ReturnValue) == 0x000000, "Member 'FortOutpostContext_GetStormShieldLevelDefended::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetStructureLevel
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostContext_GetStructureLevel final
{
public:
	class UFortOutpostItemDefinition*             OutpostStructure;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetStructureLevel) == 0x000004, "Wrong alignment on FortOutpostContext_GetStructureLevel");
static_assert(sizeof(FortOutpostContext_GetStructureLevel) == 0x000008, "Wrong size on FortOutpostContext_GetStructureLevel");
static_assert(offsetof(FortOutpostContext_GetStructureLevel, OutpostStructure) == 0x000000, "Member 'FortOutpostContext_GetStructureLevel::OutpostStructure' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetStructureLevel, ReturnValue) == 0x000004, "Member 'FortOutpostContext_GetStructureLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetStructureMaxLevel
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostContext_GetStructureMaxLevel final
{
public:
	class UFortOutpostItemDefinition*             OutpostStructure;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetStructureMaxLevel) == 0x000004, "Wrong alignment on FortOutpostContext_GetStructureMaxLevel");
static_assert(sizeof(FortOutpostContext_GetStructureMaxLevel) == 0x000008, "Wrong size on FortOutpostContext_GetStructureMaxLevel");
static_assert(offsetof(FortOutpostContext_GetStructureMaxLevel, OutpostStructure) == 0x000000, "Member 'FortOutpostContext_GetStructureMaxLevel::OutpostStructure' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetStructureMaxLevel, ReturnValue) == 0x000004, "Member 'FortOutpostContext_GetStructureMaxLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.GetUpgradeStructureCost
// 0x001C (0x001C - 0x0000)
struct FortOutpostContext_GetUpgradeStructureCost final
{
public:
	class UFortOutpostItemDefinition*             OutpostStructure;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutWorldItems;                                     // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutAccountItems;                                   // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_GetUpgradeStructureCost) == 0x000004, "Wrong alignment on FortOutpostContext_GetUpgradeStructureCost");
static_assert(sizeof(FortOutpostContext_GetUpgradeStructureCost) == 0x00001C, "Wrong size on FortOutpostContext_GetUpgradeStructureCost");
static_assert(offsetof(FortOutpostContext_GetUpgradeStructureCost, OutpostStructure) == 0x000000, "Member 'FortOutpostContext_GetUpgradeStructureCost::OutpostStructure' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetUpgradeStructureCost, OutWorldItems) == 0x000004, "Member 'FortOutpostContext_GetUpgradeStructureCost::OutWorldItems' has a wrong offset!");
static_assert(offsetof(FortOutpostContext_GetUpgradeStructureCost, OutAccountItems) == 0x000010, "Member 'FortOutpostContext_GetUpgradeStructureCost::OutAccountItems' has a wrong offset!");

// Function FortniteGame.FortOutpostContext.IsPrestigeAllowed
// 0x0001 (0x0001 - 0x0000)
struct FortOutpostContext_IsPrestigeAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostContext_IsPrestigeAllowed) == 0x000001, "Wrong alignment on FortOutpostContext_IsPrestigeAllowed");
static_assert(sizeof(FortOutpostContext_IsPrestigeAllowed) == 0x000001, "Wrong size on FortOutpostContext_IsPrestigeAllowed");
static_assert(offsetof(FortOutpostContext_IsPrestigeAllowed, ReturnValue) == 0x000000, "Member 'FortOutpostContext_IsPrestigeAllowed::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortUITeamInfo.GetTeamHitPointFractions
// 0x0018 (0x0018 - 0x0000)
struct FortUITeamInfo_GetTeamHitPointFractions final
{
public:
	TArray<float>                                 HealthFractions;                                   // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ShieldFractions;                                   // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUITeamInfo_GetTeamHitPointFractions) == 0x000004, "Wrong alignment on FortUITeamInfo_GetTeamHitPointFractions");
static_assert(sizeof(FortUITeamInfo_GetTeamHitPointFractions) == 0x000018, "Wrong size on FortUITeamInfo_GetTeamHitPointFractions");
static_assert(offsetof(FortUITeamInfo_GetTeamHitPointFractions, HealthFractions) == 0x000000, "Member 'FortUITeamInfo_GetTeamHitPointFractions::HealthFractions' has a wrong offset!");
static_assert(offsetof(FortUITeamInfo_GetTeamHitPointFractions, ShieldFractions) == 0x00000C, "Member 'FortUITeamInfo_GetTeamHitPointFractions::ShieldFractions' has a wrong offset!");

// Function FortniteGame.FortUITeamInfo.GetTeamMemberIDs
// 0x000C (0x000C - 0x0000)
struct FortUITeamInfo_GetTeamMemberIDs final
{
public:
	TArray<struct FUniqueNetIdRepl>               TeamMemberIDs;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUITeamInfo_GetTeamMemberIDs) == 0x000004, "Wrong alignment on FortUITeamInfo_GetTeamMemberIDs");
static_assert(sizeof(FortUITeamInfo_GetTeamMemberIDs) == 0x00000C, "Wrong size on FortUITeamInfo_GetTeamMemberIDs");
static_assert(offsetof(FortUITeamInfo_GetTeamMemberIDs, TeamMemberIDs) == 0x000000, "Member 'FortUITeamInfo_GetTeamMemberIDs::TeamMemberIDs' has a wrong offset!");

// Function FortniteGame.FortUITeamInfo.GetTeamMembers
// 0x000C (0x000C - 0x0000)
struct FortUITeamInfo_GetTeamMembers final
{
public:
	TArray<struct FFortTeamMemberInfo>            TeamMembers;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUITeamInfo_GetTeamMembers) == 0x000004, "Wrong alignment on FortUITeamInfo_GetTeamMembers");
static_assert(sizeof(FortUITeamInfo_GetTeamMembers) == 0x00000C, "Wrong size on FortUITeamInfo_GetTeamMembers");
static_assert(offsetof(FortUITeamInfo_GetTeamMembers, TeamMembers) == 0x000000, "Member 'FortUITeamInfo_GetTeamMembers::TeamMembers' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsValidNetID
// 0x000C (0x000C - 0x0000)
struct FortPartyContext_IsValidNetID final
{
public:
	struct FUniqueNetIdRepl                       UniqueNetID;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_IsValidNetID) == 0x000004, "Wrong alignment on FortPartyContext_IsValidNetID");
static_assert(sizeof(FortPartyContext_IsValidNetID) == 0x00000C, "Wrong size on FortPartyContext_IsValidNetID");
static_assert(offsetof(FortPartyContext_IsValidNetID, UniqueNetID) == 0x000000, "Member 'FortPartyContext_IsValidNetID::UniqueNetID' has a wrong offset!");
static_assert(offsetof(FortPartyContext_IsValidNetID, ReturnValue) == 0x000008, "Member 'FortPartyContext_IsValidNetID::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.AcceptFriendRequest
// 0x0008 (0x0008 - 0x0000)
struct FortPartyContext_AcceptFriendRequest final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_AcceptFriendRequest) == 0x000004, "Wrong alignment on FortPartyContext_AcceptFriendRequest");
static_assert(sizeof(FortPartyContext_AcceptFriendRequest) == 0x000008, "Wrong size on FortPartyContext_AcceptFriendRequest");
static_assert(offsetof(FortPartyContext_AcceptFriendRequest, PlayerID) == 0x000000, "Member 'FortPartyContext_AcceptFriendRequest::PlayerID' has a wrong offset!");

// Function FortniteGame.FortPartyContext.CancelFriendRequest
// 0x0008 (0x0008 - 0x0000)
struct FortPartyContext_CancelFriendRequest final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_CancelFriendRequest) == 0x000004, "Wrong alignment on FortPartyContext_CancelFriendRequest");
static_assert(sizeof(FortPartyContext_CancelFriendRequest) == 0x000008, "Wrong size on FortPartyContext_CancelFriendRequest");
static_assert(offsetof(FortPartyContext_CancelFriendRequest, PlayerID) == 0x000000, "Member 'FortPartyContext_CancelFriendRequest::PlayerID' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetActiveFriendsList
// 0x000C (0x000C - 0x0000)
struct FortPartyContext_GetActiveFriendsList final
{
public:
	TArray<class UFortSocialItem*>                OutActiveFriends;                                  // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetActiveFriendsList) == 0x000004, "Wrong alignment on FortPartyContext_GetActiveFriendsList");
static_assert(sizeof(FortPartyContext_GetActiveFriendsList) == 0x00000C, "Wrong size on FortPartyContext_GetActiveFriendsList");
static_assert(offsetof(FortPartyContext_GetActiveFriendsList, OutActiveFriends) == 0x000000, "Member 'FortPartyContext_GetActiveFriendsList::OutActiveFriends' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetPartyInvites
// 0x000C (0x000C - 0x0000)
struct FortPartyContext_GetPartyInvites final
{
public:
	TArray<class UFortSocialItem*>                OutPartyInvites;                                   // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetPartyInvites) == 0x000004, "Wrong alignment on FortPartyContext_GetPartyInvites");
static_assert(sizeof(FortPartyContext_GetPartyInvites) == 0x00000C, "Wrong size on FortPartyContext_GetPartyInvites");
static_assert(offsetof(FortPartyContext_GetPartyInvites, OutPartyInvites) == 0x000000, "Member 'FortPartyContext_GetPartyInvites::OutPartyInvites' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetPartyPrivacySetting
// 0x0004 (0x0004 - 0x0000)
struct FortPartyContext_GetPartyPrivacySetting final
{
public:
	EPartyType                                    OutPartyType;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutLeaderFriendsOnly;                              // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          OutLeaderInvitesOnly;                              // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetPartyPrivacySetting) == 0x000001, "Wrong alignment on FortPartyContext_GetPartyPrivacySetting");
static_assert(sizeof(FortPartyContext_GetPartyPrivacySetting) == 0x000004, "Wrong size on FortPartyContext_GetPartyPrivacySetting");
static_assert(offsetof(FortPartyContext_GetPartyPrivacySetting, OutPartyType) == 0x000000, "Member 'FortPartyContext_GetPartyPrivacySetting::OutPartyType' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetPartyPrivacySetting, OutLeaderFriendsOnly) == 0x000001, "Member 'FortPartyContext_GetPartyPrivacySetting::OutLeaderFriendsOnly' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetPartyPrivacySetting, OutLeaderInvitesOnly) == 0x000002, "Member 'FortPartyContext_GetPartyPrivacySetting::OutLeaderInvitesOnly' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetPartyPrivacySetting, ReturnValue) == 0x000003, "Member 'FortPartyContext_GetPartyPrivacySetting::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetSocialItemList
// 0x000C (0x000C - 0x0000)
struct FortPartyContext_GetSocialItemList final
{
public:
	TArray<class UFortSocialItem*>                OutSocialItems;                                    // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetSocialItemList) == 0x000004, "Wrong alignment on FortPartyContext_GetSocialItemList");
static_assert(sizeof(FortPartyContext_GetSocialItemList) == 0x00000C, "Wrong size on FortPartyContext_GetSocialItemList");
static_assert(offsetof(FortPartyContext_GetSocialItemList, OutSocialItems) == 0x000000, "Member 'FortPartyContext_GetSocialItemList::OutSocialItems' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetTeamInfo
// 0x0008 (0x0008 - 0x0000)
struct FortPartyContext_GetTeamInfo final
{
public:
	EFortTeam                                     Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortUITeamInfo*                        ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetTeamInfo) == 0x000004, "Wrong alignment on FortPartyContext_GetTeamInfo");
static_assert(sizeof(FortPartyContext_GetTeamInfo) == 0x000008, "Wrong size on FortPartyContext_GetTeamInfo");
static_assert(offsetof(FortPartyContext_GetTeamInfo, Team) == 0x000000, "Member 'FortPartyContext_GetTeamInfo::Team' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetTeamInfo, ReturnValue) == 0x000004, "Member 'FortPartyContext_GetTeamInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.JoinParty
// 0x0004 (0x0004 - 0x0000)
struct FortPartyContext_JoinParty final
{
public:
	class UFortSocialItem*                        PartyItem;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_JoinParty) == 0x000004, "Wrong alignment on FortPartyContext_JoinParty");
static_assert(sizeof(FortPartyContext_JoinParty) == 0x000004, "Wrong size on FortPartyContext_JoinParty");
static_assert(offsetof(FortPartyContext_JoinParty, PartyItem) == 0x000000, "Member 'FortPartyContext_JoinParty::PartyItem' has a wrong offset!");

// Function FortniteGame.FortPartyContext.KickPartyMember
// 0x0008 (0x0008 - 0x0000)
struct FortPartyContext_KickPartyMember final
{
public:
	struct FUniqueNetIdRepl                       PartyMemberId;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_KickPartyMember) == 0x000004, "Wrong alignment on FortPartyContext_KickPartyMember");
static_assert(sizeof(FortPartyContext_KickPartyMember) == 0x000008, "Wrong size on FortPartyContext_KickPartyMember");
static_assert(offsetof(FortPartyContext_KickPartyMember, PartyMemberId) == 0x000000, "Member 'FortPartyContext_KickPartyMember::PartyMemberId' has a wrong offset!");

// Function FortniteGame.FortPartyContext.PromotePartyMemberToLeader
// 0x0008 (0x0008 - 0x0000)
struct FortPartyContext_PromotePartyMemberToLeader final
{
public:
	struct FUniqueNetIdRepl                       PartyMemberId;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_PromotePartyMemberToLeader) == 0x000004, "Wrong alignment on FortPartyContext_PromotePartyMemberToLeader");
static_assert(sizeof(FortPartyContext_PromotePartyMemberToLeader) == 0x000008, "Wrong size on FortPartyContext_PromotePartyMemberToLeader");
static_assert(offsetof(FortPartyContext_PromotePartyMemberToLeader, PartyMemberId) == 0x000000, "Member 'FortPartyContext_PromotePartyMemberToLeader::PartyMemberId' has a wrong offset!");

// Function FortniteGame.FortPartyContext.RejectFriendRequest
// 0x0008 (0x0008 - 0x0000)
struct FortPartyContext_RejectFriendRequest final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_RejectFriendRequest) == 0x000004, "Wrong alignment on FortPartyContext_RejectFriendRequest");
static_assert(sizeof(FortPartyContext_RejectFriendRequest) == 0x000008, "Wrong size on FortPartyContext_RejectFriendRequest");
static_assert(offsetof(FortPartyContext_RejectFriendRequest, PlayerID) == 0x000000, "Member 'FortPartyContext_RejectFriendRequest::PlayerID' has a wrong offset!");

// Function FortniteGame.FortPartyContext.RejectPartyInvite
// 0x0004 (0x0004 - 0x0000)
struct FortPartyContext_RejectPartyInvite final
{
public:
	class UFortSocialItem*                        PartyInvite;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_RejectPartyInvite) == 0x000004, "Wrong alignment on FortPartyContext_RejectPartyInvite");
static_assert(sizeof(FortPartyContext_RejectPartyInvite) == 0x000004, "Wrong size on FortPartyContext_RejectPartyInvite");
static_assert(offsetof(FortPartyContext_RejectPartyInvite, PartyInvite) == 0x000000, "Member 'FortPartyContext_RejectPartyInvite::PartyInvite' has a wrong offset!");

// Function FortniteGame.FortPartyContext.SendFriendRequest
// 0x0008 (0x0008 - 0x0000)
struct FortPartyContext_SendFriendRequest final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_SendFriendRequest) == 0x000004, "Wrong alignment on FortPartyContext_SendFriendRequest");
static_assert(sizeof(FortPartyContext_SendFriendRequest) == 0x000008, "Wrong size on FortPartyContext_SendFriendRequest");
static_assert(offsetof(FortPartyContext_SendFriendRequest, PlayerID) == 0x000000, "Member 'FortPartyContext_SendFriendRequest::PlayerID' has a wrong offset!");

// Function FortniteGame.FortPartyContext.SendPartyInvite
// 0x0004 (0x0004 - 0x0000)
struct FortPartyContext_SendPartyInvite final
{
public:
	class UFortSocialItem*                        SocialItem;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_SendPartyInvite) == 0x000004, "Wrong alignment on FortPartyContext_SendPartyInvite");
static_assert(sizeof(FortPartyContext_SendPartyInvite) == 0x000004, "Wrong size on FortPartyContext_SendPartyInvite");
static_assert(offsetof(FortPartyContext_SendPartyInvite, SocialItem) == 0x000000, "Member 'FortPartyContext_SendPartyInvite::SocialItem' has a wrong offset!");

// Function FortniteGame.FortPartyContext.SetChatWhisperTarget
// 0x0008 (0x0008 - 0x0000)
struct FortPartyContext_SetChatWhisperTarget final
{
public:
	struct FUniqueNetIdRepl                       FriendID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_SetChatWhisperTarget) == 0x000004, "Wrong alignment on FortPartyContext_SetChatWhisperTarget");
static_assert(sizeof(FortPartyContext_SetChatWhisperTarget) == 0x000008, "Wrong size on FortPartyContext_SetChatWhisperTarget");
static_assert(offsetof(FortPartyContext_SetChatWhisperTarget, FriendID) == 0x000000, "Member 'FortPartyContext_SetChatWhisperTarget::FriendID' has a wrong offset!");

// Function FortniteGame.FortPartyContext.SetPartyPrivacySetting
// 0x0003 (0x0003 - 0x0000)
struct FortPartyContext_SetPartyPrivacySetting final
{
public:
	EPartyType                                    PartyType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeaderFriendsOnly;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLeaderInvitesOnly;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_SetPartyPrivacySetting) == 0x000001, "Wrong alignment on FortPartyContext_SetPartyPrivacySetting");
static_assert(sizeof(FortPartyContext_SetPartyPrivacySetting) == 0x000003, "Wrong size on FortPartyContext_SetPartyPrivacySetting");
static_assert(offsetof(FortPartyContext_SetPartyPrivacySetting, PartyType) == 0x000000, "Member 'FortPartyContext_SetPartyPrivacySetting::PartyType' has a wrong offset!");
static_assert(offsetof(FortPartyContext_SetPartyPrivacySetting, bLeaderFriendsOnly) == 0x000001, "Member 'FortPartyContext_SetPartyPrivacySetting::bLeaderFriendsOnly' has a wrong offset!");
static_assert(offsetof(FortPartyContext_SetPartyPrivacySetting, bLeaderInvitesOnly) == 0x000002, "Member 'FortPartyContext_SetPartyPrivacySetting::bLeaderInvitesOnly' has a wrong offset!");

// Function FortniteGame.FortPartyContext.CanBeInvited
// 0x0008 (0x0008 - 0x0000)
struct FortPartyContext_CanBeInvited final
{
public:
	class UFortSocialItem*                        SocialItem;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPartyRestriction                         FailReason;                                        // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_CanBeInvited) == 0x000004, "Wrong alignment on FortPartyContext_CanBeInvited");
static_assert(sizeof(FortPartyContext_CanBeInvited) == 0x000008, "Wrong size on FortPartyContext_CanBeInvited");
static_assert(offsetof(FortPartyContext_CanBeInvited, SocialItem) == 0x000000, "Member 'FortPartyContext_CanBeInvited::SocialItem' has a wrong offset!");
static_assert(offsetof(FortPartyContext_CanBeInvited, FailReason) == 0x000004, "Member 'FortPartyContext_CanBeInvited::FailReason' has a wrong offset!");
static_assert(offsetof(FortPartyContext_CanBeInvited, ReturnValue) == 0x000005, "Member 'FortPartyContext_CanBeInvited::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.CanBeJoined
// 0x0008 (0x0008 - 0x0000)
struct FortPartyContext_CanBeJoined final
{
public:
	class UFortSocialItem*                        SocialItem;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortPartyRestriction                         FailReason;                                        // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_CanBeJoined) == 0x000004, "Wrong alignment on FortPartyContext_CanBeJoined");
static_assert(sizeof(FortPartyContext_CanBeJoined) == 0x000008, "Wrong size on FortPartyContext_CanBeJoined");
static_assert(offsetof(FortPartyContext_CanBeJoined, SocialItem) == 0x000000, "Member 'FortPartyContext_CanBeJoined::SocialItem' has a wrong offset!");
static_assert(offsetof(FortPartyContext_CanBeJoined, FailReason) == 0x000004, "Member 'FortPartyContext_CanBeJoined::FailReason' has a wrong offset!");
static_assert(offsetof(FortPartyContext_CanBeJoined, ReturnValue) == 0x000005, "Member 'FortPartyContext_CanBeJoined::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetFriendRequestStatusForPlayer
// 0x000C (0x000C - 0x0000)
struct FortPartyContext_GetFriendRequestStatusForPlayer final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EFortFriendRequestStatus                      ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_GetFriendRequestStatusForPlayer) == 0x000004, "Wrong alignment on FortPartyContext_GetFriendRequestStatusForPlayer");
static_assert(sizeof(FortPartyContext_GetFriendRequestStatusForPlayer) == 0x00000C, "Wrong size on FortPartyContext_GetFriendRequestStatusForPlayer");
static_assert(offsetof(FortPartyContext_GetFriendRequestStatusForPlayer, PlayerID) == 0x000000, "Member 'FortPartyContext_GetFriendRequestStatusForPlayer::PlayerID' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetFriendRequestStatusForPlayer, ReturnValue) == 0x000008, "Member 'FortPartyContext_GetFriendRequestStatusForPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetLocalPartyMemberIDs
// 0x0010 (0x0010 - 0x0000)
struct FortPartyContext_GetLocalPartyMemberIDs final
{
public:
	TArray<struct FUniqueNetIdRepl>               PartyMemberIDs;                                    // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIncludeLocalPlayerID;                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_GetLocalPartyMemberIDs) == 0x000004, "Wrong alignment on FortPartyContext_GetLocalPartyMemberIDs");
static_assert(sizeof(FortPartyContext_GetLocalPartyMemberIDs) == 0x000010, "Wrong size on FortPartyContext_GetLocalPartyMemberIDs");
static_assert(offsetof(FortPartyContext_GetLocalPartyMemberIDs, PartyMemberIDs) == 0x000000, "Member 'FortPartyContext_GetLocalPartyMemberIDs::PartyMemberIDs' has a wrong offset!");
static_assert(offsetof(FortPartyContext_GetLocalPartyMemberIDs, bIncludeLocalPlayerID) == 0x00000C, "Member 'FortPartyContext_GetLocalPartyMemberIDs::bIncludeLocalPlayerID' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetLocalPartyProgression
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_GetLocalPartyProgression final
{
public:
	EFortPartyState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetLocalPartyProgression) == 0x000001, "Wrong alignment on FortPartyContext_GetLocalPartyProgression");
static_assert(sizeof(FortPartyContext_GetLocalPartyProgression) == 0x000001, "Wrong size on FortPartyContext_GetLocalPartyProgression");
static_assert(offsetof(FortPartyContext_GetLocalPartyProgression, ReturnValue) == 0x000000, "Member 'FortPartyContext_GetLocalPartyProgression::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetLocalPlayerDisplayName
// 0x000C (0x000C - 0x0000)
struct FortPartyContext_GetLocalPlayerDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetLocalPlayerDisplayName) == 0x000004, "Wrong alignment on FortPartyContext_GetLocalPlayerDisplayName");
static_assert(sizeof(FortPartyContext_GetLocalPlayerDisplayName) == 0x00000C, "Wrong size on FortPartyContext_GetLocalPlayerDisplayName");
static_assert(offsetof(FortPartyContext_GetLocalPlayerDisplayName, ReturnValue) == 0x000000, "Member 'FortPartyContext_GetLocalPlayerDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetLocalPlayerTeam
// 0x0004 (0x0004 - 0x0000)
struct FortPartyContext_GetLocalPlayerTeam final
{
public:
	class UFortUITeamInfo*                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetLocalPlayerTeam) == 0x000004, "Wrong alignment on FortPartyContext_GetLocalPlayerTeam");
static_assert(sizeof(FortPartyContext_GetLocalPlayerTeam) == 0x000004, "Wrong size on FortPartyContext_GetLocalPlayerTeam");
static_assert(offsetof(FortPartyContext_GetLocalPlayerTeam, ReturnValue) == 0x000000, "Member 'FortPartyContext_GetLocalPlayerTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetLocalPlayerTeamMemberInfo
// 0x01E8 (0x01E8 - 0x0000)
struct FortPartyContext_GetLocalPlayerTeamMemberInfo final
{
public:
	struct FFortTeamMemberInfo                    LocalPlayerInfo;                                   // 0x0000(0x01E8)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetLocalPlayerTeamMemberInfo) == 0x000004, "Wrong alignment on FortPartyContext_GetLocalPlayerTeamMemberInfo");
static_assert(sizeof(FortPartyContext_GetLocalPlayerTeamMemberInfo) == 0x0001E8, "Wrong size on FortPartyContext_GetLocalPlayerTeamMemberInfo");
static_assert(offsetof(FortPartyContext_GetLocalPlayerTeamMemberInfo, LocalPlayerInfo) == 0x000000, "Member 'FortPartyContext_GetLocalPlayerTeamMemberInfo::LocalPlayerInfo' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetMaxTeamSizeForSelectedTheater
// 0x0004 (0x0004 - 0x0000)
struct FortPartyContext_GetMaxTeamSizeForSelectedTheater final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetMaxTeamSizeForSelectedTheater) == 0x000004, "Wrong alignment on FortPartyContext_GetMaxTeamSizeForSelectedTheater");
static_assert(sizeof(FortPartyContext_GetMaxTeamSizeForSelectedTheater) == 0x000004, "Wrong size on FortPartyContext_GetMaxTeamSizeForSelectedTheater");
static_assert(offsetof(FortPartyContext_GetMaxTeamSizeForSelectedTheater, ReturnValue) == 0x000000, "Member 'FortPartyContext_GetMaxTeamSizeForSelectedTheater::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.GetNumPlayersInLocalParty
// 0x0004 (0x0004 - 0x0000)
struct FortPartyContext_GetNumPlayersInLocalParty final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_GetNumPlayersInLocalParty) == 0x000004, "Wrong alignment on FortPartyContext_GetNumPlayersInLocalParty");
static_assert(sizeof(FortPartyContext_GetNumPlayersInLocalParty) == 0x000004, "Wrong size on FortPartyContext_GetNumPlayersInLocalParty");
static_assert(offsetof(FortPartyContext_GetNumPlayersInLocalParty, ReturnValue) == 0x000000, "Member 'FortPartyContext_GetNumPlayersInLocalParty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.HasPendingFriendRequest
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_HasPendingFriendRequest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_HasPendingFriendRequest) == 0x000001, "Wrong alignment on FortPartyContext_HasPendingFriendRequest");
static_assert(sizeof(FortPartyContext_HasPendingFriendRequest) == 0x000001, "Wrong size on FortPartyContext_HasPendingFriendRequest");
static_assert(offsetof(FortPartyContext_HasPendingFriendRequest, ReturnValue) == 0x000000, "Member 'FortPartyContext_HasPendingFriendRequest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsActiveFriend
// 0x000C (0x000C - 0x0000)
struct FortPartyContext_IsActiveFriend final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_IsActiveFriend) == 0x000004, "Wrong alignment on FortPartyContext_IsActiveFriend");
static_assert(sizeof(FortPartyContext_IsActiveFriend) == 0x00000C, "Wrong size on FortPartyContext_IsActiveFriend");
static_assert(offsetof(FortPartyContext_IsActiveFriend, PlayerID) == 0x000000, "Member 'FortPartyContext_IsActiveFriend::PlayerID' has a wrong offset!");
static_assert(offsetof(FortPartyContext_IsActiveFriend, ReturnValue) == 0x000008, "Member 'FortPartyContext_IsActiveFriend::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsActiveFriendsListRetrieved
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_IsActiveFriendsListRetrieved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_IsActiveFriendsListRetrieved) == 0x000001, "Wrong alignment on FortPartyContext_IsActiveFriendsListRetrieved");
static_assert(sizeof(FortPartyContext_IsActiveFriendsListRetrieved) == 0x000001, "Wrong size on FortPartyContext_IsActiveFriendsListRetrieved");
static_assert(offsetof(FortPartyContext_IsActiveFriendsListRetrieved, ReturnValue) == 0x000000, "Member 'FortPartyContext_IsActiveFriendsListRetrieved::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsEntirePartyInFrontEnd
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_IsEntirePartyInFrontEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_IsEntirePartyInFrontEnd) == 0x000001, "Wrong alignment on FortPartyContext_IsEntirePartyInFrontEnd");
static_assert(sizeof(FortPartyContext_IsEntirePartyInFrontEnd) == 0x000001, "Wrong size on FortPartyContext_IsEntirePartyInFrontEnd");
static_assert(offsetof(FortPartyContext_IsEntirePartyInFrontEnd, ReturnValue) == 0x000000, "Member 'FortPartyContext_IsEntirePartyInFrontEnd::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsInLocalPlayersParty
// 0x000C (0x000C - 0x0000)
struct FortPartyContext_IsInLocalPlayersParty final
{
public:
	struct FUniqueNetIdRepl                       PlayerID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_IsInLocalPlayersParty) == 0x000004, "Wrong alignment on FortPartyContext_IsInLocalPlayersParty");
static_assert(sizeof(FortPartyContext_IsInLocalPlayersParty) == 0x00000C, "Wrong size on FortPartyContext_IsInLocalPlayersParty");
static_assert(offsetof(FortPartyContext_IsInLocalPlayersParty, PlayerID) == 0x000000, "Member 'FortPartyContext_IsInLocalPlayersParty::PlayerID' has a wrong offset!");
static_assert(offsetof(FortPartyContext_IsInLocalPlayersParty, ReturnValue) == 0x000008, "Member 'FortPartyContext_IsInLocalPlayersParty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsLocalPlayerInParty
// 0x0008 (0x0008 - 0x0000)
struct FortPartyContext_IsLocalPlayerInParty final
{
public:
	class UFortSocialItem*                        SocialItem;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPartyContext_IsLocalPlayerInParty) == 0x000004, "Wrong alignment on FortPartyContext_IsLocalPlayerInParty");
static_assert(sizeof(FortPartyContext_IsLocalPlayerInParty) == 0x000008, "Wrong size on FortPartyContext_IsLocalPlayerInParty");
static_assert(offsetof(FortPartyContext_IsLocalPlayerInParty, SocialItem) == 0x000000, "Member 'FortPartyContext_IsLocalPlayerInParty::SocialItem' has a wrong offset!");
static_assert(offsetof(FortPartyContext_IsLocalPlayerInParty, ReturnValue) == 0x000004, "Member 'FortPartyContext_IsLocalPlayerInParty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.IsLocalPlayerPartyLeader
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_IsLocalPlayerPartyLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_IsLocalPlayerPartyLeader) == 0x000001, "Wrong alignment on FortPartyContext_IsLocalPlayerPartyLeader");
static_assert(sizeof(FortPartyContext_IsLocalPlayerPartyLeader) == 0x000001, "Wrong size on FortPartyContext_IsLocalPlayerPartyLeader");
static_assert(offsetof(FortPartyContext_IsLocalPlayerPartyLeader, ReturnValue) == 0x000000, "Member 'FortPartyContext_IsLocalPlayerPartyLeader::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyContext.ShouldShowHeroPortraits
// 0x0001 (0x0001 - 0x0000)
struct FortPartyContext_ShouldShowHeroPortraits final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyContext_ShouldShowHeroPortraits) == 0x000001, "Wrong alignment on FortPartyContext_ShouldShowHeroPortraits");
static_assert(sizeof(FortPartyContext_ShouldShowHeroPortraits) == 0x000001, "Wrong size on FortPartyContext_ShouldShowHeroPortraits");
static_assert(offsetof(FortPartyContext_ShouldShowHeroPortraits, ReturnValue) == 0x000000, "Member 'FortPartyContext_ShouldShowHeroPortraits::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTutorialContext.DisableTutorialHighlight
// 0x0008 (0x0008 - 0x0000)
struct FortTutorialContext_DisableTutorialHighlight final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_DisableTutorialHighlight) == 0x000004, "Wrong alignment on FortTutorialContext_DisableTutorialHighlight");
static_assert(sizeof(FortTutorialContext_DisableTutorialHighlight) == 0x000008, "Wrong size on FortTutorialContext_DisableTutorialHighlight");
static_assert(offsetof(FortTutorialContext_DisableTutorialHighlight, WidgetName) == 0x000000, "Member 'FortTutorialContext_DisableTutorialHighlight::WidgetName' has a wrong offset!");

// Function FortniteGame.FortTutorialContext.DisableTutorialHighlightForBang
// 0x0001 (0x0001 - 0x0000)
struct FortTutorialContext_DisableTutorialHighlightForBang final
{
public:
	EFortBangType                                 BangType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_DisableTutorialHighlightForBang) == 0x000001, "Wrong alignment on FortTutorialContext_DisableTutorialHighlightForBang");
static_assert(sizeof(FortTutorialContext_DisableTutorialHighlightForBang) == 0x000001, "Wrong size on FortTutorialContext_DisableTutorialHighlightForBang");
static_assert(offsetof(FortTutorialContext_DisableTutorialHighlightForBang, BangType) == 0x000000, "Member 'FortTutorialContext_DisableTutorialHighlightForBang::BangType' has a wrong offset!");

// Function FortniteGame.FortTutorialContext.EnableTutorialHighlight
// 0x0008 (0x0008 - 0x0000)
struct FortTutorialContext_EnableTutorialHighlight final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_EnableTutorialHighlight) == 0x000004, "Wrong alignment on FortTutorialContext_EnableTutorialHighlight");
static_assert(sizeof(FortTutorialContext_EnableTutorialHighlight) == 0x000008, "Wrong size on FortTutorialContext_EnableTutorialHighlight");
static_assert(offsetof(FortTutorialContext_EnableTutorialHighlight, WidgetName) == 0x000000, "Member 'FortTutorialContext_EnableTutorialHighlight::WidgetName' has a wrong offset!");

// Function FortniteGame.FortTutorialContext.EnableTutorialHighlightForBang
// 0x0001 (0x0001 - 0x0000)
struct FortTutorialContext_EnableTutorialHighlightForBang final
{
public:
	EFortBangType                                 BangType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_EnableTutorialHighlightForBang) == 0x000001, "Wrong alignment on FortTutorialContext_EnableTutorialHighlightForBang");
static_assert(sizeof(FortTutorialContext_EnableTutorialHighlightForBang) == 0x000001, "Wrong size on FortTutorialContext_EnableTutorialHighlightForBang");
static_assert(offsetof(FortTutorialContext_EnableTutorialHighlightForBang, BangType) == 0x000000, "Member 'FortTutorialContext_EnableTutorialHighlightForBang::BangType' has a wrong offset!");

// Function FortniteGame.FortTutorialContext.HideTutorialWidget
// 0x0008 (0x0008 - 0x0000)
struct FortTutorialContext_HideTutorialWidget final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_HideTutorialWidget) == 0x000004, "Wrong alignment on FortTutorialContext_HideTutorialWidget");
static_assert(sizeof(FortTutorialContext_HideTutorialWidget) == 0x000008, "Wrong size on FortTutorialContext_HideTutorialWidget");
static_assert(offsetof(FortTutorialContext_HideTutorialWidget, WidgetName) == 0x000000, "Member 'FortTutorialContext_HideTutorialWidget::WidgetName' has a wrong offset!");

// Function FortniteGame.FortTutorialContext.HideTutorialWidgetForBang
// 0x0001 (0x0001 - 0x0000)
struct FortTutorialContext_HideTutorialWidgetForBang final
{
public:
	EFortBangType                                 BangType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_HideTutorialWidgetForBang) == 0x000001, "Wrong alignment on FortTutorialContext_HideTutorialWidgetForBang");
static_assert(sizeof(FortTutorialContext_HideTutorialWidgetForBang) == 0x000001, "Wrong size on FortTutorialContext_HideTutorialWidgetForBang");
static_assert(offsetof(FortTutorialContext_HideTutorialWidgetForBang, BangType) == 0x000000, "Member 'FortTutorialContext_HideTutorialWidgetForBang::BangType' has a wrong offset!");

// Function FortniteGame.FortTutorialContext.SetTutorialNotificationActive
// 0x0001 (0x0001 - 0x0000)
struct FortTutorialContext_SetTutorialNotificationActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_SetTutorialNotificationActive) == 0x000001, "Wrong alignment on FortTutorialContext_SetTutorialNotificationActive");
static_assert(sizeof(FortTutorialContext_SetTutorialNotificationActive) == 0x000001, "Wrong size on FortTutorialContext_SetTutorialNotificationActive");
static_assert(offsetof(FortTutorialContext_SetTutorialNotificationActive, bActive) == 0x000000, "Member 'FortTutorialContext_SetTutorialNotificationActive::bActive' has a wrong offset!");

// Function FortniteGame.FortTutorialContext.UnhideTutorialWidget
// 0x0008 (0x0008 - 0x0000)
struct FortTutorialContext_UnhideTutorialWidget final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_UnhideTutorialWidget) == 0x000004, "Wrong alignment on FortTutorialContext_UnhideTutorialWidget");
static_assert(sizeof(FortTutorialContext_UnhideTutorialWidget) == 0x000008, "Wrong size on FortTutorialContext_UnhideTutorialWidget");
static_assert(offsetof(FortTutorialContext_UnhideTutorialWidget, WidgetName) == 0x000000, "Member 'FortTutorialContext_UnhideTutorialWidget::WidgetName' has a wrong offset!");

// Function FortniteGame.FortTutorialContext.UnhideTutorialWidgetForBang
// 0x0001 (0x0001 - 0x0000)
struct FortTutorialContext_UnhideTutorialWidgetForBang final
{
public:
	EFortBangType                                 BangType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_UnhideTutorialWidgetForBang) == 0x000001, "Wrong alignment on FortTutorialContext_UnhideTutorialWidgetForBang");
static_assert(sizeof(FortTutorialContext_UnhideTutorialWidgetForBang) == 0x000001, "Wrong size on FortTutorialContext_UnhideTutorialWidgetForBang");
static_assert(offsetof(FortTutorialContext_UnhideTutorialWidgetForBang, BangType) == 0x000000, "Member 'FortTutorialContext_UnhideTutorialWidgetForBang::BangType' has a wrong offset!");

// Function FortniteGame.FortTutorialContext.ShouldPromptToSkipTutorial
// 0x0001 (0x0001 - 0x0000)
struct FortTutorialContext_ShouldPromptToSkipTutorial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialContext_ShouldPromptToSkipTutorial) == 0x000001, "Wrong alignment on FortTutorialContext_ShouldPromptToSkipTutorial");
static_assert(sizeof(FortTutorialContext_ShouldPromptToSkipTutorial) == 0x000001, "Wrong size on FortTutorialContext_ShouldPromptToSkipTutorial");
static_assert(offsetof(FortTutorialContext_ShouldPromptToSkipTutorial, ReturnValue) == 0x000000, "Member 'FortTutorialContext_ShouldPromptToSkipTutorial::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestObjectiveInfo.GetObjectiveStatRow
// 0x0078 (0x0078 - 0x0000)
struct FortQuestObjectiveInfo_GetObjectiveStatRow final
{
public:
	struct FFortQuestObjectiveStatTableRow        OutRow;                                            // 0x0000(0x0074)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0074(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestObjectiveInfo_GetObjectiveStatRow) == 0x000004, "Wrong alignment on FortQuestObjectiveInfo_GetObjectiveStatRow");
static_assert(sizeof(FortQuestObjectiveInfo_GetObjectiveStatRow) == 0x000078, "Wrong size on FortQuestObjectiveInfo_GetObjectiveStatRow");
static_assert(offsetof(FortQuestObjectiveInfo_GetObjectiveStatRow, OutRow) == 0x000000, "Member 'FortQuestObjectiveInfo_GetObjectiveStatRow::OutRow' has a wrong offset!");
static_assert(offsetof(FortQuestObjectiveInfo_GetObjectiveStatRow, ReturnValue) == 0x000074, "Member 'FortQuestObjectiveInfo_GetObjectiveStatRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestObjectiveInfo.GetOwningQuest
// 0x0004 (0x0004 - 0x0000)
struct FortQuestObjectiveInfo_GetOwningQuest final
{
public:
	class UFortQuestItem*                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestObjectiveInfo_GetOwningQuest) == 0x000004, "Wrong alignment on FortQuestObjectiveInfo_GetOwningQuest");
static_assert(sizeof(FortQuestObjectiveInfo_GetOwningQuest) == 0x000004, "Wrong size on FortQuestObjectiveInfo_GetOwningQuest");
static_assert(offsetof(FortQuestObjectiveInfo_GetOwningQuest, ReturnValue) == 0x000000, "Member 'FortQuestObjectiveInfo_GetOwningQuest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetMissionConfigData
// 0x000C (0x000C - 0x0000)
struct FortQuestItem_GetMissionConfigData final
{
public:
	struct FGameplayTag                           InBucketTag;                                       // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	class UFortMissionConfigData*                 ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetMissionConfigData) == 0x000004, "Wrong alignment on FortQuestItem_GetMissionConfigData");
static_assert(sizeof(FortQuestItem_GetMissionConfigData) == 0x00000C, "Wrong size on FortQuestItem_GetMissionConfigData");
static_assert(offsetof(FortQuestItem_GetMissionConfigData, InBucketTag) == 0x000000, "Member 'FortQuestItem_GetMissionConfigData::InBucketTag' has a wrong offset!");
static_assert(offsetof(FortQuestItem_GetMissionConfigData, ReturnValue) == 0x000008, "Member 'FortQuestItem_GetMissionConfigData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetAchievedCount
// 0x0008 (0x0008 - 0x0000)
struct FortQuestItem_GetAchievedCount final
{
public:
	int32                                         OutTotalAchievedCount;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTotalRequiredCount;                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetAchievedCount) == 0x000004, "Wrong alignment on FortQuestItem_GetAchievedCount");
static_assert(sizeof(FortQuestItem_GetAchievedCount) == 0x000008, "Wrong size on FortQuestItem_GetAchievedCount");
static_assert(offsetof(FortQuestItem_GetAchievedCount, OutTotalAchievedCount) == 0x000000, "Member 'FortQuestItem_GetAchievedCount::OutTotalAchievedCount' has a wrong offset!");
static_assert(offsetof(FortQuestItem_GetAchievedCount, OutTotalRequiredCount) == 0x000004, "Member 'FortQuestItem_GetAchievedCount::OutTotalRequiredCount' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetObjectiveInfo
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItem_GetObjectiveInfo final
{
public:
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	class UFortQuestObjectiveInfo*                ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetObjectiveInfo) == 0x000004, "Wrong alignment on FortQuestItem_GetObjectiveInfo");
static_assert(sizeof(FortQuestItem_GetObjectiveInfo) == 0x000010, "Wrong size on FortQuestItem_GetObjectiveInfo");
static_assert(offsetof(FortQuestItem_GetObjectiveInfo, ObjectiveStatHandle) == 0x000000, "Member 'FortQuestItem_GetObjectiveInfo::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FortQuestItem_GetObjectiveInfo, ReturnValue) == 0x00000C, "Member 'FortQuestItem_GetObjectiveInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetPercentageComplete
// 0x0004 (0x0004 - 0x0000)
struct FortQuestItem_GetPercentageComplete final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetPercentageComplete) == 0x000004, "Wrong alignment on FortQuestItem_GetPercentageComplete");
static_assert(sizeof(FortQuestItem_GetPercentageComplete) == 0x000004, "Wrong size on FortQuestItem_GetPercentageComplete");
static_assert(offsetof(FortQuestItem_GetPercentageComplete, ReturnValue) == 0x000000, "Member 'FortQuestItem_GetPercentageComplete::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetPreviewRewards
// 0x000C (0x000C - 0x0000)
struct FortQuestItem_GetPreviewRewards final
{
public:
	TArray<struct FFortQuestReward>               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetPreviewRewards) == 0x000004, "Wrong alignment on FortQuestItem_GetPreviewRewards");
static_assert(sizeof(FortQuestItem_GetPreviewRewards) == 0x00000C, "Wrong size on FortQuestItem_GetPreviewRewards");
static_assert(offsetof(FortQuestItem_GetPreviewRewards, ReturnValue) == 0x000000, "Member 'FortQuestItem_GetPreviewRewards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.GetQuestDefinitionBP
// 0x0004 (0x0004 - 0x0000)
struct FortQuestItem_GetQuestDefinitionBP final
{
public:
	class UFortQuestItemDefinition*               ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_GetQuestDefinitionBP) == 0x000004, "Wrong alignment on FortQuestItem_GetQuestDefinitionBP");
static_assert(sizeof(FortQuestItem_GetQuestDefinitionBP) == 0x000004, "Wrong size on FortQuestItem_GetQuestDefinitionBP");
static_assert(offsetof(FortQuestItem_GetQuestDefinitionBP, ReturnValue) == 0x000000, "Member 'FortQuestItem_GetQuestDefinitionBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.HasCompletedObjective
// 0x0010 (0x0010 - 0x0000)
struct FortQuestItem_HasCompletedObjective final
{
public:
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestItem_HasCompletedObjective) == 0x000004, "Wrong alignment on FortQuestItem_HasCompletedObjective");
static_assert(sizeof(FortQuestItem_HasCompletedObjective) == 0x000010, "Wrong size on FortQuestItem_HasCompletedObjective");
static_assert(offsetof(FortQuestItem_HasCompletedObjective, ObjectiveStatHandle) == 0x000000, "Member 'FortQuestItem_HasCompletedObjective::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FortQuestItem_HasCompletedObjective, ReturnValue) == 0x00000C, "Member 'FortQuestItem_HasCompletedObjective::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.HasCompletedQuest
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItem_HasCompletedQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_HasCompletedQuest) == 0x000001, "Wrong alignment on FortQuestItem_HasCompletedQuest");
static_assert(sizeof(FortQuestItem_HasCompletedQuest) == 0x000001, "Wrong size on FortQuestItem_HasCompletedQuest");
static_assert(offsetof(FortQuestItem_HasCompletedQuest, ReturnValue) == 0x000000, "Member 'FortQuestItem_HasCompletedQuest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestItem.IsVisibleToUser
// 0x0001 (0x0001 - 0x0000)
struct FortQuestItem_IsVisibleToUser final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestItem_IsVisibleToUser) == 0x000001, "Wrong alignment on FortQuestItem_IsVisibleToUser");
static_assert(sizeof(FortQuestItem_IsVisibleToUser) == 0x000001, "Wrong size on FortQuestItem_IsVisibleToUser");
static_assert(offsetof(FortQuestItem_IsVisibleToUser, ReturnValue) == 0x000000, "Member 'FortQuestItem_IsVisibleToUser::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.ApplyAlteration
// 0x0030 (0x0030 - 0x0000)
struct FortMcpProfileAccount_ApplyAlteration final
{
public:
	class FString                                 TargetItemId;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AlterationItemId;                                  // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0018(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_ApplyAlteration) == 0x000004, "Wrong alignment on FortMcpProfileAccount_ApplyAlteration");
static_assert(sizeof(FortMcpProfileAccount_ApplyAlteration) == 0x000030, "Wrong size on FortMcpProfileAccount_ApplyAlteration");
static_assert(offsetof(FortMcpProfileAccount_ApplyAlteration, TargetItemId) == 0x000000, "Member 'FortMcpProfileAccount_ApplyAlteration::TargetItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ApplyAlteration, AlterationItemId) == 0x00000C, "Member 'FortMcpProfileAccount_ApplyAlteration::AlterationItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ApplyAlteration, Context) == 0x000018, "Member 'FortMcpProfileAccount_ApplyAlteration::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.AssignWorkerToBuilding
// 0x0034 (0x0034 - 0x0000)
struct FortMcpProfileAccount_AssignWorkerToBuilding final
{
public:
	class FString                                 WorkerId;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildingId;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x001C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_AssignWorkerToBuilding) == 0x000004, "Wrong alignment on FortMcpProfileAccount_AssignWorkerToBuilding");
static_assert(sizeof(FortMcpProfileAccount_AssignWorkerToBuilding) == 0x000034, "Wrong size on FortMcpProfileAccount_AssignWorkerToBuilding");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToBuilding, WorkerId) == 0x000000, "Member 'FortMcpProfileAccount_AssignWorkerToBuilding::WorkerId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToBuilding, BuildingId) == 0x00000C, "Member 'FortMcpProfileAccount_AssignWorkerToBuilding::BuildingId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToBuilding, SlotIndex) == 0x000018, "Member 'FortMcpProfileAccount_AssignWorkerToBuilding::SlotIndex' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToBuilding, Context) == 0x00001C, "Member 'FortMcpProfileAccount_AssignWorkerToBuilding::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.AssignWorkerToBuildingBatch
// 0x003C (0x003C - 0x0000)
struct FortMcpProfileAccount_AssignWorkerToBuildingBatch final
{
public:
	TArray<class FString>                         WorkerIds;                                         // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         BuildingIds;                                       // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 SlotIndices;                                       // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0024(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_AssignWorkerToBuildingBatch) == 0x000004, "Wrong alignment on FortMcpProfileAccount_AssignWorkerToBuildingBatch");
static_assert(sizeof(FortMcpProfileAccount_AssignWorkerToBuildingBatch) == 0x00003C, "Wrong size on FortMcpProfileAccount_AssignWorkerToBuildingBatch");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToBuildingBatch, WorkerIds) == 0x000000, "Member 'FortMcpProfileAccount_AssignWorkerToBuildingBatch::WorkerIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToBuildingBatch, BuildingIds) == 0x00000C, "Member 'FortMcpProfileAccount_AssignWorkerToBuildingBatch::BuildingIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToBuildingBatch, SlotIndices) == 0x000018, "Member 'FortMcpProfileAccount_AssignWorkerToBuildingBatch::SlotIndices' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_AssignWorkerToBuildingBatch, Context) == 0x000024, "Member 'FortMcpProfileAccount_AssignWorkerToBuildingBatch::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.ClaimLoginReward
// 0x0018 (0x0018 - 0x0000)
struct FortMcpProfileAccount_ClaimLoginReward final
{
public:
	struct FClientUrlContext                      Context;                                           // 0x0000(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_ClaimLoginReward) == 0x000004, "Wrong alignment on FortMcpProfileAccount_ClaimLoginReward");
static_assert(sizeof(FortMcpProfileAccount_ClaimLoginReward) == 0x000018, "Wrong size on FortMcpProfileAccount_ClaimLoginReward");
static_assert(offsetof(FortMcpProfileAccount_ClaimLoginReward, Context) == 0x000000, "Member 'FortMcpProfileAccount_ClaimLoginReward::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.ClaimQuestReward
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_ClaimQuestReward final
{
public:
	class FString                                 QuestId;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_ClaimQuestReward) == 0x000004, "Wrong alignment on FortMcpProfileAccount_ClaimQuestReward");
static_assert(sizeof(FortMcpProfileAccount_ClaimQuestReward) == 0x000024, "Wrong size on FortMcpProfileAccount_ClaimQuestReward");
static_assert(offsetof(FortMcpProfileAccount_ClaimQuestReward, QuestId) == 0x000000, "Member 'FortMcpProfileAccount_ClaimQuestReward::QuestId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ClaimQuestReward, Context) == 0x00000C, "Member 'FortMcpProfileAccount_ClaimQuestReward::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.ConsumeItems
// 0x003C (0x003C - 0x0000)
struct FortMcpProfileAccount_ConsumeItems final
{
public:
	TArray<class FString>                         ItemsToConsumeIds;                                 // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ItemCountsToConsume;                               // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ConsumeReason;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0024(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_ConsumeItems) == 0x000004, "Wrong alignment on FortMcpProfileAccount_ConsumeItems");
static_assert(sizeof(FortMcpProfileAccount_ConsumeItems) == 0x00003C, "Wrong size on FortMcpProfileAccount_ConsumeItems");
static_assert(offsetof(FortMcpProfileAccount_ConsumeItems, ItemsToConsumeIds) == 0x000000, "Member 'FortMcpProfileAccount_ConsumeItems::ItemsToConsumeIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ConsumeItems, ItemCountsToConsume) == 0x00000C, "Member 'FortMcpProfileAccount_ConsumeItems::ItemCountsToConsume' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ConsumeItems, ConsumeReason) == 0x000018, "Member 'FortMcpProfileAccount_ConsumeItems::ConsumeReason' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_ConsumeItems, Context) == 0x000024, "Member 'FortMcpProfileAccount_ConsumeItems::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.CreateBuilding
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_CreateBuilding final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_CreateBuilding) == 0x000004, "Wrong alignment on FortMcpProfileAccount_CreateBuilding");
static_assert(sizeof(FortMcpProfileAccount_CreateBuilding) == 0x000024, "Wrong size on FortMcpProfileAccount_CreateBuilding");
static_assert(offsetof(FortMcpProfileAccount_CreateBuilding, TemplateId) == 0x000000, "Member 'FortMcpProfileAccount_CreateBuilding::TemplateId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_CreateBuilding, Context) == 0x00000C, "Member 'FortMcpProfileAccount_CreateBuilding::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.CreateHero
// 0x0034 (0x0034 - 0x0000)
struct FortMcpProfileAccount_CreateHero final
{
public:
	class FString                                 HeroName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gender;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeroTemplateId;                                    // 0x0010(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x001C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_CreateHero) == 0x000004, "Wrong alignment on FortMcpProfileAccount_CreateHero");
static_assert(sizeof(FortMcpProfileAccount_CreateHero) == 0x000034, "Wrong size on FortMcpProfileAccount_CreateHero");
static_assert(offsetof(FortMcpProfileAccount_CreateHero, HeroName) == 0x000000, "Member 'FortMcpProfileAccount_CreateHero::HeroName' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_CreateHero, Gender) == 0x00000C, "Member 'FortMcpProfileAccount_CreateHero::Gender' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_CreateHero, HeroTemplateId) == 0x000010, "Member 'FortMcpProfileAccount_CreateHero::HeroTemplateId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_CreateHero, Context) == 0x00001C, "Member 'FortMcpProfileAccount_CreateHero::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.DeleteHero
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_DeleteHero final
{
public:
	class FString                                 HeroId;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_DeleteHero) == 0x000004, "Wrong alignment on FortMcpProfileAccount_DeleteHero");
static_assert(sizeof(FortMcpProfileAccount_DeleteHero) == 0x000024, "Wrong size on FortMcpProfileAccount_DeleteHero");
static_assert(offsetof(FortMcpProfileAccount_DeleteHero, HeroId) == 0x000000, "Member 'FortMcpProfileAccount_DeleteHero::HeroId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_DeleteHero, Context) == 0x00000C, "Member 'FortMcpProfileAccount_DeleteHero::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.EarnScore
// 0x0038 (0x0038 - 0x0000)
struct FortMcpProfileAccount_EarnScore final
{
public:
	int32                                         TotalScore;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchmakingSessionId;                              // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeroId;                                            // 0x0010(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCriticalMatchBonus;                               // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDedicatedServerUrlContext             Context;                                           // 0x0020(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_EarnScore) == 0x000004, "Wrong alignment on FortMcpProfileAccount_EarnScore");
static_assert(sizeof(FortMcpProfileAccount_EarnScore) == 0x000038, "Wrong size on FortMcpProfileAccount_EarnScore");
static_assert(offsetof(FortMcpProfileAccount_EarnScore, TotalScore) == 0x000000, "Member 'FortMcpProfileAccount_EarnScore::TotalScore' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EarnScore, MatchmakingSessionId) == 0x000004, "Member 'FortMcpProfileAccount_EarnScore::MatchmakingSessionId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EarnScore, HeroId) == 0x000010, "Member 'FortMcpProfileAccount_EarnScore::HeroId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EarnScore, bCriticalMatchBonus) == 0x00001C, "Member 'FortMcpProfileAccount_EarnScore::bCriticalMatchBonus' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EarnScore, Context) == 0x000020, "Member 'FortMcpProfileAccount_EarnScore::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.EndPrimaryMission
// 0x0044 (0x0044 - 0x0000)
struct FortMcpProfileAccount_EndPrimaryMission final
{
public:
	class FString                                 MatchmakingSessionId;                              // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MissionName;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MissionStatus;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMissionPoints;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCriticalMatchBonus;                               // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDedicatedServerUrlContext             Context;                                           // 0x002C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_EndPrimaryMission) == 0x000004, "Wrong alignment on FortMcpProfileAccount_EndPrimaryMission");
static_assert(sizeof(FortMcpProfileAccount_EndPrimaryMission) == 0x000044, "Wrong size on FortMcpProfileAccount_EndPrimaryMission");
static_assert(offsetof(FortMcpProfileAccount_EndPrimaryMission, MatchmakingSessionId) == 0x000000, "Member 'FortMcpProfileAccount_EndPrimaryMission::MatchmakingSessionId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EndPrimaryMission, MissionName) == 0x00000C, "Member 'FortMcpProfileAccount_EndPrimaryMission::MissionName' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EndPrimaryMission, MissionStatus) == 0x000018, "Member 'FortMcpProfileAccount_EndPrimaryMission::MissionStatus' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EndPrimaryMission, NumMissionPoints) == 0x000024, "Member 'FortMcpProfileAccount_EndPrimaryMission::NumMissionPoints' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EndPrimaryMission, bCriticalMatchBonus) == 0x000028, "Member 'FortMcpProfileAccount_EndPrimaryMission::bCriticalMatchBonus' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EndPrimaryMission, Context) == 0x00002C, "Member 'FortMcpProfileAccount_EndPrimaryMission::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.EquipCharCosmetic
// 0x0034 (0x0034 - 0x0000)
struct FortMcpProfileAccount_EquipCharCosmetic final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CosmeticId;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TypeId;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x001C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_EquipCharCosmetic) == 0x000004, "Wrong alignment on FortMcpProfileAccount_EquipCharCosmetic");
static_assert(sizeof(FortMcpProfileAccount_EquipCharCosmetic) == 0x000034, "Wrong size on FortMcpProfileAccount_EquipCharCosmetic");
static_assert(offsetof(FortMcpProfileAccount_EquipCharCosmetic, CharacterId) == 0x000000, "Member 'FortMcpProfileAccount_EquipCharCosmetic::CharacterId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EquipCharCosmetic, CosmeticId) == 0x00000C, "Member 'FortMcpProfileAccount_EquipCharCosmetic::CosmeticId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EquipCharCosmetic, TypeId) == 0x000018, "Member 'FortMcpProfileAccount_EquipCharCosmetic::TypeId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_EquipCharCosmetic, Context) == 0x00001C, "Member 'FortMcpProfileAccount_EquipCharCosmetic::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.FortRerollDailyQuest
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_FortRerollDailyQuest final
{
public:
	class FString                                 QuestId;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_FortRerollDailyQuest) == 0x000004, "Wrong alignment on FortMcpProfileAccount_FortRerollDailyQuest");
static_assert(sizeof(FortMcpProfileAccount_FortRerollDailyQuest) == 0x000024, "Wrong size on FortMcpProfileAccount_FortRerollDailyQuest");
static_assert(offsetof(FortMcpProfileAccount_FortRerollDailyQuest, QuestId) == 0x000000, "Member 'FortMcpProfileAccount_FortRerollDailyQuest::QuestId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_FortRerollDailyQuest, Context) == 0x00000C, "Member 'FortMcpProfileAccount_FortRerollDailyQuest::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.MarkItemSeen
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_MarkItemSeen final
{
public:
	TArray<class FString>                         ItemIds;                                           // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_MarkItemSeen) == 0x000004, "Wrong alignment on FortMcpProfileAccount_MarkItemSeen");
static_assert(sizeof(FortMcpProfileAccount_MarkItemSeen) == 0x000024, "Wrong size on FortMcpProfileAccount_MarkItemSeen");
static_assert(offsetof(FortMcpProfileAccount_MarkItemSeen, ItemIds) == 0x000000, "Member 'FortMcpProfileAccount_MarkItemSeen::ItemIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_MarkItemSeen, Context) == 0x00000C, "Member 'FortMcpProfileAccount_MarkItemSeen::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.MarkNewQuestNotificationSent
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_MarkNewQuestNotificationSent final
{
public:
	TArray<class FString>                         ItemIds;                                           // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_MarkNewQuestNotificationSent) == 0x000004, "Wrong alignment on FortMcpProfileAccount_MarkNewQuestNotificationSent");
static_assert(sizeof(FortMcpProfileAccount_MarkNewQuestNotificationSent) == 0x000024, "Wrong size on FortMcpProfileAccount_MarkNewQuestNotificationSent");
static_assert(offsetof(FortMcpProfileAccount_MarkNewQuestNotificationSent, ItemIds) == 0x000000, "Member 'FortMcpProfileAccount_MarkNewQuestNotificationSent::ItemIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_MarkNewQuestNotificationSent, Context) == 0x00000C, "Member 'FortMcpProfileAccount_MarkNewQuestNotificationSent::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.OpenCardPack
// 0x0028 (0x0028 - 0x0000)
struct FortMcpProfileAccount_OpenCardPack final
{
public:
	class FString                                 CardPackItemId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectionIdx;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0010(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_OpenCardPack) == 0x000004, "Wrong alignment on FortMcpProfileAccount_OpenCardPack");
static_assert(sizeof(FortMcpProfileAccount_OpenCardPack) == 0x000028, "Wrong size on FortMcpProfileAccount_OpenCardPack");
static_assert(offsetof(FortMcpProfileAccount_OpenCardPack, CardPackItemId) == 0x000000, "Member 'FortMcpProfileAccount_OpenCardPack::CardPackItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_OpenCardPack, SelectionIdx) == 0x00000C, "Member 'FortMcpProfileAccount_OpenCardPack::SelectionIdx' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_OpenCardPack, Context) == 0x000010, "Member 'FortMcpProfileAccount_OpenCardPack::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.QuestLogin
// 0x0018 (0x0018 - 0x0000)
struct FortMcpProfileAccount_QuestLogin final
{
public:
	struct FClientUrlContext                      Context;                                           // 0x0000(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_QuestLogin) == 0x000004, "Wrong alignment on FortMcpProfileAccount_QuestLogin");
static_assert(sizeof(FortMcpProfileAccount_QuestLogin) == 0x000018, "Wrong size on FortMcpProfileAccount_QuestLogin");
static_assert(offsetof(FortMcpProfileAccount_QuestLogin, Context) == 0x000000, "Member 'FortMcpProfileAccount_QuestLogin::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.RecycleItem
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_RecycleItem final
{
public:
	class FString                                 TargetItemId;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_RecycleItem) == 0x000004, "Wrong alignment on FortMcpProfileAccount_RecycleItem");
static_assert(sizeof(FortMcpProfileAccount_RecycleItem) == 0x000024, "Wrong size on FortMcpProfileAccount_RecycleItem");
static_assert(offsetof(FortMcpProfileAccount_RecycleItem, TargetItemId) == 0x000000, "Member 'FortMcpProfileAccount_RecycleItem::TargetItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_RecycleItem, Context) == 0x00000C, "Member 'FortMcpProfileAccount_RecycleItem::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.RenameHero
// 0x0030 (0x0030 - 0x0000)
struct FortMcpProfileAccount_RenameHero final
{
public:
	class FString                                 HeroId;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewHeroName;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0018(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_RenameHero) == 0x000004, "Wrong alignment on FortMcpProfileAccount_RenameHero");
static_assert(sizeof(FortMcpProfileAccount_RenameHero) == 0x000030, "Wrong size on FortMcpProfileAccount_RenameHero");
static_assert(offsetof(FortMcpProfileAccount_RenameHero, HeroId) == 0x000000, "Member 'FortMcpProfileAccount_RenameHero::HeroId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_RenameHero, NewHeroName) == 0x00000C, "Member 'FortMcpProfileAccount_RenameHero::NewHeroName' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_RenameHero, Context) == 0x000018, "Member 'FortMcpProfileAccount_RenameHero::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetDefaultHero
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_SetDefaultHero final
{
public:
	class FString                                 DefaultHeroId;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetDefaultHero) == 0x000004, "Wrong alignment on FortMcpProfileAccount_SetDefaultHero");
static_assert(sizeof(FortMcpProfileAccount_SetDefaultHero) == 0x000024, "Wrong size on FortMcpProfileAccount_SetDefaultHero");
static_assert(offsetof(FortMcpProfileAccount_SetDefaultHero, DefaultHeroId) == 0x000000, "Member 'FortMcpProfileAccount_SetDefaultHero::DefaultHeroId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetDefaultHero, Context) == 0x00000C, "Member 'FortMcpProfileAccount_SetDefaultHero::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetGameplayStats
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_SetGameplayStats final
{
public:
	TArray<struct FFortPersistentGameplayStatValue> GameplayStats;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetGameplayStats) == 0x000004, "Wrong alignment on FortMcpProfileAccount_SetGameplayStats");
static_assert(sizeof(FortMcpProfileAccount_SetGameplayStats) == 0x000024, "Wrong size on FortMcpProfileAccount_SetGameplayStats");
static_assert(offsetof(FortMcpProfileAccount_SetGameplayStats, GameplayStats) == 0x000000, "Member 'FortMcpProfileAccount_SetGameplayStats::GameplayStats' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetGameplayStats, Context) == 0x00000C, "Member 'FortMcpProfileAccount_SetGameplayStats::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetHeroAbilities
// 0x0038 (0x0038 - 0x0000)
struct FortMcpProfileAccount_SetHeroAbilities final
{
public:
	class FString                                 HeroId;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrimaryTraitAbilities;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondaryTraitAbilities_Alpha;                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondaryTraitAbilities_Beta;                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondaryTraitAbilities_Gamma;                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondaryTraitAbilities_Delta;                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0020(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetHeroAbilities) == 0x000004, "Wrong alignment on FortMcpProfileAccount_SetHeroAbilities");
static_assert(sizeof(FortMcpProfileAccount_SetHeroAbilities) == 0x000038, "Wrong size on FortMcpProfileAccount_SetHeroAbilities");
static_assert(offsetof(FortMcpProfileAccount_SetHeroAbilities, HeroId) == 0x000000, "Member 'FortMcpProfileAccount_SetHeroAbilities::HeroId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHeroAbilities, PrimaryTraitAbilities) == 0x00000C, "Member 'FortMcpProfileAccount_SetHeroAbilities::PrimaryTraitAbilities' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHeroAbilities, SecondaryTraitAbilities_Alpha) == 0x000010, "Member 'FortMcpProfileAccount_SetHeroAbilities::SecondaryTraitAbilities_Alpha' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHeroAbilities, SecondaryTraitAbilities_Beta) == 0x000014, "Member 'FortMcpProfileAccount_SetHeroAbilities::SecondaryTraitAbilities_Beta' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHeroAbilities, SecondaryTraitAbilities_Gamma) == 0x000018, "Member 'FortMcpProfileAccount_SetHeroAbilities::SecondaryTraitAbilities_Gamma' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHeroAbilities, SecondaryTraitAbilities_Delta) == 0x00001C, "Member 'FortMcpProfileAccount_SetHeroAbilities::SecondaryTraitAbilities_Delta' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHeroAbilities, Context) == 0x000020, "Member 'FortMcpProfileAccount_SetHeroAbilities::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetHeroModeLoadout
// 0x003C (0x003C - 0x0000)
struct FortMcpProfileAccount_SetHeroModeLoadout final
{
public:
	class FString                                 HeroId;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortSavedModeLoadout                  ModeLoadout;                                       // 0x000C(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0024(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetHeroModeLoadout) == 0x000004, "Wrong alignment on FortMcpProfileAccount_SetHeroModeLoadout");
static_assert(sizeof(FortMcpProfileAccount_SetHeroModeLoadout) == 0x00003C, "Wrong size on FortMcpProfileAccount_SetHeroModeLoadout");
static_assert(offsetof(FortMcpProfileAccount_SetHeroModeLoadout, HeroId) == 0x000000, "Member 'FortMcpProfileAccount_SetHeroModeLoadout::HeroId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHeroModeLoadout, ModeLoadout) == 0x00000C, "Member 'FortMcpProfileAccount_SetHeroModeLoadout::ModeLoadout' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHeroModeLoadout, Context) == 0x000024, "Member 'FortMcpProfileAccount_SetHeroModeLoadout::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetHomebaseMeta
// 0x002C (0x002C - 0x0000)
struct FortMcpProfileAccount_SetHomebaseMeta final
{
public:
	class FString                                 TownName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlagPattern;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlagColor;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0014(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetHomebaseMeta) == 0x000004, "Wrong alignment on FortMcpProfileAccount_SetHomebaseMeta");
static_assert(sizeof(FortMcpProfileAccount_SetHomebaseMeta) == 0x00002C, "Wrong size on FortMcpProfileAccount_SetHomebaseMeta");
static_assert(offsetof(FortMcpProfileAccount_SetHomebaseMeta, TownName) == 0x000000, "Member 'FortMcpProfileAccount_SetHomebaseMeta::TownName' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHomebaseMeta, FlagPattern) == 0x00000C, "Member 'FortMcpProfileAccount_SetHomebaseMeta::FlagPattern' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHomebaseMeta, FlagColor) == 0x000010, "Member 'FortMcpProfileAccount_SetHomebaseMeta::FlagColor' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetHomebaseMeta, Context) == 0x000014, "Member 'FortMcpProfileAccount_SetHomebaseMeta::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SetModeLoadout
// 0x0054 (0x0054 - 0x0000)
struct FortMcpProfileAccount_SetModeLoadout final
{
public:
	struct FFortSavedModeLoadout                  ModeLoadout;                                       // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 HeroId;                                            // 0x0018(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortSavedModeLoadout                  HeroModeLoadout;                                   // 0x0024(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x003C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SetModeLoadout) == 0x000004, "Wrong alignment on FortMcpProfileAccount_SetModeLoadout");
static_assert(sizeof(FortMcpProfileAccount_SetModeLoadout) == 0x000054, "Wrong size on FortMcpProfileAccount_SetModeLoadout");
static_assert(offsetof(FortMcpProfileAccount_SetModeLoadout, ModeLoadout) == 0x000000, "Member 'FortMcpProfileAccount_SetModeLoadout::ModeLoadout' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetModeLoadout, HeroId) == 0x000018, "Member 'FortMcpProfileAccount_SetModeLoadout::HeroId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetModeLoadout, HeroModeLoadout) == 0x000024, "Member 'FortMcpProfileAccount_SetModeLoadout::HeroModeLoadout' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_SetModeLoadout, Context) == 0x00003C, "Member 'FortMcpProfileAccount_SetModeLoadout::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.SkipTutorial
// 0x0018 (0x0018 - 0x0000)
struct FortMcpProfileAccount_SkipTutorial final
{
public:
	struct FClientUrlContext                      Context;                                           // 0x0000(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_SkipTutorial) == 0x000004, "Wrong alignment on FortMcpProfileAccount_SkipTutorial");
static_assert(sizeof(FortMcpProfileAccount_SkipTutorial) == 0x000018, "Wrong size on FortMcpProfileAccount_SkipTutorial");
static_assert(offsetof(FortMcpProfileAccount_SkipTutorial, Context) == 0x000000, "Member 'FortMcpProfileAccount_SkipTutorial::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.UnloadWarehouse
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_UnloadWarehouse final
{
public:
	TArray<class FString>                         ResourceTypes;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_UnloadWarehouse) == 0x000004, "Wrong alignment on FortMcpProfileAccount_UnloadWarehouse");
static_assert(sizeof(FortMcpProfileAccount_UnloadWarehouse) == 0x000024, "Wrong size on FortMcpProfileAccount_UnloadWarehouse");
static_assert(offsetof(FortMcpProfileAccount_UnloadWarehouse, ResourceTypes) == 0x000000, "Member 'FortMcpProfileAccount_UnloadWarehouse::ResourceTypes' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UnloadWarehouse, Context) == 0x00000C, "Member 'FortMcpProfileAccount_UnloadWarehouse::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.UnslotAllWorkers
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_UnslotAllWorkers final
{
public:
	TArray<class FString>                         BuildingIds;                                       // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_UnslotAllWorkers) == 0x000004, "Wrong alignment on FortMcpProfileAccount_UnslotAllWorkers");
static_assert(sizeof(FortMcpProfileAccount_UnslotAllWorkers) == 0x000024, "Wrong size on FortMcpProfileAccount_UnslotAllWorkers");
static_assert(offsetof(FortMcpProfileAccount_UnslotAllWorkers, BuildingIds) == 0x000000, "Member 'FortMcpProfileAccount_UnslotAllWorkers::BuildingIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UnslotAllWorkers, Context) == 0x00000C, "Member 'FortMcpProfileAccount_UnslotAllWorkers::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.UpdateBuildingLevelAndRating
// 0x002C (0x002C - 0x0000)
struct FortMcpProfileAccount_UpdateBuildingLevelAndRating final
{
public:
	class FString                                 BuildingId;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastBuildingLevel;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastBuildingRating;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x0014(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_UpdateBuildingLevelAndRating) == 0x000004, "Wrong alignment on FortMcpProfileAccount_UpdateBuildingLevelAndRating");
static_assert(sizeof(FortMcpProfileAccount_UpdateBuildingLevelAndRating) == 0x00002C, "Wrong size on FortMcpProfileAccount_UpdateBuildingLevelAndRating");
static_assert(offsetof(FortMcpProfileAccount_UpdateBuildingLevelAndRating, BuildingId) == 0x000000, "Member 'FortMcpProfileAccount_UpdateBuildingLevelAndRating::BuildingId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UpdateBuildingLevelAndRating, LastBuildingLevel) == 0x00000C, "Member 'FortMcpProfileAccount_UpdateBuildingLevelAndRating::LastBuildingLevel' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UpdateBuildingLevelAndRating, LastBuildingRating) == 0x000010, "Member 'FortMcpProfileAccount_UpdateBuildingLevelAndRating::LastBuildingRating' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UpdateBuildingLevelAndRating, Context) == 0x000014, "Member 'FortMcpProfileAccount_UpdateBuildingLevelAndRating::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.UpdateQuestClientObjectives
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_UpdateQuestClientObjectives final
{
public:
	TArray<struct FFortQuestObjectiveCompletion>  Advance;                                           // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_UpdateQuestClientObjectives) == 0x000004, "Wrong alignment on FortMcpProfileAccount_UpdateQuestClientObjectives");
static_assert(sizeof(FortMcpProfileAccount_UpdateQuestClientObjectives) == 0x000024, "Wrong size on FortMcpProfileAccount_UpdateQuestClientObjectives");
static_assert(offsetof(FortMcpProfileAccount_UpdateQuestClientObjectives, Advance) == 0x000000, "Member 'FortMcpProfileAccount_UpdateQuestClientObjectives::Advance' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UpdateQuestClientObjectives, Context) == 0x00000C, "Member 'FortMcpProfileAccount_UpdateQuestClientObjectives::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.UpdateQuests
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_UpdateQuests final
{
public:
	TArray<struct FFortQuestObjectiveCompletion>  Advance;                                           // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_UpdateQuests) == 0x000004, "Wrong alignment on FortMcpProfileAccount_UpdateQuests");
static_assert(sizeof(FortMcpProfileAccount_UpdateQuests) == 0x000024, "Wrong size on FortMcpProfileAccount_UpdateQuests");
static_assert(offsetof(FortMcpProfileAccount_UpdateQuests, Advance) == 0x000000, "Member 'FortMcpProfileAccount_UpdateQuests::Advance' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UpdateQuests, Context) == 0x00000C, "Member 'FortMcpProfileAccount_UpdateQuests::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.UpgradeBuilding
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_UpgradeBuilding final
{
public:
	class FString                                 BuildingId;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_UpgradeBuilding) == 0x000004, "Wrong alignment on FortMcpProfileAccount_UpgradeBuilding");
static_assert(sizeof(FortMcpProfileAccount_UpgradeBuilding) == 0x000024, "Wrong size on FortMcpProfileAccount_UpgradeBuilding");
static_assert(offsetof(FortMcpProfileAccount_UpgradeBuilding, BuildingId) == 0x000000, "Member 'FortMcpProfileAccount_UpgradeBuilding::BuildingId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UpgradeBuilding, Context) == 0x00000C, "Member 'FortMcpProfileAccount_UpgradeBuilding::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.UpgradeItem
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_UpgradeItem final
{
public:
	class FString                                 TargetItemId;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_UpgradeItem) == 0x000004, "Wrong alignment on FortMcpProfileAccount_UpgradeItem");
static_assert(sizeof(FortMcpProfileAccount_UpgradeItem) == 0x000024, "Wrong size on FortMcpProfileAccount_UpgradeItem");
static_assert(offsetof(FortMcpProfileAccount_UpgradeItem, TargetItemId) == 0x000000, "Member 'FortMcpProfileAccount_UpgradeItem::TargetItemId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UpgradeItem, Context) == 0x00000C, "Member 'FortMcpProfileAccount_UpgradeItem::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileAccount.UpgradeWorker
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileAccount_UpgradeWorker final
{
public:
	class FString                                 TargetWorkerId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FClientUrlContext                      Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileAccount_UpgradeWorker) == 0x000004, "Wrong alignment on FortMcpProfileAccount_UpgradeWorker");
static_assert(sizeof(FortMcpProfileAccount_UpgradeWorker) == 0x000024, "Wrong size on FortMcpProfileAccount_UpgradeWorker");
static_assert(offsetof(FortMcpProfileAccount_UpgradeWorker, TargetWorkerId) == 0x000000, "Member 'FortMcpProfileAccount_UpgradeWorker::TargetWorkerId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileAccount_UpgradeWorker, Context) == 0x00000C, "Member 'FortMcpProfileAccount_UpgradeWorker::Context' has a wrong offset!");

// Function FortniteGame.FortMissionPowerPointsInterface.GetAvailabilityWeight
// 0x0008 (0x0008 - 0x0000)
struct FortMissionPowerPointsInterface_GetAvailabilityWeight final
{
public:
	float                                         DifficultyLevel;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionPowerPointsInterface_GetAvailabilityWeight) == 0x000004, "Wrong alignment on FortMissionPowerPointsInterface_GetAvailabilityWeight");
static_assert(sizeof(FortMissionPowerPointsInterface_GetAvailabilityWeight) == 0x000008, "Wrong size on FortMissionPowerPointsInterface_GetAvailabilityWeight");
static_assert(offsetof(FortMissionPowerPointsInterface_GetAvailabilityWeight, DifficultyLevel) == 0x000000, "Member 'FortMissionPowerPointsInterface_GetAvailabilityWeight::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FortMissionPowerPointsInterface_GetAvailabilityWeight, ReturnValue) == 0x000004, "Member 'FortMissionPowerPointsInterface_GetAvailabilityWeight::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionPowerPointsInterface.GetInitialRangeLerpValue
// 0x0008 (0x0008 - 0x0000)
struct FortMissionPowerPointsInterface_GetInitialRangeLerpValue final
{
public:
	float                                         PointsAvailable;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionPowerPointsInterface_GetInitialRangeLerpValue) == 0x000004, "Wrong alignment on FortMissionPowerPointsInterface_GetInitialRangeLerpValue");
static_assert(sizeof(FortMissionPowerPointsInterface_GetInitialRangeLerpValue) == 0x000008, "Wrong size on FortMissionPowerPointsInterface_GetInitialRangeLerpValue");
static_assert(offsetof(FortMissionPowerPointsInterface_GetInitialRangeLerpValue, PointsAvailable) == 0x000000, "Member 'FortMissionPowerPointsInterface_GetInitialRangeLerpValue::PointsAvailable' has a wrong offset!");
static_assert(offsetof(FortMissionPowerPointsInterface_GetInitialRangeLerpValue, ReturnValue) == 0x000004, "Member 'FortMissionPowerPointsInterface_GetInitialRangeLerpValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionPowerPointsInterface.GetMaxRangeLerpValue
// 0x000C (0x000C - 0x0000)
struct FortMissionPowerPointsInterface_GetMaxRangeLerpValue final
{
public:
	float                                         PointsAvailable;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousLerpValue;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionPowerPointsInterface_GetMaxRangeLerpValue) == 0x000004, "Wrong alignment on FortMissionPowerPointsInterface_GetMaxRangeLerpValue");
static_assert(sizeof(FortMissionPowerPointsInterface_GetMaxRangeLerpValue) == 0x00000C, "Wrong size on FortMissionPowerPointsInterface_GetMaxRangeLerpValue");
static_assert(offsetof(FortMissionPowerPointsInterface_GetMaxRangeLerpValue, PointsAvailable) == 0x000000, "Member 'FortMissionPowerPointsInterface_GetMaxRangeLerpValue::PointsAvailable' has a wrong offset!");
static_assert(offsetof(FortMissionPowerPointsInterface_GetMaxRangeLerpValue, PreviousLerpValue) == 0x000004, "Member 'FortMissionPowerPointsInterface_GetMaxRangeLerpValue::PreviousLerpValue' has a wrong offset!");
static_assert(offsetof(FortMissionPowerPointsInterface_GetMaxRangeLerpValue, ReturnValue) == 0x000008, "Member 'FortMissionPowerPointsInterface_GetMaxRangeLerpValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionPowerPointsInterface.GetPowerPointsCost
// 0x0008 (0x0008 - 0x0000)
struct FortMissionPowerPointsInterface_GetPowerPointsCost final
{
public:
	float                                         LerpValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionPowerPointsInterface_GetPowerPointsCost) == 0x000004, "Wrong alignment on FortMissionPowerPointsInterface_GetPowerPointsCost");
static_assert(sizeof(FortMissionPowerPointsInterface_GetPowerPointsCost) == 0x000008, "Wrong size on FortMissionPowerPointsInterface_GetPowerPointsCost");
static_assert(offsetof(FortMissionPowerPointsInterface_GetPowerPointsCost, LerpValue) == 0x000000, "Member 'FortMissionPowerPointsInterface_GetPowerPointsCost::LerpValue' has a wrong offset!");
static_assert(offsetof(FortMissionPowerPointsInterface_GetPowerPointsCost, ReturnValue) == 0x000004, "Member 'FortMissionPowerPointsInterface_GetPowerPointsCost::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDroppedParams.BreakData
// 0x000C (0x000C - 0x0000)
struct FortItemDroppedParams_BreakData final
{
public:
	class UFortWorldItemDefinition*               _DroppedItemDefinition;                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _DroppedBy;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _AmountCollected;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDroppedParams_BreakData) == 0x000004, "Wrong alignment on FortItemDroppedParams_BreakData");
static_assert(sizeof(FortItemDroppedParams_BreakData) == 0x00000C, "Wrong size on FortItemDroppedParams_BreakData");
static_assert(offsetof(FortItemDroppedParams_BreakData, _DroppedItemDefinition) == 0x000000, "Member 'FortItemDroppedParams_BreakData::_DroppedItemDefinition' has a wrong offset!");
static_assert(offsetof(FortItemDroppedParams_BreakData, _DroppedBy) == 0x000004, "Member 'FortItemDroppedParams_BreakData::_DroppedBy' has a wrong offset!");
static_assert(offsetof(FortItemDroppedParams_BreakData, _AmountCollected) == 0x000008, "Member 'FortItemDroppedParams_BreakData::_AmountCollected' has a wrong offset!");

// Function FortniteGame.FortItemDroppedParams.MakeData
// 0x0010 (0x0010 - 0x0000)
struct FortItemDroppedParams_MakeData final
{
public:
	const class UFortWorldItemDefinition*         _DroppedItemDefinition;                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _DroppedBy;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _AmountCollected;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDroppedParams*                 ThisParam;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemDroppedParams_MakeData) == 0x000004, "Wrong alignment on FortItemDroppedParams_MakeData");
static_assert(sizeof(FortItemDroppedParams_MakeData) == 0x000010, "Wrong size on FortItemDroppedParams_MakeData");
static_assert(offsetof(FortItemDroppedParams_MakeData, _DroppedItemDefinition) == 0x000000, "Member 'FortItemDroppedParams_MakeData::_DroppedItemDefinition' has a wrong offset!");
static_assert(offsetof(FortItemDroppedParams_MakeData, _DroppedBy) == 0x000004, "Member 'FortItemDroppedParams_MakeData::_DroppedBy' has a wrong offset!");
static_assert(offsetof(FortItemDroppedParams_MakeData, _AmountCollected) == 0x000008, "Member 'FortItemDroppedParams_MakeData::_AmountCollected' has a wrong offset!");
static_assert(offsetof(FortItemDroppedParams_MakeData, ThisParam) == 0x00000C, "Member 'FortItemDroppedParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortItemCraftedParams.BreakData
// 0x000C (0x000C - 0x0000)
struct FortItemCraftedParams_BreakData final
{
public:
	class UFortSchematicItemDefinition*           _SchematicDefinition;                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _CraftedBy;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _AmountCrafted;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftedParams_BreakData) == 0x000004, "Wrong alignment on FortItemCraftedParams_BreakData");
static_assert(sizeof(FortItemCraftedParams_BreakData) == 0x00000C, "Wrong size on FortItemCraftedParams_BreakData");
static_assert(offsetof(FortItemCraftedParams_BreakData, _SchematicDefinition) == 0x000000, "Member 'FortItemCraftedParams_BreakData::_SchematicDefinition' has a wrong offset!");
static_assert(offsetof(FortItemCraftedParams_BreakData, _CraftedBy) == 0x000004, "Member 'FortItemCraftedParams_BreakData::_CraftedBy' has a wrong offset!");
static_assert(offsetof(FortItemCraftedParams_BreakData, _AmountCrafted) == 0x000008, "Member 'FortItemCraftedParams_BreakData::_AmountCrafted' has a wrong offset!");

// Function FortniteGame.FortItemCraftedParams.MakeData
// 0x0010 (0x0010 - 0x0000)
struct FortItemCraftedParams_MakeData final
{
public:
	const class UFortSchematicItemDefinition*     _SchematicDefinition;                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _CraftedBy;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _AmountCrafted;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemCraftedParams*                 ThisParam;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortItemCraftedParams_MakeData) == 0x000004, "Wrong alignment on FortItemCraftedParams_MakeData");
static_assert(sizeof(FortItemCraftedParams_MakeData) == 0x000010, "Wrong size on FortItemCraftedParams_MakeData");
static_assert(offsetof(FortItemCraftedParams_MakeData, _SchematicDefinition) == 0x000000, "Member 'FortItemCraftedParams_MakeData::_SchematicDefinition' has a wrong offset!");
static_assert(offsetof(FortItemCraftedParams_MakeData, _CraftedBy) == 0x000004, "Member 'FortItemCraftedParams_MakeData::_CraftedBy' has a wrong offset!");
static_assert(offsetof(FortItemCraftedParams_MakeData, _AmountCrafted) == 0x000008, "Member 'FortItemCraftedParams_MakeData::_AmountCrafted' has a wrong offset!");
static_assert(offsetof(FortItemCraftedParams_MakeData, ThisParam) == 0x00000C, "Member 'FortItemCraftedParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortEnemyKilledParams.BreakData
// 0x0008 (0x0008 - 0x0000)
struct FortEnemyKilledParams_BreakData final
{
public:
	class AFortPawn*                              _KilledPawn;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _KilledBy;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEnemyKilledParams_BreakData) == 0x000004, "Wrong alignment on FortEnemyKilledParams_BreakData");
static_assert(sizeof(FortEnemyKilledParams_BreakData) == 0x000008, "Wrong size on FortEnemyKilledParams_BreakData");
static_assert(offsetof(FortEnemyKilledParams_BreakData, _KilledPawn) == 0x000000, "Member 'FortEnemyKilledParams_BreakData::_KilledPawn' has a wrong offset!");
static_assert(offsetof(FortEnemyKilledParams_BreakData, _KilledBy) == 0x000004, "Member 'FortEnemyKilledParams_BreakData::_KilledBy' has a wrong offset!");

// Function FortniteGame.FortEnemyKilledParams.MakeData
// 0x000C (0x000C - 0x0000)
struct FortEnemyKilledParams_MakeData final
{
public:
	class AFortPawn*                              _KilledPawn;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _KilledBy;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortEnemyKilledParams*                 ThisParam;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEnemyKilledParams_MakeData) == 0x000004, "Wrong alignment on FortEnemyKilledParams_MakeData");
static_assert(sizeof(FortEnemyKilledParams_MakeData) == 0x00000C, "Wrong size on FortEnemyKilledParams_MakeData");
static_assert(offsetof(FortEnemyKilledParams_MakeData, _KilledPawn) == 0x000000, "Member 'FortEnemyKilledParams_MakeData::_KilledPawn' has a wrong offset!");
static_assert(offsetof(FortEnemyKilledParams_MakeData, _KilledBy) == 0x000004, "Member 'FortEnemyKilledParams_MakeData::_KilledBy' has a wrong offset!");
static_assert(offsetof(FortEnemyKilledParams_MakeData, ThisParam) == 0x000008, "Member 'FortEnemyKilledParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortEnemyDamagedParams.BreakData
// 0x000C (0x000C - 0x0000)
struct FortEnemyDamagedParams_BreakData final
{
public:
	class AFortPawn*                              _DamagedPawn;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _DamagedBy;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DamageAmount;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEnemyDamagedParams_BreakData) == 0x000004, "Wrong alignment on FortEnemyDamagedParams_BreakData");
static_assert(sizeof(FortEnemyDamagedParams_BreakData) == 0x00000C, "Wrong size on FortEnemyDamagedParams_BreakData");
static_assert(offsetof(FortEnemyDamagedParams_BreakData, _DamagedPawn) == 0x000000, "Member 'FortEnemyDamagedParams_BreakData::_DamagedPawn' has a wrong offset!");
static_assert(offsetof(FortEnemyDamagedParams_BreakData, _DamagedBy) == 0x000004, "Member 'FortEnemyDamagedParams_BreakData::_DamagedBy' has a wrong offset!");
static_assert(offsetof(FortEnemyDamagedParams_BreakData, _DamageAmount) == 0x000008, "Member 'FortEnemyDamagedParams_BreakData::_DamageAmount' has a wrong offset!");

// Function FortniteGame.FortEnemyDamagedParams.MakeData
// 0x0010 (0x0010 - 0x0000)
struct FortEnemyDamagedParams_MakeData final
{
public:
	class AFortPawn*                              _DamagedPawn;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  _DamagedBy;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DamageAmount;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortEnemyDamagedParams*                ThisParam;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortEnemyDamagedParams_MakeData) == 0x000004, "Wrong alignment on FortEnemyDamagedParams_MakeData");
static_assert(sizeof(FortEnemyDamagedParams_MakeData) == 0x000010, "Wrong size on FortEnemyDamagedParams_MakeData");
static_assert(offsetof(FortEnemyDamagedParams_MakeData, _DamagedPawn) == 0x000000, "Member 'FortEnemyDamagedParams_MakeData::_DamagedPawn' has a wrong offset!");
static_assert(offsetof(FortEnemyDamagedParams_MakeData, _DamagedBy) == 0x000004, "Member 'FortEnemyDamagedParams_MakeData::_DamagedBy' has a wrong offset!");
static_assert(offsetof(FortEnemyDamagedParams_MakeData, _DamageAmount) == 0x000008, "Member 'FortEnemyDamagedParams_MakeData::_DamageAmount' has a wrong offset!");
static_assert(offsetof(FortEnemyDamagedParams_MakeData, ThisParam) == 0x00000C, "Member 'FortEnemyDamagedParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortNewPlayerParams.BreakData
// 0x0004 (0x0004 - 0x0000)
struct FortNewPlayerParams_BreakData final
{
public:
	class AFortPlayerController*                  _NewPlayerController;                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNewPlayerParams_BreakData) == 0x000004, "Wrong alignment on FortNewPlayerParams_BreakData");
static_assert(sizeof(FortNewPlayerParams_BreakData) == 0x000004, "Wrong size on FortNewPlayerParams_BreakData");
static_assert(offsetof(FortNewPlayerParams_BreakData, _NewPlayerController) == 0x000000, "Member 'FortNewPlayerParams_BreakData::_NewPlayerController' has a wrong offset!");

// Function FortniteGame.FortNewPlayerParams.MakeData
// 0x0008 (0x0008 - 0x0000)
struct FortNewPlayerParams_MakeData final
{
public:
	class AFortPlayerController*                  _NewPlayerController;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortNewPlayerParams*                   ThisParam;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNewPlayerParams_MakeData) == 0x000004, "Wrong alignment on FortNewPlayerParams_MakeData");
static_assert(sizeof(FortNewPlayerParams_MakeData) == 0x000008, "Wrong size on FortNewPlayerParams_MakeData");
static_assert(offsetof(FortNewPlayerParams_MakeData, _NewPlayerController) == 0x000000, "Member 'FortNewPlayerParams_MakeData::_NewPlayerController' has a wrong offset!");
static_assert(offsetof(FortNewPlayerParams_MakeData, ThisParam) == 0x000004, "Member 'FortNewPlayerParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortPlayerSpawnedParams.BreakData
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerSpawnedParams_BreakData final
{
public:
	class AFortPlayerController*                  _SpawnedPlayerController;                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSpawnedParams_BreakData) == 0x000004, "Wrong alignment on FortPlayerSpawnedParams_BreakData");
static_assert(sizeof(FortPlayerSpawnedParams_BreakData) == 0x000004, "Wrong size on FortPlayerSpawnedParams_BreakData");
static_assert(offsetof(FortPlayerSpawnedParams_BreakData, _SpawnedPlayerController) == 0x000000, "Member 'FortPlayerSpawnedParams_BreakData::_SpawnedPlayerController' has a wrong offset!");

// Function FortniteGame.FortPlayerSpawnedParams.MakeData
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerSpawnedParams_MakeData final
{
public:
	class AFortPlayerController*                  _SpawnedPlayerController;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerSpawnedParams*               ThisParam;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerSpawnedParams_MakeData) == 0x000004, "Wrong alignment on FortPlayerSpawnedParams_MakeData");
static_assert(sizeof(FortPlayerSpawnedParams_MakeData) == 0x000008, "Wrong size on FortPlayerSpawnedParams_MakeData");
static_assert(offsetof(FortPlayerSpawnedParams_MakeData, _SpawnedPlayerController) == 0x000000, "Member 'FortPlayerSpawnedParams_MakeData::_SpawnedPlayerController' has a wrong offset!");
static_assert(offsetof(FortPlayerSpawnedParams_MakeData, ThisParam) == 0x000004, "Member 'FortPlayerSpawnedParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortPlayerDiedParams.BreakData
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerDiedParams_BreakData final
{
public:
	class AFortPlayerPawn*                        _KilledPlayer;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _KilledBy;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerDiedParams_BreakData) == 0x000004, "Wrong alignment on FortPlayerDiedParams_BreakData");
static_assert(sizeof(FortPlayerDiedParams_BreakData) == 0x000008, "Wrong size on FortPlayerDiedParams_BreakData");
static_assert(offsetof(FortPlayerDiedParams_BreakData, _KilledPlayer) == 0x000000, "Member 'FortPlayerDiedParams_BreakData::_KilledPlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerDiedParams_BreakData, _KilledBy) == 0x000004, "Member 'FortPlayerDiedParams_BreakData::_KilledBy' has a wrong offset!");

// Function FortniteGame.FortPlayerDiedParams.MakeData
// 0x000C (0x000C - 0x0000)
struct FortPlayerDiedParams_MakeData final
{
public:
	class AFortPlayerPawn*                        _KilledPlayer;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            _KilledBy;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerDiedParams*                  ThisParam;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerDiedParams_MakeData) == 0x000004, "Wrong alignment on FortPlayerDiedParams_MakeData");
static_assert(sizeof(FortPlayerDiedParams_MakeData) == 0x00000C, "Wrong size on FortPlayerDiedParams_MakeData");
static_assert(offsetof(FortPlayerDiedParams_MakeData, _KilledPlayer) == 0x000000, "Member 'FortPlayerDiedParams_MakeData::_KilledPlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerDiedParams_MakeData, _KilledBy) == 0x000004, "Member 'FortPlayerDiedParams_MakeData::_KilledBy' has a wrong offset!");
static_assert(offsetof(FortPlayerDiedParams_MakeData, ThisParam) == 0x000008, "Member 'FortPlayerDiedParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortDayPhaseChangeParams.BreakData
// 0x0008 (0x0008 - 0x0000)
struct FortDayPhaseChangeParams_BreakData final
{
public:
	class AFortDayNightLightingAndFog*            _LightingAndFogManager;                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 _NewDayPhase;                                      // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDayPhaseChangeParams_BreakData) == 0x000004, "Wrong alignment on FortDayPhaseChangeParams_BreakData");
static_assert(sizeof(FortDayPhaseChangeParams_BreakData) == 0x000008, "Wrong size on FortDayPhaseChangeParams_BreakData");
static_assert(offsetof(FortDayPhaseChangeParams_BreakData, _LightingAndFogManager) == 0x000000, "Member 'FortDayPhaseChangeParams_BreakData::_LightingAndFogManager' has a wrong offset!");
static_assert(offsetof(FortDayPhaseChangeParams_BreakData, _NewDayPhase) == 0x000004, "Member 'FortDayPhaseChangeParams_BreakData::_NewDayPhase' has a wrong offset!");

// Function FortniteGame.FortDayPhaseChangeParams.MakeData
// 0x000C (0x000C - 0x0000)
struct FortDayPhaseChangeParams_MakeData final
{
public:
	class AFortDayNightLightingAndFog*            _LightingAndFogManager;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 _NewDayPhase;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortDayPhaseChangeParams*              ThisParam;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayPhaseChangeParams_MakeData) == 0x000004, "Wrong alignment on FortDayPhaseChangeParams_MakeData");
static_assert(sizeof(FortDayPhaseChangeParams_MakeData) == 0x00000C, "Wrong size on FortDayPhaseChangeParams_MakeData");
static_assert(offsetof(FortDayPhaseChangeParams_MakeData, _LightingAndFogManager) == 0x000000, "Member 'FortDayPhaseChangeParams_MakeData::_LightingAndFogManager' has a wrong offset!");
static_assert(offsetof(FortDayPhaseChangeParams_MakeData, _NewDayPhase) == 0x000004, "Member 'FortDayPhaseChangeParams_MakeData::_NewDayPhase' has a wrong offset!");
static_assert(offsetof(FortDayPhaseChangeParams_MakeData, ThisParam) == 0x000008, "Member 'FortDayPhaseChangeParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortPlayerBuiltParams.BreakData
// 0x000C (0x000C - 0x0000)
struct FortPlayerBuiltParams_BreakData final
{
public:
	class ABuildingActor*                         _Building;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  _Builder;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerBuiltParams_BreakData) == 0x000004, "Wrong alignment on FortPlayerBuiltParams_BreakData");
static_assert(sizeof(FortPlayerBuiltParams_BreakData) == 0x00000C, "Wrong size on FortPlayerBuiltParams_BreakData");
static_assert(offsetof(FortPlayerBuiltParams_BreakData, _Building) == 0x000000, "Member 'FortPlayerBuiltParams_BreakData::_Building' has a wrong offset!");
static_assert(offsetof(FortPlayerBuiltParams_BreakData, _BuildingType) == 0x000004, "Member 'FortPlayerBuiltParams_BreakData::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortPlayerBuiltParams_BreakData, _Builder) == 0x000008, "Member 'FortPlayerBuiltParams_BreakData::_Builder' has a wrong offset!");

// Function FortniteGame.FortPlayerBuiltParams.MakeData
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerBuiltParams_MakeData final
{
public:
	class ABuildingActor*                         _Building;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  _Builder;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerBuiltParams*                 ThisParam;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerBuiltParams_MakeData) == 0x000004, "Wrong alignment on FortPlayerBuiltParams_MakeData");
static_assert(sizeof(FortPlayerBuiltParams_MakeData) == 0x000010, "Wrong size on FortPlayerBuiltParams_MakeData");
static_assert(offsetof(FortPlayerBuiltParams_MakeData, _Building) == 0x000000, "Member 'FortPlayerBuiltParams_MakeData::_Building' has a wrong offset!");
static_assert(offsetof(FortPlayerBuiltParams_MakeData, _BuildingType) == 0x000004, "Member 'FortPlayerBuiltParams_MakeData::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortPlayerBuiltParams_MakeData, _Builder) == 0x000008, "Member 'FortPlayerBuiltParams_MakeData::_Builder' has a wrong offset!");
static_assert(offsetof(FortPlayerBuiltParams_MakeData, ThisParam) == 0x00000C, "Member 'FortPlayerBuiltParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortBuildingDestroyedParams.BreakData
// 0x000C (0x000C - 0x0000)
struct FortBuildingDestroyedParams_BreakData final
{
public:
	class ABuildingActor*                         _Building;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            _Destroyer;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBuildingDestroyedParams_BreakData) == 0x000004, "Wrong alignment on FortBuildingDestroyedParams_BreakData");
static_assert(sizeof(FortBuildingDestroyedParams_BreakData) == 0x00000C, "Wrong size on FortBuildingDestroyedParams_BreakData");
static_assert(offsetof(FortBuildingDestroyedParams_BreakData, _Building) == 0x000000, "Member 'FortBuildingDestroyedParams_BreakData::_Building' has a wrong offset!");
static_assert(offsetof(FortBuildingDestroyedParams_BreakData, _BuildingType) == 0x000004, "Member 'FortBuildingDestroyedParams_BreakData::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortBuildingDestroyedParams_BreakData, _Destroyer) == 0x000008, "Member 'FortBuildingDestroyedParams_BreakData::_Destroyer' has a wrong offset!");

// Function FortniteGame.FortBuildingDestroyedParams.MakeData
// 0x0010 (0x0010 - 0x0000)
struct FortBuildingDestroyedParams_MakeData final
{
public:
	class ABuildingActor*                         _Building;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            _Destroyer;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortBuildingDestroyedParams*           ThisParam;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBuildingDestroyedParams_MakeData) == 0x000004, "Wrong alignment on FortBuildingDestroyedParams_MakeData");
static_assert(sizeof(FortBuildingDestroyedParams_MakeData) == 0x000010, "Wrong size on FortBuildingDestroyedParams_MakeData");
static_assert(offsetof(FortBuildingDestroyedParams_MakeData, _Building) == 0x000000, "Member 'FortBuildingDestroyedParams_MakeData::_Building' has a wrong offset!");
static_assert(offsetof(FortBuildingDestroyedParams_MakeData, _BuildingType) == 0x000004, "Member 'FortBuildingDestroyedParams_MakeData::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortBuildingDestroyedParams_MakeData, _Destroyer) == 0x000008, "Member 'FortBuildingDestroyedParams_MakeData::_Destroyer' has a wrong offset!");
static_assert(offsetof(FortBuildingDestroyedParams_MakeData, ThisParam) == 0x00000C, "Member 'FortBuildingDestroyedParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortBuildingEditedParams.BreakData
// 0x0010 (0x0010 - 0x0000)
struct FortBuildingEditedParams_BreakData final
{
public:
	class ABuildingActor*                         _OriginalBuilding;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingActor*                         _NewBuilding;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  _Editor;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBuildingEditedParams_BreakData) == 0x000004, "Wrong alignment on FortBuildingEditedParams_BreakData");
static_assert(sizeof(FortBuildingEditedParams_BreakData) == 0x000010, "Wrong size on FortBuildingEditedParams_BreakData");
static_assert(offsetof(FortBuildingEditedParams_BreakData, _OriginalBuilding) == 0x000000, "Member 'FortBuildingEditedParams_BreakData::_OriginalBuilding' has a wrong offset!");
static_assert(offsetof(FortBuildingEditedParams_BreakData, _NewBuilding) == 0x000004, "Member 'FortBuildingEditedParams_BreakData::_NewBuilding' has a wrong offset!");
static_assert(offsetof(FortBuildingEditedParams_BreakData, _BuildingType) == 0x000008, "Member 'FortBuildingEditedParams_BreakData::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortBuildingEditedParams_BreakData, _Editor) == 0x00000C, "Member 'FortBuildingEditedParams_BreakData::_Editor' has a wrong offset!");

// Function FortniteGame.FortBuildingEditedParams.MakeData
// 0x0014 (0x0014 - 0x0000)
struct FortBuildingEditedParams_MakeData final
{
public:
	class ABuildingActor*                         _OriginalBuilding;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingActor*                         _NewBuilding;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  _Editor;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortBuildingEditedParams*              ThisParam;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBuildingEditedParams_MakeData) == 0x000004, "Wrong alignment on FortBuildingEditedParams_MakeData");
static_assert(sizeof(FortBuildingEditedParams_MakeData) == 0x000014, "Wrong size on FortBuildingEditedParams_MakeData");
static_assert(offsetof(FortBuildingEditedParams_MakeData, _OriginalBuilding) == 0x000000, "Member 'FortBuildingEditedParams_MakeData::_OriginalBuilding' has a wrong offset!");
static_assert(offsetof(FortBuildingEditedParams_MakeData, _NewBuilding) == 0x000004, "Member 'FortBuildingEditedParams_MakeData::_NewBuilding' has a wrong offset!");
static_assert(offsetof(FortBuildingEditedParams_MakeData, _BuildingType) == 0x000008, "Member 'FortBuildingEditedParams_MakeData::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortBuildingEditedParams_MakeData, _Editor) == 0x00000C, "Member 'FortBuildingEditedParams_MakeData::_Editor' has a wrong offset!");
static_assert(offsetof(FortBuildingEditedParams_MakeData, ThisParam) == 0x000010, "Member 'FortBuildingEditedParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortBuildingDamagedParams.BreakData
// 0x0010 (0x0010 - 0x0000)
struct FortBuildingDamagedParams_BreakData final
{
public:
	class ABuildingActor*                         _Building;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            _DamagedBy;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DamageAmount;                                     // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBuildingDamagedParams_BreakData) == 0x000004, "Wrong alignment on FortBuildingDamagedParams_BreakData");
static_assert(sizeof(FortBuildingDamagedParams_BreakData) == 0x000010, "Wrong size on FortBuildingDamagedParams_BreakData");
static_assert(offsetof(FortBuildingDamagedParams_BreakData, _Building) == 0x000000, "Member 'FortBuildingDamagedParams_BreakData::_Building' has a wrong offset!");
static_assert(offsetof(FortBuildingDamagedParams_BreakData, _BuildingType) == 0x000004, "Member 'FortBuildingDamagedParams_BreakData::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortBuildingDamagedParams_BreakData, _DamagedBy) == 0x000008, "Member 'FortBuildingDamagedParams_BreakData::_DamagedBy' has a wrong offset!");
static_assert(offsetof(FortBuildingDamagedParams_BreakData, _DamageAmount) == 0x00000C, "Member 'FortBuildingDamagedParams_BreakData::_DamageAmount' has a wrong offset!");

// Function FortniteGame.FortBuildingDamagedParams.MakeData
// 0x0014 (0x0014 - 0x0000)
struct FortBuildingDamagedParams_MakeData final
{
public:
	class ABuildingActor*                         _Building;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             _BuildingType;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            _DamagedBy;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _DamageAmount;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortBuildingDamagedParams*             ThisParam;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortBuildingDamagedParams_MakeData) == 0x000004, "Wrong alignment on FortBuildingDamagedParams_MakeData");
static_assert(sizeof(FortBuildingDamagedParams_MakeData) == 0x000014, "Wrong size on FortBuildingDamagedParams_MakeData");
static_assert(offsetof(FortBuildingDamagedParams_MakeData, _Building) == 0x000000, "Member 'FortBuildingDamagedParams_MakeData::_Building' has a wrong offset!");
static_assert(offsetof(FortBuildingDamagedParams_MakeData, _BuildingType) == 0x000004, "Member 'FortBuildingDamagedParams_MakeData::_BuildingType' has a wrong offset!");
static_assert(offsetof(FortBuildingDamagedParams_MakeData, _DamagedBy) == 0x000008, "Member 'FortBuildingDamagedParams_MakeData::_DamagedBy' has a wrong offset!");
static_assert(offsetof(FortBuildingDamagedParams_MakeData, _DamageAmount) == 0x00000C, "Member 'FortBuildingDamagedParams_MakeData::_DamageAmount' has a wrong offset!");
static_assert(offsetof(FortBuildingDamagedParams_MakeData, ThisParam) == 0x000010, "Member 'FortBuildingDamagedParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortMissionSucceededParams.BreakData
// 0x0004 (0x0004 - 0x0000)
struct FortMissionSucceededParams_BreakData final
{
public:
	class AFortMission*                           _SucceededMission;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionSucceededParams_BreakData) == 0x000004, "Wrong alignment on FortMissionSucceededParams_BreakData");
static_assert(sizeof(FortMissionSucceededParams_BreakData) == 0x000004, "Wrong size on FortMissionSucceededParams_BreakData");
static_assert(offsetof(FortMissionSucceededParams_BreakData, _SucceededMission) == 0x000000, "Member 'FortMissionSucceededParams_BreakData::_SucceededMission' has a wrong offset!");

// Function FortniteGame.FortMissionSucceededParams.MakeData
// 0x0008 (0x0008 - 0x0000)
struct FortMissionSucceededParams_MakeData final
{
public:
	class AFortMission*                           _SucceededMission;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionSucceededParams*            ThisParam;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionSucceededParams_MakeData) == 0x000004, "Wrong alignment on FortMissionSucceededParams_MakeData");
static_assert(sizeof(FortMissionSucceededParams_MakeData) == 0x000008, "Wrong size on FortMissionSucceededParams_MakeData");
static_assert(offsetof(FortMissionSucceededParams_MakeData, _SucceededMission) == 0x000000, "Member 'FortMissionSucceededParams_MakeData::_SucceededMission' has a wrong offset!");
static_assert(offsetof(FortMissionSucceededParams_MakeData, ThisParam) == 0x000004, "Member 'FortMissionSucceededParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortMissionFailedParams.BreakData
// 0x0004 (0x0004 - 0x0000)
struct FortMissionFailedParams_BreakData final
{
public:
	class AFortMission*                           _FailedMission;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionFailedParams_BreakData) == 0x000004, "Wrong alignment on FortMissionFailedParams_BreakData");
static_assert(sizeof(FortMissionFailedParams_BreakData) == 0x000004, "Wrong size on FortMissionFailedParams_BreakData");
static_assert(offsetof(FortMissionFailedParams_BreakData, _FailedMission) == 0x000000, "Member 'FortMissionFailedParams_BreakData::_FailedMission' has a wrong offset!");

// Function FortniteGame.FortMissionFailedParams.MakeData
// 0x0008 (0x0008 - 0x0000)
struct FortMissionFailedParams_MakeData final
{
public:
	class AFortMission*                           _FailedMission;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionFailedParams*               ThisParam;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionFailedParams_MakeData) == 0x000004, "Wrong alignment on FortMissionFailedParams_MakeData");
static_assert(sizeof(FortMissionFailedParams_MakeData) == 0x000008, "Wrong size on FortMissionFailedParams_MakeData");
static_assert(offsetof(FortMissionFailedParams_MakeData, _FailedMission) == 0x000000, "Member 'FortMissionFailedParams_MakeData::_FailedMission' has a wrong offset!");
static_assert(offsetof(FortMissionFailedParams_MakeData, ThisParam) == 0x000004, "Member 'FortMissionFailedParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortMissionNeutralCompleteParams.BreakData
// 0x0004 (0x0004 - 0x0000)
struct FortMissionNeutralCompleteParams_BreakData final
{
public:
	class AFortMission*                           _NeutrallyCompletedMission;                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionNeutralCompleteParams_BreakData) == 0x000004, "Wrong alignment on FortMissionNeutralCompleteParams_BreakData");
static_assert(sizeof(FortMissionNeutralCompleteParams_BreakData) == 0x000004, "Wrong size on FortMissionNeutralCompleteParams_BreakData");
static_assert(offsetof(FortMissionNeutralCompleteParams_BreakData, _NeutrallyCompletedMission) == 0x000000, "Member 'FortMissionNeutralCompleteParams_BreakData::_NeutrallyCompletedMission' has a wrong offset!");

// Function FortniteGame.FortMissionNeutralCompleteParams.MakeData
// 0x0008 (0x0008 - 0x0000)
struct FortMissionNeutralCompleteParams_MakeData final
{
public:
	class AFortMission*                           _NeutrallyCompletedMission;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionNeutralCompleteParams*      ThisParam;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionNeutralCompleteParams_MakeData) == 0x000004, "Wrong alignment on FortMissionNeutralCompleteParams_MakeData");
static_assert(sizeof(FortMissionNeutralCompleteParams_MakeData) == 0x000008, "Wrong size on FortMissionNeutralCompleteParams_MakeData");
static_assert(offsetof(FortMissionNeutralCompleteParams_MakeData, _NeutrallyCompletedMission) == 0x000000, "Member 'FortMissionNeutralCompleteParams_MakeData::_NeutrallyCompletedMission' has a wrong offset!");
static_assert(offsetof(FortMissionNeutralCompleteParams_MakeData, ThisParam) == 0x000004, "Member 'FortMissionNeutralCompleteParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortObjectiveSucceededParams.BreakData
// 0x0004 (0x0004 - 0x0000)
struct FortObjectiveSucceededParams_BreakData final
{
public:
	class AFortObjectiveBase*                     _SucceededObjective;                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveSucceededParams_BreakData) == 0x000004, "Wrong alignment on FortObjectiveSucceededParams_BreakData");
static_assert(sizeof(FortObjectiveSucceededParams_BreakData) == 0x000004, "Wrong size on FortObjectiveSucceededParams_BreakData");
static_assert(offsetof(FortObjectiveSucceededParams_BreakData, _SucceededObjective) == 0x000000, "Member 'FortObjectiveSucceededParams_BreakData::_SucceededObjective' has a wrong offset!");

// Function FortniteGame.FortObjectiveSucceededParams.MakeData
// 0x0008 (0x0008 - 0x0000)
struct FortObjectiveSucceededParams_MakeData final
{
public:
	class AFortObjectiveBase*                     _SucceededObjective;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortObjectiveSucceededParams*          ThisParam;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveSucceededParams_MakeData) == 0x000004, "Wrong alignment on FortObjectiveSucceededParams_MakeData");
static_assert(sizeof(FortObjectiveSucceededParams_MakeData) == 0x000008, "Wrong size on FortObjectiveSucceededParams_MakeData");
static_assert(offsetof(FortObjectiveSucceededParams_MakeData, _SucceededObjective) == 0x000000, "Member 'FortObjectiveSucceededParams_MakeData::_SucceededObjective' has a wrong offset!");
static_assert(offsetof(FortObjectiveSucceededParams_MakeData, ThisParam) == 0x000004, "Member 'FortObjectiveSucceededParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortObjectiveFailedParams.BreakData
// 0x0004 (0x0004 - 0x0000)
struct FortObjectiveFailedParams_BreakData final
{
public:
	class AFortObjectiveBase*                     _FailedObjective;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveFailedParams_BreakData) == 0x000004, "Wrong alignment on FortObjectiveFailedParams_BreakData");
static_assert(sizeof(FortObjectiveFailedParams_BreakData) == 0x000004, "Wrong size on FortObjectiveFailedParams_BreakData");
static_assert(offsetof(FortObjectiveFailedParams_BreakData, _FailedObjective) == 0x000000, "Member 'FortObjectiveFailedParams_BreakData::_FailedObjective' has a wrong offset!");

// Function FortniteGame.FortObjectiveFailedParams.MakeData
// 0x0008 (0x0008 - 0x0000)
struct FortObjectiveFailedParams_MakeData final
{
public:
	class AFortObjectiveBase*                     _FailedObjective;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortObjectiveFailedParams*             ThisParam;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveFailedParams_MakeData) == 0x000004, "Wrong alignment on FortObjectiveFailedParams_MakeData");
static_assert(sizeof(FortObjectiveFailedParams_MakeData) == 0x000008, "Wrong size on FortObjectiveFailedParams_MakeData");
static_assert(offsetof(FortObjectiveFailedParams_MakeData, _FailedObjective) == 0x000000, "Member 'FortObjectiveFailedParams_MakeData::_FailedObjective' has a wrong offset!");
static_assert(offsetof(FortObjectiveFailedParams_MakeData, ThisParam) == 0x000004, "Member 'FortObjectiveFailedParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortObjectiveNeutralCompleteParams.BreakData
// 0x0004 (0x0004 - 0x0000)
struct FortObjectiveNeutralCompleteParams_BreakData final
{
public:
	class AFortObjectiveBase*                     _NeutrallyCompletedObjective;                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveNeutralCompleteParams_BreakData) == 0x000004, "Wrong alignment on FortObjectiveNeutralCompleteParams_BreakData");
static_assert(sizeof(FortObjectiveNeutralCompleteParams_BreakData) == 0x000004, "Wrong size on FortObjectiveNeutralCompleteParams_BreakData");
static_assert(offsetof(FortObjectiveNeutralCompleteParams_BreakData, _NeutrallyCompletedObjective) == 0x000000, "Member 'FortObjectiveNeutralCompleteParams_BreakData::_NeutrallyCompletedObjective' has a wrong offset!");

// Function FortniteGame.FortObjectiveNeutralCompleteParams.MakeData
// 0x0008 (0x0008 - 0x0000)
struct FortObjectiveNeutralCompleteParams_MakeData final
{
public:
	class AFortObjectiveBase*                     _NeutrallyCompletedObjective;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortObjectiveNeutralCompleteParams*    ThisParam;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveNeutralCompleteParams_MakeData) == 0x000004, "Wrong alignment on FortObjectiveNeutralCompleteParams_MakeData");
static_assert(sizeof(FortObjectiveNeutralCompleteParams_MakeData) == 0x000008, "Wrong size on FortObjectiveNeutralCompleteParams_MakeData");
static_assert(offsetof(FortObjectiveNeutralCompleteParams_MakeData, _NeutrallyCompletedObjective) == 0x000000, "Member 'FortObjectiveNeutralCompleteParams_MakeData::_NeutrallyCompletedObjective' has a wrong offset!");
static_assert(offsetof(FortObjectiveNeutralCompleteParams_MakeData, ThisParam) == 0x000004, "Member 'FortObjectiveNeutralCompleteParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortToggledCursorModeParams.BreakData
// 0x0008 (0x0008 - 0x0000)
struct FortToggledCursorModeParams_BreakData final
{
public:
	class AFortPlayerController*                  _PlayerThatToggledCursorMode;                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCursorMode;                                      // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortToggledCursorModeParams_BreakData) == 0x000004, "Wrong alignment on FortToggledCursorModeParams_BreakData");
static_assert(sizeof(FortToggledCursorModeParams_BreakData) == 0x000008, "Wrong size on FortToggledCursorModeParams_BreakData");
static_assert(offsetof(FortToggledCursorModeParams_BreakData, _PlayerThatToggledCursorMode) == 0x000000, "Member 'FortToggledCursorModeParams_BreakData::_PlayerThatToggledCursorMode' has a wrong offset!");
static_assert(offsetof(FortToggledCursorModeParams_BreakData, InCursorMode) == 0x000004, "Member 'FortToggledCursorModeParams_BreakData::InCursorMode' has a wrong offset!");

// Function FortniteGame.FortToggledCursorModeParams.MakeData
// 0x000C (0x000C - 0x0000)
struct FortToggledCursorModeParams_MakeData final
{
public:
	class AFortPlayerController*                  _PlayerThatToggledCursorMode;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InCursorMode;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortToggledCursorModeParams*           ThisParam;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortToggledCursorModeParams_MakeData) == 0x000004, "Wrong alignment on FortToggledCursorModeParams_MakeData");
static_assert(sizeof(FortToggledCursorModeParams_MakeData) == 0x00000C, "Wrong size on FortToggledCursorModeParams_MakeData");
static_assert(offsetof(FortToggledCursorModeParams_MakeData, _PlayerThatToggledCursorMode) == 0x000000, "Member 'FortToggledCursorModeParams_MakeData::_PlayerThatToggledCursorMode' has a wrong offset!");
static_assert(offsetof(FortToggledCursorModeParams_MakeData, InCursorMode) == 0x000004, "Member 'FortToggledCursorModeParams_MakeData::InCursorMode' has a wrong offset!");
static_assert(offsetof(FortToggledCursorModeParams_MakeData, ThisParam) == 0x000008, "Member 'FortToggledCursorModeParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortToggledOptionsMenuParams.BreakData
// 0x0008 (0x0008 - 0x0000)
struct FortToggledOptionsMenuParams_BreakData final
{
public:
	class AFortPlayerController*                  _PlayerThatToggledOptionsMenu;                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Opened;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortToggledOptionsMenuParams_BreakData) == 0x000004, "Wrong alignment on FortToggledOptionsMenuParams_BreakData");
static_assert(sizeof(FortToggledOptionsMenuParams_BreakData) == 0x000008, "Wrong size on FortToggledOptionsMenuParams_BreakData");
static_assert(offsetof(FortToggledOptionsMenuParams_BreakData, _PlayerThatToggledOptionsMenu) == 0x000000, "Member 'FortToggledOptionsMenuParams_BreakData::_PlayerThatToggledOptionsMenu' has a wrong offset!");
static_assert(offsetof(FortToggledOptionsMenuParams_BreakData, Opened) == 0x000004, "Member 'FortToggledOptionsMenuParams_BreakData::Opened' has a wrong offset!");

// Function FortniteGame.FortToggledOptionsMenuParams.MakeData
// 0x000C (0x000C - 0x0000)
struct FortToggledOptionsMenuParams_MakeData final
{
public:
	class AFortPlayerController*                  _PlayerThatToggledOptionsMenu;                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Opened;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortToggledOptionsMenuParams*          ThisParam;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortToggledOptionsMenuParams_MakeData) == 0x000004, "Wrong alignment on FortToggledOptionsMenuParams_MakeData");
static_assert(sizeof(FortToggledOptionsMenuParams_MakeData) == 0x00000C, "Wrong size on FortToggledOptionsMenuParams_MakeData");
static_assert(offsetof(FortToggledOptionsMenuParams_MakeData, _PlayerThatToggledOptionsMenu) == 0x000000, "Member 'FortToggledOptionsMenuParams_MakeData::_PlayerThatToggledOptionsMenu' has a wrong offset!");
static_assert(offsetof(FortToggledOptionsMenuParams_MakeData, Opened) == 0x000004, "Member 'FortToggledOptionsMenuParams_MakeData::Opened' has a wrong offset!");
static_assert(offsetof(FortToggledOptionsMenuParams_MakeData, ThisParam) == 0x000008, "Member 'FortToggledOptionsMenuParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortToggledEditModeParams.BreakData
// 0x0008 (0x0008 - 0x0000)
struct FortToggledEditModeParams_BreakData final
{
public:
	class AFortPlayerController*                  _PlayerThatToggledEditMode;                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEditMode;                                        // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortToggledEditModeParams_BreakData) == 0x000004, "Wrong alignment on FortToggledEditModeParams_BreakData");
static_assert(sizeof(FortToggledEditModeParams_BreakData) == 0x000008, "Wrong size on FortToggledEditModeParams_BreakData");
static_assert(offsetof(FortToggledEditModeParams_BreakData, _PlayerThatToggledEditMode) == 0x000000, "Member 'FortToggledEditModeParams_BreakData::_PlayerThatToggledEditMode' has a wrong offset!");
static_assert(offsetof(FortToggledEditModeParams_BreakData, InEditMode) == 0x000004, "Member 'FortToggledEditModeParams_BreakData::InEditMode' has a wrong offset!");

// Function FortniteGame.FortToggledEditModeParams.MakeData
// 0x000C (0x000C - 0x0000)
struct FortToggledEditModeParams_MakeData final
{
public:
	class AFortPlayerController*                  _PlayerThatToggledEditMode;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEditMode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortToggledEditModeParams*             ThisParam;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortToggledEditModeParams_MakeData) == 0x000004, "Wrong alignment on FortToggledEditModeParams_MakeData");
static_assert(sizeof(FortToggledEditModeParams_MakeData) == 0x00000C, "Wrong size on FortToggledEditModeParams_MakeData");
static_assert(offsetof(FortToggledEditModeParams_MakeData, _PlayerThatToggledEditMode) == 0x000000, "Member 'FortToggledEditModeParams_MakeData::_PlayerThatToggledEditMode' has a wrong offset!");
static_assert(offsetof(FortToggledEditModeParams_MakeData, InEditMode) == 0x000004, "Member 'FortToggledEditModeParams_MakeData::InEditMode' has a wrong offset!");
static_assert(offsetof(FortToggledEditModeParams_MakeData, ThisParam) == 0x000008, "Member 'FortToggledEditModeParams_MakeData::ThisParam' has a wrong offset!");

// Function FortniteGame.FortInitializationInterface.IsGameImportant
// 0x0001 (0x0001 - 0x0000)
struct FortInitializationInterface_IsGameImportant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInitializationInterface_IsGameImportant) == 0x000001, "Wrong alignment on FortInitializationInterface_IsGameImportant");
static_assert(sizeof(FortInitializationInterface_IsGameImportant) == 0x000001, "Wrong size on FortInitializationInterface_IsGameImportant");
static_assert(offsetof(FortInitializationInterface_IsGameImportant, ReturnValue) == 0x000000, "Member 'FortInitializationInterface_IsGameImportant::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortInitializationInterface.NeedsWorldReady
// 0x0001 (0x0001 - 0x0000)
struct FortInitializationInterface_NeedsWorldReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInitializationInterface_NeedsWorldReady) == 0x000001, "Wrong alignment on FortInitializationInterface_NeedsWorldReady");
static_assert(sizeof(FortInitializationInterface_NeedsWorldReady) == 0x000001, "Wrong size on FortInitializationInterface_NeedsWorldReady");
static_assert(offsetof(FortInitializationInterface_NeedsWorldReady, ReturnValue) == 0x000000, "Member 'FortInitializationInterface_NeedsWorldReady::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.AttemptMissionSave
// 0x000C (0x000C - 0x0000)
struct FortObjectiveBase_AttemptMissionSave final
{
public:
	class FString                                 OptionalSaveName;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_AttemptMissionSave) == 0x000004, "Wrong alignment on FortObjectiveBase_AttemptMissionSave");
static_assert(sizeof(FortObjectiveBase_AttemptMissionSave) == 0x00000C, "Wrong size on FortObjectiveBase_AttemptMissionSave");
static_assert(offsetof(FortObjectiveBase_AttemptMissionSave, OptionalSaveName) == 0x000000, "Member 'FortObjectiveBase_AttemptMissionSave::OptionalSaveName' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintHandleMissionEventNoReply
// 0x006C (0x006C - 0x0000)
struct FortObjectiveBase_BlueprintHandleMissionEventNoReply final
{
public:
	struct FFortMissionEvent                      MissionEvent;                                      // 0x0000(0x006C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintHandleMissionEventNoReply) == 0x000004, "Wrong alignment on FortObjectiveBase_BlueprintHandleMissionEventNoReply");
static_assert(sizeof(FortObjectiveBase_BlueprintHandleMissionEventNoReply) == 0x00006C, "Wrong size on FortObjectiveBase_BlueprintHandleMissionEventNoReply");
static_assert(offsetof(FortObjectiveBase_BlueprintHandleMissionEventNoReply, MissionEvent) == 0x000000, "Member 'FortObjectiveBase_BlueprintHandleMissionEventNoReply::MissionEvent' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintOnActivated
// 0x0008 (0x0008 - 0x0000)
struct FortObjectiveBase_BlueprintOnActivated final
{
public:
	class AActor*                                 InObjectiveFocus;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              InObjectiveInstigator;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintOnActivated) == 0x000004, "Wrong alignment on FortObjectiveBase_BlueprintOnActivated");
static_assert(sizeof(FortObjectiveBase_BlueprintOnActivated) == 0x000008, "Wrong size on FortObjectiveBase_BlueprintOnActivated");
static_assert(offsetof(FortObjectiveBase_BlueprintOnActivated, InObjectiveFocus) == 0x000000, "Member 'FortObjectiveBase_BlueprintOnActivated::InObjectiveFocus' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_BlueprintOnActivated, InObjectiveInstigator) == 0x000004, "Member 'FortObjectiveBase_BlueprintOnActivated::InObjectiveInstigator' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintOnObjectiveEnd
// 0x0001 (0x0001 - 0x0000)
struct FortObjectiveBase_BlueprintOnObjectiveEnd final
{
public:
	EFortObjectiveStatus                          Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintOnObjectiveEnd) == 0x000001, "Wrong alignment on FortObjectiveBase_BlueprintOnObjectiveEnd");
static_assert(sizeof(FortObjectiveBase_BlueprintOnObjectiveEnd) == 0x000001, "Wrong size on FortObjectiveBase_BlueprintOnObjectiveEnd");
static_assert(offsetof(FortObjectiveBase_BlueprintOnObjectiveEnd, Status) == 0x000000, "Member 'FortObjectiveBase_BlueprintOnObjectiveEnd::Status' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintOnStartPlaying
// 0x0008 (0x0008 - 0x0000)
struct FortObjectiveBase_BlueprintOnStartPlaying final
{
public:
	class AActor*                                 InObjectiveFocus;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              InObjectiveInstigator;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintOnStartPlaying) == 0x000004, "Wrong alignment on FortObjectiveBase_BlueprintOnStartPlaying");
static_assert(sizeof(FortObjectiveBase_BlueprintOnStartPlaying) == 0x000008, "Wrong size on FortObjectiveBase_BlueprintOnStartPlaying");
static_assert(offsetof(FortObjectiveBase_BlueprintOnStartPlaying, InObjectiveFocus) == 0x000000, "Member 'FortObjectiveBase_BlueprintOnStartPlaying::InObjectiveFocus' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_BlueprintOnStartPlaying, InObjectiveInstigator) == 0x000004, "Member 'FortObjectiveBase_BlueprintOnStartPlaying::InObjectiveInstigator' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.EnableTick
// 0x0001 (0x0001 - 0x0000)
struct FortObjectiveBase_EnableTick final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_EnableTick) == 0x000001, "Wrong alignment on FortObjectiveBase_EnableTick");
static_assert(sizeof(FortObjectiveBase_EnableTick) == 0x000001, "Wrong size on FortObjectiveBase_EnableTick");
static_assert(offsetof(FortObjectiveBase_EnableTick, bEnabled) == 0x000000, "Member 'FortObjectiveBase_EnableTick::bEnabled' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.FocusParentMission
// 0x0001 (0x0001 - 0x0000)
struct FortObjectiveBase_FocusParentMission final
{
public:
	bool                                          bTemporaryFocus;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_FocusParentMission) == 0x000001, "Wrong alignment on FortObjectiveBase_FocusParentMission");
static_assert(sizeof(FortObjectiveBase_FocusParentMission) == 0x000001, "Wrong size on FortObjectiveBase_FocusParentMission");
static_assert(offsetof(FortObjectiveBase_FocusParentMission, bTemporaryFocus) == 0x000000, "Member 'FortObjectiveBase_FocusParentMission::bTemporaryFocus' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.GrantRewardsByTag
// 0x000C (0x000C - 0x0000)
struct FortObjectiveBase_GrantRewardsByTag final
{
public:
	struct FGameplayTag                           RewardTag;                                         // 0x0000(0x0008)(ConstParm, Parm, NativeAccessSpecifierPublic)
	EFortRewardType                               RewardType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortObjectiveBase_GrantRewardsByTag) == 0x000004, "Wrong alignment on FortObjectiveBase_GrantRewardsByTag");
static_assert(sizeof(FortObjectiveBase_GrantRewardsByTag) == 0x00000C, "Wrong size on FortObjectiveBase_GrantRewardsByTag");
static_assert(offsetof(FortObjectiveBase_GrantRewardsByTag, RewardTag) == 0x000000, "Member 'FortObjectiveBase_GrantRewardsByTag::RewardTag' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_GrantRewardsByTag, RewardType) == 0x000008, "Member 'FortObjectiveBase_GrantRewardsByTag::RewardType' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.PlayerStatChanged
// 0x0018 (0x0018 - 0x0000)
struct FortObjectiveBase_PlayerStatChanged final
{
public:
	class AFortPlayerController*                  OwningPlayer;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChangedStat;                                       // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValueZone;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValueWorld;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValueAccount;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_PlayerStatChanged) == 0x000004, "Wrong alignment on FortObjectiveBase_PlayerStatChanged");
static_assert(sizeof(FortObjectiveBase_PlayerStatChanged) == 0x000018, "Wrong size on FortObjectiveBase_PlayerStatChanged");
static_assert(offsetof(FortObjectiveBase_PlayerStatChanged, OwningPlayer) == 0x000000, "Member 'FortObjectiveBase_PlayerStatChanged::OwningPlayer' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_PlayerStatChanged, ChangedStat) == 0x000004, "Member 'FortObjectiveBase_PlayerStatChanged::ChangedStat' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_PlayerStatChanged, NewValueZone) == 0x00000C, "Member 'FortObjectiveBase_PlayerStatChanged::NewValueZone' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_PlayerStatChanged, NewValueWorld) == 0x000010, "Member 'FortObjectiveBase_PlayerStatChanged::NewValueWorld' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_PlayerStatChanged, NewValueAccount) == 0x000014, "Member 'FortObjectiveBase_PlayerStatChanged::NewValueAccount' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.SetObjectiveTimer
// 0x0014 (0x0014 - 0x0000)
struct FortObjectiveBase_SetObjectiveTimer final
{
public:
	class FString                                 FunctionName;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimerLength;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartPaused;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortObjectiveBase_SetObjectiveTimer) == 0x000004, "Wrong alignment on FortObjectiveBase_SetObjectiveTimer");
static_assert(sizeof(FortObjectiveBase_SetObjectiveTimer) == 0x000014, "Wrong size on FortObjectiveBase_SetObjectiveTimer");
static_assert(offsetof(FortObjectiveBase_SetObjectiveTimer, FunctionName) == 0x000000, "Member 'FortObjectiveBase_SetObjectiveTimer::FunctionName' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_SetObjectiveTimer, TimerLength) == 0x00000C, "Member 'FortObjectiveBase_SetObjectiveTimer::TimerLength' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_SetObjectiveTimer, bStartPaused) == 0x000010, "Member 'FortObjectiveBase_SetObjectiveTimer::bStartPaused' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.SetUiVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortObjectiveBase_SetUiVisibility final
{
public:
	bool                                          bInIsObjectiveVisible;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_SetUiVisibility) == 0x000001, "Wrong alignment on FortObjectiveBase_SetUiVisibility");
static_assert(sizeof(FortObjectiveBase_SetUiVisibility) == 0x000001, "Wrong size on FortObjectiveBase_SetUiVisibility");
static_assert(offsetof(FortObjectiveBase_SetUiVisibility, bInIsObjectiveVisible) == 0x000000, "Member 'FortObjectiveBase_SetUiVisibility::bInIsObjectiveVisible' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.StartMissionNotification
// 0x0040 (0x0040 - 0x0000)
struct FortObjectiveBase_StartMissionNotification final
{
public:
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0000(0x0014)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortClientNotification>    Notification;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  SpecificPlayer;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OverrideDisplayText;                               // 0x001C(0x000C)(Parm, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        OptionalPlayerPawn1;                               // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        OptionalPlayerPawn2;                               // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OptionalActionName;                                // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USoundBase*                       OptionalSound;                                     // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTreatAsUnique;                                    // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCancelActiveNotification;                         // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWaitForClients;                                   // 0x003E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortObjectiveBase_StartMissionNotification) == 0x000004, "Wrong alignment on FortObjectiveBase_StartMissionNotification");
static_assert(sizeof(FortObjectiveBase_StartMissionNotification) == 0x000040, "Wrong size on FortObjectiveBase_StartMissionNotification");
static_assert(offsetof(FortObjectiveBase_StartMissionNotification, LatentInfo) == 0x000000, "Member 'FortObjectiveBase_StartMissionNotification::LatentInfo' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StartMissionNotification, Notification) == 0x000014, "Member 'FortObjectiveBase_StartMissionNotification::Notification' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StartMissionNotification, SpecificPlayer) == 0x000018, "Member 'FortObjectiveBase_StartMissionNotification::SpecificPlayer' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StartMissionNotification, OverrideDisplayText) == 0x00001C, "Member 'FortObjectiveBase_StartMissionNotification::OverrideDisplayText' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StartMissionNotification, OptionalPlayerPawn1) == 0x000028, "Member 'FortObjectiveBase_StartMissionNotification::OptionalPlayerPawn1' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StartMissionNotification, OptionalPlayerPawn2) == 0x00002C, "Member 'FortObjectiveBase_StartMissionNotification::OptionalPlayerPawn2' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StartMissionNotification, OptionalActionName) == 0x000030, "Member 'FortObjectiveBase_StartMissionNotification::OptionalActionName' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StartMissionNotification, OptionalSound) == 0x000038, "Member 'FortObjectiveBase_StartMissionNotification::OptionalSound' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StartMissionNotification, bTreatAsUnique) == 0x00003C, "Member 'FortObjectiveBase_StartMissionNotification::bTreatAsUnique' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StartMissionNotification, bCancelActiveNotification) == 0x00003D, "Member 'FortObjectiveBase_StartMissionNotification::bCancelActiveNotification' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StartMissionNotification, bWaitForClients) == 0x00003E, "Member 'FortObjectiveBase_StartMissionNotification::bWaitForClients' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.StartPlayingObjective
// 0x0070 (0x0070 - 0x0000)
struct FortObjectiveBase_StartPlayingObjective final
{
public:
	struct FFortMissionEvent                      MissionEvent;                                      // 0x0000(0x006C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x006C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortObjectiveBase_StartPlayingObjective) == 0x000004, "Wrong alignment on FortObjectiveBase_StartPlayingObjective");
static_assert(sizeof(FortObjectiveBase_StartPlayingObjective) == 0x000070, "Wrong size on FortObjectiveBase_StartPlayingObjective");
static_assert(offsetof(FortObjectiveBase_StartPlayingObjective, MissionEvent) == 0x000000, "Member 'FortObjectiveBase_StartPlayingObjective::MissionEvent' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StartPlayingObjective, ReturnValue) == 0x00006C, "Member 'FortObjectiveBase_StartPlayingObjective::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.StopObjective
// 0x002C (0x002C - 0x0000)
struct FortObjectiveBase_StopObjective final
{
public:
	EFortObjectiveStatus                          Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CompletionTags;                                    // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UFortBadgeItemDefinition*               ExtraBadgeToGrant;                                 // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_StopObjective) == 0x000004, "Wrong alignment on FortObjectiveBase_StopObjective");
static_assert(sizeof(FortObjectiveBase_StopObjective) == 0x00002C, "Wrong size on FortObjectiveBase_StopObjective");
static_assert(offsetof(FortObjectiveBase_StopObjective, Status) == 0x000000, "Member 'FortObjectiveBase_StopObjective::Status' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StopObjective, Description) == 0x000004, "Member 'FortObjectiveBase_StopObjective::Description' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StopObjective, CompletionTags) == 0x000010, "Member 'FortObjectiveBase_StopObjective::CompletionTags' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_StopObjective, ExtraBadgeToGrant) == 0x000028, "Member 'FortObjectiveBase_StopObjective::ExtraBadgeToGrant' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintGetNumProgressBars
// 0x0004 (0x0004 - 0x0000)
struct FortObjectiveBase_BlueprintGetNumProgressBars final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintGetNumProgressBars) == 0x000004, "Wrong alignment on FortObjectiveBase_BlueprintGetNumProgressBars");
static_assert(sizeof(FortObjectiveBase_BlueprintGetNumProgressBars) == 0x000004, "Wrong size on FortObjectiveBase_BlueprintGetNumProgressBars");
static_assert(offsetof(FortObjectiveBase_BlueprintGetNumProgressBars, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_BlueprintGetNumProgressBars::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintGetObjectiveDisplayText
// 0x000C (0x000C - 0x0000)
struct FortObjectiveBase_BlueprintGetObjectiveDisplayText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintGetObjectiveDisplayText) == 0x000004, "Wrong alignment on FortObjectiveBase_BlueprintGetObjectiveDisplayText");
static_assert(sizeof(FortObjectiveBase_BlueprintGetObjectiveDisplayText) == 0x00000C, "Wrong size on FortObjectiveBase_BlueprintGetObjectiveDisplayText");
static_assert(offsetof(FortObjectiveBase_BlueprintGetObjectiveDisplayText, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_BlueprintGetObjectiveDisplayText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintGetProgressBarColor
// 0x0014 (0x0014 - 0x0000)
struct FortObjectiveBase_BlueprintGetProgressBarColor final
{
public:
	int32                                         ProgressBarIdx;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintGetProgressBarColor) == 0x000004, "Wrong alignment on FortObjectiveBase_BlueprintGetProgressBarColor");
static_assert(sizeof(FortObjectiveBase_BlueprintGetProgressBarColor) == 0x000014, "Wrong size on FortObjectiveBase_BlueprintGetProgressBarColor");
static_assert(offsetof(FortObjectiveBase_BlueprintGetProgressBarColor, ProgressBarIdx) == 0x000000, "Member 'FortObjectiveBase_BlueprintGetProgressBarColor::ProgressBarIdx' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_BlueprintGetProgressBarColor, ReturnValue) == 0x000004, "Member 'FortObjectiveBase_BlueprintGetProgressBarColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintGetProgressBarPercentage
// 0x0008 (0x0008 - 0x0000)
struct FortObjectiveBase_BlueprintGetProgressBarPercentage final
{
public:
	int32                                         ProgressBarIdx;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintGetProgressBarPercentage) == 0x000004, "Wrong alignment on FortObjectiveBase_BlueprintGetProgressBarPercentage");
static_assert(sizeof(FortObjectiveBase_BlueprintGetProgressBarPercentage) == 0x000008, "Wrong size on FortObjectiveBase_BlueprintGetProgressBarPercentage");
static_assert(offsetof(FortObjectiveBase_BlueprintGetProgressBarPercentage, ProgressBarIdx) == 0x000000, "Member 'FortObjectiveBase_BlueprintGetProgressBarPercentage::ProgressBarIdx' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_BlueprintGetProgressBarPercentage, ReturnValue) == 0x000004, "Member 'FortObjectiveBase_BlueprintGetProgressBarPercentage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintGetProgressBarText
// 0x0010 (0x0010 - 0x0000)
struct FortObjectiveBase_BlueprintGetProgressBarText final
{
public:
	int32                                         ProgressBarIdx;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintGetProgressBarText) == 0x000004, "Wrong alignment on FortObjectiveBase_BlueprintGetProgressBarText");
static_assert(sizeof(FortObjectiveBase_BlueprintGetProgressBarText) == 0x000010, "Wrong size on FortObjectiveBase_BlueprintGetProgressBarText");
static_assert(offsetof(FortObjectiveBase_BlueprintGetProgressBarText, ProgressBarIdx) == 0x000000, "Member 'FortObjectiveBase_BlueprintGetProgressBarText::ProgressBarIdx' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_BlueprintGetProgressBarText, ReturnValue) == 0x000004, "Member 'FortObjectiveBase_BlueprintGetProgressBarText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.BlueprintGetTimeForUI
// 0x0004 (0x0004 - 0x0000)
struct FortObjectiveBase_BlueprintGetTimeForUI final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_BlueprintGetTimeForUI) == 0x000004, "Wrong alignment on FortObjectiveBase_BlueprintGetTimeForUI");
static_assert(sizeof(FortObjectiveBase_BlueprintGetTimeForUI) == 0x000004, "Wrong size on FortObjectiveBase_BlueprintGetTimeForUI");
static_assert(offsetof(FortObjectiveBase_BlueprintGetTimeForUI, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_BlueprintGetTimeForUI::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.GetMissionGuid
// 0x0010 (0x0010 - 0x0000)
struct FortObjectiveBase_GetMissionGuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_GetMissionGuid) == 0x000004, "Wrong alignment on FortObjectiveBase_GetMissionGuid");
static_assert(sizeof(FortObjectiveBase_GetMissionGuid) == 0x000010, "Wrong size on FortObjectiveBase_GetMissionGuid");
static_assert(offsetof(FortObjectiveBase_GetMissionGuid, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_GetMissionGuid::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.GetObjectiveTimerNormalizedTime
// 0x0004 (0x0004 - 0x0000)
struct FortObjectiveBase_GetObjectiveTimerNormalizedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_GetObjectiveTimerNormalizedTime) == 0x000004, "Wrong alignment on FortObjectiveBase_GetObjectiveTimerNormalizedTime");
static_assert(sizeof(FortObjectiveBase_GetObjectiveTimerNormalizedTime) == 0x000004, "Wrong size on FortObjectiveBase_GetObjectiveTimerNormalizedTime");
static_assert(offsetof(FortObjectiveBase_GetObjectiveTimerNormalizedTime, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_GetObjectiveTimerNormalizedTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.GetObjectiveTimerTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct FortObjectiveBase_GetObjectiveTimerTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_GetObjectiveTimerTimeRemaining) == 0x000004, "Wrong alignment on FortObjectiveBase_GetObjectiveTimerTimeRemaining");
static_assert(sizeof(FortObjectiveBase_GetObjectiveTimerTimeRemaining) == 0x000004, "Wrong size on FortObjectiveBase_GetObjectiveTimerTimeRemaining");
static_assert(offsetof(FortObjectiveBase_GetObjectiveTimerTimeRemaining, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_GetObjectiveTimerTimeRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.IsActorRelevantToTeam
// 0x0008 (0x0008 - 0x0000)
struct FortObjectiveBase_IsActorRelevantToTeam final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortObjectiveBase_IsActorRelevantToTeam) == 0x000004, "Wrong alignment on FortObjectiveBase_IsActorRelevantToTeam");
static_assert(sizeof(FortObjectiveBase_IsActorRelevantToTeam) == 0x000008, "Wrong size on FortObjectiveBase_IsActorRelevantToTeam");
static_assert(offsetof(FortObjectiveBase_IsActorRelevantToTeam, Actor) == 0x000000, "Member 'FortObjectiveBase_IsActorRelevantToTeam::Actor' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_IsActorRelevantToTeam, ReturnValue) == 0x000004, "Member 'FortObjectiveBase_IsActorRelevantToTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.IsObjectiveTimerPaused
// 0x0001 (0x0001 - 0x0000)
struct FortObjectiveBase_IsObjectiveTimerPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_IsObjectiveTimerPaused) == 0x000001, "Wrong alignment on FortObjectiveBase_IsObjectiveTimerPaused");
static_assert(sizeof(FortObjectiveBase_IsObjectiveTimerPaused) == 0x000001, "Wrong size on FortObjectiveBase_IsObjectiveTimerPaused");
static_assert(offsetof(FortObjectiveBase_IsObjectiveTimerPaused, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_IsObjectiveTimerPaused::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.IsObjectiveTimerSet
// 0x0001 (0x0001 - 0x0000)
struct FortObjectiveBase_IsObjectiveTimerSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_IsObjectiveTimerSet) == 0x000001, "Wrong alignment on FortObjectiveBase_IsObjectiveTimerSet");
static_assert(sizeof(FortObjectiveBase_IsObjectiveTimerSet) == 0x000001, "Wrong size on FortObjectiveBase_IsObjectiveTimerSet");
static_assert(offsetof(FortObjectiveBase_IsObjectiveTimerSet, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_IsObjectiveTimerSet::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.IsRelevantToASpecificTeam
// 0x0001 (0x0001 - 0x0000)
struct FortObjectiveBase_IsRelevantToASpecificTeam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_IsRelevantToASpecificTeam) == 0x000001, "Wrong alignment on FortObjectiveBase_IsRelevantToASpecificTeam");
static_assert(sizeof(FortObjectiveBase_IsRelevantToASpecificTeam) == 0x000001, "Wrong size on FortObjectiveBase_IsRelevantToASpecificTeam");
static_assert(offsetof(FortObjectiveBase_IsRelevantToASpecificTeam, ReturnValue) == 0x000000, "Member 'FortObjectiveBase_IsRelevantToASpecificTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortObjectiveBase.IsRelevantToTeam
// 0x0002 (0x0002 - 0x0000)
struct FortObjectiveBase_IsRelevantToTeam final
{
public:
	EFortTeam                                     Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortObjectiveBase_IsRelevantToTeam) == 0x000001, "Wrong alignment on FortObjectiveBase_IsRelevantToTeam");
static_assert(sizeof(FortObjectiveBase_IsRelevantToTeam) == 0x000002, "Wrong size on FortObjectiveBase_IsRelevantToTeam");
static_assert(offsetof(FortObjectiveBase_IsRelevantToTeam, Team) == 0x000000, "Member 'FortObjectiveBase_IsRelevantToTeam::Team' has a wrong offset!");
static_assert(offsetof(FortObjectiveBase_IsRelevantToTeam, ReturnValue) == 0x000001, "Member 'FortObjectiveBase_IsRelevantToTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartModifier.OnDayPhaseChanged
// 0x0003 (0x0003 - 0x0000)
struct CustomCharacterPartModifier_OnDayPhaseChanged final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartModifier_OnDayPhaseChanged) == 0x000001, "Wrong alignment on CustomCharacterPartModifier_OnDayPhaseChanged");
static_assert(sizeof(CustomCharacterPartModifier_OnDayPhaseChanged) == 0x000003, "Wrong size on CustomCharacterPartModifier_OnDayPhaseChanged");
static_assert(offsetof(CustomCharacterPartModifier_OnDayPhaseChanged, CurrentDayPhase) == 0x000000, "Member 'CustomCharacterPartModifier_OnDayPhaseChanged::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(CustomCharacterPartModifier_OnDayPhaseChanged, PreviousDayPhase) == 0x000001, "Member 'CustomCharacterPartModifier_OnDayPhaseChanged::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(CustomCharacterPartModifier_OnDayPhaseChanged, bAtCreation) == 0x000002, "Member 'CustomCharacterPartModifier_OnDayPhaseChanged::bAtCreation' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartModifier.GetAssociatedPlayerPawn
// 0x0004 (0x0004 - 0x0000)
struct CustomCharacterPartModifier_GetAssociatedPlayerPawn final
{
public:
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartModifier_GetAssociatedPlayerPawn) == 0x000004, "Wrong alignment on CustomCharacterPartModifier_GetAssociatedPlayerPawn");
static_assert(sizeof(CustomCharacterPartModifier_GetAssociatedPlayerPawn) == 0x000004, "Wrong size on CustomCharacterPartModifier_GetAssociatedPlayerPawn");
static_assert(offsetof(CustomCharacterPartModifier_GetAssociatedPlayerPawn, ReturnValue) == 0x000000, "Member 'CustomCharacterPartModifier_GetAssociatedPlayerPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartModifier.GetCharacterPartType
// 0x0001 (0x0001 - 0x0000)
struct CustomCharacterPartModifier_GetCharacterPartType final
{
public:
	EFortCustomPartType                           ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartModifier_GetCharacterPartType) == 0x000001, "Wrong alignment on CustomCharacterPartModifier_GetCharacterPartType");
static_assert(sizeof(CustomCharacterPartModifier_GetCharacterPartType) == 0x000001, "Wrong size on CustomCharacterPartModifier_GetCharacterPartType");
static_assert(offsetof(CustomCharacterPartModifier_GetCharacterPartType, ReturnValue) == 0x000000, "Member 'CustomCharacterPartModifier_GetCharacterPartType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemDefinition.CanBeDisassembled
// 0x0001 (0x0001 - 0x0000)
struct FortWorldItemDefinition_CanBeDisassembled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWorldItemDefinition_CanBeDisassembled) == 0x000001, "Wrong alignment on FortWorldItemDefinition_CanBeDisassembled");
static_assert(sizeof(FortWorldItemDefinition_CanBeDisassembled) == 0x000001, "Wrong size on FortWorldItemDefinition_CanBeDisassembled");
static_assert(offsetof(FortWorldItemDefinition_CanBeDisassembled, ReturnValue) == 0x000000, "Member 'FortWorldItemDefinition_CanBeDisassembled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemDefinition.GetDPSAtLevel
// 0x0008 (0x0008 - 0x0000)
struct FortWorldItemDefinition_GetDPSAtLevel final
{
public:
	int32                                         ItemLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWorldItemDefinition_GetDPSAtLevel) == 0x000004, "Wrong alignment on FortWorldItemDefinition_GetDPSAtLevel");
static_assert(sizeof(FortWorldItemDefinition_GetDPSAtLevel) == 0x000008, "Wrong size on FortWorldItemDefinition_GetDPSAtLevel");
static_assert(offsetof(FortWorldItemDefinition_GetDPSAtLevel, ItemLevel) == 0x000000, "Member 'FortWorldItemDefinition_GetDPSAtLevel::ItemLevel' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinition_GetDPSAtLevel, ReturnValue) == 0x000004, "Member 'FortWorldItemDefinition_GetDPSAtLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemDefinition.GetMaxDurability
// 0x0008 (0x0008 - 0x0000)
struct FortWorldItemDefinition_GetMaxDurability final
{
public:
	int32                                         ItemLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWorldItemDefinition_GetMaxDurability) == 0x000004, "Wrong alignment on FortWorldItemDefinition_GetMaxDurability");
static_assert(sizeof(FortWorldItemDefinition_GetMaxDurability) == 0x000008, "Wrong size on FortWorldItemDefinition_GetMaxDurability");
static_assert(offsetof(FortWorldItemDefinition_GetMaxDurability, ItemLevel) == 0x000000, "Member 'FortWorldItemDefinition_GetMaxDurability::ItemLevel' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinition_GetMaxDurability, ReturnValue) == 0x000004, "Member 'FortWorldItemDefinition_GetMaxDurability::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.AddControlPoint
// 0x0010 (0x0010 - 0x0000)
struct FortSpline_AddControlPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_AddControlPoint) == 0x000004, "Wrong alignment on FortSpline_AddControlPoint");
static_assert(sizeof(FortSpline_AddControlPoint) == 0x000010, "Wrong size on FortSpline_AddControlPoint");
static_assert(offsetof(FortSpline_AddControlPoint, Point) == 0x000000, "Member 'FortSpline_AddControlPoint::Point' has a wrong offset!");
static_assert(offsetof(FortSpline_AddControlPoint, INDEX) == 0x00000C, "Member 'FortSpline_AddControlPoint::INDEX' has a wrong offset!");

// Function FortniteGame.FortSpline.DrawDebugSpline
// 0x0018 (0x0018 - 0x0000)
struct FortSpline_DrawDebugSpline final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistent;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bJustDrawSpline;                                   // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BasisLength;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_DrawDebugSpline) == 0x000004, "Wrong alignment on FortSpline_DrawDebugSpline");
static_assert(sizeof(FortSpline_DrawDebugSpline) == 0x000018, "Wrong size on FortSpline_DrawDebugSpline");
static_assert(offsetof(FortSpline_DrawDebugSpline, WorldContextObject) == 0x000000, "Member 'FortSpline_DrawDebugSpline::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortSpline_DrawDebugSpline, Steps) == 0x000004, "Member 'FortSpline_DrawDebugSpline::Steps' has a wrong offset!");
static_assert(offsetof(FortSpline_DrawDebugSpline, LifeTime) == 0x000008, "Member 'FortSpline_DrawDebugSpline::LifeTime' has a wrong offset!");
static_assert(offsetof(FortSpline_DrawDebugSpline, Thickness) == 0x00000C, "Member 'FortSpline_DrawDebugSpline::Thickness' has a wrong offset!");
static_assert(offsetof(FortSpline_DrawDebugSpline, bPersistent) == 0x000010, "Member 'FortSpline_DrawDebugSpline::bPersistent' has a wrong offset!");
static_assert(offsetof(FortSpline_DrawDebugSpline, bJustDrawSpline) == 0x000011, "Member 'FortSpline_DrawDebugSpline::bJustDrawSpline' has a wrong offset!");
static_assert(offsetof(FortSpline_DrawDebugSpline, BasisLength) == 0x000014, "Member 'FortSpline_DrawDebugSpline::BasisLength' has a wrong offset!");

// Function FortniteGame.FortSpline.EnableConstantVelocity
// 0x0001 (0x0001 - 0x0000)
struct FortSpline_EnableConstantVelocity final
{
public:
	bool                                          ConstVelEnabled;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_EnableConstantVelocity) == 0x000001, "Wrong alignment on FortSpline_EnableConstantVelocity");
static_assert(sizeof(FortSpline_EnableConstantVelocity) == 0x000001, "Wrong size on FortSpline_EnableConstantVelocity");
static_assert(offsetof(FortSpline_EnableConstantVelocity, ConstVelEnabled) == 0x000000, "Member 'FortSpline_EnableConstantVelocity::ConstVelEnabled' has a wrong offset!");

// Function FortniteGame.FortSpline.SetDuration
// 0x0004 (0x0004 - 0x0000)
struct FortSpline_SetDuration final
{
public:
	float                                         InDuration;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_SetDuration) == 0x000004, "Wrong alignment on FortSpline_SetDuration");
static_assert(sizeof(FortSpline_SetDuration) == 0x000004, "Wrong size on FortSpline_SetDuration");
static_assert(offsetof(FortSpline_SetDuration, InDuration) == 0x000000, "Member 'FortSpline_SetDuration::InDuration' has a wrong offset!");

// Function FortniteGame.FortSpline.SetupSpline
// 0x0010 (0x0010 - 0x0000)
struct FortSpline_SetupSpline final
{
public:
	TArray<struct FVector>                        ControlPoints;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_SetupSpline) == 0x000004, "Wrong alignment on FortSpline_SetupSpline");
static_assert(sizeof(FortSpline_SetupSpline) == 0x000010, "Wrong size on FortSpline_SetupSpline");
static_assert(offsetof(FortSpline_SetupSpline, ControlPoints) == 0x000000, "Member 'FortSpline_SetupSpline::ControlPoints' has a wrong offset!");
static_assert(offsetof(FortSpline_SetupSpline, InDuration) == 0x00000C, "Member 'FortSpline_SetupSpline::InDuration' has a wrong offset!");

// Function FortniteGame.FortSpline.GetBinormalFromTime
// 0x0010 (0x0010 - 0x0000)
struct FortSpline_GetBinormalFromTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetBinormalFromTime) == 0x000004, "Wrong alignment on FortSpline_GetBinormalFromTime");
static_assert(sizeof(FortSpline_GetBinormalFromTime) == 0x000010, "Wrong size on FortSpline_GetBinormalFromTime");
static_assert(offsetof(FortSpline_GetBinormalFromTime, Time) == 0x000000, "Member 'FortSpline_GetBinormalFromTime::Time' has a wrong offset!");
static_assert(offsetof(FortSpline_GetBinormalFromTime, ReturnValue) == 0x000004, "Member 'FortSpline_GetBinormalFromTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetDuration
// 0x0004 (0x0004 - 0x0000)
struct FortSpline_GetDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetDuration) == 0x000004, "Wrong alignment on FortSpline_GetDuration");
static_assert(sizeof(FortSpline_GetDuration) == 0x000004, "Wrong size on FortSpline_GetDuration");
static_assert(offsetof(FortSpline_GetDuration, ReturnValue) == 0x000000, "Member 'FortSpline_GetDuration::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetEndPoint
// 0x000C (0x000C - 0x0000)
struct FortSpline_GetEndPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetEndPoint) == 0x000004, "Wrong alignment on FortSpline_GetEndPoint");
static_assert(sizeof(FortSpline_GetEndPoint) == 0x00000C, "Wrong size on FortSpline_GetEndPoint");
static_assert(offsetof(FortSpline_GetEndPoint, ReturnValue) == 0x000000, "Member 'FortSpline_GetEndPoint::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetNormalFromTime
// 0x0010 (0x0010 - 0x0000)
struct FortSpline_GetNormalFromTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetNormalFromTime) == 0x000004, "Wrong alignment on FortSpline_GetNormalFromTime");
static_assert(sizeof(FortSpline_GetNormalFromTime) == 0x000010, "Wrong size on FortSpline_GetNormalFromTime");
static_assert(offsetof(FortSpline_GetNormalFromTime, Time) == 0x000000, "Member 'FortSpline_GetNormalFromTime::Time' has a wrong offset!");
static_assert(offsetof(FortSpline_GetNormalFromTime, ReturnValue) == 0x000004, "Member 'FortSpline_GetNormalFromTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetNumberOfControlPoints
// 0x0004 (0x0004 - 0x0000)
struct FortSpline_GetNumberOfControlPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetNumberOfControlPoints) == 0x000004, "Wrong alignment on FortSpline_GetNumberOfControlPoints");
static_assert(sizeof(FortSpline_GetNumberOfControlPoints) == 0x000004, "Wrong size on FortSpline_GetNumberOfControlPoints");
static_assert(offsetof(FortSpline_GetNumberOfControlPoints, ReturnValue) == 0x000000, "Member 'FortSpline_GetNumberOfControlPoints::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetPositionFromTime
// 0x0010 (0x0010 - 0x0000)
struct FortSpline_GetPositionFromTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetPositionFromTime) == 0x000004, "Wrong alignment on FortSpline_GetPositionFromTime");
static_assert(sizeof(FortSpline_GetPositionFromTime) == 0x000010, "Wrong size on FortSpline_GetPositionFromTime");
static_assert(offsetof(FortSpline_GetPositionFromTime, Time) == 0x000000, "Member 'FortSpline_GetPositionFromTime::Time' has a wrong offset!");
static_assert(offsetof(FortSpline_GetPositionFromTime, ReturnValue) == 0x000004, "Member 'FortSpline_GetPositionFromTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetSplineLength
// 0x0008 (0x0008 - 0x0000)
struct FortSpline_GetSplineLength final
{
public:
	float                                         StepSize;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetSplineLength) == 0x000004, "Wrong alignment on FortSpline_GetSplineLength");
static_assert(sizeof(FortSpline_GetSplineLength) == 0x000008, "Wrong size on FortSpline_GetSplineLength");
static_assert(offsetof(FortSpline_GetSplineLength, StepSize) == 0x000000, "Member 'FortSpline_GetSplineLength::StepSize' has a wrong offset!");
static_assert(offsetof(FortSpline_GetSplineLength, ReturnValue) == 0x000004, "Member 'FortSpline_GetSplineLength::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetSplineLengthAtTime
// 0x000C (0x000C - 0x0000)
struct FortSpline_GetSplineLengthAtTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetSplineLengthAtTime) == 0x000004, "Wrong alignment on FortSpline_GetSplineLengthAtTime");
static_assert(sizeof(FortSpline_GetSplineLengthAtTime) == 0x00000C, "Wrong size on FortSpline_GetSplineLengthAtTime");
static_assert(offsetof(FortSpline_GetSplineLengthAtTime, Time) == 0x000000, "Member 'FortSpline_GetSplineLengthAtTime::Time' has a wrong offset!");
static_assert(offsetof(FortSpline_GetSplineLengthAtTime, StepSize) == 0x000004, "Member 'FortSpline_GetSplineLengthAtTime::StepSize' has a wrong offset!");
static_assert(offsetof(FortSpline_GetSplineLengthAtTime, ReturnValue) == 0x000008, "Member 'FortSpline_GetSplineLengthAtTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetStartPoint
// 0x000C (0x000C - 0x0000)
struct FortSpline_GetStartPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetStartPoint) == 0x000004, "Wrong alignment on FortSpline_GetStartPoint");
static_assert(sizeof(FortSpline_GetStartPoint) == 0x00000C, "Wrong size on FortSpline_GetStartPoint");
static_assert(offsetof(FortSpline_GetStartPoint, ReturnValue) == 0x000000, "Member 'FortSpline_GetStartPoint::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetTangentFromTime
// 0x0010 (0x0010 - 0x0000)
struct FortSpline_GetTangentFromTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetTangentFromTime) == 0x000004, "Wrong alignment on FortSpline_GetTangentFromTime");
static_assert(sizeof(FortSpline_GetTangentFromTime) == 0x000010, "Wrong size on FortSpline_GetTangentFromTime");
static_assert(offsetof(FortSpline_GetTangentFromTime, Time) == 0x000000, "Member 'FortSpline_GetTangentFromTime::Time' has a wrong offset!");
static_assert(offsetof(FortSpline_GetTangentFromTime, ReturnValue) == 0x000004, "Member 'FortSpline_GetTangentFromTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.GetVelocityCorrectedTime
// 0x0008 (0x0008 - 0x0000)
struct FortSpline_GetVelocityCorrectedTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_GetVelocityCorrectedTime) == 0x000004, "Wrong alignment on FortSpline_GetVelocityCorrectedTime");
static_assert(sizeof(FortSpline_GetVelocityCorrectedTime) == 0x000008, "Wrong size on FortSpline_GetVelocityCorrectedTime");
static_assert(offsetof(FortSpline_GetVelocityCorrectedTime, Time) == 0x000000, "Member 'FortSpline_GetVelocityCorrectedTime::Time' has a wrong offset!");
static_assert(offsetof(FortSpline_GetVelocityCorrectedTime, ReturnValue) == 0x000004, "Member 'FortSpline_GetVelocityCorrectedTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpline.IsValid
// 0x0001 (0x0001 - 0x0000)
struct FortSpline_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpline_IsValid) == 0x000001, "Wrong alignment on FortSpline_IsValid");
static_assert(sizeof(FortSpline_IsValid) == 0x000001, "Wrong size on FortSpline_IsValid");
static_assert(offsetof(FortSpline_IsValid, ReturnValue) == 0x000000, "Member 'FortSpline_IsValid::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortInteractInterface.CanInteract
// 0x0024 (0x0024 - 0x0000)
struct FortInteractInterface_CanInteract final
{
public:
	struct FInteractionType                       InteractType;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInteractInterface_CanInteract) == 0x000004, "Wrong alignment on FortInteractInterface_CanInteract");
static_assert(sizeof(FortInteractInterface_CanInteract) == 0x000024, "Wrong size on FortInteractInterface_CanInteract");
static_assert(offsetof(FortInteractInterface_CanInteract, InteractType) == 0x000000, "Member 'FortInteractInterface_CanInteract::InteractType' has a wrong offset!");
static_assert(offsetof(FortInteractInterface_CanInteract, ReturnValue) == 0x000020, "Member 'FortInteractInterface_CanInteract::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortInteractInterface.CanShowContextInfo
// 0x0024 (0x0024 - 0x0000)
struct FortInteractInterface_CanShowContextInfo final
{
public:
	struct FInteractionType                       InteractType;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInteractInterface_CanShowContextInfo) == 0x000004, "Wrong alignment on FortInteractInterface_CanShowContextInfo");
static_assert(sizeof(FortInteractInterface_CanShowContextInfo) == 0x000024, "Wrong size on FortInteractInterface_CanShowContextInfo");
static_assert(offsetof(FortInteractInterface_CanShowContextInfo, InteractType) == 0x000000, "Member 'FortInteractInterface_CanShowContextInfo::InteractType' has a wrong offset!");
static_assert(offsetof(FortInteractInterface_CanShowContextInfo, ReturnValue) == 0x000020, "Member 'FortInteractInterface_CanShowContextInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortInteractInterface.GetContextInfo
// 0x0060 (0x0060 - 0x0000)
struct FortInteractInterface_GetContextInfo final
{
public:
	struct FInteractionType                       InteractType;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInteractContextInfo                   ReturnValue;                                       // 0x0020(0x0040)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInteractInterface_GetContextInfo) == 0x000004, "Wrong alignment on FortInteractInterface_GetContextInfo");
static_assert(sizeof(FortInteractInterface_GetContextInfo) == 0x000060, "Wrong size on FortInteractInterface_GetContextInfo");
static_assert(offsetof(FortInteractInterface_GetContextInfo, InteractType) == 0x000000, "Member 'FortInteractInterface_GetContextInfo::InteractType' has a wrong offset!");
static_assert(offsetof(FortInteractInterface_GetContextInfo, ReturnValue) == 0x000020, "Member 'FortInteractInterface_GetContextInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortInteractInterface.HasDisplayWidget
// 0x0024 (0x0024 - 0x0000)
struct FortInteractInterface_HasDisplayWidget final
{
public:
	struct FInteractionType                       InteractType;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInteractInterface_HasDisplayWidget) == 0x000004, "Wrong alignment on FortInteractInterface_HasDisplayWidget");
static_assert(sizeof(FortInteractInterface_HasDisplayWidget) == 0x000024, "Wrong size on FortInteractInterface_HasDisplayWidget");
static_assert(offsetof(FortInteractInterface_HasDisplayWidget, InteractType) == 0x000000, "Member 'FortInteractInterface_HasDisplayWidget::InteractType' has a wrong offset!");
static_assert(offsetof(FortInteractInterface_HasDisplayWidget, ReturnValue) == 0x000020, "Member 'FortInteractInterface_HasDisplayWidget::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortInteractInterface.LocalOnAttemptInteract
// 0x0024 (0x0024 - 0x0000)
struct FortInteractInterface_LocalOnAttemptInteract final
{
public:
	struct FInteractionType                       InteractType;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInteractInterface_LocalOnAttemptInteract) == 0x000004, "Wrong alignment on FortInteractInterface_LocalOnAttemptInteract");
static_assert(sizeof(FortInteractInterface_LocalOnAttemptInteract) == 0x000024, "Wrong size on FortInteractInterface_LocalOnAttemptInteract");
static_assert(offsetof(FortInteractInterface_LocalOnAttemptInteract, InteractType) == 0x000000, "Member 'FortInteractInterface_LocalOnAttemptInteract::InteractType' has a wrong offset!");
static_assert(offsetof(FortInteractInterface_LocalOnAttemptInteract, ReturnValue) == 0x000020, "Member 'FortInteractInterface_LocalOnAttemptInteract::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortInteractInterface.LocalOnInterruptInteract
// 0x0020 (0x0020 - 0x0000)
struct FortInteractInterface_LocalOnInterruptInteract final
{
public:
	struct FInteractionType                       InteractType;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInteractInterface_LocalOnInterruptInteract) == 0x000004, "Wrong alignment on FortInteractInterface_LocalOnInterruptInteract");
static_assert(sizeof(FortInteractInterface_LocalOnInterruptInteract) == 0x000020, "Wrong size on FortInteractInterface_LocalOnInterruptInteract");
static_assert(offsetof(FortInteractInterface_LocalOnInterruptInteract, InteractType) == 0x000000, "Member 'FortInteractInterface_LocalOnInterruptInteract::InteractType' has a wrong offset!");

// Function FortniteGame.FortInteractInterface.ServerOnAttemptInteract
// 0x0024 (0x0024 - 0x0000)
struct FortInteractInterface_ServerOnAttemptInteract final
{
public:
	struct FInteractionType                       InteractType;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortInteractInterface_ServerOnAttemptInteract) == 0x000004, "Wrong alignment on FortInteractInterface_ServerOnAttemptInteract");
static_assert(sizeof(FortInteractInterface_ServerOnAttemptInteract) == 0x000024, "Wrong size on FortInteractInterface_ServerOnAttemptInteract");
static_assert(offsetof(FortInteractInterface_ServerOnAttemptInteract, InteractType) == 0x000000, "Member 'FortInteractInterface_ServerOnAttemptInteract::InteractType' has a wrong offset!");
static_assert(offsetof(FortInteractInterface_ServerOnAttemptInteract, ReturnValue) == 0x000020, "Member 'FortInteractInterface_ServerOnAttemptInteract::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPickup.GetDisplayName
// 0x000C (0x000C - 0x0000)
struct FortPickup_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickup_GetDisplayName) == 0x000004, "Wrong alignment on FortPickup_GetDisplayName");
static_assert(sizeof(FortPickup_GetDisplayName) == 0x00000C, "Wrong size on FortPickup_GetDisplayName");
static_assert(offsetof(FortPickup_GetDisplayName, ReturnValue) == 0x000000, "Member 'FortPickup_GetDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPickup.TossPickup
// 0x0014 (0x0014 - 0x0000)
struct FortPickup_TossPickup final
{
public:
	struct FVector                                FinalLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class APawn*                                  ItemOwner;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverrideMaxStackCount;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPickup_TossPickup) == 0x000004, "Wrong alignment on FortPickup_TossPickup");
static_assert(sizeof(FortPickup_TossPickup) == 0x000014, "Wrong size on FortPickup_TossPickup");
static_assert(offsetof(FortPickup_TossPickup, FinalLocation) == 0x000000, "Member 'FortPickup_TossPickup::FinalLocation' has a wrong offset!");
static_assert(offsetof(FortPickup_TossPickup, ItemOwner) == 0x00000C, "Member 'FortPickup_TossPickup::ItemOwner' has a wrong offset!");
static_assert(offsetof(FortPickup_TossPickup, OverrideMaxStackCount) == 0x000010, "Member 'FortPickup_TossPickup::OverrideMaxStackCount' has a wrong offset!");

// Function FortniteGame.FortFeedbackManager.GetAnnouncerPawn
// 0x0008 (0x0008 - 0x0000)
struct FortFeedbackManager_GetAnnouncerPawn final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn_FeedbackAnnouncer*            ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeedbackManager_GetAnnouncerPawn) == 0x000004, "Wrong alignment on FortFeedbackManager_GetAnnouncerPawn");
static_assert(sizeof(FortFeedbackManager_GetAnnouncerPawn) == 0x000008, "Wrong size on FortFeedbackManager_GetAnnouncerPawn");
static_assert(offsetof(FortFeedbackManager_GetAnnouncerPawn, WorldContextObject) == 0x000000, "Member 'FortFeedbackManager_GetAnnouncerPawn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFeedbackManager_GetAnnouncerPawn, ReturnValue) == 0x000004, "Member 'FortFeedbackManager_GetAnnouncerPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortFeedbackManager.GetFeedbackManager
// 0x0008 (0x0008 - 0x0000)
struct FortFeedbackManager_GetFeedbackManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortFeedbackManager*                   ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeedbackManager_GetFeedbackManager) == 0x000004, "Wrong alignment on FortFeedbackManager_GetFeedbackManager");
static_assert(sizeof(FortFeedbackManager_GetFeedbackManager) == 0x000008, "Wrong size on FortFeedbackManager_GetFeedbackManager");
static_assert(offsetof(FortFeedbackManager_GetFeedbackManager, WorldContextObject) == 0x000000, "Member 'FortFeedbackManager_GetFeedbackManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortFeedbackManager_GetFeedbackManager, ReturnValue) == 0x000004, "Member 'FortFeedbackManager_GetFeedbackManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortFeedbackManager.SuppressProceduralFeedback
// 0x000C (0x000C - 0x0000)
struct FortFeedbackManager_SuppressProceduralFeedback final
{
public:
	TArray<class AController*>                    ControllersToSuppress;                             // 0x0000(0x000C)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFeedbackManager_SuppressProceduralFeedback) == 0x000004, "Wrong alignment on FortFeedbackManager_SuppressProceduralFeedback");
static_assert(sizeof(FortFeedbackManager_SuppressProceduralFeedback) == 0x00000C, "Wrong size on FortFeedbackManager_SuppressProceduralFeedback");
static_assert(offsetof(FortFeedbackManager_SuppressProceduralFeedback, ControllersToSuppress) == 0x000000, "Member 'FortFeedbackManager_SuppressProceduralFeedback::ControllersToSuppress' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_SpawnProjectileAndWait.SpawnProjectileAndWait
// 0x0108 (0x0108 - 0x0000)
struct FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortProjectileBase>        Class_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 RequestedBy_0;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation_0;                                   // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation_0;                                   // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnDirection_0;                                  // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InitialSpeed_0;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainerSpec       EffectContainerSpecToApplyOnHit_0;                 // 0x0034(0x0064)(Parm, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainerSpec       EffectContainerSpecToApplyOnExplode_0;             // 0x0098(0x0064)(Parm, NativeAccessSpecifierPublic)
	float                                         GravityScale_0;                                    // 0x00FC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HomingTarget_0;                                    // 0x0100(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilityTask_SpawnProjectileAndWait* ReturnValue;                                       // 0x0104(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait) == 0x000004, "Wrong alignment on FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait");
static_assert(sizeof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait) == 0x000108, "Wrong size on FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, WorldContextObject) == 0x000000, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, Class_0) == 0x000004, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::Class_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, RequestedBy_0) == 0x000008, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::RequestedBy_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, SpawnLocation_0) == 0x00000C, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::SpawnLocation_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, SpawnRotation_0) == 0x000018, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::SpawnRotation_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, SpawnDirection_0) == 0x000024, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::SpawnDirection_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, InitialSpeed_0) == 0x000030, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::InitialSpeed_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, EffectContainerSpecToApplyOnHit_0) == 0x000034, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::EffectContainerSpecToApplyOnHit_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, EffectContainerSpecToApplyOnExplode_0) == 0x000098, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::EffectContainerSpecToApplyOnExplode_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, GravityScale_0) == 0x0000FC, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::GravityScale_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, HomingTarget_0) == 0x000100, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::HomingTarget_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait, ReturnValue) == 0x000104, "Member 'FortAbilityTask_SpawnProjectileAndWait_SpawnProjectileAndWait::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_SpawnProjectileAndWait.BeginSpawningActor
// 0x0010 (0x0010 - 0x0000)
struct FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortProjectileBase>        Class_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortProjectileBase*                    SpawnedActor;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor) == 0x000004, "Wrong alignment on FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor");
static_assert(sizeof(FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor) == 0x000010, "Wrong size on FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor, WorldContextObject) == 0x000000, "Member 'FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor, Class_0) == 0x000004, "Member 'FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor::Class_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor, SpawnedActor) == 0x000008, "Member 'FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor::SpawnedActor' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor, ReturnValue) == 0x00000C, "Member 'FortAbilityTask_SpawnProjectileAndWait_BeginSpawningActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_SpawnProjectileAndWait.FinishSpawningActor
// 0x0008 (0x0008 - 0x0000)
struct FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortProjectileBase*                    SpawnedActor;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor) == 0x000004, "Wrong alignment on FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor");
static_assert(sizeof(FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor) == 0x000008, "Wrong size on FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor, WorldContextObject) == 0x000000, "Member 'FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor, SpawnedActor) == 0x000004, "Member 'FortAbilityTask_SpawnProjectileAndWait_FinishSpawningActor::SpawnedActor' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfoOwnerInterface.GetEncounterInfo
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterInfoOwnerInterface_GetEncounterInfo final
{
public:
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfoOwnerInterface_GetEncounterInfo) == 0x000004, "Wrong alignment on FortAIEncounterInfoOwnerInterface_GetEncounterInfo");
static_assert(sizeof(FortAIEncounterInfoOwnerInterface_GetEncounterInfo) == 0x000004, "Wrong size on FortAIEncounterInfoOwnerInterface_GetEncounterInfo");
static_assert(offsetof(FortAIEncounterInfoOwnerInterface_GetEncounterInfo, ReturnValue) == 0x000000, "Member 'FortAIEncounterInfoOwnerInterface_GetEncounterInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTeamActorInterface.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct FortTeamActorInterface_GetTeam final
{
public:
	EFortTeam                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamActorInterface_GetTeam) == 0x000001, "Wrong alignment on FortTeamActorInterface_GetTeam");
static_assert(sizeof(FortTeamActorInterface_GetTeam) == 0x000001, "Wrong size on FortTeamActorInterface_GetTeam");
static_assert(offsetof(FortTeamActorInterface_GetTeam, ReturnValue) == 0x000000, "Member 'FortTeamActorInterface_GetTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIGoalProvider.InitializeGoalProvider
// 0x000C (0x000C - 0x0000)
struct FortAIGoalProvider_InitializeGoalProvider final
{
public:
	class UWorld*                                 ContextWorld;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignment*                      Assignment;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIGoalProvider_InitializeGoalProvider) == 0x000004, "Wrong alignment on FortAIGoalProvider_InitializeGoalProvider");
static_assert(sizeof(FortAIGoalProvider_InitializeGoalProvider) == 0x00000C, "Wrong size on FortAIGoalProvider_InitializeGoalProvider");
static_assert(offsetof(FortAIGoalProvider_InitializeGoalProvider, ContextWorld) == 0x000000, "Member 'FortAIGoalProvider_InitializeGoalProvider::ContextWorld' has a wrong offset!");
static_assert(offsetof(FortAIGoalProvider_InitializeGoalProvider, Assignment) == 0x000004, "Member 'FortAIGoalProvider_InitializeGoalProvider::Assignment' has a wrong offset!");
static_assert(offsetof(FortAIGoalProvider_InitializeGoalProvider, ReturnValue) == 0x000008, "Member 'FortAIGoalProvider_InitializeGoalProvider::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIGoalProvider.GetEncounterInfo
// 0x0004 (0x0004 - 0x0000)
struct FortAIGoalProvider_GetEncounterInfo final
{
public:
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalProvider_GetEncounterInfo) == 0x000004, "Wrong alignment on FortAIGoalProvider_GetEncounterInfo");
static_assert(sizeof(FortAIGoalProvider_GetEncounterInfo) == 0x000004, "Wrong size on FortAIGoalProvider_GetEncounterInfo");
static_assert(offsetof(FortAIGoalProvider_GetEncounterInfo, ReturnValue) == 0x000000, "Member 'FortAIGoalProvider_GetEncounterInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTargetSelectionInterface.GetTargetingTransform
// 0x0040 (0x0040 - 0x0000)
struct FortTargetSelectionInterface_GetTargetingTransform final
{
public:
	EFortAbilityTargetingSource                   Source;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGameplayAbility*                   SourceAbility;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTargetSelectionInterface_GetTargetingTransform) == 0x000010, "Wrong alignment on FortTargetSelectionInterface_GetTargetingTransform");
static_assert(sizeof(FortTargetSelectionInterface_GetTargetingTransform) == 0x000040, "Wrong size on FortTargetSelectionInterface_GetTargetingTransform");
static_assert(offsetof(FortTargetSelectionInterface_GetTargetingTransform, Source) == 0x000000, "Member 'FortTargetSelectionInterface_GetTargetingTransform::Source' has a wrong offset!");
static_assert(offsetof(FortTargetSelectionInterface_GetTargetingTransform, SourceAbility) == 0x000004, "Member 'FortTargetSelectionInterface_GetTargetingTransform::SourceAbility' has a wrong offset!");
static_assert(offsetof(FortTargetSelectionInterface_GetTargetingTransform, ReturnValue) == 0x000010, "Member 'FortTargetSelectionInterface_GetTargetingTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_PlayMontageWaitTarget.PlayMontageInfoAndWaitForTrigger
// 0x0054 (0x0054 - 0x0000)
struct FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGameplayAbilityMontageInfo        MontageInfo_0;                                     // 0x000C(0x0044)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAbilityTask_PlayMontageWaitTarget* ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger) == 0x000004, "Wrong alignment on FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger");
static_assert(sizeof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger) == 0x000054, "Wrong size on FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger, WorldContextObject) == 0x000000, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger, TaskInstanceName) == 0x000004, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger, MontageInfo_0) == 0x00000C, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger::MontageInfo_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger, ReturnValue) == 0x000050, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageInfoAndWaitForTrigger::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_PlayMontageWaitTarget.PlayMontageWaitTarget
// 0x0028 (0x0028 - 0x0000)
struct FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimPlayRate;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGameplayAbilityMontageSectionToPlay      SectionToPlay;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideSection;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimRootMotionTranslationScale;                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilityTask_PlayMontageWaitTarget* ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget) == 0x000004, "Wrong alignment on FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget");
static_assert(sizeof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget) == 0x000028, "Wrong size on FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, WorldContextObject) == 0x000000, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, TaskInstanceName) == 0x000004, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, MontageToPlay) == 0x00000C, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::MontageToPlay' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, AnimPlayRate) == 0x000010, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::AnimPlayRate' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, SectionToPlay) == 0x000014, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::SectionToPlay' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, OverrideSection) == 0x000018, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::OverrideSection' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, AnimRootMotionTranslationScale) == 0x000020, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::AnimRootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget, ReturnValue) == 0x000024, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWaitTarget::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_PlayMontageWaitTarget.PlayMontageWithCharPartsWait
// 0x0034 (0x0034 - 0x0000)
struct FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortCharacterPartMontageInfo>  CharacterPartMontages;                             // 0x0010(0x000C)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AnimPlayRate;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGameplayAbilityMontageSectionToPlay      SectionToPlay;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideSection;                                   // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimRootMotionTranslationScale;                    // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilityTask_PlayMontageWaitTarget* ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait) == 0x000004, "Wrong alignment on FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait");
static_assert(sizeof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait) == 0x000034, "Wrong size on FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, WorldContextObject) == 0x000000, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, TaskInstanceName) == 0x000004, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, MontageToPlay) == 0x00000C, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::MontageToPlay' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, CharacterPartMontages) == 0x000010, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::CharacterPartMontages' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, AnimPlayRate) == 0x00001C, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::AnimPlayRate' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, SectionToPlay) == 0x000020, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::SectionToPlay' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, OverrideSection) == 0x000024, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::OverrideSection' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, AnimRootMotionTranslationScale) == 0x00002C, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::AnimRootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait, ReturnValue) == 0x000030, "Member 'FortAbilityTask_PlayMontageWaitTarget_PlayMontageWithCharPartsWait::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_PlayMontageWaitTarget.OnTargetDataReadyCallback
// 0x001C (0x001C - 0x0000)
struct FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0014(0x0008)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback) == 0x000004, "Wrong alignment on FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback");
static_assert(sizeof(FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback) == 0x00001C, "Wrong size on FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback, TargetData) == 0x000000, "Member 'FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback::TargetData' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback, ApplicationTag) == 0x000014, "Member 'FortAbilityTask_PlayMontageWaitTarget_OnTargetDataReadyCallback::ApplicationTag' has a wrong offset!");

// Function FortniteGame.FortPawn.AlignRotationTo4WaysHitReaction
// 0x001C (0x001C - 0x0000)
struct FortPawn_AlignRotationTo4WaysHitReaction final
{
public:
	struct FVector                                HitDirection;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FrontOffset;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackOffset;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftOffset;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightOffset;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_AlignRotationTo4WaysHitReaction) == 0x000004, "Wrong alignment on FortPawn_AlignRotationTo4WaysHitReaction");
static_assert(sizeof(FortPawn_AlignRotationTo4WaysHitReaction) == 0x00001C, "Wrong size on FortPawn_AlignRotationTo4WaysHitReaction");
static_assert(offsetof(FortPawn_AlignRotationTo4WaysHitReaction, HitDirection) == 0x000000, "Member 'FortPawn_AlignRotationTo4WaysHitReaction::HitDirection' has a wrong offset!");
static_assert(offsetof(FortPawn_AlignRotationTo4WaysHitReaction, FrontOffset) == 0x00000C, "Member 'FortPawn_AlignRotationTo4WaysHitReaction::FrontOffset' has a wrong offset!");
static_assert(offsetof(FortPawn_AlignRotationTo4WaysHitReaction, BackOffset) == 0x000010, "Member 'FortPawn_AlignRotationTo4WaysHitReaction::BackOffset' has a wrong offset!");
static_assert(offsetof(FortPawn_AlignRotationTo4WaysHitReaction, LeftOffset) == 0x000014, "Member 'FortPawn_AlignRotationTo4WaysHitReaction::LeftOffset' has a wrong offset!");
static_assert(offsetof(FortPawn_AlignRotationTo4WaysHitReaction, RightOffset) == 0x000018, "Member 'FortPawn_AlignRotationTo4WaysHitReaction::RightOffset' has a wrong offset!");

// Function FortniteGame.FortPawn.AlignRotationToHitDirection
// 0x000C (0x000C - 0x0000)
struct FortPawn_AlignRotationToHitDirection final
{
public:
	struct FVector                                HitDirection;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_AlignRotationToHitDirection) == 0x000004, "Wrong alignment on FortPawn_AlignRotationToHitDirection");
static_assert(sizeof(FortPawn_AlignRotationToHitDirection) == 0x00000C, "Wrong size on FortPawn_AlignRotationToHitDirection");
static_assert(offsetof(FortPawn_AlignRotationToHitDirection, HitDirection) == 0x000000, "Member 'FortPawn_AlignRotationToHitDirection::HitDirection' has a wrong offset!");

// Function FortniteGame.FortPawn.AnimMontage_LocalJumpToSectionName
// 0x000C (0x000C - 0x0000)
struct FortPawn_AnimMontage_LocalJumpToSectionName final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_AnimMontage_LocalJumpToSectionName) == 0x000004, "Wrong alignment on FortPawn_AnimMontage_LocalJumpToSectionName");
static_assert(sizeof(FortPawn_AnimMontage_LocalJumpToSectionName) == 0x00000C, "Wrong size on FortPawn_AnimMontage_LocalJumpToSectionName");
static_assert(offsetof(FortPawn_AnimMontage_LocalJumpToSectionName, SectionName) == 0x000000, "Member 'FortPawn_AnimMontage_LocalJumpToSectionName::SectionName' has a wrong offset!");
static_assert(offsetof(FortPawn_AnimMontage_LocalJumpToSectionName, ReturnValue) == 0x000008, "Member 'FortPawn_AnimMontage_LocalJumpToSectionName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.AnimMontage_LocalSetNextSectionName
// 0x0014 (0x0014 - 0x0000)
struct FortPawn_AnimMontage_LocalSetNextSectionName final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextSectionName;                                   // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_AnimMontage_LocalSetNextSectionName) == 0x000004, "Wrong alignment on FortPawn_AnimMontage_LocalSetNextSectionName");
static_assert(sizeof(FortPawn_AnimMontage_LocalSetNextSectionName) == 0x000014, "Wrong size on FortPawn_AnimMontage_LocalSetNextSectionName");
static_assert(offsetof(FortPawn_AnimMontage_LocalSetNextSectionName, AnimMontage) == 0x000000, "Member 'FortPawn_AnimMontage_LocalSetNextSectionName::AnimMontage' has a wrong offset!");
static_assert(offsetof(FortPawn_AnimMontage_LocalSetNextSectionName, SectionName) == 0x000004, "Member 'FortPawn_AnimMontage_LocalSetNextSectionName::SectionName' has a wrong offset!");
static_assert(offsetof(FortPawn_AnimMontage_LocalSetNextSectionName, NextSectionName) == 0x00000C, "Member 'FortPawn_AnimMontage_LocalSetNextSectionName::NextSectionName' has a wrong offset!");

// Function FortniteGame.FortPawn.ApplyKnockback
// 0x0014 (0x0014 - 0x0000)
struct FortPawn_ApplyKnockback final
{
public:
	float                                         KnockbackMagnitude;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockbackZAngle;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDir;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_ApplyKnockback) == 0x000004, "Wrong alignment on FortPawn_ApplyKnockback");
static_assert(sizeof(FortPawn_ApplyKnockback) == 0x000014, "Wrong size on FortPawn_ApplyKnockback");
static_assert(offsetof(FortPawn_ApplyKnockback, KnockbackMagnitude) == 0x000000, "Member 'FortPawn_ApplyKnockback::KnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FortPawn_ApplyKnockback, KnockbackZAngle) == 0x000004, "Member 'FortPawn_ApplyKnockback::KnockbackZAngle' has a wrong offset!");
static_assert(offsetof(FortPawn_ApplyKnockback, ImpulseDir) == 0x000008, "Member 'FortPawn_ApplyKnockback::ImpulseDir' has a wrong offset!");

// Function FortniteGame.FortPawn.AttachAssetToSocket
// 0x001C (0x001C - 0x0000)
struct FortPawn_AttachAssetToSocket final
{
public:
	struct FAssetAttachment                       InAttachment;                                      // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_AttachAssetToSocket) == 0x000004, "Wrong alignment on FortPawn_AttachAssetToSocket");
static_assert(sizeof(FortPawn_AttachAssetToSocket) == 0x00001C, "Wrong size on FortPawn_AttachAssetToSocket");
static_assert(offsetof(FortPawn_AttachAssetToSocket, InAttachment) == 0x000000, "Member 'FortPawn_AttachAssetToSocket::InAttachment' has a wrong offset!");

// Function FortniteGame.FortPawn.ClientInternalEquipWeapon
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_ClientInternalEquipWeapon final
{
public:
	class AFortWeapon*                            Weap;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_ClientInternalEquipWeapon) == 0x000004, "Wrong alignment on FortPawn_ClientInternalEquipWeapon");
static_assert(sizeof(FortPawn_ClientInternalEquipWeapon) == 0x000004, "Wrong size on FortPawn_ClientInternalEquipWeapon");
static_assert(offsetof(FortPawn_ClientInternalEquipWeapon, Weap) == 0x000000, "Member 'FortPawn_ClientInternalEquipWeapon::Weap' has a wrong offset!");

// Function FortniteGame.FortPawn.DetachAssetFromSocket
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_DetachAssetFromSocket final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_DetachAssetFromSocket) == 0x000004, "Wrong alignment on FortPawn_DetachAssetFromSocket");
static_assert(sizeof(FortPawn_DetachAssetFromSocket) == 0x000008, "Wrong size on FortPawn_DetachAssetFromSocket");
static_assert(offsetof(FortPawn_DetachAssetFromSocket, SocketName) == 0x000000, "Member 'FortPawn_DetachAssetFromSocket::SocketName' has a wrong offset!");

// Function FortniteGame.FortPawn.DoFatalDamage
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_DoFatalDamage final
{
public:
	class UAbilitySystemComponent*                KillerAbilitySystemComponent;                      // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_DoFatalDamage) == 0x000004, "Wrong alignment on FortPawn_DoFatalDamage");
static_assert(sizeof(FortPawn_DoFatalDamage) == 0x000004, "Wrong size on FortPawn_DoFatalDamage");
static_assert(offsetof(FortPawn_DoFatalDamage, KillerAbilitySystemComponent) == 0x000000, "Member 'FortPawn_DoFatalDamage::KillerAbilitySystemComponent' has a wrong offset!");

// Function FortniteGame.FortPawn.ForceKill
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_ForceKill final
{
public:
	struct FGameplayTag                           DeathReason;                                       // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	class AController*                            KillerController;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 KillerActor;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_ForceKill) == 0x000004, "Wrong alignment on FortPawn_ForceKill");
static_assert(sizeof(FortPawn_ForceKill) == 0x000010, "Wrong size on FortPawn_ForceKill");
static_assert(offsetof(FortPawn_ForceKill, DeathReason) == 0x000000, "Member 'FortPawn_ForceKill::DeathReason' has a wrong offset!");
static_assert(offsetof(FortPawn_ForceKill, KillerController) == 0x000008, "Member 'FortPawn_ForceKill::KillerController' has a wrong offset!");
static_assert(offsetof(FortPawn_ForceKill, KillerActor) == 0x00000C, "Member 'FortPawn_ForceKill::KillerActor' has a wrong offset!");

// Function FortniteGame.FortPawn.GameplayCue
// 0x0088 (0x0088 - 0x0000)
struct FortPawn_GameplayCue final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0004(0x0084)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GameplayCue) == 0x000004, "Wrong alignment on FortPawn_GameplayCue");
static_assert(sizeof(FortPawn_GameplayCue) == 0x000088, "Wrong size on FortPawn_GameplayCue");
static_assert(offsetof(FortPawn_GameplayCue, EventType) == 0x000000, "Member 'FortPawn_GameplayCue::EventType' has a wrong offset!");
static_assert(offsetof(FortPawn_GameplayCue, Parameters) == 0x000004, "Member 'FortPawn_GameplayCue::Parameters' has a wrong offset!");

// Function FortniteGame.FortPawn.GameplayCue_Damage
// 0x0088 (0x0088 - 0x0000)
struct FortPawn_GameplayCue_Damage final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0004(0x0084)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GameplayCue_Damage) == 0x000004, "Wrong alignment on FortPawn_GameplayCue_Damage");
static_assert(sizeof(FortPawn_GameplayCue_Damage) == 0x000088, "Wrong size on FortPawn_GameplayCue_Damage");
static_assert(offsetof(FortPawn_GameplayCue_Damage, EventType) == 0x000000, "Member 'FortPawn_GameplayCue_Damage::EventType' has a wrong offset!");
static_assert(offsetof(FortPawn_GameplayCue_Damage, Parameters) == 0x000004, "Member 'FortPawn_GameplayCue_Damage::Parameters' has a wrong offset!");

// Function FortniteGame.FortPawn.GameplayCue_InstantDeath
// 0x0088 (0x0088 - 0x0000)
struct FortPawn_GameplayCue_InstantDeath final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0004(0x0084)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GameplayCue_InstantDeath) == 0x000004, "Wrong alignment on FortPawn_GameplayCue_InstantDeath");
static_assert(sizeof(FortPawn_GameplayCue_InstantDeath) == 0x000088, "Wrong size on FortPawn_GameplayCue_InstantDeath");
static_assert(offsetof(FortPawn_GameplayCue_InstantDeath, EventType) == 0x000000, "Member 'FortPawn_GameplayCue_InstantDeath::EventType' has a wrong offset!");
static_assert(offsetof(FortPawn_GameplayCue_InstantDeath, Parameters) == 0x000004, "Member 'FortPawn_GameplayCue_InstantDeath::Parameters' has a wrong offset!");

// Function FortniteGame.FortPawn.GetAssetSkeletalMeshComponentAttachment
// 0x000C (0x000C - 0x0000)
struct FortPawn_GetAssetSkeletalMeshComponentAttachment final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0004)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetAssetSkeletalMeshComponentAttachment) == 0x000004, "Wrong alignment on FortPawn_GetAssetSkeletalMeshComponentAttachment");
static_assert(sizeof(FortPawn_GetAssetSkeletalMeshComponentAttachment) == 0x00000C, "Wrong size on FortPawn_GetAssetSkeletalMeshComponentAttachment");
static_assert(offsetof(FortPawn_GetAssetSkeletalMeshComponentAttachment, SocketName) == 0x000000, "Member 'FortPawn_GetAssetSkeletalMeshComponentAttachment::SocketName' has a wrong offset!");
static_assert(offsetof(FortPawn_GetAssetSkeletalMeshComponentAttachment, ReturnValue) == 0x000008, "Member 'FortPawn_GetAssetSkeletalMeshComponentAttachment::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetAssetStaticMeshComponentAttachment
// 0x000C (0x000C - 0x0000)
struct FortPawn_GetAssetStaticMeshComponentAttachment final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0008(0x0004)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetAssetStaticMeshComponentAttachment) == 0x000004, "Wrong alignment on FortPawn_GetAssetStaticMeshComponentAttachment");
static_assert(sizeof(FortPawn_GetAssetStaticMeshComponentAttachment) == 0x00000C, "Wrong size on FortPawn_GetAssetStaticMeshComponentAttachment");
static_assert(offsetof(FortPawn_GetAssetStaticMeshComponentAttachment, SocketName) == 0x000000, "Member 'FortPawn_GetAssetStaticMeshComponentAttachment::SocketName' has a wrong offset!");
static_assert(offsetof(FortPawn_GetAssetStaticMeshComponentAttachment, ReturnValue) == 0x000008, "Member 'FortPawn_GetAssetStaticMeshComponentAttachment::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetCurrentFeedbackDuration
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetCurrentFeedbackDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetCurrentFeedbackDuration) == 0x000004, "Wrong alignment on FortPawn_GetCurrentFeedbackDuration");
static_assert(sizeof(FortPawn_GetCurrentFeedbackDuration) == 0x000004, "Wrong size on FortPawn_GetCurrentFeedbackDuration");
static_assert(offsetof(FortPawn_GetCurrentFeedbackDuration, ReturnValue) == 0x000000, "Member 'FortPawn_GetCurrentFeedbackDuration::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetCurrentMontageSectionTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetCurrentMontageSectionTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetCurrentMontageSectionTimeLeft) == 0x000004, "Wrong alignment on FortPawn_GetCurrentMontageSectionTimeLeft");
static_assert(sizeof(FortPawn_GetCurrentMontageSectionTimeLeft) == 0x000004, "Wrong size on FortPawn_GetCurrentMontageSectionTimeLeft");
static_assert(offsetof(FortPawn_GetCurrentMontageSectionTimeLeft, ReturnValue) == 0x000000, "Member 'FortPawn_GetCurrentMontageSectionTimeLeft::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetFeedbackAudioComponent
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetFeedbackAudioComponent final
{
public:
	class UAudioComponent*                        ReturnValue;                                       // 0x0000(0x0004)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetFeedbackAudioComponent) == 0x000004, "Wrong alignment on FortPawn_GetFeedbackAudioComponent");
static_assert(sizeof(FortPawn_GetFeedbackAudioComponent) == 0x000004, "Wrong size on FortPawn_GetFeedbackAudioComponent");
static_assert(offsetof(FortPawn_GetFeedbackAudioComponent, ReturnValue) == 0x000000, "Member 'FortPawn_GetFeedbackAudioComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetHealthPercent
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetHealthPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetHealthPercent) == 0x000004, "Wrong alignment on FortPawn_GetHealthPercent");
static_assert(sizeof(FortPawn_GetHealthPercent) == 0x000004, "Wrong size on FortPawn_GetHealthPercent");
static_assert(offsetof(FortPawn_GetHealthPercent, ReturnValue) == 0x000000, "Member 'FortPawn_GetHealthPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetMyMovementBaseActor
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetMyMovementBaseActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetMyMovementBaseActor) == 0x000004, "Wrong alignment on FortPawn_GetMyMovementBaseActor");
static_assert(sizeof(FortPawn_GetMyMovementBaseActor) == 0x000004, "Wrong size on FortPawn_GetMyMovementBaseActor");
static_assert(offsetof(FortPawn_GetMyMovementBaseActor, ReturnValue) == 0x000000, "Member 'FortPawn_GetMyMovementBaseActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetPawnMID
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_GetPawnMID final
{
public:
	int32                                         ElementIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetPawnMID) == 0x000004, "Wrong alignment on FortPawn_GetPawnMID");
static_assert(sizeof(FortPawn_GetPawnMID) == 0x000008, "Wrong size on FortPawn_GetPawnMID");
static_assert(offsetof(FortPawn_GetPawnMID, ElementIndex) == 0x000000, "Member 'FortPawn_GetPawnMID::ElementIndex' has a wrong offset!");
static_assert(offsetof(FortPawn_GetPawnMID, ReturnValue) == 0x000004, "Member 'FortPawn_GetPawnMID::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.HoldAnimationFrames
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_HoldAnimationFrames final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_HoldAnimationFrames) == 0x000004, "Wrong alignment on FortPawn_HoldAnimationFrames");
static_assert(sizeof(FortPawn_HoldAnimationFrames) == 0x000008, "Wrong size on FortPawn_HoldAnimationFrames");
static_assert(offsetof(FortPawn_HoldAnimationFrames, StartTime) == 0x000000, "Member 'FortPawn_HoldAnimationFrames::StartTime' has a wrong offset!");
static_assert(offsetof(FortPawn_HoldAnimationFrames, HoldTime) == 0x000004, "Member 'FortPawn_HoldAnimationFrames::HoldTime' has a wrong offset!");

// Function FortniteGame.FortPawn.InitializeDeathHitSocket
// 0x0018 (0x0018 - 0x0000)
struct FortPawn_InitializeDeathHitSocket final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                WorldNormal;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_InitializeDeathHitSocket) == 0x000004, "Wrong alignment on FortPawn_InitializeDeathHitSocket");
static_assert(sizeof(FortPawn_InitializeDeathHitSocket) == 0x000018, "Wrong size on FortPawn_InitializeDeathHitSocket");
static_assert(offsetof(FortPawn_InitializeDeathHitSocket, WorldLocation) == 0x000000, "Member 'FortPawn_InitializeDeathHitSocket::WorldLocation' has a wrong offset!");
static_assert(offsetof(FortPawn_InitializeDeathHitSocket, WorldNormal) == 0x00000C, "Member 'FortPawn_InitializeDeathHitSocket::WorldNormal' has a wrong offset!");

// Function FortniteGame.FortPawn.OnBaseChanged
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_OnBaseChanged final
{
public:
	class AActor*                                 NewBase;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnBaseChanged) == 0x000004, "Wrong alignment on FortPawn_OnBaseChanged");
static_assert(sizeof(FortPawn_OnBaseChanged) == 0x000004, "Wrong size on FortPawn_OnBaseChanged");
static_assert(offsetof(FortPawn_OnBaseChanged, NewBase) == 0x000000, "Member 'FortPawn_OnBaseChanged::NewBase' has a wrong offset!");

// Function FortniteGame.FortPawn.OnBumpPushedPawn
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_OnBumpPushedPawn final
{
public:
	class AFortPawn*                              InstigatedBy;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushTimeLeft;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnBumpPushedPawn) == 0x000004, "Wrong alignment on FortPawn_OnBumpPushedPawn");
static_assert(sizeof(FortPawn_OnBumpPushedPawn) == 0x000008, "Wrong size on FortPawn_OnBumpPushedPawn");
static_assert(offsetof(FortPawn_OnBumpPushedPawn, InstigatedBy) == 0x000000, "Member 'FortPawn_OnBumpPushedPawn::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortPawn_OnBumpPushedPawn, PushTimeLeft) == 0x000004, "Member 'FortPawn_OnBumpPushedPawn::PushTimeLeft' has a wrong offset!");

// Function FortniteGame.FortPawn.OnDamagePlayEffects
// 0x00BC (0x00BC - 0x0000)
struct FortPawn_OnDamagePlayEffects final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0004(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0028(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AFortPawn*                              InstigatedBy;                                      // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00B0(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnDamagePlayEffects) == 0x000004, "Wrong alignment on FortPawn_OnDamagePlayEffects");
static_assert(sizeof(FortPawn_OnDamagePlayEffects) == 0x0000BC, "Wrong size on FortPawn_OnDamagePlayEffects");
static_assert(offsetof(FortPawn_OnDamagePlayEffects, Damage) == 0x000000, "Member 'FortPawn_OnDamagePlayEffects::Damage' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamagePlayEffects, DamageTags) == 0x000004, "Member 'FortPawn_OnDamagePlayEffects::DamageTags' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamagePlayEffects, Momentum) == 0x00001C, "Member 'FortPawn_OnDamagePlayEffects::Momentum' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamagePlayEffects, HitInfo) == 0x000028, "Member 'FortPawn_OnDamagePlayEffects::HitInfo' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamagePlayEffects, InstigatedBy) == 0x0000A8, "Member 'FortPawn_OnDamagePlayEffects::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamagePlayEffects, DamageCauser) == 0x0000AC, "Member 'FortPawn_OnDamagePlayEffects::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamagePlayEffects, EffectContext) == 0x0000B0, "Member 'FortPawn_OnDamagePlayEffects::EffectContext' has a wrong offset!");

// Function FortniteGame.FortPawn.OnDamageServer
// 0x00BC (0x00BC - 0x0000)
struct FortPawn_OnDamageServer final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0004(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0028(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00B0(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnDamageServer) == 0x000004, "Wrong alignment on FortPawn_OnDamageServer");
static_assert(sizeof(FortPawn_OnDamageServer) == 0x0000BC, "Wrong size on FortPawn_OnDamageServer");
static_assert(offsetof(FortPawn_OnDamageServer, Damage) == 0x000000, "Member 'FortPawn_OnDamageServer::Damage' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamageServer, DamageTags) == 0x000004, "Member 'FortPawn_OnDamageServer::DamageTags' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamageServer, Momentum) == 0x00001C, "Member 'FortPawn_OnDamageServer::Momentum' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamageServer, HitInfo) == 0x000028, "Member 'FortPawn_OnDamageServer::HitInfo' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamageServer, InstigatedBy) == 0x0000A8, "Member 'FortPawn_OnDamageServer::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamageServer, DamageCauser) == 0x0000AC, "Member 'FortPawn_OnDamageServer::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamageServer, EffectContext) == 0x0000B0, "Member 'FortPawn_OnDamageServer::EffectContext' has a wrong offset!");

// Function FortniteGame.FortPawn.OnDamageZoneStatusChanged
// 0x0002 (0x0002 - 0x0000)
struct FortPawn_OnDamageZoneStatusChanged final
{
public:
	EFortDamageZone                               Zone;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStatus;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnDamageZoneStatusChanged) == 0x000001, "Wrong alignment on FortPawn_OnDamageZoneStatusChanged");
static_assert(sizeof(FortPawn_OnDamageZoneStatusChanged) == 0x000002, "Wrong size on FortPawn_OnDamageZoneStatusChanged");
static_assert(offsetof(FortPawn_OnDamageZoneStatusChanged, Zone) == 0x000000, "Member 'FortPawn_OnDamageZoneStatusChanged::Zone' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDamageZoneStatusChanged, bStatus) == 0x000001, "Member 'FortPawn_OnDamageZoneStatusChanged::bStatus' has a wrong offset!");

// Function FortniteGame.FortPawn.OnDeathPlayEffects
// 0x00BC (0x00BC - 0x0000)
struct FortPawn_OnDeathPlayEffects final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0004(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0028(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AFortPawn*                              InstigatedBy;                                      // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00B0(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnDeathPlayEffects) == 0x000004, "Wrong alignment on FortPawn_OnDeathPlayEffects");
static_assert(sizeof(FortPawn_OnDeathPlayEffects) == 0x0000BC, "Wrong size on FortPawn_OnDeathPlayEffects");
static_assert(offsetof(FortPawn_OnDeathPlayEffects, Damage) == 0x000000, "Member 'FortPawn_OnDeathPlayEffects::Damage' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathPlayEffects, DamageTags) == 0x000004, "Member 'FortPawn_OnDeathPlayEffects::DamageTags' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathPlayEffects, Momentum) == 0x00001C, "Member 'FortPawn_OnDeathPlayEffects::Momentum' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathPlayEffects, HitInfo) == 0x000028, "Member 'FortPawn_OnDeathPlayEffects::HitInfo' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathPlayEffects, InstigatedBy) == 0x0000A8, "Member 'FortPawn_OnDeathPlayEffects::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathPlayEffects, DamageCauser) == 0x0000AC, "Member 'FortPawn_OnDeathPlayEffects::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathPlayEffects, EffectContext) == 0x0000B0, "Member 'FortPawn_OnDeathPlayEffects::EffectContext' has a wrong offset!");

// Function FortniteGame.FortPawn.OnDeathServer
// 0x00BC (0x00BC - 0x0000)
struct FortPawn_OnDeathServer final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0004(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0028(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00B0(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnDeathServer) == 0x000004, "Wrong alignment on FortPawn_OnDeathServer");
static_assert(sizeof(FortPawn_OnDeathServer) == 0x0000BC, "Wrong size on FortPawn_OnDeathServer");
static_assert(offsetof(FortPawn_OnDeathServer, Damage) == 0x000000, "Member 'FortPawn_OnDeathServer::Damage' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathServer, DamageTags) == 0x000004, "Member 'FortPawn_OnDeathServer::DamageTags' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathServer, Momentum) == 0x00001C, "Member 'FortPawn_OnDeathServer::Momentum' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathServer, HitInfo) == 0x000028, "Member 'FortPawn_OnDeathServer::HitInfo' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathServer, InstigatedBy) == 0x0000A8, "Member 'FortPawn_OnDeathServer::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathServer, DamageCauser) == 0x0000AC, "Member 'FortPawn_OnDeathServer::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortPawn_OnDeathServer, EffectContext) == 0x0000B0, "Member 'FortPawn_OnDeathServer::EffectContext' has a wrong offset!");

// Function FortniteGame.FortPawn.OnMontageEnded
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_OnMontageEnded) == 0x000004, "Wrong alignment on FortPawn_OnMontageEnded");
static_assert(sizeof(FortPawn_OnMontageEnded) == 0x000008, "Wrong size on FortPawn_OnMontageEnded");
static_assert(offsetof(FortPawn_OnMontageEnded, Montage) == 0x000000, "Member 'FortPawn_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(FortPawn_OnMontageEnded, bInterrupted) == 0x000004, "Member 'FortPawn_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function FortniteGame.FortPawn.OnMontageStarted
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_OnMontageStarted final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnMontageStarted) == 0x000004, "Wrong alignment on FortPawn_OnMontageStarted");
static_assert(sizeof(FortPawn_OnMontageStarted) == 0x000004, "Wrong size on FortPawn_OnMontageStarted");
static_assert(offsetof(FortPawn_OnMontageStarted, Montage) == 0x000000, "Member 'FortPawn_OnMontageStarted::Montage' has a wrong offset!");

// Function FortniteGame.FortPawn.OnWeaponEquipped
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_OnWeaponEquipped final
{
public:
	class AFortWeapon*                            NewWeapon;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortWeapon*                            PrevWeapon;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_OnWeaponEquipped) == 0x000004, "Wrong alignment on FortPawn_OnWeaponEquipped");
static_assert(sizeof(FortPawn_OnWeaponEquipped) == 0x000008, "Wrong size on FortPawn_OnWeaponEquipped");
static_assert(offsetof(FortPawn_OnWeaponEquipped, NewWeapon) == 0x000000, "Member 'FortPawn_OnWeaponEquipped::NewWeapon' has a wrong offset!");
static_assert(offsetof(FortPawn_OnWeaponEquipped, PrevWeapon) == 0x000004, "Member 'FortPawn_OnWeaponEquipped::PrevWeapon' has a wrong offset!");

// Function FortniteGame.FortPawn.PickUpActor
// 0x000C (0x000C - 0x0000)
struct FortPawn_PickUpActor final
{
public:
	class AActor*                                 PickupTarget;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortDecoItemDefinition*                PlacementDecoItemDefinition;                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_PickUpActor) == 0x000004, "Wrong alignment on FortPawn_PickUpActor");
static_assert(sizeof(FortPawn_PickUpActor) == 0x00000C, "Wrong size on FortPawn_PickUpActor");
static_assert(offsetof(FortPawn_PickUpActor, PickupTarget) == 0x000000, "Member 'FortPawn_PickUpActor::PickupTarget' has a wrong offset!");
static_assert(offsetof(FortPawn_PickUpActor, PlacementDecoItemDefinition) == 0x000004, "Member 'FortPawn_PickUpActor::PlacementDecoItemDefinition' has a wrong offset!");
static_assert(offsetof(FortPawn_PickUpActor, ReturnValue) == 0x000008, "Member 'FortPawn_PickUpActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.PlayFootStepSound
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_PlayFootStepSound final
{
public:
	int32                                         FootDown;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_PlayFootStepSound) == 0x000004, "Wrong alignment on FortPawn_PlayFootStepSound");
static_assert(sizeof(FortPawn_PlayFootStepSound) == 0x000004, "Wrong size on FortPawn_PlayFootStepSound");
static_assert(offsetof(FortPawn_PlayFootStepSound, FootDown) == 0x000000, "Member 'FortPawn_PlayFootStepSound::FootDown' has a wrong offset!");

// Function FortniteGame.FortPawn.PlayLocalAnimMontage
// 0x0014 (0x0014 - 0x0000)
struct FortPawn_PlayLocalAnimMontage final
{
public:
	class UAnimMontage*                           NewAnimMontage;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSectionName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_PlayLocalAnimMontage) == 0x000004, "Wrong alignment on FortPawn_PlayLocalAnimMontage");
static_assert(sizeof(FortPawn_PlayLocalAnimMontage) == 0x000014, "Wrong size on FortPawn_PlayLocalAnimMontage");
static_assert(offsetof(FortPawn_PlayLocalAnimMontage, NewAnimMontage) == 0x000000, "Member 'FortPawn_PlayLocalAnimMontage::NewAnimMontage' has a wrong offset!");
static_assert(offsetof(FortPawn_PlayLocalAnimMontage, InPlayRate) == 0x000004, "Member 'FortPawn_PlayLocalAnimMontage::InPlayRate' has a wrong offset!");
static_assert(offsetof(FortPawn_PlayLocalAnimMontage, StartSectionName) == 0x000008, "Member 'FortPawn_PlayLocalAnimMontage::StartSectionName' has a wrong offset!");
static_assert(offsetof(FortPawn_PlayLocalAnimMontage, ReturnValue) == 0x000010, "Member 'FortPawn_PlayLocalAnimMontage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.PlaySound
// 0x000C (0x000C - 0x0000)
struct FortPawn_PlaySound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_PlaySound) == 0x000004, "Wrong alignment on FortPawn_PlaySound");
static_assert(sizeof(FortPawn_PlaySound) == 0x00000C, "Wrong size on FortPawn_PlaySound");
static_assert(offsetof(FortPawn_PlaySound, Sound) == 0x000000, "Member 'FortPawn_PlaySound::Sound' has a wrong offset!");
static_assert(offsetof(FortPawn_PlaySound, VolumeMultiplier) == 0x000004, "Member 'FortPawn_PlaySound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FortPawn_PlaySound, PitchMultiplier) == 0x000008, "Member 'FortPawn_PlaySound::PitchMultiplier' has a wrong offset!");

// Function FortniteGame.FortPawn.PrototypeCharacterMovement
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_PrototypeCharacterMovement final
{
public:
	EMovementMode                                 MovementMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LaunchVelocity;                                    // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_PrototypeCharacterMovement) == 0x000004, "Wrong alignment on FortPawn_PrototypeCharacterMovement");
static_assert(sizeof(FortPawn_PrototypeCharacterMovement) == 0x000010, "Wrong size on FortPawn_PrototypeCharacterMovement");
static_assert(offsetof(FortPawn_PrototypeCharacterMovement, MovementMode) == 0x000000, "Member 'FortPawn_PrototypeCharacterMovement::MovementMode' has a wrong offset!");
static_assert(offsetof(FortPawn_PrototypeCharacterMovement, LaunchVelocity) == 0x000004, "Member 'FortPawn_PrototypeCharacterMovement::LaunchVelocity' has a wrong offset!");

// Function FortniteGame.FortPawn.ServerInternalEquipWeapon
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_ServerInternalEquipWeapon final
{
public:
	class AFortWeapon*                            Weap;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_ServerInternalEquipWeapon) == 0x000004, "Wrong alignment on FortPawn_ServerInternalEquipWeapon");
static_assert(sizeof(FortPawn_ServerInternalEquipWeapon) == 0x000004, "Wrong size on FortPawn_ServerInternalEquipWeapon");
static_assert(offsetof(FortPawn_ServerInternalEquipWeapon, Weap) == 0x000000, "Member 'FortPawn_ServerInternalEquipWeapon::Weap' has a wrong offset!");

// Function FortniteGame.FortPawn.ServerTeleportNearLocation
// 0x000C (0x000C - 0x0000)
struct FortPawn_ServerTeleportNearLocation final
{
public:
	struct FVector                                ActorLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_ServerTeleportNearLocation) == 0x000004, "Wrong alignment on FortPawn_ServerTeleportNearLocation");
static_assert(sizeof(FortPawn_ServerTeleportNearLocation) == 0x00000C, "Wrong size on FortPawn_ServerTeleportNearLocation");
static_assert(offsetof(FortPawn_ServerTeleportNearLocation, ActorLocation) == 0x000000, "Member 'FortPawn_ServerTeleportNearLocation::ActorLocation' has a wrong offset!");

// Function FortniteGame.FortPawn.SetDamageZoneActiveStatus
// 0x0002 (0x0002 - 0x0000)
struct FortPawn_SetDamageZoneActiveStatus final
{
public:
	EFortDamageZone                               Zone;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetDamageZoneActiveStatus) == 0x000001, "Wrong alignment on FortPawn_SetDamageZoneActiveStatus");
static_assert(sizeof(FortPawn_SetDamageZoneActiveStatus) == 0x000002, "Wrong size on FortPawn_SetDamageZoneActiveStatus");
static_assert(offsetof(FortPawn_SetDamageZoneActiveStatus, Zone) == 0x000000, "Member 'FortPawn_SetDamageZoneActiveStatus::Zone' has a wrong offset!");
static_assert(offsetof(FortPawn_SetDamageZoneActiveStatus, bActive) == 0x000001, "Member 'FortPawn_SetDamageZoneActiveStatus::bActive' has a wrong offset!");

// Function FortniteGame.FortPawn.SetFNameBasedOnHitDirection
// 0x0034 (0x0034 - 0x0000)
struct FortPawn_SetFNameBasedOnHitDirection final
{
public:
	struct FVector                                HitDirection;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   NameResult;                                        // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameFront;                                         // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameBack;                                          // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameLeft;                                          // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameRight;                                         // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetFNameBasedOnHitDirection) == 0x000004, "Wrong alignment on FortPawn_SetFNameBasedOnHitDirection");
static_assert(sizeof(FortPawn_SetFNameBasedOnHitDirection) == 0x000034, "Wrong size on FortPawn_SetFNameBasedOnHitDirection");
static_assert(offsetof(FortPawn_SetFNameBasedOnHitDirection, HitDirection) == 0x000000, "Member 'FortPawn_SetFNameBasedOnHitDirection::HitDirection' has a wrong offset!");
static_assert(offsetof(FortPawn_SetFNameBasedOnHitDirection, NameResult) == 0x00000C, "Member 'FortPawn_SetFNameBasedOnHitDirection::NameResult' has a wrong offset!");
static_assert(offsetof(FortPawn_SetFNameBasedOnHitDirection, NameFront) == 0x000014, "Member 'FortPawn_SetFNameBasedOnHitDirection::NameFront' has a wrong offset!");
static_assert(offsetof(FortPawn_SetFNameBasedOnHitDirection, NameBack) == 0x00001C, "Member 'FortPawn_SetFNameBasedOnHitDirection::NameBack' has a wrong offset!");
static_assert(offsetof(FortPawn_SetFNameBasedOnHitDirection, NameLeft) == 0x000024, "Member 'FortPawn_SetFNameBasedOnHitDirection::NameLeft' has a wrong offset!");
static_assert(offsetof(FortPawn_SetFNameBasedOnHitDirection, NameRight) == 0x00002C, "Member 'FortPawn_SetFNameBasedOnHitDirection::NameRight' has a wrong offset!");

// Function FortniteGame.FortPawn.SetHealth
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_SetHealth final
{
public:
	float                                         NewHealthVal;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetHealth) == 0x000004, "Wrong alignment on FortPawn_SetHealth");
static_assert(sizeof(FortPawn_SetHealth) == 0x000004, "Wrong size on FortPawn_SetHealth");
static_assert(offsetof(FortPawn_SetHealth, NewHealthVal) == 0x000000, "Member 'FortPawn_SetHealth::NewHealthVal' has a wrong offset!");

// Function FortniteGame.FortPawn.SetHolsterWeapon
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_SetHolsterWeapon final
{
public:
	bool                                          bHolster;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetHolsterWeapon) == 0x000001, "Wrong alignment on FortPawn_SetHolsterWeapon");
static_assert(sizeof(FortPawn_SetHolsterWeapon) == 0x000001, "Wrong size on FortPawn_SetHolsterWeapon");
static_assert(offsetof(FortPawn_SetHolsterWeapon, bHolster) == 0x000000, "Member 'FortPawn_SetHolsterWeapon::bHolster' has a wrong offset!");

// Function FortniteGame.FortPawn.SetPawnAndControlRotation
// 0x000C (0x000C - 0x0000)
struct FortPawn_SetPawnAndControlRotation final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetPawnAndControlRotation) == 0x000004, "Wrong alignment on FortPawn_SetPawnAndControlRotation");
static_assert(sizeof(FortPawn_SetPawnAndControlRotation) == 0x00000C, "Wrong size on FortPawn_SetPawnAndControlRotation");
static_assert(offsetof(FortPawn_SetPawnAndControlRotation, NewRotation) == 0x000000, "Member 'FortPawn_SetPawnAndControlRotation::NewRotation' has a wrong offset!");

// Function FortniteGame.FortPawn.SetPawnVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_SetPawnVisibility final
{
public:
	bool                                          bNewHidden;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_SetPawnVisibility) == 0x000001, "Wrong alignment on FortPawn_SetPawnVisibility");
static_assert(sizeof(FortPawn_SetPawnVisibility) == 0x000001, "Wrong size on FortPawn_SetPawnVisibility");
static_assert(offsetof(FortPawn_SetPawnVisibility, bNewHidden) == 0x000000, "Member 'FortPawn_SetPawnVisibility::bNewHidden' has a wrong offset!");

// Function FortniteGame.FortPawn.StartPushMomentum
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_StartPushMomentum final
{
public:
	struct FVector                                NewPushMomentum;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_StartPushMomentum) == 0x000004, "Wrong alignment on FortPawn_StartPushMomentum");
static_assert(sizeof(FortPawn_StartPushMomentum) == 0x000010, "Wrong size on FortPawn_StartPushMomentum");
static_assert(offsetof(FortPawn_StartPushMomentum, NewPushMomentum) == 0x000000, "Member 'FortPawn_StartPushMomentum::NewPushMomentum' has a wrong offset!");
static_assert(offsetof(FortPawn_StartPushMomentum, Duration) == 0x00000C, "Member 'FortPawn_StartPushMomentum::Duration' has a wrong offset!");

// Function FortniteGame.FortPawn.StealFromActor
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_StealFromActor final
{
public:
	class AFortPawn*                              PawnToStealFrom;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_StealFromActor) == 0x000004, "Wrong alignment on FortPawn_StealFromActor");
static_assert(sizeof(FortPawn_StealFromActor) == 0x000008, "Wrong size on FortPawn_StealFromActor");
static_assert(offsetof(FortPawn_StealFromActor, PawnToStealFrom) == 0x000000, "Member 'FortPawn_StealFromActor::PawnToStealFrom' has a wrong offset!");
static_assert(offsetof(FortPawn_StealFromActor, ReturnValue) == 0x000004, "Member 'FortPawn_StealFromActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.TriggerFeedbackEvent
// 0x0014 (0x0014 - 0x0000)
struct FortPawn_TriggerFeedbackEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              InstigatorPawn;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Recipient;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverriddenDelay;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_TriggerFeedbackEvent) == 0x000004, "Wrong alignment on FortPawn_TriggerFeedbackEvent");
static_assert(sizeof(FortPawn_TriggerFeedbackEvent) == 0x000014, "Wrong size on FortPawn_TriggerFeedbackEvent");
static_assert(offsetof(FortPawn_TriggerFeedbackEvent, EventName) == 0x000000, "Member 'FortPawn_TriggerFeedbackEvent::EventName' has a wrong offset!");
static_assert(offsetof(FortPawn_TriggerFeedbackEvent, InstigatorPawn) == 0x000008, "Member 'FortPawn_TriggerFeedbackEvent::InstigatorPawn' has a wrong offset!");
static_assert(offsetof(FortPawn_TriggerFeedbackEvent, Recipient) == 0x00000C, "Member 'FortPawn_TriggerFeedbackEvent::Recipient' has a wrong offset!");
static_assert(offsetof(FortPawn_TriggerFeedbackEvent, OverriddenDelay) == 0x000010, "Member 'FortPawn_TriggerFeedbackEvent::OverriddenDelay' has a wrong offset!");

// Function FortniteGame.FortPawn.GetAbilityDecisionWindowTriggerTag
// 0x000C (0x000C - 0x0000)
struct FortPawn_GetAbilityDecisionWindowTriggerTag final
{
public:
	bool                                          bPrimaryInput;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetAbilityDecisionWindowTriggerTag) == 0x000004, "Wrong alignment on FortPawn_GetAbilityDecisionWindowTriggerTag");
static_assert(sizeof(FortPawn_GetAbilityDecisionWindowTriggerTag) == 0x00000C, "Wrong size on FortPawn_GetAbilityDecisionWindowTriggerTag");
static_assert(offsetof(FortPawn_GetAbilityDecisionWindowTriggerTag, bPrimaryInput) == 0x000000, "Member 'FortPawn_GetAbilityDecisionWindowTriggerTag::bPrimaryInput' has a wrong offset!");
static_assert(offsetof(FortPawn_GetAbilityDecisionWindowTriggerTag, ReturnValue) == 0x000004, "Member 'FortPawn_GetAbilityDecisionWindowTriggerTag::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetDamageZone
// 0x000C (0x000C - 0x0000)
struct FortPawn_GetDamageZone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDamageZone                               ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_GetDamageZone) == 0x000004, "Wrong alignment on FortPawn_GetDamageZone");
static_assert(sizeof(FortPawn_GetDamageZone) == 0x00000C, "Wrong size on FortPawn_GetDamageZone");
static_assert(offsetof(FortPawn_GetDamageZone, BoneName) == 0x000000, "Member 'FortPawn_GetDamageZone::BoneName' has a wrong offset!");
static_assert(offsetof(FortPawn_GetDamageZone, ReturnValue) == 0x000008, "Member 'FortPawn_GetDamageZone::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetDefaultTargetingOrigin
// 0x000C (0x000C - 0x0000)
struct FortPawn_GetDefaultTargetingOrigin final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetDefaultTargetingOrigin) == 0x000004, "Wrong alignment on FortPawn_GetDefaultTargetingOrigin");
static_assert(sizeof(FortPawn_GetDefaultTargetingOrigin) == 0x00000C, "Wrong size on FortPawn_GetDefaultTargetingOrigin");
static_assert(offsetof(FortPawn_GetDefaultTargetingOrigin, ReturnValue) == 0x000000, "Member 'FortPawn_GetDefaultTargetingOrigin::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetDefaultTargetingRotation
// 0x000C (0x000C - 0x0000)
struct FortPawn_GetDefaultTargetingRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetDefaultTargetingRotation) == 0x000004, "Wrong alignment on FortPawn_GetDefaultTargetingRotation");
static_assert(sizeof(FortPawn_GetDefaultTargetingRotation) == 0x00000C, "Wrong size on FortPawn_GetDefaultTargetingRotation");
static_assert(offsetof(FortPawn_GetDefaultTargetingRotation, ReturnValue) == 0x000000, "Member 'FortPawn_GetDefaultTargetingRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetEncounterInfo
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetEncounterInfo final
{
public:
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetEncounterInfo) == 0x000004, "Wrong alignment on FortPawn_GetEncounterInfo");
static_assert(sizeof(FortPawn_GetEncounterInfo) == 0x000004, "Wrong size on FortPawn_GetEncounterInfo");
static_assert(offsetof(FortPawn_GetEncounterInfo, ReturnValue) == 0x000000, "Member 'FortPawn_GetEncounterInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetHealth) == 0x000004, "Wrong alignment on FortPawn_GetHealth");
static_assert(sizeof(FortPawn_GetHealth) == 0x000004, "Wrong size on FortPawn_GetHealth");
static_assert(offsetof(FortPawn_GetHealth, ReturnValue) == 0x000000, "Member 'FortPawn_GetHealth::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetMaxHealth) == 0x000004, "Wrong alignment on FortPawn_GetMaxHealth");
static_assert(sizeof(FortPawn_GetMaxHealth) == 0x000004, "Wrong size on FortPawn_GetMaxHealth");
static_assert(offsetof(FortPawn_GetMaxHealth, ReturnValue) == 0x000000, "Member 'FortPawn_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetMaxShield
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetMaxShield final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetMaxShield) == 0x000004, "Wrong alignment on FortPawn_GetMaxShield");
static_assert(sizeof(FortPawn_GetMaxShield) == 0x000004, "Wrong size on FortPawn_GetMaxShield");
static_assert(offsetof(FortPawn_GetMaxShield, ReturnValue) == 0x000000, "Member 'FortPawn_GetMaxShield::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetMeleeComboCounter
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetMeleeComboCounter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetMeleeComboCounter) == 0x000004, "Wrong alignment on FortPawn_GetMeleeComboCounter");
static_assert(sizeof(FortPawn_GetMeleeComboCounter) == 0x000004, "Wrong size on FortPawn_GetMeleeComboCounter");
static_assert(offsetof(FortPawn_GetMeleeComboCounter, ReturnValue) == 0x000000, "Member 'FortPawn_GetMeleeComboCounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetMeleeRange
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetMeleeRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetMeleeRange) == 0x000004, "Wrong alignment on FortPawn_GetMeleeRange");
static_assert(sizeof(FortPawn_GetMeleeRange) == 0x000004, "Wrong size on FortPawn_GetMeleeRange");
static_assert(offsetof(FortPawn_GetMeleeRange, ReturnValue) == 0x000000, "Member 'FortPawn_GetMeleeRange::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetMeleeReticleStrikeAngle
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_GetMeleeReticleStrikeAngle final
{
public:
	bool                                          bPrimaryInput;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetMeleeReticleStrikeAngle) == 0x000004, "Wrong alignment on FortPawn_GetMeleeReticleStrikeAngle");
static_assert(sizeof(FortPawn_GetMeleeReticleStrikeAngle) == 0x000008, "Wrong size on FortPawn_GetMeleeReticleStrikeAngle");
static_assert(offsetof(FortPawn_GetMeleeReticleStrikeAngle, bPrimaryInput) == 0x000000, "Member 'FortPawn_GetMeleeReticleStrikeAngle::bPrimaryInput' has a wrong offset!");
static_assert(offsetof(FortPawn_GetMeleeReticleStrikeAngle, ReturnValue) == 0x000004, "Member 'FortPawn_GetMeleeReticleStrikeAngle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetMovementPredictionPosition
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_GetMovementPredictionPosition final
{
public:
	float                                         PredictionDeltaTime;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetMovementPredictionPosition) == 0x000004, "Wrong alignment on FortPawn_GetMovementPredictionPosition");
static_assert(sizeof(FortPawn_GetMovementPredictionPosition) == 0x000010, "Wrong size on FortPawn_GetMovementPredictionPosition");
static_assert(offsetof(FortPawn_GetMovementPredictionPosition, PredictionDeltaTime) == 0x000000, "Member 'FortPawn_GetMovementPredictionPosition::PredictionDeltaTime' has a wrong offset!");
static_assert(offsetof(FortPawn_GetMovementPredictionPosition, ReturnValue) == 0x000004, "Member 'FortPawn_GetMovementPredictionPosition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetShield
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_GetShield final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetShield) == 0x000004, "Wrong alignment on FortPawn_GetShield");
static_assert(sizeof(FortPawn_GetShield) == 0x000004, "Wrong size on FortPawn_GetShield");
static_assert(offsetof(FortPawn_GetShield, ReturnValue) == 0x000000, "Member 'FortPawn_GetShield::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.GetSphericalHitDirection
// 0x0014 (0x0014 - 0x0000)
struct FortPawn_GetSphericalHitDirection final
{
public:
	struct FVector                                HitDirection;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Azimuth;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Elevation;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetSphericalHitDirection) == 0x000004, "Wrong alignment on FortPawn_GetSphericalHitDirection");
static_assert(sizeof(FortPawn_GetSphericalHitDirection) == 0x000014, "Wrong size on FortPawn_GetSphericalHitDirection");
static_assert(offsetof(FortPawn_GetSphericalHitDirection, HitDirection) == 0x000000, "Member 'FortPawn_GetSphericalHitDirection::HitDirection' has a wrong offset!");
static_assert(offsetof(FortPawn_GetSphericalHitDirection, Azimuth) == 0x00000C, "Member 'FortPawn_GetSphericalHitDirection::Azimuth' has a wrong offset!");
static_assert(offsetof(FortPawn_GetSphericalHitDirection, Elevation) == 0x000010, "Member 'FortPawn_GetSphericalHitDirection::Elevation' has a wrong offset!");

// Function FortniteGame.FortPawn.GetTargetingTransform
// 0x0040 (0x0040 - 0x0000)
struct FortPawn_GetTargetingTransform final
{
public:
	EFortAbilityTargetingSource                   Source;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGameplayAbility*                   SourceAbility;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_GetTargetingTransform) == 0x000010, "Wrong alignment on FortPawn_GetTargetingTransform");
static_assert(sizeof(FortPawn_GetTargetingTransform) == 0x000040, "Wrong size on FortPawn_GetTargetingTransform");
static_assert(offsetof(FortPawn_GetTargetingTransform, Source) == 0x000000, "Member 'FortPawn_GetTargetingTransform::Source' has a wrong offset!");
static_assert(offsetof(FortPawn_GetTargetingTransform, SourceAbility) == 0x000004, "Member 'FortPawn_GetTargetingTransform::SourceAbility' has a wrong offset!");
static_assert(offsetof(FortPawn_GetTargetingTransform, ReturnValue) == 0x000010, "Member 'FortPawn_GetTargetingTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.HasCurrentMontage
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_HasCurrentMontage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_HasCurrentMontage) == 0x000001, "Wrong alignment on FortPawn_HasCurrentMontage");
static_assert(sizeof(FortPawn_HasCurrentMontage) == 0x000001, "Wrong size on FortPawn_HasCurrentMontage");
static_assert(offsetof(FortPawn_HasCurrentMontage, ReturnValue) == 0x000000, "Member 'FortPawn_HasCurrentMontage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.IsDamageZoneActive
// 0x0002 (0x0002 - 0x0000)
struct FortPawn_IsDamageZoneActive final
{
public:
	EFortDamageZone                               Zone;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_IsDamageZoneActive) == 0x000001, "Wrong alignment on FortPawn_IsDamageZoneActive");
static_assert(sizeof(FortPawn_IsDamageZoneActive) == 0x000002, "Wrong size on FortPawn_IsDamageZoneActive");
static_assert(offsetof(FortPawn_IsDamageZoneActive, Zone) == 0x000000, "Member 'FortPawn_IsDamageZoneActive::Zone' has a wrong offset!");
static_assert(offsetof(FortPawn_IsDamageZoneActive, ReturnValue) == 0x000001, "Member 'FortPawn_IsDamageZoneActive::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.IsDead
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_IsDead) == 0x000001, "Wrong alignment on FortPawn_IsDead");
static_assert(sizeof(FortPawn_IsDead) == 0x000001, "Wrong size on FortPawn_IsDead");
static_assert(offsetof(FortPawn_IsDead, ReturnValue) == 0x000000, "Member 'FortPawn_IsDead::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.IsFrontalHit
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_IsFrontalHit final
{
public:
	struct FVector                                HitDirection;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_IsFrontalHit) == 0x000004, "Wrong alignment on FortPawn_IsFrontalHit");
static_assert(sizeof(FortPawn_IsFrontalHit) == 0x000010, "Wrong size on FortPawn_IsFrontalHit");
static_assert(offsetof(FortPawn_IsFrontalHit, HitDirection) == 0x000000, "Member 'FortPawn_IsFrontalHit::HitDirection' has a wrong offset!");
static_assert(offsetof(FortPawn_IsFrontalHit, ReturnValue) == 0x00000C, "Member 'FortPawn_IsFrontalHit::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn.IsWeaponHolstered
// 0x0001 (0x0001 - 0x0000)
struct FortPawn_IsWeaponHolstered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_IsWeaponHolstered) == 0x000001, "Wrong alignment on FortPawn_IsWeaponHolstered");
static_assert(sizeof(FortPawn_IsWeaponHolstered) == 0x000001, "Wrong size on FortPawn_IsWeaponHolstered");
static_assert(offsetof(FortPawn_IsWeaponHolstered, ReturnValue) == 0x000000, "Member 'FortPawn_IsWeaponHolstered::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCarriedObjectHolderInterface.OnCarriedObjectAttach
// 0x0004 (0x0004 - 0x0000)
struct FortCarriedObjectHolderInterface_OnCarriedObjectAttach final
{
public:
	class AActor*                                 AttachedObject;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCarriedObjectHolderInterface_OnCarriedObjectAttach) == 0x000004, "Wrong alignment on FortCarriedObjectHolderInterface_OnCarriedObjectAttach");
static_assert(sizeof(FortCarriedObjectHolderInterface_OnCarriedObjectAttach) == 0x000004, "Wrong size on FortCarriedObjectHolderInterface_OnCarriedObjectAttach");
static_assert(offsetof(FortCarriedObjectHolderInterface_OnCarriedObjectAttach, AttachedObject) == 0x000000, "Member 'FortCarriedObjectHolderInterface_OnCarriedObjectAttach::AttachedObject' has a wrong offset!");

// Function FortniteGame.FortCarriedObjectHolderInterface.OnCarriedObjectDetach
// 0x0004 (0x0004 - 0x0000)
struct FortCarriedObjectHolderInterface_OnCarriedObjectDetach final
{
public:
	class AActor*                                 DetachedObject;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCarriedObjectHolderInterface_OnCarriedObjectDetach) == 0x000004, "Wrong alignment on FortCarriedObjectHolderInterface_OnCarriedObjectDetach");
static_assert(sizeof(FortCarriedObjectHolderInterface_OnCarriedObjectDetach) == 0x000004, "Wrong size on FortCarriedObjectHolderInterface_OnCarriedObjectDetach");
static_assert(offsetof(FortCarriedObjectHolderInterface_OnCarriedObjectDetach, DetachedObject) == 0x000000, "Member 'FortCarriedObjectHolderInterface_OnCarriedObjectDetach::DetachedObject' has a wrong offset!");

// Function FortniteGame.FortCarriedObjectHolderInterface.CanHoldObject
// 0x0008 (0x0008 - 0x0000)
struct FortCarriedObjectHolderInterface_CanHoldObject final
{
public:
	class AActor*                                 CarriableObject;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCarriedObjectHolderInterface_CanHoldObject) == 0x000004, "Wrong alignment on FortCarriedObjectHolderInterface_CanHoldObject");
static_assert(sizeof(FortCarriedObjectHolderInterface_CanHoldObject) == 0x000008, "Wrong size on FortCarriedObjectHolderInterface_CanHoldObject");
static_assert(offsetof(FortCarriedObjectHolderInterface_CanHoldObject, CarriableObject) == 0x000000, "Member 'FortCarriedObjectHolderInterface_CanHoldObject::CarriableObject' has a wrong offset!");
static_assert(offsetof(FortCarriedObjectHolderInterface_CanHoldObject, ReturnValue) == 0x000004, "Member 'FortCarriedObjectHolderInterface_CanHoldObject::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCarriedObjectHolderInterface.GetAttachmentComponent
// 0x000C (0x000C - 0x0000)
struct FortCarriedObjectHolderInterface_GetAttachmentComponent final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnValue;                                       // 0x0008(0x0004)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCarriedObjectHolderInterface_GetAttachmentComponent) == 0x000004, "Wrong alignment on FortCarriedObjectHolderInterface_GetAttachmentComponent");
static_assert(sizeof(FortCarriedObjectHolderInterface_GetAttachmentComponent) == 0x00000C, "Wrong size on FortCarriedObjectHolderInterface_GetAttachmentComponent");
static_assert(offsetof(FortCarriedObjectHolderInterface_GetAttachmentComponent, SocketName) == 0x000000, "Member 'FortCarriedObjectHolderInterface_GetAttachmentComponent::SocketName' has a wrong offset!");
static_assert(offsetof(FortCarriedObjectHolderInterface_GetAttachmentComponent, ReturnValue) == 0x000008, "Member 'FortCarriedObjectHolderInterface_GetAttachmentComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCarriedObjectHolderInterface.GetCarriedObjectAttachmentInfo
// 0x0024 (0x0024 - 0x0000)
struct FortCarriedObjectHolderInterface_GetCarriedObjectAttachmentInfo final
{
public:
	struct FCarriedObjectAttachmentInfo           OutAttachInfo;                                     // 0x0000(0x0024)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCarriedObjectHolderInterface_GetCarriedObjectAttachmentInfo) == 0x000004, "Wrong alignment on FortCarriedObjectHolderInterface_GetCarriedObjectAttachmentInfo");
static_assert(sizeof(FortCarriedObjectHolderInterface_GetCarriedObjectAttachmentInfo) == 0x000024, "Wrong size on FortCarriedObjectHolderInterface_GetCarriedObjectAttachmentInfo");
static_assert(offsetof(FortCarriedObjectHolderInterface_GetCarriedObjectAttachmentInfo, OutAttachInfo) == 0x000000, "Member 'FortCarriedObjectHolderInterface_GetCarriedObjectAttachmentInfo::OutAttachInfo' has a wrong offset!");

// Function FortniteGame.FortAIDirector.ShouldSpawnGuardians
// 0x0001 (0x0001 - 0x0000)
struct FortAIDirector_ShouldSpawnGuardians final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_ShouldSpawnGuardians) == 0x000001, "Wrong alignment on FortAIDirector_ShouldSpawnGuardians");
static_assert(sizeof(FortAIDirector_ShouldSpawnGuardians) == 0x000001, "Wrong size on FortAIDirector_ShouldSpawnGuardians");
static_assert(offsetof(FortAIDirector_ShouldSpawnGuardians, ReturnValue) == 0x000000, "Member 'FortAIDirector_ShouldSpawnGuardians::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.GetClosestRift
// 0x0018 (0x0018 - 0x0000)
struct FortAIDirector_GetClosestRift final
{
public:
	struct FVector                                TestPosition;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinDistance;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingRift*                          ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_GetClosestRift) == 0x000004, "Wrong alignment on FortAIDirector_GetClosestRift");
static_assert(sizeof(FortAIDirector_GetClosestRift) == 0x000018, "Wrong size on FortAIDirector_GetClosestRift");
static_assert(offsetof(FortAIDirector_GetClosestRift, TestPosition) == 0x000000, "Member 'FortAIDirector_GetClosestRift::TestPosition' has a wrong offset!");
static_assert(offsetof(FortAIDirector_GetClosestRift, MinDistance) == 0x00000C, "Member 'FortAIDirector_GetClosestRift::MinDistance' has a wrong offset!");
static_assert(offsetof(FortAIDirector_GetClosestRift, MaxDistance) == 0x000010, "Member 'FortAIDirector_GetClosestRift::MaxDistance' has a wrong offset!");
static_assert(offsetof(FortAIDirector_GetClosestRift, ReturnValue) == 0x000014, "Member 'FortAIDirector_GetClosestRift::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.GetNumPlayers
// 0x0004 (0x0004 - 0x0000)
struct FortAIDirector_GetNumPlayers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_GetNumPlayers) == 0x000004, "Wrong alignment on FortAIDirector_GetNumPlayers");
static_assert(sizeof(FortAIDirector_GetNumPlayers) == 0x000004, "Wrong size on FortAIDirector_GetNumPlayers");
static_assert(offsetof(FortAIDirector_GetNumPlayers, ReturnValue) == 0x000000, "Member 'FortAIDirector_GetNumPlayers::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.OnDayPhaseChanged
// 0x0003 (0x0003 - 0x0000)
struct FortAIDirector_OnDayPhaseChanged final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_OnDayPhaseChanged) == 0x000001, "Wrong alignment on FortAIDirector_OnDayPhaseChanged");
static_assert(sizeof(FortAIDirector_OnDayPhaseChanged) == 0x000003, "Wrong size on FortAIDirector_OnDayPhaseChanged");
static_assert(offsetof(FortAIDirector_OnDayPhaseChanged, CurrentDayPhase) == 0x000000, "Member 'FortAIDirector_OnDayPhaseChanged::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(FortAIDirector_OnDayPhaseChanged, PreviousDayPhase) == 0x000001, "Member 'FortAIDirector_OnDayPhaseChanged::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(FortAIDirector_OnDayPhaseChanged, bAtCreation) == 0x000002, "Member 'FortAIDirector_OnDayPhaseChanged::bAtCreation' has a wrong offset!");

// Function FortniteGame.FortAIDirector.OnPawnDied
// 0x0004 (0x0004 - 0x0000)
struct FortAIDirector_OnPawnDied final
{
public:
	class AFortAIPawn*                            KilledPawn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_OnPawnDied) == 0x000004, "Wrong alignment on FortAIDirector_OnPawnDied");
static_assert(sizeof(FortAIDirector_OnPawnDied) == 0x000004, "Wrong size on FortAIDirector_OnPawnDied");
static_assert(offsetof(FortAIDirector_OnPawnDied, KilledPawn) == 0x000000, "Member 'FortAIDirector_OnPawnDied::KilledPawn' has a wrong offset!");

// Function FortniteGame.FortAIDirector.OnPlayerDied
// 0x0004 (0x0004 - 0x0000)
struct FortAIDirector_OnPlayerDied final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_OnPlayerDied) == 0x000004, "Wrong alignment on FortAIDirector_OnPlayerDied");
static_assert(sizeof(FortAIDirector_OnPlayerDied) == 0x000004, "Wrong size on FortAIDirector_OnPlayerDied");
static_assert(offsetof(FortAIDirector_OnPlayerDied, PlayerPawn) == 0x000000, "Member 'FortAIDirector_OnPlayerDied::PlayerPawn' has a wrong offset!");

// Function FortniteGame.FortAIDirector.OnPlayerSpawn
// 0x0004 (0x0004 - 0x0000)
struct FortAIDirector_OnPlayerSpawn final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_OnPlayerSpawn) == 0x000004, "Wrong alignment on FortAIDirector_OnPlayerSpawn");
static_assert(sizeof(FortAIDirector_OnPlayerSpawn) == 0x000004, "Wrong size on FortAIDirector_OnPlayerSpawn");
static_assert(offsetof(FortAIDirector_OnPlayerSpawn, PlayerPawn) == 0x000000, "Member 'FortAIDirector_OnPlayerSpawn::PlayerPawn' has a wrong offset!");

// Function FortniteGame.FortAIDirector.OnReadyToSpawnGuardians
// 0x000C (0x000C - 0x0000)
struct FortAIDirector_OnReadyToSpawnGuardians final
{
public:
	TArray<class ABuildingContainer*>             BuildingContainersToGuard;                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_OnReadyToSpawnGuardians) == 0x000004, "Wrong alignment on FortAIDirector_OnReadyToSpawnGuardians");
static_assert(sizeof(FortAIDirector_OnReadyToSpawnGuardians) == 0x00000C, "Wrong size on FortAIDirector_OnReadyToSpawnGuardians");
static_assert(offsetof(FortAIDirector_OnReadyToSpawnGuardians, BuildingContainersToGuard) == 0x000000, "Member 'FortAIDirector_OnReadyToSpawnGuardians::BuildingContainersToGuard' has a wrong offset!");

// Function FortniteGame.FortAIDirector.PostDayPhaseChanged
// 0x0003 (0x0003 - 0x0000)
struct FortAIDirector_PostDayPhaseChanged final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_PostDayPhaseChanged) == 0x000001, "Wrong alignment on FortAIDirector_PostDayPhaseChanged");
static_assert(sizeof(FortAIDirector_PostDayPhaseChanged) == 0x000003, "Wrong size on FortAIDirector_PostDayPhaseChanged");
static_assert(offsetof(FortAIDirector_PostDayPhaseChanged, CurrentDayPhase) == 0x000000, "Member 'FortAIDirector_PostDayPhaseChanged::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(FortAIDirector_PostDayPhaseChanged, PreviousDayPhase) == 0x000001, "Member 'FortAIDirector_PostDayPhaseChanged::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(FortAIDirector_PostDayPhaseChanged, bAtCreation) == 0x000002, "Member 'FortAIDirector_PostDayPhaseChanged::bAtCreation' has a wrong offset!");

// Function FortniteGame.FortAIDirector.ReceivePawnSpawned
// 0x0004 (0x0004 - 0x0000)
struct FortAIDirector_ReceivePawnSpawned final
{
public:
	class AFortPawn*                              SpawnedPawn;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_ReceivePawnSpawned) == 0x000004, "Wrong alignment on FortAIDirector_ReceivePawnSpawned");
static_assert(sizeof(FortAIDirector_ReceivePawnSpawned) == 0x000004, "Wrong size on FortAIDirector_ReceivePawnSpawned");
static_assert(offsetof(FortAIDirector_ReceivePawnSpawned, SpawnedPawn) == 0x000000, "Member 'FortAIDirector_ReceivePawnSpawned::SpawnedPawn' has a wrong offset!");

// Function FortniteGame.FortAIDirector.RegisterPatrolWard
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirector_RegisterPatrolWard final
{
public:
	TScriptInterface<class IFortPatrolWardInterface> PatrolWard;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_RegisterPatrolWard) == 0x000004, "Wrong alignment on FortAIDirector_RegisterPatrolWard");
static_assert(sizeof(FortAIDirector_RegisterPatrolWard) == 0x000008, "Wrong size on FortAIDirector_RegisterPatrolWard");
static_assert(offsetof(FortAIDirector_RegisterPatrolWard, PatrolWard) == 0x000000, "Member 'FortAIDirector_RegisterPatrolWard::PatrolWard' has a wrong offset!");

// Function FortniteGame.FortAIDirector.UnregisterPatrolWard
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirector_UnregisterPatrolWard final
{
public:
	TScriptInterface<class IFortPatrolWardInterface> PatrolWard;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirector_UnregisterPatrolWard) == 0x000004, "Wrong alignment on FortAIDirector_UnregisterPatrolWard");
static_assert(sizeof(FortAIDirector_UnregisterPatrolWard) == 0x000008, "Wrong size on FortAIDirector_UnregisterPatrolWard");
static_assert(offsetof(FortAIDirector_UnregisterPatrolWard, PatrolWard) == 0x000000, "Member 'FortAIDirector_UnregisterPatrolWard::PatrolWard' has a wrong offset!");

// Function FortniteGame.FortAIDirector.IsAnyActiveEncounterRelevantToPlayer
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirector_IsAnyActiveEncounterRelevantToPlayer final
{
public:
	class AFortPlayerPawn*                        Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsAnyActiveEncounterRelevantToPlayer) == 0x000004, "Wrong alignment on FortAIDirector_IsAnyActiveEncounterRelevantToPlayer");
static_assert(sizeof(FortAIDirector_IsAnyActiveEncounterRelevantToPlayer) == 0x000008, "Wrong size on FortAIDirector_IsAnyActiveEncounterRelevantToPlayer");
static_assert(offsetof(FortAIDirector_IsAnyActiveEncounterRelevantToPlayer, Player) == 0x000000, "Member 'FortAIDirector_IsAnyActiveEncounterRelevantToPlayer::Player' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyActiveEncounterRelevantToPlayer, ReturnValue) == 0x000004, "Member 'FortAIDirector_IsAnyActiveEncounterRelevantToPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.IsAnyAIRelevantToPlayer
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirector_IsAnyAIRelevantToPlayer final
{
public:
	class AFortPlayerPawn*                        Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsAnyAIRelevantToPlayer) == 0x000004, "Wrong alignment on FortAIDirector_IsAnyAIRelevantToPlayer");
static_assert(sizeof(FortAIDirector_IsAnyAIRelevantToPlayer) == 0x000008, "Wrong size on FortAIDirector_IsAnyAIRelevantToPlayer");
static_assert(offsetof(FortAIDirector_IsAnyAIRelevantToPlayer, Player) == 0x000000, "Member 'FortAIDirector_IsAnyAIRelevantToPlayer::Player' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyAIRelevantToPlayer, ReturnValue) == 0x000004, "Member 'FortAIDirector_IsAnyAIRelevantToPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.IsAnyEncounterGoalWithinDistanceOfPoint
// 0x0014 (0x0014 - 0x0000)
struct FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyActiveEncounters;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint) == 0x000004, "Wrong alignment on FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint");
static_assert(sizeof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint) == 0x000014, "Wrong size on FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint");
static_assert(offsetof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint, Point) == 0x000000, "Member 'FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint::Point' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint, Distance) == 0x00000C, "Member 'FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint::Distance' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint, bOnlyActiveEncounters) == 0x000010, "Member 'FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint::bOnlyActiveEncounters' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint, ReturnValue) == 0x000011, "Member 'FortAIDirector_IsAnyEncounterGoalWithinDistanceOfPoint::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.IsLineTooCloseToPatrolWards
// 0x001C (0x001C - 0x0000)
struct FortAIDirector_IsLineTooCloseToPatrolWards final
{
public:
	struct FVector                                LineStart;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LineEnd;                                           // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsLineTooCloseToPatrolWards) == 0x000004, "Wrong alignment on FortAIDirector_IsLineTooCloseToPatrolWards");
static_assert(sizeof(FortAIDirector_IsLineTooCloseToPatrolWards) == 0x00001C, "Wrong size on FortAIDirector_IsLineTooCloseToPatrolWards");
static_assert(offsetof(FortAIDirector_IsLineTooCloseToPatrolWards, LineStart) == 0x000000, "Member 'FortAIDirector_IsLineTooCloseToPatrolWards::LineStart' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsLineTooCloseToPatrolWards, LineEnd) == 0x00000C, "Member 'FortAIDirector_IsLineTooCloseToPatrolWards::LineEnd' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsLineTooCloseToPatrolWards, ReturnValue) == 0x000018, "Member 'FortAIDirector_IsLineTooCloseToPatrolWards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirector.IsPointTooCloseToPatrolWards
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirector_IsPointTooCloseToPatrolWards final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EWardAffectType                               WardEffectTypeFilter;                              // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIDirector_IsPointTooCloseToPatrolWards) == 0x000004, "Wrong alignment on FortAIDirector_IsPointTooCloseToPatrolWards");
static_assert(sizeof(FortAIDirector_IsPointTooCloseToPatrolWards) == 0x000010, "Wrong size on FortAIDirector_IsPointTooCloseToPatrolWards");
static_assert(offsetof(FortAIDirector_IsPointTooCloseToPatrolWards, Point) == 0x000000, "Member 'FortAIDirector_IsPointTooCloseToPatrolWards::Point' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsPointTooCloseToPatrolWards, WardEffectTypeFilter) == 0x00000C, "Member 'FortAIDirector_IsPointTooCloseToPatrolWards::WardEffectTypeFilter' has a wrong offset!");
static_assert(offsetof(FortAIDirector_IsPointTooCloseToPatrolWards, ReturnValue) == 0x00000D, "Member 'FortAIDirector_IsPointTooCloseToPatrolWards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetGroundSpeedForUrgency
// 0x000C (0x000C - 0x0000)
struct FortAIPawn_GetGroundSpeedForUrgency final
{
public:
	class AFortAIPawn*                            FortAIPawn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMovementUrgency                          Urgency;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetGroundSpeedForUrgency) == 0x000004, "Wrong alignment on FortAIPawn_GetGroundSpeedForUrgency");
static_assert(sizeof(FortAIPawn_GetGroundSpeedForUrgency) == 0x00000C, "Wrong size on FortAIPawn_GetGroundSpeedForUrgency");
static_assert(offsetof(FortAIPawn_GetGroundSpeedForUrgency, FortAIPawn) == 0x000000, "Member 'FortAIPawn_GetGroundSpeedForUrgency::FortAIPawn' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetGroundSpeedForUrgency, Urgency) == 0x000004, "Member 'FortAIPawn_GetGroundSpeedForUrgency::Urgency' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetGroundSpeedForUrgency, ReturnValue) == 0x000008, "Member 'FortAIPawn_GetGroundSpeedForUrgency::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetMovementStyle
// 0x0008 (0x0008 - 0x0000)
struct FortAIPawn_GetMovementStyle final
{
public:
	const class AFortAIPawn*                      FortAIPawn;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMovementStyle                            ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIPawn_GetMovementStyle) == 0x000004, "Wrong alignment on FortAIPawn_GetMovementStyle");
static_assert(sizeof(FortAIPawn_GetMovementStyle) == 0x000008, "Wrong size on FortAIPawn_GetMovementStyle");
static_assert(offsetof(FortAIPawn_GetMovementStyle, FortAIPawn) == 0x000000, "Member 'FortAIPawn_GetMovementStyle::FortAIPawn' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetMovementStyle, ReturnValue) == 0x000004, "Member 'FortAIPawn_GetMovementStyle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetMovementUrgency
// 0x0008 (0x0008 - 0x0000)
struct FortAIPawn_GetMovementUrgency final
{
public:
	class AFortAIPawn*                            FortAIPawn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMovementUrgency                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIPawn_GetMovementUrgency) == 0x000004, "Wrong alignment on FortAIPawn_GetMovementUrgency");
static_assert(sizeof(FortAIPawn_GetMovementUrgency) == 0x000008, "Wrong size on FortAIPawn_GetMovementUrgency");
static_assert(offsetof(FortAIPawn_GetMovementUrgency, FortAIPawn) == 0x000000, "Member 'FortAIPawn_GetMovementUrgency::FortAIPawn' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetMovementUrgency, ReturnValue) == 0x000004, "Member 'FortAIPawn_GetMovementUrgency::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.AddFortAbilitySet
// 0x0004 (0x0004 - 0x0000)
struct FortAIPawn_AddFortAbilitySet final
{
public:
	class UFortAbilitySet*                        FortAbilitySet;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_AddFortAbilitySet) == 0x000004, "Wrong alignment on FortAIPawn_AddFortAbilitySet");
static_assert(sizeof(FortAIPawn_AddFortAbilitySet) == 0x000004, "Wrong size on FortAIPawn_AddFortAbilitySet");
static_assert(offsetof(FortAIPawn_AddFortAbilitySet, FortAbilitySet) == 0x000000, "Member 'FortAIPawn_AddFortAbilitySet::FortAbilitySet' has a wrong offset!");

// Function FortniteGame.FortAIPawn.HandleFailedToReachGoalState
// 0x0004 (0x0004 - 0x0000)
struct FortAIPawn_HandleFailedToReachGoalState final
{
public:
	const class AActor*                           GoalActor;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_HandleFailedToReachGoalState) == 0x000004, "Wrong alignment on FortAIPawn_HandleFailedToReachGoalState");
static_assert(sizeof(FortAIPawn_HandleFailedToReachGoalState) == 0x000004, "Wrong size on FortAIPawn_HandleFailedToReachGoalState");
static_assert(offsetof(FortAIPawn_HandleFailedToReachGoalState, GoalActor) == 0x000000, "Member 'FortAIPawn_HandleFailedToReachGoalState::GoalActor' has a wrong offset!");

// Function FortniteGame.FortAIPawn.HandleReachedGoalState
// 0x0004 (0x0004 - 0x0000)
struct FortAIPawn_HandleReachedGoalState final
{
public:
	const class AActor*                           GoalActor;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_HandleReachedGoalState) == 0x000004, "Wrong alignment on FortAIPawn_HandleReachedGoalState");
static_assert(sizeof(FortAIPawn_HandleReachedGoalState) == 0x000004, "Wrong size on FortAIPawn_HandleReachedGoalState");
static_assert(offsetof(FortAIPawn_HandleReachedGoalState, GoalActor) == 0x000000, "Member 'FortAIPawn_HandleReachedGoalState::GoalActor' has a wrong offset!");

// Function FortniteGame.FortAIPawn.HasStolenItem
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_HasStolenItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_HasStolenItem) == 0x000001, "Wrong alignment on FortAIPawn_HasStolenItem");
static_assert(sizeof(FortAIPawn_HasStolenItem) == 0x000001, "Wrong size on FortAIPawn_HasStolenItem");
static_assert(offsetof(FortAIPawn_HasStolenItem, ReturnValue) == 0x000000, "Member 'FortAIPawn_HasStolenItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.IsValidNavigationLocation
// 0x0010 (0x0010 - 0x0000)
struct FortAIPawn_IsValidNavigationLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIPawn_IsValidNavigationLocation) == 0x000004, "Wrong alignment on FortAIPawn_IsValidNavigationLocation");
static_assert(sizeof(FortAIPawn_IsValidNavigationLocation) == 0x000010, "Wrong size on FortAIPawn_IsValidNavigationLocation");
static_assert(offsetof(FortAIPawn_IsValidNavigationLocation, Location) == 0x000000, "Member 'FortAIPawn_IsValidNavigationLocation::Location' has a wrong offset!");
static_assert(offsetof(FortAIPawn_IsValidNavigationLocation, ReturnValue) == 0x00000C, "Member 'FortAIPawn_IsValidNavigationLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.OnDetermineProximateState
// 0x0004 (0x0004 - 0x0000)
struct FortAIPawn_OnDetermineProximateState final
{
public:
	const class AActor*                           GoalActor;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_OnDetermineProximateState) == 0x000004, "Wrong alignment on FortAIPawn_OnDetermineProximateState");
static_assert(sizeof(FortAIPawn_OnDetermineProximateState) == 0x000004, "Wrong size on FortAIPawn_OnDetermineProximateState");
static_assert(offsetof(FortAIPawn_OnDetermineProximateState, GoalActor) == 0x000000, "Member 'FortAIPawn_OnDetermineProximateState::GoalActor' has a wrong offset!");

// Function FortniteGame.FortAIPawn.OnSleepingAIsFloorBuildingActorDied
// 0x0034 (0x0034 - 0x0000)
struct FortAIPawn_OnSleepingAIsFloorBuildingActorDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied) == 0x000004, "Wrong alignment on FortAIPawn_OnSleepingAIsFloorBuildingActorDied");
static_assert(sizeof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied) == 0x000034, "Wrong size on FortAIPawn_OnSleepingAIsFloorBuildingActorDied");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, DamagedActor) == 0x000000, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, Damage) == 0x000004, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::Damage' has a wrong offset!");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, InstigatedBy) == 0x000008, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, DamageCauser) == 0x00000C, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, HitLocation) == 0x000010, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, FHitComponent) == 0x00001C, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, BoneName) == 0x000020, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortAIPawn_OnSleepingAIsFloorBuildingActorDied, Momentum) == 0x000028, "Member 'FortAIPawn_OnSleepingAIsFloorBuildingActorDied::Momentum' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetAIType
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_SetAIType final
{
public:
	EFortressAIType                               InAIType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetAIType) == 0x000001, "Wrong alignment on FortAIPawn_SetAIType");
static_assert(sizeof(FortAIPawn_SetAIType) == 0x000001, "Wrong size on FortAIPawn_SetAIType");
static_assert(offsetof(FortAIPawn_SetAIType, InAIType) == 0x000000, "Member 'FortAIPawn_SetAIType::InAIType' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetEncounterInfo
// 0x0004 (0x0004 - 0x0000)
struct FortAIPawn_SetEncounterInfo final
{
public:
	class UFortAIEncounterInfo*                   InEncounterInfo;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetEncounterInfo) == 0x000004, "Wrong alignment on FortAIPawn_SetEncounterInfo");
static_assert(sizeof(FortAIPawn_SetEncounterInfo) == 0x000004, "Wrong size on FortAIPawn_SetEncounterInfo");
static_assert(offsetof(FortAIPawn_SetEncounterInfo, InEncounterInfo) == 0x000000, "Member 'FortAIPawn_SetEncounterInfo::InEncounterInfo' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetEyeColor
// 0x0014 (0x0014 - 0x0000)
struct FortAIPawn_SetEyeColor final
{
public:
	struct FLinearColor                           NewEyeColor;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         NewEyeBrightness;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetEyeColor) == 0x000004, "Wrong alignment on FortAIPawn_SetEyeColor");
static_assert(sizeof(FortAIPawn_SetEyeColor) == 0x000014, "Wrong size on FortAIPawn_SetEyeColor");
static_assert(offsetof(FortAIPawn_SetEyeColor, NewEyeColor) == 0x000000, "Member 'FortAIPawn_SetEyeColor::NewEyeColor' has a wrong offset!");
static_assert(offsetof(FortAIPawn_SetEyeColor, NewEyeBrightness) == 0x000010, "Member 'FortAIPawn_SetEyeColor::NewEyeBrightness' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetIsCharging
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_SetIsCharging final
{
public:
	bool                                          bNewIsCharging;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetIsCharging) == 0x000001, "Wrong alignment on FortAIPawn_SetIsCharging");
static_assert(sizeof(FortAIPawn_SetIsCharging) == 0x000001, "Wrong size on FortAIPawn_SetIsCharging");
static_assert(offsetof(FortAIPawn_SetIsCharging, bNewIsCharging) == 0x000000, "Member 'FortAIPawn_SetIsCharging::bNewIsCharging' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetMovementUrgency
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_SetMovementUrgency final
{
public:
	EFortMovementUrgency                          Urgency;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetMovementUrgency) == 0x000001, "Wrong alignment on FortAIPawn_SetMovementUrgency");
static_assert(sizeof(FortAIPawn_SetMovementUrgency) == 0x000001, "Wrong size on FortAIPawn_SetMovementUrgency");
static_assert(offsetof(FortAIPawn_SetMovementUrgency, Urgency) == 0x000000, "Member 'FortAIPawn_SetMovementUrgency::Urgency' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetRequiresNormalLOD
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_SetRequiresNormalLOD final
{
public:
	bool                                          bRequiresNormalLOD_0;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetRequiresNormalLOD) == 0x000001, "Wrong alignment on FortAIPawn_SetRequiresNormalLOD");
static_assert(sizeof(FortAIPawn_SetRequiresNormalLOD) == 0x000001, "Wrong size on FortAIPawn_SetRequiresNormalLOD");
static_assert(offsetof(FortAIPawn_SetRequiresNormalLOD, bRequiresNormalLOD_0) == 0x000000, "Member 'FortAIPawn_SetRequiresNormalLOD::bRequiresNormalLOD_0' has a wrong offset!");

// Function FortniteGame.FortAIPawn.SetSkinColor
// 0x0014 (0x0014 - 0x0000)
struct FortAIPawn_SetSkinColor final
{
public:
	struct FLinearColor                           NewSkinColor;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         NewSkinBrightness;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_SetSkinColor) == 0x000004, "Wrong alignment on FortAIPawn_SetSkinColor");
static_assert(sizeof(FortAIPawn_SetSkinColor) == 0x000014, "Wrong size on FortAIPawn_SetSkinColor");
static_assert(offsetof(FortAIPawn_SetSkinColor, NewSkinColor) == 0x000000, "Member 'FortAIPawn_SetSkinColor::NewSkinColor' has a wrong offset!");
static_assert(offsetof(FortAIPawn_SetSkinColor, NewSkinBrightness) == 0x000010, "Member 'FortAIPawn_SetSkinColor::NewSkinBrightness' has a wrong offset!");

// Function FortniteGame.FortAIPawn.CanOpenDoors
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_CanOpenDoors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_CanOpenDoors) == 0x000001, "Wrong alignment on FortAIPawn_CanOpenDoors");
static_assert(sizeof(FortAIPawn_CanOpenDoors) == 0x000001, "Wrong size on FortAIPawn_CanOpenDoors");
static_assert(offsetof(FortAIPawn_CanOpenDoors, ReturnValue) == 0x000000, "Member 'FortAIPawn_CanOpenDoors::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetImpactPhysicalSurfaceEffect
// 0x0084 (0x0084 - 0x0000)
struct FortAIPawn_GetImpactPhysicalSurfaceEffect final
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ReturnValue;                                       // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetImpactPhysicalSurfaceEffect) == 0x000004, "Wrong alignment on FortAIPawn_GetImpactPhysicalSurfaceEffect");
static_assert(sizeof(FortAIPawn_GetImpactPhysicalSurfaceEffect) == 0x000084, "Wrong size on FortAIPawn_GetImpactPhysicalSurfaceEffect");
static_assert(offsetof(FortAIPawn_GetImpactPhysicalSurfaceEffect, Impact) == 0x000000, "Member 'FortAIPawn_GetImpactPhysicalSurfaceEffect::Impact' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetImpactPhysicalSurfaceEffect, ReturnValue) == 0x000080, "Member 'FortAIPawn_GetImpactPhysicalSurfaceEffect::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetImpactPhysicalSurfaceSound
// 0x0084 (0x0084 - 0x0000)
struct FortAIPawn_GetImpactPhysicalSurfaceSound final
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USoundBase*                             ReturnValue;                                       // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetImpactPhysicalSurfaceSound) == 0x000004, "Wrong alignment on FortAIPawn_GetImpactPhysicalSurfaceSound");
static_assert(sizeof(FortAIPawn_GetImpactPhysicalSurfaceSound) == 0x000084, "Wrong size on FortAIPawn_GetImpactPhysicalSurfaceSound");
static_assert(offsetof(FortAIPawn_GetImpactPhysicalSurfaceSound, Impact) == 0x000000, "Member 'FortAIPawn_GetImpactPhysicalSurfaceSound::Impact' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetImpactPhysicalSurfaceSound, ReturnValue) == 0x000080, "Member 'FortAIPawn_GetImpactPhysicalSurfaceSound::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetLocalWildcardAsFloat
// 0x000C (0x000C - 0x0000)
struct FortAIPawn_GetLocalWildcardAsFloat final
{
public:
	struct FFortLocalWildcardData                 Data;                                              // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetLocalWildcardAsFloat) == 0x000004, "Wrong alignment on FortAIPawn_GetLocalWildcardAsFloat");
static_assert(sizeof(FortAIPawn_GetLocalWildcardAsFloat) == 0x00000C, "Wrong size on FortAIPawn_GetLocalWildcardAsFloat");
static_assert(offsetof(FortAIPawn_GetLocalWildcardAsFloat, Data) == 0x000000, "Member 'FortAIPawn_GetLocalWildcardAsFloat::Data' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetLocalWildcardAsFloat, ReturnValue) == 0x000008, "Member 'FortAIPawn_GetLocalWildcardAsFloat::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetLocalWildcardAsInt
// 0x000C (0x000C - 0x0000)
struct FortAIPawn_GetLocalWildcardAsInt final
{
public:
	struct FFortLocalWildcardData                 Data;                                              // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetLocalWildcardAsInt) == 0x000004, "Wrong alignment on FortAIPawn_GetLocalWildcardAsInt");
static_assert(sizeof(FortAIPawn_GetLocalWildcardAsInt) == 0x00000C, "Wrong size on FortAIPawn_GetLocalWildcardAsInt");
static_assert(offsetof(FortAIPawn_GetLocalWildcardAsInt, Data) == 0x000000, "Member 'FortAIPawn_GetLocalWildcardAsInt::Data' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetLocalWildcardAsInt, ReturnValue) == 0x000008, "Member 'FortAIPawn_GetLocalWildcardAsInt::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetProximityNotifyDistXY
// 0x0004 (0x0004 - 0x0000)
struct FortAIPawn_GetProximityNotifyDistXY final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetProximityNotifyDistXY) == 0x000004, "Wrong alignment on FortAIPawn_GetProximityNotifyDistXY");
static_assert(sizeof(FortAIPawn_GetProximityNotifyDistXY) == 0x000004, "Wrong size on FortAIPawn_GetProximityNotifyDistXY");
static_assert(offsetof(FortAIPawn_GetProximityNotifyDistXY, ReturnValue) == 0x000000, "Member 'FortAIPawn_GetProximityNotifyDistXY::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetSpawnLocation
// 0x000C (0x000C - 0x0000)
struct FortAIPawn_GetSpawnLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetSpawnLocation) == 0x000004, "Wrong alignment on FortAIPawn_GetSpawnLocation");
static_assert(sizeof(FortAIPawn_GetSpawnLocation) == 0x00000C, "Wrong size on FortAIPawn_GetSpawnLocation");
static_assert(offsetof(FortAIPawn_GetSpawnLocation, ReturnValue) == 0x000000, "Member 'FortAIPawn_GetSpawnLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetSpawnRotation
// 0x000C (0x000C - 0x0000)
struct FortAIPawn_GetSpawnRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetSpawnRotation) == 0x000004, "Wrong alignment on FortAIPawn_GetSpawnRotation");
static_assert(sizeof(FortAIPawn_GetSpawnRotation) == 0x00000C, "Wrong size on FortAIPawn_GetSpawnRotation");
static_assert(offsetof(FortAIPawn_GetSpawnRotation, ReturnValue) == 0x000000, "Member 'FortAIPawn_GetSpawnRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetTimeSinceLastHit
// 0x0004 (0x0004 - 0x0000)
struct FortAIPawn_GetTimeSinceLastHit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetTimeSinceLastHit) == 0x000004, "Wrong alignment on FortAIPawn_GetTimeSinceLastHit");
static_assert(sizeof(FortAIPawn_GetTimeSinceLastHit) == 0x000004, "Wrong size on FortAIPawn_GetTimeSinceLastHit");
static_assert(offsetof(FortAIPawn_GetTimeSinceLastHit, ReturnValue) == 0x000000, "Member 'FortAIPawn_GetTimeSinceLastHit::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetWildcardDataAsFloat
// 0x0010 (0x0010 - 0x0000)
struct FortAIPawn_GetWildcardDataAsFloat final
{
public:
	struct FFortWildcardData                      Data;                                              // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetWildcardDataAsFloat) == 0x000004, "Wrong alignment on FortAIPawn_GetWildcardDataAsFloat");
static_assert(sizeof(FortAIPawn_GetWildcardDataAsFloat) == 0x000010, "Wrong size on FortAIPawn_GetWildcardDataAsFloat");
static_assert(offsetof(FortAIPawn_GetWildcardDataAsFloat, Data) == 0x000000, "Member 'FortAIPawn_GetWildcardDataAsFloat::Data' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetWildcardDataAsFloat, ReturnValue) == 0x00000C, "Member 'FortAIPawn_GetWildcardDataAsFloat::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.GetWildcardDataAsInt
// 0x0010 (0x0010 - 0x0000)
struct FortAIPawn_GetWildcardDataAsInt final
{
public:
	struct FFortWildcardData                      Data;                                              // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_GetWildcardDataAsInt) == 0x000004, "Wrong alignment on FortAIPawn_GetWildcardDataAsInt");
static_assert(sizeof(FortAIPawn_GetWildcardDataAsInt) == 0x000010, "Wrong size on FortAIPawn_GetWildcardDataAsInt");
static_assert(offsetof(FortAIPawn_GetWildcardDataAsInt, Data) == 0x000000, "Member 'FortAIPawn_GetWildcardDataAsInt::Data' has a wrong offset!");
static_assert(offsetof(FortAIPawn_GetWildcardDataAsInt, ReturnValue) == 0x00000C, "Member 'FortAIPawn_GetWildcardDataAsInt::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.ShouldPauseAfterMelee
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_ShouldPauseAfterMelee final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_ShouldPauseAfterMelee) == 0x000001, "Wrong alignment on FortAIPawn_ShouldPauseAfterMelee");
static_assert(sizeof(FortAIPawn_ShouldPauseAfterMelee) == 0x000001, "Wrong size on FortAIPawn_ShouldPauseAfterMelee");
static_assert(offsetof(FortAIPawn_ShouldPauseAfterMelee, ReturnValue) == 0x000000, "Member 'FortAIPawn_ShouldPauseAfterMelee::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.ShouldPerformMeleeLungeAttacks
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_ShouldPerformMeleeLungeAttacks final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_ShouldPerformMeleeLungeAttacks) == 0x000001, "Wrong alignment on FortAIPawn_ShouldPerformMeleeLungeAttacks");
static_assert(sizeof(FortAIPawn_ShouldPerformMeleeLungeAttacks) == 0x000001, "Wrong size on FortAIPawn_ShouldPerformMeleeLungeAttacks");
static_assert(offsetof(FortAIPawn_ShouldPerformMeleeLungeAttacks, ReturnValue) == 0x000000, "Member 'FortAIPawn_ShouldPerformMeleeLungeAttacks::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIPawn.ShouldStopOnMelee
// 0x0001 (0x0001 - 0x0000)
struct FortAIPawn_ShouldStopOnMelee final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIPawn_ShouldStopOnMelee) == 0x000001, "Wrong alignment on FortAIPawn_ShouldStopOnMelee");
static_assert(sizeof(FortAIPawn_ShouldStopOnMelee) == 0x000001, "Wrong size on FortAIPawn_ShouldStopOnMelee");
static_assert(offsetof(FortAIPawn_ShouldStopOnMelee, ReturnValue) == 0x000000, "Member 'FortAIPawn_ShouldStopOnMelee::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHealthRegenInterface.GetHealthRegenDelayGameplayEffect
// 0x0004 (0x0004 - 0x0000)
struct FortHealthRegenInterface_GetHealthRegenDelayGameplayEffect final
{
public:
	class UGameplayEffect*                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthRegenInterface_GetHealthRegenDelayGameplayEffect) == 0x000004, "Wrong alignment on FortHealthRegenInterface_GetHealthRegenDelayGameplayEffect");
static_assert(sizeof(FortHealthRegenInterface_GetHealthRegenDelayGameplayEffect) == 0x000004, "Wrong size on FortHealthRegenInterface_GetHealthRegenDelayGameplayEffect");
static_assert(offsetof(FortHealthRegenInterface_GetHealthRegenDelayGameplayEffect, ReturnValue) == 0x000000, "Member 'FortHealthRegenInterface_GetHealthRegenDelayGameplayEffect::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHealthRegenInterface.GetHealthRegenGameplayEffect
// 0x0004 (0x0004 - 0x0000)
struct FortHealthRegenInterface_GetHealthRegenGameplayEffect final
{
public:
	class UGameplayEffect*                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthRegenInterface_GetHealthRegenGameplayEffect) == 0x000004, "Wrong alignment on FortHealthRegenInterface_GetHealthRegenGameplayEffect");
static_assert(sizeof(FortHealthRegenInterface_GetHealthRegenGameplayEffect) == 0x000004, "Wrong size on FortHealthRegenInterface_GetHealthRegenGameplayEffect");
static_assert(offsetof(FortHealthRegenInterface_GetHealthRegenGameplayEffect, ReturnValue) == 0x000000, "Member 'FortHealthRegenInterface_GetHealthRegenGameplayEffect::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHealthRegenInterface.GetHealthRegenGameplayEffectClass
// 0x0004 (0x0004 - 0x0000)
struct FortHealthRegenInterface_GetHealthRegenGameplayEffectClass final
{
public:
	TSubclassOf<class UGameplayEffect>            ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthRegenInterface_GetHealthRegenGameplayEffectClass) == 0x000004, "Wrong alignment on FortHealthRegenInterface_GetHealthRegenGameplayEffectClass");
static_assert(sizeof(FortHealthRegenInterface_GetHealthRegenGameplayEffectClass) == 0x000004, "Wrong size on FortHealthRegenInterface_GetHealthRegenGameplayEffectClass");
static_assert(offsetof(FortHealthRegenInterface_GetHealthRegenGameplayEffectClass, ReturnValue) == 0x000000, "Member 'FortHealthRegenInterface_GetHealthRegenGameplayEffectClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHealthRegenInterface.GetShieldRegenDelayGameplayEffect
// 0x0004 (0x0004 - 0x0000)
struct FortHealthRegenInterface_GetShieldRegenDelayGameplayEffect final
{
public:
	class UGameplayEffect*                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthRegenInterface_GetShieldRegenDelayGameplayEffect) == 0x000004, "Wrong alignment on FortHealthRegenInterface_GetShieldRegenDelayGameplayEffect");
static_assert(sizeof(FortHealthRegenInterface_GetShieldRegenDelayGameplayEffect) == 0x000004, "Wrong size on FortHealthRegenInterface_GetShieldRegenDelayGameplayEffect");
static_assert(offsetof(FortHealthRegenInterface_GetShieldRegenDelayGameplayEffect, ReturnValue) == 0x000000, "Member 'FortHealthRegenInterface_GetShieldRegenDelayGameplayEffect::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHealthRegenInterface.GetShieldRegenGameplayEffect
// 0x0004 (0x0004 - 0x0000)
struct FortHealthRegenInterface_GetShieldRegenGameplayEffect final
{
public:
	class UGameplayEffect*                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthRegenInterface_GetShieldRegenGameplayEffect) == 0x000004, "Wrong alignment on FortHealthRegenInterface_GetShieldRegenGameplayEffect");
static_assert(sizeof(FortHealthRegenInterface_GetShieldRegenGameplayEffect) == 0x000004, "Wrong size on FortHealthRegenInterface_GetShieldRegenGameplayEffect");
static_assert(offsetof(FortHealthRegenInterface_GetShieldRegenGameplayEffect, ReturnValue) == 0x000000, "Member 'FortHealthRegenInterface_GetShieldRegenGameplayEffect::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortHealthRegenInterface.GetShieldRegenGameplayEffectClass
// 0x0004 (0x0004 - 0x0000)
struct FortHealthRegenInterface_GetShieldRegenGameplayEffectClass final
{
public:
	TSubclassOf<class UGameplayEffect>            ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthRegenInterface_GetShieldRegenGameplayEffectClass) == 0x000004, "Wrong alignment on FortHealthRegenInterface_GetShieldRegenGameplayEffectClass");
static_assert(sizeof(FortHealthRegenInterface_GetShieldRegenGameplayEffectClass) == 0x000004, "Wrong size on FortHealthRegenInterface_GetShieldRegenGameplayEffectClass");
static_assert(offsetof(FortHealthRegenInterface_GetShieldRegenGameplayEffectClass, ReturnValue) == 0x000000, "Member 'FortHealthRegenInterface_GetShieldRegenGameplayEffectClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.CanPredictJumpApex
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_CanPredictJumpApex final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_CanPredictJumpApex) == 0x000001, "Wrong alignment on FortPlayerPawn_CanPredictJumpApex");
static_assert(sizeof(FortPlayerPawn_CanPredictJumpApex) == 0x000001, "Wrong size on FortPlayerPawn_CanPredictJumpApex");
static_assert(offsetof(FortPlayerPawn_CanPredictJumpApex, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_CanPredictJumpApex::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ClientNotifyAbilityFailed
// 0x001C (0x001C - 0x0000)
struct FortPlayerPawn_ClientNotifyAbilityFailed final
{
public:
	const class UGameplayAbility*                 FailedAbility;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  FailedReason;                                      // 0x0004(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ClientNotifyAbilityFailed) == 0x000004, "Wrong alignment on FortPlayerPawn_ClientNotifyAbilityFailed");
static_assert(sizeof(FortPlayerPawn_ClientNotifyAbilityFailed) == 0x00001C, "Wrong size on FortPlayerPawn_ClientNotifyAbilityFailed");
static_assert(offsetof(FortPlayerPawn_ClientNotifyAbilityFailed, FailedAbility) == 0x000000, "Member 'FortPlayerPawn_ClientNotifyAbilityFailed::FailedAbility' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ClientNotifyAbilityFailed, FailedReason) == 0x000004, "Member 'FortPlayerPawn_ClientNotifyAbilityFailed::FailedReason' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetNavLocation
// 0x000C (0x000C - 0x0000)
struct FortPlayerPawn_GetNavLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetNavLocation) == 0x000004, "Wrong alignment on FortPlayerPawn_GetNavLocation");
static_assert(sizeof(FortPlayerPawn_GetNavLocation) == 0x00000C, "Wrong size on FortPlayerPawn_GetNavLocation");
static_assert(offsetof(FortPlayerPawn_GetNavLocation, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_GetNavLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.InternalServerSetTargeting
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_InternalServerSetTargeting final
{
public:
	bool                                          bNewTargeting;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_InternalServerSetTargeting) == 0x000001, "Wrong alignment on FortPlayerPawn_InternalServerSetTargeting");
static_assert(sizeof(FortPlayerPawn_InternalServerSetTargeting) == 0x000001, "Wrong size on FortPlayerPawn_InternalServerSetTargeting");
static_assert(offsetof(FortPlayerPawn_InternalServerSetTargeting, bNewTargeting) == 0x000000, "Member 'FortPlayerPawn_InternalServerSetTargeting::bNewTargeting' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.RandomizeCharacter
// 0x000C (0x000C - 0x0000)
struct FortPlayerPawn_RandomizeCharacter final
{
public:
	class FString                                 GenderString;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_RandomizeCharacter) == 0x000004, "Wrong alignment on FortPlayerPawn_RandomizeCharacter");
static_assert(sizeof(FortPlayerPawn_RandomizeCharacter) == 0x00000C, "Wrong size on FortPlayerPawn_RandomizeCharacter");
static_assert(offsetof(FortPlayerPawn_RandomizeCharacter, GenderString) == 0x000000, "Member 'FortPlayerPawn_RandomizeCharacter::GenderString' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.RandomizeOutfit
// 0x000C (0x000C - 0x0000)
struct FortPlayerPawn_RandomizeOutfit final
{
public:
	class FString                                 GenderString;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_RandomizeOutfit) == 0x000004, "Wrong alignment on FortPlayerPawn_RandomizeOutfit");
static_assert(sizeof(FortPlayerPawn_RandomizeOutfit) == 0x00000C, "Wrong size on FortPlayerPawn_RandomizeOutfit");
static_assert(offsetof(FortPlayerPawn_RandomizeOutfit, GenderString) == 0x000000, "Member 'FortPlayerPawn_RandomizeOutfit::GenderString' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerChooseGender
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_ServerChooseGender final
{
public:
	EFortCustomGender                             Gender;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerChooseGender) == 0x000001, "Wrong alignment on FortPlayerPawn_ServerChooseGender");
static_assert(sizeof(FortPlayerPawn_ServerChooseGender) == 0x000001, "Wrong size on FortPlayerPawn_ServerChooseGender");
static_assert(offsetof(FortPlayerPawn_ServerChooseGender, Gender) == 0x000000, "Member 'FortPlayerPawn_ServerChooseGender::Gender' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerChoosePart
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPawn_ServerChoosePart final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomCharacterPart*                   ChosenCharacterPart;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerChoosePart) == 0x000004, "Wrong alignment on FortPlayerPawn_ServerChoosePart");
static_assert(sizeof(FortPlayerPawn_ServerChoosePart) == 0x000008, "Wrong size on FortPlayerPawn_ServerChoosePart");
static_assert(offsetof(FortPlayerPawn_ServerChoosePart, Part) == 0x000000, "Member 'FortPlayerPawn_ServerChoosePart::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ServerChoosePart, ChosenCharacterPart) == 0x000004, "Member 'FortPlayerPawn_ServerChoosePart::ChosenCharacterPart' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerCycleAccessoryColorSwatch
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerPawn_ServerCycleAccessoryColorSwatch final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNext;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerCycleAccessoryColorSwatch) == 0x000001, "Wrong alignment on FortPlayerPawn_ServerCycleAccessoryColorSwatch");
static_assert(sizeof(FortPlayerPawn_ServerCycleAccessoryColorSwatch) == 0x000002, "Wrong size on FortPlayerPawn_ServerCycleAccessoryColorSwatch");
static_assert(offsetof(FortPlayerPawn_ServerCycleAccessoryColorSwatch, Part) == 0x000000, "Member 'FortPlayerPawn_ServerCycleAccessoryColorSwatch::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ServerCycleAccessoryColorSwatch, bNext) == 0x000001, "Member 'FortPlayerPawn_ServerCycleAccessoryColorSwatch::bNext' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerCycleColorSwatch
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerPawn_ServerCycleColorSwatch final
{
public:
	EColorSwatchType                              SwatchType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNext;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerCycleColorSwatch) == 0x000001, "Wrong alignment on FortPlayerPawn_ServerCycleColorSwatch");
static_assert(sizeof(FortPlayerPawn_ServerCycleColorSwatch) == 0x000002, "Wrong size on FortPlayerPawn_ServerCycleColorSwatch");
static_assert(offsetof(FortPlayerPawn_ServerCycleColorSwatch, SwatchType) == 0x000000, "Member 'FortPlayerPawn_ServerCycleColorSwatch::SwatchType' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ServerCycleColorSwatch, bNext) == 0x000001, "Member 'FortPlayerPawn_ServerCycleColorSwatch::bNext' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerCycleOutfit
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_ServerCycleOutfit final
{
public:
	bool                                          bNextOutfit;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerCycleOutfit) == 0x000001, "Wrong alignment on FortPlayerPawn_ServerCycleOutfit");
static_assert(sizeof(FortPlayerPawn_ServerCycleOutfit) == 0x000001, "Wrong size on FortPlayerPawn_ServerCycleOutfit");
static_assert(offsetof(FortPlayerPawn_ServerCycleOutfit, bNextOutfit) == 0x000000, "Member 'FortPlayerPawn_ServerCycleOutfit::bNextOutfit' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerCyclePart
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerPawn_ServerCyclePart final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNextPart;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerCyclePart) == 0x000001, "Wrong alignment on FortPlayerPawn_ServerCyclePart");
static_assert(sizeof(FortPlayerPawn_ServerCyclePart) == 0x000002, "Wrong size on FortPlayerPawn_ServerCyclePart");
static_assert(offsetof(FortPlayerPawn_ServerCyclePart, Part) == 0x000000, "Member 'FortPlayerPawn_ServerCyclePart::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ServerCyclePart, bNextPart) == 0x000001, "Member 'FortPlayerPawn_ServerCyclePart::bNextPart' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerHandlePickup
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerPawn_ServerHandlePickup final
{
public:
	class AFortPickup*                            Pickup;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFlyTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InStartDirection;                                  // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPlayPickupSound;                                  // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerPawn_ServerHandlePickup) == 0x000004, "Wrong alignment on FortPlayerPawn_ServerHandlePickup");
static_assert(sizeof(FortPlayerPawn_ServerHandlePickup) == 0x000018, "Wrong size on FortPlayerPawn_ServerHandlePickup");
static_assert(offsetof(FortPlayerPawn_ServerHandlePickup, Pickup) == 0x000000, "Member 'FortPlayerPawn_ServerHandlePickup::Pickup' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ServerHandlePickup, InFlyTime) == 0x000004, "Member 'FortPlayerPawn_ServerHandlePickup::InFlyTime' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ServerHandlePickup, InStartDirection) == 0x000008, "Member 'FortPlayerPawn_ServerHandlePickup::InStartDirection' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_ServerHandlePickup, bPlayPickupSound) == 0x000014, "Member 'FortPlayerPawn_ServerHandlePickup::bPlayPickupSound' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ServerRootMotionInterruptNotifyStopMontage
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPawn_ServerRootMotionInterruptNotifyStopMontage final
{
public:
	class UAnimMontage*                           MontageToStop;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ServerRootMotionInterruptNotifyStopMontage) == 0x000004, "Wrong alignment on FortPlayerPawn_ServerRootMotionInterruptNotifyStopMontage");
static_assert(sizeof(FortPlayerPawn_ServerRootMotionInterruptNotifyStopMontage) == 0x000004, "Wrong size on FortPlayerPawn_ServerRootMotionInterruptNotifyStopMontage");
static_assert(offsetof(FortPlayerPawn_ServerRootMotionInterruptNotifyStopMontage, MontageToStop) == 0x000000, "Member 'FortPlayerPawn_ServerRootMotionInterruptNotifyStopMontage::MontageToStop' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.SetFirstPersonCamera
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_SetFirstPersonCamera final
{
public:
	bool                                          bNewUseFirstPersonCamera;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_SetFirstPersonCamera) == 0x000001, "Wrong alignment on FortPlayerPawn_SetFirstPersonCamera");
static_assert(sizeof(FortPlayerPawn_SetFirstPersonCamera) == 0x000001, "Wrong size on FortPlayerPawn_SetFirstPersonCamera");
static_assert(offsetof(FortPlayerPawn_SetFirstPersonCamera, bNewUseFirstPersonCamera) == 0x000000, "Member 'FortPlayerPawn_SetFirstPersonCamera::bNewUseFirstPersonCamera' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.SetHomeActor
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPawn_SetHomeActor final
{
public:
	class AActor*                                 NewActor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_SetHomeActor) == 0x000004, "Wrong alignment on FortPlayerPawn_SetHomeActor");
static_assert(sizeof(FortPlayerPawn_SetHomeActor) == 0x000004, "Wrong size on FortPlayerPawn_SetHomeActor");
static_assert(offsetof(FortPlayerPawn_SetHomeActor, NewActor) == 0x000000, "Member 'FortPlayerPawn_SetHomeActor::NewActor' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.SetVectorParameterValueForAllCharacterParts
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerPawn_SetVectorParameterValueForAllCharacterParts final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_SetVectorParameterValueForAllCharacterParts) == 0x000004, "Wrong alignment on FortPlayerPawn_SetVectorParameterValueForAllCharacterParts");
static_assert(sizeof(FortPlayerPawn_SetVectorParameterValueForAllCharacterParts) == 0x000018, "Wrong size on FortPlayerPawn_SetVectorParameterValueForAllCharacterParts");
static_assert(offsetof(FortPlayerPawn_SetVectorParameterValueForAllCharacterParts, ParameterName) == 0x000000, "Member 'FortPlayerPawn_SetVectorParameterValueForAllCharacterParts::ParameterName' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_SetVectorParameterValueForAllCharacterParts, Value) == 0x000008, "Member 'FortPlayerPawn_SetVectorParameterValueForAllCharacterParts::Value' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.SetVectorParameterValueForBodyParts
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerPawn_SetVectorParameterValueForBodyParts final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_SetVectorParameterValueForBodyParts) == 0x000004, "Wrong alignment on FortPlayerPawn_SetVectorParameterValueForBodyParts");
static_assert(sizeof(FortPlayerPawn_SetVectorParameterValueForBodyParts) == 0x000018, "Wrong size on FortPlayerPawn_SetVectorParameterValueForBodyParts");
static_assert(offsetof(FortPlayerPawn_SetVectorParameterValueForBodyParts, ParameterName) == 0x000000, "Member 'FortPlayerPawn_SetVectorParameterValueForBodyParts::ParameterName' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_SetVectorParameterValueForBodyParts, Value) == 0x000008, "Member 'FortPlayerPawn_SetVectorParameterValueForBodyParts::Value' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.SwitchToNextPart
// 0x000C (0x000C - 0x0000)
struct FortPlayerPawn_SwitchToNextPart final
{
public:
	class FString                                 PartName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_SwitchToNextPart) == 0x000004, "Wrong alignment on FortPlayerPawn_SwitchToNextPart");
static_assert(sizeof(FortPlayerPawn_SwitchToNextPart) == 0x00000C, "Wrong size on FortPlayerPawn_SwitchToNextPart");
static_assert(offsetof(FortPlayerPawn_SwitchToNextPart, PartName) == 0x000000, "Member 'FortPlayerPawn_SwitchToNextPart::PartName' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.SwitchToPreviousPart
// 0x000C (0x000C - 0x0000)
struct FortPlayerPawn_SwitchToPreviousPart final
{
public:
	class FString                                 PartName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_SwitchToPreviousPart) == 0x000004, "Wrong alignment on FortPlayerPawn_SwitchToPreviousPart");
static_assert(sizeof(FortPlayerPawn_SwitchToPreviousPart) == 0x00000C, "Wrong size on FortPlayerPawn_SwitchToPreviousPart");
static_assert(offsetof(FortPlayerPawn_SwitchToPreviousPart, PartName) == 0x000000, "Member 'FortPlayerPawn_SwitchToPreviousPart::PartName' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.DefaultTimeToJumpApex
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPawn_DefaultTimeToJumpApex final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_DefaultTimeToJumpApex) == 0x000004, "Wrong alignment on FortPlayerPawn_DefaultTimeToJumpApex");
static_assert(sizeof(FortPlayerPawn_DefaultTimeToJumpApex) == 0x000004, "Wrong size on FortPlayerPawn_DefaultTimeToJumpApex");
static_assert(offsetof(FortPlayerPawn_DefaultTimeToJumpApex, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_DefaultTimeToJumpApex::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetCharacterBodyType
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_GetCharacterBodyType final
{
public:
	EFortCustomBodyType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetCharacterBodyType) == 0x000001, "Wrong alignment on FortPlayerPawn_GetCharacterBodyType");
static_assert(sizeof(FortPlayerPawn_GetCharacterBodyType) == 0x000001, "Wrong size on FortPlayerPawn_GetCharacterBodyType");
static_assert(offsetof(FortPlayerPawn_GetCharacterBodyType, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_GetCharacterBodyType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetCharacterGender
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_GetCharacterGender final
{
public:
	EFortCustomGender                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetCharacterGender) == 0x000001, "Wrong alignment on FortPlayerPawn_GetCharacterGender");
static_assert(sizeof(FortPlayerPawn_GetCharacterGender) == 0x000001, "Wrong size on FortPlayerPawn_GetCharacterGender");
static_assert(offsetof(FortPlayerPawn_GetCharacterGender, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_GetCharacterGender::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetGender
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerPawn_GetGender final
{
public:
	bool                                          IsMale;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsFemale;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetGender) == 0x000001, "Wrong alignment on FortPlayerPawn_GetGender");
static_assert(sizeof(FortPlayerPawn_GetGender) == 0x000002, "Wrong size on FortPlayerPawn_GetGender");
static_assert(offsetof(FortPlayerPawn_GetGender, IsMale) == 0x000000, "Member 'FortPlayerPawn_GetGender::IsMale' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_GetGender, IsFemale) == 0x000001, "Member 'FortPlayerPawn_GetGender::IsFemale' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetHomeActor
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPawn_GetHomeActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetHomeActor) == 0x000004, "Wrong alignment on FortPlayerPawn_GetHomeActor");
static_assert(sizeof(FortPlayerPawn_GetHomeActor) == 0x000004, "Wrong size on FortPlayerPawn_GetHomeActor");
static_assert(offsetof(FortPlayerPawn_GetHomeActor, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_GetHomeActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetJumpZ
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPawn_GetJumpZ final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetJumpZ) == 0x000004, "Wrong alignment on FortPlayerPawn_GetJumpZ");
static_assert(sizeof(FortPlayerPawn_GetJumpZ) == 0x000004, "Wrong size on FortPlayerPawn_GetJumpZ");
static_assert(offsetof(FortPlayerPawn_GetJumpZ, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_GetJumpZ::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetMaxStamina
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPawn_GetMaxStamina final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetMaxStamina) == 0x000004, "Wrong alignment on FortPlayerPawn_GetMaxStamina");
static_assert(sizeof(FortPlayerPawn_GetMaxStamina) == 0x000004, "Wrong size on FortPlayerPawn_GetMaxStamina");
static_assert(offsetof(FortPlayerPawn_GetMaxStamina, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_GetMaxStamina::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetPercentageOutfitComplete
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPawn_GetPercentageOutfitComplete final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetPercentageOutfitComplete) == 0x000004, "Wrong alignment on FortPlayerPawn_GetPercentageOutfitComplete");
static_assert(sizeof(FortPlayerPawn_GetPercentageOutfitComplete) == 0x000008, "Wrong size on FortPlayerPawn_GetPercentageOutfitComplete");
static_assert(offsetof(FortPlayerPawn_GetPercentageOutfitComplete, Part) == 0x000000, "Member 'FortPlayerPawn_GetPercentageOutfitComplete::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_GetPercentageOutfitComplete, ReturnValue) == 0x000004, "Member 'FortPlayerPawn_GetPercentageOutfitComplete::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetSkeletalMeshForPartType
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerPawn_GetSkeletalMeshForPartType final
{
public:
	EFortCustomPartType                           PartType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0004(0x0004)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetSkeletalMeshForPartType) == 0x000004, "Wrong alignment on FortPlayerPawn_GetSkeletalMeshForPartType");
static_assert(sizeof(FortPlayerPawn_GetSkeletalMeshForPartType) == 0x000008, "Wrong size on FortPlayerPawn_GetSkeletalMeshForPartType");
static_assert(offsetof(FortPlayerPawn_GetSkeletalMeshForPartType, PartType) == 0x000000, "Member 'FortPlayerPawn_GetSkeletalMeshForPartType::PartType' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_GetSkeletalMeshForPartType, ReturnValue) == 0x000004, "Member 'FortPlayerPawn_GetSkeletalMeshForPartType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.GetStamina
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPawn_GetStamina final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_GetStamina) == 0x000004, "Wrong alignment on FortPlayerPawn_GetStamina");
static_assert(sizeof(FortPlayerPawn_GetStamina) == 0x000004, "Wrong size on FortPlayerPawn_GetStamina");
static_assert(offsetof(FortPlayerPawn_GetStamina, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_GetStamina::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerPawn_IsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_IsSprinting) == 0x000001, "Wrong alignment on FortPlayerPawn_IsSprinting");
static_assert(sizeof(FortPlayerPawn_IsSprinting) == 0x000001, "Wrong size on FortPlayerPawn_IsSprinting");
static_assert(offsetof(FortPlayerPawn_IsSprinting, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_IsSprinting::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.ListCharacterParts
// 0x000C (0x000C - 0x0000)
struct FortPlayerPawn_ListCharacterParts final
{
public:
	class FString                                 GenderAndOrPartString;                             // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_ListCharacterParts) == 0x000004, "Wrong alignment on FortPlayerPawn_ListCharacterParts");
static_assert(sizeof(FortPlayerPawn_ListCharacterParts) == 0x00000C, "Wrong size on FortPlayerPawn_ListCharacterParts");
static_assert(offsetof(FortPlayerPawn_ListCharacterParts, GenderAndOrPartString) == 0x000000, "Member 'FortPlayerPawn_ListCharacterParts::GenderAndOrPartString' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.PartOutfitIsComplete
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerPawn_PartOutfitIsComplete final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_PartOutfitIsComplete) == 0x000001, "Wrong alignment on FortPlayerPawn_PartOutfitIsComplete");
static_assert(sizeof(FortPlayerPawn_PartOutfitIsComplete) == 0x000002, "Wrong size on FortPlayerPawn_PartOutfitIsComplete");
static_assert(offsetof(FortPlayerPawn_PartOutfitIsComplete, Part) == 0x000000, "Member 'FortPlayerPawn_PartOutfitIsComplete::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerPawn_PartOutfitIsComplete, ReturnValue) == 0x000001, "Member 'FortPlayerPawn_PartOutfitIsComplete::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerPawn.TimeFromJumpApex
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerPawn_TimeFromJumpApex final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerPawn_TimeFromJumpApex) == 0x000004, "Wrong alignment on FortPlayerPawn_TimeFromJumpApex");
static_assert(sizeof(FortPlayerPawn_TimeFromJumpApex) == 0x000004, "Wrong size on FortPlayerPawn_TimeFromJumpApex");
static_assert(offsetof(FortPlayerPawn_TimeFromJumpApex, ReturnValue) == 0x000000, "Member 'FortPlayerPawn_TimeFromJumpApex::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerState.GetCurrentPawn
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerState_GetCurrentPawn final
{
public:
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerState_GetCurrentPawn) == 0x000004, "Wrong alignment on FortPlayerState_GetCurrentPawn");
static_assert(sizeof(FortPlayerState_GetCurrentPawn) == 0x000004, "Wrong size on FortPlayerState_GetCurrentPawn");
static_assert(offsetof(FortPlayerState_GetCurrentPawn, ReturnValue) == 0x000000, "Member 'FortPlayerState_GetCurrentPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerState.OnRep_HomeActor
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerState_OnRep_HomeActor final
{
public:
	class AActor*                                 OldHomeActor;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerState_OnRep_HomeActor) == 0x000004, "Wrong alignment on FortPlayerState_OnRep_HomeActor");
static_assert(sizeof(FortPlayerState_OnRep_HomeActor) == 0x000004, "Wrong size on FortPlayerState_OnRep_HomeActor");
static_assert(offsetof(FortPlayerState_OnRep_HomeActor, OldHomeActor) == 0x000000, "Member 'FortPlayerState_OnRep_HomeActor::OldHomeActor' has a wrong offset!");

// Function FortniteGame.FortPlayerState.GetPlayerAttributesProxyActor
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerState_GetPlayerAttributesProxyActor final
{
public:
	class AFortPlayerAttributesProxyActor*        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerState_GetPlayerAttributesProxyActor) == 0x000004, "Wrong alignment on FortPlayerState_GetPlayerAttributesProxyActor");
static_assert(sizeof(FortPlayerState_GetPlayerAttributesProxyActor) == 0x000004, "Wrong size on FortPlayerState_GetPlayerAttributesProxyActor");
static_assert(offsetof(FortPlayerState_GetPlayerAttributesProxyActor, ReturnValue) == 0x000000, "Member 'FortPlayerState_GetPlayerAttributesProxyActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerState.GetUniqueID
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerState_GetUniqueID final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerState_GetUniqueID) == 0x000004, "Wrong alignment on FortPlayerState_GetUniqueID");
static_assert(sizeof(FortPlayerState_GetUniqueID) == 0x000008, "Wrong size on FortPlayerState_GetUniqueID");
static_assert(offsetof(FortPlayerState_GetUniqueID, ReturnValue) == 0x000000, "Member 'FortPlayerState_GetUniqueID::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownManager.RegisterSlotCamera
// 0x0008 (0x0008 - 0x0000)
struct MyTownManager_RegisterSlotCamera final
{
public:
	int32                                         MapSlotId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       InCameraComponent;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownManager_RegisterSlotCamera) == 0x000004, "Wrong alignment on MyTownManager_RegisterSlotCamera");
static_assert(sizeof(MyTownManager_RegisterSlotCamera) == 0x000008, "Wrong size on MyTownManager_RegisterSlotCamera");
static_assert(offsetof(MyTownManager_RegisterSlotCamera, MapSlotId) == 0x000000, "Member 'MyTownManager_RegisterSlotCamera::MapSlotId' has a wrong offset!");
static_assert(offsetof(MyTownManager_RegisterSlotCamera, InCameraComponent) == 0x000004, "Member 'MyTownManager_RegisterSlotCamera::InCameraComponent' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetStaticSetBonusData
// 0x0090 (0x0090 - 0x0000)
struct HomeBaseContext_GetStaticSetBonusData final
{
public:
	struct FGameplayTag                           InSetBonusTag;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EFortBrushSize                                InBrushSize;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutRequiredWorkersCount;                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutSetBonusName;                                   // 0x0010(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            OutBrush;                                          // 0x001C(0x0074)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetStaticSetBonusData) == 0x000004, "Wrong alignment on HomeBaseContext_GetStaticSetBonusData");
static_assert(sizeof(HomeBaseContext_GetStaticSetBonusData) == 0x000090, "Wrong size on HomeBaseContext_GetStaticSetBonusData");
static_assert(offsetof(HomeBaseContext_GetStaticSetBonusData, InSetBonusTag) == 0x000000, "Member 'HomeBaseContext_GetStaticSetBonusData::InSetBonusTag' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetStaticSetBonusData, InBrushSize) == 0x000008, "Member 'HomeBaseContext_GetStaticSetBonusData::InBrushSize' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetStaticSetBonusData, OutRequiredWorkersCount) == 0x00000C, "Member 'HomeBaseContext_GetStaticSetBonusData::OutRequiredWorkersCount' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetStaticSetBonusData, OutSetBonusName) == 0x000010, "Member 'HomeBaseContext_GetStaticSetBonusData::OutSetBonusName' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetStaticSetBonusData, OutBrush) == 0x00001C, "Member 'HomeBaseContext_GetStaticSetBonusData::OutBrush' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.BeginWorkerPreview
// 0x000C (0x000C - 0x0000)
struct HomeBaseContext_BeginWorkerPreview final
{
public:
	const class UFortWorker*                      WorkerItem;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHomeBaseMainBuilding*            BuildingToOccupy;                                  // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkerSlotToOccupy;                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_BeginWorkerPreview) == 0x000004, "Wrong alignment on HomeBaseContext_BeginWorkerPreview");
static_assert(sizeof(HomeBaseContext_BeginWorkerPreview) == 0x00000C, "Wrong size on HomeBaseContext_BeginWorkerPreview");
static_assert(offsetof(HomeBaseContext_BeginWorkerPreview, WorkerItem) == 0x000000, "Member 'HomeBaseContext_BeginWorkerPreview::WorkerItem' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_BeginWorkerPreview, BuildingToOccupy) == 0x000004, "Member 'HomeBaseContext_BeginWorkerPreview::BuildingToOccupy' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_BeginWorkerPreview, WorkerSlotToOccupy) == 0x000008, "Member 'HomeBaseContext_BeginWorkerPreview::WorkerSlotToOccupy' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetWorkerRatingAtLevelForBuilding
// 0x0010 (0x0010 - 0x0000)
struct HomeBaseContext_GetWorkerRatingAtLevelForBuilding final
{
public:
	const class UFortWorker*                      WorkerItem;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkerLevel;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHomeBaseMainBuilding*            Building;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetWorkerRatingAtLevelForBuilding) == 0x000004, "Wrong alignment on HomeBaseContext_GetWorkerRatingAtLevelForBuilding");
static_assert(sizeof(HomeBaseContext_GetWorkerRatingAtLevelForBuilding) == 0x000010, "Wrong size on HomeBaseContext_GetWorkerRatingAtLevelForBuilding");
static_assert(offsetof(HomeBaseContext_GetWorkerRatingAtLevelForBuilding, WorkerItem) == 0x000000, "Member 'HomeBaseContext_GetWorkerRatingAtLevelForBuilding::WorkerItem' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetWorkerRatingAtLevelForBuilding, WorkerLevel) == 0x000004, "Member 'HomeBaseContext_GetWorkerRatingAtLevelForBuilding::WorkerLevel' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetWorkerRatingAtLevelForBuilding, Building) == 0x000008, "Member 'HomeBaseContext_GetWorkerRatingAtLevelForBuilding::Building' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetWorkerRatingAtLevelForBuilding, ReturnValue) == 0x00000C, "Member 'HomeBaseContext_GetWorkerRatingAtLevelForBuilding::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.RequestOpenBuildingPanel
// 0x0004 (0x0004 - 0x0000)
struct HomeBaseContext_RequestOpenBuildingPanel final
{
public:
	const class UHomeBaseMainBuilding*            Building;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_RequestOpenBuildingPanel) == 0x000004, "Wrong alignment on HomeBaseContext_RequestOpenBuildingPanel");
static_assert(sizeof(HomeBaseContext_RequestOpenBuildingPanel) == 0x000004, "Wrong size on HomeBaseContext_RequestOpenBuildingPanel");
static_assert(offsetof(HomeBaseContext_RequestOpenBuildingPanel, Building) == 0x000000, "Member 'HomeBaseContext_RequestOpenBuildingPanel::Building' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.ShouldShowBang
// 0x0008 (0x0008 - 0x0000)
struct HomeBaseContext_ShouldShowBang final
{
public:
	const class UHomeBaseBuilding*                Building;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HomeBaseContext_ShouldShowBang) == 0x000004, "Wrong alignment on HomeBaseContext_ShouldShowBang");
static_assert(sizeof(HomeBaseContext_ShouldShowBang) == 0x000008, "Wrong size on HomeBaseContext_ShouldShowBang");
static_assert(offsetof(HomeBaseContext_ShouldShowBang, Building) == 0x000000, "Member 'HomeBaseContext_ShouldShowBang::Building' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_ShouldShowBang, ReturnValue) == 0x000004, "Member 'HomeBaseContext_ShouldShowBang::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetAccountLevel
// 0x0004 (0x0004 - 0x0000)
struct HomeBaseContext_GetAccountLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetAccountLevel) == 0x000004, "Wrong alignment on HomeBaseContext_GetAccountLevel");
static_assert(sizeof(HomeBaseContext_GetAccountLevel) == 0x000004, "Wrong size on HomeBaseContext_GetAccountLevel");
static_assert(offsetof(HomeBaseContext_GetAccountLevel, ReturnValue) == 0x000000, "Member 'HomeBaseContext_GetAccountLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetAllBuildings
// 0x000C (0x000C - 0x0000)
struct HomeBaseContext_GetAllBuildings final
{
public:
	TArray<class UHomeBaseMainBuilding*>          ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetAllBuildings) == 0x000004, "Wrong alignment on HomeBaseContext_GetAllBuildings");
static_assert(sizeof(HomeBaseContext_GetAllBuildings) == 0x00000C, "Wrong size on HomeBaseContext_GetAllBuildings");
static_assert(offsetof(HomeBaseContext_GetAllBuildings, ReturnValue) == 0x000000, "Member 'HomeBaseContext_GetAllBuildings::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetBuilding
// 0x0010 (0x0010 - 0x0000)
struct HomeBaseContext_GetBuilding final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHomeBaseMainBuilding*                  ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetBuilding) == 0x000004, "Wrong alignment on HomeBaseContext_GetBuilding");
static_assert(sizeof(HomeBaseContext_GetBuilding) == 0x000010, "Wrong size on HomeBaseContext_GetBuilding");
static_assert(offsetof(HomeBaseContext_GetBuilding, TemplateId) == 0x000000, "Member 'HomeBaseContext_GetBuilding::TemplateId' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetBuilding, ReturnValue) == 0x00000C, "Member 'HomeBaseContext_GetBuilding::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetBuildingBonusDescriptionsForSetBonus
// 0x0014 (0x0014 - 0x0000)
struct HomeBaseContext_GetBuildingBonusDescriptionsForSetBonus final
{
public:
	struct FGameplayTag                           SetBonusTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSingleBuildingBonusDescription> ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetBuildingBonusDescriptionsForSetBonus) == 0x000004, "Wrong alignment on HomeBaseContext_GetBuildingBonusDescriptionsForSetBonus");
static_assert(sizeof(HomeBaseContext_GetBuildingBonusDescriptionsForSetBonus) == 0x000014, "Wrong size on HomeBaseContext_GetBuildingBonusDescriptionsForSetBonus");
static_assert(offsetof(HomeBaseContext_GetBuildingBonusDescriptionsForSetBonus, SetBonusTag) == 0x000000, "Member 'HomeBaseContext_GetBuildingBonusDescriptionsForSetBonus::SetBonusTag' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetBuildingBonusDescriptionsForSetBonus, ReturnValue) == 0x000008, "Member 'HomeBaseContext_GetBuildingBonusDescriptionsForSetBonus::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetBuildingTemplateIdFromInstanceId
// 0x0018 (0x0018 - 0x0000)
struct HomeBaseContext_GetBuildingTemplateIdFromInstanceId final
{
public:
	class FString                                 InstanceId;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetBuildingTemplateIdFromInstanceId) == 0x000004, "Wrong alignment on HomeBaseContext_GetBuildingTemplateIdFromInstanceId");
static_assert(sizeof(HomeBaseContext_GetBuildingTemplateIdFromInstanceId) == 0x000018, "Wrong size on HomeBaseContext_GetBuildingTemplateIdFromInstanceId");
static_assert(offsetof(HomeBaseContext_GetBuildingTemplateIdFromInstanceId, InstanceId) == 0x000000, "Member 'HomeBaseContext_GetBuildingTemplateIdFromInstanceId::InstanceId' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetBuildingTemplateIdFromInstanceId, ReturnValue) == 0x00000C, "Member 'HomeBaseContext_GetBuildingTemplateIdFromInstanceId::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetHomeBaseData
// 0x0004 (0x0004 - 0x0000)
struct HomeBaseContext_GetHomeBaseData final
{
public:
	class UMyTownData*                            ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetHomeBaseData) == 0x000004, "Wrong alignment on HomeBaseContext_GetHomeBaseData");
static_assert(sizeof(HomeBaseContext_GetHomeBaseData) == 0x000004, "Wrong size on HomeBaseContext_GetHomeBaseData");
static_assert(offsetof(HomeBaseContext_GetHomeBaseData, ReturnValue) == 0x000000, "Member 'HomeBaseContext_GetHomeBaseData::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetWorkerPreviewStatus
// 0x001C (0x001C - 0x0000)
struct HomeBaseContext_GetWorkerPreviewStatus final
{
public:
	bool                                          OutIsPreviewing;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorker*                            OutWorker;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutMatchesPersonality;                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          OutMatchesBuildingType;                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWorkerSetBonusState                   OutSetBonusState;                                  // 0x000C(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetWorkerPreviewStatus) == 0x000004, "Wrong alignment on HomeBaseContext_GetWorkerPreviewStatus");
static_assert(sizeof(HomeBaseContext_GetWorkerPreviewStatus) == 0x00001C, "Wrong size on HomeBaseContext_GetWorkerPreviewStatus");
static_assert(offsetof(HomeBaseContext_GetWorkerPreviewStatus, OutIsPreviewing) == 0x000000, "Member 'HomeBaseContext_GetWorkerPreviewStatus::OutIsPreviewing' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetWorkerPreviewStatus, OutWorker) == 0x000004, "Member 'HomeBaseContext_GetWorkerPreviewStatus::OutWorker' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetWorkerPreviewStatus, OutMatchesPersonality) == 0x000008, "Member 'HomeBaseContext_GetWorkerPreviewStatus::OutMatchesPersonality' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetWorkerPreviewStatus, OutMatchesBuildingType) == 0x000009, "Member 'HomeBaseContext_GetWorkerPreviewStatus::OutMatchesBuildingType' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetWorkerPreviewStatus, OutSetBonusState) == 0x00000C, "Member 'HomeBaseContext_GetWorkerPreviewStatus::OutSetBonusState' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetWorkerSetBonusStates
// 0x0018 (0x0018 - 0x0000)
struct HomeBaseContext_GetWorkerSetBonusStates final
{
public:
	TArray<class UFortWorker*>                    Workers;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FWorkerSetBonusState>           ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetWorkerSetBonusStates) == 0x000004, "Wrong alignment on HomeBaseContext_GetWorkerSetBonusStates");
static_assert(sizeof(HomeBaseContext_GetWorkerSetBonusStates) == 0x000018, "Wrong size on HomeBaseContext_GetWorkerSetBonusStates");
static_assert(offsetof(HomeBaseContext_GetWorkerSetBonusStates, Workers) == 0x000000, "Member 'HomeBaseContext_GetWorkerSetBonusStates::Workers' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetWorkerSetBonusStates, ReturnValue) == 0x00000C, "Member 'HomeBaseContext_GetWorkerSetBonusStates::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.GetWorkerSlottingPreviewState
// 0x000C (0x000C - 0x0000)
struct HomeBaseContext_GetWorkerSlottingPreviewState final
{
public:
	class UFortWorker*                            OutWorkerItem;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHomeBaseMainBuilding*                  OutHostBuilding;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSlotIndex;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_GetWorkerSlottingPreviewState) == 0x000004, "Wrong alignment on HomeBaseContext_GetWorkerSlottingPreviewState");
static_assert(sizeof(HomeBaseContext_GetWorkerSlottingPreviewState) == 0x00000C, "Wrong size on HomeBaseContext_GetWorkerSlottingPreviewState");
static_assert(offsetof(HomeBaseContext_GetWorkerSlottingPreviewState, OutWorkerItem) == 0x000000, "Member 'HomeBaseContext_GetWorkerSlottingPreviewState::OutWorkerItem' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetWorkerSlottingPreviewState, OutHostBuilding) == 0x000004, "Member 'HomeBaseContext_GetWorkerSlottingPreviewState::OutHostBuilding' has a wrong offset!");
static_assert(offsetof(HomeBaseContext_GetWorkerSlottingPreviewState, OutSlotIndex) == 0x000008, "Member 'HomeBaseContext_GetWorkerSlottingPreviewState::OutSlotIndex' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.IsBuildingPanelOpen
// 0x0001 (0x0001 - 0x0000)
struct HomeBaseContext_IsBuildingPanelOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_IsBuildingPanelOpen) == 0x000001, "Wrong alignment on HomeBaseContext_IsBuildingPanelOpen");
static_assert(sizeof(HomeBaseContext_IsBuildingPanelOpen) == 0x000001, "Wrong size on HomeBaseContext_IsBuildingPanelOpen");
static_assert(offsetof(HomeBaseContext_IsBuildingPanelOpen, ReturnValue) == 0x000000, "Member 'HomeBaseContext_IsBuildingPanelOpen::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.IsPreviewingWorkerSlotting
// 0x0001 (0x0001 - 0x0000)
struct HomeBaseContext_IsPreviewingWorkerSlotting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_IsPreviewingWorkerSlotting) == 0x000001, "Wrong alignment on HomeBaseContext_IsPreviewingWorkerSlotting");
static_assert(sizeof(HomeBaseContext_IsPreviewingWorkerSlotting) == 0x000001, "Wrong size on HomeBaseContext_IsPreviewingWorkerSlotting");
static_assert(offsetof(HomeBaseContext_IsPreviewingWorkerSlotting, ReturnValue) == 0x000000, "Member 'HomeBaseContext_IsPreviewingWorkerSlotting::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseContext.NotifyBuildingPanelOpened
// 0x0004 (0x0004 - 0x0000)
struct HomeBaseContext_NotifyBuildingPanelOpened final
{
public:
	const class UHomeBaseMainBuilding*            Building;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseContext_NotifyBuildingPanelOpened) == 0x000004, "Wrong alignment on HomeBaseContext_NotifyBuildingPanelOpened");
static_assert(sizeof(HomeBaseContext_NotifyBuildingPanelOpened) == 0x000004, "Wrong size on HomeBaseContext_NotifyBuildingPanelOpened");
static_assert(offsetof(HomeBaseContext_NotifyBuildingPanelOpened, Building) == 0x000000, "Member 'HomeBaseContext_NotifyBuildingPanelOpened::Building' has a wrong offset!");

// Function FortniteGame.BlueprintContextLibrary.GetContext
// 0x000C (0x000C - 0x0000)
struct BlueprintContextLibrary_GetContext final
{
public:
	class UObject*                                ContextObject;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBlueprintContextBase>      Class_0;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlueprintContextBase*                  ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintContextLibrary_GetContext) == 0x000004, "Wrong alignment on BlueprintContextLibrary_GetContext");
static_assert(sizeof(BlueprintContextLibrary_GetContext) == 0x00000C, "Wrong size on BlueprintContextLibrary_GetContext");
static_assert(offsetof(BlueprintContextLibrary_GetContext, ContextObject) == 0x000000, "Member 'BlueprintContextLibrary_GetContext::ContextObject' has a wrong offset!");
static_assert(offsetof(BlueprintContextLibrary_GetContext, Class_0) == 0x000004, "Member 'BlueprintContextLibrary_GetContext::Class_0' has a wrong offset!");
static_assert(offsetof(BlueprintContextLibrary_GetContext, ReturnValue) == 0x000008, "Member 'BlueprintContextLibrary_GetContext::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpawnableByPlacementSystemInterface.GetMission
// 0x0004 (0x0004 - 0x0000)
struct FortSpawnableByPlacementSystemInterface_GetMission final
{
public:
	class AFortMission*                           ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpawnableByPlacementSystemInterface_GetMission) == 0x000004, "Wrong alignment on FortSpawnableByPlacementSystemInterface_GetMission");
static_assert(sizeof(FortSpawnableByPlacementSystemInterface_GetMission) == 0x000004, "Wrong size on FortSpawnableByPlacementSystemInterface_GetMission");
static_assert(offsetof(FortSpawnableByPlacementSystemInterface_GetMission, ReturnValue) == 0x000000, "Member 'FortSpawnableByPlacementSystemInterface_GetMission::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSpawnableByPlacementSystemInterface.GetMissionGuid
// 0x0010 (0x0010 - 0x0000)
struct FortSpawnableByPlacementSystemInterface_GetMissionGuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSpawnableByPlacementSystemInterface_GetMissionGuid) == 0x000004, "Wrong alignment on FortSpawnableByPlacementSystemInterface_GetMissionGuid");
static_assert(sizeof(FortSpawnableByPlacementSystemInterface_GetMissionGuid) == 0x000010, "Wrong size on FortSpawnableByPlacementSystemInterface_GetMissionGuid");
static_assert(offsetof(FortSpawnableByPlacementSystemInterface_GetMissionGuid, ReturnValue) == 0x000000, "Member 'FortSpawnableByPlacementSystemInterface_GetMissionGuid::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.BlueprintOnInteract
// 0x0004 (0x0004 - 0x0000)
struct BuildingActor_BlueprintOnInteract final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_BlueprintOnInteract) == 0x000004, "Wrong alignment on BuildingActor_BlueprintOnInteract");
static_assert(sizeof(BuildingActor_BlueprintOnInteract) == 0x000004, "Wrong size on BuildingActor_BlueprintOnInteract");
static_assert(offsetof(BuildingActor_BlueprintOnInteract, InteractingPawn) == 0x000000, "Member 'BuildingActor_BlueprintOnInteract::InteractingPawn' has a wrong offset!");

// Function FortniteGame.BuildingActor.GameplayCue_Damage
// 0x0088 (0x0088 - 0x0000)
struct BuildingActor_GameplayCue_Damage final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0004(0x0084)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GameplayCue_Damage) == 0x000004, "Wrong alignment on BuildingActor_GameplayCue_Damage");
static_assert(sizeof(BuildingActor_GameplayCue_Damage) == 0x000088, "Wrong size on BuildingActor_GameplayCue_Damage");
static_assert(offsetof(BuildingActor_GameplayCue_Damage, EventType) == 0x000000, "Member 'BuildingActor_GameplayCue_Damage::EventType' has a wrong offset!");
static_assert(offsetof(BuildingActor_GameplayCue_Damage, Parameters) == 0x000004, "Member 'BuildingActor_GameplayCue_Damage::Parameters' has a wrong offset!");

// Function FortniteGame.BuildingActor.GameplayCue_Healing
// 0x0088 (0x0088 - 0x0000)
struct BuildingActor_GameplayCue_Healing final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0004(0x0084)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GameplayCue_Healing) == 0x000004, "Wrong alignment on BuildingActor_GameplayCue_Healing");
static_assert(sizeof(BuildingActor_GameplayCue_Healing) == 0x000088, "Wrong size on BuildingActor_GameplayCue_Healing");
static_assert(offsetof(BuildingActor_GameplayCue_Healing, EventType) == 0x000000, "Member 'BuildingActor_GameplayCue_Healing::EventType' has a wrong offset!");
static_assert(offsetof(BuildingActor_GameplayCue_Healing, Parameters) == 0x000004, "Member 'BuildingActor_GameplayCue_Healing::Parameters' has a wrong offset!");

// Function FortniteGame.BuildingActor.GameplayCue_InstantDeath
// 0x0088 (0x0088 - 0x0000)
struct BuildingActor_GameplayCue_InstantDeath final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0004(0x0084)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GameplayCue_InstantDeath) == 0x000004, "Wrong alignment on BuildingActor_GameplayCue_InstantDeath");
static_assert(sizeof(BuildingActor_GameplayCue_InstantDeath) == 0x000088, "Wrong size on BuildingActor_GameplayCue_InstantDeath");
static_assert(offsetof(BuildingActor_GameplayCue_InstantDeath, EventType) == 0x000000, "Member 'BuildingActor_GameplayCue_InstantDeath::EventType' has a wrong offset!");
static_assert(offsetof(BuildingActor_GameplayCue_InstantDeath, Parameters) == 0x000004, "Member 'BuildingActor_GameplayCue_InstantDeath::Parameters' has a wrong offset!");

// Function FortniteGame.BuildingActor.InitializeKismetSpawnedBuildingActor
// 0x0008 (0x0008 - 0x0000)
struct BuildingActor_InitializeKismetSpawnedBuildingActor final
{
public:
	class ABuildingActor*                         BuildingOwner;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  SpawningController;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_InitializeKismetSpawnedBuildingActor) == 0x000004, "Wrong alignment on BuildingActor_InitializeKismetSpawnedBuildingActor");
static_assert(sizeof(BuildingActor_InitializeKismetSpawnedBuildingActor) == 0x000008, "Wrong size on BuildingActor_InitializeKismetSpawnedBuildingActor");
static_assert(offsetof(BuildingActor_InitializeKismetSpawnedBuildingActor, BuildingOwner) == 0x000000, "Member 'BuildingActor_InitializeKismetSpawnedBuildingActor::BuildingOwner' has a wrong offset!");
static_assert(offsetof(BuildingActor_InitializeKismetSpawnedBuildingActor, SpawningController) == 0x000004, "Member 'BuildingActor_InitializeKismetSpawnedBuildingActor::SpawningController' has a wrong offset!");

// Function FortniteGame.BuildingActor.OnBuildingActorInitialized
// 0x0002 (0x0002 - 0x0000)
struct BuildingActor_OnBuildingActorInitialized final
{
public:
	EFortBuildingInitializationReason             InitializationReason;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingPersistentState                  BuildingPersistentState;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_OnBuildingActorInitialized) == 0x000001, "Wrong alignment on BuildingActor_OnBuildingActorInitialized");
static_assert(sizeof(BuildingActor_OnBuildingActorInitialized) == 0x000002, "Wrong size on BuildingActor_OnBuildingActorInitialized");
static_assert(offsetof(BuildingActor_OnBuildingActorInitialized, InitializationReason) == 0x000000, "Member 'BuildingActor_OnBuildingActorInitialized::InitializationReason' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnBuildingActorInitialized, BuildingPersistentState) == 0x000001, "Member 'BuildingActor_OnBuildingActorInitialized::BuildingPersistentState' has a wrong offset!");

// Function FortniteGame.BuildingActor.OnDamagePlayEffects
// 0x00BC (0x00BC - 0x0000)
struct BuildingActor_OnDamagePlayEffects final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0004(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0028(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AFortPawn*                              InstigatedBy;                                      // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00B0(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_OnDamagePlayEffects) == 0x000004, "Wrong alignment on BuildingActor_OnDamagePlayEffects");
static_assert(sizeof(BuildingActor_OnDamagePlayEffects) == 0x0000BC, "Wrong size on BuildingActor_OnDamagePlayEffects");
static_assert(offsetof(BuildingActor_OnDamagePlayEffects, Damage) == 0x000000, "Member 'BuildingActor_OnDamagePlayEffects::Damage' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamagePlayEffects, DamageTags) == 0x000004, "Member 'BuildingActor_OnDamagePlayEffects::DamageTags' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamagePlayEffects, Momentum) == 0x00001C, "Member 'BuildingActor_OnDamagePlayEffects::Momentum' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamagePlayEffects, HitInfo) == 0x000028, "Member 'BuildingActor_OnDamagePlayEffects::HitInfo' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamagePlayEffects, InstigatedBy) == 0x0000A8, "Member 'BuildingActor_OnDamagePlayEffects::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamagePlayEffects, DamageCauser) == 0x0000AC, "Member 'BuildingActor_OnDamagePlayEffects::DamageCauser' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamagePlayEffects, EffectContext) == 0x0000B0, "Member 'BuildingActor_OnDamagePlayEffects::EffectContext' has a wrong offset!");

// Function FortniteGame.BuildingActor.OnDamageServer
// 0x00BC (0x00BC - 0x0000)
struct BuildingActor_OnDamageServer final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0004(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0028(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00B0(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_OnDamageServer) == 0x000004, "Wrong alignment on BuildingActor_OnDamageServer");
static_assert(sizeof(BuildingActor_OnDamageServer) == 0x0000BC, "Wrong size on BuildingActor_OnDamageServer");
static_assert(offsetof(BuildingActor_OnDamageServer, Damage) == 0x000000, "Member 'BuildingActor_OnDamageServer::Damage' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamageServer, DamageTags) == 0x000004, "Member 'BuildingActor_OnDamageServer::DamageTags' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamageServer, Momentum) == 0x00001C, "Member 'BuildingActor_OnDamageServer::Momentum' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamageServer, HitInfo) == 0x000028, "Member 'BuildingActor_OnDamageServer::HitInfo' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamageServer, InstigatedBy) == 0x0000A8, "Member 'BuildingActor_OnDamageServer::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamageServer, DamageCauser) == 0x0000AC, "Member 'BuildingActor_OnDamageServer::DamageCauser' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDamageServer, EffectContext) == 0x0000B0, "Member 'BuildingActor_OnDamageServer::EffectContext' has a wrong offset!");

// Function FortniteGame.BuildingActor.OnDayPhaseChanged
// 0x0003 (0x0003 - 0x0000)
struct BuildingActor_OnDayPhaseChanged final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_OnDayPhaseChanged) == 0x000001, "Wrong alignment on BuildingActor_OnDayPhaseChanged");
static_assert(sizeof(BuildingActor_OnDayPhaseChanged) == 0x000003, "Wrong size on BuildingActor_OnDayPhaseChanged");
static_assert(offsetof(BuildingActor_OnDayPhaseChanged, CurrentDayPhase) == 0x000000, "Member 'BuildingActor_OnDayPhaseChanged::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDayPhaseChanged, PreviousDayPhase) == 0x000001, "Member 'BuildingActor_OnDayPhaseChanged::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDayPhaseChanged, bAtCreation) == 0x000002, "Member 'BuildingActor_OnDayPhaseChanged::bAtCreation' has a wrong offset!");

// Function FortniteGame.BuildingActor.OnDeathPlayEffects
// 0x00BC (0x00BC - 0x0000)
struct BuildingActor_OnDeathPlayEffects final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0004(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0028(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AFortPawn*                              InstigatedBy;                                      // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00B0(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_OnDeathPlayEffects) == 0x000004, "Wrong alignment on BuildingActor_OnDeathPlayEffects");
static_assert(sizeof(BuildingActor_OnDeathPlayEffects) == 0x0000BC, "Wrong size on BuildingActor_OnDeathPlayEffects");
static_assert(offsetof(BuildingActor_OnDeathPlayEffects, Damage) == 0x000000, "Member 'BuildingActor_OnDeathPlayEffects::Damage' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathPlayEffects, DamageTags) == 0x000004, "Member 'BuildingActor_OnDeathPlayEffects::DamageTags' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathPlayEffects, Momentum) == 0x00001C, "Member 'BuildingActor_OnDeathPlayEffects::Momentum' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathPlayEffects, HitInfo) == 0x000028, "Member 'BuildingActor_OnDeathPlayEffects::HitInfo' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathPlayEffects, InstigatedBy) == 0x0000A8, "Member 'BuildingActor_OnDeathPlayEffects::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathPlayEffects, DamageCauser) == 0x0000AC, "Member 'BuildingActor_OnDeathPlayEffects::DamageCauser' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathPlayEffects, EffectContext) == 0x0000B0, "Member 'BuildingActor_OnDeathPlayEffects::EffectContext' has a wrong offset!");

// Function FortniteGame.BuildingActor.OnDeathServer
// 0x00BC (0x00BC - 0x0000)
struct BuildingActor_OnDeathServer final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0004(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             HitInfo;                                           // 0x0028(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00B0(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_OnDeathServer) == 0x000004, "Wrong alignment on BuildingActor_OnDeathServer");
static_assert(sizeof(BuildingActor_OnDeathServer) == 0x0000BC, "Wrong size on BuildingActor_OnDeathServer");
static_assert(offsetof(BuildingActor_OnDeathServer, Damage) == 0x000000, "Member 'BuildingActor_OnDeathServer::Damage' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathServer, DamageTags) == 0x000004, "Member 'BuildingActor_OnDeathServer::DamageTags' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathServer, Momentum) == 0x00001C, "Member 'BuildingActor_OnDeathServer::Momentum' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathServer, HitInfo) == 0x000028, "Member 'BuildingActor_OnDeathServer::HitInfo' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathServer, InstigatedBy) == 0x0000A8, "Member 'BuildingActor_OnDeathServer::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathServer, DamageCauser) == 0x0000AC, "Member 'BuildingActor_OnDeathServer::DamageCauser' has a wrong offset!");
static_assert(offsetof(BuildingActor_OnDeathServer, EffectContext) == 0x0000B0, "Member 'BuildingActor_OnDeathServer::EffectContext' has a wrong offset!");

// Function FortniteGame.BuildingActor.SetCanExportNavigationObstacle
// 0x0001 (0x0001 - 0x0000)
struct BuildingActor_SetCanExportNavigationObstacle final
{
public:
	bool                                          InCanExportNavigationObstacle;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_SetCanExportNavigationObstacle) == 0x000001, "Wrong alignment on BuildingActor_SetCanExportNavigationObstacle");
static_assert(sizeof(BuildingActor_SetCanExportNavigationObstacle) == 0x000001, "Wrong size on BuildingActor_SetCanExportNavigationObstacle");
static_assert(offsetof(BuildingActor_SetCanExportNavigationObstacle, InCanExportNavigationObstacle) == 0x000000, "Member 'BuildingActor_SetCanExportNavigationObstacle::InCanExportNavigationObstacle' has a wrong offset!");

// Function FortniteGame.BuildingActor.SetCustomState
// 0x000C (0x000C - 0x0000)
struct BuildingActor_SetCustomState final
{
public:
	class FString                                 NewState;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_SetCustomState) == 0x000004, "Wrong alignment on BuildingActor_SetCustomState");
static_assert(sizeof(BuildingActor_SetCustomState) == 0x00000C, "Wrong size on BuildingActor_SetCustomState");
static_assert(offsetof(BuildingActor_SetCustomState, NewState) == 0x000000, "Member 'BuildingActor_SetCustomState::NewState' has a wrong offset!");

// Function FortniteGame.BuildingActor.SetNavigationModifier
// 0x0001 (0x0001 - 0x0000)
struct BuildingActor_SetNavigationModifier final
{
public:
	bool                                          bEnableModifier;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_SetNavigationModifier) == 0x000001, "Wrong alignment on BuildingActor_SetNavigationModifier");
static_assert(sizeof(BuildingActor_SetNavigationModifier) == 0x000001, "Wrong size on BuildingActor_SetNavigationModifier");
static_assert(offsetof(BuildingActor_SetNavigationModifier, bEnableModifier) == 0x000000, "Member 'BuildingActor_SetNavigationModifier::bEnableModifier' has a wrong offset!");

// Function FortniteGame.BuildingActor.ShouldDie
// 0x0010 (0x0010 - 0x0000)
struct BuildingActor_ShouldDie final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingActor_ShouldDie) == 0x000004, "Wrong alignment on BuildingActor_ShouldDie");
static_assert(sizeof(BuildingActor_ShouldDie) == 0x000010, "Wrong size on BuildingActor_ShouldDie");
static_assert(offsetof(BuildingActor_ShouldDie, Damage) == 0x000000, "Member 'BuildingActor_ShouldDie::Damage' has a wrong offset!");
static_assert(offsetof(BuildingActor_ShouldDie, EventInstigator) == 0x000004, "Member 'BuildingActor_ShouldDie::EventInstigator' has a wrong offset!");
static_assert(offsetof(BuildingActor_ShouldDie, DamageCauser) == 0x000008, "Member 'BuildingActor_ShouldDie::DamageCauser' has a wrong offset!");
static_assert(offsetof(BuildingActor_ShouldDie, ReturnValue) == 0x00000C, "Member 'BuildingActor_ShouldDie::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.BlueprintCanInteract
// 0x0008 (0x0008 - 0x0000)
struct BuildingActor_BlueprintCanInteract final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingActor_BlueprintCanInteract) == 0x000004, "Wrong alignment on BuildingActor_BlueprintCanInteract");
static_assert(sizeof(BuildingActor_BlueprintCanInteract) == 0x000008, "Wrong size on BuildingActor_BlueprintCanInteract");
static_assert(offsetof(BuildingActor_BlueprintCanInteract, InteractingPawn) == 0x000000, "Member 'BuildingActor_BlueprintCanInteract::InteractingPawn' has a wrong offset!");
static_assert(offsetof(BuildingActor_BlueprintCanInteract, ReturnValue) == 0x000004, "Member 'BuildingActor_BlueprintCanInteract::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.BlueprintGetFailedInteractionString
// 0x0010 (0x0010 - 0x0000)
struct BuildingActor_BlueprintGetFailedInteractionString final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_BlueprintGetFailedInteractionString) == 0x000004, "Wrong alignment on BuildingActor_BlueprintGetFailedInteractionString");
static_assert(sizeof(BuildingActor_BlueprintGetFailedInteractionString) == 0x000010, "Wrong size on BuildingActor_BlueprintGetFailedInteractionString");
static_assert(offsetof(BuildingActor_BlueprintGetFailedInteractionString, InteractingPawn) == 0x000000, "Member 'BuildingActor_BlueprintGetFailedInteractionString::InteractingPawn' has a wrong offset!");
static_assert(offsetof(BuildingActor_BlueprintGetFailedInteractionString, ReturnValue) == 0x000004, "Member 'BuildingActor_BlueprintGetFailedInteractionString::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.BlueprintGetInteractionString
// 0x0010 (0x0010 - 0x0000)
struct BuildingActor_BlueprintGetInteractionString final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_BlueprintGetInteractionString) == 0x000004, "Wrong alignment on BuildingActor_BlueprintGetInteractionString");
static_assert(sizeof(BuildingActor_BlueprintGetInteractionString) == 0x000010, "Wrong size on BuildingActor_BlueprintGetInteractionString");
static_assert(offsetof(BuildingActor_BlueprintGetInteractionString, InteractingPawn) == 0x000000, "Member 'BuildingActor_BlueprintGetInteractionString::InteractingPawn' has a wrong offset!");
static_assert(offsetof(BuildingActor_BlueprintGetInteractionString, ReturnValue) == 0x000004, "Member 'BuildingActor_BlueprintGetInteractionString::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetCentroid
// 0x000C (0x000C - 0x0000)
struct BuildingActor_GetCentroid final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetCentroid) == 0x000004, "Wrong alignment on BuildingActor_GetCentroid");
static_assert(sizeof(BuildingActor_GetCentroid) == 0x00000C, "Wrong size on BuildingActor_GetCentroid");
static_assert(offsetof(BuildingActor_GetCentroid, ReturnValue) == 0x000000, "Member 'BuildingActor_GetCentroid::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetCurrentBuildingLevel
// 0x0004 (0x0004 - 0x0000)
struct BuildingActor_GetCurrentBuildingLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetCurrentBuildingLevel) == 0x000004, "Wrong alignment on BuildingActor_GetCurrentBuildingLevel");
static_assert(sizeof(BuildingActor_GetCurrentBuildingLevel) == 0x000004, "Wrong size on BuildingActor_GetCurrentBuildingLevel");
static_assert(offsetof(BuildingActor_GetCurrentBuildingLevel, ReturnValue) == 0x000000, "Member 'BuildingActor_GetCurrentBuildingLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetCustomState
// 0x000C (0x000C - 0x0000)
struct BuildingActor_GetCustomState final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetCustomState) == 0x000004, "Wrong alignment on BuildingActor_GetCustomState");
static_assert(sizeof(BuildingActor_GetCustomState) == 0x00000C, "Wrong size on BuildingActor_GetCustomState");
static_assert(offsetof(BuildingActor_GetCustomState, ReturnValue) == 0x000000, "Member 'BuildingActor_GetCustomState::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct BuildingActor_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetHealth) == 0x000004, "Wrong alignment on BuildingActor_GetHealth");
static_assert(sizeof(BuildingActor_GetHealth) == 0x000004, "Wrong size on BuildingActor_GetHealth");
static_assert(offsetof(BuildingActor_GetHealth, ReturnValue) == 0x000000, "Member 'BuildingActor_GetHealth::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetHealthPercent
// 0x0004 (0x0004 - 0x0000)
struct BuildingActor_GetHealthPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetHealthPercent) == 0x000004, "Wrong alignment on BuildingActor_GetHealthPercent");
static_assert(sizeof(BuildingActor_GetHealthPercent) == 0x000004, "Wrong size on BuildingActor_GetHealthPercent");
static_assert(offsetof(BuildingActor_GetHealthPercent, ReturnValue) == 0x000000, "Member 'BuildingActor_GetHealthPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct BuildingActor_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetMaxHealth) == 0x000004, "Wrong alignment on BuildingActor_GetMaxHealth");
static_assert(sizeof(BuildingActor_GetMaxHealth) == 0x000004, "Wrong size on BuildingActor_GetMaxHealth");
static_assert(offsetof(BuildingActor_GetMaxHealth, ReturnValue) == 0x000000, "Member 'BuildingActor_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetMissingHealth
// 0x0004 (0x0004 - 0x0000)
struct BuildingActor_GetMissingHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetMissingHealth) == 0x000004, "Wrong alignment on BuildingActor_GetMissingHealth");
static_assert(sizeof(BuildingActor_GetMissingHealth) == 0x000004, "Wrong size on BuildingActor_GetMissingHealth");
static_assert(offsetof(BuildingActor_GetMissingHealth, ReturnValue) == 0x000000, "Member 'BuildingActor_GetMissingHealth::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetOwningController
// 0x0004 (0x0004 - 0x0000)
struct BuildingActor_GetOwningController final
{
public:
	class AController*                            ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetOwningController) == 0x000004, "Wrong alignment on BuildingActor_GetOwningController");
static_assert(sizeof(BuildingActor_GetOwningController) == 0x000004, "Wrong size on BuildingActor_GetOwningController");
static_assert(offsetof(BuildingActor_GetOwningController, ReturnValue) == 0x000000, "Member 'BuildingActor_GetOwningController::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.GetOwningPlayerState
// 0x0004 (0x0004 - 0x0000)
struct BuildingActor_GetOwningPlayerState final
{
public:
	class AFortPlayerState*                       ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_GetOwningPlayerState) == 0x000004, "Wrong alignment on BuildingActor_GetOwningPlayerState");
static_assert(sizeof(BuildingActor_GetOwningPlayerState) == 0x000004, "Wrong size on BuildingActor_GetOwningPlayerState");
static_assert(offsetof(BuildingActor_GetOwningPlayerState, ReturnValue) == 0x000000, "Member 'BuildingActor_GetOwningPlayerState::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.HasHealthLeft
// 0x0001 (0x0001 - 0x0000)
struct BuildingActor_HasHealthLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_HasHealthLeft) == 0x000001, "Wrong alignment on BuildingActor_HasHealthLeft");
static_assert(sizeof(BuildingActor_HasHealthLeft) == 0x000001, "Wrong size on BuildingActor_HasHealthLeft");
static_assert(offsetof(BuildingActor_HasHealthLeft, ReturnValue) == 0x000000, "Member 'BuildingActor_HasHealthLeft::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.IsAcceptablePositionForPlacement
// 0x0030 (0x0030 - 0x0000)
struct BuildingActor_IsAcceptablePositionForPlacement final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortDecoTool*                          DecoTool;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCDO;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutFailureReason;                                  // 0x0020(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingActor_IsAcceptablePositionForPlacement) == 0x000004, "Wrong alignment on BuildingActor_IsAcceptablePositionForPlacement");
static_assert(sizeof(BuildingActor_IsAcceptablePositionForPlacement) == 0x000030, "Wrong size on BuildingActor_IsAcceptablePositionForPlacement");
static_assert(offsetof(BuildingActor_IsAcceptablePositionForPlacement, InLocation) == 0x000000, "Member 'BuildingActor_IsAcceptablePositionForPlacement::InLocation' has a wrong offset!");
static_assert(offsetof(BuildingActor_IsAcceptablePositionForPlacement, InRotation) == 0x00000C, "Member 'BuildingActor_IsAcceptablePositionForPlacement::InRotation' has a wrong offset!");
static_assert(offsetof(BuildingActor_IsAcceptablePositionForPlacement, DecoTool) == 0x000018, "Member 'BuildingActor_IsAcceptablePositionForPlacement::DecoTool' has a wrong offset!");
static_assert(offsetof(BuildingActor_IsAcceptablePositionForPlacement, bIsCDO) == 0x00001C, "Member 'BuildingActor_IsAcceptablePositionForPlacement::bIsCDO' has a wrong offset!");
static_assert(offsetof(BuildingActor_IsAcceptablePositionForPlacement, OutFailureReason) == 0x000020, "Member 'BuildingActor_IsAcceptablePositionForPlacement::OutFailureReason' has a wrong offset!");
static_assert(offsetof(BuildingActor_IsAcceptablePositionForPlacement, ReturnValue) == 0x00002C, "Member 'BuildingActor_IsAcceptablePositionForPlacement::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.IsDamaged
// 0x0001 (0x0001 - 0x0000)
struct BuildingActor_IsDamaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_IsDamaged) == 0x000001, "Wrong alignment on BuildingActor_IsDamaged");
static_assert(sizeof(BuildingActor_IsDamaged) == 0x000001, "Wrong size on BuildingActor_IsDamaged");
static_assert(offsetof(BuildingActor_IsDamaged, ReturnValue) == 0x000000, "Member 'BuildingActor_IsDamaged::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.IsPlayerBuilt
// 0x0001 (0x0001 - 0x0000)
struct BuildingActor_IsPlayerBuilt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_IsPlayerBuilt) == 0x000001, "Wrong alignment on BuildingActor_IsPlayerBuilt");
static_assert(sizeof(BuildingActor_IsPlayerBuilt) == 0x000001, "Wrong size on BuildingActor_IsPlayerBuilt");
static_assert(offsetof(BuildingActor_IsPlayerBuilt, ReturnValue) == 0x000000, "Member 'BuildingActor_IsPlayerBuilt::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingActor.UseDefaultHealthBar
// 0x0001 (0x0001 - 0x0000)
struct BuildingActor_UseDefaultHealthBar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingActor_UseDefaultHealthBar) == 0x000001, "Wrong alignment on BuildingActor_UseDefaultHealthBar");
static_assert(sizeof(BuildingActor_UseDefaultHealthBar) == 0x000001, "Wrong size on BuildingActor_UseDefaultHealthBar");
static_assert(offsetof(BuildingActor_UseDefaultHealthBar, ReturnValue) == 0x000000, "Member 'BuildingActor_UseDefaultHealthBar::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterRiftManager.GetAssociatedMission
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterRiftManager_GetAssociatedMission final
{
public:
	class AFortMission*                           ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterRiftManager_GetAssociatedMission) == 0x000004, "Wrong alignment on FortAIEncounterRiftManager_GetAssociatedMission");
static_assert(sizeof(FortAIEncounterRiftManager_GetAssociatedMission) == 0x000004, "Wrong size on FortAIEncounterRiftManager_GetAssociatedMission");
static_assert(offsetof(FortAIEncounterRiftManager_GetAssociatedMission, ReturnValue) == 0x000000, "Member 'FortAIEncounterRiftManager_GetAssociatedMission::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.DisableAbilityDeliveryInfo
// 0x0008 (0x0008 - 0x0000)
struct BuildingGameplayActor_DisableAbilityDeliveryInfo final
{
public:
	struct FGameplayTag                           BucketTag;                                         // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_DisableAbilityDeliveryInfo) == 0x000004, "Wrong alignment on BuildingGameplayActor_DisableAbilityDeliveryInfo");
static_assert(sizeof(BuildingGameplayActor_DisableAbilityDeliveryInfo) == 0x000008, "Wrong size on BuildingGameplayActor_DisableAbilityDeliveryInfo");
static_assert(offsetof(BuildingGameplayActor_DisableAbilityDeliveryInfo, BucketTag) == 0x000000, "Member 'BuildingGameplayActor_DisableAbilityDeliveryInfo::BucketTag' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.EnableAbilityDeliveryInfo
// 0x0008 (0x0008 - 0x0000)
struct BuildingGameplayActor_EnableAbilityDeliveryInfo final
{
public:
	struct FGameplayTag                           BucketTag;                                         // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_EnableAbilityDeliveryInfo) == 0x000004, "Wrong alignment on BuildingGameplayActor_EnableAbilityDeliveryInfo");
static_assert(sizeof(BuildingGameplayActor_EnableAbilityDeliveryInfo) == 0x000008, "Wrong size on BuildingGameplayActor_EnableAbilityDeliveryInfo");
static_assert(offsetof(BuildingGameplayActor_EnableAbilityDeliveryInfo, BucketTag) == 0x000000, "Member 'BuildingGameplayActor_EnableAbilityDeliveryInfo::BucketTag' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.K2_AddGameplayCue
// 0x0014 (0x0014 - 0x0000)
struct BuildingGameplayActor_K2_AddGameplayCue final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           Context;                                           // 0x0008(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_K2_AddGameplayCue) == 0x000004, "Wrong alignment on BuildingGameplayActor_K2_AddGameplayCue");
static_assert(sizeof(BuildingGameplayActor_K2_AddGameplayCue) == 0x000014, "Wrong size on BuildingGameplayActor_K2_AddGameplayCue");
static_assert(offsetof(BuildingGameplayActor_K2_AddGameplayCue, GameplayCueTag) == 0x000000, "Member 'BuildingGameplayActor_K2_AddGameplayCue::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_K2_AddGameplayCue, Context) == 0x000008, "Member 'BuildingGameplayActor_K2_AddGameplayCue::Context' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.K2_ExecuteGameplayCue
// 0x0014 (0x0014 - 0x0000)
struct BuildingGameplayActor_K2_ExecuteGameplayCue final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           Context;                                           // 0x0008(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_K2_ExecuteGameplayCue) == 0x000004, "Wrong alignment on BuildingGameplayActor_K2_ExecuteGameplayCue");
static_assert(sizeof(BuildingGameplayActor_K2_ExecuteGameplayCue) == 0x000014, "Wrong size on BuildingGameplayActor_K2_ExecuteGameplayCue");
static_assert(offsetof(BuildingGameplayActor_K2_ExecuteGameplayCue, GameplayCueTag) == 0x000000, "Member 'BuildingGameplayActor_K2_ExecuteGameplayCue::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_K2_ExecuteGameplayCue, Context) == 0x000008, "Member 'BuildingGameplayActor_K2_ExecuteGameplayCue::Context' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.K2_ExecuteGameplayCueWithParams
// 0x008C (0x008C - 0x0000)
struct BuildingGameplayActor_K2_ExecuteGameplayCueWithParams final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0008(0x0084)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_K2_ExecuteGameplayCueWithParams) == 0x000004, "Wrong alignment on BuildingGameplayActor_K2_ExecuteGameplayCueWithParams");
static_assert(sizeof(BuildingGameplayActor_K2_ExecuteGameplayCueWithParams) == 0x00008C, "Wrong size on BuildingGameplayActor_K2_ExecuteGameplayCueWithParams");
static_assert(offsetof(BuildingGameplayActor_K2_ExecuteGameplayCueWithParams, GameplayCueTag) == 0x000000, "Member 'BuildingGameplayActor_K2_ExecuteGameplayCueWithParams::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_K2_ExecuteGameplayCueWithParams, GameplayCueParameters) == 0x000008, "Member 'BuildingGameplayActor_K2_ExecuteGameplayCueWithParams::GameplayCueParameters' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.K2_RemoveGameplayCue
// 0x0008 (0x0008 - 0x0000)
struct BuildingGameplayActor_K2_RemoveGameplayCue final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_K2_RemoveGameplayCue) == 0x000004, "Wrong alignment on BuildingGameplayActor_K2_RemoveGameplayCue");
static_assert(sizeof(BuildingGameplayActor_K2_RemoveGameplayCue) == 0x000008, "Wrong size on BuildingGameplayActor_K2_RemoveGameplayCue");
static_assert(offsetof(BuildingGameplayActor_K2_RemoveGameplayCue, GameplayCueTag) == 0x000000, "Member 'BuildingGameplayActor_K2_RemoveGameplayCue::GameplayCueTag' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.SetIgnoreInstigatorCollision
// 0x0001 (0x0001 - 0x0000)
struct BuildingGameplayActor_SetIgnoreInstigatorCollision final
{
public:
	bool                                          bShouldIgnore;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_SetIgnoreInstigatorCollision) == 0x000001, "Wrong alignment on BuildingGameplayActor_SetIgnoreInstigatorCollision");
static_assert(sizeof(BuildingGameplayActor_SetIgnoreInstigatorCollision) == 0x000001, "Wrong size on BuildingGameplayActor_SetIgnoreInstigatorCollision");
static_assert(offsetof(BuildingGameplayActor_SetIgnoreInstigatorCollision, bShouldIgnore) == 0x000000, "Member 'BuildingGameplayActor_SetIgnoreInstigatorCollision::bShouldIgnore' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.SetInitialVelocity
// 0x000C (0x000C - 0x0000)
struct BuildingGameplayActor_SetInitialVelocity final
{
public:
	struct FVector                                InitialVelocity;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_SetInitialVelocity) == 0x000004, "Wrong alignment on BuildingGameplayActor_SetInitialVelocity");
static_assert(sizeof(BuildingGameplayActor_SetInitialVelocity) == 0x00000C, "Wrong size on BuildingGameplayActor_SetInitialVelocity");
static_assert(offsetof(BuildingGameplayActor_SetInitialVelocity, InitialVelocity) == 0x000000, "Member 'BuildingGameplayActor_SetInitialVelocity::InitialVelocity' has a wrong offset!");

// Function FortniteGame.BuildingGameplayActor.GetTargetingSourceTransform
// 0x0040 (0x0040 - 0x0000)
struct BuildingGameplayActor_GetTargetingSourceTransform final
{
public:
	EFortAbilityTargetingSource                   Source;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingGameplayActor_GetTargetingSourceTransform) == 0x000010, "Wrong alignment on BuildingGameplayActor_GetTargetingSourceTransform");
static_assert(sizeof(BuildingGameplayActor_GetTargetingSourceTransform) == 0x000040, "Wrong size on BuildingGameplayActor_GetTargetingSourceTransform");
static_assert(offsetof(BuildingGameplayActor_GetTargetingSourceTransform, Source) == 0x000000, "Member 'BuildingGameplayActor_GetTargetingSourceTransform::Source' has a wrong offset!");
static_assert(offsetof(BuildingGameplayActor_GetTargetingSourceTransform, ReturnValue) == 0x000010, "Member 'BuildingGameplayActor_GetTargetingSourceTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingCapturePointActor.OnCapturePointActiveStateChange
// 0x0001 (0x0001 - 0x0000)
struct BuildingCapturePointActor_OnCapturePointActiveStateChange final
{
public:
	bool                                          bInActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingCapturePointActor_OnCapturePointActiveStateChange) == 0x000001, "Wrong alignment on BuildingCapturePointActor_OnCapturePointActiveStateChange");
static_assert(sizeof(BuildingCapturePointActor_OnCapturePointActiveStateChange) == 0x000001, "Wrong size on BuildingCapturePointActor_OnCapturePointActiveStateChange");
static_assert(offsetof(BuildingCapturePointActor_OnCapturePointActiveStateChange, bInActive) == 0x000000, "Member 'BuildingCapturePointActor_OnCapturePointActiveStateChange::bInActive' has a wrong offset!");

// Function FortniteGame.BuildingCapturePointActor.OnCapturePointLockStateChange
// 0x0001 (0x0001 - 0x0000)
struct BuildingCapturePointActor_OnCapturePointLockStateChange final
{
public:
	bool                                          bInLocked;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingCapturePointActor_OnCapturePointLockStateChange) == 0x000001, "Wrong alignment on BuildingCapturePointActor_OnCapturePointLockStateChange");
static_assert(sizeof(BuildingCapturePointActor_OnCapturePointLockStateChange) == 0x000001, "Wrong size on BuildingCapturePointActor_OnCapturePointLockStateChange");
static_assert(offsetof(BuildingCapturePointActor_OnCapturePointLockStateChange, bInLocked) == 0x000000, "Member 'BuildingCapturePointActor_OnCapturePointLockStateChange::bInLocked' has a wrong offset!");

// Function FortniteGame.BuildingCapturePointActor.OnCapturePointStateChange
// 0x0002 (0x0002 - 0x0000)
struct BuildingCapturePointActor_OnCapturePointStateChange final
{
public:
	ECaptureState                                 InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     InTeam;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingCapturePointActor_OnCapturePointStateChange) == 0x000001, "Wrong alignment on BuildingCapturePointActor_OnCapturePointStateChange");
static_assert(sizeof(BuildingCapturePointActor_OnCapturePointStateChange) == 0x000002, "Wrong size on BuildingCapturePointActor_OnCapturePointStateChange");
static_assert(offsetof(BuildingCapturePointActor_OnCapturePointStateChange, InState) == 0x000000, "Member 'BuildingCapturePointActor_OnCapturePointStateChange::InState' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnCapturePointStateChange, InTeam) == 0x000001, "Member 'BuildingCapturePointActor_OnCapturePointStateChange::InTeam' has a wrong offset!");

// Function FortniteGame.BuildingCapturePointActor.OnEnterCapturePoint
// 0x0090 (0x0090 - 0x0000)
struct BuildingCapturePointActor_OnEnterCapturePoint final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingCapturePointActor_OnEnterCapturePoint) == 0x000004, "Wrong alignment on BuildingCapturePointActor_OnEnterCapturePoint");
static_assert(sizeof(BuildingCapturePointActor_OnEnterCapturePoint) == 0x000090, "Wrong size on BuildingCapturePointActor_OnEnterCapturePoint");
static_assert(offsetof(BuildingCapturePointActor_OnEnterCapturePoint, OtherActor) == 0x000000, "Member 'BuildingCapturePointActor_OnEnterCapturePoint::OtherActor' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnEnterCapturePoint, OtherComp) == 0x000004, "Member 'BuildingCapturePointActor_OnEnterCapturePoint::OtherComp' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnEnterCapturePoint, OtherBodyIndex) == 0x000008, "Member 'BuildingCapturePointActor_OnEnterCapturePoint::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnEnterCapturePoint, bFromSweep) == 0x00000C, "Member 'BuildingCapturePointActor_OnEnterCapturePoint::bFromSweep' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnEnterCapturePoint, SweepResult) == 0x000010, "Member 'BuildingCapturePointActor_OnEnterCapturePoint::SweepResult' has a wrong offset!");

// Function FortniteGame.BuildingCapturePointActor.OnLeaveCapturePoint
// 0x000C (0x000C - 0x0000)
struct BuildingCapturePointActor_OnLeaveCapturePoint final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingCapturePointActor_OnLeaveCapturePoint) == 0x000004, "Wrong alignment on BuildingCapturePointActor_OnLeaveCapturePoint");
static_assert(sizeof(BuildingCapturePointActor_OnLeaveCapturePoint) == 0x00000C, "Wrong size on BuildingCapturePointActor_OnLeaveCapturePoint");
static_assert(offsetof(BuildingCapturePointActor_OnLeaveCapturePoint, OtherActor) == 0x000000, "Member 'BuildingCapturePointActor_OnLeaveCapturePoint::OtherActor' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnLeaveCapturePoint, OtherComp) == 0x000004, "Member 'BuildingCapturePointActor_OnLeaveCapturePoint::OtherComp' has a wrong offset!");
static_assert(offsetof(BuildingCapturePointActor_OnLeaveCapturePoint, OtherBodyIndex) == 0x000008, "Member 'BuildingCapturePointActor_OnLeaveCapturePoint::OtherBodyIndex' has a wrong offset!");

// Function FortniteGame.BuildingCapturePointActor.SetActivatedState
// 0x0001 (0x0001 - 0x0000)
struct BuildingCapturePointActor_SetActivatedState final
{
public:
	bool                                          bInActivated;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingCapturePointActor_SetActivatedState) == 0x000001, "Wrong alignment on BuildingCapturePointActor_SetActivatedState");
static_assert(sizeof(BuildingCapturePointActor_SetActivatedState) == 0x000001, "Wrong size on BuildingCapturePointActor_SetActivatedState");
static_assert(offsetof(BuildingCapturePointActor_SetActivatedState, bInActivated) == 0x000000, "Member 'BuildingCapturePointActor_SetActivatedState::bInActivated' has a wrong offset!");

// Function FortniteGame.BuildingCapturePointActor.GetCaptureState
// 0x0001 (0x0001 - 0x0000)
struct BuildingCapturePointActor_GetCaptureState final
{
public:
	ECaptureState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingCapturePointActor_GetCaptureState) == 0x000001, "Wrong alignment on BuildingCapturePointActor_GetCaptureState");
static_assert(sizeof(BuildingCapturePointActor_GetCaptureState) == 0x000001, "Wrong size on BuildingCapturePointActor_GetCaptureState");
static_assert(offsetof(BuildingCapturePointActor_GetCaptureState, ReturnValue) == 0x000000, "Member 'BuildingCapturePointActor_GetCaptureState::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFlagSpawn.IsSpawnedObjectAwayFromBase
// 0x0001 (0x0001 - 0x0000)
struct BuildingFlagSpawn_IsSpawnedObjectAwayFromBase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFlagSpawn_IsSpawnedObjectAwayFromBase) == 0x000001, "Wrong alignment on BuildingFlagSpawn_IsSpawnedObjectAwayFromBase");
static_assert(sizeof(BuildingFlagSpawn_IsSpawnedObjectAwayFromBase) == 0x000001, "Wrong size on BuildingFlagSpawn_IsSpawnedObjectAwayFromBase");
static_assert(offsetof(BuildingFlagSpawn_IsSpawnedObjectAwayFromBase, ReturnValue) == 0x000000, "Member 'BuildingFlagSpawn_IsSpawnedObjectAwayFromBase::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.GetNumberOfTeamCaptures
// 0x0008 (0x0008 - 0x0000)
struct BuildingItemCollectorActor_GetNumberOfTeamCaptures final
{
public:
	EFortTeam                                     InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_GetNumberOfTeamCaptures) == 0x000004, "Wrong alignment on BuildingItemCollectorActor_GetNumberOfTeamCaptures");
static_assert(sizeof(BuildingItemCollectorActor_GetNumberOfTeamCaptures) == 0x000008, "Wrong size on BuildingItemCollectorActor_GetNumberOfTeamCaptures");
static_assert(offsetof(BuildingItemCollectorActor_GetNumberOfTeamCaptures, InTeam) == 0x000000, "Member 'BuildingItemCollectorActor_GetNumberOfTeamCaptures::InTeam' has a wrong offset!");
static_assert(offsetof(BuildingItemCollectorActor_GetNumberOfTeamCaptures, ReturnValue) == 0x000004, "Member 'BuildingItemCollectorActor_GetNumberOfTeamCaptures::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.GetTeamDepositAmount
// 0x0008 (0x0008 - 0x0000)
struct BuildingItemCollectorActor_GetTeamDepositAmount final
{
public:
	EFortTeam                                     InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_GetTeamDepositAmount) == 0x000004, "Wrong alignment on BuildingItemCollectorActor_GetTeamDepositAmount");
static_assert(sizeof(BuildingItemCollectorActor_GetTeamDepositAmount) == 0x000008, "Wrong size on BuildingItemCollectorActor_GetTeamDepositAmount");
static_assert(offsetof(BuildingItemCollectorActor_GetTeamDepositAmount, InTeam) == 0x000000, "Member 'BuildingItemCollectorActor_GetTeamDepositAmount::InTeam' has a wrong offset!");
static_assert(offsetof(BuildingItemCollectorActor_GetTeamDepositAmount, ReturnValue) == 0x000004, "Member 'BuildingItemCollectorActor_GetTeamDepositAmount::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.GetTeamDepositGoal
// 0x0008 (0x0008 - 0x0000)
struct BuildingItemCollectorActor_GetTeamDepositGoal final
{
public:
	EFortTeam                                     InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_GetTeamDepositGoal) == 0x000004, "Wrong alignment on BuildingItemCollectorActor_GetTeamDepositGoal");
static_assert(sizeof(BuildingItemCollectorActor_GetTeamDepositGoal) == 0x000008, "Wrong size on BuildingItemCollectorActor_GetTeamDepositGoal");
static_assert(offsetof(BuildingItemCollectorActor_GetTeamDepositGoal, InTeam) == 0x000000, "Member 'BuildingItemCollectorActor_GetTeamDepositGoal::InTeam' has a wrong offset!");
static_assert(offsetof(BuildingItemCollectorActor_GetTeamDepositGoal, ReturnValue) == 0x000004, "Member 'BuildingItemCollectorActor_GetTeamDepositGoal::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.GetTeamReachedGoalCount
// 0x0008 (0x0008 - 0x0000)
struct BuildingItemCollectorActor_GetTeamReachedGoalCount final
{
public:
	EFortTeam                                     InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_GetTeamReachedGoalCount) == 0x000004, "Wrong alignment on BuildingItemCollectorActor_GetTeamReachedGoalCount");
static_assert(sizeof(BuildingItemCollectorActor_GetTeamReachedGoalCount) == 0x000008, "Wrong size on BuildingItemCollectorActor_GetTeamReachedGoalCount");
static_assert(offsetof(BuildingItemCollectorActor_GetTeamReachedGoalCount, InTeam) == 0x000000, "Member 'BuildingItemCollectorActor_GetTeamReachedGoalCount::InTeam' has a wrong offset!");
static_assert(offsetof(BuildingItemCollectorActor_GetTeamReachedGoalCount, ReturnValue) == 0x000004, "Member 'BuildingItemCollectorActor_GetTeamReachedGoalCount::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.OnItemCollectorStateChanged
// 0x0001 (0x0001 - 0x0000)
struct BuildingItemCollectorActor_OnItemCollectorStateChanged final
{
public:
	EFortItemCollectorState                       InItemCollectorState;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_OnItemCollectorStateChanged) == 0x000001, "Wrong alignment on BuildingItemCollectorActor_OnItemCollectorStateChanged");
static_assert(sizeof(BuildingItemCollectorActor_OnItemCollectorStateChanged) == 0x000001, "Wrong size on BuildingItemCollectorActor_OnItemCollectorStateChanged");
static_assert(offsetof(BuildingItemCollectorActor_OnItemCollectorStateChanged, InItemCollectorState) == 0x000000, "Member 'BuildingItemCollectorActor_OnItemCollectorStateChanged::InItemCollectorState' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.OnTeamReachedDepositGoal
// 0x0001 (0x0001 - 0x0000)
struct BuildingItemCollectorActor_OnTeamReachedDepositGoal final
{
public:
	EFortTeam                                     InControllingTeam;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_OnTeamReachedDepositGoal) == 0x000001, "Wrong alignment on BuildingItemCollectorActor_OnTeamReachedDepositGoal");
static_assert(sizeof(BuildingItemCollectorActor_OnTeamReachedDepositGoal) == 0x000001, "Wrong size on BuildingItemCollectorActor_OnTeamReachedDepositGoal");
static_assert(offsetof(BuildingItemCollectorActor_OnTeamReachedDepositGoal, InControllingTeam) == 0x000000, "Member 'BuildingItemCollectorActor_OnTeamReachedDepositGoal::InControllingTeam' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.SetItemCollectorState
// 0x0001 (0x0001 - 0x0000)
struct BuildingItemCollectorActor_SetItemCollectorState final
{
public:
	EFortItemCollectorState                       InItemCollectorState;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_SetItemCollectorState) == 0x000001, "Wrong alignment on BuildingItemCollectorActor_SetItemCollectorState");
static_assert(sizeof(BuildingItemCollectorActor_SetItemCollectorState) == 0x000001, "Wrong size on BuildingItemCollectorActor_SetItemCollectorState");
static_assert(offsetof(BuildingItemCollectorActor_SetItemCollectorState, InItemCollectorState) == 0x000000, "Member 'BuildingItemCollectorActor_SetItemCollectorState::InItemCollectorState' has a wrong offset!");

// Function FortniteGame.BuildingItemCollectorActor.UpdateTeamDepositValues
// 0x0018 (0x0018 - 0x0000)
struct BuildingItemCollectorActor_UpdateTeamDepositValues final
{
public:
	TArray<int32>                                 DepositAmounts;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 DepositGoals;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingItemCollectorActor_UpdateTeamDepositValues) == 0x000004, "Wrong alignment on BuildingItemCollectorActor_UpdateTeamDepositValues");
static_assert(sizeof(BuildingItemCollectorActor_UpdateTeamDepositValues) == 0x000018, "Wrong size on BuildingItemCollectorActor_UpdateTeamDepositValues");
static_assert(offsetof(BuildingItemCollectorActor_UpdateTeamDepositValues, DepositAmounts) == 0x000000, "Member 'BuildingItemCollectorActor_UpdateTeamDepositValues::DepositAmounts' has a wrong offset!");
static_assert(offsetof(BuildingItemCollectorActor_UpdateTeamDepositValues, DepositGoals) == 0x00000C, "Member 'BuildingItemCollectorActor_UpdateTeamDepositValues::DepositGoals' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.AddGoalsToWorldAssignment
// 0x0030 (0x0030 - 0x0000)
struct FortAIGoalManager_AddGoalsToWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0004(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FFortAIGoalInfo>                GoalInfos;                                         // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddGoalsToWorldAssignment) == 0x000004, "Wrong alignment on FortAIGoalManager_AddGoalsToWorldAssignment");
static_assert(sizeof(FortAIGoalManager_AddGoalsToWorldAssignment) == 0x000030, "Wrong size on FortAIGoalManager_AddGoalsToWorldAssignment");
static_assert(offsetof(FortAIGoalManager_AddGoalsToWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_AddGoalsToWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalsToWorldAssignment, AssignmentIdentifier) == 0x000004, "Member 'FortAIGoalManager_AddGoalsToWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalsToWorldAssignment, GoalInfos) == 0x000024, "Member 'FortAIGoalManager_AddGoalsToWorldAssignment::GoalInfos' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.AddGoalToWorldAssignment
// 0x003C (0x003C - 0x0000)
struct FortAIGoalManager_AddGoalToWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0004(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortAIGoalInfo                        GoalInfo;                                          // 0x0024(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddGoalToWorldAssignment) == 0x000004, "Wrong alignment on FortAIGoalManager_AddGoalToWorldAssignment");
static_assert(sizeof(FortAIGoalManager_AddGoalToWorldAssignment) == 0x00003C, "Wrong size on FortAIGoalManager_AddGoalToWorldAssignment");
static_assert(offsetof(FortAIGoalManager_AddGoalToWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_AddGoalToWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalToWorldAssignment, AssignmentIdentifier) == 0x000004, "Member 'FortAIGoalManager_AddGoalToWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalToWorldAssignment, GoalInfo) == 0x000024, "Member 'FortAIGoalManager_AddGoalToWorldAssignment::GoalInfo' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.CreateWorldAssignment
// 0x0050 (0x0050 - 0x0000)
struct FortAIGoalManager_CreateWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            WorldAssignmentIdentifier;                         // 0x0004(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAIGoalProvider>        GoalProvider;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x002C(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	EAssignmentCreationResult                     CreationResult;                                    // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIGoalManager_CreateWorldAssignment) == 0x000004, "Wrong alignment on FortAIGoalManager_CreateWorldAssignment");
static_assert(sizeof(FortAIGoalManager_CreateWorldAssignment) == 0x000050, "Wrong size on FortAIGoalManager_CreateWorldAssignment");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_CreateWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, WorldAssignmentIdentifier) == 0x000004, "Member 'FortAIGoalManager_CreateWorldAssignment::WorldAssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, AssignmentSettings) == 0x000024, "Member 'FortAIGoalManager_CreateWorldAssignment::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, GoalProvider) == 0x000028, "Member 'FortAIGoalManager_CreateWorldAssignment::GoalProvider' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, AssignmentIdentifier) == 0x00002C, "Member 'FortAIGoalManager_CreateWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_CreateWorldAssignment, CreationResult) == 0x00004C, "Member 'FortAIGoalManager_CreateWorldAssignment::CreationResult' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.MakeGoalFromActor
// 0x0024 (0x0024 - 0x0000)
struct FortAIGoalManager_MakeGoalFromActor final
{
public:
	struct FFortAIGoalInfo                        Goal;                                              // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           GoalActor;                                         // 0x001C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActorAlwaysPerceived;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bGoalActorAllowsUndermining;                       // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIGoalManager_MakeGoalFromActor) == 0x000004, "Wrong alignment on FortAIGoalManager_MakeGoalFromActor");
static_assert(sizeof(FortAIGoalManager_MakeGoalFromActor) == 0x000024, "Wrong size on FortAIGoalManager_MakeGoalFromActor");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, Goal) == 0x000000, "Member 'FortAIGoalManager_MakeGoalFromActor::Goal' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, WorldContextObject) == 0x000018, "Member 'FortAIGoalManager_MakeGoalFromActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, GoalActor) == 0x00001C, "Member 'FortAIGoalManager_MakeGoalFromActor::GoalActor' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, bActorAlwaysPerceived) == 0x000020, "Member 'FortAIGoalManager_MakeGoalFromActor::bActorAlwaysPerceived' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromActor, bGoalActorAllowsUndermining) == 0x000021, "Member 'FortAIGoalManager_MakeGoalFromActor::bGoalActorAllowsUndermining' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.MakeGoalFromLocation
// 0x0028 (0x0028 - 0x0000)
struct FortAIGoalManager_MakeGoalFromLocation final
{
public:
	struct FFortAIGoalInfo                        Goal;                                              // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GoalLocation;                                      // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_MakeGoalFromLocation) == 0x000004, "Wrong alignment on FortAIGoalManager_MakeGoalFromLocation");
static_assert(sizeof(FortAIGoalManager_MakeGoalFromLocation) == 0x000028, "Wrong size on FortAIGoalManager_MakeGoalFromLocation");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromLocation, Goal) == 0x000000, "Member 'FortAIGoalManager_MakeGoalFromLocation::Goal' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromLocation, WorldContextObject) == 0x000018, "Member 'FortAIGoalManager_MakeGoalFromLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalFromLocation, GoalLocation) == 0x00001C, "Member 'FortAIGoalManager_MakeGoalFromLocation::GoalLocation' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.MakeGoalsFromActors
// 0x0020 (0x0020 - 0x0000)
struct FortAIGoalManager_MakeGoalsFromActors final
{
public:
	TArray<struct FFortAIGoalInfo>                Goals;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         GoalActors;                                        // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bActorsAlwaysPerceived;                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bGoalActorsAllowUndermining;                       // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIGoalManager_MakeGoalsFromActors) == 0x000004, "Wrong alignment on FortAIGoalManager_MakeGoalsFromActors");
static_assert(sizeof(FortAIGoalManager_MakeGoalsFromActors) == 0x000020, "Wrong size on FortAIGoalManager_MakeGoalsFromActors");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, Goals) == 0x000000, "Member 'FortAIGoalManager_MakeGoalsFromActors::Goals' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, WorldContextObject) == 0x00000C, "Member 'FortAIGoalManager_MakeGoalsFromActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, GoalActors) == 0x000010, "Member 'FortAIGoalManager_MakeGoalsFromActors::GoalActors' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, bActorsAlwaysPerceived) == 0x00001C, "Member 'FortAIGoalManager_MakeGoalsFromActors::bActorsAlwaysPerceived' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromActors, bGoalActorsAllowUndermining) == 0x00001D, "Member 'FortAIGoalManager_MakeGoalsFromActors::bGoalActorsAllowUndermining' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.MakeGoalsFromLocations
// 0x001C (0x001C - 0x0000)
struct FortAIGoalManager_MakeGoalsFromLocations final
{
public:
	TArray<struct FFortAIGoalInfo>                Goals;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        GoalLocations;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_MakeGoalsFromLocations) == 0x000004, "Wrong alignment on FortAIGoalManager_MakeGoalsFromLocations");
static_assert(sizeof(FortAIGoalManager_MakeGoalsFromLocations) == 0x00001C, "Wrong size on FortAIGoalManager_MakeGoalsFromLocations");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocations, Goals) == 0x000000, "Member 'FortAIGoalManager_MakeGoalsFromLocations::Goals' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocations, WorldContextObject) == 0x00000C, "Member 'FortAIGoalManager_MakeGoalsFromLocations::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocations, GoalLocations) == 0x000010, "Member 'FortAIGoalManager_MakeGoalsFromLocations::GoalLocations' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.MakeGoalsFromLocationsAndActor
// 0x0020 (0x0020 - 0x0000)
struct FortAIGoalManager_MakeGoalsFromLocationsAndActor final
{
public:
	TArray<struct FFortAIGoalInfo>                Goals;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        GoalLocations;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class AActor*                           GoalActor;                                         // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_MakeGoalsFromLocationsAndActor) == 0x000004, "Wrong alignment on FortAIGoalManager_MakeGoalsFromLocationsAndActor");
static_assert(sizeof(FortAIGoalManager_MakeGoalsFromLocationsAndActor) == 0x000020, "Wrong size on FortAIGoalManager_MakeGoalsFromLocationsAndActor");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocationsAndActor, Goals) == 0x000000, "Member 'FortAIGoalManager_MakeGoalsFromLocationsAndActor::Goals' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocationsAndActor, WorldContextObject) == 0x00000C, "Member 'FortAIGoalManager_MakeGoalsFromLocationsAndActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocationsAndActor, GoalLocations) == 0x000010, "Member 'FortAIGoalManager_MakeGoalsFromLocationsAndActor::GoalLocations' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_MakeGoalsFromLocationsAndActor, GoalActor) == 0x00001C, "Member 'FortAIGoalManager_MakeGoalsFromLocationsAndActor::GoalActor' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.RemoveGoalFromWorldAssignment
// 0x003C (0x003C - 0x0000)
struct FortAIGoalManager_RemoveGoalFromWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0004(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortAIGoalInfo                        GoalInfo;                                          // 0x0024(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_RemoveGoalFromWorldAssignment) == 0x000004, "Wrong alignment on FortAIGoalManager_RemoveGoalFromWorldAssignment");
static_assert(sizeof(FortAIGoalManager_RemoveGoalFromWorldAssignment) == 0x00003C, "Wrong size on FortAIGoalManager_RemoveGoalFromWorldAssignment");
static_assert(offsetof(FortAIGoalManager_RemoveGoalFromWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_RemoveGoalFromWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveGoalFromWorldAssignment, AssignmentIdentifier) == 0x000004, "Member 'FortAIGoalManager_RemoveGoalFromWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveGoalFromWorldAssignment, GoalInfo) == 0x000024, "Member 'FortAIGoalManager_RemoveGoalFromWorldAssignment::GoalInfo' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.RemoveGoalsFromWorldAssignment
// 0x0030 (0x0030 - 0x0000)
struct FortAIGoalManager_RemoveGoalsFromWorldAssignment final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0004(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FFortAIGoalInfo>                GoalInfos;                                         // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_RemoveGoalsFromWorldAssignment) == 0x000004, "Wrong alignment on FortAIGoalManager_RemoveGoalsFromWorldAssignment");
static_assert(sizeof(FortAIGoalManager_RemoveGoalsFromWorldAssignment) == 0x000030, "Wrong size on FortAIGoalManager_RemoveGoalsFromWorldAssignment");
static_assert(offsetof(FortAIGoalManager_RemoveGoalsFromWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_RemoveGoalsFromWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveGoalsFromWorldAssignment, AssignmentIdentifier) == 0x000004, "Member 'FortAIGoalManager_RemoveGoalsFromWorldAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveGoalsFromWorldAssignment, GoalInfos) == 0x000024, "Member 'FortAIGoalManager_RemoveGoalsFromWorldAssignment::GoalInfos' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.RemoveWorldAssignment
// 0x0024 (0x0024 - 0x0000)
struct FortAIGoalManager_RemoveWorldAssignment final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0004(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_RemoveWorldAssignment) == 0x000004, "Wrong alignment on FortAIGoalManager_RemoveWorldAssignment");
static_assert(sizeof(FortAIGoalManager_RemoveWorldAssignment) == 0x000024, "Wrong size on FortAIGoalManager_RemoveWorldAssignment");
static_assert(offsetof(FortAIGoalManager_RemoveWorldAssignment, WorldContextObject) == 0x000000, "Member 'FortAIGoalManager_RemoveWorldAssignment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_RemoveWorldAssignment, AssignmentIdentifier) == 0x000004, "Member 'FortAIGoalManager_RemoveWorldAssignment::AssignmentIdentifier' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.AddGoal
// 0x0008 (0x0008 - 0x0000)
struct FortAIGoalManager_AddGoal final
{
public:
	class AActor*                                 GoalActor;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              GoalSettings;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddGoal) == 0x000004, "Wrong alignment on FortAIGoalManager_AddGoal");
static_assert(sizeof(FortAIGoalManager_AddGoal) == 0x000008, "Wrong size on FortAIGoalManager_AddGoal");
static_assert(offsetof(FortAIGoalManager_AddGoal, GoalActor) == 0x000000, "Member 'FortAIGoalManager_AddGoal::GoalActor' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoal, GoalSettings) == 0x000004, "Member 'FortAIGoalManager_AddGoal::GoalSettings' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.AddGoalActorToAssignment
// 0x0008 (0x0008 - 0x0000)
struct FortAIGoalManager_AddGoalActorToAssignment final
{
public:
	class UFortAIAssignment*                      Assignment;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GoalActor;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddGoalActorToAssignment) == 0x000004, "Wrong alignment on FortAIGoalManager_AddGoalActorToAssignment");
static_assert(sizeof(FortAIGoalManager_AddGoalActorToAssignment) == 0x000008, "Wrong size on FortAIGoalManager_AddGoalActorToAssignment");
static_assert(offsetof(FortAIGoalManager_AddGoalActorToAssignment, Assignment) == 0x000000, "Member 'FortAIGoalManager_AddGoalActorToAssignment::Assignment' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddGoalActorToAssignment, GoalActor) == 0x000004, "Member 'FortAIGoalManager_AddGoalActorToAssignment::GoalActor' has a wrong offset!");

// Function FortniteGame.FortAIGoalManager.AddWorldAssignment
// 0x000C (0x000C - 0x0000)
struct FortAIGoalManager_AddWorldAssignment final
{
public:
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GoalActor;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignment*                      ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIGoalManager_AddWorldAssignment) == 0x000004, "Wrong alignment on FortAIGoalManager_AddWorldAssignment");
static_assert(sizeof(FortAIGoalManager_AddWorldAssignment) == 0x00000C, "Wrong size on FortAIGoalManager_AddWorldAssignment");
static_assert(offsetof(FortAIGoalManager_AddWorldAssignment, AssignmentSettings) == 0x000000, "Member 'FortAIGoalManager_AddWorldAssignment::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddWorldAssignment, GoalActor) == 0x000004, "Member 'FortAIGoalManager_AddWorldAssignment::GoalActor' has a wrong offset!");
static_assert(offsetof(FortAIGoalManager_AddWorldAssignment, ReturnValue) == 0x000008, "Member 'FortAIGoalManager_AddWorldAssignment::ReturnValue' has a wrong offset!");

// Function FortniteGame.SBAGrantedBuildingGameplayActor.GetOwnerStrategicBuildingActor
// 0x0004 (0x0004 - 0x0000)
struct SBAGrantedBuildingGameplayActor_GetOwnerStrategicBuildingActor final
{
public:
	class AStrategicBuildingActor*                ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SBAGrantedBuildingGameplayActor_GetOwnerStrategicBuildingActor) == 0x000004, "Wrong alignment on SBAGrantedBuildingGameplayActor_GetOwnerStrategicBuildingActor");
static_assert(sizeof(SBAGrantedBuildingGameplayActor_GetOwnerStrategicBuildingActor) == 0x000004, "Wrong size on SBAGrantedBuildingGameplayActor_GetOwnerStrategicBuildingActor");
static_assert(offsetof(SBAGrantedBuildingGameplayActor_GetOwnerStrategicBuildingActor, ReturnValue) == 0x000000, "Member 'SBAGrantedBuildingGameplayActor_GetOwnerStrategicBuildingActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.AttemptIncrementLevelUnlockProgress
// 0x000C (0x000C - 0x0000)
struct StrategicBuildingActor_AttemptIncrementLevelUnlockProgress final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InProgressDelta;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StrategicBuildingActor_AttemptIncrementLevelUnlockProgress) == 0x000004, "Wrong alignment on StrategicBuildingActor_AttemptIncrementLevelUnlockProgress");
static_assert(sizeof(StrategicBuildingActor_AttemptIncrementLevelUnlockProgress) == 0x00000C, "Wrong size on StrategicBuildingActor_AttemptIncrementLevelUnlockProgress");
static_assert(offsetof(StrategicBuildingActor_AttemptIncrementLevelUnlockProgress, InLevel) == 0x000000, "Member 'StrategicBuildingActor_AttemptIncrementLevelUnlockProgress::InLevel' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_AttemptIncrementLevelUnlockProgress, InProgressDelta) == 0x000004, "Member 'StrategicBuildingActor_AttemptIncrementLevelUnlockProgress::InProgressDelta' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_AttemptIncrementLevelUnlockProgress, ReturnValue) == 0x000008, "Member 'StrategicBuildingActor_AttemptIncrementLevelUnlockProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.GiveItemFromStrategicBuildingToPlayer
// 0x000C (0x000C - 0x0000)
struct StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortWorldItemDefinition*         ItemDefinition;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToGive;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer) == 0x000004, "Wrong alignment on StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer");
static_assert(sizeof(StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer) == 0x00000C, "Wrong size on StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer");
static_assert(offsetof(StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer, PlayerController) == 0x000000, "Member 'StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer, ItemDefinition) == 0x000004, "Member 'StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer::ItemDefinition' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer, NumberToGive) == 0x000008, "Member 'StrategicBuildingActor_GiveItemFromStrategicBuildingToPlayer::NumberToGive' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.OnActiveStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct StrategicBuildingActor_OnActiveStatusChanged final
{
public:
	bool                                          bNewActiveStatus;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_OnActiveStatusChanged) == 0x000001, "Wrong alignment on StrategicBuildingActor_OnActiveStatusChanged");
static_assert(sizeof(StrategicBuildingActor_OnActiveStatusChanged) == 0x000001, "Wrong size on StrategicBuildingActor_OnActiveStatusChanged");
static_assert(offsetof(StrategicBuildingActor_OnActiveStatusChanged, bNewActiveStatus) == 0x000000, "Member 'StrategicBuildingActor_OnActiveStatusChanged::bNewActiveStatus' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.OnConstructionEndedPlayEffects
// 0x0004 (0x0004 - 0x0000)
struct StrategicBuildingActor_OnConstructionEndedPlayEffects final
{
public:
	int32                                         ConstructionLevel;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_OnConstructionEndedPlayEffects) == 0x000004, "Wrong alignment on StrategicBuildingActor_OnConstructionEndedPlayEffects");
static_assert(sizeof(StrategicBuildingActor_OnConstructionEndedPlayEffects) == 0x000004, "Wrong size on StrategicBuildingActor_OnConstructionEndedPlayEffects");
static_assert(offsetof(StrategicBuildingActor_OnConstructionEndedPlayEffects, ConstructionLevel) == 0x000000, "Member 'StrategicBuildingActor_OnConstructionEndedPlayEffects::ConstructionLevel' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.OnConstructionStartedPlayEffects
// 0x0014 (0x0014 - 0x0000)
struct StrategicBuildingActor_OnConstructionStartedPlayEffects final
{
public:
	float                                         ServerStartTime;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerEndTime;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentServerTime;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedPct;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConstructionLvl;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_OnConstructionStartedPlayEffects) == 0x000004, "Wrong alignment on StrategicBuildingActor_OnConstructionStartedPlayEffects");
static_assert(sizeof(StrategicBuildingActor_OnConstructionStartedPlayEffects) == 0x000014, "Wrong size on StrategicBuildingActor_OnConstructionStartedPlayEffects");
static_assert(offsetof(StrategicBuildingActor_OnConstructionStartedPlayEffects, ServerStartTime) == 0x000000, "Member 'StrategicBuildingActor_OnConstructionStartedPlayEffects::ServerStartTime' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_OnConstructionStartedPlayEffects, ServerEndTime) == 0x000004, "Member 'StrategicBuildingActor_OnConstructionStartedPlayEffects::ServerEndTime' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_OnConstructionStartedPlayEffects, CurrentServerTime) == 0x000008, "Member 'StrategicBuildingActor_OnConstructionStartedPlayEffects::CurrentServerTime' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_OnConstructionStartedPlayEffects, ElapsedPct) == 0x00000C, "Member 'StrategicBuildingActor_OnConstructionStartedPlayEffects::ElapsedPct' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_OnConstructionStartedPlayEffects, ConstructionLvl) == 0x000010, "Member 'StrategicBuildingActor_OnConstructionStartedPlayEffects::ConstructionLvl' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.OnConstructionTickPlayEffects
// 0x000C (0x000C - 0x0000)
struct StrategicBuildingActor_OnConstructionTickPlayEffects final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedPct;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConstructionLvl;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_OnConstructionTickPlayEffects) == 0x000004, "Wrong alignment on StrategicBuildingActor_OnConstructionTickPlayEffects");
static_assert(sizeof(StrategicBuildingActor_OnConstructionTickPlayEffects) == 0x00000C, "Wrong size on StrategicBuildingActor_OnConstructionTickPlayEffects");
static_assert(offsetof(StrategicBuildingActor_OnConstructionTickPlayEffects, DeltaTime) == 0x000000, "Member 'StrategicBuildingActor_OnConstructionTickPlayEffects::DeltaTime' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_OnConstructionTickPlayEffects, ElapsedPct) == 0x000004, "Member 'StrategicBuildingActor_OnConstructionTickPlayEffects::ElapsedPct' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_OnConstructionTickPlayEffects, ConstructionLvl) == 0x000008, "Member 'StrategicBuildingActor_OnConstructionTickPlayEffects::ConstructionLvl' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.GetCurrentLevelUnlockProgress
// 0x0008 (0x0008 - 0x0000)
struct StrategicBuildingActor_GetCurrentLevelUnlockProgress final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_GetCurrentLevelUnlockProgress) == 0x000004, "Wrong alignment on StrategicBuildingActor_GetCurrentLevelUnlockProgress");
static_assert(sizeof(StrategicBuildingActor_GetCurrentLevelUnlockProgress) == 0x000008, "Wrong size on StrategicBuildingActor_GetCurrentLevelUnlockProgress");
static_assert(offsetof(StrategicBuildingActor_GetCurrentLevelUnlockProgress, InLevel) == 0x000000, "Member 'StrategicBuildingActor_GetCurrentLevelUnlockProgress::InLevel' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_GetCurrentLevelUnlockProgress, ReturnValue) == 0x000004, "Member 'StrategicBuildingActor_GetCurrentLevelUnlockProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.GetDeathEffectsLocation
// 0x000C (0x000C - 0x0000)
struct StrategicBuildingActor_GetDeathEffectsLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_GetDeathEffectsLocation) == 0x000004, "Wrong alignment on StrategicBuildingActor_GetDeathEffectsLocation");
static_assert(sizeof(StrategicBuildingActor_GetDeathEffectsLocation) == 0x00000C, "Wrong size on StrategicBuildingActor_GetDeathEffectsLocation");
static_assert(offsetof(StrategicBuildingActor_GetDeathEffectsLocation, ReturnValue) == 0x000000, "Member 'StrategicBuildingActor_GetDeathEffectsLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.GetDeathEffectsRotation
// 0x000C (0x000C - 0x0000)
struct StrategicBuildingActor_GetDeathEffectsRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_GetDeathEffectsRotation) == 0x000004, "Wrong alignment on StrategicBuildingActor_GetDeathEffectsRotation");
static_assert(sizeof(StrategicBuildingActor_GetDeathEffectsRotation) == 0x00000C, "Wrong size on StrategicBuildingActor_GetDeathEffectsRotation");
static_assert(offsetof(StrategicBuildingActor_GetDeathEffectsRotation, ReturnValue) == 0x000000, "Member 'StrategicBuildingActor_GetDeathEffectsRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.GetDeathEffectsScale
// 0x000C (0x000C - 0x0000)
struct StrategicBuildingActor_GetDeathEffectsScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_GetDeathEffectsScale) == 0x000004, "Wrong alignment on StrategicBuildingActor_GetDeathEffectsScale");
static_assert(sizeof(StrategicBuildingActor_GetDeathEffectsScale) == 0x00000C, "Wrong size on StrategicBuildingActor_GetDeathEffectsScale");
static_assert(offsetof(StrategicBuildingActor_GetDeathEffectsScale, ReturnValue) == 0x000000, "Member 'StrategicBuildingActor_GetDeathEffectsScale::ReturnValue' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.GetMaxLevelUnlockProgress
// 0x0008 (0x0008 - 0x0000)
struct StrategicBuildingActor_GetMaxLevelUnlockProgress final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_GetMaxLevelUnlockProgress) == 0x000004, "Wrong alignment on StrategicBuildingActor_GetMaxLevelUnlockProgress");
static_assert(sizeof(StrategicBuildingActor_GetMaxLevelUnlockProgress) == 0x000008, "Wrong size on StrategicBuildingActor_GetMaxLevelUnlockProgress");
static_assert(offsetof(StrategicBuildingActor_GetMaxLevelUnlockProgress, InLevel) == 0x000000, "Member 'StrategicBuildingActor_GetMaxLevelUnlockProgress::InLevel' has a wrong offset!");
static_assert(offsetof(StrategicBuildingActor_GetMaxLevelUnlockProgress, ReturnValue) == 0x000004, "Member 'StrategicBuildingActor_GetMaxLevelUnlockProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.StrategicBuildingActor.IsActive
// 0x0001 (0x0001 - 0x0000)
struct StrategicBuildingActor_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StrategicBuildingActor_IsActive) == 0x000001, "Wrong alignment on StrategicBuildingActor_IsActive");
static_assert(sizeof(StrategicBuildingActor_IsActive) == 0x000001, "Wrong size on StrategicBuildingActor_IsActive");
static_assert(offsetof(StrategicBuildingActor_IsActive, ReturnValue) == 0x000000, "Member 'StrategicBuildingActor_IsActive::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPBaseCornerstone.OnInvincibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct FortPvPBaseCornerstone_OnInvincibilityChanged final
{
public:
	bool                                          bIsInvincible;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPBaseCornerstone_OnInvincibilityChanged) == 0x000001, "Wrong alignment on FortPvPBaseCornerstone_OnInvincibilityChanged");
static_assert(sizeof(FortPvPBaseCornerstone_OnInvincibilityChanged) == 0x000001, "Wrong size on FortPvPBaseCornerstone_OnInvincibilityChanged");
static_assert(offsetof(FortPvPBaseCornerstone_OnInvincibilityChanged, bIsInvincible) == 0x000000, "Member 'FortPvPBaseCornerstone_OnInvincibilityChanged::bIsInvincible' has a wrong offset!");

// Function FortniteGame.FortPvPBaseCornerstone.SetInvincibility
// 0x0001 (0x0001 - 0x0000)
struct FortPvPBaseCornerstone_SetInvincibility final
{
public:
	bool                                          bInInvincible;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPBaseCornerstone_SetInvincibility) == 0x000001, "Wrong alignment on FortPvPBaseCornerstone_SetInvincibility");
static_assert(sizeof(FortPvPBaseCornerstone_SetInvincibility) == 0x000001, "Wrong size on FortPvPBaseCornerstone_SetInvincibility");
static_assert(offsetof(FortPvPBaseCornerstone_SetInvincibility, bInInvincible) == 0x000000, "Member 'FortPvPBaseCornerstone_SetInvincibility::bInInvincible' has a wrong offset!");

// Function FortniteGame.BuildingRift.OnReceiveSpawnedAIPawn
// 0x0004 (0x0004 - 0x0000)
struct BuildingRift_OnReceiveSpawnedAIPawn final
{
public:
	class AFortAIPawn*                            SpawnedAI;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingRift_OnReceiveSpawnedAIPawn) == 0x000004, "Wrong alignment on BuildingRift_OnReceiveSpawnedAIPawn");
static_assert(sizeof(BuildingRift_OnReceiveSpawnedAIPawn) == 0x000004, "Wrong size on BuildingRift_OnReceiveSpawnedAIPawn");
static_assert(offsetof(BuildingRift_OnReceiveSpawnedAIPawn, SpawnedAI) == 0x000000, "Member 'BuildingRift_OnReceiveSpawnedAIPawn::SpawnedAI' has a wrong offset!");

// Function FortniteGame.FortCrackEffect.OnBounceAnimationUpdate
// 0x0030 (0x0030 - 0x0000)
struct FortCrackEffect_OnBounceAnimationUpdate final
{
public:
	struct FFortBounceData                        BounceData;                                        // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCrackEffect_OnBounceAnimationUpdate) == 0x000004, "Wrong alignment on FortCrackEffect_OnBounceAnimationUpdate");
static_assert(sizeof(FortCrackEffect_OnBounceAnimationUpdate) == 0x000030, "Wrong size on FortCrackEffect_OnBounceAnimationUpdate");
static_assert(offsetof(FortCrackEffect_OnBounceAnimationUpdate, BounceData) == 0x000000, "Member 'FortCrackEffect_OnBounceAnimationUpdate::BounceData' has a wrong offset!");

// Function FortniteGame.FortCrackEffect.HasStartingPosition
// 0x0001 (0x0001 - 0x0000)
struct FortCrackEffect_HasStartingPosition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCrackEffect_HasStartingPosition) == 0x000001, "Wrong alignment on FortCrackEffect_HasStartingPosition");
static_assert(sizeof(FortCrackEffect_HasStartingPosition) == 0x000001, "Wrong size on FortCrackEffect_HasStartingPosition");
static_assert(offsetof(FortCrackEffect_HasStartingPosition, ReturnValue) == 0x000000, "Member 'FortCrackEffect_HasStartingPosition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterTargetInterface.GetObjectiveCompletionPercentage
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage) == 0x000004, "Wrong alignment on FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage");
static_assert(sizeof(FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage) == 0x000004, "Wrong size on FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage");
static_assert(offsetof(FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage, ReturnValue) == 0x000000, "Member 'FortAIEncounterTargetInterface_GetObjectiveCompletionPercentage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterTargetInterface.IsFloatingTarget
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterTargetInterface_IsFloatingTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterTargetInterface_IsFloatingTarget) == 0x000001, "Wrong alignment on FortAIEncounterTargetInterface_IsFloatingTarget");
static_assert(sizeof(FortAIEncounterTargetInterface_IsFloatingTarget) == 0x000001, "Wrong size on FortAIEncounterTargetInterface_IsFloatingTarget");
static_assert(offsetof(FortAIEncounterTargetInterface_IsFloatingTarget, ReturnValue) == 0x000000, "Member 'FortAIEncounterTargetInterface_IsFloatingTarget::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAttachToActorInterface.GetActorAttachedTo
// 0x0004 (0x0004 - 0x0000)
struct FortAttachToActorInterface_GetActorAttachedTo final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAttachToActorInterface_GetActorAttachedTo) == 0x000004, "Wrong alignment on FortAttachToActorInterface_GetActorAttachedTo");
static_assert(sizeof(FortAttachToActorInterface_GetActorAttachedTo) == 0x000004, "Wrong size on FortAttachToActorInterface_GetActorAttachedTo");
static_assert(offsetof(FortAttachToActorInterface_GetActorAttachedTo, ReturnValue) == 0x000000, "Member 'FortAttachToActorInterface_GetActorAttachedTo::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.AttachBuildingActorToMe
// 0x0008 (0x0008 - 0x0000)
struct BuildingSMActor_AttachBuildingActorToMe final
{
public:
	class ABuildingSMActor*                       ActorToAttach;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceAttachment;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingSMActor_AttachBuildingActorToMe) == 0x000004, "Wrong alignment on BuildingSMActor_AttachBuildingActorToMe");
static_assert(sizeof(BuildingSMActor_AttachBuildingActorToMe) == 0x000008, "Wrong size on BuildingSMActor_AttachBuildingActorToMe");
static_assert(offsetof(BuildingSMActor_AttachBuildingActorToMe, ActorToAttach) == 0x000000, "Member 'BuildingSMActor_AttachBuildingActorToMe::ActorToAttach' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_AttachBuildingActorToMe, bForceAttachment) == 0x000004, "Member 'BuildingSMActor_AttachBuildingActorToMe::bForceAttachment' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.BlueprintAttemptBuildingUpgrade
// 0x0008 (0x0008 - 0x0000)
struct BuildingSMActor_BlueprintAttemptBuildingUpgrade final
{
public:
	class AFortPlayerController*                  PC;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpgradeLevelDelta;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_BlueprintAttemptBuildingUpgrade) == 0x000004, "Wrong alignment on BuildingSMActor_BlueprintAttemptBuildingUpgrade");
static_assert(sizeof(BuildingSMActor_BlueprintAttemptBuildingUpgrade) == 0x000008, "Wrong size on BuildingSMActor_BlueprintAttemptBuildingUpgrade");
static_assert(offsetof(BuildingSMActor_BlueprintAttemptBuildingUpgrade, PC) == 0x000000, "Member 'BuildingSMActor_BlueprintAttemptBuildingUpgrade::PC' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_BlueprintAttemptBuildingUpgrade, UpgradeLevelDelta) == 0x000004, "Member 'BuildingSMActor_BlueprintAttemptBuildingUpgrade::UpgradeLevelDelta' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.DetachBuildingActorFromMe
// 0x0008 (0x0008 - 0x0000)
struct BuildingSMActor_DetachBuildingActorFromMe final
{
public:
	class ABuildingSMActor*                       ActorToAttach;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeingDestroyed;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingSMActor_DetachBuildingActorFromMe) == 0x000004, "Wrong alignment on BuildingSMActor_DetachBuildingActorFromMe");
static_assert(sizeof(BuildingSMActor_DetachBuildingActorFromMe) == 0x000008, "Wrong size on BuildingSMActor_DetachBuildingActorFromMe");
static_assert(offsetof(BuildingSMActor_DetachBuildingActorFromMe, ActorToAttach) == 0x000000, "Member 'BuildingSMActor_DetachBuildingActorFromMe::ActorToAttach' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_DetachBuildingActorFromMe, bBeingDestroyed) == 0x000004, "Member 'BuildingSMActor_DetachBuildingActorFromMe::bBeingDestroyed' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.GetAnimatingMID
// 0x0008 (0x0008 - 0x0000)
struct BuildingSMActor_GetAnimatingMID final
{
public:
	int32                                         ElementIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_GetAnimatingMID) == 0x000004, "Wrong alignment on BuildingSMActor_GetAnimatingMID");
static_assert(sizeof(BuildingSMActor_GetAnimatingMID) == 0x000008, "Wrong size on BuildingSMActor_GetAnimatingMID");
static_assert(offsetof(BuildingSMActor_GetAnimatingMID, ElementIndex) == 0x000000, "Member 'BuildingSMActor_GetAnimatingMID::ElementIndex' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_GetAnimatingMID, ReturnValue) == 0x000004, "Member 'BuildingSMActor_GetAnimatingMID::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.OnAttachToBuilding
// 0x0004 (0x0004 - 0x0000)
struct BuildingSMActor_OnAttachToBuilding final
{
public:
	class ABuildingSMActor*                       AttachedToBuilding;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_OnAttachToBuilding) == 0x000004, "Wrong alignment on BuildingSMActor_OnAttachToBuilding");
static_assert(sizeof(BuildingSMActor_OnAttachToBuilding) == 0x000004, "Wrong size on BuildingSMActor_OnAttachToBuilding");
static_assert(offsetof(BuildingSMActor_OnAttachToBuilding, AttachedToBuilding) == 0x000000, "Member 'BuildingSMActor_OnAttachToBuilding::AttachedToBuilding' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.OnBounceAnimationUpdate
// 0x0030 (0x0030 - 0x0000)
struct BuildingSMActor_OnBounceAnimationUpdate final
{
public:
	struct FFortBounceData                        Data;                                              // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_OnBounceAnimationUpdate) == 0x000004, "Wrong alignment on BuildingSMActor_OnBounceAnimationUpdate");
static_assert(sizeof(BuildingSMActor_OnBounceAnimationUpdate) == 0x000030, "Wrong size on BuildingSMActor_OnBounceAnimationUpdate");
static_assert(offsetof(BuildingSMActor_OnBounceAnimationUpdate, Data) == 0x000000, "Member 'BuildingSMActor_OnBounceAnimationUpdate::Data' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.OnDetachFromBuilding
// 0x0008 (0x0008 - 0x0000)
struct BuildingSMActor_OnDetachFromBuilding final
{
public:
	class ABuildingSMActor*                       AttachedToBuilding;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBeingDestroyed;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingSMActor_OnDetachFromBuilding) == 0x000004, "Wrong alignment on BuildingSMActor_OnDetachFromBuilding");
static_assert(sizeof(BuildingSMActor_OnDetachFromBuilding) == 0x000008, "Wrong size on BuildingSMActor_OnDetachFromBuilding");
static_assert(offsetof(BuildingSMActor_OnDetachFromBuilding, AttachedToBuilding) == 0x000000, "Member 'BuildingSMActor_OnDetachFromBuilding::AttachedToBuilding' has a wrong offset!");
static_assert(offsetof(BuildingSMActor_OnDetachFromBuilding, bBeingDestroyed) == 0x000004, "Member 'BuildingSMActor_OnDetachFromBuilding::bBeingDestroyed' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.OnRep_ResourceType
// 0x0001 (0x0001 - 0x0000)
struct BuildingSMActor_OnRep_ResourceType final
{
public:
	EFortResourceType                             OldType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_OnRep_ResourceType) == 0x000001, "Wrong alignment on BuildingSMActor_OnRep_ResourceType");
static_assert(sizeof(BuildingSMActor_OnRep_ResourceType) == 0x000001, "Wrong size on BuildingSMActor_OnRep_ResourceType");
static_assert(offsetof(BuildingSMActor_OnRep_ResourceType, OldType) == 0x000000, "Member 'BuildingSMActor_OnRep_ResourceType::OldType' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.RepairBuilding
// 0x0004 (0x0004 - 0x0000)
struct BuildingSMActor_RepairBuilding final
{
public:
	class AFortPlayerController*                  RepairingController;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_RepairBuilding) == 0x000004, "Wrong alignment on BuildingSMActor_RepairBuilding");
static_assert(sizeof(BuildingSMActor_RepairBuilding) == 0x000004, "Wrong size on BuildingSMActor_RepairBuilding");
static_assert(offsetof(BuildingSMActor_RepairBuilding, RepairingController) == 0x000000, "Member 'BuildingSMActor_RepairBuilding::RepairingController' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.UpdateDynamicShrinkAndDestroyEffectt
// 0x0004 (0x0004 - 0x0000)
struct BuildingSMActor_UpdateDynamicShrinkAndDestroyEffectt final
{
public:
	float                                         CurveValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_UpdateDynamicShrinkAndDestroyEffectt) == 0x000004, "Wrong alignment on BuildingSMActor_UpdateDynamicShrinkAndDestroyEffectt");
static_assert(sizeof(BuildingSMActor_UpdateDynamicShrinkAndDestroyEffectt) == 0x000004, "Wrong size on BuildingSMActor_UpdateDynamicShrinkAndDestroyEffectt");
static_assert(offsetof(BuildingSMActor_UpdateDynamicShrinkAndDestroyEffectt, CurveValue) == 0x000000, "Member 'BuildingSMActor_UpdateDynamicShrinkAndDestroyEffectt::CurveValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.UpdateLODOverrideEffect
// 0x0004 (0x0004 - 0x0000)
struct BuildingSMActor_UpdateLODOverrideEffect final
{
public:
	float                                         CurveValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_UpdateLODOverrideEffect) == 0x000004, "Wrong alignment on BuildingSMActor_UpdateLODOverrideEffect");
static_assert(sizeof(BuildingSMActor_UpdateLODOverrideEffect) == 0x000004, "Wrong size on BuildingSMActor_UpdateLODOverrideEffect");
static_assert(offsetof(BuildingSMActor_UpdateLODOverrideEffect, CurveValue) == 0x000000, "Member 'BuildingSMActor_UpdateLODOverrideEffect::CurveValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.UpdateRepairMaterialAnim
// 0x0004 (0x0004 - 0x0000)
struct BuildingSMActor_UpdateRepairMaterialAnim final
{
public:
	float                                         CurveValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_UpdateRepairMaterialAnim) == 0x000004, "Wrong alignment on BuildingSMActor_UpdateRepairMaterialAnim");
static_assert(sizeof(BuildingSMActor_UpdateRepairMaterialAnim) == 0x000004, "Wrong size on BuildingSMActor_UpdateRepairMaterialAnim");
static_assert(offsetof(BuildingSMActor_UpdateRepairMaterialAnim, CurveValue) == 0x000000, "Member 'BuildingSMActor_UpdateRepairMaterialAnim::CurveValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.GetBuildingMeshComponent
// 0x0004 (0x0004 - 0x0000)
struct BuildingSMActor_GetBuildingMeshComponent final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0004)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_GetBuildingMeshComponent) == 0x000004, "Wrong alignment on BuildingSMActor_GetBuildingMeshComponent");
static_assert(sizeof(BuildingSMActor_GetBuildingMeshComponent) == 0x000004, "Wrong size on BuildingSMActor_GetBuildingMeshComponent");
static_assert(offsetof(BuildingSMActor_GetBuildingMeshComponent, ReturnValue) == 0x000000, "Member 'BuildingSMActor_GetBuildingMeshComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.GetLogicalBuildingIndex
// 0x0004 (0x0004 - 0x0000)
struct BuildingSMActor_GetLogicalBuildingIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_GetLogicalBuildingIndex) == 0x000004, "Wrong alignment on BuildingSMActor_GetLogicalBuildingIndex");
static_assert(sizeof(BuildingSMActor_GetLogicalBuildingIndex) == 0x000004, "Wrong size on BuildingSMActor_GetLogicalBuildingIndex");
static_assert(offsetof(BuildingSMActor_GetLogicalBuildingIndex, ReturnValue) == 0x000000, "Member 'BuildingSMActor_GetLogicalBuildingIndex::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.HasDestructionLoot
// 0x0001 (0x0001 - 0x0000)
struct BuildingSMActor_HasDestructionLoot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_HasDestructionLoot) == 0x000001, "Wrong alignment on BuildingSMActor_HasDestructionLoot");
static_assert(sizeof(BuildingSMActor_HasDestructionLoot) == 0x000001, "Wrong size on BuildingSMActor_HasDestructionLoot");
static_assert(offsetof(BuildingSMActor_HasDestructionLoot, ReturnValue) == 0x000000, "Member 'BuildingSMActor_HasDestructionLoot::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingSMActor.IsStructurallySupported
// 0x0001 (0x0001 - 0x0000)
struct BuildingSMActor_IsStructurallySupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingSMActor_IsStructurallySupported) == 0x000001, "Wrong alignment on BuildingSMActor_IsStructurallySupported");
static_assert(sizeof(BuildingSMActor_IsStructurallySupported) == 0x000001, "Wrong size on BuildingSMActor_IsStructurallySupported");
static_assert(offsetof(BuildingSMActor_IsStructurallySupported, ReturnValue) == 0x000000, "Member 'BuildingSMActor_IsStructurallySupported::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingContainer.GetLootTier
// 0x0004 (0x0004 - 0x0000)
struct BuildingContainer_GetLootTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingContainer_GetLootTier) == 0x000004, "Wrong alignment on BuildingContainer_GetLootTier");
static_assert(sizeof(BuildingContainer_GetLootTier) == 0x000004, "Wrong size on BuildingContainer_GetLootTier");
static_assert(offsetof(BuildingContainer_GetLootTier, ReturnValue) == 0x000000, "Member 'BuildingContainer_GetLootTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepItemContainer.GetContainerNameAndLevelKey
// 0x0008 (0x0008 - 0x0000)
struct KeepItemContainer_GetContainerNameAndLevelKey final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepItemContainer_GetContainerNameAndLevelKey) == 0x000004, "Wrong alignment on KeepItemContainer_GetContainerNameAndLevelKey");
static_assert(sizeof(KeepItemContainer_GetContainerNameAndLevelKey) == 0x000008, "Wrong size on KeepItemContainer_GetContainerNameAndLevelKey");
static_assert(offsetof(KeepItemContainer_GetContainerNameAndLevelKey, ReturnValue) == 0x000000, "Member 'KeepItemContainer_GetContainerNameAndLevelKey::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepItemContainer.InitializeContainer
// 0x0004 (0x0004 - 0x0000)
struct KeepItemContainer_InitializeContainer final
{
public:
	int32                                         InitUpgradeLevel;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepItemContainer_InitializeContainer) == 0x000004, "Wrong alignment on KeepItemContainer_InitializeContainer");
static_assert(sizeof(KeepItemContainer_InitializeContainer) == 0x000004, "Wrong size on KeepItemContainer_InitializeContainer");
static_assert(offsetof(KeepItemContainer_InitializeContainer, InitUpgradeLevel) == 0x000000, "Member 'KeepItemContainer_InitializeContainer::InitUpgradeLevel' has a wrong offset!");

// Function FortniteGame.KeepItemContainer.ResetContainer
// 0x0004 (0x0004 - 0x0000)
struct KeepItemContainer_ResetContainer final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepItemContainer_ResetContainer) == 0x000004, "Wrong alignment on KeepItemContainer_ResetContainer");
static_assert(sizeof(KeepItemContainer_ResetContainer) == 0x000004, "Wrong size on KeepItemContainer_ResetContainer");
static_assert(offsetof(KeepItemContainer_ResetContainer, FortPC) == 0x000000, "Member 'KeepItemContainer_ResetContainer::FortPC' has a wrong offset!");

// Function FortniteGame.KeepItemContainer.GetLootTierOverride
// 0x0004 (0x0004 - 0x0000)
struct KeepItemContainer_GetLootTierOverride final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepItemContainer_GetLootTierOverride) == 0x000004, "Wrong alignment on KeepItemContainer_GetLootTierOverride");
static_assert(sizeof(KeepItemContainer_GetLootTierOverride) == 0x000004, "Wrong size on KeepItemContainer_GetLootTierOverride");
static_assert(offsetof(KeepItemContainer_GetLootTierOverride, ReturnValue) == 0x000000, "Member 'KeepItemContainer_GetLootTierOverride::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingFloor.IsBalcony
// 0x0001 (0x0001 - 0x0000)
struct BuildingFloor_IsBalcony final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingFloor_IsBalcony) == 0x000001, "Wrong alignment on BuildingFloor_IsBalcony");
static_assert(sizeof(BuildingFloor_IsBalcony) == 0x000001, "Wrong size on BuildingFloor_IsBalcony");
static_assert(offsetof(BuildingFloor_IsBalcony, ReturnValue) == 0x000000, "Member 'BuildingFloor_IsBalcony::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.GetBuildingActorsInBase
// 0x000C (0x000C - 0x0000)
struct FortConstructorBASE_GetBuildingActorsInBase final
{
public:
	TArray<class ABuildingSMActor*>               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_GetBuildingActorsInBase) == 0x000004, "Wrong alignment on FortConstructorBASE_GetBuildingActorsInBase");
static_assert(sizeof(FortConstructorBASE_GetBuildingActorsInBase) == 0x00000C, "Wrong size on FortConstructorBASE_GetBuildingActorsInBase");
static_assert(offsetof(FortConstructorBASE_GetBuildingActorsInBase, ReturnValue) == 0x000000, "Member 'FortConstructorBASE_GetBuildingActorsInBase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.OnBaseCollisionTouched
// 0x0090 (0x0090 - 0x0000)
struct FortConstructorBASE_OnBaseCollisionTouched final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_OnBaseCollisionTouched) == 0x000004, "Wrong alignment on FortConstructorBASE_OnBaseCollisionTouched");
static_assert(sizeof(FortConstructorBASE_OnBaseCollisionTouched) == 0x000090, "Wrong size on FortConstructorBASE_OnBaseCollisionTouched");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionTouched, OtherActor) == 0x000000, "Member 'FortConstructorBASE_OnBaseCollisionTouched::OtherActor' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionTouched, OtherComp) == 0x000004, "Member 'FortConstructorBASE_OnBaseCollisionTouched::OtherComp' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionTouched, OtherBodyIndex) == 0x000008, "Member 'FortConstructorBASE_OnBaseCollisionTouched::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionTouched, bFromSweep) == 0x00000C, "Member 'FortConstructorBASE_OnBaseCollisionTouched::bFromSweep' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionTouched, SweepResult) == 0x000010, "Member 'FortConstructorBASE_OnBaseCollisionTouched::SweepResult' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.OnBaseCollisionUnTouched
// 0x000C (0x000C - 0x0000)
struct FortConstructorBASE_OnBaseCollisionUnTouched final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_OnBaseCollisionUnTouched) == 0x000004, "Wrong alignment on FortConstructorBASE_OnBaseCollisionUnTouched");
static_assert(sizeof(FortConstructorBASE_OnBaseCollisionUnTouched) == 0x00000C, "Wrong size on FortConstructorBASE_OnBaseCollisionUnTouched");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionUnTouched, OtherActor) == 0x000000, "Member 'FortConstructorBASE_OnBaseCollisionUnTouched::OtherActor' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionUnTouched, OtherComp) == 0x000004, "Member 'FortConstructorBASE_OnBaseCollisionUnTouched::OtherComp' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBaseCollisionUnTouched, OtherBodyIndex) == 0x000008, "Member 'FortConstructorBASE_OnBaseCollisionUnTouched::OtherBodyIndex' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.OnBasePawnDestroyed
// 0x0004 (0x0004 - 0x0000)
struct FortConstructorBASE_OnBasePawnDestroyed final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_OnBasePawnDestroyed) == 0x000004, "Wrong alignment on FortConstructorBASE_OnBasePawnDestroyed");
static_assert(sizeof(FortConstructorBASE_OnBasePawnDestroyed) == 0x000004, "Wrong size on FortConstructorBASE_OnBasePawnDestroyed");
static_assert(offsetof(FortConstructorBASE_OnBasePawnDestroyed, Pawn) == 0x000000, "Member 'FortConstructorBASE_OnBasePawnDestroyed::Pawn' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.OnBasePawnDied
// 0x0034 (0x0034 - 0x0000)
struct FortConstructorBASE_OnBasePawnDied final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x001C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortPawn*                              Pawn;                                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_OnBasePawnDied) == 0x000004, "Wrong alignment on FortConstructorBASE_OnBasePawnDied");
static_assert(sizeof(FortConstructorBASE_OnBasePawnDied) == 0x000034, "Wrong size on FortConstructorBASE_OnBasePawnDied");
static_assert(offsetof(FortConstructorBASE_OnBasePawnDied, Damage) == 0x000000, "Member 'FortConstructorBASE_OnBasePawnDied::Damage' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBasePawnDied, InstigatedBy) == 0x000004, "Member 'FortConstructorBASE_OnBasePawnDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBasePawnDied, DamageCauser) == 0x000008, "Member 'FortConstructorBASE_OnBasePawnDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBasePawnDied, HitLocation) == 0x00000C, "Member 'FortConstructorBASE_OnBasePawnDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBasePawnDied, FHitComponent) == 0x000018, "Member 'FortConstructorBASE_OnBasePawnDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBasePawnDied, BoneName) == 0x00001C, "Member 'FortConstructorBASE_OnBasePawnDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBasePawnDied, Momentum) == 0x000024, "Member 'FortConstructorBASE_OnBasePawnDied::Momentum' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_OnBasePawnDied, Pawn) == 0x000030, "Member 'FortConstructorBASE_OnBasePawnDied::Pawn' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.OnPawnAddedToBase
// 0x0004 (0x0004 - 0x0000)
struct FortConstructorBASE_OnPawnAddedToBase final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_OnPawnAddedToBase) == 0x000004, "Wrong alignment on FortConstructorBASE_OnPawnAddedToBase");
static_assert(sizeof(FortConstructorBASE_OnPawnAddedToBase) == 0x000004, "Wrong size on FortConstructorBASE_OnPawnAddedToBase");
static_assert(offsetof(FortConstructorBASE_OnPawnAddedToBase, Pawn) == 0x000000, "Member 'FortConstructorBASE_OnPawnAddedToBase::Pawn' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.OnPawnRemovedFromBase
// 0x0004 (0x0004 - 0x0000)
struct FortConstructorBASE_OnPawnRemovedFromBase final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_OnPawnRemovedFromBase) == 0x000004, "Wrong alignment on FortConstructorBASE_OnPawnRemovedFromBase");
static_assert(sizeof(FortConstructorBASE_OnPawnRemovedFromBase) == 0x000004, "Wrong size on FortConstructorBASE_OnPawnRemovedFromBase");
static_assert(offsetof(FortConstructorBASE_OnPawnRemovedFromBase, Pawn) == 0x000000, "Member 'FortConstructorBASE_OnPawnRemovedFromBase::Pawn' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.OnPlaced
// 0x0004 (0x0004 - 0x0000)
struct FortConstructorBASE_OnPlaced final
{
public:
	class UAbilitySystemComponent*                InstigatorAbilitySystemComponent;                  // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_OnPlaced) == 0x000004, "Wrong alignment on FortConstructorBASE_OnPlaced");
static_assert(sizeof(FortConstructorBASE_OnPlaced) == 0x000004, "Wrong size on FortConstructorBASE_OnPlaced");
static_assert(offsetof(FortConstructorBASE_OnPlaced, InstigatorAbilitySystemComponent) == 0x000000, "Member 'FortConstructorBASE_OnPlaced::InstigatorAbilitySystemComponent' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.StartBuildingActorVisuals
// 0x0008 (0x0008 - 0x0000)
struct FortConstructorBASE_StartBuildingActorVisuals final
{
public:
	class ABuildingSMActor*                       BuildingActor;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   EffectMeshComp;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_StartBuildingActorVisuals) == 0x000004, "Wrong alignment on FortConstructorBASE_StartBuildingActorVisuals");
static_assert(sizeof(FortConstructorBASE_StartBuildingActorVisuals) == 0x000008, "Wrong size on FortConstructorBASE_StartBuildingActorVisuals");
static_assert(offsetof(FortConstructorBASE_StartBuildingActorVisuals, BuildingActor) == 0x000000, "Member 'FortConstructorBASE_StartBuildingActorVisuals::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_StartBuildingActorVisuals, EffectMeshComp) == 0x000004, "Member 'FortConstructorBASE_StartBuildingActorVisuals::EffectMeshComp' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.StopBuildingActorVisuals
// 0x0008 (0x0008 - 0x0000)
struct FortConstructorBASE_StopBuildingActorVisuals final
{
public:
	class ABuildingSMActor*                       BuildingActor;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   EffectMeshComp;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_StopBuildingActorVisuals) == 0x000004, "Wrong alignment on FortConstructorBASE_StopBuildingActorVisuals");
static_assert(sizeof(FortConstructorBASE_StopBuildingActorVisuals) == 0x000008, "Wrong size on FortConstructorBASE_StopBuildingActorVisuals");
static_assert(offsetof(FortConstructorBASE_StopBuildingActorVisuals, BuildingActor) == 0x000000, "Member 'FortConstructorBASE_StopBuildingActorVisuals::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_StopBuildingActorVisuals, EffectMeshComp) == 0x000004, "Member 'FortConstructorBASE_StopBuildingActorVisuals::EffectMeshComp' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.AddToEffectList
// 0x0010 (0x0010 - 0x0000)
struct FortConstructorBASE_AddToEffectList final
{
public:
	TArray<struct FBASEGameplayEffect>            EffectList;                                        // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_AddToEffectList) == 0x000004, "Wrong alignment on FortConstructorBASE_AddToEffectList");
static_assert(sizeof(FortConstructorBASE_AddToEffectList) == 0x000010, "Wrong size on FortConstructorBASE_AddToEffectList");
static_assert(offsetof(FortConstructorBASE_AddToEffectList, EffectList) == 0x000000, "Member 'FortConstructorBASE_AddToEffectList::EffectList' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_AddToEffectList, Effect) == 0x00000C, "Member 'FortConstructorBASE_AddToEffectList::Effect' has a wrong offset!");

// Function FortniteGame.FortConstructorBASE.AddToEffectListWithLevelOverride
// 0x0014 (0x0014 - 0x0000)
struct FortConstructorBASE_AddToEffectListWithLevelOverride final
{
public:
	TArray<struct FBASEGameplayEffect>            EffectList;                                        // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConstructorBASE_AddToEffectListWithLevelOverride) == 0x000004, "Wrong alignment on FortConstructorBASE_AddToEffectListWithLevelOverride");
static_assert(sizeof(FortConstructorBASE_AddToEffectListWithLevelOverride) == 0x000014, "Wrong size on FortConstructorBASE_AddToEffectListWithLevelOverride");
static_assert(offsetof(FortConstructorBASE_AddToEffectListWithLevelOverride, EffectList) == 0x000000, "Member 'FortConstructorBASE_AddToEffectListWithLevelOverride::EffectList' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_AddToEffectListWithLevelOverride, Effect) == 0x00000C, "Member 'FortConstructorBASE_AddToEffectListWithLevelOverride::Effect' has a wrong offset!");
static_assert(offsetof(FortConstructorBASE_AddToEffectListWithLevelOverride, Level) == 0x000010, "Member 'FortConstructorBASE_AddToEffectListWithLevelOverride::Level' has a wrong offset!");

// Function FortniteGame.FortTrack.GetOutgoingNeighborFromSpline
// 0x000C (0x000C - 0x0000)
struct FortTrack_GetOutgoingNeighborFromSpline final
{
public:
	class USplineComponent*                       InSpline;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InReverseDirection;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortTrack*                             OutNeighbor;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrack_GetOutgoingNeighborFromSpline) == 0x000004, "Wrong alignment on FortTrack_GetOutgoingNeighborFromSpline");
static_assert(sizeof(FortTrack_GetOutgoingNeighborFromSpline) == 0x00000C, "Wrong size on FortTrack_GetOutgoingNeighborFromSpline");
static_assert(offsetof(FortTrack_GetOutgoingNeighborFromSpline, InSpline) == 0x000000, "Member 'FortTrack_GetOutgoingNeighborFromSpline::InSpline' has a wrong offset!");
static_assert(offsetof(FortTrack_GetOutgoingNeighborFromSpline, InReverseDirection) == 0x000004, "Member 'FortTrack_GetOutgoingNeighborFromSpline::InReverseDirection' has a wrong offset!");
static_assert(offsetof(FortTrack_GetOutgoingNeighborFromSpline, OutNeighbor) == 0x000008, "Member 'FortTrack_GetOutgoingNeighborFromSpline::OutNeighbor' has a wrong offset!");

// Function FortniteGame.FortTrack.GetPathDistanceToTrack
// 0x0014 (0x0014 - 0x0000)
struct FortTrack_GetPathDistanceToTrack final
{
public:
	class AFortTrack*                             TargetTrack;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       InCurrentSpline;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentDistanceAlongSpline;                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InReverseDirection;                                // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrack_GetPathDistanceToTrack) == 0x000004, "Wrong alignment on FortTrack_GetPathDistanceToTrack");
static_assert(sizeof(FortTrack_GetPathDistanceToTrack) == 0x000014, "Wrong size on FortTrack_GetPathDistanceToTrack");
static_assert(offsetof(FortTrack_GetPathDistanceToTrack, TargetTrack) == 0x000000, "Member 'FortTrack_GetPathDistanceToTrack::TargetTrack' has a wrong offset!");
static_assert(offsetof(FortTrack_GetPathDistanceToTrack, InCurrentSpline) == 0x000004, "Member 'FortTrack_GetPathDistanceToTrack::InCurrentSpline' has a wrong offset!");
static_assert(offsetof(FortTrack_GetPathDistanceToTrack, CurrentDistanceAlongSpline) == 0x000008, "Member 'FortTrack_GetPathDistanceToTrack::CurrentDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FortTrack_GetPathDistanceToTrack, InReverseDirection) == 0x00000C, "Member 'FortTrack_GetPathDistanceToTrack::InReverseDirection' has a wrong offset!");
static_assert(offsetof(FortTrack_GetPathDistanceToTrack, ReturnValue) == 0x000010, "Member 'FortTrack_GetPathDistanceToTrack::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrack.GetSplineFromIncomingNeighbor
// 0x000C (0x000C - 0x0000)
struct FortTrack_GetSplineFromIncomingNeighbor final
{
public:
	class AFortTrack*                             InNeighbor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       OutSpline;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutReverseDirection;                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrack_GetSplineFromIncomingNeighbor) == 0x000004, "Wrong alignment on FortTrack_GetSplineFromIncomingNeighbor");
static_assert(sizeof(FortTrack_GetSplineFromIncomingNeighbor) == 0x00000C, "Wrong size on FortTrack_GetSplineFromIncomingNeighbor");
static_assert(offsetof(FortTrack_GetSplineFromIncomingNeighbor, InNeighbor) == 0x000000, "Member 'FortTrack_GetSplineFromIncomingNeighbor::InNeighbor' has a wrong offset!");
static_assert(offsetof(FortTrack_GetSplineFromIncomingNeighbor, OutSpline) == 0x000004, "Member 'FortTrack_GetSplineFromIncomingNeighbor::OutSpline' has a wrong offset!");
static_assert(offsetof(FortTrack_GetSplineFromIncomingNeighbor, OutReverseDirection) == 0x000008, "Member 'FortTrack_GetSplineFromIncomingNeighbor::OutReverseDirection' has a wrong offset!");

// Function FortniteGame.FortTrack.GetSplineFromPositionAndOrientation
// 0x0024 (0x0024 - 0x0000)
struct FortTrack_GetSplineFromPositionAndOrientation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class USplineComponent*                       OutSpline;                                         // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistanceAlongSpline;                            // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutReverseDirection;                               // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrack_GetSplineFromPositionAndOrientation) == 0x000004, "Wrong alignment on FortTrack_GetSplineFromPositionAndOrientation");
static_assert(sizeof(FortTrack_GetSplineFromPositionAndOrientation) == 0x000024, "Wrong size on FortTrack_GetSplineFromPositionAndOrientation");
static_assert(offsetof(FortTrack_GetSplineFromPositionAndOrientation, InLocation) == 0x000000, "Member 'FortTrack_GetSplineFromPositionAndOrientation::InLocation' has a wrong offset!");
static_assert(offsetof(FortTrack_GetSplineFromPositionAndOrientation, InRotation) == 0x00000C, "Member 'FortTrack_GetSplineFromPositionAndOrientation::InRotation' has a wrong offset!");
static_assert(offsetof(FortTrack_GetSplineFromPositionAndOrientation, OutSpline) == 0x000018, "Member 'FortTrack_GetSplineFromPositionAndOrientation::OutSpline' has a wrong offset!");
static_assert(offsetof(FortTrack_GetSplineFromPositionAndOrientation, OutDistanceAlongSpline) == 0x00001C, "Member 'FortTrack_GetSplineFromPositionAndOrientation::OutDistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FortTrack_GetSplineFromPositionAndOrientation, OutReverseDirection) == 0x000020, "Member 'FortTrack_GetSplineFromPositionAndOrientation::OutReverseDirection' has a wrong offset!");

// Function FortniteGame.FortTrack.InitializeTrack
// 0x0018 (0x0018 - 0x0000)
struct FortTrack_InitializeTrack final
{
public:
	class UStaticMeshComponent*                   InTrackMeshComp1;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   InTrackMeshComp2;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       InSplineComp1;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       InSplineComp2;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InSwitchCompBase;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    InSwitchComp;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrack_InitializeTrack) == 0x000004, "Wrong alignment on FortTrack_InitializeTrack");
static_assert(sizeof(FortTrack_InitializeTrack) == 0x000018, "Wrong size on FortTrack_InitializeTrack");
static_assert(offsetof(FortTrack_InitializeTrack, InTrackMeshComp1) == 0x000000, "Member 'FortTrack_InitializeTrack::InTrackMeshComp1' has a wrong offset!");
static_assert(offsetof(FortTrack_InitializeTrack, InTrackMeshComp2) == 0x000004, "Member 'FortTrack_InitializeTrack::InTrackMeshComp2' has a wrong offset!");
static_assert(offsetof(FortTrack_InitializeTrack, InSplineComp1) == 0x000008, "Member 'FortTrack_InitializeTrack::InSplineComp1' has a wrong offset!");
static_assert(offsetof(FortTrack_InitializeTrack, InSplineComp2) == 0x00000C, "Member 'FortTrack_InitializeTrack::InSplineComp2' has a wrong offset!");
static_assert(offsetof(FortTrack_InitializeTrack, InSwitchCompBase) == 0x000010, "Member 'FortTrack_InitializeTrack::InSwitchCompBase' has a wrong offset!");
static_assert(offsetof(FortTrack_InitializeTrack, InSwitchComp) == 0x000014, "Member 'FortTrack_InitializeTrack::InSwitchComp' has a wrong offset!");

// Function FortniteGame.FortTrack.IsConnectedToTrack
// 0x0008 (0x0008 - 0x0000)
struct FortTrack_IsConnectedToTrack final
{
public:
	class AFortTrack*                             TargetTrack;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrack_IsConnectedToTrack) == 0x000004, "Wrong alignment on FortTrack_IsConnectedToTrack");
static_assert(sizeof(FortTrack_IsConnectedToTrack) == 0x000008, "Wrong size on FortTrack_IsConnectedToTrack");
static_assert(offsetof(FortTrack_IsConnectedToTrack, TargetTrack) == 0x000000, "Member 'FortTrack_IsConnectedToTrack::TargetTrack' has a wrong offset!");
static_assert(offsetof(FortTrack_IsConnectedToTrack, ReturnValue) == 0x000004, "Member 'FortTrack_IsConnectedToTrack::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrack.IsConnectedToTrackList
// 0x0010 (0x0010 - 0x0000)
struct FortTrack_IsConnectedToTrackList final
{
public:
	TArray<class AFortTrack*>                     TargetTracks;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTrack_IsConnectedToTrackList) == 0x000004, "Wrong alignment on FortTrack_IsConnectedToTrackList");
static_assert(sizeof(FortTrack_IsConnectedToTrackList) == 0x000010, "Wrong size on FortTrack_IsConnectedToTrackList");
static_assert(offsetof(FortTrack_IsConnectedToTrackList, TargetTracks) == 0x000000, "Member 'FortTrack_IsConnectedToTrackList::TargetTracks' has a wrong offset!");
static_assert(offsetof(FortTrack_IsConnectedToTrackList, ReturnValue) == 0x00000C, "Member 'FortTrack_IsConnectedToTrackList::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrack.OnConfigurationChanged
// 0x0008 (0x0008 - 0x0000)
struct FortTrack_OnConfigurationChanged final
{
public:
	int32                                         NewConfigurationIdx;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldConfigurationIdx;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrack_OnConfigurationChanged) == 0x000004, "Wrong alignment on FortTrack_OnConfigurationChanged");
static_assert(sizeof(FortTrack_OnConfigurationChanged) == 0x000008, "Wrong size on FortTrack_OnConfigurationChanged");
static_assert(offsetof(FortTrack_OnConfigurationChanged, NewConfigurationIdx) == 0x000000, "Member 'FortTrack_OnConfigurationChanged::NewConfigurationIdx' has a wrong offset!");
static_assert(offsetof(FortTrack_OnConfigurationChanged, OldConfigurationIdx) == 0x000004, "Member 'FortTrack_OnConfigurationChanged::OldConfigurationIdx' has a wrong offset!");

// Function FortniteGame.FortTrack.OnSwitchStateChanged
// 0x000C (0x000C - 0x0000)
struct FortTrack_OnSwitchStateChanged final
{
public:
	int32                                         NewSwitchState;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldSwitchState;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSwitchStates;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrack_OnSwitchStateChanged) == 0x000004, "Wrong alignment on FortTrack_OnSwitchStateChanged");
static_assert(sizeof(FortTrack_OnSwitchStateChanged) == 0x00000C, "Wrong size on FortTrack_OnSwitchStateChanged");
static_assert(offsetof(FortTrack_OnSwitchStateChanged, NewSwitchState) == 0x000000, "Member 'FortTrack_OnSwitchStateChanged::NewSwitchState' has a wrong offset!");
static_assert(offsetof(FortTrack_OnSwitchStateChanged, OldSwitchState) == 0x000004, "Member 'FortTrack_OnSwitchStateChanged::OldSwitchState' has a wrong offset!");
static_assert(offsetof(FortTrack_OnSwitchStateChanged, NumSwitchStates) == 0x000008, "Member 'FortTrack_OnSwitchStateChanged::NumSwitchStates' has a wrong offset!");

// Function FortniteGame.OutpostStructureBase.GetOutpostOwnerStructureLevel
// 0x0004 (0x0004 - 0x0000)
struct OutpostStructureBase_GetOutpostOwnerStructureLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OutpostStructureBase_GetOutpostOwnerStructureLevel) == 0x000004, "Wrong alignment on OutpostStructureBase_GetOutpostOwnerStructureLevel");
static_assert(sizeof(OutpostStructureBase_GetOutpostOwnerStructureLevel) == 0x000004, "Wrong size on OutpostStructureBase_GetOutpostOwnerStructureLevel");
static_assert(offsetof(OutpostStructureBase_GetOutpostOwnerStructureLevel, ReturnValue) == 0x000000, "Member 'OutpostStructureBase_GetOutpostOwnerStructureLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostCraftingTable.Activate
// 0x0004 (0x0004 - 0x0000)
struct BuildingOutpostCraftingTable_Activate final
{
public:
	class AFortPlayerControllerOutpost*           InPC;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostCraftingTable_Activate) == 0x000004, "Wrong alignment on BuildingOutpostCraftingTable_Activate");
static_assert(sizeof(BuildingOutpostCraftingTable_Activate) == 0x000004, "Wrong size on BuildingOutpostCraftingTable_Activate");
static_assert(offsetof(BuildingOutpostCraftingTable_Activate, InPC) == 0x000000, "Member 'BuildingOutpostCraftingTable_Activate::InPC' has a wrong offset!");

// Function FortniteGame.BuildingOutpostCraftingTable.Deactivate
// 0x0004 (0x0004 - 0x0000)
struct BuildingOutpostCraftingTable_Deactivate final
{
public:
	class AFortPlayerControllerOutpost*           InPC;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostCraftingTable_Deactivate) == 0x000004, "Wrong alignment on BuildingOutpostCraftingTable_Deactivate");
static_assert(sizeof(BuildingOutpostCraftingTable_Deactivate) == 0x000004, "Wrong size on BuildingOutpostCraftingTable_Deactivate");
static_assert(offsetof(BuildingOutpostCraftingTable_Deactivate, InPC) == 0x000000, "Member 'BuildingOutpostCraftingTable_Deactivate::InPC' has a wrong offset!");

// Function FortniteGame.BuildingOutpostCraftingTable.CanActivate
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostCraftingTable_CanActivate final
{
public:
	class AFortPlayerControllerOutpost*           InPC;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingOutpostCraftingTable_CanActivate) == 0x000004, "Wrong alignment on BuildingOutpostCraftingTable_CanActivate");
static_assert(sizeof(BuildingOutpostCraftingTable_CanActivate) == 0x000008, "Wrong size on BuildingOutpostCraftingTable_CanActivate");
static_assert(offsetof(BuildingOutpostCraftingTable_CanActivate, InPC) == 0x000000, "Member 'BuildingOutpostCraftingTable_CanActivate::InPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostCraftingTable_CanActivate, ReturnValue) == 0x000004, "Member 'BuildingOutpostCraftingTable_CanActivate::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostCraftingTable.GetActivationCost
// 0x0010 (0x0010 - 0x0000)
struct BuildingOutpostCraftingTable_GetActivationCost final
{
public:
	class AFortPlayerControllerOutpost*           InPC;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutWorldItems;                                     // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostCraftingTable_GetActivationCost) == 0x000004, "Wrong alignment on BuildingOutpostCraftingTable_GetActivationCost");
static_assert(sizeof(BuildingOutpostCraftingTable_GetActivationCost) == 0x000010, "Wrong size on BuildingOutpostCraftingTable_GetActivationCost");
static_assert(offsetof(BuildingOutpostCraftingTable_GetActivationCost, InPC) == 0x000000, "Member 'BuildingOutpostCraftingTable_GetActivationCost::InPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostCraftingTable_GetActivationCost, OutWorldItems) == 0x000004, "Member 'BuildingOutpostCraftingTable_GetActivationCost::OutWorldItems' has a wrong offset!");

// Function FortniteGame.BuildingOutpostCraftingTable.GetNumberOfItemsPerActivation
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostCraftingTable_GetNumberOfItemsPerActivation final
{
public:
	class AFortPlayerControllerOutpost*           InPC;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostCraftingTable_GetNumberOfItemsPerActivation) == 0x000004, "Wrong alignment on BuildingOutpostCraftingTable_GetNumberOfItemsPerActivation");
static_assert(sizeof(BuildingOutpostCraftingTable_GetNumberOfItemsPerActivation) == 0x000008, "Wrong size on BuildingOutpostCraftingTable_GetNumberOfItemsPerActivation");
static_assert(offsetof(BuildingOutpostCraftingTable_GetNumberOfItemsPerActivation, InPC) == 0x000000, "Member 'BuildingOutpostCraftingTable_GetNumberOfItemsPerActivation::InPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostCraftingTable_GetNumberOfItemsPerActivation, ReturnValue) == 0x000004, "Member 'BuildingOutpostCraftingTable_GetNumberOfItemsPerActivation::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostCraftingTable.GetNumberOfItemsRemaining
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostCraftingTable_GetNumberOfItemsRemaining final
{
public:
	class AFortPlayerControllerOutpost*           InPC;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostCraftingTable_GetNumberOfItemsRemaining) == 0x000004, "Wrong alignment on BuildingOutpostCraftingTable_GetNumberOfItemsRemaining");
static_assert(sizeof(BuildingOutpostCraftingTable_GetNumberOfItemsRemaining) == 0x000008, "Wrong size on BuildingOutpostCraftingTable_GetNumberOfItemsRemaining");
static_assert(offsetof(BuildingOutpostCraftingTable_GetNumberOfItemsRemaining, InPC) == 0x000000, "Member 'BuildingOutpostCraftingTable_GetNumberOfItemsRemaining::InPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostCraftingTable_GetNumberOfItemsRemaining, ReturnValue) == 0x000004, "Member 'BuildingOutpostCraftingTable_GetNumberOfItemsRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostCraftingTable.IsActive
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostCraftingTable_IsActive final
{
public:
	class AFortPlayerControllerOutpost*           InPC;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingOutpostCraftingTable_IsActive) == 0x000004, "Wrong alignment on BuildingOutpostCraftingTable_IsActive");
static_assert(sizeof(BuildingOutpostCraftingTable_IsActive) == 0x000008, "Wrong size on BuildingOutpostCraftingTable_IsActive");
static_assert(offsetof(BuildingOutpostCraftingTable_IsActive, InPC) == 0x000000, "Member 'BuildingOutpostCraftingTable_IsActive::InPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostCraftingTable_IsActive, ReturnValue) == 0x000004, "Member 'BuildingOutpostCraftingTable_IsActive::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.AbortDisintegration
// 0x0004 (0x0004 - 0x0000)
struct BuildingOutpostFabricator_AbortDisintegration final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_AbortDisintegration) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_AbortDisintegration");
static_assert(sizeof(BuildingOutpostFabricator_AbortDisintegration) == 0x000004, "Wrong size on BuildingOutpostFabricator_AbortDisintegration");
static_assert(offsetof(BuildingOutpostFabricator_AbortDisintegration, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_AbortDisintegration::FortPC' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.CanDisintegrateItem
// 0x0010 (0x0010 - 0x0000)
struct BuildingOutpostFabricator_CanDisintegrateItem final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItem*                         Item;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_CanDisintegrateItem) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_CanDisintegrateItem");
static_assert(sizeof(BuildingOutpostFabricator_CanDisintegrateItem) == 0x000010, "Wrong size on BuildingOutpostFabricator_CanDisintegrateItem");
static_assert(offsetof(BuildingOutpostFabricator_CanDisintegrateItem, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_CanDisintegrateItem::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_CanDisintegrateItem, Item) == 0x000004, "Member 'BuildingOutpostFabricator_CanDisintegrateItem::Item' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_CanDisintegrateItem, Count) == 0x000008, "Member 'BuildingOutpostFabricator_CanDisintegrateItem::Count' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_CanDisintegrateItem, ReturnValue) == 0x00000C, "Member 'BuildingOutpostFabricator_CanDisintegrateItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.DisintegrateItem
// 0x000C (0x000C - 0x0000)
struct BuildingOutpostFabricator_DisintegrateItem final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItem*                         Item;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_DisintegrateItem) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_DisintegrateItem");
static_assert(sizeof(BuildingOutpostFabricator_DisintegrateItem) == 0x00000C, "Wrong size on BuildingOutpostFabricator_DisintegrateItem");
static_assert(offsetof(BuildingOutpostFabricator_DisintegrateItem, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_DisintegrateItem::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_DisintegrateItem, Item) == 0x000004, "Member 'BuildingOutpostFabricator_DisintegrateItem::Item' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_DisintegrateItem, Count) == 0x000008, "Member 'BuildingOutpostFabricator_DisintegrateItem::Count' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.FabricateItem
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostFabricator_FabricateItem final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               ItemDef;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_FabricateItem) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_FabricateItem");
static_assert(sizeof(BuildingOutpostFabricator_FabricateItem) == 0x000008, "Wrong size on BuildingOutpostFabricator_FabricateItem");
static_assert(offsetof(BuildingOutpostFabricator_FabricateItem, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_FabricateItem::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_FabricateItem, ItemDef) == 0x000004, "Member 'BuildingOutpostFabricator_FabricateItem::ItemDef' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.GetAvailableRecipes
// 0x0020 (0x0020 - 0x0000)
struct BuildingOutpostFabricator_GetAvailableRecipes final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          InventoryFilter;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchFilter;                                      // 0x0008(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_GetAvailableRecipes) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_GetAvailableRecipes");
static_assert(sizeof(BuildingOutpostFabricator_GetAvailableRecipes) == 0x000020, "Wrong size on BuildingOutpostFabricator_GetAvailableRecipes");
static_assert(offsetof(BuildingOutpostFabricator_GetAvailableRecipes, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_GetAvailableRecipes::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetAvailableRecipes, InventoryFilter) == 0x000004, "Member 'BuildingOutpostFabricator_GetAvailableRecipes::InventoryFilter' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetAvailableRecipes, SearchFilter) == 0x000008, "Member 'BuildingOutpostFabricator_GetAvailableRecipes::SearchFilter' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetAvailableRecipes, ReturnValue) == 0x000014, "Member 'BuildingOutpostFabricator_GetAvailableRecipes::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.GetDisintegrationDurationInSeconds
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostFabricator_GetDisintegrationDurationInSeconds final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_GetDisintegrationDurationInSeconds) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_GetDisintegrationDurationInSeconds");
static_assert(sizeof(BuildingOutpostFabricator_GetDisintegrationDurationInSeconds) == 0x000008, "Wrong size on BuildingOutpostFabricator_GetDisintegrationDurationInSeconds");
static_assert(offsetof(BuildingOutpostFabricator_GetDisintegrationDurationInSeconds, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_GetDisintegrationDurationInSeconds::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetDisintegrationDurationInSeconds, ReturnValue) == 0x000004, "Member 'BuildingOutpostFabricator_GetDisintegrationDurationInSeconds::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.GetDisintegrationDurationInSecondsForItem
// 0x000C (0x000C - 0x0000)
struct BuildingOutpostFabricator_GetDisintegrationDurationInSecondsForItem final
{
public:
	class UFortWorldItem*                         Item;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_GetDisintegrationDurationInSecondsForItem) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_GetDisintegrationDurationInSecondsForItem");
static_assert(sizeof(BuildingOutpostFabricator_GetDisintegrationDurationInSecondsForItem) == 0x00000C, "Wrong size on BuildingOutpostFabricator_GetDisintegrationDurationInSecondsForItem");
static_assert(offsetof(BuildingOutpostFabricator_GetDisintegrationDurationInSecondsForItem, Item) == 0x000000, "Member 'BuildingOutpostFabricator_GetDisintegrationDurationInSecondsForItem::Item' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetDisintegrationDurationInSecondsForItem, Count) == 0x000004, "Member 'BuildingOutpostFabricator_GetDisintegrationDurationInSecondsForItem::Count' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetDisintegrationDurationInSecondsForItem, ReturnValue) == 0x000008, "Member 'BuildingOutpostFabricator_GetDisintegrationDurationInSecondsForItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.GetDisintegrationMinutesRemaining
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostFabricator_GetDisintegrationMinutesRemaining final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_GetDisintegrationMinutesRemaining) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_GetDisintegrationMinutesRemaining");
static_assert(sizeof(BuildingOutpostFabricator_GetDisintegrationMinutesRemaining) == 0x000008, "Wrong size on BuildingOutpostFabricator_GetDisintegrationMinutesRemaining");
static_assert(offsetof(BuildingOutpostFabricator_GetDisintegrationMinutesRemaining, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_GetDisintegrationMinutesRemaining::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetDisintegrationMinutesRemaining, ReturnValue) == 0x000004, "Member 'BuildingOutpostFabricator_GetDisintegrationMinutesRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.GetDisintegrationSecondsRemaining
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostFabricator_GetDisintegrationSecondsRemaining final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_GetDisintegrationSecondsRemaining) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_GetDisintegrationSecondsRemaining");
static_assert(sizeof(BuildingOutpostFabricator_GetDisintegrationSecondsRemaining) == 0x000008, "Wrong size on BuildingOutpostFabricator_GetDisintegrationSecondsRemaining");
static_assert(offsetof(BuildingOutpostFabricator_GetDisintegrationSecondsRemaining, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_GetDisintegrationSecondsRemaining::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetDisintegrationSecondsRemaining, ReturnValue) == 0x000004, "Member 'BuildingOutpostFabricator_GetDisintegrationSecondsRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.GetDisintegrationStartTime
// 0x000C (0x000C - 0x0000)
struct BuildingOutpostFabricator_GetDisintegrationStartTime final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_GetDisintegrationStartTime) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_GetDisintegrationStartTime");
static_assert(sizeof(BuildingOutpostFabricator_GetDisintegrationStartTime) == 0x00000C, "Wrong size on BuildingOutpostFabricator_GetDisintegrationStartTime");
static_assert(offsetof(BuildingOutpostFabricator_GetDisintegrationStartTime, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_GetDisintegrationStartTime::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetDisintegrationStartTime, ReturnValue) == 0x000004, "Member 'BuildingOutpostFabricator_GetDisintegrationStartTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.GetGooFromDisintegrationAmount
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostFabricator_GetGooFromDisintegrationAmount final
{
public:
	const class UFortWorldItem*                   Item;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_GetGooFromDisintegrationAmount) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_GetGooFromDisintegrationAmount");
static_assert(sizeof(BuildingOutpostFabricator_GetGooFromDisintegrationAmount) == 0x000008, "Wrong size on BuildingOutpostFabricator_GetGooFromDisintegrationAmount");
static_assert(offsetof(BuildingOutpostFabricator_GetGooFromDisintegrationAmount, Item) == 0x000000, "Member 'BuildingOutpostFabricator_GetGooFromDisintegrationAmount::Item' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetGooFromDisintegrationAmount, ReturnValue) == 0x000004, "Member 'BuildingOutpostFabricator_GetGooFromDisintegrationAmount::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.GetGooToFabricateAmount
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostFabricator_GetGooToFabricateAmount final
{
public:
	const class UFortWorldItem*                   Item;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_GetGooToFabricateAmount) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_GetGooToFabricateAmount");
static_assert(sizeof(BuildingOutpostFabricator_GetGooToFabricateAmount) == 0x000008, "Wrong size on BuildingOutpostFabricator_GetGooToFabricateAmount");
static_assert(offsetof(BuildingOutpostFabricator_GetGooToFabricateAmount, Item) == 0x000000, "Member 'BuildingOutpostFabricator_GetGooToFabricateAmount::Item' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetGooToFabricateAmount, ReturnValue) == 0x000004, "Member 'BuildingOutpostFabricator_GetGooToFabricateAmount::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.GetIncomingGooAmount
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostFabricator_GetIncomingGooAmount final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_GetIncomingGooAmount) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_GetIncomingGooAmount");
static_assert(sizeof(BuildingOutpostFabricator_GetIncomingGooAmount) == 0x000008, "Wrong size on BuildingOutpostFabricator_GetIncomingGooAmount");
static_assert(offsetof(BuildingOutpostFabricator_GetIncomingGooAmount, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_GetIncomingGooAmount::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetIncomingGooAmount, ReturnValue) == 0x000004, "Member 'BuildingOutpostFabricator_GetIncomingGooAmount::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.GetIncomingGooAmountProgress
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostFabricator_GetIncomingGooAmountProgress final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_GetIncomingGooAmountProgress) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_GetIncomingGooAmountProgress");
static_assert(sizeof(BuildingOutpostFabricator_GetIncomingGooAmountProgress) == 0x000008, "Wrong size on BuildingOutpostFabricator_GetIncomingGooAmountProgress");
static_assert(offsetof(BuildingOutpostFabricator_GetIncomingGooAmountProgress, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_GetIncomingGooAmountProgress::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetIncomingGooAmountProgress, ReturnValue) == 0x000004, "Member 'BuildingOutpostFabricator_GetIncomingGooAmountProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.GetMaxGooCapacity
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostFabricator_GetMaxGooCapacity final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_GetMaxGooCapacity) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_GetMaxGooCapacity");
static_assert(sizeof(BuildingOutpostFabricator_GetMaxGooCapacity) == 0x000008, "Wrong size on BuildingOutpostFabricator_GetMaxGooCapacity");
static_assert(offsetof(BuildingOutpostFabricator_GetMaxGooCapacity, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_GetMaxGooCapacity::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetMaxGooCapacity, ReturnValue) == 0x000004, "Member 'BuildingOutpostFabricator_GetMaxGooCapacity::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.GetPlayerItems
// 0x0020 (0x0020 - 0x0000)
struct BuildingOutpostFabricator_GetPlayerItems final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          InventoryFilter;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchFilter;                                      // 0x0008(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_GetPlayerItems) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_GetPlayerItems");
static_assert(sizeof(BuildingOutpostFabricator_GetPlayerItems) == 0x000020, "Wrong size on BuildingOutpostFabricator_GetPlayerItems");
static_assert(offsetof(BuildingOutpostFabricator_GetPlayerItems, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_GetPlayerItems::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetPlayerItems, InventoryFilter) == 0x000004, "Member 'BuildingOutpostFabricator_GetPlayerItems::InventoryFilter' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetPlayerItems, SearchFilter) == 0x000008, "Member 'BuildingOutpostFabricator_GetPlayerItems::SearchFilter' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetPlayerItems, ReturnValue) == 0x000014, "Member 'BuildingOutpostFabricator_GetPlayerItems::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.GetStoredGooAmount
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostFabricator_GetStoredGooAmount final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostFabricator_GetStoredGooAmount) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_GetStoredGooAmount");
static_assert(sizeof(BuildingOutpostFabricator_GetStoredGooAmount) == 0x000008, "Wrong size on BuildingOutpostFabricator_GetStoredGooAmount");
static_assert(offsetof(BuildingOutpostFabricator_GetStoredGooAmount, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_GetStoredGooAmount::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_GetStoredGooAmount, ReturnValue) == 0x000004, "Member 'BuildingOutpostFabricator_GetStoredGooAmount::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostFabricator.IsDisintegrating
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostFabricator_IsDisintegrating final
{
public:
	class AFortPlayerControllerOutpost*           FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingOutpostFabricator_IsDisintegrating) == 0x000004, "Wrong alignment on BuildingOutpostFabricator_IsDisintegrating");
static_assert(sizeof(BuildingOutpostFabricator_IsDisintegrating) == 0x000008, "Wrong size on BuildingOutpostFabricator_IsDisintegrating");
static_assert(offsetof(BuildingOutpostFabricator_IsDisintegrating, FortPC) == 0x000000, "Member 'BuildingOutpostFabricator_IsDisintegrating::FortPC' has a wrong offset!");
static_assert(offsetof(BuildingOutpostFabricator_IsDisintegrating, ReturnValue) == 0x000004, "Member 'BuildingOutpostFabricator_IsDisintegrating::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.ApplyTempWeaponMaterialOverride
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_ApplyTempWeaponMaterialOverride final
{
public:
	class UMaterialInterface*                     MaterialOverride;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_ApplyTempWeaponMaterialOverride) == 0x000004, "Wrong alignment on FortWeapon_ApplyTempWeaponMaterialOverride");
static_assert(sizeof(FortWeapon_ApplyTempWeaponMaterialOverride) == 0x000004, "Wrong size on FortWeapon_ApplyTempWeaponMaterialOverride");
static_assert(offsetof(FortWeapon_ApplyTempWeaponMaterialOverride, MaterialOverride) == 0x000000, "Member 'FortWeapon_ApplyTempWeaponMaterialOverride::MaterialOverride' has a wrong offset!");

// Function FortniteGame.FortWeapon.ClientGivenTo
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_ClientGivenTo final
{
public:
	class APawn*                                  P;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_ClientGivenTo) == 0x000004, "Wrong alignment on FortWeapon_ClientGivenTo");
static_assert(sizeof(FortWeapon_ClientGivenTo) == 0x000004, "Wrong size on FortWeapon_ClientGivenTo");
static_assert(offsetof(FortWeapon_ClientGivenTo, P) == 0x000000, "Member 'FortWeapon_ClientGivenTo::P' has a wrong offset!");

// Function FortniteGame.FortWeapon.ClientReportShotFlags
// 0x0008 (0x0008 - 0x0000)
struct FortWeapon_ClientReportShotFlags final
{
public:
	uint32                                        ShotFlags;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_ClientReportShotFlags) == 0x000004, "Wrong alignment on FortWeapon_ClientReportShotFlags");
static_assert(sizeof(FortWeapon_ClientReportShotFlags) == 0x000008, "Wrong size on FortWeapon_ClientReportShotFlags");
static_assert(offsetof(FortWeapon_ClientReportShotFlags, ShotFlags) == 0x000000, "Member 'FortWeapon_ClientReportShotFlags::ShotFlags' has a wrong offset!");
static_assert(offsetof(FortWeapon_ClientReportShotFlags, ShotIndex) == 0x000004, "Member 'FortWeapon_ClientReportShotFlags::ShotIndex' has a wrong offset!");

// Function FortniteGame.FortWeapon.DetermineReticleColor
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_DetermineReticleColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_DetermineReticleColor) == 0x000004, "Wrong alignment on FortWeapon_DetermineReticleColor");
static_assert(sizeof(FortWeapon_DetermineReticleColor) == 0x000004, "Wrong size on FortWeapon_DetermineReticleColor");
static_assert(offsetof(FortWeapon_DetermineReticleColor, ReturnValue) == 0x000000, "Member 'FortWeapon_DetermineReticleColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GameplayCue_Impact
// 0x0088 (0x0088 - 0x0000)
struct FortWeapon_GameplayCue_Impact final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0004(0x0084)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GameplayCue_Impact) == 0x000004, "Wrong alignment on FortWeapon_GameplayCue_Impact");
static_assert(sizeof(FortWeapon_GameplayCue_Impact) == 0x000088, "Wrong size on FortWeapon_GameplayCue_Impact");
static_assert(offsetof(FortWeapon_GameplayCue_Impact, EventType) == 0x000000, "Member 'FortWeapon_GameplayCue_Impact::EventType' has a wrong offset!");
static_assert(offsetof(FortWeapon_GameplayCue_Impact, Parameters) == 0x000004, "Member 'FortWeapon_GameplayCue_Impact::Parameters' has a wrong offset!");

// Function FortniteGame.FortWeapon.GameplayCue_Weapons_Activation
// 0x0088 (0x0088 - 0x0000)
struct FortWeapon_GameplayCue_Weapons_Activation final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0004(0x0084)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GameplayCue_Weapons_Activation) == 0x000004, "Wrong alignment on FortWeapon_GameplayCue_Weapons_Activation");
static_assert(sizeof(FortWeapon_GameplayCue_Weapons_Activation) == 0x000088, "Wrong size on FortWeapon_GameplayCue_Weapons_Activation");
static_assert(offsetof(FortWeapon_GameplayCue_Weapons_Activation, EventType) == 0x000000, "Member 'FortWeapon_GameplayCue_Weapons_Activation::EventType' has a wrong offset!");
static_assert(offsetof(FortWeapon_GameplayCue_Weapons_Activation, Parameters) == 0x000004, "Member 'FortWeapon_GameplayCue_Weapons_Activation::Parameters' has a wrong offset!");

// Function FortniteGame.FortWeapon.GameplayCue_Weapons_ChargeUp
// 0x0088 (0x0088 - 0x0000)
struct FortWeapon_GameplayCue_Weapons_ChargeUp final
{
public:
	EGameplayCueEvent                             EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0004(0x0084)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GameplayCue_Weapons_ChargeUp) == 0x000004, "Wrong alignment on FortWeapon_GameplayCue_Weapons_ChargeUp");
static_assert(sizeof(FortWeapon_GameplayCue_Weapons_ChargeUp) == 0x000088, "Wrong size on FortWeapon_GameplayCue_Weapons_ChargeUp");
static_assert(offsetof(FortWeapon_GameplayCue_Weapons_ChargeUp, EventType) == 0x000000, "Member 'FortWeapon_GameplayCue_Weapons_ChargeUp::EventType' has a wrong offset!");
static_assert(offsetof(FortWeapon_GameplayCue_Weapons_ChargeUp, Parameters) == 0x000004, "Member 'FortWeapon_GameplayCue_Weapons_ChargeUp::Parameters' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetActiveAlterations
// 0x000C (0x000C - 0x0000)
struct FortWeapon_GetActiveAlterations final
{
public:
	TArray<class UFortAlterationItemDefinition*>  outActiveAlterations;                              // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetActiveAlterations) == 0x000004, "Wrong alignment on FortWeapon_GetActiveAlterations");
static_assert(sizeof(FortWeapon_GetActiveAlterations) == 0x00000C, "Wrong size on FortWeapon_GetActiveAlterations");
static_assert(offsetof(FortWeapon_GetActiveAlterations, outActiveAlterations) == 0x000000, "Member 'FortWeapon_GetActiveAlterations::outActiveAlterations' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnInitAlteration
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_OnInitAlteration final
{
public:
	class UFortAlterationItemDefinition*          NewAlteration;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnInitAlteration) == 0x000004, "Wrong alignment on FortWeapon_OnInitAlteration");
static_assert(sizeof(FortWeapon_OnInitAlteration) == 0x000004, "Wrong size on FortWeapon_OnInitAlteration");
static_assert(offsetof(FortWeapon_OnInitAlteration, NewAlteration) == 0x000000, "Member 'FortWeapon_OnInitAlteration::NewAlteration' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnInitCosmeticAlterations
// 0x0038 (0x0038 - 0x0000)
struct FortWeapon_OnInitCosmeticAlterations final
{
public:
	struct FFortCosmeticModification              CosmeticMod;                                       // 0x0000(0x0034)(Parm, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicMaterialInstance;                           // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnInitCosmeticAlterations) == 0x000004, "Wrong alignment on FortWeapon_OnInitCosmeticAlterations");
static_assert(sizeof(FortWeapon_OnInitCosmeticAlterations) == 0x000038, "Wrong size on FortWeapon_OnInitCosmeticAlterations");
static_assert(offsetof(FortWeapon_OnInitCosmeticAlterations, CosmeticMod) == 0x000000, "Member 'FortWeapon_OnInitCosmeticAlterations::CosmeticMod' has a wrong offset!");
static_assert(offsetof(FortWeapon_OnInitCosmeticAlterations, DynamicMaterialInstance) == 0x000034, "Member 'FortWeapon_OnInitCosmeticAlterations::DynamicMaterialInstance' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnPawnMontageStarted
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_OnPawnMontageStarted final
{
public:
	class UAnimMontage*                           PawnMontage;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnPawnMontageStarted) == 0x000004, "Wrong alignment on FortWeapon_OnPawnMontageStarted");
static_assert(sizeof(FortWeapon_OnPawnMontageStarted) == 0x000004, "Wrong size on FortWeapon_OnPawnMontageStarted");
static_assert(offsetof(FortWeapon_OnPawnMontageStarted, PawnMontage) == 0x000000, "Member 'FortWeapon_OnPawnMontageStarted::PawnMontage' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnPlayImpactFX
// 0x0088 (0x0088 - 0x0000)
struct FortWeapon_OnPlayImpactFX final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ImpactPhysicalSurface;                             // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               SpawnedPSC;                                        // 0x0084(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnPlayImpactFX) == 0x000004, "Wrong alignment on FortWeapon_OnPlayImpactFX");
static_assert(sizeof(FortWeapon_OnPlayImpactFX) == 0x000088, "Wrong size on FortWeapon_OnPlayImpactFX");
static_assert(offsetof(FortWeapon_OnPlayImpactFX, HitResult) == 0x000000, "Member 'FortWeapon_OnPlayImpactFX::HitResult' has a wrong offset!");
static_assert(offsetof(FortWeapon_OnPlayImpactFX, ImpactPhysicalSurface) == 0x000080, "Member 'FortWeapon_OnPlayImpactFX::ImpactPhysicalSurface' has a wrong offset!");
static_assert(offsetof(FortWeapon_OnPlayImpactFX, SpawnedPSC) == 0x000084, "Member 'FortWeapon_OnPlayImpactFX::SpawnedPSC' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnPlayReloadFX
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_OnPlayReloadFX final
{
public:
	EFortReloadFXState                            ReloadStage;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnPlayReloadFX) == 0x000001, "Wrong alignment on FortWeapon_OnPlayReloadFX");
static_assert(sizeof(FortWeapon_OnPlayReloadFX) == 0x000001, "Wrong size on FortWeapon_OnPlayReloadFX");
static_assert(offsetof(FortWeapon_OnPlayReloadFX, ReloadStage) == 0x000000, "Member 'FortWeapon_OnPlayReloadFX::ReloadStage' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnPlayWeaponFireFX
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_OnPlayWeaponFireFX final
{
public:
	bool                                          bPersistentFire;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnPlayWeaponFireFX) == 0x000001, "Wrong alignment on FortWeapon_OnPlayWeaponFireFX");
static_assert(sizeof(FortWeapon_OnPlayWeaponFireFX) == 0x000001, "Wrong size on FortWeapon_OnPlayWeaponFireFX");
static_assert(offsetof(FortWeapon_OnPlayWeaponFireFX, bPersistentFire) == 0x000000, "Member 'FortWeapon_OnPlayWeaponFireFX::bPersistentFire' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnSetTargeting
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_OnSetTargeting final
{
public:
	bool                                          bNewIsTargeting;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnSetTargeting) == 0x000001, "Wrong alignment on FortWeapon_OnSetTargeting");
static_assert(sizeof(FortWeapon_OnSetTargeting) == 0x000001, "Wrong size on FortWeapon_OnSetTargeting");
static_assert(offsetof(FortWeapon_OnSetTargeting, bNewIsTargeting) == 0x000000, "Member 'FortWeapon_OnSetTargeting::bNewIsTargeting' has a wrong offset!");

// Function FortniteGame.FortWeapon.OnWeaponVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_OnWeaponVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_OnWeaponVisibilityChanged) == 0x000001, "Wrong alignment on FortWeapon_OnWeaponVisibilityChanged");
static_assert(sizeof(FortWeapon_OnWeaponVisibilityChanged) == 0x000001, "Wrong size on FortWeapon_OnWeaponVisibilityChanged");
static_assert(offsetof(FortWeapon_OnWeaponVisibilityChanged, bVisible) == 0x000000, "Member 'FortWeapon_OnWeaponVisibilityChanged::bVisible' has a wrong offset!");

// Function FortniteGame.FortWeapon.PlayNativeImpactFX
// 0x0104 (0x0104 - 0x0000)
struct FortWeapon_PlayNativeImpactFX final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0080(0x0084)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_PlayNativeImpactFX) == 0x000004, "Wrong alignment on FortWeapon_PlayNativeImpactFX");
static_assert(sizeof(FortWeapon_PlayNativeImpactFX) == 0x000104, "Wrong size on FortWeapon_PlayNativeImpactFX");
static_assert(offsetof(FortWeapon_PlayNativeImpactFX, HitResult) == 0x000000, "Member 'FortWeapon_PlayNativeImpactFX::HitResult' has a wrong offset!");
static_assert(offsetof(FortWeapon_PlayNativeImpactFX, GameplayCueParameters) == 0x000080, "Member 'FortWeapon_PlayNativeImpactFX::GameplayCueParameters' has a wrong offset!");

// Function FortniteGame.FortWeapon.PlayReloadFX
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_PlayReloadFX final
{
public:
	EFortReloadFXState                            ReloadStage;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_PlayReloadFX) == 0x000001, "Wrong alignment on FortWeapon_PlayReloadFX");
static_assert(sizeof(FortWeapon_PlayReloadFX) == 0x000001, "Wrong size on FortWeapon_PlayReloadFX");
static_assert(offsetof(FortWeapon_PlayReloadFX, ReloadStage) == 0x000000, "Member 'FortWeapon_PlayReloadFX::ReloadStage' has a wrong offset!");

// Function FortniteGame.FortWeapon.PlayWeaponFireFX
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_PlayWeaponFireFX final
{
public:
	bool                                          bSecondaryFire;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_PlayWeaponFireFX) == 0x000001, "Wrong alignment on FortWeapon_PlayWeaponFireFX");
static_assert(sizeof(FortWeapon_PlayWeaponFireFX) == 0x000001, "Wrong size on FortWeapon_PlayWeaponFireFX");
static_assert(offsetof(FortWeapon_PlayWeaponFireFX, bSecondaryFire) == 0x000000, "Member 'FortWeapon_PlayWeaponFireFX::bSecondaryFire' has a wrong offset!");

// Function FortniteGame.FortWeapon.SetShouldDrawNativeReticle
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_SetShouldDrawNativeReticle final
{
public:
	bool                                          bInShouldDrawReticle;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_SetShouldDrawNativeReticle) == 0x000001, "Wrong alignment on FortWeapon_SetShouldDrawNativeReticle");
static_assert(sizeof(FortWeapon_SetShouldDrawNativeReticle) == 0x000001, "Wrong size on FortWeapon_SetShouldDrawNativeReticle");
static_assert(offsetof(FortWeapon_SetShouldDrawNativeReticle, bInShouldDrawReticle) == 0x000000, "Member 'FortWeapon_SetShouldDrawNativeReticle::bInShouldDrawReticle' has a wrong offset!");

// Function FortniteGame.FortWeapon.SetWeaponVisibility
// 0x0002 (0x0002 - 0x0000)
struct FortWeapon_SetWeaponVisibility final
{
public:
	bool                                          bDesiredVisibility;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForceUpdate;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_SetWeaponVisibility) == 0x000001, "Wrong alignment on FortWeapon_SetWeaponVisibility");
static_assert(sizeof(FortWeapon_SetWeaponVisibility) == 0x000002, "Wrong size on FortWeapon_SetWeaponVisibility");
static_assert(offsetof(FortWeapon_SetWeaponVisibility, bDesiredVisibility) == 0x000000, "Member 'FortWeapon_SetWeaponVisibility::bDesiredVisibility' has a wrong offset!");
static_assert(offsetof(FortWeapon_SetWeaponVisibility, bForceUpdate) == 0x000001, "Member 'FortWeapon_SetWeaponVisibility::bForceUpdate' has a wrong offset!");

// Function FortniteGame.FortWeapon.UseWeaponDurability
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_UseWeaponDurability final
{
public:
	float                                         DurabilityScale;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_UseWeaponDurability) == 0x000004, "Wrong alignment on FortWeapon_UseWeaponDurability");
static_assert(sizeof(FortWeapon_UseWeaponDurability) == 0x000004, "Wrong size on FortWeapon_UseWeaponDurability");
static_assert(offsetof(FortWeapon_UseWeaponDurability, DurabilityScale) == 0x000000, "Member 'FortWeapon_UseWeaponDurability::DurabilityScale' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetAlterations
// 0x000C (0x000C - 0x0000)
struct FortWeapon_GetAlterations final
{
public:
	TArray<class UFortAlterationItemDefinition*>  ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetAlterations) == 0x000004, "Wrong alignment on FortWeapon_GetAlterations");
static_assert(sizeof(FortWeapon_GetAlterations) == 0x00000C, "Wrong size on FortWeapon_GetAlterations");
static_assert(offsetof(FortWeapon_GetAlterations, ReturnValue) == 0x000000, "Member 'FortWeapon_GetAlterations::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetBulletsPerClip
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetBulletsPerClip final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetBulletsPerClip) == 0x000004, "Wrong alignment on FortWeapon_GetBulletsPerClip");
static_assert(sizeof(FortWeapon_GetBulletsPerClip) == 0x000004, "Wrong size on FortWeapon_GetBulletsPerClip");
static_assert(offsetof(FortWeapon_GetBulletsPerClip, ReturnValue) == 0x000000, "Member 'FortWeapon_GetBulletsPerClip::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetChargePercent
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetChargePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetChargePercent) == 0x000004, "Wrong alignment on FortWeapon_GetChargePercent");
static_assert(sizeof(FortWeapon_GetChargePercent) == 0x000004, "Wrong size on FortWeapon_GetChargePercent");
static_assert(offsetof(FortWeapon_GetChargePercent, ReturnValue) == 0x000000, "Member 'FortWeapon_GetChargePercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetCoreAnimation
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_GetCoreAnimation final
{
public:
	EFortWeaponCoreAnimation                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetCoreAnimation) == 0x000001, "Wrong alignment on FortWeapon_GetCoreAnimation");
static_assert(sizeof(FortWeapon_GetCoreAnimation) == 0x000001, "Wrong size on FortWeapon_GetCoreAnimation");
static_assert(offsetof(FortWeapon_GetCoreAnimation, ReturnValue) == 0x000000, "Member 'FortWeapon_GetCoreAnimation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetCurrentMaxChargePercent
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetCurrentMaxChargePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetCurrentMaxChargePercent) == 0x000004, "Wrong alignment on FortWeapon_GetCurrentMaxChargePercent");
static_assert(sizeof(FortWeapon_GetCurrentMaxChargePercent) == 0x000004, "Wrong size on FortWeapon_GetCurrentMaxChargePercent");
static_assert(offsetof(FortWeapon_GetCurrentMaxChargePercent, ReturnValue) == 0x000000, "Member 'FortWeapon_GetCurrentMaxChargePercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetDamageStartLocation
// 0x0018 (0x0018 - 0x0000)
struct FortWeapon_GetDamageStartLocation final
{
public:
	struct FVector                                AimDir;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetDamageStartLocation) == 0x000004, "Wrong alignment on FortWeapon_GetDamageStartLocation");
static_assert(sizeof(FortWeapon_GetDamageStartLocation) == 0x000018, "Wrong size on FortWeapon_GetDamageStartLocation");
static_assert(offsetof(FortWeapon_GetDamageStartLocation, AimDir) == 0x000000, "Member 'FortWeapon_GetDamageStartLocation::AimDir' has a wrong offset!");
static_assert(offsetof(FortWeapon_GetDamageStartLocation, ReturnValue) == 0x00000C, "Member 'FortWeapon_GetDamageStartLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetLocalMagazineAmmoCount
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetLocalMagazineAmmoCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetLocalMagazineAmmoCount) == 0x000004, "Wrong alignment on FortWeapon_GetLocalMagazineAmmoCount");
static_assert(sizeof(FortWeapon_GetLocalMagazineAmmoCount) == 0x000004, "Wrong size on FortWeapon_GetLocalMagazineAmmoCount");
static_assert(offsetof(FortWeapon_GetLocalMagazineAmmoCount, ReturnValue) == 0x000000, "Member 'FortWeapon_GetLocalMagazineAmmoCount::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetLocalRemainingAmmo
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetLocalRemainingAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetLocalRemainingAmmo) == 0x000004, "Wrong alignment on FortWeapon_GetLocalRemainingAmmo");
static_assert(sizeof(FortWeapon_GetLocalRemainingAmmo) == 0x000004, "Wrong size on FortWeapon_GetLocalRemainingAmmo");
static_assert(offsetof(FortWeapon_GetLocalRemainingAmmo, ReturnValue) == 0x000000, "Member 'FortWeapon_GetLocalRemainingAmmo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetMagazineAmmoCount
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetMagazineAmmoCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetMagazineAmmoCount) == 0x000004, "Wrong alignment on FortWeapon_GetMagazineAmmoCount");
static_assert(sizeof(FortWeapon_GetMagazineAmmoCount) == 0x000004, "Wrong size on FortWeapon_GetMagazineAmmoCount");
static_assert(offsetof(FortWeapon_GetMagazineAmmoCount, ReturnValue) == 0x000000, "Member 'FortWeapon_GetMagazineAmmoCount::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetRange
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetRange) == 0x000004, "Wrong alignment on FortWeapon_GetRange");
static_assert(sizeof(FortWeapon_GetRange) == 0x000004, "Wrong size on FortWeapon_GetRange");
static_assert(offsetof(FortWeapon_GetRange, ReturnValue) == 0x000000, "Member 'FortWeapon_GetRange::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetReloadProgress
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetReloadProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetReloadProgress) == 0x000004, "Wrong alignment on FortWeapon_GetReloadProgress");
static_assert(sizeof(FortWeapon_GetReloadProgress) == 0x000004, "Wrong size on FortWeapon_GetReloadProgress");
static_assert(offsetof(FortWeapon_GetReloadProgress, ReturnValue) == 0x000000, "Member 'FortWeapon_GetReloadProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetReloadTime
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetReloadTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetReloadTime) == 0x000004, "Wrong alignment on FortWeapon_GetReloadTime");
static_assert(sizeof(FortWeapon_GetReloadTime) == 0x000004, "Wrong size on FortWeapon_GetReloadTime");
static_assert(offsetof(FortWeapon_GetReloadTime, ReturnValue) == 0x000000, "Member 'FortWeapon_GetReloadTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetRemainingAmmo
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetRemainingAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetRemainingAmmo) == 0x000004, "Wrong alignment on FortWeapon_GetRemainingAmmo");
static_assert(sizeof(FortWeapon_GetRemainingAmmo) == 0x000004, "Wrong size on FortWeapon_GetRemainingAmmo");
static_assert(offsetof(FortWeapon_GetRemainingAmmo, ReturnValue) == 0x000000, "Member 'FortWeapon_GetRemainingAmmo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.GetReticleColor
// 0x0004 (0x0004 - 0x0000)
struct FortWeapon_GetReticleColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_GetReticleColor) == 0x000004, "Wrong alignment on FortWeapon_GetReticleColor");
static_assert(sizeof(FortWeapon_GetReticleColor) == 0x000004, "Wrong size on FortWeapon_GetReticleColor");
static_assert(offsetof(FortWeapon_GetReticleColor, ReturnValue) == 0x000000, "Member 'FortWeapon_GetReticleColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeapon.IsReloading
// 0x0001 (0x0001 - 0x0000)
struct FortWeapon_IsReloading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeapon_IsReloading) == 0x000001, "Wrong alignment on FortWeapon_IsReloading");
static_assert(sizeof(FortWeapon_IsReloading) == 0x000001, "Wrong size on FortWeapon_IsReloading");
static_assert(offsetof(FortWeapon_IsReloading, ReturnValue) == 0x000000, "Member 'FortWeapon_IsReloading::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoTool.ServerSpawnDeco
// 0x001C (0x001C - 0x0000)
struct FortDecoTool_ServerSpawnDeco final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ABuildingSMActor*                       AttachedActor;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoTool_ServerSpawnDeco) == 0x000004, "Wrong alignment on FortDecoTool_ServerSpawnDeco");
static_assert(sizeof(FortDecoTool_ServerSpawnDeco) == 0x00001C, "Wrong size on FortDecoTool_ServerSpawnDeco");
static_assert(offsetof(FortDecoTool_ServerSpawnDeco, Location) == 0x000000, "Member 'FortDecoTool_ServerSpawnDeco::Location' has a wrong offset!");
static_assert(offsetof(FortDecoTool_ServerSpawnDeco, Rotation) == 0x00000C, "Member 'FortDecoTool_ServerSpawnDeco::Rotation' has a wrong offset!");
static_assert(offsetof(FortDecoTool_ServerSpawnDeco, AttachedActor) == 0x000018, "Member 'FortDecoTool_ServerSpawnDeco::AttachedActor' has a wrong offset!");

// Function FortniteGame.BuildingOutpostStorageVault.MoveItemFromStorage
// 0x000C (0x000C - 0x0000)
struct BuildingOutpostStorageVault_MoveItemFromStorage final
{
public:
	class AFortPlayerControllerOutpost*           Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItem*                         Item;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostStorageVault_MoveItemFromStorage) == 0x000004, "Wrong alignment on BuildingOutpostStorageVault_MoveItemFromStorage");
static_assert(sizeof(BuildingOutpostStorageVault_MoveItemFromStorage) == 0x00000C, "Wrong size on BuildingOutpostStorageVault_MoveItemFromStorage");
static_assert(offsetof(BuildingOutpostStorageVault_MoveItemFromStorage, Player) == 0x000000, "Member 'BuildingOutpostStorageVault_MoveItemFromStorage::Player' has a wrong offset!");
static_assert(offsetof(BuildingOutpostStorageVault_MoveItemFromStorage, Item) == 0x000004, "Member 'BuildingOutpostStorageVault_MoveItemFromStorage::Item' has a wrong offset!");
static_assert(offsetof(BuildingOutpostStorageVault_MoveItemFromStorage, Count) == 0x000008, "Member 'BuildingOutpostStorageVault_MoveItemFromStorage::Count' has a wrong offset!");

// Function FortniteGame.BuildingOutpostStorageVault.MoveItemToStorage
// 0x000C (0x000C - 0x0000)
struct BuildingOutpostStorageVault_MoveItemToStorage final
{
public:
	class AFortPlayerControllerOutpost*           Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItem*                         Item;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostStorageVault_MoveItemToStorage) == 0x000004, "Wrong alignment on BuildingOutpostStorageVault_MoveItemToStorage");
static_assert(sizeof(BuildingOutpostStorageVault_MoveItemToStorage) == 0x00000C, "Wrong size on BuildingOutpostStorageVault_MoveItemToStorage");
static_assert(offsetof(BuildingOutpostStorageVault_MoveItemToStorage, Player) == 0x000000, "Member 'BuildingOutpostStorageVault_MoveItemToStorage::Player' has a wrong offset!");
static_assert(offsetof(BuildingOutpostStorageVault_MoveItemToStorage, Item) == 0x000004, "Member 'BuildingOutpostStorageVault_MoveItemToStorage::Item' has a wrong offset!");
static_assert(offsetof(BuildingOutpostStorageVault_MoveItemToStorage, Count) == 0x000008, "Member 'BuildingOutpostStorageVault_MoveItemToStorage::Count' has a wrong offset!");

// Function FortniteGame.BuildingOutpostStorageVault.GetMaxSlotsNum
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostStorageVault_GetMaxSlotsNum final
{
public:
	class AFortPlayerControllerOutpost*           Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostStorageVault_GetMaxSlotsNum) == 0x000004, "Wrong alignment on BuildingOutpostStorageVault_GetMaxSlotsNum");
static_assert(sizeof(BuildingOutpostStorageVault_GetMaxSlotsNum) == 0x000008, "Wrong size on BuildingOutpostStorageVault_GetMaxSlotsNum");
static_assert(offsetof(BuildingOutpostStorageVault_GetMaxSlotsNum, Player) == 0x000000, "Member 'BuildingOutpostStorageVault_GetMaxSlotsNum::Player' has a wrong offset!");
static_assert(offsetof(BuildingOutpostStorageVault_GetMaxSlotsNum, ReturnValue) == 0x000004, "Member 'BuildingOutpostStorageVault_GetMaxSlotsNum::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostStorageVault.GetOccupiedSlotsNum
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostStorageVault_GetOccupiedSlotsNum final
{
public:
	class AFortPlayerControllerOutpost*           Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostStorageVault_GetOccupiedSlotsNum) == 0x000004, "Wrong alignment on BuildingOutpostStorageVault_GetOccupiedSlotsNum");
static_assert(sizeof(BuildingOutpostStorageVault_GetOccupiedSlotsNum) == 0x000008, "Wrong size on BuildingOutpostStorageVault_GetOccupiedSlotsNum");
static_assert(offsetof(BuildingOutpostStorageVault_GetOccupiedSlotsNum, Player) == 0x000000, "Member 'BuildingOutpostStorageVault_GetOccupiedSlotsNum::Player' has a wrong offset!");
static_assert(offsetof(BuildingOutpostStorageVault_GetOccupiedSlotsNum, ReturnValue) == 0x000004, "Member 'BuildingOutpostStorageVault_GetOccupiedSlotsNum::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostStorageVault.GetPlayerItems
// 0x0020 (0x0020 - 0x0000)
struct BuildingOutpostStorageVault_GetPlayerItems final
{
public:
	class AFortPlayerControllerOutpost*           Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          InventoryFilter;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchFilter;                                      // 0x0008(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostStorageVault_GetPlayerItems) == 0x000004, "Wrong alignment on BuildingOutpostStorageVault_GetPlayerItems");
static_assert(sizeof(BuildingOutpostStorageVault_GetPlayerItems) == 0x000020, "Wrong size on BuildingOutpostStorageVault_GetPlayerItems");
static_assert(offsetof(BuildingOutpostStorageVault_GetPlayerItems, Player) == 0x000000, "Member 'BuildingOutpostStorageVault_GetPlayerItems::Player' has a wrong offset!");
static_assert(offsetof(BuildingOutpostStorageVault_GetPlayerItems, InventoryFilter) == 0x000004, "Member 'BuildingOutpostStorageVault_GetPlayerItems::InventoryFilter' has a wrong offset!");
static_assert(offsetof(BuildingOutpostStorageVault_GetPlayerItems, SearchFilter) == 0x000008, "Member 'BuildingOutpostStorageVault_GetPlayerItems::SearchFilter' has a wrong offset!");
static_assert(offsetof(BuildingOutpostStorageVault_GetPlayerItems, ReturnValue) == 0x000014, "Member 'BuildingOutpostStorageVault_GetPlayerItems::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostStorageVault.GetStoredItems
// 0x0020 (0x0020 - 0x0000)
struct BuildingOutpostStorageVault_GetStoredItems final
{
public:
	class AFortPlayerControllerOutpost*           Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          InventoryFilter;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchFilter;                                      // 0x0008(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostStorageVault_GetStoredItems) == 0x000004, "Wrong alignment on BuildingOutpostStorageVault_GetStoredItems");
static_assert(sizeof(BuildingOutpostStorageVault_GetStoredItems) == 0x000020, "Wrong size on BuildingOutpostStorageVault_GetStoredItems");
static_assert(offsetof(BuildingOutpostStorageVault_GetStoredItems, Player) == 0x000000, "Member 'BuildingOutpostStorageVault_GetStoredItems::Player' has a wrong offset!");
static_assert(offsetof(BuildingOutpostStorageVault_GetStoredItems, InventoryFilter) == 0x000004, "Member 'BuildingOutpostStorageVault_GetStoredItems::InventoryFilter' has a wrong offset!");
static_assert(offsetof(BuildingOutpostStorageVault_GetStoredItems, SearchFilter) == 0x000008, "Member 'BuildingOutpostStorageVault_GetStoredItems::SearchFilter' has a wrong offset!");
static_assert(offsetof(BuildingOutpostStorageVault_GetStoredItems, ReturnValue) == 0x000014, "Member 'BuildingOutpostStorageVault_GetStoredItems::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameState.GetDayPhaseHandler
// 0x0004 (0x0004 - 0x0000)
struct FortGameState_GetDayPhaseHandler final
{
public:
	class AFortDayNightLightingAndFog*            ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameState_GetDayPhaseHandler) == 0x000004, "Wrong alignment on FortGameState_GetDayPhaseHandler");
static_assert(sizeof(FortGameState_GetDayPhaseHandler) == 0x000004, "Wrong size on FortGameState_GetDayPhaseHandler");
static_assert(offsetof(FortGameState_GetDayPhaseHandler, ReturnValue) == 0x000000, "Member 'FortGameState_GetDayPhaseHandler::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingOutpostStormshieldUpgrade.Build
// 0x0004 (0x0004 - 0x0000)
struct BuildingOutpostStormshieldUpgrade_Build final
{
public:
	class AFortPlayerControllerOutpost*           InBuildingPlayer;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostStormshieldUpgrade_Build) == 0x000004, "Wrong alignment on BuildingOutpostStormshieldUpgrade_Build");
static_assert(sizeof(BuildingOutpostStormshieldUpgrade_Build) == 0x000004, "Wrong size on BuildingOutpostStormshieldUpgrade_Build");
static_assert(offsetof(BuildingOutpostStormshieldUpgrade_Build, InBuildingPlayer) == 0x000000, "Member 'BuildingOutpostStormshieldUpgrade_Build::InBuildingPlayer' has a wrong offset!");

// Function FortniteGame.BuildingOutpostStormshieldUpgrade.EmergencySetBuildFlag
// 0x0001 (0x0001 - 0x0000)
struct BuildingOutpostStormshieldUpgrade_EmergencySetBuildFlag final
{
public:
	bool                                          bNewBuild;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingOutpostStormshieldUpgrade_EmergencySetBuildFlag) == 0x000001, "Wrong alignment on BuildingOutpostStormshieldUpgrade_EmergencySetBuildFlag");
static_assert(sizeof(BuildingOutpostStormshieldUpgrade_EmergencySetBuildFlag) == 0x000001, "Wrong size on BuildingOutpostStormshieldUpgrade_EmergencySetBuildFlag");
static_assert(offsetof(BuildingOutpostStormshieldUpgrade_EmergencySetBuildFlag, bNewBuild) == 0x000000, "Member 'BuildingOutpostStormshieldUpgrade_EmergencySetBuildFlag::bNewBuild' has a wrong offset!");

// Function FortniteGame.BuildingOutpostStormshieldUpgrade.CanBuild
// 0x0008 (0x0008 - 0x0000)
struct BuildingOutpostStormshieldUpgrade_CanBuild final
{
public:
	class AFortPlayerControllerOutpost*           InBuildingPlayer;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLog;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingOutpostStormshieldUpgrade_CanBuild) == 0x000004, "Wrong alignment on BuildingOutpostStormshieldUpgrade_CanBuild");
static_assert(sizeof(BuildingOutpostStormshieldUpgrade_CanBuild) == 0x000008, "Wrong size on BuildingOutpostStormshieldUpgrade_CanBuild");
static_assert(offsetof(BuildingOutpostStormshieldUpgrade_CanBuild, InBuildingPlayer) == 0x000000, "Member 'BuildingOutpostStormshieldUpgrade_CanBuild::InBuildingPlayer' has a wrong offset!");
static_assert(offsetof(BuildingOutpostStormshieldUpgrade_CanBuild, bLog) == 0x000004, "Member 'BuildingOutpostStormshieldUpgrade_CanBuild::bLog' has a wrong offset!");
static_assert(offsetof(BuildingOutpostStormshieldUpgrade_CanBuild, ReturnValue) == 0x000005, "Member 'BuildingOutpostStormshieldUpgrade_CanBuild::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltip.GetNumericValue
// 0x0020 (0x0020 - 0x0000)
struct FortTooltip_GetNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_GetNumericValue) == 0x000004, "Wrong alignment on FortTooltip_GetNumericValue");
static_assert(sizeof(FortTooltip_GetNumericValue) == 0x000020, "Wrong size on FortTooltip_GetNumericValue");
static_assert(offsetof(FortTooltip_GetNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortTooltip_GetNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValue, Tag) == 0x000004, "Member 'FortTooltip_GetNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValue, Context) == 0x00000C, "Member 'FortTooltip_GetNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValue, Token) == 0x000010, "Member 'FortTooltip_GetNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValue, OutVal) == 0x000018, "Member 'FortTooltip_GetNumericValue::OutVal' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValue, ReturnValue) == 0x00001C, "Member 'FortTooltip_GetNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltip.GetNumericValueInternal
// 0x0020 (0x0020 - 0x0000)
struct FortTooltip_GetNumericValueInternal final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutVal;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_GetNumericValueInternal) == 0x000004, "Wrong alignment on FortTooltip_GetNumericValueInternal");
static_assert(sizeof(FortTooltip_GetNumericValueInternal) == 0x000020, "Wrong size on FortTooltip_GetNumericValueInternal");
static_assert(offsetof(FortTooltip_GetNumericValueInternal, ObjectToDescribe) == 0x000000, "Member 'FortTooltip_GetNumericValueInternal::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValueInternal, Tag) == 0x000004, "Member 'FortTooltip_GetNumericValueInternal::Tag' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValueInternal, Context) == 0x00000C, "Member 'FortTooltip_GetNumericValueInternal::Context' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValueInternal, Token) == 0x000010, "Member 'FortTooltip_GetNumericValueInternal::Token' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValueInternal, OutVal) == 0x000018, "Member 'FortTooltip_GetNumericValueInternal::OutVal' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetNumericValueInternal, ReturnValue) == 0x00001C, "Member 'FortTooltip_GetNumericValueInternal::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltip.GetTextForToken
// 0x0028 (0x0028 - 0x0000)
struct FortTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0018(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_GetTextForToken) == 0x000004, "Wrong alignment on FortTooltip_GetTextForToken");
static_assert(sizeof(FortTooltip_GetTextForToken) == 0x000028, "Wrong size on FortTooltip_GetTextForToken");
static_assert(offsetof(FortTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForToken, Tag) == 0x000004, "Member 'FortTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForToken, Context) == 0x00000C, "Member 'FortTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForToken, Token) == 0x000010, "Member 'FortTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForToken, OutText) == 0x000018, "Member 'FortTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForToken, ReturnValue) == 0x000024, "Member 'FortTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltip.GetTextForTokenInternal
// 0x0028 (0x0028 - 0x0000)
struct FortTooltip_GetTextForTokenInternal final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0018(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_GetTextForTokenInternal) == 0x000004, "Wrong alignment on FortTooltip_GetTextForTokenInternal");
static_assert(sizeof(FortTooltip_GetTextForTokenInternal) == 0x000028, "Wrong size on FortTooltip_GetTextForTokenInternal");
static_assert(offsetof(FortTooltip_GetTextForTokenInternal, ObjectToDescribe) == 0x000000, "Member 'FortTooltip_GetTextForTokenInternal::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForTokenInternal, Tag) == 0x000004, "Member 'FortTooltip_GetTextForTokenInternal::Tag' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForTokenInternal, Context) == 0x00000C, "Member 'FortTooltip_GetTextForTokenInternal::Context' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForTokenInternal, Token) == 0x000010, "Member 'FortTooltip_GetTextForTokenInternal::Token' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForTokenInternal, OutText) == 0x000018, "Member 'FortTooltip_GetTextForTokenInternal::OutText' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTextForTokenInternal, ReturnValue) == 0x000024, "Member 'FortTooltip_GetTextForTokenInternal::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltip.GetTokenizedDescriptionText
// 0x0020 (0x0020 - 0x0000)
struct FortTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutDescription;                                    // 0x0010(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_GetTokenizedDescriptionText) == 0x000004, "Wrong alignment on FortTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortTooltip_GetTokenizedDescriptionText) == 0x000020, "Wrong size on FortTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionText, Tag) == 0x000004, "Member 'FortTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionText, Context) == 0x00000C, "Member 'FortTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000010, "Member 'FortTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x00001C, "Member 'FortTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTooltip.GetTokenizedDescriptionTextInternal
// 0x0020 (0x0020 - 0x0000)
struct FortTooltip_GetTokenizedDescriptionTextInternal final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutDescription;                                    // 0x0010(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTooltip_GetTokenizedDescriptionTextInternal) == 0x000004, "Wrong alignment on FortTooltip_GetTokenizedDescriptionTextInternal");
static_assert(sizeof(FortTooltip_GetTokenizedDescriptionTextInternal) == 0x000020, "Wrong size on FortTooltip_GetTokenizedDescriptionTextInternal");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionTextInternal, ObjectToDescribe) == 0x000000, "Member 'FortTooltip_GetTokenizedDescriptionTextInternal::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionTextInternal, Tag) == 0x000004, "Member 'FortTooltip_GetTokenizedDescriptionTextInternal::Tag' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionTextInternal, Context) == 0x00000C, "Member 'FortTooltip_GetTokenizedDescriptionTextInternal::Context' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionTextInternal, OutDescription) == 0x000010, "Member 'FortTooltip_GetTokenizedDescriptionTextInternal::OutDescription' has a wrong offset!");
static_assert(offsetof(FortTooltip_GetTokenizedDescriptionTextInternal, ReturnValue) == 0x00001C, "Member 'FortTooltip_GetTokenizedDescriptionTextInternal::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinitionTooltip.GetTextForToken
// 0x0028 (0x0028 - 0x0000)
struct FortItemDefinitionTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0018(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemDefinitionTooltip_GetTextForToken) == 0x000004, "Wrong alignment on FortItemDefinitionTooltip_GetTextForToken");
static_assert(sizeof(FortItemDefinitionTooltip_GetTextForToken) == 0x000028, "Wrong size on FortItemDefinitionTooltip_GetTextForToken");
static_assert(offsetof(FortItemDefinitionTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortItemDefinitionTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTextForToken, Tag) == 0x000004, "Member 'FortItemDefinitionTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTextForToken, Context) == 0x00000C, "Member 'FortItemDefinitionTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTextForToken, Token) == 0x000010, "Member 'FortItemDefinitionTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTextForToken, OutText) == 0x000018, "Member 'FortItemDefinitionTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTextForToken, ReturnValue) == 0x000024, "Member 'FortItemDefinitionTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortItemDefinitionTooltip.GetTokenizedDescriptionText
// 0x0020 (0x0020 - 0x0000)
struct FortItemDefinitionTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutDescription;                                    // 0x0010(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000004, "Wrong alignment on FortItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000020, "Wrong size on FortItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortItemDefinitionTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortItemDefinitionTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTokenizedDescriptionText, Tag) == 0x000004, "Member 'FortItemDefinitionTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTokenizedDescriptionText, Context) == 0x00000C, "Member 'FortItemDefinitionTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000010, "Member 'FortItemDefinitionTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortItemDefinitionTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x00001C, "Member 'FortItemDefinitionTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemDefinitionTooltip.GetTextForToken
// 0x0028 (0x0028 - 0x0000)
struct FortWorldItemDefinitionTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0018(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWorldItemDefinitionTooltip_GetTextForToken) == 0x000004, "Wrong alignment on FortWorldItemDefinitionTooltip_GetTextForToken");
static_assert(sizeof(FortWorldItemDefinitionTooltip_GetTextForToken) == 0x000028, "Wrong size on FortWorldItemDefinitionTooltip_GetTextForToken");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortWorldItemDefinitionTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTextForToken, Tag) == 0x000004, "Member 'FortWorldItemDefinitionTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTextForToken, Context) == 0x00000C, "Member 'FortWorldItemDefinitionTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTextForToken, Token) == 0x000010, "Member 'FortWorldItemDefinitionTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTextForToken, OutText) == 0x000018, "Member 'FortWorldItemDefinitionTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTextForToken, ReturnValue) == 0x000024, "Member 'FortWorldItemDefinitionTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWorldItemDefinitionTooltip.GetTokenizedDescriptionText
// 0x0020 (0x0020 - 0x0000)
struct FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutDescription;                                    // 0x0010(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000004, "Wrong alignment on FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000020, "Wrong size on FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText, Tag) == 0x000004, "Member 'FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText, Context) == 0x00000C, "Member 'FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000010, "Member 'FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x00001C, "Member 'FortWorldItemDefinitionTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.AddDamageComponent
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_AddDamageComponent final
{
public:
	class UPrimitiveComponent*                    DamageComponent;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_AddDamageComponent) == 0x000004, "Wrong alignment on BuildingTrap_AddDamageComponent");
static_assert(sizeof(BuildingTrap_AddDamageComponent) == 0x000004, "Wrong size on BuildingTrap_AddDamageComponent");
static_assert(offsetof(BuildingTrap_AddDamageComponent, DamageComponent) == 0x000000, "Member 'BuildingTrap_AddDamageComponent::DamageComponent' has a wrong offset!");

// Function FortniteGame.BuildingTrap.AddTriggerComponent
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_AddTriggerComponent final
{
public:
	class UPrimitiveComponent*                    TriggerComponent;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_AddTriggerComponent) == 0x000004, "Wrong alignment on BuildingTrap_AddTriggerComponent");
static_assert(sizeof(BuildingTrap_AddTriggerComponent) == 0x000004, "Wrong size on BuildingTrap_AddTriggerComponent");
static_assert(offsetof(BuildingTrap_AddTriggerComponent, TriggerComponent) == 0x000000, "Member 'BuildingTrap_AddTriggerComponent::TriggerComponent' has a wrong offset!");

// Function FortniteGame.BuildingTrap.AttemptRetrigger
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_AttemptRetrigger final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_AttemptRetrigger) == 0x000004, "Wrong alignment on BuildingTrap_AttemptRetrigger");
static_assert(sizeof(BuildingTrap_AttemptRetrigger) == 0x000004, "Wrong size on BuildingTrap_AttemptRetrigger");
static_assert(offsetof(BuildingTrap_AttemptRetrigger, Seconds) == 0x000000, "Member 'BuildingTrap_AttemptRetrigger::Seconds' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetArmTime
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetArmTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetArmTime) == 0x000004, "Wrong alignment on BuildingTrap_GetArmTime");
static_assert(sizeof(BuildingTrap_GetArmTime) == 0x000004, "Wrong size on BuildingTrap_GetArmTime");
static_assert(offsetof(BuildingTrap_GetArmTime, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetArmTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetBuildTime
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetBuildTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetBuildTime) == 0x000004, "Wrong alignment on BuildingTrap_GetBuildTime");
static_assert(sizeof(BuildingTrap_GetBuildTime) == 0x000004, "Wrong size on BuildingTrap_GetBuildTime");
static_assert(offsetof(BuildingTrap_GetBuildTime, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetBuildTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetCenter
// 0x000C (0x000C - 0x0000)
struct BuildingTrap_GetCenter final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetCenter) == 0x000004, "Wrong alignment on BuildingTrap_GetCenter");
static_assert(sizeof(BuildingTrap_GetCenter) == 0x00000C, "Wrong size on BuildingTrap_GetCenter");
static_assert(offsetof(BuildingTrap_GetCenter, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetCenter::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetReloadTime
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetReloadTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetReloadTime) == 0x000004, "Wrong alignment on BuildingTrap_GetReloadTime");
static_assert(sizeof(BuildingTrap_GetReloadTime) == 0x000004, "Wrong size on BuildingTrap_GetReloadTime");
static_assert(offsetof(BuildingTrap_GetReloadTime, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetReloadTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.OnInitAlteration
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_OnInitAlteration final
{
public:
	class UFortAlterationItemDefinition*          NewAlteration;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_OnInitAlteration) == 0x000004, "Wrong alignment on BuildingTrap_OnInitAlteration");
static_assert(sizeof(BuildingTrap_OnInitAlteration) == 0x000004, "Wrong size on BuildingTrap_OnInitAlteration");
static_assert(offsetof(BuildingTrap_OnInitAlteration, NewAlteration) == 0x000000, "Member 'BuildingTrap_OnInitAlteration::NewAlteration' has a wrong offset!");

// Function FortniteGame.BuildingTrap.OnInitCosmeticAlterations
// 0x0034 (0x0034 - 0x0000)
struct BuildingTrap_OnInitCosmeticAlterations final
{
public:
	struct FFortCosmeticModification              CosmeticMod;                                       // 0x0000(0x0034)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_OnInitCosmeticAlterations) == 0x000004, "Wrong alignment on BuildingTrap_OnInitCosmeticAlterations");
static_assert(sizeof(BuildingTrap_OnInitCosmeticAlterations) == 0x000034, "Wrong size on BuildingTrap_OnInitCosmeticAlterations");
static_assert(offsetof(BuildingTrap_OnInitCosmeticAlterations, CosmeticMod) == 0x000000, "Member 'BuildingTrap_OnInitCosmeticAlterations::CosmeticMod' has a wrong offset!");

// Function FortniteGame.BuildingTrap.OnTriggerTouch
// 0x0090 (0x0090 - 0x0000)
struct BuildingTrap_OnTriggerTouch final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_OnTriggerTouch) == 0x000004, "Wrong alignment on BuildingTrap_OnTriggerTouch");
static_assert(sizeof(BuildingTrap_OnTriggerTouch) == 0x000090, "Wrong size on BuildingTrap_OnTriggerTouch");
static_assert(offsetof(BuildingTrap_OnTriggerTouch, OtherActor) == 0x000000, "Member 'BuildingTrap_OnTriggerTouch::OtherActor' has a wrong offset!");
static_assert(offsetof(BuildingTrap_OnTriggerTouch, OtherComp) == 0x000004, "Member 'BuildingTrap_OnTriggerTouch::OtherComp' has a wrong offset!");
static_assert(offsetof(BuildingTrap_OnTriggerTouch, OtherBodyIndex) == 0x000008, "Member 'BuildingTrap_OnTriggerTouch::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BuildingTrap_OnTriggerTouch, bFromSweep) == 0x00000C, "Member 'BuildingTrap_OnTriggerTouch::bFromSweep' has a wrong offset!");
static_assert(offsetof(BuildingTrap_OnTriggerTouch, SweepResult) == 0x000010, "Member 'BuildingTrap_OnTriggerTouch::SweepResult' has a wrong offset!");

// Function FortniteGame.BuildingTrap.BP_ShouldTrigger
// 0x0010 (0x0010 - 0x0000)
struct BuildingTrap_BP_ShouldTrigger final
{
public:
	TArray<class AActor*>                         TouchingActors;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingTrap_BP_ShouldTrigger) == 0x000004, "Wrong alignment on BuildingTrap_BP_ShouldTrigger");
static_assert(sizeof(BuildingTrap_BP_ShouldTrigger) == 0x000010, "Wrong size on BuildingTrap_BP_ShouldTrigger");
static_assert(offsetof(BuildingTrap_BP_ShouldTrigger, TouchingActors) == 0x000000, "Member 'BuildingTrap_BP_ShouldTrigger::TouchingActors' has a wrong offset!");
static_assert(offsetof(BuildingTrap_BP_ShouldTrigger, ReturnValue) == 0x00000C, "Member 'BuildingTrap_BP_ShouldTrigger::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetAlterations
// 0x000C (0x000C - 0x0000)
struct BuildingTrap_GetAlterations final
{
public:
	TArray<class UFortAlterationItemDefinition*>  ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetAlterations) == 0x000004, "Wrong alignment on BuildingTrap_GetAlterations");
static_assert(sizeof(BuildingTrap_GetAlterations) == 0x00000C, "Wrong size on BuildingTrap_GetAlterations");
static_assert(offsetof(BuildingTrap_GetAlterations, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetAlterations::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetBuildingAttachedTo
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetBuildingAttachedTo final
{
public:
	class ABuildingSMActor*                       ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetBuildingAttachedTo) == 0x000004, "Wrong alignment on BuildingTrap_GetBuildingAttachedTo");
static_assert(sizeof(BuildingTrap_GetBuildingAttachedTo) == 0x000004, "Wrong size on BuildingTrap_GetBuildingAttachedTo");
static_assert(offsetof(BuildingTrap_GetBuildingAttachedTo, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetBuildingAttachedTo::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetDamageDelay
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetDamageDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetDamageDelay) == 0x000004, "Wrong alignment on BuildingTrap_GetDamageDelay");
static_assert(sizeof(BuildingTrap_GetDamageDelay) == 0x000004, "Wrong size on BuildingTrap_GetDamageDelay");
static_assert(offsetof(BuildingTrap_GetDamageDelay, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetDamageDelay::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetDurabilityPercent
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetDurabilityPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetDurabilityPercent) == 0x000004, "Wrong alignment on BuildingTrap_GetDurabilityPercent");
static_assert(sizeof(BuildingTrap_GetDurabilityPercent) == 0x000004, "Wrong size on BuildingTrap_GetDurabilityPercent");
static_assert(offsetof(BuildingTrap_GetDurabilityPercent, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetDurabilityPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetFireDelay
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetFireDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetFireDelay) == 0x000004, "Wrong alignment on BuildingTrap_GetFireDelay");
static_assert(sizeof(BuildingTrap_GetFireDelay) == 0x000004, "Wrong size on BuildingTrap_GetFireDelay");
static_assert(offsetof(BuildingTrap_GetFireDelay, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetFireDelay::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetFireLocationAndRotation
// 0x0030 (0x0030 - 0x0000)
struct BuildingTrap_GetFireLocationAndRotation final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetFireLocationAndRotation) == 0x000010, "Wrong alignment on BuildingTrap_GetFireLocationAndRotation");
static_assert(sizeof(BuildingTrap_GetFireLocationAndRotation) == 0x000030, "Wrong size on BuildingTrap_GetFireLocationAndRotation");
static_assert(offsetof(BuildingTrap_GetFireLocationAndRotation, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetFireLocationAndRotation::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetMaxDurability
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetMaxDurability final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetMaxDurability) == 0x000004, "Wrong alignment on BuildingTrap_GetMaxDurability");
static_assert(sizeof(BuildingTrap_GetMaxDurability) == 0x000004, "Wrong size on BuildingTrap_GetMaxDurability");
static_assert(offsetof(BuildingTrap_GetMaxDurability, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetMaxDurability::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetTouchingDamageTargets
// 0x0020 (0x0020 - 0x0000)
struct BuildingTrap_GetTouchingDamageTargets final
{
public:
	struct FFortTargetFilter                      Filter;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetTouchingDamageTargets) == 0x000004, "Wrong alignment on BuildingTrap_GetTouchingDamageTargets");
static_assert(sizeof(BuildingTrap_GetTouchingDamageTargets) == 0x000020, "Wrong size on BuildingTrap_GetTouchingDamageTargets");
static_assert(offsetof(BuildingTrap_GetTouchingDamageTargets, Filter) == 0x000000, "Member 'BuildingTrap_GetTouchingDamageTargets::Filter' has a wrong offset!");
static_assert(offsetof(BuildingTrap_GetTouchingDamageTargets, ReturnValue) == 0x000014, "Member 'BuildingTrap_GetTouchingDamageTargets::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.GetTrapLevel
// 0x0004 (0x0004 - 0x0000)
struct BuildingTrap_GetTrapLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_GetTrapLevel) == 0x000004, "Wrong alignment on BuildingTrap_GetTrapLevel");
static_assert(sizeof(BuildingTrap_GetTrapLevel) == 0x000004, "Wrong size on BuildingTrap_GetTrapLevel");
static_assert(offsetof(BuildingTrap_GetTrapLevel, ReturnValue) == 0x000000, "Member 'BuildingTrap_GetTrapLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTrap.HasDurability
// 0x0001 (0x0001 - 0x0000)
struct BuildingTrap_HasDurability final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTrap_HasDurability) == 0x000001, "Wrong alignment on BuildingTrap_HasDurability");
static_assert(sizeof(BuildingTrap_HasDurability) == 0x000001, "Wrong size on BuildingTrap_HasDurability");
static_assert(offsetof(BuildingTrap_HasDurability, ReturnValue) == 0x000000, "Member 'BuildingTrap_HasDurability::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRanged.GetBulletShellFXTemplate
// 0x0004 (0x0004 - 0x0000)
struct FortWeaponRanged_GetBulletShellFXTemplate final
{
public:
	class UParticleSystem*                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRanged_GetBulletShellFXTemplate) == 0x000004, "Wrong alignment on FortWeaponRanged_GetBulletShellFXTemplate");
static_assert(sizeof(FortWeaponRanged_GetBulletShellFXTemplate) == 0x000004, "Wrong size on FortWeaponRanged_GetBulletShellFXTemplate");
static_assert(offsetof(FortWeaponRanged_GetBulletShellFXTemplate, ReturnValue) == 0x000000, "Member 'FortWeaponRanged_GetBulletShellFXTemplate::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRanged.ShouldSpawnBulletShellFX
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponRanged_ShouldSpawnBulletShellFX final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRanged_ShouldSpawnBulletShellFX) == 0x000001, "Wrong alignment on FortWeaponRanged_ShouldSpawnBulletShellFX");
static_assert(sizeof(FortWeaponRanged_ShouldSpawnBulletShellFX) == 0x000001, "Wrong size on FortWeaponRanged_ShouldSpawnBulletShellFX");
static_assert(offsetof(FortWeaponRanged_ShouldSpawnBulletShellFX, ReturnValue) == 0x000000, "Member 'FortWeaponRanged_ShouldSpawnBulletShellFX::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRanged.GetMuzzleLocation
// 0x000C (0x000C - 0x0000)
struct FortWeaponRanged_GetMuzzleLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRanged_GetMuzzleLocation) == 0x000004, "Wrong alignment on FortWeaponRanged_GetMuzzleLocation");
static_assert(sizeof(FortWeaponRanged_GetMuzzleLocation) == 0x00000C, "Wrong size on FortWeaponRanged_GetMuzzleLocation");
static_assert(offsetof(FortWeaponRanged_GetMuzzleLocation, ReturnValue) == 0x000000, "Member 'FortWeaponRanged_GetMuzzleLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRanged.GetMuzzleSocketTransform
// 0x0030 (0x0030 - 0x0000)
struct FortWeaponRanged_GetMuzzleSocketTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRanged_GetMuzzleSocketTransform) == 0x000010, "Wrong alignment on FortWeaponRanged_GetMuzzleSocketTransform");
static_assert(sizeof(FortWeaponRanged_GetMuzzleSocketTransform) == 0x000030, "Wrong size on FortWeaponRanged_GetMuzzleSocketTransform");
static_assert(offsetof(FortWeaponRanged_GetMuzzleSocketTransform, ReturnValue) == 0x000000, "Member 'FortWeaponRanged_GetMuzzleSocketTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRanged.GetTimeToNextFire
// 0x0004 (0x0004 - 0x0000)
struct FortWeaponRanged_GetTimeToNextFire final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRanged_GetTimeToNextFire) == 0x000004, "Wrong alignment on FortWeaponRanged_GetTimeToNextFire");
static_assert(sizeof(FortWeaponRanged_GetTimeToNextFire) == 0x000004, "Wrong size on FortWeaponRanged_GetTimeToNextFire");
static_assert(offsetof(FortWeaponRanged_GetTimeToNextFire, ReturnValue) == 0x000000, "Member 'FortWeaponRanged_GetTimeToNextFire::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeaponRanged.ShouldDisplayAmmoCounter
// 0x0001 (0x0001 - 0x0000)
struct FortWeaponRanged_ShouldDisplayAmmoCounter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeaponRanged_ShouldDisplayAmmoCounter) == 0x000001, "Wrong alignment on FortWeaponRanged_ShouldDisplayAmmoCounter");
static_assert(sizeof(FortWeaponRanged_ShouldDisplayAmmoCounter) == 0x000001, "Wrong size on FortWeaponRanged_ShouldDisplayAmmoCounter");
static_assert(offsetof(FortWeaponRanged_ShouldDisplayAmmoCounter, ReturnValue) == 0x000000, "Member 'FortWeaponRanged_ShouldDisplayAmmoCounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeartBase.AssociateWithTheMission
// 0x0004 (0x0004 - 0x0000)
struct KeepHeartBase_AssociateWithTheMission final
{
public:
	class AFortMission*                           KeepMission;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeartBase_AssociateWithTheMission) == 0x000004, "Wrong alignment on KeepHeartBase_AssociateWithTheMission");
static_assert(sizeof(KeepHeartBase_AssociateWithTheMission) == 0x000004, "Wrong size on KeepHeartBase_AssociateWithTheMission");
static_assert(offsetof(KeepHeartBase_AssociateWithTheMission, KeepMission) == 0x000000, "Member 'KeepHeartBase_AssociateWithTheMission::KeepMission' has a wrong offset!");

// Function FortniteGame.KeepHeartBase.IsKeepLoaded
// 0x0001 (0x0001 - 0x0000)
struct KeepHeartBase_IsKeepLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeartBase_IsKeepLoaded) == 0x000001, "Wrong alignment on KeepHeartBase_IsKeepLoaded");
static_assert(sizeof(KeepHeartBase_IsKeepLoaded) == 0x000001, "Wrong size on KeepHeartBase_IsKeepLoaded");
static_assert(offsetof(KeepHeartBase_IsKeepLoaded, ReturnValue) == 0x000000, "Member 'KeepHeartBase_IsKeepLoaded::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeartBase.IsKeepOwner
// 0x0008 (0x0008 - 0x0000)
struct KeepHeartBase_IsKeepOwner final
{
public:
	const class AFortPlayerController*            FortPC;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeepHeartBase_IsKeepOwner) == 0x000004, "Wrong alignment on KeepHeartBase_IsKeepOwner");
static_assert(sizeof(KeepHeartBase_IsKeepOwner) == 0x000008, "Wrong size on KeepHeartBase_IsKeepOwner");
static_assert(offsetof(KeepHeartBase_IsKeepOwner, FortPC) == 0x000000, "Member 'KeepHeartBase_IsKeepOwner::FortPC' has a wrong offset!");
static_assert(offsetof(KeepHeartBase_IsKeepOwner, ReturnValue) == 0x000004, "Member 'KeepHeartBase_IsKeepOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeartBase.LoadUserKeep
// 0x0004 (0x0004 - 0x0000)
struct KeepHeartBase_LoadUserKeep final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeartBase_LoadUserKeep) == 0x000004, "Wrong alignment on KeepHeartBase_LoadUserKeep");
static_assert(sizeof(KeepHeartBase_LoadUserKeep) == 0x000004, "Wrong size on KeepHeartBase_LoadUserKeep");
static_assert(offsetof(KeepHeartBase_LoadUserKeep, FortPC) == 0x000000, "Member 'KeepHeartBase_LoadUserKeep::FortPC' has a wrong offset!");

// Function FortniteGame.KeepHeartBase.ResetUserKeep
// 0x0008 (0x0008 - 0x0000)
struct KeepHeartBase_ResetUserKeep final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeepHeartBase_ResetUserKeep) == 0x000004, "Wrong alignment on KeepHeartBase_ResetUserKeep");
static_assert(sizeof(KeepHeartBase_ResetUserKeep) == 0x000008, "Wrong size on KeepHeartBase_ResetUserKeep");
static_assert(offsetof(KeepHeartBase_ResetUserKeep, FortPC) == 0x000000, "Member 'KeepHeartBase_ResetUserKeep::FortPC' has a wrong offset!");
static_assert(offsetof(KeepHeartBase_ResetUserKeep, ReturnValue) == 0x000004, "Member 'KeepHeartBase_ResetUserKeep::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeartBase.SaveUserKeep
// 0x0008 (0x0008 - 0x0000)
struct KeepHeartBase_SaveUserKeep final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeepHeartBase_SaveUserKeep) == 0x000004, "Wrong alignment on KeepHeartBase_SaveUserKeep");
static_assert(sizeof(KeepHeartBase_SaveUserKeep) == 0x000008, "Wrong size on KeepHeartBase_SaveUserKeep");
static_assert(offsetof(KeepHeartBase_SaveUserKeep, FortPC) == 0x000000, "Member 'KeepHeartBase_SaveUserKeep::FortPC' has a wrong offset!");
static_assert(offsetof(KeepHeartBase_SaveUserKeep, ReturnValue) == 0x000004, "Member 'KeepHeartBase_SaveUserKeep::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeartBase.SetAllowLooting
// 0x0001 (0x0001 - 0x0000)
struct KeepHeartBase_SetAllowLooting final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeartBase_SetAllowLooting) == 0x000001, "Wrong alignment on KeepHeartBase_SetAllowLooting");
static_assert(sizeof(KeepHeartBase_SetAllowLooting) == 0x000001, "Wrong size on KeepHeartBase_SetAllowLooting");
static_assert(offsetof(KeepHeartBase_SetAllowLooting, bAllowed) == 0x000000, "Member 'KeepHeartBase_SetAllowLooting::bAllowed' has a wrong offset!");

// Function FortniteGame.FortKeepEventInfo.GetWave
// 0x0030 (0x0030 - 0x0000)
struct FortKeepEventInfo_GetWave final
{
public:
	int32                                         INDEX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKeepEventWaveData                     ReturnValue;                                       // 0x0004(0x002C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepEventInfo_GetWave) == 0x000004, "Wrong alignment on FortKeepEventInfo_GetWave");
static_assert(sizeof(FortKeepEventInfo_GetWave) == 0x000030, "Wrong size on FortKeepEventInfo_GetWave");
static_assert(offsetof(FortKeepEventInfo_GetWave, INDEX) == 0x000000, "Member 'FortKeepEventInfo_GetWave::INDEX' has a wrong offset!");
static_assert(offsetof(FortKeepEventInfo_GetWave, ReturnValue) == 0x000004, "Member 'FortKeepEventInfo_GetWave::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepEventInfo.NumberOfWaves
// 0x0004 (0x0004 - 0x0000)
struct FortKeepEventInfo_NumberOfWaves final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepEventInfo_NumberOfWaves) == 0x000004, "Wrong alignment on FortKeepEventInfo_NumberOfWaves");
static_assert(sizeof(FortKeepEventInfo_NumberOfWaves) == 0x000004, "Wrong size on FortKeepEventInfo_NumberOfWaves");
static_assert(offsetof(FortKeepEventInfo_NumberOfWaves, ReturnValue) == 0x000000, "Member 'FortKeepEventInfo_NumberOfWaves::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepEventList.GetEvent
// 0x0020 (0x0020 - 0x0000)
struct FortKeepEventList_GetEvent final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKeepEventInfo                         ReturnValue;                                       // 0x0004(0x001C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepEventList_GetEvent) == 0x000004, "Wrong alignment on FortKeepEventList_GetEvent");
static_assert(sizeof(FortKeepEventList_GetEvent) == 0x000020, "Wrong size on FortKeepEventList_GetEvent");
static_assert(offsetof(FortKeepEventList_GetEvent, Idx) == 0x000000, "Member 'FortKeepEventList_GetEvent::Idx' has a wrong offset!");
static_assert(offsetof(FortKeepEventList_GetEvent, ReturnValue) == 0x000004, "Member 'FortKeepEventList_GetEvent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepEventList.GetEventDescription
// 0x0010 (0x0010 - 0x0000)
struct FortKeepEventList_GetEventDescription final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepEventList_GetEventDescription) == 0x000004, "Wrong alignment on FortKeepEventList_GetEventDescription");
static_assert(sizeof(FortKeepEventList_GetEventDescription) == 0x000010, "Wrong size on FortKeepEventList_GetEventDescription");
static_assert(offsetof(FortKeepEventList_GetEventDescription, Idx) == 0x000000, "Member 'FortKeepEventList_GetEventDescription::Idx' has a wrong offset!");
static_assert(offsetof(FortKeepEventList_GetEventDescription, ReturnValue) == 0x000004, "Member 'FortKeepEventList_GetEventDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepDefenseManager.GetEventDescriptionFromTheList
// 0x0014 (0x0014 - 0x0000)
struct FortKeepDefenseManager_GetEventDescriptionFromTheList final
{
public:
	class UFortKeepEventList*                     EventList;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventNumber;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepDefenseManager_GetEventDescriptionFromTheList) == 0x000004, "Wrong alignment on FortKeepDefenseManager_GetEventDescriptionFromTheList");
static_assert(sizeof(FortKeepDefenseManager_GetEventDescriptionFromTheList) == 0x000014, "Wrong size on FortKeepDefenseManager_GetEventDescriptionFromTheList");
static_assert(offsetof(FortKeepDefenseManager_GetEventDescriptionFromTheList, EventList) == 0x000000, "Member 'FortKeepDefenseManager_GetEventDescriptionFromTheList::EventList' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_GetEventDescriptionFromTheList, EventNumber) == 0x000004, "Member 'FortKeepDefenseManager_GetEventDescriptionFromTheList::EventNumber' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_GetEventDescriptionFromTheList, ReturnValue) == 0x000008, "Member 'FortKeepDefenseManager_GetEventDescriptionFromTheList::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepDefenseManager.GetNumberAliveEnemies
// 0x0004 (0x0004 - 0x0000)
struct FortKeepDefenseManager_GetNumberAliveEnemies final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepDefenseManager_GetNumberAliveEnemies) == 0x000004, "Wrong alignment on FortKeepDefenseManager_GetNumberAliveEnemies");
static_assert(sizeof(FortKeepDefenseManager_GetNumberAliveEnemies) == 0x000004, "Wrong size on FortKeepDefenseManager_GetNumberAliveEnemies");
static_assert(offsetof(FortKeepDefenseManager_GetNumberAliveEnemies, ReturnValue) == 0x000000, "Member 'FortKeepDefenseManager_GetNumberAliveEnemies::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepDefenseManager.GetWaveDescription
// 0x000C (0x000C - 0x0000)
struct FortKeepDefenseManager_GetWaveDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepDefenseManager_GetWaveDescription) == 0x000004, "Wrong alignment on FortKeepDefenseManager_GetWaveDescription");
static_assert(sizeof(FortKeepDefenseManager_GetWaveDescription) == 0x00000C, "Wrong size on FortKeepDefenseManager_GetWaveDescription");
static_assert(offsetof(FortKeepDefenseManager_GetWaveDescription, ReturnValue) == 0x000000, "Member 'FortKeepDefenseManager_GetWaveDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepDefenseManager.StartAIEncounter
// 0x001C (0x001C - 0x0000)
struct FortKeepDefenseManager_StartAIEncounter final
{
public:
	TSubclassOf<class UFortAIEncounterInfo>       EncounterTemplate;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAISpawnGroupProgressionInfo*       SpawnGroupProgressionInfo;                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivationDelay;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EncounterDifficultyLevel;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AliveMultiplier;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepDefenseManager_StartAIEncounter) == 0x000004, "Wrong alignment on FortKeepDefenseManager_StartAIEncounter");
static_assert(sizeof(FortKeepDefenseManager_StartAIEncounter) == 0x00001C, "Wrong size on FortKeepDefenseManager_StartAIEncounter");
static_assert(offsetof(FortKeepDefenseManager_StartAIEncounter, EncounterTemplate) == 0x000000, "Member 'FortKeepDefenseManager_StartAIEncounter::EncounterTemplate' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartAIEncounter, TargetActor) == 0x000004, "Member 'FortKeepDefenseManager_StartAIEncounter::TargetActor' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartAIEncounter, SpawnGroupProgressionInfo) == 0x000008, "Member 'FortKeepDefenseManager_StartAIEncounter::SpawnGroupProgressionInfo' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartAIEncounter, ActivationDelay) == 0x00000C, "Member 'FortKeepDefenseManager_StartAIEncounter::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartAIEncounter, EncounterDifficultyLevel) == 0x000010, "Member 'FortKeepDefenseManager_StartAIEncounter::EncounterDifficultyLevel' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartAIEncounter, AliveMultiplier) == 0x000014, "Member 'FortKeepDefenseManager_StartAIEncounter::AliveMultiplier' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartAIEncounter, ReturnValue) == 0x000018, "Member 'FortKeepDefenseManager_StartAIEncounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKeepDefenseManager.StartEvent
// 0x0008 (0x0008 - 0x0000)
struct FortKeepDefenseManager_StartEvent final
{
public:
	class UFortKeepEventInfo*                     EventTemplate;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyLevelOffset;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepDefenseManager_StartEvent) == 0x000004, "Wrong alignment on FortKeepDefenseManager_StartEvent");
static_assert(sizeof(FortKeepDefenseManager_StartEvent) == 0x000008, "Wrong size on FortKeepDefenseManager_StartEvent");
static_assert(offsetof(FortKeepDefenseManager_StartEvent, EventTemplate) == 0x000000, "Member 'FortKeepDefenseManager_StartEvent::EventTemplate' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartEvent, DifficultyLevelOffset) == 0x000004, "Member 'FortKeepDefenseManager_StartEvent::DifficultyLevelOffset' has a wrong offset!");

// Function FortniteGame.FortKeepDefenseManager.StartEventFromList
// 0x0008 (0x0008 - 0x0000)
struct FortKeepDefenseManager_StartEventFromList final
{
public:
	class UFortKeepEventList*                     EventList;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventNumber;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKeepDefenseManager_StartEventFromList) == 0x000004, "Wrong alignment on FortKeepDefenseManager_StartEventFromList");
static_assert(sizeof(FortKeepDefenseManager_StartEventFromList) == 0x000008, "Wrong size on FortKeepDefenseManager_StartEventFromList");
static_assert(offsetof(FortKeepDefenseManager_StartEventFromList, EventList) == 0x000000, "Member 'FortKeepDefenseManager_StartEventFromList::EventList' has a wrong offset!");
static_assert(offsetof(FortKeepDefenseManager_StartEventFromList, EventNumber) == 0x000004, "Member 'FortKeepDefenseManager_StartEventFromList::EventNumber' has a wrong offset!");

// Function FortniteGame.MyTownBuildingActor.CreateUMGCollectWidget
// 0x0008 (0x0008 - 0x0000)
struct MyTownBuildingActor_CreateUMGCollectWidget final
{
public:
	class UNativeWidgetHost*                      InNativeWidgetHost;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MyTownBuildingActor_CreateUMGCollectWidget) == 0x000004, "Wrong alignment on MyTownBuildingActor_CreateUMGCollectWidget");
static_assert(sizeof(MyTownBuildingActor_CreateUMGCollectWidget) == 0x000008, "Wrong size on MyTownBuildingActor_CreateUMGCollectWidget");
static_assert(offsetof(MyTownBuildingActor_CreateUMGCollectWidget, InNativeWidgetHost) == 0x000000, "Member 'MyTownBuildingActor_CreateUMGCollectWidget::InNativeWidgetHost' has a wrong offset!");
static_assert(offsetof(MyTownBuildingActor_CreateUMGCollectWidget, ReturnValue) == 0x000004, "Member 'MyTownBuildingActor_CreateUMGCollectWidget::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownBuildingActor.OnMyTownBuildingCustomDisplayChanged
// 0x0001 (0x0001 - 0x0000)
struct MyTownBuildingActor_OnMyTownBuildingCustomDisplayChanged final
{
public:
	EMyTownBuildingActorDisplayState              NewDisplayState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownBuildingActor_OnMyTownBuildingCustomDisplayChanged) == 0x000001, "Wrong alignment on MyTownBuildingActor_OnMyTownBuildingCustomDisplayChanged");
static_assert(sizeof(MyTownBuildingActor_OnMyTownBuildingCustomDisplayChanged) == 0x000001, "Wrong size on MyTownBuildingActor_OnMyTownBuildingCustomDisplayChanged");
static_assert(offsetof(MyTownBuildingActor_OnMyTownBuildingCustomDisplayChanged, NewDisplayState) == 0x000000, "Member 'MyTownBuildingActor_OnMyTownBuildingCustomDisplayChanged::NewDisplayState' has a wrong offset!");

// Function FortniteGame.MyTownBuildingActor.SetBuildingTemplateId
// 0x000C (0x000C - 0x0000)
struct MyTownBuildingActor_SetBuildingTemplateId final
{
public:
	class FString                                 InBuildingTemplateId;                              // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownBuildingActor_SetBuildingTemplateId) == 0x000004, "Wrong alignment on MyTownBuildingActor_SetBuildingTemplateId");
static_assert(sizeof(MyTownBuildingActor_SetBuildingTemplateId) == 0x00000C, "Wrong size on MyTownBuildingActor_SetBuildingTemplateId");
static_assert(offsetof(MyTownBuildingActor_SetBuildingTemplateId, InBuildingTemplateId) == 0x000000, "Member 'MyTownBuildingActor_SetBuildingTemplateId::InBuildingTemplateId' has a wrong offset!");

// Function FortniteGame.MyTownBuildingActor.SetCustomDisplayState
// 0x0001 (0x0001 - 0x0000)
struct MyTownBuildingActor_SetCustomDisplayState final
{
public:
	EMyTownBuildingActorDisplayState              NewDisplayState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownBuildingActor_SetCustomDisplayState) == 0x000001, "Wrong alignment on MyTownBuildingActor_SetCustomDisplayState");
static_assert(sizeof(MyTownBuildingActor_SetCustomDisplayState) == 0x000001, "Wrong size on MyTownBuildingActor_SetCustomDisplayState");
static_assert(offsetof(MyTownBuildingActor_SetCustomDisplayState, NewDisplayState) == 0x000000, "Member 'MyTownBuildingActor_SetCustomDisplayState::NewDisplayState' has a wrong offset!");

// Function FortniteGame.MyTownBuildingActor.ShouldShowBang
// 0x0001 (0x0001 - 0x0000)
struct MyTownBuildingActor_ShouldShowBang final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownBuildingActor_ShouldShowBang) == 0x000001, "Wrong alignment on MyTownBuildingActor_ShouldShowBang");
static_assert(sizeof(MyTownBuildingActor_ShouldShowBang) == 0x000001, "Wrong size on MyTownBuildingActor_ShouldShowBang");
static_assert(offsetof(MyTownBuildingActor_ShouldShowBang, ReturnValue) == 0x000000, "Member 'MyTownBuildingActor_ShouldShowBang::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownBuildingActor.GetCustomDisplayActors
// 0x000C (0x000C - 0x0000)
struct MyTownBuildingActor_GetCustomDisplayActors final
{
public:
	TArray<class ABuildingActor*>                 ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownBuildingActor_GetCustomDisplayActors) == 0x000004, "Wrong alignment on MyTownBuildingActor_GetCustomDisplayActors");
static_assert(sizeof(MyTownBuildingActor_GetCustomDisplayActors) == 0x00000C, "Wrong size on MyTownBuildingActor_GetCustomDisplayActors");
static_assert(offsetof(MyTownBuildingActor_GetCustomDisplayActors, ReturnValue) == 0x000000, "Member 'MyTownBuildingActor_GetCustomDisplayActors::ReturnValue' has a wrong offset!");

// Function FortniteGame.MyTownBuildingActor.GetCustomDisplayState
// 0x0001 (0x0001 - 0x0000)
struct MyTownBuildingActor_GetCustomDisplayState final
{
public:
	EMyTownBuildingActorDisplayState              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MyTownBuildingActor_GetCustomDisplayState) == 0x000001, "Wrong alignment on MyTownBuildingActor_GetCustomDisplayState");
static_assert(sizeof(MyTownBuildingActor_GetCustomDisplayState) == 0x000001, "Wrong size on MyTownBuildingActor_GetCustomDisplayState");
static_assert(offsetof(MyTownBuildingActor_GetCustomDisplayState, ReturnValue) == 0x000000, "Member 'MyTownBuildingActor_GetCustomDisplayState::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GetUIMapManager
// 0x0004 (0x0004 - 0x0000)
struct FortGameStateZone_GetUIMapManager final
{
public:
	class AFortInGameMapManager*                  ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_GetUIMapManager) == 0x000004, "Wrong alignment on FortGameStateZone_GetUIMapManager");
static_assert(sizeof(FortGameStateZone_GetUIMapManager) == 0x000004, "Wrong size on FortGameStateZone_GetUIMapManager");
static_assert(offsetof(FortGameStateZone_GetUIMapManager, ReturnValue) == 0x000000, "Member 'FortGameStateZone_GetUIMapManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.ServerFireAIDirectorEvent
// 0x0010 (0x0010 - 0x0000)
struct FortGameStateZone_ServerFireAIDirectorEvent final
{
public:
	EFortAIDirectorEvent                          Event;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EventSource;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventTarget;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventMultiplier;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_ServerFireAIDirectorEvent) == 0x000004, "Wrong alignment on FortGameStateZone_ServerFireAIDirectorEvent");
static_assert(sizeof(FortGameStateZone_ServerFireAIDirectorEvent) == 0x000010, "Wrong size on FortGameStateZone_ServerFireAIDirectorEvent");
static_assert(offsetof(FortGameStateZone_ServerFireAIDirectorEvent, Event) == 0x000000, "Member 'FortGameStateZone_ServerFireAIDirectorEvent::Event' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_ServerFireAIDirectorEvent, EventSource) == 0x000004, "Member 'FortGameStateZone_ServerFireAIDirectorEvent::EventSource' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_ServerFireAIDirectorEvent, EventTarget) == 0x000008, "Member 'FortGameStateZone_ServerFireAIDirectorEvent::EventTarget' has a wrong offset!");
static_assert(offsetof(FortGameStateZone_ServerFireAIDirectorEvent, EventMultiplier) == 0x00000C, "Member 'FortGameStateZone_ServerFireAIDirectorEvent::EventMultiplier' has a wrong offset!");

// Function FortniteGame.FortGameStateZone.GetGameDifficulty
// 0x0004 (0x0004 - 0x0000)
struct FortGameStateZone_GetGameDifficulty final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateZone_GetGameDifficulty) == 0x000004, "Wrong alignment on FortGameStateZone_GetGameDifficulty");
static_assert(sizeof(FortGameStateZone_GetGameDifficulty) == 0x000004, "Wrong size on FortGameStateZone_GetGameDifficulty");
static_assert(offsetof(FortGameStateZone_GetGameDifficulty, ReturnValue) == 0x000000, "Member 'FortGameStateZone_GetGameDifficulty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStateOutpost.SetGameDifficultyRow
// 0x000C (0x000C - 0x0000)
struct FortGameStateOutpost_SetGameDifficultyRow final
{
public:
	struct FDataTableRowHandle                    GameDifficultyInfo;                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStateOutpost_SetGameDifficultyRow) == 0x000004, "Wrong alignment on FortGameStateOutpost_SetGameDifficultyRow");
static_assert(sizeof(FortGameStateOutpost_SetGameDifficultyRow) == 0x00000C, "Wrong size on FortGameStateOutpost_SetGameDifficultyRow");
static_assert(offsetof(FortGameStateOutpost_SetGameDifficultyRow, GameDifficultyInfo) == 0x000000, "Member 'FortGameStateOutpost_SetGameDifficultyRow::GameDifficultyInfo' has a wrong offset!");

// Function FortniteGame.KeepHeart.DestroyNonPermaniteStructures
// 0x0001 (0x0001 - 0x0000)
struct KeepHeart_DestroyNonPermaniteStructures final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_DestroyNonPermaniteStructures) == 0x000001, "Wrong alignment on KeepHeart_DestroyNonPermaniteStructures");
static_assert(sizeof(KeepHeart_DestroyNonPermaniteStructures) == 0x000001, "Wrong size on KeepHeart_DestroyNonPermaniteStructures");
static_assert(offsetof(KeepHeart_DestroyNonPermaniteStructures, ReturnValue) == 0x000000, "Member 'KeepHeart_DestroyNonPermaniteStructures::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.GetAveragePermaniteLevel
// 0x0004 (0x0004 - 0x0000)
struct KeepHeart_GetAveragePermaniteLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_GetAveragePermaniteLevel) == 0x000004, "Wrong alignment on KeepHeart_GetAveragePermaniteLevel");
static_assert(sizeof(KeepHeart_GetAveragePermaniteLevel) == 0x000004, "Wrong size on KeepHeart_GetAveragePermaniteLevel");
static_assert(offsetof(KeepHeart_GetAveragePermaniteLevel, ReturnValue) == 0x000000, "Member 'KeepHeart_GetAveragePermaniteLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.GetPermaniteStructureLimit
// 0x0004 (0x0004 - 0x0000)
struct KeepHeart_GetPermaniteStructureLimit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_GetPermaniteStructureLimit) == 0x000004, "Wrong alignment on KeepHeart_GetPermaniteStructureLimit");
static_assert(sizeof(KeepHeart_GetPermaniteStructureLimit) == 0x000004, "Wrong size on KeepHeart_GetPermaniteStructureLimit");
static_assert(offsetof(KeepHeart_GetPermaniteStructureLimit, ReturnValue) == 0x000000, "Member 'KeepHeart_GetPermaniteStructureLimit::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.GetPermaniteStructureNumber
// 0x0004 (0x0004 - 0x0000)
struct KeepHeart_GetPermaniteStructureNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_GetPermaniteStructureNumber) == 0x000004, "Wrong alignment on KeepHeart_GetPermaniteStructureNumber");
static_assert(sizeof(KeepHeart_GetPermaniteStructureNumber) == 0x000004, "Wrong size on KeepHeart_GetPermaniteStructureNumber");
static_assert(offsetof(KeepHeart_GetPermaniteStructureNumber, ReturnValue) == 0x000000, "Member 'KeepHeart_GetPermaniteStructureNumber::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.GetUpgradeAllPermaniteCost
// 0x000C (0x000C - 0x0000)
struct KeepHeart_GetUpgradeAllPermaniteCost final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQuickUpgrade;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_GetUpgradeAllPermaniteCost) == 0x000004, "Wrong alignment on KeepHeart_GetUpgradeAllPermaniteCost");
static_assert(sizeof(KeepHeart_GetUpgradeAllPermaniteCost) == 0x00000C, "Wrong size on KeepHeart_GetUpgradeAllPermaniteCost");
static_assert(offsetof(KeepHeart_GetUpgradeAllPermaniteCost, FortPC) == 0x000000, "Member 'KeepHeart_GetUpgradeAllPermaniteCost::FortPC' has a wrong offset!");
static_assert(offsetof(KeepHeart_GetUpgradeAllPermaniteCost, bQuickUpgrade) == 0x000004, "Member 'KeepHeart_GetUpgradeAllPermaniteCost::bQuickUpgrade' has a wrong offset!");
static_assert(offsetof(KeepHeart_GetUpgradeAllPermaniteCost, ReturnValue) == 0x000008, "Member 'KeepHeart_GetUpgradeAllPermaniteCost::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.GetWorldStreamingInProgress
// 0x0004 (0x0004 - 0x0000)
struct KeepHeart_GetWorldStreamingInProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_GetWorldStreamingInProgress) == 0x000004, "Wrong alignment on KeepHeart_GetWorldStreamingInProgress");
static_assert(sizeof(KeepHeart_GetWorldStreamingInProgress) == 0x000004, "Wrong size on KeepHeart_GetWorldStreamingInProgress");
static_assert(offsetof(KeepHeart_GetWorldStreamingInProgress, ReturnValue) == 0x000000, "Member 'KeepHeart_GetWorldStreamingInProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.HandleVoteComplete
// 0x0001 (0x0001 - 0x0000)
struct KeepHeart_HandleVoteComplete final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_HandleVoteComplete) == 0x000001, "Wrong alignment on KeepHeart_HandleVoteComplete");
static_assert(sizeof(KeepHeart_HandleVoteComplete) == 0x000001, "Wrong size on KeepHeart_HandleVoteComplete");
static_assert(offsetof(KeepHeart_HandleVoteComplete, bResult) == 0x000000, "Member 'KeepHeart_HandleVoteComplete::bResult' has a wrong offset!");

// Function FortniteGame.KeepHeart.IsWorldStreamedIn
// 0x0001 (0x0001 - 0x0000)
struct KeepHeart_IsWorldStreamedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_IsWorldStreamedIn) == 0x000001, "Wrong alignment on KeepHeart_IsWorldStreamedIn");
static_assert(sizeof(KeepHeart_IsWorldStreamedIn) == 0x000001, "Wrong size on KeepHeart_IsWorldStreamedIn");
static_assert(offsetof(KeepHeart_IsWorldStreamedIn, ReturnValue) == 0x000000, "Member 'KeepHeart_IsWorldStreamedIn::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.IsWorldStreamingIn
// 0x0001 (0x0001 - 0x0000)
struct KeepHeart_IsWorldStreamingIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_IsWorldStreamingIn) == 0x000001, "Wrong alignment on KeepHeart_IsWorldStreamingIn");
static_assert(sizeof(KeepHeart_IsWorldStreamingIn) == 0x000001, "Wrong size on KeepHeart_IsWorldStreamingIn");
static_assert(offsetof(KeepHeart_IsWorldStreamingIn, ReturnValue) == 0x000000, "Member 'KeepHeart_IsWorldStreamingIn::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.NotifyEncounterEnded
// 0x0004 (0x0004 - 0x0000)
struct KeepHeart_NotifyEncounterEnded final
{
public:
	class UFortAIEncounterInfo*                   EndedEncounter;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_NotifyEncounterEnded) == 0x000004, "Wrong alignment on KeepHeart_NotifyEncounterEnded");
static_assert(sizeof(KeepHeart_NotifyEncounterEnded) == 0x000004, "Wrong size on KeepHeart_NotifyEncounterEnded");
static_assert(offsetof(KeepHeart_NotifyEncounterEnded, EndedEncounter) == 0x000000, "Member 'KeepHeart_NotifyEncounterEnded::EndedEncounter' has a wrong offset!");

// Function FortniteGame.KeepHeart.NotifyEncounterStarted
// 0x0004 (0x0004 - 0x0000)
struct KeepHeart_NotifyEncounterStarted final
{
public:
	class UFortAIEncounterInfo*                   StartedEncounter;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_NotifyEncounterStarted) == 0x000004, "Wrong alignment on KeepHeart_NotifyEncounterStarted");
static_assert(sizeof(KeepHeart_NotifyEncounterStarted) == 0x000004, "Wrong size on KeepHeart_NotifyEncounterStarted");
static_assert(offsetof(KeepHeart_NotifyEncounterStarted, StartedEncounter) == 0x000000, "Member 'KeepHeart_NotifyEncounterStarted::StartedEncounter' has a wrong offset!");

// Function FortniteGame.KeepHeart.OnVoteComplete
// 0x0001 (0x0001 - 0x0000)
struct KeepHeart_OnVoteComplete final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_OnVoteComplete) == 0x000001, "Wrong alignment on KeepHeart_OnVoteComplete");
static_assert(sizeof(KeepHeart_OnVoteComplete) == 0x000001, "Wrong size on KeepHeart_OnVoteComplete");
static_assert(offsetof(KeepHeart_OnVoteComplete, bResult) == 0x000000, "Member 'KeepHeart_OnVoteComplete::bResult' has a wrong offset!");

// Function FortniteGame.KeepHeart.SetPermaniteAvailability
// 0x0001 (0x0001 - 0x0000)
struct KeepHeart_SetPermaniteAvailability final
{
public:
	bool                                          bAvailable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_SetPermaniteAvailability) == 0x000001, "Wrong alignment on KeepHeart_SetPermaniteAvailability");
static_assert(sizeof(KeepHeart_SetPermaniteAvailability) == 0x000001, "Wrong size on KeepHeart_SetPermaniteAvailability");
static_assert(offsetof(KeepHeart_SetPermaniteAvailability, bAvailable) == 0x000000, "Member 'KeepHeart_SetPermaniteAvailability::bAvailable' has a wrong offset!");

// Function FortniteGame.KeepHeart.StartVote
// 0x002C (0x002C - 0x0000)
struct KeepHeart_StartVote final
{
public:
	class FText                                   VoteText;                                          // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	class FText                                   YesText;                                           // 0x000C(0x000C)(Parm, NativeAccessSpecifierPublic)
	class FText                                   NoText;                                            // 0x0018(0x000C)(Parm, NativeAccessSpecifierPublic)
	float                                         PercentageToPass;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipIfOnePlayerOnly;                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeepHeart_StartVote) == 0x000004, "Wrong alignment on KeepHeart_StartVote");
static_assert(sizeof(KeepHeart_StartVote) == 0x00002C, "Wrong size on KeepHeart_StartVote");
static_assert(offsetof(KeepHeart_StartVote, VoteText) == 0x000000, "Member 'KeepHeart_StartVote::VoteText' has a wrong offset!");
static_assert(offsetof(KeepHeart_StartVote, YesText) == 0x00000C, "Member 'KeepHeart_StartVote::YesText' has a wrong offset!");
static_assert(offsetof(KeepHeart_StartVote, NoText) == 0x000018, "Member 'KeepHeart_StartVote::NoText' has a wrong offset!");
static_assert(offsetof(KeepHeart_StartVote, PercentageToPass) == 0x000024, "Member 'KeepHeart_StartVote::PercentageToPass' has a wrong offset!");
static_assert(offsetof(KeepHeart_StartVote, bSkipIfOnePlayerOnly) == 0x000028, "Member 'KeepHeart_StartVote::bSkipIfOnePlayerOnly' has a wrong offset!");

// Function FortniteGame.KeepHeart.UpgradeAllPermaniteStructures
// 0x0008 (0x0008 - 0x0000)
struct KeepHeart_UpgradeAllPermaniteStructures final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQuickUpgrade;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KeepHeart_UpgradeAllPermaniteStructures) == 0x000004, "Wrong alignment on KeepHeart_UpgradeAllPermaniteStructures");
static_assert(sizeof(KeepHeart_UpgradeAllPermaniteStructures) == 0x000008, "Wrong size on KeepHeart_UpgradeAllPermaniteStructures");
static_assert(offsetof(KeepHeart_UpgradeAllPermaniteStructures, FortPC) == 0x000000, "Member 'KeepHeart_UpgradeAllPermaniteStructures::FortPC' has a wrong offset!");
static_assert(offsetof(KeepHeart_UpgradeAllPermaniteStructures, bQuickUpgrade) == 0x000004, "Member 'KeepHeart_UpgradeAllPermaniteStructures::bQuickUpgrade' has a wrong offset!");
static_assert(offsetof(KeepHeart_UpgradeAllPermaniteStructures, ReturnValue) == 0x000005, "Member 'KeepHeart_UpgradeAllPermaniteStructures::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.GetDefenseLevel
// 0x0004 (0x0004 - 0x0000)
struct KeepHeart_GetDefenseLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_GetDefenseLevel) == 0x000004, "Wrong alignment on KeepHeart_GetDefenseLevel");
static_assert(sizeof(KeepHeart_GetDefenseLevel) == 0x000004, "Wrong size on KeepHeart_GetDefenseLevel");
static_assert(offsetof(KeepHeart_GetDefenseLevel, ReturnValue) == 0x000000, "Member 'KeepHeart_GetDefenseLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.KeepHeart.IsDefenseActive
// 0x0001 (0x0001 - 0x0000)
struct KeepHeart_IsDefenseActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KeepHeart_IsDefenseActive) == 0x000001, "Wrong alignment on KeepHeart_IsDefenseActive");
static_assert(sizeof(KeepHeart_IsDefenseActive) == 0x000001, "Wrong size on KeepHeart_IsDefenseActive");
static_assert(offsetof(KeepHeart_IsDefenseActive, ReturnValue) == 0x000000, "Member 'KeepHeart_IsDefenseActive::ReturnValue' has a wrong offset!");

// Function FortniteGame.ManorHeart.TravelToNewWorld
// 0x0004 (0x0004 - 0x0000)
struct ManorHeart_TravelToNewWorld final
{
public:
	class UFortTheaterInfo*                       NewTheater;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManorHeart_TravelToNewWorld) == 0x000004, "Wrong alignment on ManorHeart_TravelToNewWorld");
static_assert(sizeof(ManorHeart_TravelToNewWorld) == 0x000004, "Wrong size on ManorHeart_TravelToNewWorld");
static_assert(offsetof(ManorHeart_TravelToNewWorld, NewTheater) == 0x000000, "Member 'ManorHeart_TravelToNewWorld::NewTheater' has a wrong offset!");

// Function FortniteGame.FortHealthBarComponent.SetHealthBarDisplayText
// 0x000C (0x000C - 0x0000)
struct FortHealthBarComponent_SetHealthBarDisplayText final
{
public:
	class FText                                   NewDisplayText;                                    // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthBarComponent_SetHealthBarDisplayText) == 0x000004, "Wrong alignment on FortHealthBarComponent_SetHealthBarDisplayText");
static_assert(sizeof(FortHealthBarComponent_SetHealthBarDisplayText) == 0x00000C, "Wrong size on FortHealthBarComponent_SetHealthBarDisplayText");
static_assert(offsetof(FortHealthBarComponent_SetHealthBarDisplayText, NewDisplayText) == 0x000000, "Member 'FortHealthBarComponent_SetHealthBarDisplayText::NewDisplayText' has a wrong offset!");

// Function FortniteGame.FortHealthBarComponent.SetHealthBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortHealthBarComponent_SetHealthBarVisibility final
{
public:
	bool                                          bNewVisibleState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthBarComponent_SetHealthBarVisibility) == 0x000001, "Wrong alignment on FortHealthBarComponent_SetHealthBarVisibility");
static_assert(sizeof(FortHealthBarComponent_SetHealthBarVisibility) == 0x000001, "Wrong size on FortHealthBarComponent_SetHealthBarVisibility");
static_assert(offsetof(FortHealthBarComponent_SetHealthBarVisibility, bNewVisibleState) == 0x000000, "Member 'FortHealthBarComponent_SetHealthBarVisibility::bNewVisibleState' has a wrong offset!");

// Function FortniteGame.FortHealthBarComponent.SetHealthBarWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortHealthBarComponent_SetHealthBarWidgetVisibility final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHealthBarComponent_SetHealthBarWidgetVisibility) == 0x000001, "Wrong alignment on FortHealthBarComponent_SetHealthBarWidgetVisibility");
static_assert(sizeof(FortHealthBarComponent_SetHealthBarWidgetVisibility) == 0x000001, "Wrong size on FortHealthBarComponent_SetHealthBarWidgetVisibility");
static_assert(offsetof(FortHealthBarComponent_SetHealthBarWidgetVisibility, bIsVisible) == 0x000000, "Member 'FortHealthBarComponent_SetHealthBarWidgetVisibility::bIsVisible' has a wrong offset!");

// Function FortniteGame.VelocityGridData.AddPoint
// 0x0014 (0x0014 - 0x0000)
struct VelocityGridData_AddPoint final
{
public:
	struct FVector                                SplinePoint;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PointEnvelope;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointStrength;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VelocityGridData_AddPoint) == 0x000004, "Wrong alignment on VelocityGridData_AddPoint");
static_assert(sizeof(VelocityGridData_AddPoint) == 0x000014, "Wrong size on VelocityGridData_AddPoint");
static_assert(offsetof(VelocityGridData_AddPoint, SplinePoint) == 0x000000, "Member 'VelocityGridData_AddPoint::SplinePoint' has a wrong offset!");
static_assert(offsetof(VelocityGridData_AddPoint, PointEnvelope) == 0x00000C, "Member 'VelocityGridData_AddPoint::PointEnvelope' has a wrong offset!");
static_assert(offsetof(VelocityGridData_AddPoint, PointStrength) == 0x000010, "Member 'VelocityGridData_AddPoint::PointStrength' has a wrong offset!");

// Function FortniteGame.WorldMapPinManager.CreateWorldMapPin
// 0x0008 (0x0008 - 0x0000)
struct WorldMapPinManager_CreateWorldMapPin final
{
public:
	int32                                         TheaterIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWorldMapPin*                           ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldMapPinManager_CreateWorldMapPin) == 0x000004, "Wrong alignment on WorldMapPinManager_CreateWorldMapPin");
static_assert(sizeof(WorldMapPinManager_CreateWorldMapPin) == 0x000008, "Wrong size on WorldMapPinManager_CreateWorldMapPin");
static_assert(offsetof(WorldMapPinManager_CreateWorldMapPin, TheaterIndex) == 0x000000, "Member 'WorldMapPinManager_CreateWorldMapPin::TheaterIndex' has a wrong offset!");
static_assert(offsetof(WorldMapPinManager_CreateWorldMapPin, ReturnValue) == 0x000004, "Member 'WorldMapPinManager_CreateWorldMapPin::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingConnectivityComponent.Connect
// 0x002C (0x002C - 0x0000)
struct BuildingConnectivityComponent_Connect final
{
public:
	struct FFortConnectionData                    NewConnection;                                     // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingConnectivityComponent_Connect) == 0x000004, "Wrong alignment on BuildingConnectivityComponent_Connect");
static_assert(sizeof(BuildingConnectivityComponent_Connect) == 0x00002C, "Wrong size on BuildingConnectivityComponent_Connect");
static_assert(offsetof(BuildingConnectivityComponent_Connect, NewConnection) == 0x000000, "Member 'BuildingConnectivityComponent_Connect::NewConnection' has a wrong offset!");

// Function FortniteGame.BuildingConnectivityComponent.Disconnect
// 0x002C (0x002C - 0x0000)
struct BuildingConnectivityComponent_Disconnect final
{
public:
	struct FFortConnectionData                    NewDisconnection;                                  // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingConnectivityComponent_Disconnect) == 0x000004, "Wrong alignment on BuildingConnectivityComponent_Disconnect");
static_assert(sizeof(BuildingConnectivityComponent_Disconnect) == 0x00002C, "Wrong size on BuildingConnectivityComponent_Disconnect");
static_assert(offsetof(BuildingConnectivityComponent_Disconnect, NewDisconnection) == 0x000000, "Member 'BuildingConnectivityComponent_Disconnect::NewDisconnection' has a wrong offset!");

// Function FortniteGame.BuildingConnectivityComponent.K2_IsPowered
// 0x0001 (0x0001 - 0x0000)
struct BuildingConnectivityComponent_K2_IsPowered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingConnectivityComponent_K2_IsPowered) == 0x000001, "Wrong alignment on BuildingConnectivityComponent_K2_IsPowered");
static_assert(sizeof(BuildingConnectivityComponent_K2_IsPowered) == 0x000001, "Wrong size on BuildingConnectivityComponent_K2_IsPowered");
static_assert(offsetof(BuildingConnectivityComponent_K2_IsPowered, ReturnValue) == 0x000000, "Member 'BuildingConnectivityComponent_K2_IsPowered::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingConnectivityComponent.SetAllowConnections
// 0x0001 (0x0001 - 0x0000)
struct BuildingConnectivityComponent_SetAllowConnections final
{
public:
	bool                                          bInAllowConnections;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingConnectivityComponent_SetAllowConnections) == 0x000001, "Wrong alignment on BuildingConnectivityComponent_SetAllowConnections");
static_assert(sizeof(BuildingConnectivityComponent_SetAllowConnections) == 0x000001, "Wrong size on BuildingConnectivityComponent_SetAllowConnections");
static_assert(offsetof(BuildingConnectivityComponent_SetAllowConnections, bInAllowConnections) == 0x000000, "Member 'BuildingConnectivityComponent_SetAllowConnections::bInAllowConnections' has a wrong offset!");

// Function FortniteGame.BuildingConnectivityComponent.SetIsProvidingPower
// 0x0001 (0x0001 - 0x0000)
struct BuildingConnectivityComponent_SetIsProvidingPower final
{
public:
	bool                                          bNewIsProvidingPower;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingConnectivityComponent_SetIsProvidingPower) == 0x000001, "Wrong alignment on BuildingConnectivityComponent_SetIsProvidingPower");
static_assert(sizeof(BuildingConnectivityComponent_SetIsProvidingPower) == 0x000001, "Wrong size on BuildingConnectivityComponent_SetIsProvidingPower");
static_assert(offsetof(BuildingConnectivityComponent_SetIsProvidingPower, bNewIsProvidingPower) == 0x000000, "Member 'BuildingConnectivityComponent_SetIsProvidingPower::bNewIsProvidingPower' has a wrong offset!");

// Function FortniteGame.BuildingConnectivityComponent.CanConnectTo
// 0x0008 (0x0008 - 0x0000)
struct BuildingConnectivityComponent_CanConnectTo final
{
public:
	class ABuildingSMActor*                       TestActor;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingConnectivityComponent_CanConnectTo) == 0x000004, "Wrong alignment on BuildingConnectivityComponent_CanConnectTo");
static_assert(sizeof(BuildingConnectivityComponent_CanConnectTo) == 0x000008, "Wrong size on BuildingConnectivityComponent_CanConnectTo");
static_assert(offsetof(BuildingConnectivityComponent_CanConnectTo, TestActor) == 0x000000, "Member 'BuildingConnectivityComponent_CanConnectTo::TestActor' has a wrong offset!");
static_assert(offsetof(BuildingConnectivityComponent_CanConnectTo, ReturnValue) == 0x000004, "Member 'BuildingConnectivityComponent_CanConnectTo::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingConnectivityComponent.IsConnectedTo
// 0x0008 (0x0008 - 0x0000)
struct BuildingConnectivityComponent_IsConnectedTo final
{
public:
	class ABuildingSMActor*                       TestActor;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingConnectivityComponent_IsConnectedTo) == 0x000004, "Wrong alignment on BuildingConnectivityComponent_IsConnectedTo");
static_assert(sizeof(BuildingConnectivityComponent_IsConnectedTo) == 0x000008, "Wrong size on BuildingConnectivityComponent_IsConnectedTo");
static_assert(offsetof(BuildingConnectivityComponent_IsConnectedTo, TestActor) == 0x000000, "Member 'BuildingConnectivityComponent_IsConnectedTo::TestActor' has a wrong offset!");
static_assert(offsetof(BuildingConnectivityComponent_IsConnectedTo, ReturnValue) == 0x000004, "Member 'BuildingConnectivityComponent_IsConnectedTo::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingConnectivityEffect.OnConnect
// 0x0060 (0x0060 - 0x0000)
struct BuildingConnectivityEffect_OnConnect final
{
public:
	struct FTransform                             T1;                                                // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             T2;                                                // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingConnectivityEffect_OnConnect) == 0x000010, "Wrong alignment on BuildingConnectivityEffect_OnConnect");
static_assert(sizeof(BuildingConnectivityEffect_OnConnect) == 0x000060, "Wrong size on BuildingConnectivityEffect_OnConnect");
static_assert(offsetof(BuildingConnectivityEffect_OnConnect, T1) == 0x000000, "Member 'BuildingConnectivityEffect_OnConnect::T1' has a wrong offset!");
static_assert(offsetof(BuildingConnectivityEffect_OnConnect, T2) == 0x000030, "Member 'BuildingConnectivityEffect_OnConnect::T2' has a wrong offset!");

// Function FortniteGame.FortInGameMapManager.ApplyShowFlags
// 0x0004 (0x0004 - 0x0000)
struct FortInGameMapManager_ApplyShowFlags final
{
public:
	class USceneCaptureComponent*                 SceneCaptureComponent;                             // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInGameMapManager_ApplyShowFlags) == 0x000004, "Wrong alignment on FortInGameMapManager_ApplyShowFlags");
static_assert(sizeof(FortInGameMapManager_ApplyShowFlags) == 0x000004, "Wrong size on FortInGameMapManager_ApplyShowFlags");
static_assert(offsetof(FortInGameMapManager_ApplyShowFlags, SceneCaptureComponent) == 0x000000, "Member 'FortInGameMapManager_ApplyShowFlags::SceneCaptureComponent' has a wrong offset!");

// Function FortniteGame.FortInGameMapManager.PaintOnFog
// 0x000C (0x000C - 0x0000)
struct FortInGameMapManager_PaintOnFog final
{
public:
	struct FVector                                WorldCoords;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortInGameMapManager_PaintOnFog) == 0x000004, "Wrong alignment on FortInGameMapManager_PaintOnFog");
static_assert(sizeof(FortInGameMapManager_PaintOnFog) == 0x00000C, "Wrong size on FortInGameMapManager_PaintOnFog");
static_assert(offsetof(FortInGameMapManager_PaintOnFog, WorldCoords) == 0x000000, "Member 'FortInGameMapManager_PaintOnFog::WorldCoords' has a wrong offset!");

// Function FortniteGame.HomeBaseBuilding.OnBuildingChangedInternal
// 0x0003 (0x0003 - 0x0000)
struct HomeBaseBuilding_OnBuildingChangedInternal final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseBuilding_OnBuildingChangedInternal) == 0x000001, "Wrong alignment on HomeBaseBuilding_OnBuildingChangedInternal");
static_assert(sizeof(HomeBaseBuilding_OnBuildingChangedInternal) == 0x000003, "Wrong size on HomeBaseBuilding_OnBuildingChangedInternal");
static_assert(offsetof(HomeBaseBuilding_OnBuildingChangedInternal, bItemChanged) == 0x000000, "Member 'HomeBaseBuilding_OnBuildingChangedInternal::bItemChanged' has a wrong offset!");
static_assert(offsetof(HomeBaseBuilding_OnBuildingChangedInternal, bAmmoChanged) == 0x000001, "Member 'HomeBaseBuilding_OnBuildingChangedInternal::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(HomeBaseBuilding_OnBuildingChangedInternal, bIngredientsChanged) == 0x000002, "Member 'HomeBaseBuilding_OnBuildingChangedInternal::bIngredientsChanged' has a wrong offset!");

// Function FortniteGame.HomeBaseBuilding.GetAbilityKitForLevel
// 0x0008 (0x0008 - 0x0000)
struct HomeBaseBuilding_GetAbilityKitForLevel final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilityKit*                        ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseBuilding_GetAbilityKitForLevel) == 0x000004, "Wrong alignment on HomeBaseBuilding_GetAbilityKitForLevel");
static_assert(sizeof(HomeBaseBuilding_GetAbilityKitForLevel) == 0x000008, "Wrong size on HomeBaseBuilding_GetAbilityKitForLevel");
static_assert(offsetof(HomeBaseBuilding_GetAbilityKitForLevel, InLevel) == 0x000000, "Member 'HomeBaseBuilding_GetAbilityKitForLevel::InLevel' has a wrong offset!");
static_assert(offsetof(HomeBaseBuilding_GetAbilityKitForLevel, ReturnValue) == 0x000004, "Member 'HomeBaseBuilding_GetAbilityKitForLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseBuilding.GetAbilityKits
// 0x000C (0x000C - 0x0000)
struct HomeBaseBuilding_GetAbilityKits final
{
public:
	TArray<class UFortAbilityKit*>                AbilityKits;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseBuilding_GetAbilityKits) == 0x000004, "Wrong alignment on HomeBaseBuilding_GetAbilityKits");
static_assert(sizeof(HomeBaseBuilding_GetAbilityKits) == 0x00000C, "Wrong size on HomeBaseBuilding_GetAbilityKits");
static_assert(offsetof(HomeBaseBuilding_GetAbilityKits, AbilityKits) == 0x000000, "Member 'HomeBaseBuilding_GetAbilityKits::AbilityKits' has a wrong offset!");

// Function FortniteGame.HomeBaseBuilding.GetCurrentBonuses
// 0x000C (0x000C - 0x0000)
struct HomeBaseBuilding_GetCurrentBonuses final
{
public:
	TArray<class UBuildingLevelGameplayEffectInfo*> ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseBuilding_GetCurrentBonuses) == 0x000004, "Wrong alignment on HomeBaseBuilding_GetCurrentBonuses");
static_assert(sizeof(HomeBaseBuilding_GetCurrentBonuses) == 0x00000C, "Wrong size on HomeBaseBuilding_GetCurrentBonuses");
static_assert(offsetof(HomeBaseBuilding_GetCurrentBonuses, ReturnValue) == 0x000000, "Member 'HomeBaseBuilding_GetCurrentBonuses::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseBuilding.GetItem
// 0x0004 (0x0004 - 0x0000)
struct HomeBaseBuilding_GetItem final
{
public:
	class UMyTownBuildingItem*                    ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseBuilding_GetItem) == 0x000004, "Wrong alignment on HomeBaseBuilding_GetItem");
static_assert(sizeof(HomeBaseBuilding_GetItem) == 0x000004, "Wrong size on HomeBaseBuilding_GetItem");
static_assert(offsetof(HomeBaseBuilding_GetItem, ReturnValue) == 0x000000, "Member 'HomeBaseBuilding_GetItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseBuilding.GetMaxLevelBonuses
// 0x000C (0x000C - 0x0000)
struct HomeBaseBuilding_GetMaxLevelBonuses final
{
public:
	TArray<class UBuildingLevelGameplayEffectInfo*> ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseBuilding_GetMaxLevelBonuses) == 0x000004, "Wrong alignment on HomeBaseBuilding_GetMaxLevelBonuses");
static_assert(sizeof(HomeBaseBuilding_GetMaxLevelBonuses) == 0x00000C, "Wrong size on HomeBaseBuilding_GetMaxLevelBonuses");
static_assert(offsetof(HomeBaseBuilding_GetMaxLevelBonuses, ReturnValue) == 0x000000, "Member 'HomeBaseBuilding_GetMaxLevelBonuses::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseBuilding.GetNextBonuses
// 0x000C (0x000C - 0x0000)
struct HomeBaseBuilding_GetNextBonuses final
{
public:
	TArray<class UBuildingLevelGameplayEffectInfo*> ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseBuilding_GetNextBonuses) == 0x000004, "Wrong alignment on HomeBaseBuilding_GetNextBonuses");
static_assert(sizeof(HomeBaseBuilding_GetNextBonuses) == 0x00000C, "Wrong size on HomeBaseBuilding_GetNextBonuses");
static_assert(offsetof(HomeBaseBuilding_GetNextBonuses, ReturnValue) == 0x000000, "Member 'HomeBaseBuilding_GetNextBonuses::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseBuilding.GetTeammatesRatingAddition
// 0x000C (0x000C - 0x0000)
struct HomeBaseBuilding_GetTeammatesRatingAddition final
{
public:
	struct FUniqueNetIdRepl                       TeammatesAccountId;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseBuilding_GetTeammatesRatingAddition) == 0x000004, "Wrong alignment on HomeBaseBuilding_GetTeammatesRatingAddition");
static_assert(sizeof(HomeBaseBuilding_GetTeammatesRatingAddition) == 0x00000C, "Wrong size on HomeBaseBuilding_GetTeammatesRatingAddition");
static_assert(offsetof(HomeBaseBuilding_GetTeammatesRatingAddition, TeammatesAccountId) == 0x000000, "Member 'HomeBaseBuilding_GetTeammatesRatingAddition::TeammatesAccountId' has a wrong offset!");
static_assert(offsetof(HomeBaseBuilding_GetTeammatesRatingAddition, ReturnValue) == 0x000008, "Member 'HomeBaseBuilding_GetTeammatesRatingAddition::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseBuilding.GetUpgradeRequirements
// 0x002C (0x002C - 0x0000)
struct HomeBaseBuilding_GetUpgradeRequirements final
{
public:
	struct FBuildingUpgradeRequirementsForLevel   ReturnValue;                                       // 0x0000(0x002C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseBuilding_GetUpgradeRequirements) == 0x000004, "Wrong alignment on HomeBaseBuilding_GetUpgradeRequirements");
static_assert(sizeof(HomeBaseBuilding_GetUpgradeRequirements) == 0x00002C, "Wrong size on HomeBaseBuilding_GetUpgradeRequirements");
static_assert(offsetof(HomeBaseBuilding_GetUpgradeRequirements, ReturnValue) == 0x000000, "Member 'HomeBaseBuilding_GetUpgradeRequirements::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseBuilding.ShouldShowBang
// 0x0001 (0x0001 - 0x0000)
struct HomeBaseBuilding_ShouldShowBang final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseBuilding_ShouldShowBang) == 0x000001, "Wrong alignment on HomeBaseBuilding_ShouldShowBang");
static_assert(sizeof(HomeBaseBuilding_ShouldShowBang) == 0x000001, "Wrong size on HomeBaseBuilding_ShouldShowBang");
static_assert(offsetof(HomeBaseBuilding_ShouldShowBang, ReturnValue) == 0x000000, "Member 'HomeBaseBuilding_ShouldShowBang::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseMainBuilding.GetEffects
// 0x000C (0x000C - 0x0000)
struct HomeBaseMainBuilding_GetEffects final
{
public:
	TArray<class UAccumulatedGameplayEffectInfo*> ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseMainBuilding_GetEffects) == 0x000004, "Wrong alignment on HomeBaseMainBuilding_GetEffects");
static_assert(sizeof(HomeBaseMainBuilding_GetEffects) == 0x00000C, "Wrong size on HomeBaseMainBuilding_GetEffects");
static_assert(offsetof(HomeBaseMainBuilding_GetEffects, ReturnValue) == 0x000000, "Member 'HomeBaseMainBuilding_GetEffects::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseMainBuilding.ShouldShow
// 0x0001 (0x0001 - 0x0000)
struct HomeBaseMainBuilding_ShouldShow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseMainBuilding_ShouldShow) == 0x000001, "Wrong alignment on HomeBaseMainBuilding_ShouldShow");
static_assert(sizeof(HomeBaseMainBuilding_ShouldShow) == 0x000001, "Wrong size on HomeBaseMainBuilding_ShouldShow");
static_assert(offsetof(HomeBaseMainBuilding_ShouldShow, ReturnValue) == 0x000000, "Member 'HomeBaseMainBuilding_ShouldShow::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingEditModeSupport.OnSuccessfulMatchInteractParamUpdate
// 0x0004 (0x0004 - 0x0000)
struct BuildingEditModeSupport_OnSuccessfulMatchInteractParamUpdate final
{
public:
	float                                         NewInteractParamVal;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingEditModeSupport_OnSuccessfulMatchInteractParamUpdate) == 0x000004, "Wrong alignment on BuildingEditModeSupport_OnSuccessfulMatchInteractParamUpdate");
static_assert(sizeof(BuildingEditModeSupport_OnSuccessfulMatchInteractParamUpdate) == 0x000004, "Wrong size on BuildingEditModeSupport_OnSuccessfulMatchInteractParamUpdate");
static_assert(offsetof(BuildingEditModeSupport_OnSuccessfulMatchInteractParamUpdate, NewInteractParamVal) == 0x000000, "Member 'BuildingEditModeSupport_OnSuccessfulMatchInteractParamUpdate::NewInteractParamVal' has a wrong offset!");

// Function FortniteGame.BuildingStructuralSupportSystem.GetBestBuildingTarget
// 0x0028 (0x0028 - 0x0000)
struct BuildingStructuralSupportSystem_GetBestBuildingTarget final
{
public:
	class AActor*                                 ObjectiveActor;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AttackerActor;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuildingValueRules                    ValueRules;                                        // 0x0008(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ABuildingSMActor*                       ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingStructuralSupportSystem_GetBestBuildingTarget) == 0x000004, "Wrong alignment on BuildingStructuralSupportSystem_GetBestBuildingTarget");
static_assert(sizeof(BuildingStructuralSupportSystem_GetBestBuildingTarget) == 0x000028, "Wrong size on BuildingStructuralSupportSystem_GetBestBuildingTarget");
static_assert(offsetof(BuildingStructuralSupportSystem_GetBestBuildingTarget, ObjectiveActor) == 0x000000, "Member 'BuildingStructuralSupportSystem_GetBestBuildingTarget::ObjectiveActor' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_GetBestBuildingTarget, AttackerActor) == 0x000004, "Member 'BuildingStructuralSupportSystem_GetBestBuildingTarget::AttackerActor' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_GetBestBuildingTarget, ValueRules) == 0x000008, "Member 'BuildingStructuralSupportSystem_GetBestBuildingTarget::ValueRules' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_GetBestBuildingTarget, ReturnValue) == 0x000024, "Member 'BuildingStructuralSupportSystem_GetBestBuildingTarget::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingStructuralSupportSystem.GetLogicalBuildingGroundSupportedActors
// 0x0010 (0x0010 - 0x0000)
struct BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors final
{
public:
	int32                                         LogicalIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABuildingSMActor*>               LogicalBuildingGroundSupportedActors;              // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors) == 0x000004, "Wrong alignment on BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors");
static_assert(sizeof(BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors) == 0x000010, "Wrong size on BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors");
static_assert(offsetof(BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors, LogicalIndex) == 0x000000, "Member 'BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors::LogicalIndex' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors, LogicalBuildingGroundSupportedActors) == 0x000004, "Member 'BuildingStructuralSupportSystem_GetLogicalBuildingGroundSupportedActors::LogicalBuildingGroundSupportedActors' has a wrong offset!");

// Function FortniteGame.BuildingStructuralSupportSystem.K2_GetLogicalBuildingActors
// 0x0010 (0x0010 - 0x0000)
struct BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors final
{
public:
	int32                                         LogicalIdx;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABuildingSMActor*>               LogicalBuildingActors;                             // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors) == 0x000004, "Wrong alignment on BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors");
static_assert(sizeof(BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors) == 0x000010, "Wrong size on BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors");
static_assert(offsetof(BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors, LogicalIdx) == 0x000000, "Member 'BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors::LogicalIdx' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors, LogicalBuildingActors) == 0x000004, "Member 'BuildingStructuralSupportSystem_K2_GetLogicalBuildingActors::LogicalBuildingActors' has a wrong offset!");

// Function FortniteGame.BuildingStructuralSupportSystem.MakeBuildingValueRules
// 0x0038 (0x0038 - 0x0000)
struct BuildingStructuralSupportSystem_MakeBuildingValueRules final
{
public:
	int32                                         CellsAbove;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellsBelow;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellHorizontalRadius;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromObjectiveWeight;                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackWeight;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StructuralWeight;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrapWeight;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuildingValueRules                    ReturnValue;                                       // 0x001C(0x001C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingStructuralSupportSystem_MakeBuildingValueRules) == 0x000004, "Wrong alignment on BuildingStructuralSupportSystem_MakeBuildingValueRules");
static_assert(sizeof(BuildingStructuralSupportSystem_MakeBuildingValueRules) == 0x000038, "Wrong size on BuildingStructuralSupportSystem_MakeBuildingValueRules");
static_assert(offsetof(BuildingStructuralSupportSystem_MakeBuildingValueRules, CellsAbove) == 0x000000, "Member 'BuildingStructuralSupportSystem_MakeBuildingValueRules::CellsAbove' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_MakeBuildingValueRules, CellsBelow) == 0x000004, "Member 'BuildingStructuralSupportSystem_MakeBuildingValueRules::CellsBelow' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_MakeBuildingValueRules, CellHorizontalRadius) == 0x000008, "Member 'BuildingStructuralSupportSystem_MakeBuildingValueRules::CellHorizontalRadius' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_MakeBuildingValueRules, DistanceFromObjectiveWeight) == 0x00000C, "Member 'BuildingStructuralSupportSystem_MakeBuildingValueRules::DistanceFromObjectiveWeight' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_MakeBuildingValueRules, AttackWeight) == 0x000010, "Member 'BuildingStructuralSupportSystem_MakeBuildingValueRules::AttackWeight' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_MakeBuildingValueRules, StructuralWeight) == 0x000014, "Member 'BuildingStructuralSupportSystem_MakeBuildingValueRules::StructuralWeight' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_MakeBuildingValueRules, TrapWeight) == 0x000018, "Member 'BuildingStructuralSupportSystem_MakeBuildingValueRules::TrapWeight' has a wrong offset!");
static_assert(offsetof(BuildingStructuralSupportSystem_MakeBuildingValueRules, ReturnValue) == 0x00001C, "Member 'BuildingStructuralSupportSystem_MakeBuildingValueRules::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAlterableItem.GetNumberOfSlotsForAlterationType
// 0x0008 (0x0008 - 0x0000)
struct FortAlterableItem_GetNumberOfSlotsForAlterationType final
{
public:
	EFortAlteration                               AlterationType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterableItem_GetNumberOfSlotsForAlterationType) == 0x000004, "Wrong alignment on FortAlterableItem_GetNumberOfSlotsForAlterationType");
static_assert(sizeof(FortAlterableItem_GetNumberOfSlotsForAlterationType) == 0x000008, "Wrong size on FortAlterableItem_GetNumberOfSlotsForAlterationType");
static_assert(offsetof(FortAlterableItem_GetNumberOfSlotsForAlterationType, AlterationType) == 0x000000, "Member 'FortAlterableItem_GetNumberOfSlotsForAlterationType::AlterationType' has a wrong offset!");
static_assert(offsetof(FortAlterableItem_GetNumberOfSlotsForAlterationType, ReturnValue) == 0x000004, "Member 'FortAlterableItem_GetNumberOfSlotsForAlterationType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicItem.GetRequiredTeamLevelToCraft
// 0x0004 (0x0004 - 0x0000)
struct FortSchematicItem_GetRequiredTeamLevelToCraft final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSchematicItem_GetRequiredTeamLevelToCraft) == 0x000004, "Wrong alignment on FortSchematicItem_GetRequiredTeamLevelToCraft");
static_assert(sizeof(FortSchematicItem_GetRequiredTeamLevelToCraft) == 0x000004, "Wrong size on FortSchematicItem_GetRequiredTeamLevelToCraft");
static_assert(offsetof(FortSchematicItem_GetRequiredTeamLevelToCraft, ReturnValue) == 0x000000, "Member 'FortSchematicItem_GetRequiredTeamLevelToCraft::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicItem.GetSchematicQuantityProduced
// 0x0004 (0x0004 - 0x0000)
struct FortSchematicItem_GetSchematicQuantityProduced final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSchematicItem_GetSchematicQuantityProduced) == 0x000004, "Wrong alignment on FortSchematicItem_GetSchematicQuantityProduced");
static_assert(sizeof(FortSchematicItem_GetSchematicQuantityProduced) == 0x000004, "Wrong size on FortSchematicItem_GetSchematicQuantityProduced");
static_assert(offsetof(FortSchematicItem_GetSchematicQuantityProduced, ReturnValue) == 0x000000, "Member 'FortSchematicItem_GetSchematicQuantityProduced::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicItem.GetSchematicRequirements
// 0x000C (0x000C - 0x0000)
struct FortSchematicItem_GetSchematicRequirements final
{
public:
	TArray<struct FSchematicRequirement>          Requirements;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSchematicItem_GetSchematicRequirements) == 0x000004, "Wrong alignment on FortSchematicItem_GetSchematicRequirements");
static_assert(sizeof(FortSchematicItem_GetSchematicRequirements) == 0x00000C, "Wrong size on FortSchematicItem_GetSchematicRequirements");
static_assert(offsetof(FortSchematicItem_GetSchematicRequirements, Requirements) == 0x000000, "Member 'FortSchematicItem_GetSchematicRequirements::Requirements' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent.AttemptSetCurrentTarget
// 0x0008 (0x0008 - 0x0000)
struct BuildingTurretComponent_AttemptSetCurrentTarget final
{
public:
	class AActor*                                 NewTarget;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingTurretComponent_AttemptSetCurrentTarget) == 0x000004, "Wrong alignment on BuildingTurretComponent_AttemptSetCurrentTarget");
static_assert(sizeof(BuildingTurretComponent_AttemptSetCurrentTarget) == 0x000008, "Wrong size on BuildingTurretComponent_AttemptSetCurrentTarget");
static_assert(offsetof(BuildingTurretComponent_AttemptSetCurrentTarget, NewTarget) == 0x000000, "Member 'BuildingTurretComponent_AttemptSetCurrentTarget::NewTarget' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_AttemptSetCurrentTarget, ReturnValue) == 0x000004, "Member 'BuildingTurretComponent_AttemptSetCurrentTarget::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent.OnRep_CurrentTarget
// 0x0004 (0x0004 - 0x0000)
struct BuildingTurretComponent_OnRep_CurrentTarget final
{
public:
	class AActor*                                 OldTarget;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTurretComponent_OnRep_CurrentTarget) == 0x000004, "Wrong alignment on BuildingTurretComponent_OnRep_CurrentTarget");
static_assert(sizeof(BuildingTurretComponent_OnRep_CurrentTarget) == 0x000004, "Wrong size on BuildingTurretComponent_OnRep_CurrentTarget");
static_assert(offsetof(BuildingTurretComponent_OnRep_CurrentTarget, OldTarget) == 0x000000, "Member 'BuildingTurretComponent_OnRep_CurrentTarget::OldTarget' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent.OnTargetingBeginOverlap
// 0x0090 (0x0090 - 0x0000)
struct BuildingTurretComponent_OnTargetingBeginOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTurretComponent_OnTargetingBeginOverlap) == 0x000004, "Wrong alignment on BuildingTurretComponent_OnTargetingBeginOverlap");
static_assert(sizeof(BuildingTurretComponent_OnTargetingBeginOverlap) == 0x000090, "Wrong size on BuildingTurretComponent_OnTargetingBeginOverlap");
static_assert(offsetof(BuildingTurretComponent_OnTargetingBeginOverlap, OtherActor) == 0x000000, "Member 'BuildingTurretComponent_OnTargetingBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_OnTargetingBeginOverlap, OtherComp) == 0x000004, "Member 'BuildingTurretComponent_OnTargetingBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_OnTargetingBeginOverlap, OtherBodyIndex) == 0x000008, "Member 'BuildingTurretComponent_OnTargetingBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_OnTargetingBeginOverlap, bFromSweep) == 0x00000C, "Member 'BuildingTurretComponent_OnTargetingBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_OnTargetingBeginOverlap, SweepResult) == 0x000010, "Member 'BuildingTurretComponent_OnTargetingBeginOverlap::SweepResult' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent.OnTargetingEndOverlap
// 0x000C (0x000C - 0x0000)
struct BuildingTurretComponent_OnTargetingEndOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTurretComponent_OnTargetingEndOverlap) == 0x000004, "Wrong alignment on BuildingTurretComponent_OnTargetingEndOverlap");
static_assert(sizeof(BuildingTurretComponent_OnTargetingEndOverlap) == 0x00000C, "Wrong size on BuildingTurretComponent_OnTargetingEndOverlap");
static_assert(offsetof(BuildingTurretComponent_OnTargetingEndOverlap, OtherActor) == 0x000000, "Member 'BuildingTurretComponent_OnTargetingEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_OnTargetingEndOverlap, OtherComp) == 0x000004, "Member 'BuildingTurretComponent_OnTargetingEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_OnTargetingEndOverlap, OtherBodyIndex) == 0x000008, "Member 'BuildingTurretComponent_OnTargetingEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent.SetTargetingOverlapComponent
// 0x0004 (0x0004 - 0x0000)
struct BuildingTurretComponent_SetTargetingOverlapComponent final
{
public:
	class UPrimitiveComponent*                    NewTargetingOverlapComponent;                      // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTurretComponent_SetTargetingOverlapComponent) == 0x000004, "Wrong alignment on BuildingTurretComponent_SetTargetingOverlapComponent");
static_assert(sizeof(BuildingTurretComponent_SetTargetingOverlapComponent) == 0x000004, "Wrong size on BuildingTurretComponent_SetTargetingOverlapComponent");
static_assert(offsetof(BuildingTurretComponent_SetTargetingOverlapComponent, NewTargetingOverlapComponent) == 0x000000, "Member 'BuildingTurretComponent_SetTargetingOverlapComponent::NewTargetingOverlapComponent' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent.ChooseBestTarget
// 0x0010 (0x0010 - 0x0000)
struct BuildingTurretComponent_ChooseBestTarget final
{
public:
	TArray<class AActor*>                         InOutPotentialTargets;                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTurretComponent_ChooseBestTarget) == 0x000004, "Wrong alignment on BuildingTurretComponent_ChooseBestTarget");
static_assert(sizeof(BuildingTurretComponent_ChooseBestTarget) == 0x000010, "Wrong size on BuildingTurretComponent_ChooseBestTarget");
static_assert(offsetof(BuildingTurretComponent_ChooseBestTarget, InOutPotentialTargets) == 0x000000, "Member 'BuildingTurretComponent_ChooseBestTarget::InOutPotentialTargets' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_ChooseBestTarget, ReturnValue) == 0x00000C, "Member 'BuildingTurretComponent_ChooseBestTarget::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent.IsValidTarget
// 0x0008 (0x0008 - 0x0000)
struct BuildingTurretComponent_IsValidTarget final
{
public:
	class AActor*                                 InTarget;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingTurretComponent_IsValidTarget) == 0x000004, "Wrong alignment on BuildingTurretComponent_IsValidTarget");
static_assert(sizeof(BuildingTurretComponent_IsValidTarget) == 0x000008, "Wrong size on BuildingTurretComponent_IsValidTarget");
static_assert(offsetof(BuildingTurretComponent_IsValidTarget, InTarget) == 0x000000, "Member 'BuildingTurretComponent_IsValidTarget::InTarget' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_IsValidTarget, ReturnValue) == 0x000004, "Member 'BuildingTurretComponent_IsValidTarget::ReturnValue' has a wrong offset!");

// Function FortniteGame.BuildingTurretComponent_MOBA.OnAllyHarmed
// 0x0008 (0x0008 - 0x0000)
struct BuildingTurretComponent_MOBA_OnAllyHarmed final
{
public:
	class AActor*                                 InAllyActor;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InHarmingActor;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingTurretComponent_MOBA_OnAllyHarmed) == 0x000004, "Wrong alignment on BuildingTurretComponent_MOBA_OnAllyHarmed");
static_assert(sizeof(BuildingTurretComponent_MOBA_OnAllyHarmed) == 0x000008, "Wrong size on BuildingTurretComponent_MOBA_OnAllyHarmed");
static_assert(offsetof(BuildingTurretComponent_MOBA_OnAllyHarmed, InAllyActor) == 0x000000, "Member 'BuildingTurretComponent_MOBA_OnAllyHarmed::InAllyActor' has a wrong offset!");
static_assert(offsetof(BuildingTurretComponent_MOBA_OnAllyHarmed, InHarmingActor) == 0x000004, "Member 'BuildingTurretComponent_MOBA_OnAllyHarmed::InHarmingActor' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartAnimInstance.OnDayPhaseChanged
// 0x0003 (0x0003 - 0x0000)
struct CustomCharacterPartAnimInstance_OnDayPhaseChanged final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartAnimInstance_OnDayPhaseChanged) == 0x000001, "Wrong alignment on CustomCharacterPartAnimInstance_OnDayPhaseChanged");
static_assert(sizeof(CustomCharacterPartAnimInstance_OnDayPhaseChanged) == 0x000003, "Wrong size on CustomCharacterPartAnimInstance_OnDayPhaseChanged");
static_assert(offsetof(CustomCharacterPartAnimInstance_OnDayPhaseChanged, CurrentDayPhase) == 0x000000, "Member 'CustomCharacterPartAnimInstance_OnDayPhaseChanged::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(CustomCharacterPartAnimInstance_OnDayPhaseChanged, PreviousDayPhase) == 0x000001, "Member 'CustomCharacterPartAnimInstance_OnDayPhaseChanged::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(CustomCharacterPartAnimInstance_OnDayPhaseChanged, bAtCreation) == 0x000002, "Member 'CustomCharacterPartAnimInstance_OnDayPhaseChanged::bAtCreation' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartAnimInstance.GetAssociatedPlayerPawn
// 0x0004 (0x0004 - 0x0000)
struct CustomCharacterPartAnimInstance_GetAssociatedPlayerPawn final
{
public:
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartAnimInstance_GetAssociatedPlayerPawn) == 0x000004, "Wrong alignment on CustomCharacterPartAnimInstance_GetAssociatedPlayerPawn");
static_assert(sizeof(CustomCharacterPartAnimInstance_GetAssociatedPlayerPawn) == 0x000004, "Wrong size on CustomCharacterPartAnimInstance_GetAssociatedPlayerPawn");
static_assert(offsetof(CustomCharacterPartAnimInstance_GetAssociatedPlayerPawn, ReturnValue) == 0x000000, "Member 'CustomCharacterPartAnimInstance_GetAssociatedPlayerPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartAnimInstance.GetCharacterPartType
// 0x0001 (0x0001 - 0x0000)
struct CustomCharacterPartAnimInstance_GetCharacterPartType final
{
public:
	EFortCustomPartType                           ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartAnimInstance_GetCharacterPartType) == 0x000001, "Wrong alignment on CustomCharacterPartAnimInstance_GetCharacterPartType");
static_assert(sizeof(CustomCharacterPartAnimInstance_GetCharacterPartType) == 0x000001, "Wrong size on CustomCharacterPartAnimInstance_GetCharacterPartType");
static_assert(offsetof(CustomCharacterPartAnimInstance_GetCharacterPartType, ReturnValue) == 0x000000, "Member 'CustomCharacterPartAnimInstance_GetCharacterPartType::ReturnValue' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartAnimInstance.GetOwnerSkeletalMeshComponent
// 0x0004 (0x0004 - 0x0000)
struct CustomCharacterPartAnimInstance_GetOwnerSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0004)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartAnimInstance_GetOwnerSkeletalMeshComponent) == 0x000004, "Wrong alignment on CustomCharacterPartAnimInstance_GetOwnerSkeletalMeshComponent");
static_assert(sizeof(CustomCharacterPartAnimInstance_GetOwnerSkeletalMeshComponent) == 0x000004, "Wrong size on CustomCharacterPartAnimInstance_GetOwnerSkeletalMeshComponent");
static_assert(offsetof(CustomCharacterPartAnimInstance_GetOwnerSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'CustomCharacterPartAnimInstance_GetOwnerSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.CustomCharacterPartAnimInstance.GetPartSkeletalMeshComponent
// 0x0004 (0x0004 - 0x0000)
struct CustomCharacterPartAnimInstance_GetPartSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0004)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomCharacterPartAnimInstance_GetPartSkeletalMeshComponent) == 0x000004, "Wrong alignment on CustomCharacterPartAnimInstance_GetPartSkeletalMeshComponent");
static_assert(sizeof(CustomCharacterPartAnimInstance_GetPartSkeletalMeshComponent) == 0x000004, "Wrong size on CustomCharacterPartAnimInstance_GetPartSkeletalMeshComponent");
static_assert(offsetof(CustomCharacterPartAnimInstance_GetPartSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'CustomCharacterPartAnimInstance_GetPartSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicItemDefinition.GetCraftingTime
// 0x0008 (0x0008 - 0x0000)
struct FortSchematicItemDefinition_GetCraftingTime final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSchematicItemDefinition_GetCraftingTime) == 0x000004, "Wrong alignment on FortSchematicItemDefinition_GetCraftingTime");
static_assert(sizeof(FortSchematicItemDefinition_GetCraftingTime) == 0x000008, "Wrong size on FortSchematicItemDefinition_GetCraftingTime");
static_assert(offsetof(FortSchematicItemDefinition_GetCraftingTime, Level) == 0x000000, "Member 'FortSchematicItemDefinition_GetCraftingTime::Level' has a wrong offset!");
static_assert(offsetof(FortSchematicItemDefinition_GetCraftingTime, ReturnValue) == 0x000004, "Member 'FortSchematicItemDefinition_GetCraftingTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSchematicItemDefinition.GetCraftingTimeForCharacter
// 0x000C (0x000C - 0x0000)
struct FortSchematicItemDefinition_GetCraftingTimeForCharacter final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AFortPlayerPawn*                  FortPawn;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSchematicItemDefinition_GetCraftingTimeForCharacter) == 0x000004, "Wrong alignment on FortSchematicItemDefinition_GetCraftingTimeForCharacter");
static_assert(sizeof(FortSchematicItemDefinition_GetCraftingTimeForCharacter) == 0x00000C, "Wrong size on FortSchematicItemDefinition_GetCraftingTimeForCharacter");
static_assert(offsetof(FortSchematicItemDefinition_GetCraftingTimeForCharacter, Level) == 0x000000, "Member 'FortSchematicItemDefinition_GetCraftingTimeForCharacter::Level' has a wrong offset!");
static_assert(offsetof(FortSchematicItemDefinition_GetCraftingTimeForCharacter, FortPawn) == 0x000004, "Member 'FortSchematicItemDefinition_GetCraftingTimeForCharacter::FortPawn' has a wrong offset!");
static_assert(offsetof(FortSchematicItemDefinition_GetCraftingTimeForCharacter, ReturnValue) == 0x000008, "Member 'FortSchematicItemDefinition_GetCraftingTimeForCharacter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemComponent.FindAttributeInformation
// 0x0014 (0x0014 - 0x0000)
struct FortAbilitySystemComponent_FindAttributeInformation final
{
public:
	class FString                                 AttributeName;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttributeInfo                         ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilitySystemComponent_FindAttributeInformation) == 0x000004, "Wrong alignment on FortAbilitySystemComponent_FindAttributeInformation");
static_assert(sizeof(FortAbilitySystemComponent_FindAttributeInformation) == 0x000014, "Wrong size on FortAbilitySystemComponent_FindAttributeInformation");
static_assert(offsetof(FortAbilitySystemComponent_FindAttributeInformation, AttributeName) == 0x000000, "Member 'FortAbilitySystemComponent_FindAttributeInformation::AttributeName' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponent_FindAttributeInformation, ReturnValue) == 0x00000C, "Member 'FortAbilitySystemComponent_FindAttributeInformation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemComponent.GetAttributeMagnitude
// 0x000C (0x000C - 0x0000)
struct FortAbilitySystemComponent_GetAttributeMagnitude final
{
public:
	struct FAttributeInfo                         Info;                                              // 0x0000(0x0008)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilitySystemComponent_GetAttributeMagnitude) == 0x000004, "Wrong alignment on FortAbilitySystemComponent_GetAttributeMagnitude");
static_assert(sizeof(FortAbilitySystemComponent_GetAttributeMagnitude) == 0x00000C, "Wrong size on FortAbilitySystemComponent_GetAttributeMagnitude");
static_assert(offsetof(FortAbilitySystemComponent_GetAttributeMagnitude, Info) == 0x000000, "Member 'FortAbilitySystemComponent_GetAttributeMagnitude::Info' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponent_GetAttributeMagnitude, ReturnValue) == 0x000008, "Member 'FortAbilitySystemComponent_GetAttributeMagnitude::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilitySystemComponent.HasActiveAbilityWithAnyMatchingTag
// 0x001C (0x001C - 0x0000)
struct FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag) == 0x000004, "Wrong alignment on FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag");
static_assert(sizeof(FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag) == 0x00001C, "Wrong size on FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag");
static_assert(offsetof(FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag, Tags) == 0x000000, "Member 'FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag::Tags' has a wrong offset!");
static_assert(offsetof(FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag, ReturnValue) == 0x000018, "Member 'FortAbilitySystemComponent_HasActiveAbilityWithAnyMatchingTag::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_CommitAccountCosts.CommitAccountCosts
// 0x0008 (0x0008 - 0x0000)
struct FortAbilityTask_CommitAccountCosts_CommitAccountCosts final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilityTask_CommitAccountCosts*    ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_CommitAccountCosts_CommitAccountCosts) == 0x000004, "Wrong alignment on FortAbilityTask_CommitAccountCosts_CommitAccountCosts");
static_assert(sizeof(FortAbilityTask_CommitAccountCosts_CommitAccountCosts) == 0x000008, "Wrong size on FortAbilityTask_CommitAccountCosts_CommitAccountCosts");
static_assert(offsetof(FortAbilityTask_CommitAccountCosts_CommitAccountCosts, WorldContextObject) == 0x000000, "Member 'FortAbilityTask_CommitAccountCosts_CommitAccountCosts::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_CommitAccountCosts_CommitAccountCosts, ReturnValue) == 0x000004, "Member 'FortAbilityTask_CommitAccountCosts_CommitAccountCosts::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerZone.ClientOnPawnDied
// 0x0018 (0x0018 - 0x0000)
struct FortPlayerControllerZone_ClientOnPawnDied final
{
public:
	struct FFortPlayerDeathReport                 DeathReport;                                       // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerZone_ClientOnPawnDied) == 0x000004, "Wrong alignment on FortPlayerControllerZone_ClientOnPawnDied");
static_assert(sizeof(FortPlayerControllerZone_ClientOnPawnDied) == 0x000018, "Wrong size on FortPlayerControllerZone_ClientOnPawnDied");
static_assert(offsetof(FortPlayerControllerZone_ClientOnPawnDied, DeathReport) == 0x000000, "Member 'FortPlayerControllerZone_ClientOnPawnDied::DeathReport' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerZone.ClientReceiveFogOfWarBunch
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerControllerZone_ClientReceiveFogOfWarBunch final
{
public:
	int32                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSize;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BunchData;                                         // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerZone_ClientReceiveFogOfWarBunch) == 0x000004, "Wrong alignment on FortPlayerControllerZone_ClientReceiveFogOfWarBunch");
static_assert(sizeof(FortPlayerControllerZone_ClientReceiveFogOfWarBunch) == 0x000014, "Wrong size on FortPlayerControllerZone_ClientReceiveFogOfWarBunch");
static_assert(offsetof(FortPlayerControllerZone_ClientReceiveFogOfWarBunch, Offset) == 0x000000, "Member 'FortPlayerControllerZone_ClientReceiveFogOfWarBunch::Offset' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerZone_ClientReceiveFogOfWarBunch, TotalSize) == 0x000004, "Member 'FortPlayerControllerZone_ClientReceiveFogOfWarBunch::TotalSize' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerZone_ClientReceiveFogOfWarBunch, BunchData) == 0x000008, "Member 'FortPlayerControllerZone_ClientReceiveFogOfWarBunch::BunchData' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerZone.ServerRequestFogOfWarBunch
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerZone_ServerRequestFogOfWarBunch final
{
public:
	int32                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerZone_ServerRequestFogOfWarBunch) == 0x000004, "Wrong alignment on FortPlayerControllerZone_ServerRequestFogOfWarBunch");
static_assert(sizeof(FortPlayerControllerZone_ServerRequestFogOfWarBunch) == 0x000004, "Wrong size on FortPlayerControllerZone_ServerRequestFogOfWarBunch");
static_assert(offsetof(FortPlayerControllerZone_ServerRequestFogOfWarBunch, Offset) == 0x000000, "Member 'FortPlayerControllerZone_ServerRequestFogOfWarBunch::Offset' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerPvP.ClientReceiveKillNotification
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerPvP_ClientReceiveKillNotification final
{
public:
	class AFortPlayerStateZone*                   Killer;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerStateZone*                   Killed;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerPvP_ClientReceiveKillNotification) == 0x000004, "Wrong alignment on FortPlayerControllerPvP_ClientReceiveKillNotification");
static_assert(sizeof(FortPlayerControllerPvP_ClientReceiveKillNotification) == 0x000008, "Wrong size on FortPlayerControllerPvP_ClientReceiveKillNotification");
static_assert(offsetof(FortPlayerControllerPvP_ClientReceiveKillNotification, Killer) == 0x000000, "Member 'FortPlayerControllerPvP_ClientReceiveKillNotification::Killer' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerPvP_ClientReceiveKillNotification, Killed) == 0x000004, "Member 'FortPlayerControllerPvP_ClientReceiveKillNotification::Killed' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerPvP.ClientShowGameOverWidget
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerPvP_ClientShowGameOverWidget final
{
public:
	EFortPvPGameResult                            GameResult;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerPvP_ClientShowGameOverWidget) == 0x000001, "Wrong alignment on FortPlayerControllerPvP_ClientShowGameOverWidget");
static_assert(sizeof(FortPlayerControllerPvP_ClientShowGameOverWidget) == 0x000001, "Wrong size on FortPlayerControllerPvP_ClientShowGameOverWidget");
static_assert(offsetof(FortPlayerControllerPvP_ClientShowGameOverWidget, GameResult) == 0x000000, "Member 'FortPlayerControllerPvP_ClientShowGameOverWidget::GameResult' has a wrong offset!");

// Function FortniteGame.FortFrontEndCameraManager.SetCamera
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndCameraManager_SetCamera final
{
public:
	EFrontEndCamera                               NewCamera;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndCameraManager_SetCamera) == 0x000001, "Wrong alignment on FortFrontEndCameraManager_SetCamera");
static_assert(sizeof(FortFrontEndCameraManager_SetCamera) == 0x000001, "Wrong size on FortFrontEndCameraManager_SetCamera");
static_assert(offsetof(FortFrontEndCameraManager_SetCamera, NewCamera) == 0x000000, "Member 'FortFrontEndCameraManager_SetCamera::NewCamera' has a wrong offset!");

// Function FortniteGame.FortFrontEndCameraManager.GetCamera
// 0x0001 (0x0001 - 0x0000)
struct FortFrontEndCameraManager_GetCamera final
{
public:
	EFrontEndCamera                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndCameraManager_GetCamera) == 0x000001, "Wrong alignment on FortFrontEndCameraManager_GetCamera");
static_assert(sizeof(FortFrontEndCameraManager_GetCamera) == 0x000001, "Wrong size on FortFrontEndCameraManager_GetCamera");
static_assert(offsetof(FortFrontEndCameraManager_GetCamera, ReturnValue) == 0x000000, "Member 'FortFrontEndCameraManager_GetCamera::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortFrontEndCameraManager.GetCameraActor
// 0x0004 (0x0004 - 0x0000)
struct FortFrontEndCameraManager_GetCameraActor final
{
public:
	class AFortCameraBase*                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortFrontEndCameraManager_GetCameraActor) == 0x000004, "Wrong alignment on FortFrontEndCameraManager_GetCameraActor");
static_assert(sizeof(FortFrontEndCameraManager_GetCameraActor) == 0x000004, "Wrong size on FortFrontEndCameraManager_GetCameraActor");
static_assert(offsetof(FortFrontEndCameraManager_GetCameraActor, ReturnValue) == 0x000000, "Member 'FortFrontEndCameraManager_GetCameraActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_DirectedMovement.DirectedMovement
// 0x0028 (0x0028 - 0x0000)
struct FortAbilityTask_DirectedMovement_DirectedMovement final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MovementDirection;                                 // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortDirectedMovementSpace                    MovementSpaceType;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementDistance_0;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementDuration;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdealDistance;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ModifyZ;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCancelOnFalling_0;                                // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_DirectedMovement*      ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_DirectedMovement_DirectedMovement) == 0x000004, "Wrong alignment on FortAbilityTask_DirectedMovement_DirectedMovement");
static_assert(sizeof(FortAbilityTask_DirectedMovement_DirectedMovement) == 0x000028, "Wrong size on FortAbilityTask_DirectedMovement_DirectedMovement");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, WorldContextObject) == 0x000000, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, MovementDirection) == 0x000004, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::MovementDirection' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, MovementSpaceType) == 0x000010, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::MovementSpaceType' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, MovementDistance_0) == 0x000014, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::MovementDistance_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, MovementDuration) == 0x000018, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::MovementDuration' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, IdealDistance) == 0x00001C, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::IdealDistance' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, ModifyZ) == 0x000020, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::ModifyZ' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, bCancelOnFalling_0) == 0x000021, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::bCancelOnFalling_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovement, ReturnValue) == 0x000024, "Member 'FortAbilityTask_DirectedMovement_DirectedMovement::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_DirectedMovement.DirectedMovementToActor
// 0x001C (0x001C - 0x0000)
struct FortAbilityTask_DirectedMovement_DirectedMovementToActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMovementDistance;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementDuration;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdealDistance;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ModifyZ;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCancelOnFalling_0;                                // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_DirectedMovement*      ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_DirectedMovement_DirectedMovementToActor) == 0x000004, "Wrong alignment on FortAbilityTask_DirectedMovement_DirectedMovementToActor");
static_assert(sizeof(FortAbilityTask_DirectedMovement_DirectedMovementToActor) == 0x00001C, "Wrong size on FortAbilityTask_DirectedMovement_DirectedMovementToActor");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, WorldContextObject) == 0x000000, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, TargetActor) == 0x000004, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::TargetActor' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, MaxMovementDistance) == 0x000008, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::MaxMovementDistance' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, MovementDuration) == 0x00000C, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::MovementDuration' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, IdealDistance) == 0x000010, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::IdealDistance' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, ModifyZ) == 0x000014, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::ModifyZ' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, bCancelOnFalling_0) == 0x000015, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::bCancelOnFalling_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToActor, ReturnValue) == 0x000018, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_DirectedMovement.DirectedMovementToComponent
// 0x001C (0x001C - 0x0000)
struct FortAbilityTask_DirectedMovement_DirectedMovementToComponent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TargetComponent_0;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMovementDistance;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementDuration;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdealDistance;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ModifyZ;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCancelOnFalling_0;                                // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_DirectedMovement*      ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent) == 0x000004, "Wrong alignment on FortAbilityTask_DirectedMovement_DirectedMovementToComponent");
static_assert(sizeof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent) == 0x00001C, "Wrong size on FortAbilityTask_DirectedMovement_DirectedMovementToComponent");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, WorldContextObject) == 0x000000, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, TargetComponent_0) == 0x000004, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::TargetComponent_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, MaxMovementDistance) == 0x000008, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::MaxMovementDistance' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, MovementDuration) == 0x00000C, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::MovementDuration' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, IdealDistance) == 0x000010, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::IdealDistance' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, ModifyZ) == 0x000014, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::ModifyZ' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, bCancelOnFalling_0) == 0x000015, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::bCancelOnFalling_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToComponent, ReturnValue) == 0x000018, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_DirectedMovement.DirectedMovementToLocation
// 0x0024 (0x0024 - 0x0000)
struct FortAbilityTask_DirectedMovement_DirectedMovementToLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MovementTargetLocation;                            // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortDirectedMovementSpace                    MovementSpaceType;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementDuration;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseEnoughDistance;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ModifyZ;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCancelOnFalling_0;                                // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_DirectedMovement*      ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation) == 0x000004, "Wrong alignment on FortAbilityTask_DirectedMovement_DirectedMovementToLocation");
static_assert(sizeof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation) == 0x000024, "Wrong size on FortAbilityTask_DirectedMovement_DirectedMovementToLocation");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, WorldContextObject) == 0x000000, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, MovementTargetLocation) == 0x000004, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::MovementTargetLocation' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, MovementSpaceType) == 0x000010, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::MovementSpaceType' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, MovementDuration) == 0x000014, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::MovementDuration' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, CloseEnoughDistance) == 0x000018, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::CloseEnoughDistance' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, ModifyZ) == 0x00001C, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::ModifyZ' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, bCancelOnFalling_0) == 0x00001D, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::bCancelOnFalling_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_DirectedMovement_DirectedMovementToLocation, ReturnValue) == 0x000020, "Member 'FortAbilityTask_DirectedMovement_DirectedMovementToLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_MoveAI.CreateMoveAITask
// 0x002C (0x002C - 0x0000)
struct FortAbilityTask_MoveAI_CreateMoveAITask final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 MoveActor;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveLocation;                                      // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EPawnActionMoveMode                           MoveMode;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPathObstacleAction                           PathObstacleAction;                                // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopAtEnd;                                        // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bFinishOnPlayerCollision;                          // 0x001F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         AcceptableRadius;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortPawn>                  PushBumpedPawnClass;                               // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilityTask_MoveAI*                ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_MoveAI_CreateMoveAITask) == 0x000004, "Wrong alignment on FortAbilityTask_MoveAI_CreateMoveAITask");
static_assert(sizeof(FortAbilityTask_MoveAI_CreateMoveAITask) == 0x00002C, "Wrong size on FortAbilityTask_MoveAI_CreateMoveAITask");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, WorldContextObject) == 0x000000, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, TaskInstanceName) == 0x000004, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, MoveActor) == 0x00000C, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::MoveActor' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, MoveLocation) == 0x000010, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::MoveLocation' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, MoveMode) == 0x00001C, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::MoveMode' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, PathObstacleAction) == 0x00001D, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::PathObstacleAction' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, bStopAtEnd) == 0x00001E, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::bStopAtEnd' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, bFinishOnPlayerCollision) == 0x00001F, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::bFinishOnPlayerCollision' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, AcceptableRadius) == 0x000020, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::AcceptableRadius' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, PushBumpedPawnClass) == 0x000024, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::PushBumpedPawnClass' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_MoveAI_CreateMoveAITask, ReturnValue) == 0x000028, "Member 'FortAbilityTask_MoveAI_CreateMoveAITask::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerManor.ClientOpenManorPortalUnlockMenu
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerManor_ClientOpenManorPortalUnlockMenu final
{
public:
	class AManorPortal*                           ManorPortal;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerManor_ClientOpenManorPortalUnlockMenu) == 0x000004, "Wrong alignment on FortPlayerControllerManor_ClientOpenManorPortalUnlockMenu");
static_assert(sizeof(FortPlayerControllerManor_ClientOpenManorPortalUnlockMenu) == 0x000004, "Wrong size on FortPlayerControllerManor_ClientOpenManorPortalUnlockMenu");
static_assert(offsetof(FortPlayerControllerManor_ClientOpenManorPortalUnlockMenu, ManorPortal) == 0x000000, "Member 'FortPlayerControllerManor_ClientOpenManorPortalUnlockMenu::ManorPortal' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerManor.ServerOnManorChoiceCompleted
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerManor_ServerOnManorChoiceCompleted final
{
public:
	int32                                         ChosenItem;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerManor_ServerOnManorChoiceCompleted) == 0x000004, "Wrong alignment on FortPlayerControllerManor_ServerOnManorChoiceCompleted");
static_assert(sizeof(FortPlayerControllerManor_ServerOnManorChoiceCompleted) == 0x000004, "Wrong size on FortPlayerControllerManor_ServerOnManorChoiceCompleted");
static_assert(offsetof(FortPlayerControllerManor_ServerOnManorChoiceCompleted, ChosenItem) == 0x000000, "Member 'FortPlayerControllerManor_ServerOnManorChoiceCompleted::ChosenItem' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerManor.ServerOnUnlockPortalComplete
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerManor_ServerOnUnlockPortalComplete final
{
public:
	class AManorPortal*                           ManorPortal;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerManor_ServerOnUnlockPortalComplete) == 0x000004, "Wrong alignment on FortPlayerControllerManor_ServerOnUnlockPortalComplete");
static_assert(sizeof(FortPlayerControllerManor_ServerOnUnlockPortalComplete) == 0x000004, "Wrong size on FortPlayerControllerManor_ServerOnUnlockPortalComplete");
static_assert(offsetof(FortPlayerControllerManor_ServerOnUnlockPortalComplete, ManorPortal) == 0x000000, "Member 'FortPlayerControllerManor_ServerOnUnlockPortalComplete::ManorPortal' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_WaitTargetSelection.WaitTargetSelection
// 0x001C (0x001C - 0x0000)
struct FortAbilityTask_WaitTargetSelection_WaitTargetSelection final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InApplicationTag;                                  // 0x000C(0x0008)(Parm, NativeAccessSpecifierPublic)
	bool                                          bForceTargetingOnServer_0;                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_WaitTargetSelection*   ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_WaitTargetSelection_WaitTargetSelection) == 0x000004, "Wrong alignment on FortAbilityTask_WaitTargetSelection_WaitTargetSelection");
static_assert(sizeof(FortAbilityTask_WaitTargetSelection_WaitTargetSelection) == 0x00001C, "Wrong size on FortAbilityTask_WaitTargetSelection_WaitTargetSelection");
static_assert(offsetof(FortAbilityTask_WaitTargetSelection_WaitTargetSelection, WorldContextObject) == 0x000000, "Member 'FortAbilityTask_WaitTargetSelection_WaitTargetSelection::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_WaitTargetSelection_WaitTargetSelection, TaskInstanceName) == 0x000004, "Member 'FortAbilityTask_WaitTargetSelection_WaitTargetSelection::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_WaitTargetSelection_WaitTargetSelection, InApplicationTag) == 0x00000C, "Member 'FortAbilityTask_WaitTargetSelection_WaitTargetSelection::InApplicationTag' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_WaitTargetSelection_WaitTargetSelection, bForceTargetingOnServer_0) == 0x000014, "Member 'FortAbilityTask_WaitTargetSelection_WaitTargetSelection::bForceTargetingOnServer_0' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_WaitTargetSelection_WaitTargetSelection, ReturnValue) == 0x000018, "Member 'FortAbilityTask_WaitTargetSelection_WaitTargetSelection::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_WaitTargetSelection.OnTargetDataReadyCallback
// 0x001C (0x001C - 0x0000)
struct FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0014(0x0008)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback) == 0x000004, "Wrong alignment on FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback");
static_assert(sizeof(FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback) == 0x00001C, "Wrong size on FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback");
static_assert(offsetof(FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback, TargetData) == 0x000000, "Member 'FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback::TargetData' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback, ApplicationTag) == 0x000014, "Member 'FortAbilityTask_WaitTargetSelection_OnTargetDataReadyCallback::ApplicationTag' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_SetNextMontageSectionAndWait.SetNextMontageSectionAndWait
// 0x0014 (0x0014 - 0x0000)
struct FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlayingMontage;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextMontageSection;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilityTask_SetNextMontageSectionAndWait* ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait) == 0x000004, "Wrong alignment on FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait");
static_assert(sizeof(FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait) == 0x000014, "Wrong size on FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait");
static_assert(offsetof(FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait, WorldContextObject) == 0x000000, "Member 'FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait, PlayingMontage) == 0x000004, "Member 'FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait::PlayingMontage' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait, NextMontageSection) == 0x000008, "Member 'FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait::NextMontageSection' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait, ReturnValue) == 0x000010, "Member 'FortAbilityTask_SetNextMontageSectionAndWait_SetNextMontageSectionAndWait::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityTask_SetNextMontageSectionAndWait.OnMontageBlendingOut
// 0x0008 (0x0008 - 0x0000)
struct FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut) == 0x000004, "Wrong alignment on FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut");
static_assert(sizeof(FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut) == 0x000008, "Wrong size on FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut");
static_assert(offsetof(FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut, Montage) == 0x000000, "Member 'FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut, bInterrupted) == 0x000004, "Member 'FortAbilityTask_SetNextMontageSectionAndWait_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.CreateDynamicBuildingDeconstructor
// 0x0020 (0x0020 - 0x0000)
struct FortMissionLibrary_CreateDynamicBuildingDeconstructor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoreMissionActors;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bShrinkAndDestroy;                                 // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_CreateDynamicBuildingDeconstructor) == 0x000004, "Wrong alignment on FortMissionLibrary_CreateDynamicBuildingDeconstructor");
static_assert(sizeof(FortMissionLibrary_CreateDynamicBuildingDeconstructor) == 0x000020, "Wrong size on FortMissionLibrary_CreateDynamicBuildingDeconstructor");
static_assert(offsetof(FortMissionLibrary_CreateDynamicBuildingDeconstructor, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_CreateDynamicBuildingDeconstructor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateDynamicBuildingDeconstructor, Origin) == 0x000004, "Member 'FortMissionLibrary_CreateDynamicBuildingDeconstructor::Origin' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateDynamicBuildingDeconstructor, BoxExtent) == 0x000010, "Member 'FortMissionLibrary_CreateDynamicBuildingDeconstructor::BoxExtent' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateDynamicBuildingDeconstructor, bIgnoreMissionActors) == 0x00001C, "Member 'FortMissionLibrary_CreateDynamicBuildingDeconstructor::bIgnoreMissionActors' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateDynamicBuildingDeconstructor, bShrinkAndDestroy) == 0x00001D, "Member 'FortMissionLibrary_CreateDynamicBuildingDeconstructor::bShrinkAndDestroy' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.CreateMissionEvent
// 0x00E0 (0x00E0 - 0x0000)
struct FortMissionLibrary_CreateMissionEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventType;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x000C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x001C(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UFortMissionEventParams*                Params_0;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DO_NOT_USE_THIS_OR_VARIABLES_BELOW;                // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EventFocus;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             EventContent;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenericInt;                                        // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenericFloat;                                      // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GenericText;                                       // 0x0050(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x005C(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FFortMissionEvent                      ReturnValue;                                       // 0x0074(0x006C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_CreateMissionEvent) == 0x000004, "Wrong alignment on FortMissionLibrary_CreateMissionEvent");
static_assert(sizeof(FortMissionLibrary_CreateMissionEvent) == 0x0000E0, "Wrong size on FortMissionLibrary_CreateMissionEvent");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_CreateMissionEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, EventType) == 0x000004, "Member 'FortMissionLibrary_CreateMissionEvent::EventType' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, MissionGuid) == 0x00000C, "Member 'FortMissionLibrary_CreateMissionEvent::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, ObjectiveHandle) == 0x00001C, "Member 'FortMissionLibrary_CreateMissionEvent::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, Params_0) == 0x000034, "Member 'FortMissionLibrary_CreateMissionEvent::Params_0' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, DO_NOT_USE_THIS_OR_VARIABLES_BELOW) == 0x000038, "Member 'FortMissionLibrary_CreateMissionEvent::DO_NOT_USE_THIS_OR_VARIABLES_BELOW' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, EventFocus) == 0x00003C, "Member 'FortMissionLibrary_CreateMissionEvent::EventFocus' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, EventContent) == 0x000040, "Member 'FortMissionLibrary_CreateMissionEvent::EventContent' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, EventInstigator) == 0x000044, "Member 'FortMissionLibrary_CreateMissionEvent::EventInstigator' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, GenericInt) == 0x000048, "Member 'FortMissionLibrary_CreateMissionEvent::GenericInt' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, GenericFloat) == 0x00004C, "Member 'FortMissionLibrary_CreateMissionEvent::GenericFloat' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, GenericText) == 0x000050, "Member 'FortMissionLibrary_CreateMissionEvent::GenericText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, GameplayTags) == 0x00005C, "Member 'FortMissionLibrary_CreateMissionEvent::GameplayTags' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_CreateMissionEvent, ReturnValue) == 0x000074, "Member 'FortMissionLibrary_CreateMissionEvent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.ExecuteMissionEvent
// 0x0074 (0x0074 - 0x0000)
struct FortMissionLibrary_ExecuteMissionEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventType;                                         // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x000C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x001C(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UFortMissionEventParams*                Params_0;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DO_NOT_USE_THIS_OR_VARIABLES_BELOW;                // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EventFocus;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             EventContent;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenericInt;                                        // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenericFloat;                                      // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GenericText;                                       // 0x0050(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x005C(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_ExecuteMissionEvent) == 0x000004, "Wrong alignment on FortMissionLibrary_ExecuteMissionEvent");
static_assert(sizeof(FortMissionLibrary_ExecuteMissionEvent) == 0x000074, "Wrong size on FortMissionLibrary_ExecuteMissionEvent");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_ExecuteMissionEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, EventType) == 0x000004, "Member 'FortMissionLibrary_ExecuteMissionEvent::EventType' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, MissionGuid) == 0x00000C, "Member 'FortMissionLibrary_ExecuteMissionEvent::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, ObjectiveHandle) == 0x00001C, "Member 'FortMissionLibrary_ExecuteMissionEvent::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, Params_0) == 0x000034, "Member 'FortMissionLibrary_ExecuteMissionEvent::Params_0' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, DO_NOT_USE_THIS_OR_VARIABLES_BELOW) == 0x000038, "Member 'FortMissionLibrary_ExecuteMissionEvent::DO_NOT_USE_THIS_OR_VARIABLES_BELOW' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, EventFocus) == 0x00003C, "Member 'FortMissionLibrary_ExecuteMissionEvent::EventFocus' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, EventContent) == 0x000040, "Member 'FortMissionLibrary_ExecuteMissionEvent::EventContent' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, EventInstigator) == 0x000044, "Member 'FortMissionLibrary_ExecuteMissionEvent::EventInstigator' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, GenericInt) == 0x000048, "Member 'FortMissionLibrary_ExecuteMissionEvent::GenericInt' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, GenericFloat) == 0x00004C, "Member 'FortMissionLibrary_ExecuteMissionEvent::GenericFloat' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, GenericText) == 0x000050, "Member 'FortMissionLibrary_ExecuteMissionEvent::GenericText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEvent, GameplayTags) == 0x00005C, "Member 'FortMissionLibrary_ExecuteMissionEvent::GameplayTags' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.ExecuteMissionEventEx
// 0x007C (0x007C - 0x0000)
struct FortMissionLibrary_ExecuteMissionEventEx final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortMissionEventName                  EventType;                                         // 0x0004(0x0010)(Parm, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0024(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UFortMissionEventParams*                Params_0;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DO_NOT_USE_THIS_OR_VARIABLES_BELOW;                // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EventFocus;                                        // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             EventContent;                                      // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenericInt;                                        // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenericFloat;                                      // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GenericText;                                       // 0x0058(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0064(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_ExecuteMissionEventEx) == 0x000004, "Wrong alignment on FortMissionLibrary_ExecuteMissionEventEx");
static_assert(sizeof(FortMissionLibrary_ExecuteMissionEventEx) == 0x00007C, "Wrong size on FortMissionLibrary_ExecuteMissionEventEx");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_ExecuteMissionEventEx::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, EventType) == 0x000004, "Member 'FortMissionLibrary_ExecuteMissionEventEx::EventType' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, MissionGuid) == 0x000014, "Member 'FortMissionLibrary_ExecuteMissionEventEx::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, ObjectiveHandle) == 0x000024, "Member 'FortMissionLibrary_ExecuteMissionEventEx::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, Params_0) == 0x00003C, "Member 'FortMissionLibrary_ExecuteMissionEventEx::Params_0' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, DO_NOT_USE_THIS_OR_VARIABLES_BELOW) == 0x000040, "Member 'FortMissionLibrary_ExecuteMissionEventEx::DO_NOT_USE_THIS_OR_VARIABLES_BELOW' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, EventFocus) == 0x000044, "Member 'FortMissionLibrary_ExecuteMissionEventEx::EventFocus' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, EventContent) == 0x000048, "Member 'FortMissionLibrary_ExecuteMissionEventEx::EventContent' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, EventInstigator) == 0x00004C, "Member 'FortMissionLibrary_ExecuteMissionEventEx::EventInstigator' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, GenericInt) == 0x000050, "Member 'FortMissionLibrary_ExecuteMissionEventEx::GenericInt' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, GenericFloat) == 0x000054, "Member 'FortMissionLibrary_ExecuteMissionEventEx::GenericFloat' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, GenericText) == 0x000058, "Member 'FortMissionLibrary_ExecuteMissionEventEx::GenericText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_ExecuteMissionEventEx, GameplayTags) == 0x000064, "Member 'FortMissionLibrary_ExecuteMissionEventEx::GameplayTags' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.FindActorsWithTags
// 0x0028 (0x0028 - 0x0000)
struct FortMissionLibrary_FindActorsWithTags final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0004(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class ABuildingActor*>                 ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_FindActorsWithTags) == 0x000004, "Wrong alignment on FortMissionLibrary_FindActorsWithTags");
static_assert(sizeof(FortMissionLibrary_FindActorsWithTags) == 0x000028, "Wrong size on FortMissionLibrary_FindActorsWithTags");
static_assert(offsetof(FortMissionLibrary_FindActorsWithTags, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_FindActorsWithTags::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_FindActorsWithTags, Tags) == 0x000004, "Member 'FortMissionLibrary_FindActorsWithTags::Tags' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_FindActorsWithTags, ReturnValue) == 0x00001C, "Member 'FortMissionLibrary_FindActorsWithTags::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.FindOriginatingPlacementActor
// 0x0008 (0x0008 - 0x0000)
struct FortMissionLibrary_FindOriginatingPlacementActor final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlacementActor*                    ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_FindOriginatingPlacementActor) == 0x000004, "Wrong alignment on FortMissionLibrary_FindOriginatingPlacementActor");
static_assert(sizeof(FortMissionLibrary_FindOriginatingPlacementActor) == 0x000008, "Wrong size on FortMissionLibrary_FindOriginatingPlacementActor");
static_assert(offsetof(FortMissionLibrary_FindOriginatingPlacementActor, BuildingActor) == 0x000000, "Member 'FortMissionLibrary_FindOriginatingPlacementActor::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_FindOriginatingPlacementActor, ReturnValue) == 0x000004, "Member 'FortMissionLibrary_FindOriginatingPlacementActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GetAllLoadedMissions
// 0x0010 (0x0010 - 0x0000)
struct FortMissionLibrary_GetAllLoadedMissions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AFortMission*>                   ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GetAllLoadedMissions) == 0x000004, "Wrong alignment on FortMissionLibrary_GetAllLoadedMissions");
static_assert(sizeof(FortMissionLibrary_GetAllLoadedMissions) == 0x000010, "Wrong size on FortMissionLibrary_GetAllLoadedMissions");
static_assert(offsetof(FortMissionLibrary_GetAllLoadedMissions, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GetAllLoadedMissions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetAllLoadedMissions, ReturnValue) == 0x000004, "Member 'FortMissionLibrary_GetAllLoadedMissions::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GetBluGloManager
// 0x0008 (0x0008 - 0x0000)
struct FortMissionLibrary_GetBluGloManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortBluGloManager*                     ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GetBluGloManager) == 0x000004, "Wrong alignment on FortMissionLibrary_GetBluGloManager");
static_assert(sizeof(FortMissionLibrary_GetBluGloManager) == 0x000008, "Wrong size on FortMissionLibrary_GetBluGloManager");
static_assert(offsetof(FortMissionLibrary_GetBluGloManager, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GetBluGloManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetBluGloManager, ReturnValue) == 0x000004, "Member 'FortMissionLibrary_GetBluGloManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GetMissionFromGuid
// 0x0018 (0x0018 - 0x0000)
struct FortMissionLibrary_GetMissionFromGuid final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortMission*                           ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GetMissionFromGuid) == 0x000004, "Wrong alignment on FortMissionLibrary_GetMissionFromGuid");
static_assert(sizeof(FortMissionLibrary_GetMissionFromGuid) == 0x000018, "Wrong size on FortMissionLibrary_GetMissionFromGuid");
static_assert(offsetof(FortMissionLibrary_GetMissionFromGuid, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GetMissionFromGuid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionFromGuid, MissionGuid) == 0x000004, "Member 'FortMissionLibrary_GetMissionFromGuid::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GetMissionFromGuid, ReturnValue) == 0x000014, "Member 'FortMissionLibrary_GetMissionFromGuid::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GiveMissionRewardsToPlayer
// 0x0040 (0x0040 - 0x0000)
struct FortMissionLibrary_GiveMissionRewardsToPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  EventGuid;                                         // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  PlayerController;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0018(0x000C)(Parm, NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0024(0x000C)(Parm, NativeAccessSpecifierPublic)
	class FName                                   LootTierGroup;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootTier;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RewardDisplayTime;                                 // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GiveMissionRewardsToPlayer) == 0x000004, "Wrong alignment on FortMissionLibrary_GiveMissionRewardsToPlayer");
static_assert(sizeof(FortMissionLibrary_GiveMissionRewardsToPlayer) == 0x000040, "Wrong size on FortMissionLibrary_GiveMissionRewardsToPlayer");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, EventGuid) == 0x000004, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::EventGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, PlayerController) == 0x000014, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, TitleText) == 0x000018, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::TitleText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, DescriptionText) == 0x000024, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::DescriptionText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, LootTierGroup) == 0x000030, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, LootTier) == 0x000038, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::LootTier' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayer, RewardDisplayTime) == 0x00003C, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayer::RewardDisplayTime' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GiveMissionRewardsToPlayerAsPickups
// 0x0034 (0x0034 - 0x0000)
struct FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  PlayerController;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPosition;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LootTierGroup;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootTier;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups) == 0x000004, "Wrong alignment on FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups");
static_assert(sizeof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups) == 0x000034, "Wrong size on FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups, MissionGuid) == 0x000004, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups, PlayerController) == 0x000014, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups, StartPosition) == 0x000018, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups::StartPosition' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups, Radius) == 0x000024, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups::Radius' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups, LootTierGroup) == 0x000028, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups, LootTier) == 0x000030, "Member 'FortMissionLibrary_GiveMissionRewardsToPlayerAsPickups::LootTier' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.GiveMissionSchematicItemDirectlyToPlayer
// 0x0020 (0x0020 - 0x0000)
struct FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  TargetPlayer;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UFortSchematicItemDefinition*           SchematicDefinition;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer) == 0x000004, "Wrong alignment on FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer");
static_assert(sizeof(FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer) == 0x000020, "Wrong size on FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer");
static_assert(offsetof(FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer, TargetPlayer) == 0x000004, "Member 'FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer::TargetPlayer' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer, MissionGuid) == 0x000008, "Member 'FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer, SchematicDefinition) == 0x000018, "Member 'FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer::SchematicDefinition' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer, ReturnValue) == 0x00001C, "Member 'FortMissionLibrary_GiveMissionSchematicItemDirectlyToPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.HasTags
// 0x0034 (0x0034 - 0x0000)
struct FortMissionLibrary_HasTags final
{
public:
	struct FGameplayTagContainer                  ContainerToCheck;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToCheck;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRequireAll;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCountEmptyAsMatch;                                // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0032(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_HasTags) == 0x000004, "Wrong alignment on FortMissionLibrary_HasTags");
static_assert(sizeof(FortMissionLibrary_HasTags) == 0x000034, "Wrong size on FortMissionLibrary_HasTags");
static_assert(offsetof(FortMissionLibrary_HasTags, ContainerToCheck) == 0x000000, "Member 'FortMissionLibrary_HasTags::ContainerToCheck' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_HasTags, TagsToCheck) == 0x000018, "Member 'FortMissionLibrary_HasTags::TagsToCheck' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_HasTags, bRequireAll) == 0x000030, "Member 'FortMissionLibrary_HasTags::bRequireAll' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_HasTags, bCountEmptyAsMatch) == 0x000031, "Member 'FortMissionLibrary_HasTags::bCountEmptyAsMatch' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_HasTags, ReturnValue) == 0x000032, "Member 'FortMissionLibrary_HasTags::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.IsUsingNewMissionGeneration
// 0x0008 (0x0008 - 0x0000)
struct FortMissionLibrary_IsUsingNewMissionGeneration final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_IsUsingNewMissionGeneration) == 0x000004, "Wrong alignment on FortMissionLibrary_IsUsingNewMissionGeneration");
static_assert(sizeof(FortMissionLibrary_IsUsingNewMissionGeneration) == 0x000008, "Wrong size on FortMissionLibrary_IsUsingNewMissionGeneration");
static_assert(offsetof(FortMissionLibrary_IsUsingNewMissionGeneration, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_IsUsingNewMissionGeneration::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_IsUsingNewMissionGeneration, ReturnValue) == 0x000004, "Member 'FortMissionLibrary_IsUsingNewMissionGeneration::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.LoadMission
// 0x0008 (0x0008 - 0x0000)
struct FortMissionLibrary_LoadMission final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionInfo*                       MissionInfo;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_LoadMission) == 0x000004, "Wrong alignment on FortMissionLibrary_LoadMission");
static_assert(sizeof(FortMissionLibrary_LoadMission) == 0x000008, "Wrong size on FortMissionLibrary_LoadMission");
static_assert(offsetof(FortMissionLibrary_LoadMission, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_LoadMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_LoadMission, MissionInfo) == 0x000004, "Member 'FortMissionLibrary_LoadMission::MissionInfo' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.NumBluGloFromPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct FortMissionLibrary_NumBluGloFromPlayerPawn final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_NumBluGloFromPlayerPawn) == 0x000004, "Wrong alignment on FortMissionLibrary_NumBluGloFromPlayerPawn");
static_assert(sizeof(FortMissionLibrary_NumBluGloFromPlayerPawn) == 0x000008, "Wrong size on FortMissionLibrary_NumBluGloFromPlayerPawn");
static_assert(offsetof(FortMissionLibrary_NumBluGloFromPlayerPawn, PlayerPawn) == 0x000000, "Member 'FortMissionLibrary_NumBluGloFromPlayerPawn::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_NumBluGloFromPlayerPawn, ReturnValue) == 0x000004, "Member 'FortMissionLibrary_NumBluGloFromPlayerPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.NumBluGloFromPlayerState
// 0x0008 (0x0008 - 0x0000)
struct FortMissionLibrary_NumBluGloFromPlayerState final
{
public:
	class AFortPlayerStateZone*                   PlayerState;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_NumBluGloFromPlayerState) == 0x000004, "Wrong alignment on FortMissionLibrary_NumBluGloFromPlayerState");
static_assert(sizeof(FortMissionLibrary_NumBluGloFromPlayerState) == 0x000008, "Wrong size on FortMissionLibrary_NumBluGloFromPlayerState");
static_assert(offsetof(FortMissionLibrary_NumBluGloFromPlayerState, PlayerState) == 0x000000, "Member 'FortMissionLibrary_NumBluGloFromPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_NumBluGloFromPlayerState, ReturnValue) == 0x000004, "Member 'FortMissionLibrary_NumBluGloFromPlayerState::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.PingMinimap
// 0x0020 (0x0020 - 0x0000)
struct FortMissionLibrary_PingMinimap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           PingColor;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_PingMinimap) == 0x000004, "Wrong alignment on FortMissionLibrary_PingMinimap");
static_assert(sizeof(FortMissionLibrary_PingMinimap) == 0x000020, "Wrong size on FortMissionLibrary_PingMinimap");
static_assert(offsetof(FortMissionLibrary_PingMinimap, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_PingMinimap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_PingMinimap, WorldLocation) == 0x000004, "Member 'FortMissionLibrary_PingMinimap::WorldLocation' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_PingMinimap, PingColor) == 0x000010, "Member 'FortMissionLibrary_PingMinimap::PingColor' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.PollActorsInVolume
// 0x0014 (0x0014 - 0x0000)
struct FortMissionLibrary_PollActorsInVolume final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          VolumeBoxComponent;                                // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPollActorsInVolumeTypes                      PollBuildingTypes;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     ActorClassToPoll;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_PollActorsInVolume) == 0x000004, "Wrong alignment on FortMissionLibrary_PollActorsInVolume");
static_assert(sizeof(FortMissionLibrary_PollActorsInVolume) == 0x000014, "Wrong size on FortMissionLibrary_PollActorsInVolume");
static_assert(offsetof(FortMissionLibrary_PollActorsInVolume, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_PollActorsInVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_PollActorsInVolume, VolumeBoxComponent) == 0x000004, "Member 'FortMissionLibrary_PollActorsInVolume::VolumeBoxComponent' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_PollActorsInVolume, PollBuildingTypes) == 0x000008, "Member 'FortMissionLibrary_PollActorsInVolume::PollBuildingTypes' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_PollActorsInVolume, ActorClassToPoll) == 0x00000C, "Member 'FortMissionLibrary_PollActorsInVolume::ActorClassToPoll' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_PollActorsInVolume, ReturnValue) == 0x000010, "Member 'FortMissionLibrary_PollActorsInVolume::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.RegisterForMissionEvents
// 0x0018 (0x0018 - 0x0000)
struct FortMissionLibrary_RegisterForMissionEvents final
{
public:
	class AActor*                                 ActorToRegister;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_RegisterForMissionEvents) == 0x000004, "Wrong alignment on FortMissionLibrary_RegisterForMissionEvents");
static_assert(sizeof(FortMissionLibrary_RegisterForMissionEvents) == 0x000018, "Wrong size on FortMissionLibrary_RegisterForMissionEvents");
static_assert(offsetof(FortMissionLibrary_RegisterForMissionEvents, ActorToRegister) == 0x000000, "Member 'FortMissionLibrary_RegisterForMissionEvents::ActorToRegister' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_RegisterForMissionEvents, MissionGuid) == 0x000004, "Member 'FortMissionLibrary_RegisterForMissionEvents::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_RegisterForMissionEvents, ReturnValue) == 0x000014, "Member 'FortMissionLibrary_RegisterForMissionEvents::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.RegisterMissionInfoUIActor
// 0x0024 (0x0024 - 0x0000)
struct FortMissionLibrary_RegisterMissionInfoUIActor final
{
public:
	class AActor*                                 AttachmentActor;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AttachementOffset;                                 // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxVisibleDistance;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_RegisterMissionInfoUIActor) == 0x000004, "Wrong alignment on FortMissionLibrary_RegisterMissionInfoUIActor");
static_assert(sizeof(FortMissionLibrary_RegisterMissionInfoUIActor) == 0x000024, "Wrong size on FortMissionLibrary_RegisterMissionInfoUIActor");
static_assert(offsetof(FortMissionLibrary_RegisterMissionInfoUIActor, AttachmentActor) == 0x000000, "Member 'FortMissionLibrary_RegisterMissionInfoUIActor::AttachmentActor' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_RegisterMissionInfoUIActor, MissionGuid) == 0x000004, "Member 'FortMissionLibrary_RegisterMissionInfoUIActor::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_RegisterMissionInfoUIActor, AttachementOffset) == 0x000014, "Member 'FortMissionLibrary_RegisterMissionInfoUIActor::AttachementOffset' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_RegisterMissionInfoUIActor, MaxVisibleDistance) == 0x000020, "Member 'FortMissionLibrary_RegisterMissionInfoUIActor::MaxVisibleDistance' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.SetOnlinePresenceDoNotDisturb
// 0x000C (0x000C - 0x0000)
struct FortMissionLibrary_SetOnlinePresenceDoNotDisturb final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoNotDisturb;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  SpecificPlayer;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_SetOnlinePresenceDoNotDisturb) == 0x000004, "Wrong alignment on FortMissionLibrary_SetOnlinePresenceDoNotDisturb");
static_assert(sizeof(FortMissionLibrary_SetOnlinePresenceDoNotDisturb) == 0x00000C, "Wrong size on FortMissionLibrary_SetOnlinePresenceDoNotDisturb");
static_assert(offsetof(FortMissionLibrary_SetOnlinePresenceDoNotDisturb, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_SetOnlinePresenceDoNotDisturb::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SetOnlinePresenceDoNotDisturb, bDoNotDisturb) == 0x000004, "Member 'FortMissionLibrary_SetOnlinePresenceDoNotDisturb::bDoNotDisturb' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SetOnlinePresenceDoNotDisturb, SpecificPlayer) == 0x000008, "Member 'FortMissionLibrary_SetOnlinePresenceDoNotDisturb::SpecificPlayer' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.ShouldUseAlternateAIDirectorBalance
// 0x0001 (0x0001 - 0x0000)
struct FortMissionLibrary_ShouldUseAlternateAIDirectorBalance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_ShouldUseAlternateAIDirectorBalance) == 0x000001, "Wrong alignment on FortMissionLibrary_ShouldUseAlternateAIDirectorBalance");
static_assert(sizeof(FortMissionLibrary_ShouldUseAlternateAIDirectorBalance) == 0x000001, "Wrong size on FortMissionLibrary_ShouldUseAlternateAIDirectorBalance");
static_assert(offsetof(FortMissionLibrary_ShouldUseAlternateAIDirectorBalance, ReturnValue) == 0x000000, "Member 'FortMissionLibrary_ShouldUseAlternateAIDirectorBalance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.SpawnAtPlacementActorsHelper
// 0x0018 (0x0018 - 0x0000)
struct FortMissionLibrary_SpawnAtPlacementActorsHelper final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 Entries;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSucceeded;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_SpawnAtPlacementActorsHelper) == 0x000004, "Wrong alignment on FortMissionLibrary_SpawnAtPlacementActorsHelper");
static_assert(sizeof(FortMissionLibrary_SpawnAtPlacementActorsHelper) == 0x000018, "Wrong size on FortMissionLibrary_SpawnAtPlacementActorsHelper");
static_assert(offsetof(FortMissionLibrary_SpawnAtPlacementActorsHelper, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_SpawnAtPlacementActorsHelper::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnAtPlacementActorsHelper, Entries) == 0x000004, "Member 'FortMissionLibrary_SpawnAtPlacementActorsHelper::Entries' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnAtPlacementActorsHelper, bSucceeded) == 0x000008, "Member 'FortMissionLibrary_SpawnAtPlacementActorsHelper::bSucceeded' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnAtPlacementActorsHelper, ReturnValue) == 0x00000C, "Member 'FortMissionLibrary_SpawnAtPlacementActorsHelper::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.SpawnBuildingActorAtTransform
// 0x0060 (0x0060 - 0x0000)
struct FortMissionLibrary_SpawnBuildingActorAtTransform final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingActor>             BuildingClass;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ABuildingActor*                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0xC];                                       // 0x0054(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_SpawnBuildingActorAtTransform) == 0x000010, "Wrong alignment on FortMissionLibrary_SpawnBuildingActorAtTransform");
static_assert(sizeof(FortMissionLibrary_SpawnBuildingActorAtTransform) == 0x000060, "Wrong size on FortMissionLibrary_SpawnBuildingActorAtTransform");
static_assert(offsetof(FortMissionLibrary_SpawnBuildingActorAtTransform, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_SpawnBuildingActorAtTransform::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnBuildingActorAtTransform, MissionGuid) == 0x000004, "Member 'FortMissionLibrary_SpawnBuildingActorAtTransform::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnBuildingActorAtTransform, BuildingClass) == 0x000014, "Member 'FortMissionLibrary_SpawnBuildingActorAtTransform::BuildingClass' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnBuildingActorAtTransform, Transform) == 0x000020, "Member 'FortMissionLibrary_SpawnBuildingActorAtTransform::Transform' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnBuildingActorAtTransform, ReturnValue) == 0x000050, "Member 'FortMissionLibrary_SpawnBuildingActorAtTransform::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.SpawnMissionItemPickup
// 0x002C (0x002C - 0x0000)
struct FortMissionLibrary_SpawnMissionItemPickup final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UFortMissionItemDefinition*             MissionItemDefinition;                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPosition;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortPawn*                              TargetPawn;                                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPickup*                            ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_SpawnMissionItemPickup) == 0x000004, "Wrong alignment on FortMissionLibrary_SpawnMissionItemPickup");
static_assert(sizeof(FortMissionLibrary_SpawnMissionItemPickup) == 0x00002C, "Wrong size on FortMissionLibrary_SpawnMissionItemPickup");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickup, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_SpawnMissionItemPickup::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickup, MissionGuid) == 0x000004, "Member 'FortMissionLibrary_SpawnMissionItemPickup::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickup, MissionItemDefinition) == 0x000014, "Member 'FortMissionLibrary_SpawnMissionItemPickup::MissionItemDefinition' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickup, StartPosition) == 0x000018, "Member 'FortMissionLibrary_SpawnMissionItemPickup::StartPosition' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickup, TargetPawn) == 0x000024, "Member 'FortMissionLibrary_SpawnMissionItemPickup::TargetPawn' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickup, ReturnValue) == 0x000028, "Member 'FortMissionLibrary_SpawnMissionItemPickup::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.SpawnMissionItemPickupInWorld
// 0x003C (0x003C - 0x0000)
struct FortMissionLibrary_SpawnMissionItemPickupInWorld final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToSpawn;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OverrideMaxStackCount;                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPickup*                            ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_SpawnMissionItemPickupInWorld) == 0x000004, "Wrong alignment on FortMissionLibrary_SpawnMissionItemPickupInWorld");
static_assert(sizeof(FortMissionLibrary_SpawnMissionItemPickupInWorld) == 0x00003C, "Wrong size on FortMissionLibrary_SpawnMissionItemPickupInWorld");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, MissionGuid) == 0x000004, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, ItemDefinition) == 0x000014, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, NumberToSpawn) == 0x000018, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::NumberToSpawn' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, Position) == 0x00001C, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::Position' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, Direction) == 0x000028, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::Direction' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, OverrideMaxStackCount) == 0x000034, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::OverrideMaxStackCount' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_SpawnMissionItemPickupInWorld, ReturnValue) == 0x000038, "Member 'FortMissionLibrary_SpawnMissionItemPickupInWorld::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.StartAIEncounter
// 0x0068 (0x0068 - 0x0000)
struct FortMissionLibrary_StartAIEncounter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssociatedMissionName;                             // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAIEncounterInfo>       EncounterTemplate;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InjectedTags;                                      // 0x0018(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 EncounterSettings;                                 // 0x0030(0x0030)(Parm, NativeAccessSpecifierPublic)
	int32                                         ActivationDelay;                                   // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0064(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_StartAIEncounter) == 0x000004, "Wrong alignment on FortMissionLibrary_StartAIEncounter");
static_assert(sizeof(FortMissionLibrary_StartAIEncounter) == 0x000068, "Wrong size on FortMissionLibrary_StartAIEncounter");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_StartAIEncounter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, AssociatedMissionName) == 0x000004, "Member 'FortMissionLibrary_StartAIEncounter::AssociatedMissionName' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, EncounterTemplate) == 0x000010, "Member 'FortMissionLibrary_StartAIEncounter::EncounterTemplate' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, TargetActor) == 0x000014, "Member 'FortMissionLibrary_StartAIEncounter::TargetActor' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, InjectedTags) == 0x000018, "Member 'FortMissionLibrary_StartAIEncounter::InjectedTags' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, EncounterSettings) == 0x000030, "Member 'FortMissionLibrary_StartAIEncounter::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, ActivationDelay) == 0x000060, "Member 'FortMissionLibrary_StartAIEncounter::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounter, ReturnValue) == 0x000064, "Member 'FortMissionLibrary_StartAIEncounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.StartAIEncounterWithEnvironmentQuery
// 0x0088 (0x0088 - 0x0000)
struct FortMissionLibrary_StartAIEncounterWithEnvironmentQuery final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AssociatedMissionName;                             // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAIEncounterInfo>       EncounterTemplate;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         EnvironmentQueryInfo;                              // 0x0018(0x001C)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 QueryActor;                                        // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InjectedTags;                                      // 0x0038(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 EncounterSettings;                                 // 0x0050(0x0030)(Parm, NativeAccessSpecifierPublic)
	int32                                         ActivationDelay;                                   // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0084(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery) == 0x000004, "Wrong alignment on FortMissionLibrary_StartAIEncounterWithEnvironmentQuery");
static_assert(sizeof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery) == 0x000088, "Wrong size on FortMissionLibrary_StartAIEncounterWithEnvironmentQuery");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, AssociatedMissionName) == 0x000004, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::AssociatedMissionName' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, EncounterTemplate) == 0x000010, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::EncounterTemplate' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, TargetActor) == 0x000014, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::TargetActor' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, EnvironmentQueryInfo) == 0x000018, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::EnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, QueryActor) == 0x000034, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::QueryActor' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, InjectedTags) == 0x000038, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::InjectedTags' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, EncounterSettings) == 0x000050, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, ActivationDelay) == 0x000080, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartAIEncounterWithEnvironmentQuery, ReturnValue) == 0x000084, "Member 'FortMissionLibrary_StartAIEncounterWithEnvironmentQuery::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.StartNotification
// 0x0054 (0x0054 - 0x0000)
struct FortMissionLibrary_StartNotification final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0004(0x0014)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortClientNotification>    Notification;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  SpecificPlayer;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OverrideTitleText;                                 // 0x0020(0x000C)(Parm, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FText                                   OverrideDisplayText;                               // 0x002C(0x000C)(Parm, NativeAccessSpecifierPublic)
	float                                         OverrideDisplayTime;                               // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        OptionalPlayerPawn1;                               // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        OptionalPlayerPawn2;                               // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OptionalActionName;                                // 0x0044(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USoundBase*                       OptionalSound;                                     // 0x004C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaySoundAsFeedback;                              // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTreatAsUnique;                                    // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCancelActiveNotification;                         // 0x0052(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bWaitForClients;                                   // 0x0053(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_StartNotification) == 0x000004, "Wrong alignment on FortMissionLibrary_StartNotification");
static_assert(sizeof(FortMissionLibrary_StartNotification) == 0x000054, "Wrong size on FortMissionLibrary_StartNotification");
static_assert(offsetof(FortMissionLibrary_StartNotification, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_StartNotification::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartNotification, LatentInfo) == 0x000004, "Member 'FortMissionLibrary_StartNotification::LatentInfo' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartNotification, Notification) == 0x000018, "Member 'FortMissionLibrary_StartNotification::Notification' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartNotification, SpecificPlayer) == 0x00001C, "Member 'FortMissionLibrary_StartNotification::SpecificPlayer' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartNotification, OverrideTitleText) == 0x000020, "Member 'FortMissionLibrary_StartNotification::OverrideTitleText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartNotification, OverrideDisplayText) == 0x00002C, "Member 'FortMissionLibrary_StartNotification::OverrideDisplayText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartNotification, OverrideDisplayTime) == 0x000038, "Member 'FortMissionLibrary_StartNotification::OverrideDisplayTime' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartNotification, OptionalPlayerPawn1) == 0x00003C, "Member 'FortMissionLibrary_StartNotification::OptionalPlayerPawn1' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartNotification, OptionalPlayerPawn2) == 0x000040, "Member 'FortMissionLibrary_StartNotification::OptionalPlayerPawn2' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartNotification, OptionalActionName) == 0x000044, "Member 'FortMissionLibrary_StartNotification::OptionalActionName' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartNotification, OptionalSound) == 0x00004C, "Member 'FortMissionLibrary_StartNotification::OptionalSound' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartNotification, bPlaySoundAsFeedback) == 0x000050, "Member 'FortMissionLibrary_StartNotification::bPlaySoundAsFeedback' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartNotification, bTreatAsUnique) == 0x000051, "Member 'FortMissionLibrary_StartNotification::bTreatAsUnique' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartNotification, bCancelActiveNotification) == 0x000052, "Member 'FortMissionLibrary_StartNotification::bCancelActiveNotification' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartNotification, bWaitForClients) == 0x000053, "Member 'FortMissionLibrary_StartNotification::bWaitForClients' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.StartPlayingMission
// 0x0050 (0x0050 - 0x0000)
struct FortMissionLibrary_StartPlayingMission final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UFortMissionEventParams*                Params_0;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             EventContent;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenericInt;                                        // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenericFloat;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GenericText;                                       // 0x002C(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0038(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_StartPlayingMission) == 0x000004, "Wrong alignment on FortMissionLibrary_StartPlayingMission");
static_assert(sizeof(FortMissionLibrary_StartPlayingMission) == 0x000050, "Wrong size on FortMissionLibrary_StartPlayingMission");
static_assert(offsetof(FortMissionLibrary_StartPlayingMission, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_StartPlayingMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartPlayingMission, MissionGuid) == 0x000004, "Member 'FortMissionLibrary_StartPlayingMission::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartPlayingMission, Params_0) == 0x000014, "Member 'FortMissionLibrary_StartPlayingMission::Params_0' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartPlayingMission, EventFocus) == 0x000018, "Member 'FortMissionLibrary_StartPlayingMission::EventFocus' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartPlayingMission, EventContent) == 0x00001C, "Member 'FortMissionLibrary_StartPlayingMission::EventContent' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartPlayingMission, EventInstigator) == 0x000020, "Member 'FortMissionLibrary_StartPlayingMission::EventInstigator' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartPlayingMission, GenericInt) == 0x000024, "Member 'FortMissionLibrary_StartPlayingMission::GenericInt' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartPlayingMission, GenericFloat) == 0x000028, "Member 'FortMissionLibrary_StartPlayingMission::GenericFloat' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartPlayingMission, GenericText) == 0x00002C, "Member 'FortMissionLibrary_StartPlayingMission::GenericText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartPlayingMission, GameplayTags) == 0x000038, "Member 'FortMissionLibrary_StartPlayingMission::GameplayTags' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.StartTutorialNotification
// 0x007C (0x007C - 0x0000)
struct FortMissionLibrary_StartTutorialNotification final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0004(0x0014)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortClientNotification>    Notification;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  SpecificPlayer;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        OptionalPlayerPawn1;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        OptionalPlayerPawn2;                               // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OverrideTitleText;                                 // 0x0028(0x000C)(Parm, NativeAccessSpecifierPublic)
	class FText                                   OverrideDisplayText;                               // 0x0034(0x000C)(Parm, NativeAccessSpecifierPublic)
	class FText                                   OverrideSystemText;                                // 0x0040(0x000C)(Parm, NativeAccessSpecifierPublic)
	class FText                                   OverrideNameText;                                  // 0x004C(0x000C)(Parm, NativeAccessSpecifierPublic)
	float                                         OverrideDisplayTime;                               // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideButtonEnabled;                            // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideLightboxEnabled;                          // 0x005D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideLightboxDisableInputOnly;                 // 0x005E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EVerticalAlignment                            OverrideVAlign;                                    // 0x005F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          OverrideHAlign;                                    // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                OverridePadding;                                   // 0x0064(0x0010)(Parm, NativeAccessSpecifierPublic)
	const class USoundBase*                       OptionalSound;                                     // 0x0074(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitForClients;                                   // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_StartTutorialNotification) == 0x000004, "Wrong alignment on FortMissionLibrary_StartTutorialNotification");
static_assert(sizeof(FortMissionLibrary_StartTutorialNotification) == 0x00007C, "Wrong size on FortMissionLibrary_StartTutorialNotification");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_StartTutorialNotification::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, LatentInfo) == 0x000004, "Member 'FortMissionLibrary_StartTutorialNotification::LatentInfo' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, Notification) == 0x000018, "Member 'FortMissionLibrary_StartTutorialNotification::Notification' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, SpecificPlayer) == 0x00001C, "Member 'FortMissionLibrary_StartTutorialNotification::SpecificPlayer' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, OptionalPlayerPawn1) == 0x000020, "Member 'FortMissionLibrary_StartTutorialNotification::OptionalPlayerPawn1' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, OptionalPlayerPawn2) == 0x000024, "Member 'FortMissionLibrary_StartTutorialNotification::OptionalPlayerPawn2' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, OverrideTitleText) == 0x000028, "Member 'FortMissionLibrary_StartTutorialNotification::OverrideTitleText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, OverrideDisplayText) == 0x000034, "Member 'FortMissionLibrary_StartTutorialNotification::OverrideDisplayText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, OverrideSystemText) == 0x000040, "Member 'FortMissionLibrary_StartTutorialNotification::OverrideSystemText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, OverrideNameText) == 0x00004C, "Member 'FortMissionLibrary_StartTutorialNotification::OverrideNameText' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, OverrideDisplayTime) == 0x000058, "Member 'FortMissionLibrary_StartTutorialNotification::OverrideDisplayTime' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, bOverrideButtonEnabled) == 0x00005C, "Member 'FortMissionLibrary_StartTutorialNotification::bOverrideButtonEnabled' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, bOverrideLightboxEnabled) == 0x00005D, "Member 'FortMissionLibrary_StartTutorialNotification::bOverrideLightboxEnabled' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, bOverrideLightboxDisableInputOnly) == 0x00005E, "Member 'FortMissionLibrary_StartTutorialNotification::bOverrideLightboxDisableInputOnly' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, OverrideVAlign) == 0x00005F, "Member 'FortMissionLibrary_StartTutorialNotification::OverrideVAlign' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, OverrideHAlign) == 0x000060, "Member 'FortMissionLibrary_StartTutorialNotification::OverrideHAlign' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, OverridePadding) == 0x000064, "Member 'FortMissionLibrary_StartTutorialNotification::OverridePadding' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, OptionalSound) == 0x000074, "Member 'FortMissionLibrary_StartTutorialNotification::OptionalSound' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StartTutorialNotification, bWaitForClients) == 0x000078, "Member 'FortMissionLibrary_StartTutorialNotification::bWaitForClients' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.StopAIEncounter
// 0x0008 (0x0008 - 0x0000)
struct FortMissionLibrary_StopAIEncounter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   ActiveEncounter;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_StopAIEncounter) == 0x000004, "Wrong alignment on FortMissionLibrary_StopAIEncounter");
static_assert(sizeof(FortMissionLibrary_StopAIEncounter) == 0x000008, "Wrong size on FortMissionLibrary_StopAIEncounter");
static_assert(offsetof(FortMissionLibrary_StopAIEncounter, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_StopAIEncounter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StopAIEncounter, ActiveEncounter) == 0x000004, "Member 'FortMissionLibrary_StopAIEncounter::ActiveEncounter' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.StopAIEncounterAgainstActor
// 0x0008 (0x0008 - 0x0000)
struct FortMissionLibrary_StopAIEncounterAgainstActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_StopAIEncounterAgainstActor) == 0x000004, "Wrong alignment on FortMissionLibrary_StopAIEncounterAgainstActor");
static_assert(sizeof(FortMissionLibrary_StopAIEncounterAgainstActor) == 0x000008, "Wrong size on FortMissionLibrary_StopAIEncounterAgainstActor");
static_assert(offsetof(FortMissionLibrary_StopAIEncounterAgainstActor, WorldContextObject) == 0x000000, "Member 'FortMissionLibrary_StopAIEncounterAgainstActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_StopAIEncounterAgainstActor, TargetActor) == 0x000004, "Member 'FortMissionLibrary_StopAIEncounterAgainstActor::TargetActor' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.TeleportPawnNearLocation
// 0x0010 (0x0010 - 0x0000)
struct FortMissionLibrary_TeleportPawnNearLocation final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestLocation;                                      // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_TeleportPawnNearLocation) == 0x000004, "Wrong alignment on FortMissionLibrary_TeleportPawnNearLocation");
static_assert(sizeof(FortMissionLibrary_TeleportPawnNearLocation) == 0x000010, "Wrong size on FortMissionLibrary_TeleportPawnNearLocation");
static_assert(offsetof(FortMissionLibrary_TeleportPawnNearLocation, Pawn) == 0x000000, "Member 'FortMissionLibrary_TeleportPawnNearLocation::Pawn' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_TeleportPawnNearLocation, DestLocation) == 0x000004, "Member 'FortMissionLibrary_TeleportPawnNearLocation::DestLocation' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.TeleportPlayerPawn
// 0x001C (0x001C - 0x0000)
struct FortMissionLibrary_TeleportPlayerPawn final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestLocation;                                      // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               DestRotation;                                      // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionLibrary_TeleportPlayerPawn) == 0x000004, "Wrong alignment on FortMissionLibrary_TeleportPlayerPawn");
static_assert(sizeof(FortMissionLibrary_TeleportPlayerPawn) == 0x00001C, "Wrong size on FortMissionLibrary_TeleportPlayerPawn");
static_assert(offsetof(FortMissionLibrary_TeleportPlayerPawn, PlayerPawn) == 0x000000, "Member 'FortMissionLibrary_TeleportPlayerPawn::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_TeleportPlayerPawn, DestLocation) == 0x000004, "Member 'FortMissionLibrary_TeleportPlayerPawn::DestLocation' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_TeleportPlayerPawn, DestRotation) == 0x000010, "Member 'FortMissionLibrary_TeleportPlayerPawn::DestRotation' has a wrong offset!");

// Function FortniteGame.FortMissionLibrary.UnregisterForMissionEvents
// 0x0018 (0x0018 - 0x0000)
struct FortMissionLibrary_UnregisterForMissionEvents final
{
public:
	class AActor*                                 ActorToUnregister;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMissionLibrary_UnregisterForMissionEvents) == 0x000004, "Wrong alignment on FortMissionLibrary_UnregisterForMissionEvents");
static_assert(sizeof(FortMissionLibrary_UnregisterForMissionEvents) == 0x000018, "Wrong size on FortMissionLibrary_UnregisterForMissionEvents");
static_assert(offsetof(FortMissionLibrary_UnregisterForMissionEvents, ActorToUnregister) == 0x000000, "Member 'FortMissionLibrary_UnregisterForMissionEvents::ActorToUnregister' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_UnregisterForMissionEvents, MissionGuid) == 0x000004, "Member 'FortMissionLibrary_UnregisterForMissionEvents::MissionGuid' has a wrong offset!");
static_assert(offsetof(FortMissionLibrary_UnregisterForMissionEvents, ReturnValue) == 0x000014, "Member 'FortMissionLibrary_UnregisterForMissionEvents::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIController.IsIgnoringProximity
// 0x0008 (0x0008 - 0x0000)
struct FortAIController_IsIgnoringProximity final
{
public:
	class AFortAIController*                      FortAIController;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIController_IsIgnoringProximity) == 0x000004, "Wrong alignment on FortAIController_IsIgnoringProximity");
static_assert(sizeof(FortAIController_IsIgnoringProximity) == 0x000008, "Wrong size on FortAIController_IsIgnoringProximity");
static_assert(offsetof(FortAIController_IsIgnoringProximity, FortAIController) == 0x000000, "Member 'FortAIController_IsIgnoringProximity::FortAIController' has a wrong offset!");
static_assert(offsetof(FortAIController_IsIgnoringProximity, ReturnValue) == 0x000004, "Member 'FortAIController_IsIgnoringProximity::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIController.CreateBuildingActor
// 0x0020 (0x0020 - 0x0000)
struct FortAIController_CreateBuildingActor final
{
public:
	TSubclassOf<class ABuildingSMActor>           BuildingClass;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BuildLoc;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               BuildRot;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIController_CreateBuildingActor) == 0x000004, "Wrong alignment on FortAIController_CreateBuildingActor");
static_assert(sizeof(FortAIController_CreateBuildingActor) == 0x000020, "Wrong size on FortAIController_CreateBuildingActor");
static_assert(offsetof(FortAIController_CreateBuildingActor, BuildingClass) == 0x000000, "Member 'FortAIController_CreateBuildingActor::BuildingClass' has a wrong offset!");
static_assert(offsetof(FortAIController_CreateBuildingActor, BuildLoc) == 0x000004, "Member 'FortAIController_CreateBuildingActor::BuildLoc' has a wrong offset!");
static_assert(offsetof(FortAIController_CreateBuildingActor, BuildRot) == 0x000010, "Member 'FortAIController_CreateBuildingActor::BuildRot' has a wrong offset!");
static_assert(offsetof(FortAIController_CreateBuildingActor, bMirrored) == 0x00001C, "Member 'FortAIController_CreateBuildingActor::bMirrored' has a wrong offset!");
static_assert(offsetof(FortAIController_CreateBuildingActor, ReturnValue) == 0x00001D, "Member 'FortAIController_CreateBuildingActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIController.GetBestKnownActorLocation
// 0x0014 (0x0014 - 0x0000)
struct FortAIController_GetBestKnownActorLocation final
{
public:
	class AActor*                                 ActorInQuestion;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastStimulusAge;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_GetBestKnownActorLocation) == 0x000004, "Wrong alignment on FortAIController_GetBestKnownActorLocation");
static_assert(sizeof(FortAIController_GetBestKnownActorLocation) == 0x000014, "Wrong size on FortAIController_GetBestKnownActorLocation");
static_assert(offsetof(FortAIController_GetBestKnownActorLocation, ActorInQuestion) == 0x000000, "Member 'FortAIController_GetBestKnownActorLocation::ActorInQuestion' has a wrong offset!");
static_assert(offsetof(FortAIController_GetBestKnownActorLocation, LastStimulusAge) == 0x000004, "Member 'FortAIController_GetBestKnownActorLocation::LastStimulusAge' has a wrong offset!");
static_assert(offsetof(FortAIController_GetBestKnownActorLocation, ReturnValue) == 0x000008, "Member 'FortAIController_GetBestKnownActorLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIController.GetClosestSupportingBuildingActor
// 0x0008 (0x0008 - 0x0000)
struct FortAIController_GetClosestSupportingBuildingActor final
{
public:
	class ABuildingSMActor*                       BuildingSMActor;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingSMActor*                       ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_GetClosestSupportingBuildingActor) == 0x000004, "Wrong alignment on FortAIController_GetClosestSupportingBuildingActor");
static_assert(sizeof(FortAIController_GetClosestSupportingBuildingActor) == 0x000008, "Wrong size on FortAIController_GetClosestSupportingBuildingActor");
static_assert(offsetof(FortAIController_GetClosestSupportingBuildingActor, BuildingSMActor) == 0x000000, "Member 'FortAIController_GetClosestSupportingBuildingActor::BuildingSMActor' has a wrong offset!");
static_assert(offsetof(FortAIController_GetClosestSupportingBuildingActor, ReturnValue) == 0x000004, "Member 'FortAIController_GetClosestSupportingBuildingActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIController.GetTargetActor
// 0x0004 (0x0004 - 0x0000)
struct FortAIController_GetTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_GetTargetActor) == 0x000004, "Wrong alignment on FortAIController_GetTargetActor");
static_assert(sizeof(FortAIController_GetTargetActor) == 0x000004, "Wrong size on FortAIController_GetTargetActor");
static_assert(offsetof(FortAIController_GetTargetActor, ReturnValue) == 0x000000, "Member 'FortAIController_GetTargetActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIController.IgnoreProximityForDuration
// 0x0004 (0x0004 - 0x0000)
struct FortAIController_IgnoreProximityForDuration final
{
public:
	float                                         DurationToIgnore;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_IgnoreProximityForDuration) == 0x000004, "Wrong alignment on FortAIController_IgnoreProximityForDuration");
static_assert(sizeof(FortAIController_IgnoreProximityForDuration) == 0x000004, "Wrong size on FortAIController_IgnoreProximityForDuration");
static_assert(offsetof(FortAIController_IgnoreProximityForDuration, DurationToIgnore) == 0x000000, "Member 'FortAIController_IgnoreProximityForDuration::DurationToIgnore' has a wrong offset!");

// Function FortniteGame.FortAIController.IsAllowedToSleep
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_IsAllowedToSleep final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_IsAllowedToSleep) == 0x000001, "Wrong alignment on FortAIController_IsAllowedToSleep");
static_assert(sizeof(FortAIController_IsAllowedToSleep) == 0x000001, "Wrong size on FortAIController_IsAllowedToSleep");
static_assert(offsetof(FortAIController_IsAllowedToSleep, ReturnValue) == 0x000000, "Member 'FortAIController_IsAllowedToSleep::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIController.SendAnimNotification
// 0x000C (0x000C - 0x0000)
struct FortAIController_SendAnimNotification final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SendAnimNotification) == 0x000004, "Wrong alignment on FortAIController_SendAnimNotification");
static_assert(sizeof(FortAIController_SendAnimNotification) == 0x00000C, "Wrong size on FortAIController_SendAnimNotification");
static_assert(offsetof(FortAIController_SendAnimNotification, EventName) == 0x000000, "Member 'FortAIController_SendAnimNotification::EventName' has a wrong offset!");

// Function FortniteGame.FortAIController.SetAlwaysGameplayRelevant
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_SetAlwaysGameplayRelevant final
{
public:
	bool                                          bInAlwaysGameplayRelevant;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetAlwaysGameplayRelevant) == 0x000001, "Wrong alignment on FortAIController_SetAlwaysGameplayRelevant");
static_assert(sizeof(FortAIController_SetAlwaysGameplayRelevant) == 0x000001, "Wrong size on FortAIController_SetAlwaysGameplayRelevant");
static_assert(offsetof(FortAIController_SetAlwaysGameplayRelevant, bInAlwaysGameplayRelevant) == 0x000000, "Member 'FortAIController_SetAlwaysGameplayRelevant::bInAlwaysGameplayRelevant' has a wrong offset!");

// Function FortniteGame.FortAIController.SetGoalActor
// 0x0008 (0x0008 - 0x0000)
struct FortAIController_SetGoalActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocationAlwaysKnown;                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIController_SetGoalActor) == 0x000004, "Wrong alignment on FortAIController_SetGoalActor");
static_assert(sizeof(FortAIController_SetGoalActor) == 0x000008, "Wrong size on FortAIController_SetGoalActor");
static_assert(offsetof(FortAIController_SetGoalActor, InActor) == 0x000000, "Member 'FortAIController_SetGoalActor::InActor' has a wrong offset!");
static_assert(offsetof(FortAIController_SetGoalActor, bLocationAlwaysKnown) == 0x000004, "Member 'FortAIController_SetGoalActor::bLocationAlwaysKnown' has a wrong offset!");

// Function FortniteGame.FortAIController.SetIsSleeping
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_SetIsSleeping final
{
public:
	bool                                          bNewSleepStatus;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetIsSleeping) == 0x000001, "Wrong alignment on FortAIController_SetIsSleeping");
static_assert(sizeof(FortAIController_SetIsSleeping) == 0x000001, "Wrong size on FortAIController_SetIsSleeping");
static_assert(offsetof(FortAIController_SetIsSleeping, bNewSleepStatus) == 0x000000, "Member 'FortAIController_SetIsSleeping::bNewSleepStatus' has a wrong offset!");

// Function FortniteGame.FortAIController.SetPawnAIType
// 0x0008 (0x0008 - 0x0000)
struct FortAIController_SetPawnAIType final
{
public:
	EFortressAIType                               NewAIType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpawnSpot;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetPawnAIType) == 0x000004, "Wrong alignment on FortAIController_SetPawnAIType");
static_assert(sizeof(FortAIController_SetPawnAIType) == 0x000008, "Wrong size on FortAIController_SetPawnAIType");
static_assert(offsetof(FortAIController_SetPawnAIType, NewAIType) == 0x000000, "Member 'FortAIController_SetPawnAIType::NewAIType' has a wrong offset!");
static_assert(offsetof(FortAIController_SetPawnAIType, SpawnSpot) == 0x000004, "Member 'FortAIController_SetPawnAIType::SpawnSpot' has a wrong offset!");

// Function FortniteGame.FortAIController.SetTeam
// 0x0001 (0x0001 - 0x0000)
struct FortAIController_SetTeam final
{
public:
	EFortTeam                                     InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetTeam) == 0x000001, "Wrong alignment on FortAIController_SetTeam");
static_assert(sizeof(FortAIController_SetTeam) == 0x000001, "Wrong size on FortAIController_SetTeam");
static_assert(offsetof(FortAIController_SetTeam, InTeam) == 0x000000, "Member 'FortAIController_SetTeam::InTeam' has a wrong offset!");

// Function FortniteGame.FortAIController.SetupCustomVIM
// 0x0004 (0x0004 - 0x0000)
struct FortAIController_SetupCustomVIM final
{
public:
	class UClass*                                 VIM;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_SetupCustomVIM) == 0x000004, "Wrong alignment on FortAIController_SetupCustomVIM");
static_assert(sizeof(FortAIController_SetupCustomVIM) == 0x000004, "Wrong size on FortAIController_SetupCustomVIM");
static_assert(offsetof(FortAIController_SetupCustomVIM, VIM) == 0x000000, "Member 'FortAIController_SetupCustomVIM::VIM' has a wrong offset!");

// Function FortniteGame.FortAIController.GetGoalActor
// 0x0004 (0x0004 - 0x0000)
struct FortAIController_GetGoalActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIController_GetGoalActor) == 0x000004, "Wrong alignment on FortAIController_GetGoalActor");
static_assert(sizeof(FortAIController_GetGoalActor) == 0x000004, "Wrong size on FortAIController_GetGoalActor");
static_assert(offsetof(FortAIController_GetGoalActor, ReturnValue) == 0x000000, "Member 'FortAIController_GetGoalActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.AbortDisintegration
// 0x0018 (0x0018 - 0x0000)
struct FortMcpProfileWorld_AbortDisintegration final
{
public:
	struct FDedicatedServerUrlContext             Context;                                           // 0x0000(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_AbortDisintegration) == 0x000004, "Wrong alignment on FortMcpProfileWorld_AbortDisintegration");
static_assert(sizeof(FortMcpProfileWorld_AbortDisintegration) == 0x000018, "Wrong size on FortMcpProfileWorld_AbortDisintegration");
static_assert(offsetof(FortMcpProfileWorld_AbortDisintegration, Context) == 0x000000, "Member 'FortMcpProfileWorld_AbortDisintegration::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.BatchUpdateInventory
// 0x0058 (0x0058 - 0x0000)
struct FortMcpProfileWorld_BatchUpdateInventory final
{
public:
	struct FMcpProfileChangeRequest               BatchUpdate;                                       // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0040(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_BatchUpdateInventory) == 0x000004, "Wrong alignment on FortMcpProfileWorld_BatchUpdateInventory");
static_assert(sizeof(FortMcpProfileWorld_BatchUpdateInventory) == 0x000058, "Wrong size on FortMcpProfileWorld_BatchUpdateInventory");
static_assert(offsetof(FortMcpProfileWorld_BatchUpdateInventory, BatchUpdate) == 0x000000, "Member 'FortMcpProfileWorld_BatchUpdateInventory::BatchUpdate' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_BatchUpdateInventory, Context) == 0x000040, "Member 'FortMcpProfileWorld_BatchUpdateInventory::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.CreateOrUpgradeOutpostItem
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileWorld_CreateOrUpgradeOutpostItem final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_CreateOrUpgradeOutpostItem) == 0x000004, "Wrong alignment on FortMcpProfileWorld_CreateOrUpgradeOutpostItem");
static_assert(sizeof(FortMcpProfileWorld_CreateOrUpgradeOutpostItem) == 0x000024, "Wrong size on FortMcpProfileWorld_CreateOrUpgradeOutpostItem");
static_assert(offsetof(FortMcpProfileWorld_CreateOrUpgradeOutpostItem, TemplateId) == 0x000000, "Member 'FortMcpProfileWorld_CreateOrUpgradeOutpostItem::TemplateId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_CreateOrUpgradeOutpostItem, Context) == 0x00000C, "Member 'FortMcpProfileWorld_CreateOrUpgradeOutpostItem::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.DepositPostResources
// 0x0030 (0x0030 - 0x0000)
struct FortMcpProfileWorld_DepositPostResources final
{
public:
	TArray<class FString>                         itemsToDepositIds;                                 // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 itemCountsToDeposit;                               // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0018(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_DepositPostResources) == 0x000004, "Wrong alignment on FortMcpProfileWorld_DepositPostResources");
static_assert(sizeof(FortMcpProfileWorld_DepositPostResources) == 0x000030, "Wrong size on FortMcpProfileWorld_DepositPostResources");
static_assert(offsetof(FortMcpProfileWorld_DepositPostResources, itemsToDepositIds) == 0x000000, "Member 'FortMcpProfileWorld_DepositPostResources::itemsToDepositIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_DepositPostResources, itemCountsToDeposit) == 0x00000C, "Member 'FortMcpProfileWorld_DepositPostResources::itemCountsToDeposit' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_DepositPostResources, Context) == 0x000018, "Member 'FortMcpProfileWorld_DepositPostResources::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.DisintegrateItems
// 0x0030 (0x0030 - 0x0000)
struct FortMcpProfileWorld_DisintegrateItems final
{
public:
	TArray<class FString>                         itemsToDisintegrateIds;                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 itemCountsToDisintegrate;                          // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x0018(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_DisintegrateItems) == 0x000004, "Wrong alignment on FortMcpProfileWorld_DisintegrateItems");
static_assert(sizeof(FortMcpProfileWorld_DisintegrateItems) == 0x000030, "Wrong size on FortMcpProfileWorld_DisintegrateItems");
static_assert(offsetof(FortMcpProfileWorld_DisintegrateItems, itemsToDisintegrateIds) == 0x000000, "Member 'FortMcpProfileWorld_DisintegrateItems::itemsToDisintegrateIds' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_DisintegrateItems, itemCountsToDisintegrate) == 0x00000C, "Member 'FortMcpProfileWorld_DisintegrateItems::itemCountsToDisintegrate' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_DisintegrateItems, Context) == 0x000018, "Member 'FortMcpProfileWorld_DisintegrateItems::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.FabricateItem
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileWorld_FabricateItem final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_FabricateItem) == 0x000004, "Wrong alignment on FortMcpProfileWorld_FabricateItem");
static_assert(sizeof(FortMcpProfileWorld_FabricateItem) == 0x000024, "Wrong size on FortMcpProfileWorld_FabricateItem");
static_assert(offsetof(FortMcpProfileWorld_FabricateItem, TemplateId) == 0x000000, "Member 'FortMcpProfileWorld_FabricateItem::TemplateId' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_FabricateItem, Context) == 0x00000C, "Member 'FortMcpProfileWorld_FabricateItem::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.IncreaseOutpostPrestige
// 0x0018 (0x0018 - 0x0000)
struct FortMcpProfileWorld_IncreaseOutpostPrestige final
{
public:
	struct FDedicatedServerUrlContext             Context;                                           // 0x0000(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_IncreaseOutpostPrestige) == 0x000004, "Wrong alignment on FortMcpProfileWorld_IncreaseOutpostPrestige");
static_assert(sizeof(FortMcpProfileWorld_IncreaseOutpostPrestige) == 0x000018, "Wrong size on FortMcpProfileWorld_IncreaseOutpostPrestige");
static_assert(offsetof(FortMcpProfileWorld_IncreaseOutpostPrestige, Context) == 0x000000, "Member 'FortMcpProfileWorld_IncreaseOutpostPrestige::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.InitializeTheater
// 0x0024 (0x0024 - 0x0000)
struct FortMcpProfileWorld_InitializeTheater final
{
public:
	class FString                                 TheaterGuid;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDedicatedServerUrlContext             Context;                                           // 0x000C(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_InitializeTheater) == 0x000004, "Wrong alignment on FortMcpProfileWorld_InitializeTheater");
static_assert(sizeof(FortMcpProfileWorld_InitializeTheater) == 0x000024, "Wrong size on FortMcpProfileWorld_InitializeTheater");
static_assert(offsetof(FortMcpProfileWorld_InitializeTheater, TheaterGuid) == 0x000000, "Member 'FortMcpProfileWorld_InitializeTheater::TheaterGuid' has a wrong offset!");
static_assert(offsetof(FortMcpProfileWorld_InitializeTheater, Context) == 0x00000C, "Member 'FortMcpProfileWorld_InitializeTheater::Context' has a wrong offset!");

// Function FortniteGame.FortMcpProfileWorld.MarkOutpostDefended
// 0x0018 (0x0018 - 0x0000)
struct FortMcpProfileWorld_MarkOutpostDefended final
{
public:
	struct FDedicatedServerUrlContext             Context;                                           // 0x0000(0x0018)(Parm, OutParm, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMcpProfileWorld_MarkOutpostDefended) == 0x000004, "Wrong alignment on FortMcpProfileWorld_MarkOutpostDefended");
static_assert(sizeof(FortMcpProfileWorld_MarkOutpostDefended) == 0x000018, "Wrong size on FortMcpProfileWorld_MarkOutpostDefended");
static_assert(offsetof(FortMcpProfileWorld_MarkOutpostDefended, Context) == 0x000000, "Member 'FortMcpProfileWorld_MarkOutpostDefended::Context' has a wrong offset!");

// Function FortniteGame.FortMission.SpawnAtPlacementActorsAsArray
// 0x0014 (0x0014 - 0x0000)
struct FortMission_SpawnAtPlacementActorsAsArray final
{
public:
	class AFortMission*                           Mission;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSucceeded;                                        // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_SpawnAtPlacementActorsAsArray) == 0x000004, "Wrong alignment on FortMission_SpawnAtPlacementActorsAsArray");
static_assert(sizeof(FortMission_SpawnAtPlacementActorsAsArray) == 0x000014, "Wrong size on FortMission_SpawnAtPlacementActorsAsArray");
static_assert(offsetof(FortMission_SpawnAtPlacementActorsAsArray, Mission) == 0x000000, "Member 'FortMission_SpawnAtPlacementActorsAsArray::Mission' has a wrong offset!");
static_assert(offsetof(FortMission_SpawnAtPlacementActorsAsArray, bSucceeded) == 0x000004, "Member 'FortMission_SpawnAtPlacementActorsAsArray::bSucceeded' has a wrong offset!");
static_assert(offsetof(FortMission_SpawnAtPlacementActorsAsArray, ReturnValue) == 0x000008, "Member 'FortMission_SpawnAtPlacementActorsAsArray::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.AddGoalsToAssignment
// 0x0010 (0x0010 - 0x0000)
struct FortMission_AddGoalsToAssignment final
{
public:
	class UFortAIAssignment*                      Assignment;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAIGoalInfo>                GoalInfos;                                         // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_AddGoalsToAssignment) == 0x000004, "Wrong alignment on FortMission_AddGoalsToAssignment");
static_assert(sizeof(FortMission_AddGoalsToAssignment) == 0x000010, "Wrong size on FortMission_AddGoalsToAssignment");
static_assert(offsetof(FortMission_AddGoalsToAssignment, Assignment) == 0x000000, "Member 'FortMission_AddGoalsToAssignment::Assignment' has a wrong offset!");
static_assert(offsetof(FortMission_AddGoalsToAssignment, GoalInfos) == 0x000004, "Member 'FortMission_AddGoalsToAssignment::GoalInfos' has a wrong offset!");

// Function FortniteGame.FortMission.AddGoalsToEncounterAssignment
// 0x0030 (0x0030 - 0x0000)
struct FortMission_AddGoalsToEncounterAssignment final
{
public:
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	const class UFortAIEncounterInfo*             Encounter;                                         // 0x0020(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAIGoalInfo>                GoalInfos;                                         // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_AddGoalsToEncounterAssignment) == 0x000004, "Wrong alignment on FortMission_AddGoalsToEncounterAssignment");
static_assert(sizeof(FortMission_AddGoalsToEncounterAssignment) == 0x000030, "Wrong size on FortMission_AddGoalsToEncounterAssignment");
static_assert(offsetof(FortMission_AddGoalsToEncounterAssignment, AssignmentIdentifier) == 0x000000, "Member 'FortMission_AddGoalsToEncounterAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortMission_AddGoalsToEncounterAssignment, Encounter) == 0x000020, "Member 'FortMission_AddGoalsToEncounterAssignment::Encounter' has a wrong offset!");
static_assert(offsetof(FortMission_AddGoalsToEncounterAssignment, GoalInfos) == 0x000024, "Member 'FortMission_AddGoalsToEncounterAssignment::GoalInfos' has a wrong offset!");

// Function FortniteGame.FortMission.AddGoalToAssignment
// 0x001C (0x001C - 0x0000)
struct FortMission_AddGoalToAssignment final
{
public:
	class UFortAIAssignment*                      Assignment;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIGoalInfo                        GoalInfo;                                          // 0x0004(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_AddGoalToAssignment) == 0x000004, "Wrong alignment on FortMission_AddGoalToAssignment");
static_assert(sizeof(FortMission_AddGoalToAssignment) == 0x00001C, "Wrong size on FortMission_AddGoalToAssignment");
static_assert(offsetof(FortMission_AddGoalToAssignment, Assignment) == 0x000000, "Member 'FortMission_AddGoalToAssignment::Assignment' has a wrong offset!");
static_assert(offsetof(FortMission_AddGoalToAssignment, GoalInfo) == 0x000004, "Member 'FortMission_AddGoalToAssignment::GoalInfo' has a wrong offset!");

// Function FortniteGame.FortMission.AddGoalToEncounterAssignment
// 0x003C (0x003C - 0x0000)
struct FortMission_AddGoalToEncounterAssignment final
{
public:
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	const class UFortAIEncounterInfo*             Encounter;                                         // 0x0020(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIGoalInfo                        GoalInfo;                                          // 0x0024(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_AddGoalToEncounterAssignment) == 0x000004, "Wrong alignment on FortMission_AddGoalToEncounterAssignment");
static_assert(sizeof(FortMission_AddGoalToEncounterAssignment) == 0x00003C, "Wrong size on FortMission_AddGoalToEncounterAssignment");
static_assert(offsetof(FortMission_AddGoalToEncounterAssignment, AssignmentIdentifier) == 0x000000, "Member 'FortMission_AddGoalToEncounterAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortMission_AddGoalToEncounterAssignment, Encounter) == 0x000020, "Member 'FortMission_AddGoalToEncounterAssignment::Encounter' has a wrong offset!");
static_assert(offsetof(FortMission_AddGoalToEncounterAssignment, GoalInfo) == 0x000024, "Member 'FortMission_AddGoalToEncounterAssignment::GoalInfo' has a wrong offset!");

// Function FortniteGame.FortMission.AttemptMissionSave
// 0x000C (0x000C - 0x0000)
struct FortMission_AttemptMissionSave final
{
public:
	class FString                                 OptionalSaveName;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_AttemptMissionSave) == 0x000004, "Wrong alignment on FortMission_AttemptMissionSave");
static_assert(sizeof(FortMission_AttemptMissionSave) == 0x00000C, "Wrong size on FortMission_AttemptMissionSave");
static_assert(offsetof(FortMission_AttemptMissionSave, OptionalSaveName) == 0x000000, "Member 'FortMission_AttemptMissionSave::OptionalSaveName' has a wrong offset!");

// Function FortniteGame.FortMission.BlueprintCustomHandleMissionEvent
// 0x00D4 (0x00D4 - 0x0000)
struct FortMission_BlueprintCustomHandleMissionEvent final
{
public:
	struct FGuid                                  MissionGuid_0;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	class UFortMissionEventParams*                Params_0;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DO_NOT_USE_THIS_OR_VARIABLES_BELOW;                // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EventFocus;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDataAsset*                       EventContent;                                      // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenericInt;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenericFloat;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GenericText;                                       // 0x0044(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0050(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FFortMissionEvent                      MissionEvent;                                      // 0x0068(0x006C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_BlueprintCustomHandleMissionEvent) == 0x000004, "Wrong alignment on FortMission_BlueprintCustomHandleMissionEvent");
static_assert(sizeof(FortMission_BlueprintCustomHandleMissionEvent) == 0x0000D4, "Wrong size on FortMission_BlueprintCustomHandleMissionEvent");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, MissionGuid_0) == 0x000000, "Member 'FortMission_BlueprintCustomHandleMissionEvent::MissionGuid_0' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, ObjectiveHandle) == 0x000010, "Member 'FortMission_BlueprintCustomHandleMissionEvent::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, Params_0) == 0x000028, "Member 'FortMission_BlueprintCustomHandleMissionEvent::Params_0' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, DO_NOT_USE_THIS_OR_VARIABLES_BELOW) == 0x00002C, "Member 'FortMission_BlueprintCustomHandleMissionEvent::DO_NOT_USE_THIS_OR_VARIABLES_BELOW' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, EventFocus) == 0x000030, "Member 'FortMission_BlueprintCustomHandleMissionEvent::EventFocus' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, EventContent) == 0x000034, "Member 'FortMission_BlueprintCustomHandleMissionEvent::EventContent' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, EventInstigator) == 0x000038, "Member 'FortMission_BlueprintCustomHandleMissionEvent::EventInstigator' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, GenericInt) == 0x00003C, "Member 'FortMission_BlueprintCustomHandleMissionEvent::GenericInt' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, GenericFloat) == 0x000040, "Member 'FortMission_BlueprintCustomHandleMissionEvent::GenericFloat' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, GenericText) == 0x000044, "Member 'FortMission_BlueprintCustomHandleMissionEvent::GenericText' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, GameplayTags) == 0x000050, "Member 'FortMission_BlueprintCustomHandleMissionEvent::GameplayTags' has a wrong offset!");
static_assert(offsetof(FortMission_BlueprintCustomHandleMissionEvent, MissionEvent) == 0x000068, "Member 'FortMission_BlueprintCustomHandleMissionEvent::MissionEvent' has a wrong offset!");

// Function FortniteGame.FortMission.BlueprintHandleMissionEventNoReply
// 0x006C (0x006C - 0x0000)
struct FortMission_BlueprintHandleMissionEventNoReply final
{
public:
	struct FFortMissionEvent                      MissionEvent;                                      // 0x0000(0x006C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_BlueprintHandleMissionEventNoReply) == 0x000004, "Wrong alignment on FortMission_BlueprintHandleMissionEventNoReply");
static_assert(sizeof(FortMission_BlueprintHandleMissionEventNoReply) == 0x00006C, "Wrong size on FortMission_BlueprintHandleMissionEventNoReply");
static_assert(offsetof(FortMission_BlueprintHandleMissionEventNoReply, MissionEvent) == 0x000000, "Member 'FortMission_BlueprintHandleMissionEventNoReply::MissionEvent' has a wrong offset!");

// Function FortniteGame.FortMission.BlueprintOnActivated
// 0x006C (0x006C - 0x0000)
struct FortMission_BlueprintOnActivated final
{
public:
	struct FFortMissionEvent                      MissionEvent;                                      // 0x0000(0x006C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_BlueprintOnActivated) == 0x000004, "Wrong alignment on FortMission_BlueprintOnActivated");
static_assert(sizeof(FortMission_BlueprintOnActivated) == 0x00006C, "Wrong size on FortMission_BlueprintOnActivated");
static_assert(offsetof(FortMission_BlueprintOnActivated, MissionEvent) == 0x000000, "Member 'FortMission_BlueprintOnActivated::MissionEvent' has a wrong offset!");

// Function FortniteGame.FortMission.BlueprintOnMissionEnd
// 0x0001 (0x0001 - 0x0000)
struct FortMission_BlueprintOnMissionEnd final
{
public:
	EFortMissionStatus                            Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_BlueprintOnMissionEnd) == 0x000001, "Wrong alignment on FortMission_BlueprintOnMissionEnd");
static_assert(sizeof(FortMission_BlueprintOnMissionEnd) == 0x000001, "Wrong size on FortMission_BlueprintOnMissionEnd");
static_assert(offsetof(FortMission_BlueprintOnMissionEnd, Status) == 0x000000, "Member 'FortMission_BlueprintOnMissionEnd::Status' has a wrong offset!");

// Function FortniteGame.FortMission.BlueprintOnStartPlaying
// 0x006C (0x006C - 0x0000)
struct FortMission_BlueprintOnStartPlaying final
{
public:
	struct FFortMissionEvent                      MissionEvent;                                      // 0x0000(0x006C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_BlueprintOnStartPlaying) == 0x000004, "Wrong alignment on FortMission_BlueprintOnStartPlaying");
static_assert(sizeof(FortMission_BlueprintOnStartPlaying) == 0x00006C, "Wrong size on FortMission_BlueprintOnStartPlaying");
static_assert(offsetof(FortMission_BlueprintOnStartPlaying, MissionEvent) == 0x000000, "Member 'FortMission_BlueprintOnStartPlaying::MissionEvent' has a wrong offset!");

// Function FortniteGame.FortMission.ChooseRandomReward
// 0x0080 (0x0080 - 0x0000)
struct FortMission_ChooseRandomReward final
{
public:
	struct FFortMissionWeightedReward             ReturnValue;                                       // 0x0000(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_ChooseRandomReward) == 0x000004, "Wrong alignment on FortMission_ChooseRandomReward");
static_assert(sizeof(FortMission_ChooseRandomReward) == 0x000080, "Wrong size on FortMission_ChooseRandomReward");
static_assert(offsetof(FortMission_ChooseRandomReward, ReturnValue) == 0x000000, "Member 'FortMission_ChooseRandomReward::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.CreateEncounterAssignment
// 0x0048 (0x0048 - 0x0000)
struct FortMission_CreateEncounterAssignment final
{
public:
	struct FGameplayTagContainer                  AssignmentTags;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortAIEncounterInfo*             Encounter;                                         // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAIGoalProvider>        GoalProvider;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0024(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	EAssignmentCreationResult                     ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_CreateEncounterAssignment) == 0x000004, "Wrong alignment on FortMission_CreateEncounterAssignment");
static_assert(sizeof(FortMission_CreateEncounterAssignment) == 0x000048, "Wrong size on FortMission_CreateEncounterAssignment");
static_assert(offsetof(FortMission_CreateEncounterAssignment, AssignmentTags) == 0x000000, "Member 'FortMission_CreateEncounterAssignment::AssignmentTags' has a wrong offset!");
static_assert(offsetof(FortMission_CreateEncounterAssignment, Encounter) == 0x000018, "Member 'FortMission_CreateEncounterAssignment::Encounter' has a wrong offset!");
static_assert(offsetof(FortMission_CreateEncounterAssignment, AssignmentSettings) == 0x00001C, "Member 'FortMission_CreateEncounterAssignment::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortMission_CreateEncounterAssignment, GoalProvider) == 0x000020, "Member 'FortMission_CreateEncounterAssignment::GoalProvider' has a wrong offset!");
static_assert(offsetof(FortMission_CreateEncounterAssignment, AssignmentIdentifier) == 0x000024, "Member 'FortMission_CreateEncounterAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortMission_CreateEncounterAssignment, ReturnValue) == 0x000044, "Member 'FortMission_CreateEncounterAssignment::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.CreateEncounterSequence
// 0x001C (0x001C - 0x0000)
struct FortMission_CreateEncounterSequence final
{
public:
	struct FGameplayTagContainer                  SequenceTags;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAIEncounterSequence*               ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_CreateEncounterSequence) == 0x000004, "Wrong alignment on FortMission_CreateEncounterSequence");
static_assert(sizeof(FortMission_CreateEncounterSequence) == 0x00001C, "Wrong size on FortMission_CreateEncounterSequence");
static_assert(offsetof(FortMission_CreateEncounterSequence, SequenceTags) == 0x000000, "Member 'FortMission_CreateEncounterSequence::SequenceTags' has a wrong offset!");
static_assert(offsetof(FortMission_CreateEncounterSequence, ReturnValue) == 0x000018, "Member 'FortMission_CreateEncounterSequence::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.FindGoalLocationsForEncounterAssignment
// 0x0030 (0x0030 - 0x0000)
struct FortMission_FindGoalLocationsForEncounterAssignment final
{
public:
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortAIEncounterInfo*             Encounter;                                         // 0x0020(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutGoalLocations;                                  // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_FindGoalLocationsForEncounterAssignment) == 0x000004, "Wrong alignment on FortMission_FindGoalLocationsForEncounterAssignment");
static_assert(sizeof(FortMission_FindGoalLocationsForEncounterAssignment) == 0x000030, "Wrong size on FortMission_FindGoalLocationsForEncounterAssignment");
static_assert(offsetof(FortMission_FindGoalLocationsForEncounterAssignment, AssignmentIdentifier) == 0x000000, "Member 'FortMission_FindGoalLocationsForEncounterAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortMission_FindGoalLocationsForEncounterAssignment, Encounter) == 0x000020, "Member 'FortMission_FindGoalLocationsForEncounterAssignment::Encounter' has a wrong offset!");
static_assert(offsetof(FortMission_FindGoalLocationsForEncounterAssignment, OutGoalLocations) == 0x000024, "Member 'FortMission_FindGoalLocationsForEncounterAssignment::OutGoalLocations' has a wrong offset!");

// Function FortniteGame.FortMission.FocusThisMission
// 0x0001 (0x0001 - 0x0000)
struct FortMission_FocusThisMission final
{
public:
	bool                                          bTemporaryFocus;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_FocusThisMission) == 0x000001, "Wrong alignment on FortMission_FocusThisMission");
static_assert(sizeof(FortMission_FocusThisMission) == 0x000001, "Wrong size on FortMission_FocusThisMission");
static_assert(offsetof(FortMission_FocusThisMission, bTemporaryFocus) == 0x000000, "Member 'FortMission_FocusThisMission::bTemporaryFocus' has a wrong offset!");

// Function FortniteGame.FortMission.GetConfigData
// 0x000C (0x000C - 0x0000)
struct FortMission_GetConfigData final
{
public:
	struct FGameplayTag                           InBucketTag;                                       // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	class UFortMissionConfigData*                 ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetConfigData) == 0x000004, "Wrong alignment on FortMission_GetConfigData");
static_assert(sizeof(FortMission_GetConfigData) == 0x00000C, "Wrong size on FortMission_GetConfigData");
static_assert(offsetof(FortMission_GetConfigData, InBucketTag) == 0x000000, "Member 'FortMission_GetConfigData::InBucketTag' has a wrong offset!");
static_assert(offsetof(FortMission_GetConfigData, ReturnValue) == 0x000008, "Member 'FortMission_GetConfigData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GrantRewardsByTag
// 0x000C (0x000C - 0x0000)
struct FortMission_GrantRewardsByTag final
{
public:
	struct FGameplayTag                           RewardTag;                                         // 0x0000(0x0008)(ConstParm, Parm, NativeAccessSpecifierPublic)
	EFortRewardType                               RewardType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_GrantRewardsByTag) == 0x000004, "Wrong alignment on FortMission_GrantRewardsByTag");
static_assert(sizeof(FortMission_GrantRewardsByTag) == 0x00000C, "Wrong size on FortMission_GrantRewardsByTag");
static_assert(offsetof(FortMission_GrantRewardsByTag, RewardTag) == 0x000000, "Member 'FortMission_GrantRewardsByTag::RewardTag' has a wrong offset!");
static_assert(offsetof(FortMission_GrantRewardsByTag, RewardType) == 0x000008, "Member 'FortMission_GrantRewardsByTag::RewardType' has a wrong offset!");

// Function FortniteGame.FortMission.RemoveEncounterAssignment
// 0x0024 (0x0024 - 0x0000)
struct FortMission_RemoveEncounterAssignment final
{
public:
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	const class UFortAIEncounterInfo*             Encounter;                                         // 0x0020(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_RemoveEncounterAssignment) == 0x000004, "Wrong alignment on FortMission_RemoveEncounterAssignment");
static_assert(sizeof(FortMission_RemoveEncounterAssignment) == 0x000024, "Wrong size on FortMission_RemoveEncounterAssignment");
static_assert(offsetof(FortMission_RemoveEncounterAssignment, AssignmentIdentifier) == 0x000000, "Member 'FortMission_RemoveEncounterAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortMission_RemoveEncounterAssignment, Encounter) == 0x000020, "Member 'FortMission_RemoveEncounterAssignment::Encounter' has a wrong offset!");

// Function FortniteGame.FortMission.RemoveGoalFromEncounterAssignment
// 0x003C (0x003C - 0x0000)
struct FortMission_RemoveGoalFromEncounterAssignment final
{
public:
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	const class UFortAIEncounterInfo*             Encounter;                                         // 0x0020(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAIGoalInfo                        GoalInfo;                                          // 0x0024(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_RemoveGoalFromEncounterAssignment) == 0x000004, "Wrong alignment on FortMission_RemoveGoalFromEncounterAssignment");
static_assert(sizeof(FortMission_RemoveGoalFromEncounterAssignment) == 0x00003C, "Wrong size on FortMission_RemoveGoalFromEncounterAssignment");
static_assert(offsetof(FortMission_RemoveGoalFromEncounterAssignment, AssignmentIdentifier) == 0x000000, "Member 'FortMission_RemoveGoalFromEncounterAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortMission_RemoveGoalFromEncounterAssignment, Encounter) == 0x000020, "Member 'FortMission_RemoveGoalFromEncounterAssignment::Encounter' has a wrong offset!");
static_assert(offsetof(FortMission_RemoveGoalFromEncounterAssignment, GoalInfo) == 0x000024, "Member 'FortMission_RemoveGoalFromEncounterAssignment::GoalInfo' has a wrong offset!");

// Function FortniteGame.FortMission.RemoveGoalsFromEncounterAssignment
// 0x0030 (0x0030 - 0x0000)
struct FortMission_RemoveGoalsFromEncounterAssignment final
{
public:
	struct FFortAIAssignmentIdentifier            AssignmentIdentifier;                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	const class UFortAIEncounterInfo*             Encounter;                                         // 0x0020(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAIGoalInfo>                GoalInfos;                                         // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_RemoveGoalsFromEncounterAssignment) == 0x000004, "Wrong alignment on FortMission_RemoveGoalsFromEncounterAssignment");
static_assert(sizeof(FortMission_RemoveGoalsFromEncounterAssignment) == 0x000030, "Wrong size on FortMission_RemoveGoalsFromEncounterAssignment");
static_assert(offsetof(FortMission_RemoveGoalsFromEncounterAssignment, AssignmentIdentifier) == 0x000000, "Member 'FortMission_RemoveGoalsFromEncounterAssignment::AssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(FortMission_RemoveGoalsFromEncounterAssignment, Encounter) == 0x000020, "Member 'FortMission_RemoveGoalsFromEncounterAssignment::Encounter' has a wrong offset!");
static_assert(offsetof(FortMission_RemoveGoalsFromEncounterAssignment, GoalInfos) == 0x000024, "Member 'FortMission_RemoveGoalsFromEncounterAssignment::GoalInfos' has a wrong offset!");

// Function FortniteGame.FortMission.SetUiVisibility
// 0x0001 (0x0001 - 0x0000)
struct FortMission_SetUiVisibility final
{
public:
	bool                                          bInIsMissionVisible;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_SetUiVisibility) == 0x000001, "Wrong alignment on FortMission_SetUiVisibility");
static_assert(sizeof(FortMission_SetUiVisibility) == 0x000001, "Wrong size on FortMission_SetUiVisibility");
static_assert(offsetof(FortMission_SetUiVisibility, bInIsMissionVisible) == 0x000000, "Member 'FortMission_SetUiVisibility::bInIsMissionVisible' has a wrong offset!");

// Function FortniteGame.FortMission.StartMissionAIEncounter
// 0x0084 (0x0084 - 0x0000)
struct FortMission_StartMissionAIEncounter final
{
public:
	TSubclassOf<class UFortAIEncounterInfo>       EncounterTemplate;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         TargetActors;                                      // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         EnvironmentQueryInfo;                              // 0x0014(0x001C)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 QueryActor;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InjectedTags;                                      // 0x0034(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 EncounterSettings;                                 // 0x004C(0x0030)(Parm, NativeAccessSpecifierPublic)
	int32                                         ActivationDelay;                                   // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_StartMissionAIEncounter) == 0x000004, "Wrong alignment on FortMission_StartMissionAIEncounter");
static_assert(sizeof(FortMission_StartMissionAIEncounter) == 0x000084, "Wrong size on FortMission_StartMissionAIEncounter");
static_assert(offsetof(FortMission_StartMissionAIEncounter, EncounterTemplate) == 0x000000, "Member 'FortMission_StartMissionAIEncounter::EncounterTemplate' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, TargetActors) == 0x000004, "Member 'FortMission_StartMissionAIEncounter::TargetActors' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, AssignmentSettings) == 0x000010, "Member 'FortMission_StartMissionAIEncounter::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, EnvironmentQueryInfo) == 0x000014, "Member 'FortMission_StartMissionAIEncounter::EnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, QueryActor) == 0x000030, "Member 'FortMission_StartMissionAIEncounter::QueryActor' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, InjectedTags) == 0x000034, "Member 'FortMission_StartMissionAIEncounter::InjectedTags' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, EncounterSettings) == 0x00004C, "Member 'FortMission_StartMissionAIEncounter::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, ActivationDelay) == 0x00007C, "Member 'FortMission_StartMissionAIEncounter::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounter, ReturnValue) == 0x000080, "Member 'FortMission_StartMissionAIEncounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.StartMissionAIEncounterFromGeneratedProfile
// 0x0084 (0x0084 - 0x0000)
struct FortMission_StartMissionAIEncounterFromGeneratedProfile final
{
public:
	int32                                         GeneratedEncounterProfileIndex;                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         TargetActors;                                      // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         EnvironmentQueryInfo;                              // 0x0014(0x001C)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 QueryActor;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InjectedTags;                                      // 0x0034(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 EncounterSettings;                                 // 0x004C(0x0030)(Parm, NativeAccessSpecifierPublic)
	int32                                         ActivationDelay;                                   // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_StartMissionAIEncounterFromGeneratedProfile) == 0x000004, "Wrong alignment on FortMission_StartMissionAIEncounterFromGeneratedProfile");
static_assert(sizeof(FortMission_StartMissionAIEncounterFromGeneratedProfile) == 0x000084, "Wrong size on FortMission_StartMissionAIEncounterFromGeneratedProfile");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, GeneratedEncounterProfileIndex) == 0x000000, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::GeneratedEncounterProfileIndex' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, TargetActors) == 0x000004, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::TargetActors' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, AssignmentSettings) == 0x000010, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, EnvironmentQueryInfo) == 0x000014, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::EnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, QueryActor) == 0x000030, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::QueryActor' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, InjectedTags) == 0x000034, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::InjectedTags' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, EncounterSettings) == 0x00004C, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, ActivationDelay) == 0x00007C, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionAIEncounterFromGeneratedProfile, ReturnValue) == 0x000080, "Member 'FortMission_StartMissionAIEncounterFromGeneratedProfile::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.StartMissionNotification
// 0x0040 (0x0040 - 0x0000)
struct FortMission_StartMissionNotification final
{
public:
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0000(0x0014)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortClientNotification>    Notification;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  SpecificPlayer;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OverrideDisplayText;                               // 0x001C(0x000C)(Parm, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        OptionalPlayerPawn1;                               // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        OptionalPlayerPawn2;                               // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OptionalActionName;                                // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USoundBase*                       OptionalSound;                                     // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTreatAsUnique;                                    // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCancelActiveNotification;                         // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWaitForClients;                                   // 0x003E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_StartMissionNotification) == 0x000004, "Wrong alignment on FortMission_StartMissionNotification");
static_assert(sizeof(FortMission_StartMissionNotification) == 0x000040, "Wrong size on FortMission_StartMissionNotification");
static_assert(offsetof(FortMission_StartMissionNotification, LatentInfo) == 0x000000, "Member 'FortMission_StartMissionNotification::LatentInfo' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionNotification, Notification) == 0x000014, "Member 'FortMission_StartMissionNotification::Notification' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionNotification, SpecificPlayer) == 0x000018, "Member 'FortMission_StartMissionNotification::SpecificPlayer' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionNotification, OverrideDisplayText) == 0x00001C, "Member 'FortMission_StartMissionNotification::OverrideDisplayText' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionNotification, OptionalPlayerPawn1) == 0x000028, "Member 'FortMission_StartMissionNotification::OptionalPlayerPawn1' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionNotification, OptionalPlayerPawn2) == 0x00002C, "Member 'FortMission_StartMissionNotification::OptionalPlayerPawn2' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionNotification, OptionalActionName) == 0x000030, "Member 'FortMission_StartMissionNotification::OptionalActionName' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionNotification, OptionalSound) == 0x000038, "Member 'FortMission_StartMissionNotification::OptionalSound' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionNotification, bTreatAsUnique) == 0x00003C, "Member 'FortMission_StartMissionNotification::bTreatAsUnique' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionNotification, bCancelActiveNotification) == 0x00003D, "Member 'FortMission_StartMissionNotification::bCancelActiveNotification' has a wrong offset!");
static_assert(offsetof(FortMission_StartMissionNotification, bWaitForClients) == 0x00003E, "Member 'FortMission_StartMissionNotification::bWaitForClients' has a wrong offset!");

// Function FortniteGame.FortMission.StopEncounterSequence
// 0x0004 (0x0004 - 0x0000)
struct FortMission_StopEncounterSequence final
{
public:
	class UFortAIEncounterSequence*               SequenceToStop;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_StopEncounterSequence) == 0x000004, "Wrong alignment on FortMission_StopEncounterSequence");
static_assert(sizeof(FortMission_StopEncounterSequence) == 0x000004, "Wrong size on FortMission_StopEncounterSequence");
static_assert(offsetof(FortMission_StopEncounterSequence, SequenceToStop) == 0x000000, "Member 'FortMission_StopEncounterSequence::SequenceToStop' has a wrong offset!");

// Function FortniteGame.FortMission.StopMissionAIEncounter
// 0x0004 (0x0004 - 0x0000)
struct FortMission_StopMissionAIEncounter final
{
public:
	class UFortAIEncounterInfo*                   EncounterToStop;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_StopMissionAIEncounter) == 0x000004, "Wrong alignment on FortMission_StopMissionAIEncounter");
static_assert(sizeof(FortMission_StopMissionAIEncounter) == 0x000004, "Wrong size on FortMission_StopMissionAIEncounter");
static_assert(offsetof(FortMission_StopMissionAIEncounter, EncounterToStop) == 0x000000, "Member 'FortMission_StopMissionAIEncounter::EncounterToStop' has a wrong offset!");

// Function FortniteGame.FortMission.GetBuildingDamageLootTier
// 0x0008 (0x0008 - 0x0000)
struct FortMission_GetBuildingDamageLootTier final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetBuildingDamageLootTier) == 0x000004, "Wrong alignment on FortMission_GetBuildingDamageLootTier");
static_assert(sizeof(FortMission_GetBuildingDamageLootTier) == 0x000008, "Wrong size on FortMission_GetBuildingDamageLootTier");
static_assert(offsetof(FortMission_GetBuildingDamageLootTier, PlayerController) == 0x000000, "Member 'FortMission_GetBuildingDamageLootTier::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMission_GetBuildingDamageLootTier, ReturnValue) == 0x000004, "Member 'FortMission_GetBuildingDamageLootTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetCurrentBluGloRewards
// 0x0004 (0x0004 - 0x0000)
struct FortMission_GetCurrentBluGloRewards final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetCurrentBluGloRewards) == 0x000004, "Wrong alignment on FortMission_GetCurrentBluGloRewards");
static_assert(sizeof(FortMission_GetCurrentBluGloRewards) == 0x000004, "Wrong size on FortMission_GetCurrentBluGloRewards");
static_assert(offsetof(FortMission_GetCurrentBluGloRewards, ReturnValue) == 0x000000, "Member 'FortMission_GetCurrentBluGloRewards::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetDefaultAssignmentForEncounter
// 0x0008 (0x0008 - 0x0000)
struct FortMission_GetDefaultAssignmentForEncounter final
{
public:
	class UFortAIEncounterInfo*                   Encounter;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignment*                      DefaultAssignment;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetDefaultAssignmentForEncounter) == 0x000004, "Wrong alignment on FortMission_GetDefaultAssignmentForEncounter");
static_assert(sizeof(FortMission_GetDefaultAssignmentForEncounter) == 0x000008, "Wrong size on FortMission_GetDefaultAssignmentForEncounter");
static_assert(offsetof(FortMission_GetDefaultAssignmentForEncounter, Encounter) == 0x000000, "Member 'FortMission_GetDefaultAssignmentForEncounter::Encounter' has a wrong offset!");
static_assert(offsetof(FortMission_GetDefaultAssignmentForEncounter, DefaultAssignment) == 0x000004, "Member 'FortMission_GetDefaultAssignmentForEncounter::DefaultAssignment' has a wrong offset!");

// Function FortniteGame.FortMission.GetExpectedCompletionTime
// 0x0004 (0x0004 - 0x0000)
struct FortMission_GetExpectedCompletionTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetExpectedCompletionTime) == 0x000004, "Wrong alignment on FortMission_GetExpectedCompletionTime");
static_assert(sizeof(FortMission_GetExpectedCompletionTime) == 0x000004, "Wrong size on FortMission_GetExpectedCompletionTime");
static_assert(offsetof(FortMission_GetExpectedCompletionTime, ReturnValue) == 0x000000, "Member 'FortMission_GetExpectedCompletionTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetMissionFortPlayerControllers
// 0x000C (0x000C - 0x0000)
struct FortMission_GetMissionFortPlayerControllers final
{
public:
	TArray<class AFortPlayerController*>          ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetMissionFortPlayerControllers) == 0x000004, "Wrong alignment on FortMission_GetMissionFortPlayerControllers");
static_assert(sizeof(FortMission_GetMissionFortPlayerControllers) == 0x00000C, "Wrong size on FortMission_GetMissionFortPlayerControllers");
static_assert(offsetof(FortMission_GetMissionFortPlayerControllers, ReturnValue) == 0x000000, "Member 'FortMission_GetMissionFortPlayerControllers::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetMissionGuid
// 0x0010 (0x0010 - 0x0000)
struct FortMission_GetMissionGuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetMissionGuid) == 0x000004, "Wrong alignment on FortMission_GetMissionGuid");
static_assert(sizeof(FortMission_GetMissionGuid) == 0x000010, "Wrong size on FortMission_GetMissionGuid");
static_assert(offsetof(FortMission_GetMissionGuid, ReturnValue) == 0x000000, "Member 'FortMission_GetMissionGuid::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetObjectiveByHandle
// 0x001C (0x001C - 0x0000)
struct FortMission_GetObjectiveByHandle final
{
public:
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class AFortObjectiveBase*                     ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetObjectiveByHandle) == 0x000004, "Wrong alignment on FortMission_GetObjectiveByHandle");
static_assert(sizeof(FortMission_GetObjectiveByHandle) == 0x00001C, "Wrong size on FortMission_GetObjectiveByHandle");
static_assert(offsetof(FortMission_GetObjectiveByHandle, ObjectiveHandle) == 0x000000, "Member 'FortMission_GetObjectiveByHandle::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FortMission_GetObjectiveByHandle, ReturnValue) == 0x000018, "Member 'FortMission_GetObjectiveByHandle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetObjectiveStatusByHandle
// 0x001C (0x001C - 0x0000)
struct FortMission_GetObjectiveStatusByHandle final
{
public:
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	EFortObjectiveStatus                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMission_GetObjectiveStatusByHandle) == 0x000004, "Wrong alignment on FortMission_GetObjectiveStatusByHandle");
static_assert(sizeof(FortMission_GetObjectiveStatusByHandle) == 0x00001C, "Wrong size on FortMission_GetObjectiveStatusByHandle");
static_assert(offsetof(FortMission_GetObjectiveStatusByHandle, ObjectiveHandle) == 0x000000, "Member 'FortMission_GetObjectiveStatusByHandle::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FortMission_GetObjectiveStatusByHandle, ReturnValue) == 0x000018, "Member 'FortMission_GetObjectiveStatusByHandle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetPawnDamageLootTier
// 0x0008 (0x0008 - 0x0000)
struct FortMission_GetPawnDamageLootTier final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetPawnDamageLootTier) == 0x000004, "Wrong alignment on FortMission_GetPawnDamageLootTier");
static_assert(sizeof(FortMission_GetPawnDamageLootTier) == 0x000008, "Wrong size on FortMission_GetPawnDamageLootTier");
static_assert(offsetof(FortMission_GetPawnDamageLootTier, PlayerController) == 0x000000, "Member 'FortMission_GetPawnDamageLootTier::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMission_GetPawnDamageLootTier, ReturnValue) == 0x000004, "Member 'FortMission_GetPawnDamageLootTier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetPlayerBuildingDamage
// 0x0008 (0x0008 - 0x0000)
struct FortMission_GetPlayerBuildingDamage final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetPlayerBuildingDamage) == 0x000004, "Wrong alignment on FortMission_GetPlayerBuildingDamage");
static_assert(sizeof(FortMission_GetPlayerBuildingDamage) == 0x000008, "Wrong size on FortMission_GetPlayerBuildingDamage");
static_assert(offsetof(FortMission_GetPlayerBuildingDamage, PlayerController) == 0x000000, "Member 'FortMission_GetPlayerBuildingDamage::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMission_GetPlayerBuildingDamage, ReturnValue) == 0x000004, "Member 'FortMission_GetPlayerBuildingDamage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMission.GetPlayerPawnDamage
// 0x0008 (0x0008 - 0x0000)
struct FortMission_GetPlayerPawnDamage final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMission_GetPlayerPawnDamage) == 0x000004, "Wrong alignment on FortMission_GetPlayerPawnDamage");
static_assert(sizeof(FortMission_GetPlayerPawnDamage) == 0x000008, "Wrong size on FortMission_GetPlayerPawnDamage");
static_assert(offsetof(FortMission_GetPlayerPawnDamage, PlayerController) == 0x000000, "Member 'FortMission_GetPlayerPawnDamage::PlayerController' has a wrong offset!");
static_assert(offsetof(FortMission_GetPlayerPawnDamage, ReturnValue) == 0x000004, "Member 'FortMission_GetPlayerPawnDamage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPMission_EnemyBaseDestruction.GetCornerstoneForTeam
// 0x0008 (0x0008 - 0x0000)
struct FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam final
{
public:
	EFortTeam                                     InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPvPBaseCornerstone*                ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam) == 0x000004, "Wrong alignment on FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam");
static_assert(sizeof(FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam) == 0x000008, "Wrong size on FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam");
static_assert(offsetof(FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam, InTeam) == 0x000000, "Member 'FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam::InTeam' has a wrong offset!");
static_assert(offsetof(FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam, ReturnValue) == 0x000004, "Member 'FortPvPMission_EnemyBaseDestruction_GetCornerstoneForTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPatrolWardInterface.GetAffectingDistance
// 0x0004 (0x0004 - 0x0000)
struct FortPatrolWardInterface_GetAffectingDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPatrolWardInterface_GetAffectingDistance) == 0x000004, "Wrong alignment on FortPatrolWardInterface_GetAffectingDistance");
static_assert(sizeof(FortPatrolWardInterface_GetAffectingDistance) == 0x000004, "Wrong size on FortPatrolWardInterface_GetAffectingDistance");
static_assert(offsetof(FortPatrolWardInterface_GetAffectingDistance, ReturnValue) == 0x000000, "Member 'FortPatrolWardInterface_GetAffectingDistance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPatrolWardInterface.GetAffectingType
// 0x0001 (0x0001 - 0x0000)
struct FortPatrolWardInterface_GetAffectingType final
{
public:
	EWardAffectType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPatrolWardInterface_GetAffectingType) == 0x000001, "Wrong alignment on FortPatrolWardInterface_GetAffectingType");
static_assert(sizeof(FortPatrolWardInterface_GetAffectingType) == 0x000001, "Wrong size on FortPatrolWardInterface_GetAffectingType");
static_assert(offsetof(FortPatrolWardInterface_GetAffectingType, ReturnValue) == 0x000000, "Member 'FortPatrolWardInterface_GetAffectingType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirectorDataManager.TriggerEvent
// 0x0010 (0x0010 - 0x0000)
struct FortAIDirectorDataManager_TriggerEvent final
{
public:
	struct FFortAIDirectorEvent                   TriggeredEvent;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirectorDataManager_TriggerEvent) == 0x000004, "Wrong alignment on FortAIDirectorDataManager_TriggerEvent");
static_assert(sizeof(FortAIDirectorDataManager_TriggerEvent) == 0x000010, "Wrong size on FortAIDirectorDataManager_TriggerEvent");
static_assert(offsetof(FortAIDirectorDataManager_TriggerEvent, TriggeredEvent) == 0x000000, "Member 'FortAIDirectorDataManager_TriggerEvent::TriggeredEvent' has a wrong offset!");

// Function FortniteGame.FortAIDirectorDataManager.GetAIDirectorFactorValue
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirectorDataManager_GetAIDirectorFactorValue final
{
public:
	EFortAIDirectorFactor                         AIDirectorFactor;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirectorDataManager_GetAIDirectorFactorValue) == 0x000004, "Wrong alignment on FortAIDirectorDataManager_GetAIDirectorFactorValue");
static_assert(sizeof(FortAIDirectorDataManager_GetAIDirectorFactorValue) == 0x000008, "Wrong size on FortAIDirectorDataManager_GetAIDirectorFactorValue");
static_assert(offsetof(FortAIDirectorDataManager_GetAIDirectorFactorValue, AIDirectorFactor) == 0x000000, "Member 'FortAIDirectorDataManager_GetAIDirectorFactorValue::AIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FortAIDirectorDataManager_GetAIDirectorFactorValue, ReturnValue) == 0x000004, "Member 'FortAIDirectorDataManager_GetAIDirectorFactorValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIDirectorDataManager.GetGetAIDirectorEventValue
// 0x0008 (0x0008 - 0x0000)
struct FortAIDirectorDataManager_GetGetAIDirectorEventValue final
{
public:
	EFortAIDirectorEvent                          Event;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIDirectorDataManager_GetGetAIDirectorEventValue) == 0x000004, "Wrong alignment on FortAIDirectorDataManager_GetGetAIDirectorEventValue");
static_assert(sizeof(FortAIDirectorDataManager_GetGetAIDirectorEventValue) == 0x000008, "Wrong size on FortAIDirectorDataManager_GetGetAIDirectorEventValue");
static_assert(offsetof(FortAIDirectorDataManager_GetGetAIDirectorEventValue, Event) == 0x000000, "Member 'FortAIDirectorDataManager_GetGetAIDirectorEventValue::Event' has a wrong offset!");
static_assert(offsetof(FortAIDirectorDataManager_GetGetAIDirectorEventValue, ReturnValue) == 0x000004, "Member 'FortAIDirectorDataManager_GetGetAIDirectorEventValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISpawnerInterface.IsReadyToReceiveNewSpawnGroup
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup) == 0x000001, "Wrong alignment on FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup");
static_assert(sizeof(FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup) == 0x000001, "Wrong size on FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup");
static_assert(offsetof(FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup, ReturnValue) == 0x000000, "Member 'FortAISpawnerInterface_IsReadyToReceiveNewSpawnGroup::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISpawnerInterface.OnReceiveSpawnGroup
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnerInterface_OnReceiveSpawnGroup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnerInterface_OnReceiveSpawnGroup) == 0x000001, "Wrong alignment on FortAISpawnerInterface_OnReceiveSpawnGroup");
static_assert(sizeof(FortAISpawnerInterface_OnReceiveSpawnGroup) == 0x000001, "Wrong size on FortAISpawnerInterface_OnReceiveSpawnGroup");
static_assert(offsetof(FortAISpawnerInterface_OnReceiveSpawnGroup, ReturnValue) == 0x000000, "Member 'FortAISpawnerInterface_OnReceiveSpawnGroup::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.CreateEncounterAssignment
// 0x000C (0x000C - 0x0000)
struct FortAIEncounterInfo_CreateEncounterAssignment final
{
public:
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GoalActor;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIAssignment*                      ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_CreateEncounterAssignment) == 0x000004, "Wrong alignment on FortAIEncounterInfo_CreateEncounterAssignment");
static_assert(sizeof(FortAIEncounterInfo_CreateEncounterAssignment) == 0x00000C, "Wrong size on FortAIEncounterInfo_CreateEncounterAssignment");
static_assert(offsetof(FortAIEncounterInfo_CreateEncounterAssignment, AssignmentSettings) == 0x000000, "Member 'FortAIEncounterInfo_CreateEncounterAssignment::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_CreateEncounterAssignment, GoalActor) == 0x000004, "Member 'FortAIEncounterInfo_CreateEncounterAssignment::GoalActor' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_CreateEncounterAssignment, ReturnValue) == 0x000008, "Member 'FortAIEncounterInfo_CreateEncounterAssignment::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.EnemySpawnerGroupHasAIRemainingToSpawn
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterInfo_EnemySpawnerGroupHasAIRemainingToSpawn final
{
public:
	class AActor*                                 EnemySpawner;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterInfo_EnemySpawnerGroupHasAIRemainingToSpawn) == 0x000004, "Wrong alignment on FortAIEncounterInfo_EnemySpawnerGroupHasAIRemainingToSpawn");
static_assert(sizeof(FortAIEncounterInfo_EnemySpawnerGroupHasAIRemainingToSpawn) == 0x000008, "Wrong size on FortAIEncounterInfo_EnemySpawnerGroupHasAIRemainingToSpawn");
static_assert(offsetof(FortAIEncounterInfo_EnemySpawnerGroupHasAIRemainingToSpawn, EnemySpawner) == 0x000000, "Member 'FortAIEncounterInfo_EnemySpawnerGroupHasAIRemainingToSpawn::EnemySpawner' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_EnemySpawnerGroupHasAIRemainingToSpawn, ReturnValue) == 0x000004, "Member 'FortAIEncounterInfo_EnemySpawnerGroupHasAIRemainingToSpawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.GetEncounterDataManager
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterInfo_GetEncounterDataManager final
{
public:
	class AFortAIDirectorDataManager*             ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_GetEncounterDataManager) == 0x000004, "Wrong alignment on FortAIEncounterInfo_GetEncounterDataManager");
static_assert(sizeof(FortAIEncounterInfo_GetEncounterDataManager) == 0x000004, "Wrong size on FortAIEncounterInfo_GetEncounterDataManager");
static_assert(offsetof(FortAIEncounterInfo_GetEncounterDataManager, ReturnValue) == 0x000000, "Member 'FortAIEncounterInfo_GetEncounterDataManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.GetEncounterTimeSeconds
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterInfo_GetEncounterTimeSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_GetEncounterTimeSeconds) == 0x000004, "Wrong alignment on FortAIEncounterInfo_GetEncounterTimeSeconds");
static_assert(sizeof(FortAIEncounterInfo_GetEncounterTimeSeconds) == 0x000004, "Wrong size on FortAIEncounterInfo_GetEncounterTimeSeconds");
static_assert(offsetof(FortAIEncounterInfo_GetEncounterTimeSeconds, ReturnValue) == 0x000000, "Member 'FortAIEncounterInfo_GetEncounterTimeSeconds::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.GroupHasAIRemainingToSpawn
// 0x0054 (0x0054 - 0x0000)
struct FortAIEncounterInfo_GroupHasAIRemainingToSpawn final
{
public:
	struct FFortAISpawnerData                     FortAISpawnerData;                                 // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterInfo_GroupHasAIRemainingToSpawn) == 0x000004, "Wrong alignment on FortAIEncounterInfo_GroupHasAIRemainingToSpawn");
static_assert(sizeof(FortAIEncounterInfo_GroupHasAIRemainingToSpawn) == 0x000054, "Wrong size on FortAIEncounterInfo_GroupHasAIRemainingToSpawn");
static_assert(offsetof(FortAIEncounterInfo_GroupHasAIRemainingToSpawn, FortAISpawnerData) == 0x000000, "Member 'FortAIEncounterInfo_GroupHasAIRemainingToSpawn::FortAISpawnerData' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_GroupHasAIRemainingToSpawn, ReturnValue) == 0x000050, "Member 'FortAIEncounterInfo_GroupHasAIRemainingToSpawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.OnGoalTakeDamage
// 0x0034 (0x0034 - 0x0000)
struct FortAIEncounterInfo_OnGoalTakeDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_OnGoalTakeDamage) == 0x000004, "Wrong alignment on FortAIEncounterInfo_OnGoalTakeDamage");
static_assert(sizeof(FortAIEncounterInfo_OnGoalTakeDamage) == 0x000034, "Wrong size on FortAIEncounterInfo_OnGoalTakeDamage");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, DamagedActor) == 0x000000, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, Damage) == 0x000004, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, InstigatedBy) == 0x000008, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, DamageCauser) == 0x00000C, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, HitLocation) == 0x000010, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, FHitComponent) == 0x00001C, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, BoneName) == 0x000020, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::BoneName' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_OnGoalTakeDamage, Momentum) == 0x000028, "Member 'FortAIEncounterInfo_OnGoalTakeDamage::Momentum' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.RegisterAISpawner
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterInfo_RegisterAISpawner final
{
public:
	class AActor*                                 InAISpawner;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_RegisterAISpawner) == 0x000004, "Wrong alignment on FortAIEncounterInfo_RegisterAISpawner");
static_assert(sizeof(FortAIEncounterInfo_RegisterAISpawner) == 0x000004, "Wrong size on FortAIEncounterInfo_RegisterAISpawner");
static_assert(offsetof(FortAIEncounterInfo_RegisterAISpawner, InAISpawner) == 0x000000, "Member 'FortAIEncounterInfo_RegisterAISpawner::InAISpawner' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.RequestActivation
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterInfo_RequestActivation final
{
public:
	int32                                         ActivationDelay;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_RequestActivation) == 0x000004, "Wrong alignment on FortAIEncounterInfo_RequestActivation");
static_assert(sizeof(FortAIEncounterInfo_RequestActivation) == 0x000004, "Wrong size on FortAIEncounterInfo_RequestActivation");
static_assert(offsetof(FortAIEncounterInfo_RequestActivation, ActivationDelay) == 0x000000, "Member 'FortAIEncounterInfo_RequestActivation::ActivationDelay' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.ReserveNextAIPawn
// 0x0094 (0x0094 - 0x0000)
struct FortAIEncounterInfo_ReserveNextAIPawn final
{
public:
	struct FFortAISpawnerData                     FortAISpawnerData;                                 // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FFortSpawnAIRequest                    FortAISpawnRequest;                                // 0x0050(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterInfo_ReserveNextAIPawn) == 0x000004, "Wrong alignment on FortAIEncounterInfo_ReserveNextAIPawn");
static_assert(sizeof(FortAIEncounterInfo_ReserveNextAIPawn) == 0x000094, "Wrong size on FortAIEncounterInfo_ReserveNextAIPawn");
static_assert(offsetof(FortAIEncounterInfo_ReserveNextAIPawn, FortAISpawnerData) == 0x000000, "Member 'FortAIEncounterInfo_ReserveNextAIPawn::FortAISpawnerData' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_ReserveNextAIPawn, FortAISpawnRequest) == 0x000050, "Member 'FortAIEncounterInfo_ReserveNextAIPawn::FortAISpawnRequest' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_ReserveNextAIPawn, ReturnValue) == 0x000090, "Member 'FortAIEncounterInfo_ReserveNextAIPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.SetEncounterActivationState
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterInfo_SetEncounterActivationState final
{
public:
	bool                                          bEncounterActivityState;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_SetEncounterActivationState) == 0x000001, "Wrong alignment on FortAIEncounterInfo_SetEncounterActivationState");
static_assert(sizeof(FortAIEncounterInfo_SetEncounterActivationState) == 0x000001, "Wrong size on FortAIEncounterInfo_SetEncounterActivationState");
static_assert(offsetof(FortAIEncounterInfo_SetEncounterActivationState, bEncounterActivityState) == 0x000000, "Member 'FortAIEncounterInfo_SetEncounterActivationState::bEncounterActivityState' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.SpawnAIGroup
// 0x0034 (0x0034 - 0x0000)
struct FortAIEncounterInfo_SpawnAIGroup final
{
public:
	const class UFortAISpawnGroup*                SpawnGroupToSpawn;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnSource;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortAbilitySet*>                AbilitySetsToGrantOnSpawn;                         // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAllowAssigningToExternalSpawners;                 // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SecondsBetweenSpawns;                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_SpawnAIGroup) == 0x000004, "Wrong alignment on FortAIEncounterInfo_SpawnAIGroup");
static_assert(sizeof(FortAIEncounterInfo_SpawnAIGroup) == 0x000034, "Wrong size on FortAIEncounterInfo_SpawnAIGroup");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIGroup, SpawnGroupToSpawn) == 0x000000, "Member 'FortAIEncounterInfo_SpawnAIGroup::SpawnGroupToSpawn' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIGroup, SpawnLocation) == 0x000004, "Member 'FortAIEncounterInfo_SpawnAIGroup::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIGroup, SpawnRotation) == 0x000010, "Member 'FortAIEncounterInfo_SpawnAIGroup::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIGroup, SpawnSource) == 0x00001C, "Member 'FortAIEncounterInfo_SpawnAIGroup::SpawnSource' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIGroup, AbilitySetsToGrantOnSpawn) == 0x000020, "Member 'FortAIEncounterInfo_SpawnAIGroup::AbilitySetsToGrantOnSpawn' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIGroup, bAllowAssigningToExternalSpawners) == 0x00002C, "Member 'FortAIEncounterInfo_SpawnAIGroup::bAllowAssigningToExternalSpawners' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIGroup, SecondsBetweenSpawns) == 0x000030, "Member 'FortAIEncounterInfo_SpawnAIGroup::SecondsBetweenSpawns' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.SpawnAIPawnReservedForEnemySpawner
// 0x0020 (0x0020 - 0x0000)
struct FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner final
{
public:
	class AActor*                                 EnemySpawner;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortAIPawn*                            ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner) == 0x000004, "Wrong alignment on FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner");
static_assert(sizeof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner) == 0x000020, "Wrong size on FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner, EnemySpawner) == 0x000000, "Member 'FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner::EnemySpawner' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner, SpawnLocation) == 0x000004, "Member 'FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner, SpawnRotation) == 0x000010, "Member 'FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner, ReturnValue) == 0x00001C, "Member 'FortAIEncounterInfo_SpawnAIPawnReservedForEnemySpawner::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.UnRegisterAISpawner
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterInfo_UnRegisterAISpawner final
{
public:
	class AActor*                                 InAISpawner;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterInfo_UnRegisterAISpawner) == 0x000004, "Wrong alignment on FortAIEncounterInfo_UnRegisterAISpawner");
static_assert(sizeof(FortAIEncounterInfo_UnRegisterAISpawner) == 0x000004, "Wrong size on FortAIEncounterInfo_UnRegisterAISpawner");
static_assert(offsetof(FortAIEncounterInfo_UnRegisterAISpawner, InAISpawner) == 0x000000, "Member 'FortAIEncounterInfo_UnRegisterAISpawner::InAISpawner' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.EncounterHasReservedSpawnRequestForEnemySpawner
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner final
{
public:
	class AActor*                                 EnemySpawner;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner) == 0x000004, "Wrong alignment on FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner");
static_assert(sizeof(FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner) == 0x000008, "Wrong size on FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner");
static_assert(offsetof(FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner, EnemySpawner) == 0x000000, "Member 'FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner::EnemySpawner' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner, ReturnValue) == 0x000004, "Member 'FortAIEncounterInfo_EncounterHasReservedSpawnRequestForEnemySpawner::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterInfo.GetCurrentSpawnAreaDirections
// 0x0010 (0x0010 - 0x0000)
struct FortAIEncounterInfo_GetCurrentSpawnAreaDirections final
{
public:
	TArray<EFortEncounterDirection>               OutDirections;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterInfo_GetCurrentSpawnAreaDirections) == 0x000004, "Wrong alignment on FortAIEncounterInfo_GetCurrentSpawnAreaDirections");
static_assert(sizeof(FortAIEncounterInfo_GetCurrentSpawnAreaDirections) == 0x000010, "Wrong size on FortAIEncounterInfo_GetCurrentSpawnAreaDirections");
static_assert(offsetof(FortAIEncounterInfo_GetCurrentSpawnAreaDirections, OutDirections) == 0x000000, "Member 'FortAIEncounterInfo_GetCurrentSpawnAreaDirections::OutDirections' has a wrong offset!");
static_assert(offsetof(FortAIEncounterInfo_GetCurrentSpawnAreaDirections, ReturnValue) == 0x00000C, "Member 'FortAIEncounterInfo_GetCurrentSpawnAreaDirections::ReturnValue' has a wrong offset!");

// Function FortniteGame.ThreatCloud.GetRelevantCloudMeshes
// 0x0014 (0x0014 - 0x0000)
struct ThreatCloud_GetRelevantCloudMeshes final
{
public:
	class UStaticMeshComponent*                   SourceCloudMeshComponent;                          // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoundingBoxPadding;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMeshComponent*>           OutInfluencingCloudMeshComponents;                 // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_GetRelevantCloudMeshes) == 0x000004, "Wrong alignment on ThreatCloud_GetRelevantCloudMeshes");
static_assert(sizeof(ThreatCloud_GetRelevantCloudMeshes) == 0x000014, "Wrong size on ThreatCloud_GetRelevantCloudMeshes");
static_assert(offsetof(ThreatCloud_GetRelevantCloudMeshes, SourceCloudMeshComponent) == 0x000000, "Member 'ThreatCloud_GetRelevantCloudMeshes::SourceCloudMeshComponent' has a wrong offset!");
static_assert(offsetof(ThreatCloud_GetRelevantCloudMeshes, BoundingBoxPadding) == 0x000004, "Member 'ThreatCloud_GetRelevantCloudMeshes::BoundingBoxPadding' has a wrong offset!");
static_assert(offsetof(ThreatCloud_GetRelevantCloudMeshes, OutInfluencingCloudMeshComponents) == 0x000008, "Member 'ThreatCloud_GetRelevantCloudMeshes::OutInfluencingCloudMeshComponents' has a wrong offset!");

// Function FortniteGame.ThreatCloud.OnCloudDeactivated
// 0x0008 (0x0008 - 0x0000)
struct ThreatCloud_OnCloudDeactivated final
{
public:
	EFortThreatDeactivationType                   DeactivationType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeactivationDuration;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_OnCloudDeactivated) == 0x000004, "Wrong alignment on ThreatCloud_OnCloudDeactivated");
static_assert(sizeof(ThreatCloud_OnCloudDeactivated) == 0x000008, "Wrong size on ThreatCloud_OnCloudDeactivated");
static_assert(offsetof(ThreatCloud_OnCloudDeactivated, DeactivationType) == 0x000000, "Member 'ThreatCloud_OnCloudDeactivated::DeactivationType' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnCloudDeactivated, DeactivationDuration) == 0x000004, "Member 'ThreatCloud_OnCloudDeactivated::DeactivationDuration' has a wrong offset!");

// Function FortniteGame.ThreatCloud.OnCloudScaleChanged
// 0x0020 (0x0020 - 0x0000)
struct ThreatCloud_OnCloudScaleChanged final
{
public:
	class UStaticMeshComponent*                   MeshInfluenced;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MIDInfluenced;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   MeshInfluencer;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InfluencerScale;                                   // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InfluencerScalePercentage;                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfluencerIndex;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_OnCloudScaleChanged) == 0x000004, "Wrong alignment on ThreatCloud_OnCloudScaleChanged");
static_assert(sizeof(ThreatCloud_OnCloudScaleChanged) == 0x000020, "Wrong size on ThreatCloud_OnCloudScaleChanged");
static_assert(offsetof(ThreatCloud_OnCloudScaleChanged, MeshInfluenced) == 0x000000, "Member 'ThreatCloud_OnCloudScaleChanged::MeshInfluenced' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnCloudScaleChanged, MIDInfluenced) == 0x000004, "Member 'ThreatCloud_OnCloudScaleChanged::MIDInfluenced' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnCloudScaleChanged, MeshInfluencer) == 0x000008, "Member 'ThreatCloud_OnCloudScaleChanged::MeshInfluencer' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnCloudScaleChanged, InfluencerScale) == 0x00000C, "Member 'ThreatCloud_OnCloudScaleChanged::InfluencerScale' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnCloudScaleChanged, InfluencerScalePercentage) == 0x000018, "Member 'ThreatCloud_OnCloudScaleChanged::InfluencerScalePercentage' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnCloudScaleChanged, InfluencerIndex) == 0x00001C, "Member 'ThreatCloud_OnCloudScaleChanged::InfluencerIndex' has a wrong offset!");

// Function FortniteGame.ThreatCloud.OnLightningStrike
// 0x0020 (0x0020 - 0x0000)
struct ThreatCloud_OnLightningStrike final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ABuildingRift*                          Rift;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightningStruckRift;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ThreatCloud_OnLightningStrike) == 0x000004, "Wrong alignment on ThreatCloud_OnLightningStrike");
static_assert(sizeof(ThreatCloud_OnLightningStrike) == 0x000020, "Wrong size on ThreatCloud_OnLightningStrike");
static_assert(offsetof(ThreatCloud_OnLightningStrike, StartLocation) == 0x000000, "Member 'ThreatCloud_OnLightningStrike::StartLocation' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnLightningStrike, EndLocation) == 0x00000C, "Member 'ThreatCloud_OnLightningStrike::EndLocation' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnLightningStrike, Rift) == 0x000018, "Member 'ThreatCloud_OnLightningStrike::Rift' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnLightningStrike, bLightningStruckRift) == 0x00001C, "Member 'ThreatCloud_OnLightningStrike::bLightningStruckRift' has a wrong offset!");

// Function FortniteGame.ThreatCloud.OnNeighborChanged
// 0x0004 (0x0004 - 0x0000)
struct ThreatCloud_OnNeighborChanged final
{
public:
	int32                                         NeighborIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_OnNeighborChanged) == 0x000004, "Wrong alignment on ThreatCloud_OnNeighborChanged");
static_assert(sizeof(ThreatCloud_OnNeighborChanged) == 0x000004, "Wrong size on ThreatCloud_OnNeighborChanged");
static_assert(offsetof(ThreatCloud_OnNeighborChanged, NeighborIndex) == 0x000000, "Member 'ThreatCloud_OnNeighborChanged::NeighborIndex' has a wrong offset!");

// Function FortniteGame.ThreatCloud.OnNeighborsChanged
// 0x001C (0x001C - 0x0000)
struct ThreatCloud_OnNeighborsChanged final
{
public:
	bool                                          bPrimaryNeighborsChanged;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSecondaryNeighborsChanged;                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IndicesOfNewImmediateNeighbors;                    // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 IndicesOfDyingImmediateNeighbors;                  // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_OnNeighborsChanged) == 0x000004, "Wrong alignment on ThreatCloud_OnNeighborsChanged");
static_assert(sizeof(ThreatCloud_OnNeighborsChanged) == 0x00001C, "Wrong size on ThreatCloud_OnNeighborsChanged");
static_assert(offsetof(ThreatCloud_OnNeighborsChanged, bPrimaryNeighborsChanged) == 0x000000, "Member 'ThreatCloud_OnNeighborsChanged::bPrimaryNeighborsChanged' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnNeighborsChanged, bSecondaryNeighborsChanged) == 0x000001, "Member 'ThreatCloud_OnNeighborsChanged::bSecondaryNeighborsChanged' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnNeighborsChanged, IndicesOfNewImmediateNeighbors) == 0x000004, "Member 'ThreatCloud_OnNeighborsChanged::IndicesOfNewImmediateNeighbors' has a wrong offset!");
static_assert(offsetof(ThreatCloud_OnNeighborsChanged, IndicesOfDyingImmediateNeighbors) == 0x000010, "Member 'ThreatCloud_OnNeighborsChanged::IndicesOfDyingImmediateNeighbors' has a wrong offset!");

// Function FortniteGame.ThreatCloud.SetCloudInfluenceInfo
// 0x0028 (0x0028 - 0x0000)
struct ThreatCloud_SetCloudInfluenceInfo final
{
public:
	TArray<class UStaticMeshComponent*>           CloudStaticMeshComponents;                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        FinalCloudScales;                                  // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       CloudMIDs;                                         // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         BoundingBoxPadding;                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_SetCloudInfluenceInfo) == 0x000004, "Wrong alignment on ThreatCloud_SetCloudInfluenceInfo");
static_assert(sizeof(ThreatCloud_SetCloudInfluenceInfo) == 0x000028, "Wrong size on ThreatCloud_SetCloudInfluenceInfo");
static_assert(offsetof(ThreatCloud_SetCloudInfluenceInfo, CloudStaticMeshComponents) == 0x000000, "Member 'ThreatCloud_SetCloudInfluenceInfo::CloudStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(ThreatCloud_SetCloudInfluenceInfo, FinalCloudScales) == 0x00000C, "Member 'ThreatCloud_SetCloudInfluenceInfo::FinalCloudScales' has a wrong offset!");
static_assert(offsetof(ThreatCloud_SetCloudInfluenceInfo, CloudMIDs) == 0x000018, "Member 'ThreatCloud_SetCloudInfluenceInfo::CloudMIDs' has a wrong offset!");
static_assert(offsetof(ThreatCloud_SetCloudInfluenceInfo, BoundingBoxPadding) == 0x000024, "Member 'ThreatCloud_SetCloudInfluenceInfo::BoundingBoxPadding' has a wrong offset!");

// Function FortniteGame.ThreatCloud.SetCloudMeshAndScaleValues
// 0x001C (0x001C - 0x0000)
struct ThreatCloud_SetCloudMeshAndScaleValues final
{
public:
	TArray<class UStaticMeshComponent*>           CloudStaticMeshComponents;                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIncludeNegativeValues;                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        FinalCloudScales;                                  // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_SetCloudMeshAndScaleValues) == 0x000004, "Wrong alignment on ThreatCloud_SetCloudMeshAndScaleValues");
static_assert(sizeof(ThreatCloud_SetCloudMeshAndScaleValues) == 0x00001C, "Wrong size on ThreatCloud_SetCloudMeshAndScaleValues");
static_assert(offsetof(ThreatCloud_SetCloudMeshAndScaleValues, CloudStaticMeshComponents) == 0x000000, "Member 'ThreatCloud_SetCloudMeshAndScaleValues::CloudStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(ThreatCloud_SetCloudMeshAndScaleValues, bIncludeNegativeValues) == 0x00000C, "Member 'ThreatCloud_SetCloudMeshAndScaleValues::bIncludeNegativeValues' has a wrong offset!");
static_assert(offsetof(ThreatCloud_SetCloudMeshAndScaleValues, FinalCloudScales) == 0x000010, "Member 'ThreatCloud_SetCloudMeshAndScaleValues::FinalCloudScales' has a wrong offset!");

// Function FortniteGame.ThreatCloud.SetCloudMeshScale
// 0x0010 (0x0010 - 0x0000)
struct ThreatCloud_SetCloudMeshScale final
{
public:
	class UStaticMeshComponent*                   CloudStaticMesh;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_SetCloudMeshScale) == 0x000004, "Wrong alignment on ThreatCloud_SetCloudMeshScale");
static_assert(sizeof(ThreatCloud_SetCloudMeshScale) == 0x000010, "Wrong size on ThreatCloud_SetCloudMeshScale");
static_assert(offsetof(ThreatCloud_SetCloudMeshScale, CloudStaticMesh) == 0x000000, "Member 'ThreatCloud_SetCloudMeshScale::CloudStaticMesh' has a wrong offset!");
static_assert(offsetof(ThreatCloud_SetCloudMeshScale, Scale) == 0x000004, "Member 'ThreatCloud_SetCloudMeshScale::Scale' has a wrong offset!");

// Function FortniteGame.ThreatCloud.UpdateCloudBuildUp
// 0x0004 (0x0004 - 0x0000)
struct ThreatCloud_UpdateCloudBuildUp final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_UpdateCloudBuildUp) == 0x000004, "Wrong alignment on ThreatCloud_UpdateCloudBuildUp");
static_assert(sizeof(ThreatCloud_UpdateCloudBuildUp) == 0x000004, "Wrong size on ThreatCloud_UpdateCloudBuildUp");
static_assert(offsetof(ThreatCloud_UpdateCloudBuildUp, ReturnValue) == 0x000000, "Member 'ThreatCloud_UpdateCloudBuildUp::ReturnValue' has a wrong offset!");

// Function FortniteGame.ThreatCloud.GetCloudBuildUpPercentage
// 0x0004 (0x0004 - 0x0000)
struct ThreatCloud_GetCloudBuildUpPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_GetCloudBuildUpPercentage) == 0x000004, "Wrong alignment on ThreatCloud_GetCloudBuildUpPercentage");
static_assert(sizeof(ThreatCloud_GetCloudBuildUpPercentage) == 0x000004, "Wrong size on ThreatCloud_GetCloudBuildUpPercentage");
static_assert(offsetof(ThreatCloud_GetCloudBuildUpPercentage, ReturnValue) == 0x000000, "Member 'ThreatCloud_GetCloudBuildUpPercentage::ReturnValue' has a wrong offset!");

// Function FortniteGame.ThreatCloud.GetGoalActorLocations
// 0x000C (0x000C - 0x0000)
struct ThreatCloud_GetGoalActorLocations final
{
public:
	TArray<struct FVector>                        OutGoalActorLocations;                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_GetGoalActorLocations) == 0x000004, "Wrong alignment on ThreatCloud_GetGoalActorLocations");
static_assert(sizeof(ThreatCloud_GetGoalActorLocations) == 0x00000C, "Wrong size on ThreatCloud_GetGoalActorLocations");
static_assert(offsetof(ThreatCloud_GetGoalActorLocations, OutGoalActorLocations) == 0x000000, "Member 'ThreatCloud_GetGoalActorLocations::OutGoalActorLocations' has a wrong offset!");

// Function FortniteGame.ThreatCloud.GetNeighborCloudIndices
// 0x000C (0x000C - 0x0000)
struct ThreatCloud_GetNeighborCloudIndices final
{
public:
	TArray<int32>                                 NeighborCloudIndices;                              // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_GetNeighborCloudIndices) == 0x000004, "Wrong alignment on ThreatCloud_GetNeighborCloudIndices");
static_assert(sizeof(ThreatCloud_GetNeighborCloudIndices) == 0x00000C, "Wrong size on ThreatCloud_GetNeighborCloudIndices");
static_assert(offsetof(ThreatCloud_GetNeighborCloudIndices, NeighborCloudIndices) == 0x000000, "Member 'ThreatCloud_GetNeighborCloudIndices::NeighborCloudIndices' has a wrong offset!");

// Function FortniteGame.ThreatCloud.GetNeighborClouds
// 0x000C (0x000C - 0x0000)
struct ThreatCloud_GetNeighborClouds final
{
public:
	TArray<class AThreatCloud*>                   NeighborClouds;                                    // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_GetNeighborClouds) == 0x000004, "Wrong alignment on ThreatCloud_GetNeighborClouds");
static_assert(sizeof(ThreatCloud_GetNeighborClouds) == 0x00000C, "Wrong size on ThreatCloud_GetNeighborClouds");
static_assert(offsetof(ThreatCloud_GetNeighborClouds, NeighborClouds) == 0x000000, "Member 'ThreatCloud_GetNeighborClouds::NeighborClouds' has a wrong offset!");

// Function FortniteGame.ThreatCloud.GetNumberOfImmediateNeighbors
// 0x0008 (0x0008 - 0x0000)
struct ThreatCloud_GetNumberOfImmediateNeighbors final
{
public:
	bool                                          bHorizontalAndVertical;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDiagonal;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_GetNumberOfImmediateNeighbors) == 0x000004, "Wrong alignment on ThreatCloud_GetNumberOfImmediateNeighbors");
static_assert(sizeof(ThreatCloud_GetNumberOfImmediateNeighbors) == 0x000008, "Wrong size on ThreatCloud_GetNumberOfImmediateNeighbors");
static_assert(offsetof(ThreatCloud_GetNumberOfImmediateNeighbors, bHorizontalAndVertical) == 0x000000, "Member 'ThreatCloud_GetNumberOfImmediateNeighbors::bHorizontalAndVertical' has a wrong offset!");
static_assert(offsetof(ThreatCloud_GetNumberOfImmediateNeighbors, bDiagonal) == 0x000001, "Member 'ThreatCloud_GetNumberOfImmediateNeighbors::bDiagonal' has a wrong offset!");
static_assert(offsetof(ThreatCloud_GetNumberOfImmediateNeighbors, ReturnValue) == 0x000004, "Member 'ThreatCloud_GetNumberOfImmediateNeighbors::ReturnValue' has a wrong offset!");

// Function FortniteGame.ThreatCloud.GetNumberOfSecondaryNeighbors
// 0x0004 (0x0004 - 0x0000)
struct ThreatCloud_GetNumberOfSecondaryNeighbors final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_GetNumberOfSecondaryNeighbors) == 0x000004, "Wrong alignment on ThreatCloud_GetNumberOfSecondaryNeighbors");
static_assert(sizeof(ThreatCloud_GetNumberOfSecondaryNeighbors) == 0x000004, "Wrong size on ThreatCloud_GetNumberOfSecondaryNeighbors");
static_assert(offsetof(ThreatCloud_GetNumberOfSecondaryNeighbors, ReturnValue) == 0x000000, "Member 'ThreatCloud_GetNumberOfSecondaryNeighbors::ReturnValue' has a wrong offset!");

// Function FortniteGame.ThreatCloud.GetRandomFloat1
// 0x0004 (0x0004 - 0x0000)
struct ThreatCloud_GetRandomFloat1 final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_GetRandomFloat1) == 0x000004, "Wrong alignment on ThreatCloud_GetRandomFloat1");
static_assert(sizeof(ThreatCloud_GetRandomFloat1) == 0x000004, "Wrong size on ThreatCloud_GetRandomFloat1");
static_assert(offsetof(ThreatCloud_GetRandomFloat1, ReturnValue) == 0x000000, "Member 'ThreatCloud_GetRandomFloat1::ReturnValue' has a wrong offset!");

// Function FortniteGame.ThreatCloud.GetRandomFloat2
// 0x0004 (0x0004 - 0x0000)
struct ThreatCloud_GetRandomFloat2 final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_GetRandomFloat2) == 0x000004, "Wrong alignment on ThreatCloud_GetRandomFloat2");
static_assert(sizeof(ThreatCloud_GetRandomFloat2) == 0x000004, "Wrong size on ThreatCloud_GetRandomFloat2");
static_assert(offsetof(ThreatCloud_GetRandomFloat2, ReturnValue) == 0x000000, "Member 'ThreatCloud_GetRandomFloat2::ReturnValue' has a wrong offset!");

// Function FortniteGame.ThreatCloud.GetRandomFloat3
// 0x0004 (0x0004 - 0x0000)
struct ThreatCloud_GetRandomFloat3 final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_GetRandomFloat3) == 0x000004, "Wrong alignment on ThreatCloud_GetRandomFloat3");
static_assert(sizeof(ThreatCloud_GetRandomFloat3) == 0x000004, "Wrong size on ThreatCloud_GetRandomFloat3");
static_assert(offsetof(ThreatCloud_GetRandomFloat3, ReturnValue) == 0x000000, "Member 'ThreatCloud_GetRandomFloat3::ReturnValue' has a wrong offset!");

// Function FortniteGame.ThreatCloud.GetRandomFloat4
// 0x0004 (0x0004 - 0x0000)
struct ThreatCloud_GetRandomFloat4 final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_GetRandomFloat4) == 0x000004, "Wrong alignment on ThreatCloud_GetRandomFloat4");
static_assert(sizeof(ThreatCloud_GetRandomFloat4) == 0x000004, "Wrong size on ThreatCloud_GetRandomFloat4");
static_assert(offsetof(ThreatCloud_GetRandomFloat4, ReturnValue) == 0x000000, "Member 'ThreatCloud_GetRandomFloat4::ReturnValue' has a wrong offset!");

// Function FortniteGame.ThreatCloud.GetThreatVolume
// 0x001C (0x001C - 0x0000)
struct ThreatCloud_GetThreatVolume final
{
public:
	struct FBox                                   ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThreatCloud_GetThreatVolume) == 0x000004, "Wrong alignment on ThreatCloud_GetThreatVolume");
static_assert(sizeof(ThreatCloud_GetThreatVolume) == 0x00001C, "Wrong size on ThreatCloud_GetThreatVolume");
static_assert(offsetof(ThreatCloud_GetThreatVolume, ReturnValue) == 0x000000, "Member 'ThreatCloud_GetThreatVolume::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.BroadcastExplosion
// 0x0018 (0x0018 - 0x0000)
struct FortGameplayEffectDeliveryActor_BroadcastExplosion final
{
public:
	TArray<class AActor*>                         HitActors;                                         // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     HitResults;                                        // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_BroadcastExplosion) == 0x000004, "Wrong alignment on FortGameplayEffectDeliveryActor_BroadcastExplosion");
static_assert(sizeof(FortGameplayEffectDeliveryActor_BroadcastExplosion) == 0x000018, "Wrong size on FortGameplayEffectDeliveryActor_BroadcastExplosion");
static_assert(offsetof(FortGameplayEffectDeliveryActor_BroadcastExplosion, HitActors) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_BroadcastExplosion::HitActors' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_BroadcastExplosion, HitResults) == 0x00000C, "Member 'FortGameplayEffectDeliveryActor_BroadcastExplosion::HitResults' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.OnComponentOverlap
// 0x0090 (0x0090 - 0x0000)
struct FortGameplayEffectDeliveryActor_OnComponentOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0010(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_OnComponentOverlap) == 0x000004, "Wrong alignment on FortGameplayEffectDeliveryActor_OnComponentOverlap");
static_assert(sizeof(FortGameplayEffectDeliveryActor_OnComponentOverlap) == 0x000090, "Wrong size on FortGameplayEffectDeliveryActor_OnComponentOverlap");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentOverlap, OtherActor) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_OnComponentOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentOverlap, OtherComp) == 0x000004, "Member 'FortGameplayEffectDeliveryActor_OnComponentOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentOverlap, OtherBodyIndex) == 0x000008, "Member 'FortGameplayEffectDeliveryActor_OnComponentOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentOverlap, bFromSweep) == 0x00000C, "Member 'FortGameplayEffectDeliveryActor_OnComponentOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentOverlap, SweepResult) == 0x000010, "Member 'FortGameplayEffectDeliveryActor_OnComponentOverlap::SweepResult' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.OnComponentTouch
// 0x0094 (0x0094 - 0x0000)
struct FortGameplayEffectDeliveryActor_OnComponentTouch final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0014(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_OnComponentTouch) == 0x000004, "Wrong alignment on FortGameplayEffectDeliveryActor_OnComponentTouch");
static_assert(sizeof(FortGameplayEffectDeliveryActor_OnComponentTouch) == 0x000094, "Wrong size on FortGameplayEffectDeliveryActor_OnComponentTouch");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentTouch, OtherActor) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_OnComponentTouch::OtherActor' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentTouch, OtherComp) == 0x000004, "Member 'FortGameplayEffectDeliveryActor_OnComponentTouch::OtherComp' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentTouch, NormalImpulse) == 0x000008, "Member 'FortGameplayEffectDeliveryActor_OnComponentTouch::NormalImpulse' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnComponentTouch, Hit) == 0x000014, "Member 'FortGameplayEffectDeliveryActor_OnComponentTouch::Hit' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.OnExploded
// 0x0018 (0x0018 - 0x0000)
struct FortGameplayEffectDeliveryActor_OnExploded final
{
public:
	TArray<class AActor*>                         HitActors;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     HitResults;                                        // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_OnExploded) == 0x000004, "Wrong alignment on FortGameplayEffectDeliveryActor_OnExploded");
static_assert(sizeof(FortGameplayEffectDeliveryActor_OnExploded) == 0x000018, "Wrong size on FortGameplayEffectDeliveryActor_OnExploded");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnExploded, HitActors) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_OnExploded::HitActors' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnExploded, HitResults) == 0x00000C, "Member 'FortGameplayEffectDeliveryActor_OnExploded::HitResults' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.OnTouched
// 0x0088 (0x0088 - 0x0000)
struct FortGameplayEffectDeliveryActor_OnTouched final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_OnTouched) == 0x000004, "Wrong alignment on FortGameplayEffectDeliveryActor_OnTouched");
static_assert(sizeof(FortGameplayEffectDeliveryActor_OnTouched) == 0x000088, "Wrong size on FortGameplayEffectDeliveryActor_OnTouched");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnTouched, OtherActor) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_OnTouched::OtherActor' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnTouched, OtherComp) == 0x000004, "Member 'FortGameplayEffectDeliveryActor_OnTouched::OtherComp' has a wrong offset!");
static_assert(offsetof(FortGameplayEffectDeliveryActor_OnTouched, HitResult) == 0x000008, "Member 'FortGameplayEffectDeliveryActor_OnTouched::HitResult' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.SetCollisionComponent
// 0x0004 (0x0004 - 0x0000)
struct FortGameplayEffectDeliveryActor_SetCollisionComponent final
{
public:
	class UPrimitiveComponent*                    NewCollisionComponent;                             // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_SetCollisionComponent) == 0x000004, "Wrong alignment on FortGameplayEffectDeliveryActor_SetCollisionComponent");
static_assert(sizeof(FortGameplayEffectDeliveryActor_SetCollisionComponent) == 0x000004, "Wrong size on FortGameplayEffectDeliveryActor_SetCollisionComponent");
static_assert(offsetof(FortGameplayEffectDeliveryActor_SetCollisionComponent, NewCollisionComponent) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_SetCollisionComponent::NewCollisionComponent' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.SetIgnoreInstigatorCollision
// 0x0001 (0x0001 - 0x0000)
struct FortGameplayEffectDeliveryActor_SetIgnoreInstigatorCollision final
{
public:
	bool                                          bShouldIgnore;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_SetIgnoreInstigatorCollision) == 0x000001, "Wrong alignment on FortGameplayEffectDeliveryActor_SetIgnoreInstigatorCollision");
static_assert(sizeof(FortGameplayEffectDeliveryActor_SetIgnoreInstigatorCollision) == 0x000001, "Wrong size on FortGameplayEffectDeliveryActor_SetIgnoreInstigatorCollision");
static_assert(offsetof(FortGameplayEffectDeliveryActor_SetIgnoreInstigatorCollision, bShouldIgnore) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_SetIgnoreInstigatorCollision::bShouldIgnore' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.GetCollisionComponent
// 0x0004 (0x0004 - 0x0000)
struct FortGameplayEffectDeliveryActor_GetCollisionComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0004)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_GetCollisionComponent) == 0x000004, "Wrong alignment on FortGameplayEffectDeliveryActor_GetCollisionComponent");
static_assert(sizeof(FortGameplayEffectDeliveryActor_GetCollisionComponent) == 0x000004, "Wrong size on FortGameplayEffectDeliveryActor_GetCollisionComponent");
static_assert(offsetof(FortGameplayEffectDeliveryActor_GetCollisionComponent, ReturnValue) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_GetCollisionComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayEffectDeliveryActor.IsBeingKilled
// 0x0001 (0x0001 - 0x0000)
struct FortGameplayEffectDeliveryActor_IsBeingKilled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayEffectDeliveryActor_IsBeingKilled) == 0x000001, "Wrong alignment on FortGameplayEffectDeliveryActor_IsBeingKilled");
static_assert(sizeof(FortGameplayEffectDeliveryActor_IsBeingKilled) == 0x000001, "Wrong size on FortGameplayEffectDeliveryActor_IsBeingKilled");
static_assert(offsetof(FortGameplayEffectDeliveryActor_IsBeingKilled, ReturnValue) == 0x000000, "Member 'FortGameplayEffectDeliveryActor_IsBeingKilled::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.HasStoppedMoving
// 0x0001 (0x0001 - 0x0000)
struct FortProjectileBase_HasStoppedMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileBase_HasStoppedMoving) == 0x000001, "Wrong alignment on FortProjectileBase_HasStoppedMoving");
static_assert(sizeof(FortProjectileBase_HasStoppedMoving) == 0x000001, "Wrong size on FortProjectileBase_HasStoppedMoving");
static_assert(offsetof(FortProjectileBase_HasStoppedMoving, ReturnValue) == 0x000000, "Member 'FortProjectileBase_HasStoppedMoving::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.OnBounce
// 0x0080 (0x0080 - 0x0000)
struct FortProjectileBase_OnBounce final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileBase_OnBounce) == 0x000004, "Wrong alignment on FortProjectileBase_OnBounce");
static_assert(sizeof(FortProjectileBase_OnBounce) == 0x000080, "Wrong size on FortProjectileBase_OnBounce");
static_assert(offsetof(FortProjectileBase_OnBounce, Hit) == 0x000000, "Member 'FortProjectileBase_OnBounce::Hit' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.OnBounceCallback
// 0x008C (0x008C - 0x0000)
struct FortProjectileBase_OnBounceCallback final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ImpactVelocity;                                    // 0x0080(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileBase_OnBounceCallback) == 0x000004, "Wrong alignment on FortProjectileBase_OnBounceCallback");
static_assert(sizeof(FortProjectileBase_OnBounceCallback) == 0x00008C, "Wrong size on FortProjectileBase_OnBounceCallback");
static_assert(offsetof(FortProjectileBase_OnBounceCallback, Hit) == 0x000000, "Member 'FortProjectileBase_OnBounceCallback::Hit' has a wrong offset!");
static_assert(offsetof(FortProjectileBase_OnBounceCallback, ImpactVelocity) == 0x000080, "Member 'FortProjectileBase_OnBounceCallback::ImpactVelocity' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.OnStop
// 0x0080 (0x0080 - 0x0000)
struct FortProjectileBase_OnStop final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileBase_OnStop) == 0x000004, "Wrong alignment on FortProjectileBase_OnStop");
static_assert(sizeof(FortProjectileBase_OnStop) == 0x000080, "Wrong size on FortProjectileBase_OnStop");
static_assert(offsetof(FortProjectileBase_OnStop, Hit) == 0x000000, "Member 'FortProjectileBase_OnStop::Hit' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.OnStopCallback
// 0x0080 (0x0080 - 0x0000)
struct FortProjectileBase_OnStopCallback final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileBase_OnStopCallback) == 0x000004, "Wrong alignment on FortProjectileBase_OnStopCallback");
static_assert(sizeof(FortProjectileBase_OnStopCallback) == 0x000080, "Wrong size on FortProjectileBase_OnStopCallback");
static_assert(offsetof(FortProjectileBase_OnStopCallback, Hit) == 0x000000, "Member 'FortProjectileBase_OnStopCallback::Hit' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.SetGravityScale
// 0x0004 (0x0004 - 0x0000)
struct FortProjectileBase_SetGravityScale final
{
public:
	float                                         InitialGravityScale;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileBase_SetGravityScale) == 0x000004, "Wrong alignment on FortProjectileBase_SetGravityScale");
static_assert(sizeof(FortProjectileBase_SetGravityScale) == 0x000004, "Wrong size on FortProjectileBase_SetGravityScale");
static_assert(offsetof(FortProjectileBase_SetGravityScale, InitialGravityScale) == 0x000000, "Member 'FortProjectileBase_SetGravityScale::InitialGravityScale' has a wrong offset!");

// Function FortniteGame.FortProjectileBase.GetGravityScale
// 0x0004 (0x0004 - 0x0000)
struct FortProjectileBase_GetGravityScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectileBase_GetGravityScale) == 0x000004, "Wrong alignment on FortProjectileBase_GetGravityScale");
static_assert(sizeof(FortProjectileBase_GetGravityScale) == 0x000004, "Wrong size on FortProjectileBase_GetGravityScale");
static_assert(offsetof(FortProjectileBase_GetGravityScale, ReturnValue) == 0x000000, "Member 'FortProjectileBase_GetGravityScale::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortProjectile_MOBATurret.OnHomingTargetDied
// 0x0034 (0x0034 - 0x0000)
struct FortProjectile_MOBATurret_OnHomingTargetDied final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Momentum;                                          // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortProjectile_MOBATurret_OnHomingTargetDied) == 0x000004, "Wrong alignment on FortProjectile_MOBATurret_OnHomingTargetDied");
static_assert(sizeof(FortProjectile_MOBATurret_OnHomingTargetDied) == 0x000034, "Wrong size on FortProjectile_MOBATurret_OnHomingTargetDied");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, DamagedActor) == 0x000000, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::DamagedActor' has a wrong offset!");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, Damage) == 0x000004, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::Damage' has a wrong offset!");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, InstigatedBy) == 0x000008, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::InstigatedBy' has a wrong offset!");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, DamageCauser) == 0x00000C, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::DamageCauser' has a wrong offset!");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, HitLocation) == 0x000010, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::HitLocation' has a wrong offset!");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, FHitComponent) == 0x00001C, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::FHitComponent' has a wrong offset!");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, BoneName) == 0x000020, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::BoneName' has a wrong offset!");
static_assert(offsetof(FortProjectile_MOBATurret_OnHomingTargetDied, Momentum) == 0x000028, "Member 'FortProjectile_MOBATurret_OnHomingTargetDied::Momentum' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.ActivateThreatClouds
// 0x000C (0x000C - 0x0000)
struct FortThreatVisualsManager_ActivateThreatClouds final
{
public:
	TArray<struct FThreatGridIndex>               GridIndices;                                       // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_ActivateThreatClouds) == 0x000004, "Wrong alignment on FortThreatVisualsManager_ActivateThreatClouds");
static_assert(sizeof(FortThreatVisualsManager_ActivateThreatClouds) == 0x00000C, "Wrong size on FortThreatVisualsManager_ActivateThreatClouds");
static_assert(offsetof(FortThreatVisualsManager_ActivateThreatClouds, GridIndices) == 0x000000, "Member 'FortThreatVisualsManager_ActivateThreatClouds::GridIndices' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.BeginThreatVisualsPrecursor
// 0x0010 (0x0010 - 0x0000)
struct FortThreatVisualsManager_BeginThreatVisualsPrecursor final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ThreatLocation;                                    // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_BeginThreatVisualsPrecursor) == 0x000004, "Wrong alignment on FortThreatVisualsManager_BeginThreatVisualsPrecursor");
static_assert(sizeof(FortThreatVisualsManager_BeginThreatVisualsPrecursor) == 0x000010, "Wrong size on FortThreatVisualsManager_BeginThreatVisualsPrecursor");
static_assert(offsetof(FortThreatVisualsManager_BeginThreatVisualsPrecursor, SourceActor) == 0x000000, "Member 'FortThreatVisualsManager_BeginThreatVisualsPrecursor::SourceActor' has a wrong offset!");
static_assert(offsetof(FortThreatVisualsManager_BeginThreatVisualsPrecursor, ThreatLocation) == 0x000004, "Member 'FortThreatVisualsManager_BeginThreatVisualsPrecursor::ThreatLocation' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.DeactivateThreatClouds
// 0x0014 (0x0014 - 0x0000)
struct FortThreatVisualsManager_DeactivateThreatClouds final
{
public:
	EFortThreatDeactivationType                   DeactivationType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FThreatGridIndex>               GridIndices;                                       // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         DeactivationDuration;                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_DeactivateThreatClouds) == 0x000004, "Wrong alignment on FortThreatVisualsManager_DeactivateThreatClouds");
static_assert(sizeof(FortThreatVisualsManager_DeactivateThreatClouds) == 0x000014, "Wrong size on FortThreatVisualsManager_DeactivateThreatClouds");
static_assert(offsetof(FortThreatVisualsManager_DeactivateThreatClouds, DeactivationType) == 0x000000, "Member 'FortThreatVisualsManager_DeactivateThreatClouds::DeactivationType' has a wrong offset!");
static_assert(offsetof(FortThreatVisualsManager_DeactivateThreatClouds, GridIndices) == 0x000004, "Member 'FortThreatVisualsManager_DeactivateThreatClouds::GridIndices' has a wrong offset!");
static_assert(offsetof(FortThreatVisualsManager_DeactivateThreatClouds, DeactivationDuration) == 0x000010, "Member 'FortThreatVisualsManager_DeactivateThreatClouds::DeactivationDuration' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.OnBeginThreatVisualsPrecursor
// 0x0010 (0x0010 - 0x0000)
struct FortThreatVisualsManager_OnBeginThreatVisualsPrecursor final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_OnBeginThreatVisualsPrecursor) == 0x000004, "Wrong alignment on FortThreatVisualsManager_OnBeginThreatVisualsPrecursor");
static_assert(sizeof(FortThreatVisualsManager_OnBeginThreatVisualsPrecursor) == 0x000010, "Wrong size on FortThreatVisualsManager_OnBeginThreatVisualsPrecursor");
static_assert(offsetof(FortThreatVisualsManager_OnBeginThreatVisualsPrecursor, SourceActor) == 0x000000, "Member 'FortThreatVisualsManager_OnBeginThreatVisualsPrecursor::SourceActor' has a wrong offset!");
static_assert(offsetof(FortThreatVisualsManager_OnBeginThreatVisualsPrecursor, EndLocation) == 0x000004, "Member 'FortThreatVisualsManager_OnBeginThreatVisualsPrecursor::EndLocation' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.OnThreatCloudsChanged
// 0x000C (0x000C - 0x0000)
struct FortThreatVisualsManager_OnThreatCloudsChanged final
{
public:
	TArray<struct FThreatLocationInfo>            ThreatLocationInfo;                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_OnThreatCloudsChanged) == 0x000004, "Wrong alignment on FortThreatVisualsManager_OnThreatCloudsChanged");
static_assert(sizeof(FortThreatVisualsManager_OnThreatCloudsChanged) == 0x00000C, "Wrong size on FortThreatVisualsManager_OnThreatCloudsChanged");
static_assert(offsetof(FortThreatVisualsManager_OnThreatCloudsChanged, ThreatLocationInfo) == 0x000000, "Member 'FortThreatVisualsManager_OnThreatCloudsChanged::ThreatLocationInfo' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.GetThreatCloud
// 0x0058 (0x0058 - 0x0000)
struct FortThreatVisualsManager_GetThreatCloud final
{
public:
	struct FThreatLocationInfo                    ThreatLocInfo;                                     // 0x0000(0x0054)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AThreatCloud*                           ReturnValue;                                       // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_GetThreatCloud) == 0x000004, "Wrong alignment on FortThreatVisualsManager_GetThreatCloud");
static_assert(sizeof(FortThreatVisualsManager_GetThreatCloud) == 0x000058, "Wrong size on FortThreatVisualsManager_GetThreatCloud");
static_assert(offsetof(FortThreatVisualsManager_GetThreatCloud, ThreatLocInfo) == 0x000000, "Member 'FortThreatVisualsManager_GetThreatCloud::ThreatLocInfo' has a wrong offset!");
static_assert(offsetof(FortThreatVisualsManager_GetThreatCloud, ReturnValue) == 0x000054, "Member 'FortThreatVisualsManager_GetThreatCloud::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.GetThreatClouds
// 0x000C (0x000C - 0x0000)
struct FortThreatVisualsManager_GetThreatClouds final
{
public:
	TArray<struct FThreatLocationInfo>            ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_GetThreatClouds) == 0x000004, "Wrong alignment on FortThreatVisualsManager_GetThreatClouds");
static_assert(sizeof(FortThreatVisualsManager_GetThreatClouds) == 0x00000C, "Wrong size on FortThreatVisualsManager_GetThreatClouds");
static_assert(offsetof(FortThreatVisualsManager_GetThreatClouds, ReturnValue) == 0x000000, "Member 'FortThreatVisualsManager_GetThreatClouds::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortThreatVisualsManager.StormsExist
// 0x0001 (0x0001 - 0x0000)
struct FortThreatVisualsManager_StormsExist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatVisualsManager_StormsExist) == 0x000001, "Wrong alignment on FortThreatVisualsManager_StormsExist");
static_assert(sizeof(FortThreatVisualsManager_StormsExist) == 0x000001, "Wrong size on FortThreatVisualsManager_StormsExist");
static_assert(offsetof(FortThreatVisualsManager_StormsExist, ReturnValue) == 0x000000, "Member 'FortThreatVisualsManager_StormsExist::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.Next
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterSequence_Next final
{
public:
	EFortEncounterSequenceResult                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_Next) == 0x000001, "Wrong alignment on FortAIEncounterSequence_Next");
static_assert(sizeof(FortAIEncounterSequence_Next) == 0x000001, "Wrong size on FortAIEncounterSequence_Next");
static_assert(offsetof(FortAIEncounterSequence_Next, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_Next::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.Previous
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterSequence_Previous final
{
public:
	EFortEncounterSequenceResult                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_Previous) == 0x000001, "Wrong alignment on FortAIEncounterSequence_Previous");
static_assert(sizeof(FortAIEncounterSequence_Previous) == 0x000001, "Wrong size on FortAIEncounterSequence_Previous");
static_assert(offsetof(FortAIEncounterSequence_Previous, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_Previous::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.StartCurrentEncounter
// 0x0084 (0x0084 - 0x0000)
struct FortAIEncounterSequence_StartCurrentEncounter final
{
public:
	EFortEncounterSequenceResult                  OutRequestResult;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         TargetActors;                                      // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UFortAIAssignmentSettings*              AssignmentSettings;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         OverrideEnvironmentQueryInfo;                      // 0x0014(0x001C)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 OptionalQueryActor;                                // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InjectedTags;                                      // 0x0034(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 EncounterSettings;                                 // 0x004C(0x0030)(Parm, NativeAccessSpecifierPublic)
	int32                                         ActivationDelay;                                   // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_StartCurrentEncounter) == 0x000004, "Wrong alignment on FortAIEncounterSequence_StartCurrentEncounter");
static_assert(sizeof(FortAIEncounterSequence_StartCurrentEncounter) == 0x000084, "Wrong size on FortAIEncounterSequence_StartCurrentEncounter");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, OutRequestResult) == 0x000000, "Member 'FortAIEncounterSequence_StartCurrentEncounter::OutRequestResult' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, TargetActors) == 0x000004, "Member 'FortAIEncounterSequence_StartCurrentEncounter::TargetActors' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, AssignmentSettings) == 0x000010, "Member 'FortAIEncounterSequence_StartCurrentEncounter::AssignmentSettings' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, OverrideEnvironmentQueryInfo) == 0x000014, "Member 'FortAIEncounterSequence_StartCurrentEncounter::OverrideEnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, OptionalQueryActor) == 0x000030, "Member 'FortAIEncounterSequence_StartCurrentEncounter::OptionalQueryActor' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, InjectedTags) == 0x000034, "Member 'FortAIEncounterSequence_StartCurrentEncounter::InjectedTags' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, EncounterSettings) == 0x00004C, "Member 'FortAIEncounterSequence_StartCurrentEncounter::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, ActivationDelay) == 0x00007C, "Member 'FortAIEncounterSequence_StartCurrentEncounter::ActivationDelay' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_StartCurrentEncounter, ReturnValue) == 0x000080, "Member 'FortAIEncounterSequence_StartCurrentEncounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.EncounterBelongsToSequence
// 0x0008 (0x0008 - 0x0000)
struct FortAIEncounterSequence_EncounterBelongsToSequence final
{
public:
	class UFortAIEncounterInfo*                   InEncounter;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAIEncounterSequence_EncounterBelongsToSequence) == 0x000004, "Wrong alignment on FortAIEncounterSequence_EncounterBelongsToSequence");
static_assert(sizeof(FortAIEncounterSequence_EncounterBelongsToSequence) == 0x000008, "Wrong size on FortAIEncounterSequence_EncounterBelongsToSequence");
static_assert(offsetof(FortAIEncounterSequence_EncounterBelongsToSequence, InEncounter) == 0x000000, "Member 'FortAIEncounterSequence_EncounterBelongsToSequence::InEncounter' has a wrong offset!");
static_assert(offsetof(FortAIEncounterSequence_EncounterBelongsToSequence, ReturnValue) == 0x000004, "Member 'FortAIEncounterSequence_EncounterBelongsToSequence::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.GetCurrentEncounter
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterSequence_GetCurrentEncounter final
{
public:
	class UFortAIEncounterInfo*                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_GetCurrentEncounter) == 0x000004, "Wrong alignment on FortAIEncounterSequence_GetCurrentEncounter");
static_assert(sizeof(FortAIEncounterSequence_GetCurrentEncounter) == 0x000004, "Wrong size on FortAIEncounterSequence_GetCurrentEncounter");
static_assert(offsetof(FortAIEncounterSequence_GetCurrentEncounter, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_GetCurrentEncounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.GetEncounterIndexInSequence
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterSequence_GetEncounterIndexInSequence final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_GetEncounterIndexInSequence) == 0x000004, "Wrong alignment on FortAIEncounterSequence_GetEncounterIndexInSequence");
static_assert(sizeof(FortAIEncounterSequence_GetEncounterIndexInSequence) == 0x000004, "Wrong size on FortAIEncounterSequence_GetEncounterIndexInSequence");
static_assert(offsetof(FortAIEncounterSequence_GetEncounterIndexInSequence, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_GetEncounterIndexInSequence::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.GetNumEncountersInSequence
// 0x0004 (0x0004 - 0x0000)
struct FortAIEncounterSequence_GetNumEncountersInSequence final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_GetNumEncountersInSequence) == 0x000004, "Wrong alignment on FortAIEncounterSequence_GetNumEncountersInSequence");
static_assert(sizeof(FortAIEncounterSequence_GetNumEncountersInSequence) == 0x000004, "Wrong size on FortAIEncounterSequence_GetNumEncountersInSequence");
static_assert(offsetof(FortAIEncounterSequence_GetNumEncountersInSequence, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_GetNumEncountersInSequence::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.HasEncounter
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterSequence_HasEncounter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_HasEncounter) == 0x000001, "Wrong alignment on FortAIEncounterSequence_HasEncounter");
static_assert(sizeof(FortAIEncounterSequence_HasEncounter) == 0x000001, "Wrong size on FortAIEncounterSequence_HasEncounter");
static_assert(offsetof(FortAIEncounterSequence_HasEncounter, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_HasEncounter::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIEncounterSequence.IsOnFinalIndexInSequence
// 0x0001 (0x0001 - 0x0000)
struct FortAIEncounterSequence_IsOnFinalIndexInSequence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIEncounterSequence_IsOnFinalIndexInSequence) == 0x000001, "Wrong alignment on FortAIEncounterSequence_IsOnFinalIndexInSequence");
static_assert(sizeof(FortAIEncounterSequence_IsOnFinalIndexInSequence) == 0x000001, "Wrong size on FortAIEncounterSequence_IsOnFinalIndexInSequence");
static_assert(offsetof(FortAIEncounterSequence_IsOnFinalIndexInSequence, ReturnValue) == 0x000000, "Member 'FortAIEncounterSequence_IsOnFinalIndexInSequence::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAIFunctionLibrary.MakeNoiseEvent
// 0x0008 (0x0008 - 0x0000)
struct FortAIFunctionLibrary_MakeNoiseEvent final
{
public:
	class AActor*                                 NoiseMaker;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIFunctionLibrary_MakeNoiseEvent) == 0x000004, "Wrong alignment on FortAIFunctionLibrary_MakeNoiseEvent");
static_assert(sizeof(FortAIFunctionLibrary_MakeNoiseEvent) == 0x000008, "Wrong size on FortAIFunctionLibrary_MakeNoiseEvent");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEvent, NoiseMaker) == 0x000000, "Member 'FortAIFunctionLibrary_MakeNoiseEvent::NoiseMaker' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEvent, MaxRange) == 0x000004, "Member 'FortAIFunctionLibrary_MakeNoiseEvent::MaxRange' has a wrong offset!");

// Function FortniteGame.FortAIFunctionLibrary.MakeNoiseEventAtLocation
// 0x0014 (0x0014 - 0x0000)
struct FortAIFunctionLibrary_MakeNoiseEventAtLocation final
{
public:
	class AActor*                                 NoiseMaker;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NoiseLocation;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIFunctionLibrary_MakeNoiseEventAtLocation) == 0x000004, "Wrong alignment on FortAIFunctionLibrary_MakeNoiseEventAtLocation");
static_assert(sizeof(FortAIFunctionLibrary_MakeNoiseEventAtLocation) == 0x000014, "Wrong size on FortAIFunctionLibrary_MakeNoiseEventAtLocation");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEventAtLocation, NoiseMaker) == 0x000000, "Member 'FortAIFunctionLibrary_MakeNoiseEventAtLocation::NoiseMaker' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEventAtLocation, MaxRange) == 0x000004, "Member 'FortAIFunctionLibrary_MakeNoiseEventAtLocation::MaxRange' has a wrong offset!");
static_assert(offsetof(FortAIFunctionLibrary_MakeNoiseEventAtLocation, NoiseLocation) == 0x000008, "Member 'FortAIFunctionLibrary_MakeNoiseEventAtLocation::NoiseLocation' has a wrong offset!");

// Function FortniteGame.FortAIRootAssignmentProviderInterface.GetRootAssignmentIdentifier
// 0x0020 (0x0020 - 0x0000)
struct FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier final
{
public:
	struct FFortAIAssignmentIdentifier            ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier) == 0x000004, "Wrong alignment on FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier");
static_assert(sizeof(FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier) == 0x000020, "Wrong size on FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier");
static_assert(offsetof(FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier, ReturnValue) == 0x000000, "Member 'FortAIRootAssignmentProviderInterface_GetRootAssignmentIdentifier::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISpawnGroup.GetEnemy
// 0x0008 (0x0008 - 0x0000)
struct FortAISpawnGroup_GetEnemy final
{
public:
	int32                                         EnemyIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAIPawnVariant>         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_GetEnemy) == 0x000004, "Wrong alignment on FortAISpawnGroup_GetEnemy");
static_assert(sizeof(FortAISpawnGroup_GetEnemy) == 0x000008, "Wrong size on FortAISpawnGroup_GetEnemy");
static_assert(offsetof(FortAISpawnGroup_GetEnemy, EnemyIndex) == 0x000000, "Member 'FortAISpawnGroup_GetEnemy::EnemyIndex' has a wrong offset!");
static_assert(offsetof(FortAISpawnGroup_GetEnemy, ReturnValue) == 0x000004, "Member 'FortAISpawnGroup_GetEnemy::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISpawnGroup.GetNumberOfEnemies
// 0x0004 (0x0004 - 0x0000)
struct FortAISpawnGroup_GetNumberOfEnemies final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_GetNumberOfEnemies) == 0x000004, "Wrong alignment on FortAISpawnGroup_GetNumberOfEnemies");
static_assert(sizeof(FortAISpawnGroup_GetNumberOfEnemies) == 0x000004, "Wrong size on FortAISpawnGroup_GetNumberOfEnemies");
static_assert(offsetof(FortAISpawnGroup_GetNumberOfEnemies, ReturnValue) == 0x000000, "Member 'FortAISpawnGroup_GetNumberOfEnemies::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISpawnGroup.IsLargeSpawnGroup
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnGroup_IsLargeSpawnGroup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_IsLargeSpawnGroup) == 0x000001, "Wrong alignment on FortAISpawnGroup_IsLargeSpawnGroup");
static_assert(sizeof(FortAISpawnGroup_IsLargeSpawnGroup) == 0x000001, "Wrong size on FortAISpawnGroup_IsLargeSpawnGroup");
static_assert(offsetof(FortAISpawnGroup_IsLargeSpawnGroup, ReturnValue) == 0x000000, "Member 'FortAISpawnGroup_IsLargeSpawnGroup::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISpawnGroup.IsPrototype
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnGroup_IsPrototype final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_IsPrototype) == 0x000001, "Wrong alignment on FortAISpawnGroup_IsPrototype");
static_assert(sizeof(FortAISpawnGroup_IsPrototype) == 0x000001, "Wrong size on FortAISpawnGroup_IsPrototype");
static_assert(offsetof(FortAISpawnGroup_IsPrototype, ReturnValue) == 0x000000, "Member 'FortAISpawnGroup_IsPrototype::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISpawnGroup.IsValidForEnemySpawners
// 0x0001 (0x0001 - 0x0000)
struct FortAISpawnGroup_IsValidForEnemySpawners final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISpawnGroup_IsValidForEnemySpawners) == 0x000001, "Wrong alignment on FortAISpawnGroup_IsValidForEnemySpawners");
static_assert(sizeof(FortAISpawnGroup_IsValidForEnemySpawners) == 0x000001, "Wrong size on FortAISpawnGroup_IsValidForEnemySpawners");
static_assert(offsetof(FortAISpawnGroup_IsValidForEnemySpawners, ReturnValue) == 0x000000, "Member 'FortAISpawnGroup_IsValidForEnemySpawners::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISystem.IsInCone2D
// 0x002C (0x002C - 0x0000)
struct FortAISystem_IsInCone2D final
{
public:
	struct FVector                                ConeOrigin;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ConeDirection;                                     // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         HalfAngle;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationToCheck;                                   // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAISystem_IsInCone2D) == 0x000004, "Wrong alignment on FortAISystem_IsInCone2D");
static_assert(sizeof(FortAISystem_IsInCone2D) == 0x00002C, "Wrong size on FortAISystem_IsInCone2D");
static_assert(offsetof(FortAISystem_IsInCone2D, ConeOrigin) == 0x000000, "Member 'FortAISystem_IsInCone2D::ConeOrigin' has a wrong offset!");
static_assert(offsetof(FortAISystem_IsInCone2D, ConeDirection) == 0x00000C, "Member 'FortAISystem_IsInCone2D::ConeDirection' has a wrong offset!");
static_assert(offsetof(FortAISystem_IsInCone2D, HalfAngle) == 0x000018, "Member 'FortAISystem_IsInCone2D::HalfAngle' has a wrong offset!");
static_assert(offsetof(FortAISystem_IsInCone2D, LocationToCheck) == 0x00001C, "Member 'FortAISystem_IsInCone2D::LocationToCheck' has a wrong offset!");
static_assert(offsetof(FortAISystem_IsInCone2D, ReturnValue) == 0x000028, "Member 'FortAISystem_IsInCone2D::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAISystem.RequestNumberofBTDrivenAIPawns
// 0x0008 (0x0008 - 0x0000)
struct FortAISystem_RequestNumberofBTDrivenAIPawns final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPawns;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAISystem_RequestNumberofBTDrivenAIPawns) == 0x000004, "Wrong alignment on FortAISystem_RequestNumberofBTDrivenAIPawns");
static_assert(sizeof(FortAISystem_RequestNumberofBTDrivenAIPawns) == 0x000008, "Wrong size on FortAISystem_RequestNumberofBTDrivenAIPawns");
static_assert(offsetof(FortAISystem_RequestNumberofBTDrivenAIPawns, WorldContext) == 0x000000, "Member 'FortAISystem_RequestNumberofBTDrivenAIPawns::WorldContext' has a wrong offset!");
static_assert(offsetof(FortAISystem_RequestNumberofBTDrivenAIPawns, NumberOfPawns) == 0x000004, "Member 'FortAISystem_RequestNumberofBTDrivenAIPawns::NumberOfPawns' has a wrong offset!");

// Function FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostAttackWaveCompleted
// 0x0024 (0x0024 - 0x0000)
struct FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildingType;                                      // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMissionsCompleted;                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Succeeded;                                         // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Direction;                                         // 0x0018(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted) == 0x000004, "Wrong alignment on FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted");
static_assert(sizeof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted) == 0x000024, "Wrong size on FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted, SourceBp) == 0x000000, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted, BuildingType) == 0x000004, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted::BuildingType' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted, NumMissionsCompleted) == 0x000010, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted::NumMissionsCompleted' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted, Succeeded) == 0x000014, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted::Succeeded' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted, Direction) == 0x000018, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostAttackWaveCompleted::Direction' has a wrong offset!");

// Function FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostBuildingActivated
// 0x0014 (0x0014 - 0x0000)
struct FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildingType;                                      // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMissionsCompleted;                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated) == 0x000004, "Wrong alignment on FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated");
static_assert(sizeof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated) == 0x000014, "Wrong size on FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated, SourceBp) == 0x000000, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated, BuildingType) == 0x000004, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated::BuildingType' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated, NumMissionsCompleted) == 0x000010, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingActivated::NumMissionsCompleted' has a wrong offset!");

// Function FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostBuildingDefended
// 0x0014 (0x0014 - 0x0000)
struct FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildingType;                                      // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMissionsCompleted;                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended) == 0x000004, "Wrong alignment on FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended");
static_assert(sizeof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended) == 0x000014, "Wrong size on FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended, SourceBp) == 0x000000, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended, BuildingType) == 0x000004, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended::BuildingType' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended, NumMissionsCompleted) == 0x000010, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostBuildingDefended::NumMissionsCompleted' has a wrong offset!");

// Function FortniteGame.FortOutpostAnalytics.FireAnalyticsEvent_OutpostSupplyDropPickedUp
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAnalyticsEventAttribute>   Resourcees;                                        // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp) == 0x000004, "Wrong alignment on FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp");
static_assert(sizeof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp) == 0x000010, "Wrong size on FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp, SourceBp) == 0x000000, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp, Resourcees) == 0x000004, "Member 'FortOutpostAnalytics_FireAnalyticsEvent_OutpostSupplyDropPickedUp::Resourcees' has a wrong offset!");

// Function FortniteGame.FortOnboardingAnalytics.FireAnalyticsEvent_CinematicSkipped
// 0x0004 (0x0004 - 0x0000)
struct FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped) == 0x000004, "Wrong alignment on FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped");
static_assert(sizeof(FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped) == 0x000004, "Wrong size on FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped");
static_assert(offsetof(FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped, SourceBp) == 0x000000, "Member 'FortOnboardingAnalytics_FireAnalyticsEvent_CinematicSkipped::SourceBp' has a wrong offset!");

// Function FortniteGame.FortOnboardingAnalytics.FireAnalyticsEvent_VinderTipPlayed
// 0x0010 (0x0010 - 0x0000)
struct FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VinderTipTag;                                      // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed) == 0x000004, "Wrong alignment on FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed");
static_assert(sizeof(FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed) == 0x000010, "Wrong size on FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed");
static_assert(offsetof(FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed, SourceBp) == 0x000000, "Member 'FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed::SourceBp' has a wrong offset!");
static_assert(offsetof(FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed, VinderTipTag) == 0x000004, "Member 'FortOnboardingAnalytics_FireAnalyticsEvent_VinderTipPlayed::VinderTipTag' has a wrong offset!");

// Function FortniteGame.FortAnalytics.ConstructAnalyticsAttribute
// 0x004C (0x004C - 0x0000)
struct FortAnalytics_ConstructAnalyticsAttribute final
{
public:
	class FString                                 AttributeName;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  FGuidValue;                                        // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolValue;                                         // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAnalyticsEventAttribute           ReturnValue;                                       // 0x0034(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnalytics_ConstructAnalyticsAttribute) == 0x000004, "Wrong alignment on FortAnalytics_ConstructAnalyticsAttribute");
static_assert(sizeof(FortAnalytics_ConstructAnalyticsAttribute) == 0x00004C, "Wrong size on FortAnalytics_ConstructAnalyticsAttribute");
static_assert(offsetof(FortAnalytics_ConstructAnalyticsAttribute, AttributeName) == 0x000000, "Member 'FortAnalytics_ConstructAnalyticsAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(FortAnalytics_ConstructAnalyticsAttribute, StringValue) == 0x00000C, "Member 'FortAnalytics_ConstructAnalyticsAttribute::StringValue' has a wrong offset!");
static_assert(offsetof(FortAnalytics_ConstructAnalyticsAttribute, FGuidValue) == 0x000018, "Member 'FortAnalytics_ConstructAnalyticsAttribute::FGuidValue' has a wrong offset!");
static_assert(offsetof(FortAnalytics_ConstructAnalyticsAttribute, IntValue) == 0x000028, "Member 'FortAnalytics_ConstructAnalyticsAttribute::IntValue' has a wrong offset!");
static_assert(offsetof(FortAnalytics_ConstructAnalyticsAttribute, FloatValue) == 0x00002C, "Member 'FortAnalytics_ConstructAnalyticsAttribute::FloatValue' has a wrong offset!");
static_assert(offsetof(FortAnalytics_ConstructAnalyticsAttribute, BoolValue) == 0x000030, "Member 'FortAnalytics_ConstructAnalyticsAttribute::BoolValue' has a wrong offset!");
static_assert(offsetof(FortAnalytics_ConstructAnalyticsAttribute, ReturnValue) == 0x000034, "Member 'FortAnalytics_ConstructAnalyticsAttribute::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAnalytics.FireAnalyticsEvent_Blueprint
// 0x0028 (0x0028 - 0x0000)
struct FortAnalytics_FireAnalyticsEvent_Blueprint final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAnalyticsEventAttribute           Attribute;                                         // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnalytics_FireAnalyticsEvent_Blueprint) == 0x000004, "Wrong alignment on FortAnalytics_FireAnalyticsEvent_Blueprint");
static_assert(sizeof(FortAnalytics_FireAnalyticsEvent_Blueprint) == 0x000028, "Wrong size on FortAnalytics_FireAnalyticsEvent_Blueprint");
static_assert(offsetof(FortAnalytics_FireAnalyticsEvent_Blueprint, SourceBp) == 0x000000, "Member 'FortAnalytics_FireAnalyticsEvent_Blueprint::SourceBp' has a wrong offset!");
static_assert(offsetof(FortAnalytics_FireAnalyticsEvent_Blueprint, EventName) == 0x000004, "Member 'FortAnalytics_FireAnalyticsEvent_Blueprint::EventName' has a wrong offset!");
static_assert(offsetof(FortAnalytics_FireAnalyticsEvent_Blueprint, Attribute) == 0x000010, "Member 'FortAnalytics_FireAnalyticsEvent_Blueprint::Attribute' has a wrong offset!");

// Function FortniteGame.FortAnalytics.FireAnalyticsEvent_BlueprintArray
// 0x001C (0x001C - 0x0000)
struct FortAnalytics_FireAnalyticsEvent_BlueprintArray final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAnalyticsEventAttribute>   Attributes;                                        // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnalytics_FireAnalyticsEvent_BlueprintArray) == 0x000004, "Wrong alignment on FortAnalytics_FireAnalyticsEvent_BlueprintArray");
static_assert(sizeof(FortAnalytics_FireAnalyticsEvent_BlueprintArray) == 0x00001C, "Wrong size on FortAnalytics_FireAnalyticsEvent_BlueprintArray");
static_assert(offsetof(FortAnalytics_FireAnalyticsEvent_BlueprintArray, SourceBp) == 0x000000, "Member 'FortAnalytics_FireAnalyticsEvent_BlueprintArray::SourceBp' has a wrong offset!");
static_assert(offsetof(FortAnalytics_FireAnalyticsEvent_BlueprintArray, EventName) == 0x000004, "Member 'FortAnalytics_FireAnalyticsEvent_BlueprintArray::EventName' has a wrong offset!");
static_assert(offsetof(FortAnalytics_FireAnalyticsEvent_BlueprintArray, Attributes) == 0x000010, "Member 'FortAnalytics_FireAnalyticsEvent_BlueprintArray::Attributes' has a wrong offset!");

// Function FortniteGame.FortAnalytics.FireMissionAnalyticsEvent_Blueprint
// 0x0028 (0x0028 - 0x0000)
struct FortAnalytics_FireMissionAnalyticsEvent_Blueprint final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAnalyticsEventAttribute           Attribute;                                         // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnalytics_FireMissionAnalyticsEvent_Blueprint) == 0x000004, "Wrong alignment on FortAnalytics_FireMissionAnalyticsEvent_Blueprint");
static_assert(sizeof(FortAnalytics_FireMissionAnalyticsEvent_Blueprint) == 0x000028, "Wrong size on FortAnalytics_FireMissionAnalyticsEvent_Blueprint");
static_assert(offsetof(FortAnalytics_FireMissionAnalyticsEvent_Blueprint, SourceBp) == 0x000000, "Member 'FortAnalytics_FireMissionAnalyticsEvent_Blueprint::SourceBp' has a wrong offset!");
static_assert(offsetof(FortAnalytics_FireMissionAnalyticsEvent_Blueprint, EventName) == 0x000004, "Member 'FortAnalytics_FireMissionAnalyticsEvent_Blueprint::EventName' has a wrong offset!");
static_assert(offsetof(FortAnalytics_FireMissionAnalyticsEvent_Blueprint, Attribute) == 0x000010, "Member 'FortAnalytics_FireMissionAnalyticsEvent_Blueprint::Attribute' has a wrong offset!");

// Function FortniteGame.FortAnalytics.FireMissionAnalyticsEvent_BlueprintArray
// 0x001C (0x001C - 0x0000)
struct FortAnalytics_FireMissionAnalyticsEvent_BlueprintArray final
{
public:
	const class UObject*                          SourceBp;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAnalyticsEventAttribute>   Attributes;                                        // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnalytics_FireMissionAnalyticsEvent_BlueprintArray) == 0x000004, "Wrong alignment on FortAnalytics_FireMissionAnalyticsEvent_BlueprintArray");
static_assert(sizeof(FortAnalytics_FireMissionAnalyticsEvent_BlueprintArray) == 0x00001C, "Wrong size on FortAnalytics_FireMissionAnalyticsEvent_BlueprintArray");
static_assert(offsetof(FortAnalytics_FireMissionAnalyticsEvent_BlueprintArray, SourceBp) == 0x000000, "Member 'FortAnalytics_FireMissionAnalyticsEvent_BlueprintArray::SourceBp' has a wrong offset!");
static_assert(offsetof(FortAnalytics_FireMissionAnalyticsEvent_BlueprintArray, EventName) == 0x000004, "Member 'FortAnalytics_FireMissionAnalyticsEvent_BlueprintArray::EventName' has a wrong offset!");
static_assert(offsetof(FortAnalytics_FireMissionAnalyticsEvent_BlueprintArray, Attributes) == 0x000010, "Member 'FortAnalytics_FireMissionAnalyticsEvent_BlueprintArray::Attributes' has a wrong offset!");

// Function FortniteGame.FortAnimInstance.AnimNotify_LeftFootStep
// 0x0004 (0x0004 - 0x0000)
struct FortAnimInstance_AnimNotify_LeftFootStep final
{
public:
	const class UAnimNotify*                      Notify;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnimInstance_AnimNotify_LeftFootStep) == 0x000004, "Wrong alignment on FortAnimInstance_AnimNotify_LeftFootStep");
static_assert(sizeof(FortAnimInstance_AnimNotify_LeftFootStep) == 0x000004, "Wrong size on FortAnimInstance_AnimNotify_LeftFootStep");
static_assert(offsetof(FortAnimInstance_AnimNotify_LeftFootStep, Notify) == 0x000000, "Member 'FortAnimInstance_AnimNotify_LeftFootStep::Notify' has a wrong offset!");

// Function FortniteGame.FortAnimInstance.AnimNotify_RightFootStep
// 0x0004 (0x0004 - 0x0000)
struct FortAnimInstance_AnimNotify_RightFootStep final
{
public:
	const class UAnimNotify*                      Notify;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnimInstance_AnimNotify_RightFootStep) == 0x000004, "Wrong alignment on FortAnimInstance_AnimNotify_RightFootStep");
static_assert(sizeof(FortAnimInstance_AnimNotify_RightFootStep) == 0x000004, "Wrong size on FortAnimInstance_AnimNotify_RightFootStep");
static_assert(offsetof(FortAnimInstance_AnimNotify_RightFootStep, Notify) == 0x000000, "Member 'FortAnimInstance_AnimNotify_RightFootStep::Notify' has a wrong offset!");

// Function FortniteGame.FortAnimInstance.TryGetFortAIPawn
// 0x0004 (0x0004 - 0x0000)
struct FortAnimInstance_TryGetFortAIPawn final
{
public:
	class AFortAIPawn*                            ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnimInstance_TryGetFortAIPawn) == 0x000004, "Wrong alignment on FortAnimInstance_TryGetFortAIPawn");
static_assert(sizeof(FortAnimInstance_TryGetFortAIPawn) == 0x000004, "Wrong size on FortAnimInstance_TryGetFortAIPawn");
static_assert(offsetof(FortAnimInstance_TryGetFortAIPawn, ReturnValue) == 0x000000, "Member 'FortAnimInstance_TryGetFortAIPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAnimInstance.TryGetFortPawn
// 0x0004 (0x0004 - 0x0000)
struct FortAnimInstance_TryGetFortPawn final
{
public:
	class AFortPawn*                              ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAnimInstance_TryGetFortPawn) == 0x000004, "Wrong alignment on FortAnimInstance_TryGetFortPawn");
static_assert(sizeof(FortAnimInstance_TryGetFortPawn) == 0x000004, "Wrong size on FortAnimInstance_TryGetFortPawn");
static_assert(offsetof(FortAnimInstance_TryGetFortPawn, ReturnValue) == 0x000000, "Member 'FortAnimInstance_TryGetFortPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerAnimGraphInstance.AnimNotify_PlayFireFX
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAnimGraphInstance_AnimNotify_PlayFireFX final
{
public:
	const class UAnimNotify*                      Notify;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAnimGraphInstance_AnimNotify_PlayFireFX) == 0x000004, "Wrong alignment on FortPlayerAnimGraphInstance_AnimNotify_PlayFireFX");
static_assert(sizeof(FortPlayerAnimGraphInstance_AnimNotify_PlayFireFX) == 0x000004, "Wrong size on FortPlayerAnimGraphInstance_AnimNotify_PlayFireFX");
static_assert(offsetof(FortPlayerAnimGraphInstance_AnimNotify_PlayFireFX, Notify) == 0x000000, "Member 'FortPlayerAnimGraphInstance_AnimNotify_PlayFireFX::Notify' has a wrong offset!");

// Function FortniteGame.FortPlayerAnimGraphInstance.AnimNotify_PlaySecondaryFireFX
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAnimGraphInstance_AnimNotify_PlaySecondaryFireFX final
{
public:
	const class UAnimNotify*                      Notify;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAnimGraphInstance_AnimNotify_PlaySecondaryFireFX) == 0x000004, "Wrong alignment on FortPlayerAnimGraphInstance_AnimNotify_PlaySecondaryFireFX");
static_assert(sizeof(FortPlayerAnimGraphInstance_AnimNotify_PlaySecondaryFireFX) == 0x000004, "Wrong size on FortPlayerAnimGraphInstance_AnimNotify_PlaySecondaryFireFX");
static_assert(offsetof(FortPlayerAnimGraphInstance_AnimNotify_PlaySecondaryFireFX, Notify) == 0x000000, "Member 'FortPlayerAnimGraphInstance_AnimNotify_PlaySecondaryFireFX::Notify' has a wrong offset!");

// Function FortniteGame.FortPlayerAnimGraphInstance.AnimNotify_StopFireFX
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerAnimGraphInstance_AnimNotify_StopFireFX final
{
public:
	const class UAnimNotify*                      Notify;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerAnimGraphInstance_AnimNotify_StopFireFX) == 0x000004, "Wrong alignment on FortPlayerAnimGraphInstance_AnimNotify_StopFireFX");
static_assert(sizeof(FortPlayerAnimGraphInstance_AnimNotify_StopFireFX) == 0x000004, "Wrong size on FortPlayerAnimGraphInstance_AnimNotify_StopFireFX");
static_assert(offsetof(FortPlayerAnimGraphInstance_AnimNotify_StopFireFX, Notify) == 0x000000, "Member 'FortPlayerAnimGraphInstance_AnimNotify_StopFireFX::Notify' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_SendQuestStatEvent.SendClientStatEvent
// 0x0018 (0x0018 - 0x0000)
struct FortAsyncAction_SendQuestStatEvent_SendClientStatEvent final
{
public:
	class UFortQuestManager*                      QuestManager_0;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ObjectiveStat_0;                                   // 0x0004(0x000C)(Parm, NativeAccessSpecifierPublic)
	int32                                         Count_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_SendQuestStatEvent*    ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_SendQuestStatEvent_SendClientStatEvent) == 0x000004, "Wrong alignment on FortAsyncAction_SendQuestStatEvent_SendClientStatEvent");
static_assert(sizeof(FortAsyncAction_SendQuestStatEvent_SendClientStatEvent) == 0x000018, "Wrong size on FortAsyncAction_SendQuestStatEvent_SendClientStatEvent");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEvent, QuestManager_0) == 0x000000, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEvent::QuestManager_0' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEvent, ObjectiveStat_0) == 0x000004, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEvent::ObjectiveStat_0' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEvent, Count_0) == 0x000010, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEvent::Count_0' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEvent, ReturnValue) == 0x000014, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEvent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAsyncAction_SendQuestStatEvent.SendClientStatEventWithTags
// 0x0054 (0x0054 - 0x0000)
struct FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags final
{
public:
	class UFortQuestManager*                      QuestManager_0;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetTags_0;                                      // 0x0004(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SourceTags_0;                                      // 0x001C(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ContextTags_0;                                     // 0x0034(0x0018)(Parm, NativeAccessSpecifierPublic)
	int32                                         Count_0;                                           // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAsyncAction_SendQuestStatEvent*    ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags) == 0x000004, "Wrong alignment on FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags");
static_assert(sizeof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags) == 0x000054, "Wrong size on FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags, QuestManager_0) == 0x000000, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags::QuestManager_0' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags, TargetTags_0) == 0x000004, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags::TargetTags_0' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags, SourceTags_0) == 0x00001C, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags::SourceTags_0' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags, ContextTags_0) == 0x000034, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags::ContextTags_0' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags, Count_0) == 0x00004C, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags::Count_0' has a wrong offset!");
static_assert(offsetof(FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags, ReturnValue) == 0x000050, "Member 'FortAsyncAction_SendQuestStatEvent_SendClientStatEventWithTags::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPartyBeaconClient.ClientReconnectResponse
// 0x0001 (0x0001 - 0x0000)
struct FortPartyBeaconClient_ClientReconnectResponse final
{
public:
	EPartyReservationResult                       ReservationResponse;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyBeaconClient_ClientReconnectResponse) == 0x000001, "Wrong alignment on FortPartyBeaconClient_ClientReconnectResponse");
static_assert(sizeof(FortPartyBeaconClient_ClientReconnectResponse) == 0x000001, "Wrong size on FortPartyBeaconClient_ClientReconnectResponse");
static_assert(offsetof(FortPartyBeaconClient_ClientReconnectResponse, ReservationResponse) == 0x000000, "Member 'FortPartyBeaconClient_ClientReconnectResponse::ReservationResponse' has a wrong offset!");

// Function FortniteGame.FortPartyBeaconClient.ServerEmptyServerReservationRequest
// 0x004C (0x004C - 0x0000)
struct FortPartyBeaconClient_ServerEmptyServerReservationRequest final
{
public:
	class FString                                 InSessionId;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEmptyServerReservation                ReservationData;                                   // 0x000C(0x0028)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FPartyReservation                      Reservation;                                       // 0x0034(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyBeaconClient_ServerEmptyServerReservationRequest) == 0x000004, "Wrong alignment on FortPartyBeaconClient_ServerEmptyServerReservationRequest");
static_assert(sizeof(FortPartyBeaconClient_ServerEmptyServerReservationRequest) == 0x00004C, "Wrong size on FortPartyBeaconClient_ServerEmptyServerReservationRequest");
static_assert(offsetof(FortPartyBeaconClient_ServerEmptyServerReservationRequest, InSessionId) == 0x000000, "Member 'FortPartyBeaconClient_ServerEmptyServerReservationRequest::InSessionId' has a wrong offset!");
static_assert(offsetof(FortPartyBeaconClient_ServerEmptyServerReservationRequest, ReservationData) == 0x00000C, "Member 'FortPartyBeaconClient_ServerEmptyServerReservationRequest::ReservationData' has a wrong offset!");
static_assert(offsetof(FortPartyBeaconClient_ServerEmptyServerReservationRequest, Reservation) == 0x000034, "Member 'FortPartyBeaconClient_ServerEmptyServerReservationRequest::Reservation' has a wrong offset!");

// Function FortniteGame.FortPartyBeaconClient.ServerReconnectExistingReservation
// 0x0014 (0x0014 - 0x0000)
struct FortPartyBeaconClient_ServerReconnectExistingReservation final
{
public:
	class FString                                 InSessionId;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       RequestingPlayer;                                  // 0x000C(0x0008)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPartyBeaconClient_ServerReconnectExistingReservation) == 0x000004, "Wrong alignment on FortPartyBeaconClient_ServerReconnectExistingReservation");
static_assert(sizeof(FortPartyBeaconClient_ServerReconnectExistingReservation) == 0x000014, "Wrong size on FortPartyBeaconClient_ServerReconnectExistingReservation");
static_assert(offsetof(FortPartyBeaconClient_ServerReconnectExistingReservation, InSessionId) == 0x000000, "Member 'FortPartyBeaconClient_ServerReconnectExistingReservation::InSessionId' has a wrong offset!");
static_assert(offsetof(FortPartyBeaconClient_ServerReconnectExistingReservation, RequestingPlayer) == 0x00000C, "Member 'FortPartyBeaconClient_ServerReconnectExistingReservation::RequestingPlayer' has a wrong offset!");

// Function FortniteGame.FortConsumableItemDefinition.ConsumeItem
// 0x0058 (0x0058 - 0x0000)
struct FortConsumableItemDefinition_ConsumeItem final
{
public:
	struct FGameplayEventData                     EventData;                                         // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConsumableItemDefinition_ConsumeItem) == 0x000004, "Wrong alignment on FortConsumableItemDefinition_ConsumeItem");
static_assert(sizeof(FortConsumableItemDefinition_ConsumeItem) == 0x000058, "Wrong size on FortConsumableItemDefinition_ConsumeItem");
static_assert(offsetof(FortConsumableItemDefinition_ConsumeItem, EventData) == 0x000000, "Member 'FortConsumableItemDefinition_ConsumeItem::EventData' has a wrong offset!");

// Function FortniteGame.FortConsumableItemDefinition.GetAnimPlayRate
// 0x0004 (0x0004 - 0x0000)
struct FortConsumableItemDefinition_GetAnimPlayRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConsumableItemDefinition_GetAnimPlayRate) == 0x000004, "Wrong alignment on FortConsumableItemDefinition_GetAnimPlayRate");
static_assert(sizeof(FortConsumableItemDefinition_GetAnimPlayRate) == 0x000004, "Wrong size on FortConsumableItemDefinition_GetAnimPlayRate");
static_assert(offsetof(FortConsumableItemDefinition_GetAnimPlayRate, ReturnValue) == 0x000000, "Member 'FortConsumableItemDefinition_GetAnimPlayRate::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortConsumableItemDefinition.GetHealthRestored
// 0x0008 (0x0008 - 0x0000)
struct FortConsumableItemDefinition_GetHealthRestored final
{
public:
	int32                                         ItemLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortConsumableItemDefinition_GetHealthRestored) == 0x000004, "Wrong alignment on FortConsumableItemDefinition_GetHealthRestored");
static_assert(sizeof(FortConsumableItemDefinition_GetHealthRestored) == 0x000008, "Wrong size on FortConsumableItemDefinition_GetHealthRestored");
static_assert(offsetof(FortConsumableItemDefinition_GetHealthRestored, ItemLevel) == 0x000000, "Member 'FortConsumableItemDefinition_GetHealthRestored::ItemLevel' has a wrong offset!");
static_assert(offsetof(FortConsumableItemDefinition_GetHealthRestored, ReturnValue) == 0x000004, "Member 'FortConsumableItemDefinition_GetHealthRestored::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterCamera.SetTileFocus
// 0x0004 (0x0004 - 0x0000)
struct FortTheaterCamera_SetTileFocus final
{
public:
	class AFortTheaterMapTile*                    TargetTile;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterCamera_SetTileFocus) == 0x000004, "Wrong alignment on FortTheaterCamera_SetTileFocus");
static_assert(sizeof(FortTheaterCamera_SetTileFocus) == 0x000004, "Wrong size on FortTheaterCamera_SetTileFocus");
static_assert(offsetof(FortTheaterCamera_SetTileFocus, TargetTile) == 0x000000, "Member 'FortTheaterCamera_SetTileFocus::TargetTile' has a wrong offset!");

// Function FortniteGame.FortTheaterCamera.LimitToTheater
// 0x0018 (0x0018 - 0x0000)
struct FortTheaterCamera_LimitToTheater final
{
public:
	struct FVector                                DesiredPosition;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterCamera_LimitToTheater) == 0x000004, "Wrong alignment on FortTheaterCamera_LimitToTheater");
static_assert(sizeof(FortTheaterCamera_LimitToTheater) == 0x000018, "Wrong size on FortTheaterCamera_LimitToTheater");
static_assert(offsetof(FortTheaterCamera_LimitToTheater, DesiredPosition) == 0x000000, "Member 'FortTheaterCamera_LimitToTheater::DesiredPosition' has a wrong offset!");
static_assert(offsetof(FortTheaterCamera_LimitToTheater, ReturnValue) == 0x00000C, "Member 'FortTheaterCamera_LimitToTheater::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.GetItemCollector
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvP_GetItemCollector final
{
public:
	class ABuildingItemCollectorActor*            ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_GetItemCollector) == 0x000004, "Wrong alignment on FortGameStatePvP_GetItemCollector");
static_assert(sizeof(FortGameStatePvP_GetItemCollector) == 0x000004, "Wrong size on FortGameStatePvP_GetItemCollector");
static_assert(offsetof(FortGameStatePvP_GetItemCollector, ReturnValue) == 0x000000, "Member 'FortGameStatePvP_GetItemCollector::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.SetGameDifficultyRow
// 0x000C (0x000C - 0x0000)
struct FortGameStatePvP_SetGameDifficultyRow final
{
public:
	struct FDataTableRowHandle                    GameDifficultyInfo;                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_SetGameDifficultyRow) == 0x000004, "Wrong alignment on FortGameStatePvP_SetGameDifficultyRow");
static_assert(sizeof(FortGameStatePvP_SetGameDifficultyRow) == 0x00000C, "Wrong size on FortGameStatePvP_SetGameDifficultyRow");
static_assert(offsetof(FortGameStatePvP_SetGameDifficultyRow, GameDifficultyInfo) == 0x000000, "Member 'FortGameStatePvP_SetGameDifficultyRow::GameDifficultyInfo' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.SetMatchLevel
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvP_SetMatchLevel final
{
public:
	int32                                         InMatchLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_SetMatchLevel) == 0x000004, "Wrong alignment on FortGameStatePvP_SetMatchLevel");
static_assert(sizeof(FortGameStatePvP_SetMatchLevel) == 0x000004, "Wrong size on FortGameStatePvP_SetMatchLevel");
static_assert(offsetof(FortGameStatePvP_SetMatchLevel, InMatchLevel) == 0x000000, "Member 'FortGameStatePvP_SetMatchLevel::InMatchLevel' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.GetAverageHomebaseRating
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvP_GetAverageHomebaseRating final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_GetAverageHomebaseRating) == 0x000004, "Wrong alignment on FortGameStatePvP_GetAverageHomebaseRating");
static_assert(sizeof(FortGameStatePvP_GetAverageHomebaseRating) == 0x000004, "Wrong size on FortGameStatePvP_GetAverageHomebaseRating");
static_assert(offsetof(FortGameStatePvP_GetAverageHomebaseRating, ReturnValue) == 0x000000, "Member 'FortGameStatePvP_GetAverageHomebaseRating::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.GetMatchLevel
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvP_GetMatchLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_GetMatchLevel) == 0x000004, "Wrong alignment on FortGameStatePvP_GetMatchLevel");
static_assert(sizeof(FortGameStatePvP_GetMatchLevel) == 0x000004, "Wrong size on FortGameStatePvP_GetMatchLevel");
static_assert(offsetof(FortGameStatePvP_GetMatchLevel, ReturnValue) == 0x000000, "Member 'FortGameStatePvP_GetMatchLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.GetRoundTimeAccumulated
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvP_GetRoundTimeAccumulated final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_GetRoundTimeAccumulated) == 0x000004, "Wrong alignment on FortGameStatePvP_GetRoundTimeAccumulated");
static_assert(sizeof(FortGameStatePvP_GetRoundTimeAccumulated) == 0x000004, "Wrong size on FortGameStatePvP_GetRoundTimeAccumulated");
static_assert(offsetof(FortGameStatePvP_GetRoundTimeAccumulated, ReturnValue) == 0x000000, "Member 'FortGameStatePvP_GetRoundTimeAccumulated::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvP.GetTotalHomebaseRating
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvP_GetTotalHomebaseRating final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvP_GetTotalHomebaseRating) == 0x000004, "Wrong alignment on FortGameStatePvP_GetTotalHomebaseRating");
static_assert(sizeof(FortGameStatePvP_GetTotalHomebaseRating) == 0x000004, "Wrong size on FortGameStatePvP_GetTotalHomebaseRating");
static_assert(offsetof(FortGameStatePvP_GetTotalHomebaseRating, ReturnValue) == 0x000000, "Member 'FortGameStatePvP_GetTotalHomebaseRating::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortClientEventInterface.BlueprintCustomHandleClientEvent
// 0x0020 (0x0020 - 0x0000)
struct FortClientEventInterface_BlueprintCustomHandleClientEvent final
{
public:
	class UObject*                                EventSource;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortClientEvent                       ClientEvent;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortClientEventInterface_BlueprintCustomHandleClientEvent) == 0x000004, "Wrong alignment on FortClientEventInterface_BlueprintCustomHandleClientEvent");
static_assert(sizeof(FortClientEventInterface_BlueprintCustomHandleClientEvent) == 0x000020, "Wrong size on FortClientEventInterface_BlueprintCustomHandleClientEvent");
static_assert(offsetof(FortClientEventInterface_BlueprintCustomHandleClientEvent, EventSource) == 0x000000, "Member 'FortClientEventInterface_BlueprintCustomHandleClientEvent::EventSource' has a wrong offset!");
static_assert(offsetof(FortClientEventInterface_BlueprintCustomHandleClientEvent, EventFocus) == 0x000004, "Member 'FortClientEventInterface_BlueprintCustomHandleClientEvent::EventFocus' has a wrong offset!");
static_assert(offsetof(FortClientEventInterface_BlueprintCustomHandleClientEvent, ClientEvent) == 0x000008, "Member 'FortClientEventInterface_BlueprintCustomHandleClientEvent::ClientEvent' has a wrong offset!");

// Function FortniteGame.FortHomeTeleporterInterface.OnHomeTeleporterBound
// 0x0008 (0x0008 - 0x0000)
struct FortHomeTeleporterInterface_OnHomeTeleporterBound final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           OldHomeActor;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomeTeleporterInterface_OnHomeTeleporterBound) == 0x000004, "Wrong alignment on FortHomeTeleporterInterface_OnHomeTeleporterBound");
static_assert(sizeof(FortHomeTeleporterInterface_OnHomeTeleporterBound) == 0x000008, "Wrong size on FortHomeTeleporterInterface_OnHomeTeleporterBound");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterBound, PlayerPawn) == 0x000000, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterBound::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterBound, OldHomeActor) == 0x000004, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterBound::OldHomeActor' has a wrong offset!");

// Function FortniteGame.FortHomeTeleporterInterface.OnHomeTeleporterBoundServer
// 0x0008 (0x0008 - 0x0000)
struct FortHomeTeleporterInterface_OnHomeTeleporterBoundServer final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           OldHomeActor;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomeTeleporterInterface_OnHomeTeleporterBoundServer) == 0x000004, "Wrong alignment on FortHomeTeleporterInterface_OnHomeTeleporterBoundServer");
static_assert(sizeof(FortHomeTeleporterInterface_OnHomeTeleporterBoundServer) == 0x000008, "Wrong size on FortHomeTeleporterInterface_OnHomeTeleporterBoundServer");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterBoundServer, PlayerPawn) == 0x000000, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterBoundServer::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterBoundServer, OldHomeActor) == 0x000004, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterBoundServer::OldHomeActor' has a wrong offset!");

// Function FortniteGame.FortHomeTeleporterInterface.OnHomeTeleporterUnbound
// 0x0008 (0x0008 - 0x0000)
struct FortHomeTeleporterInterface_OnHomeTeleporterUnbound final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           NewHomeActor;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomeTeleporterInterface_OnHomeTeleporterUnbound) == 0x000004, "Wrong alignment on FortHomeTeleporterInterface_OnHomeTeleporterUnbound");
static_assert(sizeof(FortHomeTeleporterInterface_OnHomeTeleporterUnbound) == 0x000008, "Wrong size on FortHomeTeleporterInterface_OnHomeTeleporterUnbound");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterUnbound, PlayerPawn) == 0x000000, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterUnbound::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterUnbound, NewHomeActor) == 0x000004, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterUnbound::NewHomeActor' has a wrong offset!");

// Function FortniteGame.FortHomeTeleporterInterface.OnHomeTeleporterUnboundServer
// 0x0008 (0x0008 - 0x0000)
struct FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           NewHomeActor;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer) == 0x000004, "Wrong alignment on FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer");
static_assert(sizeof(FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer) == 0x000008, "Wrong size on FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer, PlayerPawn) == 0x000000, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer, NewHomeActor) == 0x000004, "Member 'FortHomeTeleporterInterface_OnHomeTeleporterUnboundServer::NewHomeActor' has a wrong offset!");

// Function FortniteGame.FortTutorialNotification.OnNotificationContinue
// 0x0020 (0x0020 - 0x0000)
struct FortTutorialNotification_OnNotificationContinue final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0004(0x0014)(Parm, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialNotification_OnNotificationContinue) == 0x000004, "Wrong alignment on FortTutorialNotification_OnNotificationContinue");
static_assert(sizeof(FortTutorialNotification_OnNotificationContinue) == 0x000020, "Wrong size on FortTutorialNotification_OnNotificationContinue");
static_assert(offsetof(FortTutorialNotification_OnNotificationContinue, WorldContextObject) == 0x000000, "Member 'FortTutorialNotification_OnNotificationContinue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortTutorialNotification_OnNotificationContinue, LatentInfo) == 0x000004, "Member 'FortTutorialNotification_OnNotificationContinue::LatentInfo' has a wrong offset!");
static_assert(offsetof(FortTutorialNotification_OnNotificationContinue, EventName) == 0x000018, "Member 'FortTutorialNotification_OnNotificationContinue::EventName' has a wrong offset!");

// Function FortniteGame.FortTutorialNotification.SetButtonEnabled
// 0x0002 (0x0002 - 0x0000)
struct FortTutorialNotification_SetButtonEnabled final
{
public:
	bool                                          bButtonEnabled;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialNotification_SetButtonEnabled) == 0x000001, "Wrong alignment on FortTutorialNotification_SetButtonEnabled");
static_assert(sizeof(FortTutorialNotification_SetButtonEnabled) == 0x000002, "Wrong size on FortTutorialNotification_SetButtonEnabled");
static_assert(offsetof(FortTutorialNotification_SetButtonEnabled, bButtonEnabled) == 0x000000, "Member 'FortTutorialNotification_SetButtonEnabled::bButtonEnabled' has a wrong offset!");
static_assert(offsetof(FortTutorialNotification_SetButtonEnabled, bForce) == 0x000001, "Member 'FortTutorialNotification_SetButtonEnabled::bForce' has a wrong offset!");

// Function FortniteGame.FortTutorialNotification.SetHAlign
// 0x0002 (0x0002 - 0x0000)
struct FortTutorialNotification_SetHAlign final
{
public:
	EHorizontalAlignment                          HAlign;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialNotification_SetHAlign) == 0x000001, "Wrong alignment on FortTutorialNotification_SetHAlign");
static_assert(sizeof(FortTutorialNotification_SetHAlign) == 0x000002, "Wrong size on FortTutorialNotification_SetHAlign");
static_assert(offsetof(FortTutorialNotification_SetHAlign, HAlign) == 0x000000, "Member 'FortTutorialNotification_SetHAlign::HAlign' has a wrong offset!");
static_assert(offsetof(FortTutorialNotification_SetHAlign, bForce) == 0x000001, "Member 'FortTutorialNotification_SetHAlign::bForce' has a wrong offset!");

// Function FortniteGame.FortTutorialNotification.SetLightboxDisableInputOnly
// 0x0002 (0x0002 - 0x0000)
struct FortTutorialNotification_SetLightboxDisableInputOnly final
{
public:
	bool                                          bLightboxDisableInputOnly;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialNotification_SetLightboxDisableInputOnly) == 0x000001, "Wrong alignment on FortTutorialNotification_SetLightboxDisableInputOnly");
static_assert(sizeof(FortTutorialNotification_SetLightboxDisableInputOnly) == 0x000002, "Wrong size on FortTutorialNotification_SetLightboxDisableInputOnly");
static_assert(offsetof(FortTutorialNotification_SetLightboxDisableInputOnly, bLightboxDisableInputOnly) == 0x000000, "Member 'FortTutorialNotification_SetLightboxDisableInputOnly::bLightboxDisableInputOnly' has a wrong offset!");
static_assert(offsetof(FortTutorialNotification_SetLightboxDisableInputOnly, bForce) == 0x000001, "Member 'FortTutorialNotification_SetLightboxDisableInputOnly::bForce' has a wrong offset!");

// Function FortniteGame.FortTutorialNotification.SetLightboxEnabled
// 0x0002 (0x0002 - 0x0000)
struct FortTutorialNotification_SetLightboxEnabled final
{
public:
	bool                                          bLightboxEnabled;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialNotification_SetLightboxEnabled) == 0x000001, "Wrong alignment on FortTutorialNotification_SetLightboxEnabled");
static_assert(sizeof(FortTutorialNotification_SetLightboxEnabled) == 0x000002, "Wrong size on FortTutorialNotification_SetLightboxEnabled");
static_assert(offsetof(FortTutorialNotification_SetLightboxEnabled, bLightboxEnabled) == 0x000000, "Member 'FortTutorialNotification_SetLightboxEnabled::bLightboxEnabled' has a wrong offset!");
static_assert(offsetof(FortTutorialNotification_SetLightboxEnabled, bForce) == 0x000001, "Member 'FortTutorialNotification_SetLightboxEnabled::bForce' has a wrong offset!");

// Function FortniteGame.FortTutorialNotification.SetNameText
// 0x0010 (0x0010 - 0x0000)
struct FortTutorialNotification_SetNameText final
{
public:
	class FText                                   NameText;                                          // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTutorialNotification_SetNameText) == 0x000004, "Wrong alignment on FortTutorialNotification_SetNameText");
static_assert(sizeof(FortTutorialNotification_SetNameText) == 0x000010, "Wrong size on FortTutorialNotification_SetNameText");
static_assert(offsetof(FortTutorialNotification_SetNameText, NameText) == 0x000000, "Member 'FortTutorialNotification_SetNameText::NameText' has a wrong offset!");
static_assert(offsetof(FortTutorialNotification_SetNameText, bForce) == 0x00000C, "Member 'FortTutorialNotification_SetNameText::bForce' has a wrong offset!");

// Function FortniteGame.FortTutorialNotification.SetPadding
// 0x0014 (0x0014 - 0x0000)
struct FortTutorialNotification_SetPadding final
{
public:
	struct FMargin                                Padding;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTutorialNotification_SetPadding) == 0x000004, "Wrong alignment on FortTutorialNotification_SetPadding");
static_assert(sizeof(FortTutorialNotification_SetPadding) == 0x000014, "Wrong size on FortTutorialNotification_SetPadding");
static_assert(offsetof(FortTutorialNotification_SetPadding, Padding) == 0x000000, "Member 'FortTutorialNotification_SetPadding::Padding' has a wrong offset!");
static_assert(offsetof(FortTutorialNotification_SetPadding, bForce) == 0x000010, "Member 'FortTutorialNotification_SetPadding::bForce' has a wrong offset!");

// Function FortniteGame.FortTutorialNotification.SetSystemText
// 0x0010 (0x0010 - 0x0000)
struct FortTutorialNotification_SetSystemText final
{
public:
	class FText                                   SystemText;                                        // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortTutorialNotification_SetSystemText) == 0x000004, "Wrong alignment on FortTutorialNotification_SetSystemText");
static_assert(sizeof(FortTutorialNotification_SetSystemText) == 0x000010, "Wrong size on FortTutorialNotification_SetSystemText");
static_assert(offsetof(FortTutorialNotification_SetSystemText, SystemText) == 0x000000, "Member 'FortTutorialNotification_SetSystemText::SystemText' has a wrong offset!");
static_assert(offsetof(FortTutorialNotification_SetSystemText, bForce) == 0x00000C, "Member 'FortTutorialNotification_SetSystemText::bForce' has a wrong offset!");

// Function FortniteGame.FortTutorialNotification.SetVAlign
// 0x0002 (0x0002 - 0x0000)
struct FortTutorialNotification_SetVAlign final
{
public:
	EVerticalAlignment                            VAlign;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialNotification_SetVAlign) == 0x000001, "Wrong alignment on FortTutorialNotification_SetVAlign");
static_assert(sizeof(FortTutorialNotification_SetVAlign) == 0x000002, "Wrong size on FortTutorialNotification_SetVAlign");
static_assert(offsetof(FortTutorialNotification_SetVAlign, VAlign) == 0x000000, "Member 'FortTutorialNotification_SetVAlign::VAlign' has a wrong offset!");
static_assert(offsetof(FortTutorialNotification_SetVAlign, bForce) == 0x000001, "Member 'FortTutorialNotification_SetVAlign::bForce' has a wrong offset!");

// Function FortniteGame.FortTutorialNotification.ShowTutorialScreen
// 0x0004 (0x0004 - 0x0000)
struct FortTutorialNotification_ShowTutorialScreen final
{
public:
	class UTexture2D*                             TutorialImage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTutorialNotification_ShowTutorialScreen) == 0x000004, "Wrong alignment on FortTutorialNotification_ShowTutorialScreen");
static_assert(sizeof(FortTutorialNotification_ShowTutorialScreen) == 0x000004, "Wrong size on FortTutorialNotification_ShowTutorialScreen");
static_assert(offsetof(FortTutorialNotification_ShowTutorialScreen, TutorialImage) == 0x000000, "Member 'FortTutorialNotification_ShowTutorialScreen::TutorialImage' has a wrong offset!");

// Function FortniteGame.FortCombatManager.GetCombatFactorValue
// 0x0008 (0x0008 - 0x0000)
struct FortCombatManager_GetCombatFactorValue final
{
public:
	EFortCombatFactors                            CombatFactor;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCombatManager_GetCombatFactorValue) == 0x000004, "Wrong alignment on FortCombatManager_GetCombatFactorValue");
static_assert(sizeof(FortCombatManager_GetCombatFactorValue) == 0x000008, "Wrong size on FortCombatManager_GetCombatFactorValue");
static_assert(offsetof(FortCombatManager_GetCombatFactorValue, CombatFactor) == 0x000000, "Member 'FortCombatManager_GetCombatFactorValue::CombatFactor' has a wrong offset!");
static_assert(offsetof(FortCombatManager_GetCombatFactorValue, ReturnValue) == 0x000004, "Member 'FortCombatManager_GetCombatFactorValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCombatManager.GetCurrentMaxHeatPercent
// 0x0004 (0x0004 - 0x0000)
struct FortCombatManager_GetCurrentMaxHeatPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCombatManager_GetCurrentMaxHeatPercent) == 0x000004, "Wrong alignment on FortCombatManager_GetCurrentMaxHeatPercent");
static_assert(sizeof(FortCombatManager_GetCurrentMaxHeatPercent) == 0x000004, "Wrong size on FortCombatManager_GetCurrentMaxHeatPercent");
static_assert(offsetof(FortCombatManager_GetCurrentMaxHeatPercent, ReturnValue) == 0x000000, "Member 'FortCombatManager_GetCurrentMaxHeatPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCombatManager.GetEventHeatPercent
// 0x0008 (0x0008 - 0x0000)
struct FortCombatManager_GetEventHeatPercent final
{
public:
	EFortCombatEvents                             CombatEvent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCombatManager_GetEventHeatPercent) == 0x000004, "Wrong alignment on FortCombatManager_GetEventHeatPercent");
static_assert(sizeof(FortCombatManager_GetEventHeatPercent) == 0x000008, "Wrong size on FortCombatManager_GetEventHeatPercent");
static_assert(offsetof(FortCombatManager_GetEventHeatPercent, CombatEvent) == 0x000000, "Member 'FortCombatManager_GetEventHeatPercent::CombatEvent' has a wrong offset!");
static_assert(offsetof(FortCombatManager_GetEventHeatPercent, ReturnValue) == 0x000004, "Member 'FortCombatManager_GetEventHeatPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCombatManager.GetEventHeatPercentTotal
// 0x0008 (0x0008 - 0x0000)
struct FortCombatManager_GetEventHeatPercentTotal final
{
public:
	EFortCombatEvents                             CombatEvent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCombatManager_GetEventHeatPercentTotal) == 0x000004, "Wrong alignment on FortCombatManager_GetEventHeatPercentTotal");
static_assert(sizeof(FortCombatManager_GetEventHeatPercentTotal) == 0x000008, "Wrong size on FortCombatManager_GetEventHeatPercentTotal");
static_assert(offsetof(FortCombatManager_GetEventHeatPercentTotal, CombatEvent) == 0x000000, "Member 'FortCombatManager_GetEventHeatPercentTotal::CombatEvent' has a wrong offset!");
static_assert(offsetof(FortCombatManager_GetEventHeatPercentTotal, ReturnValue) == 0x000004, "Member 'FortCombatManager_GetEventHeatPercentTotal::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortCombatManager.OnThresholdChange
// 0x0002 (0x0002 - 0x0000)
struct FortCombatManager_OnThresholdChange final
{
public:
	EFortCombatThresholds                         OldThreshold;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCombatThresholds                         NewThreshold;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCombatManager_OnThresholdChange) == 0x000001, "Wrong alignment on FortCombatManager_OnThresholdChange");
static_assert(sizeof(FortCombatManager_OnThresholdChange) == 0x000002, "Wrong size on FortCombatManager_OnThresholdChange");
static_assert(offsetof(FortCombatManager_OnThresholdChange, OldThreshold) == 0x000000, "Member 'FortCombatManager_OnThresholdChange::OldThreshold' has a wrong offset!");
static_assert(offsetof(FortCombatManager_OnThresholdChange, NewThreshold) == 0x000001, "Member 'FortCombatManager_OnThresholdChange::NewThreshold' has a wrong offset!");

// Function FortniteGame.FortAlterationItem.GetAlterationDefinitionBP
// 0x0004 (0x0004 - 0x0000)
struct FortAlterationItem_GetAlterationDefinitionBP final
{
public:
	class UFortAlterationItemDefinition*          ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAlterationItem_GetAlterationDefinitionBP) == 0x000004, "Wrong alignment on FortAlterationItem_GetAlterationDefinitionBP");
static_assert(sizeof(FortAlterationItem_GetAlterationDefinitionBP) == 0x000004, "Wrong size on FortAlterationItem_GetAlterationDefinitionBP");
static_assert(offsetof(FortAlterationItem_GetAlterationDefinitionBP, ReturnValue) == 0x000000, "Member 'FortAlterationItem_GetAlterationDefinitionBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.BreakExponentialHeightFogValues
// 0x0070 (0x0070 - 0x0000)
struct FortDayNightLightingAndFog_BreakExponentialHeightFogValues final
{
public:
	struct FExponentialHeightFogValues            HeightFogValues;                                   // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
	float                                         FogDensity;                                        // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_BreakExponentialHeightFogValues) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_BreakExponentialHeightFogValues");
static_assert(sizeof(FortDayNightLightingAndFog_BreakExponentialHeightFogValues) == 0x000070, "Wrong size on FortDayNightLightingAndFog_BreakExponentialHeightFogValues");
static_assert(offsetof(FortDayNightLightingAndFog_BreakExponentialHeightFogValues, HeightFogValues) == 0x000000, "Member 'FortDayNightLightingAndFog_BreakExponentialHeightFogValues::HeightFogValues' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_BreakExponentialHeightFogValues, FogDensity) == 0x000038, "Member 'FortDayNightLightingAndFog_BreakExponentialHeightFogValues::FogDensity' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_BreakExponentialHeightFogValues, FogHeightFalloff) == 0x00003C, "Member 'FortDayNightLightingAndFog_BreakExponentialHeightFogValues::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_BreakExponentialHeightFogValues, FogMaxOpacity) == 0x000040, "Member 'FortDayNightLightingAndFog_BreakExponentialHeightFogValues::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_BreakExponentialHeightFogValues, StartDistance) == 0x000044, "Member 'FortDayNightLightingAndFog_BreakExponentialHeightFogValues::StartDistance' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_BreakExponentialHeightFogValues, DirectionalInscatteringExponent) == 0x000048, "Member 'FortDayNightLightingAndFog_BreakExponentialHeightFogValues::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_BreakExponentialHeightFogValues, DirectionalInscatteringStartDistance) == 0x00004C, "Member 'FortDayNightLightingAndFog_BreakExponentialHeightFogValues::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_BreakExponentialHeightFogValues, DirectionalInscatteringColor) == 0x000050, "Member 'FortDayNightLightingAndFog_BreakExponentialHeightFogValues::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_BreakExponentialHeightFogValues, FogInscatteringColor) == 0x000060, "Member 'FortDayNightLightingAndFog_BreakExponentialHeightFogValues::FogInscatteringColor' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.MakeExponentialHeightFogValues
// 0x0070 (0x0070 - 0x0000)
struct FortDayNightLightingAndFog_MakeExponentialHeightFogValues final
{
public:
	float                                         FogDensity;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogValues            ReturnValue;                                       // 0x0038(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_MakeExponentialHeightFogValues) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_MakeExponentialHeightFogValues");
static_assert(sizeof(FortDayNightLightingAndFog_MakeExponentialHeightFogValues) == 0x000070, "Wrong size on FortDayNightLightingAndFog_MakeExponentialHeightFogValues");
static_assert(offsetof(FortDayNightLightingAndFog_MakeExponentialHeightFogValues, FogDensity) == 0x000000, "Member 'FortDayNightLightingAndFog_MakeExponentialHeightFogValues::FogDensity' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_MakeExponentialHeightFogValues, FogHeightFalloff) == 0x000004, "Member 'FortDayNightLightingAndFog_MakeExponentialHeightFogValues::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_MakeExponentialHeightFogValues, FogMaxOpacity) == 0x000008, "Member 'FortDayNightLightingAndFog_MakeExponentialHeightFogValues::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_MakeExponentialHeightFogValues, StartDistance) == 0x00000C, "Member 'FortDayNightLightingAndFog_MakeExponentialHeightFogValues::StartDistance' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_MakeExponentialHeightFogValues, DirectionalInscatteringExponent) == 0x000010, "Member 'FortDayNightLightingAndFog_MakeExponentialHeightFogValues::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_MakeExponentialHeightFogValues, DirectionalInscatteringStartDistance) == 0x000014, "Member 'FortDayNightLightingAndFog_MakeExponentialHeightFogValues::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_MakeExponentialHeightFogValues, DirectionalInscatteringColor) == 0x000018, "Member 'FortDayNightLightingAndFog_MakeExponentialHeightFogValues::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_MakeExponentialHeightFogValues, FogInscatteringColor) == 0x000028, "Member 'FortDayNightLightingAndFog_MakeExponentialHeightFogValues::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_MakeExponentialHeightFogValues, ReturnValue) == 0x000038, "Member 'FortDayNightLightingAndFog_MakeExponentialHeightFogValues::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.FFToTimeOfDay
// 0x0008 (0x0008 - 0x0000)
struct FortDayNightLightingAndFog_FFToTimeOfDay final
{
public:
	float                                         FastForwardTime;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastForwardSpeed;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_FFToTimeOfDay) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_FFToTimeOfDay");
static_assert(sizeof(FortDayNightLightingAndFog_FFToTimeOfDay) == 0x000008, "Wrong size on FortDayNightLightingAndFog_FFToTimeOfDay");
static_assert(offsetof(FortDayNightLightingAndFog_FFToTimeOfDay, FastForwardTime) == 0x000000, "Member 'FortDayNightLightingAndFog_FFToTimeOfDay::FastForwardTime' has a wrong offset!");
static_assert(offsetof(FortDayNightLightingAndFog_FFToTimeOfDay, FastForwardSpeed) == 0x000004, "Member 'FortDayNightLightingAndFog_FFToTimeOfDay::FastForwardSpeed' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.GetPreviousDayPhase
// 0x0001 (0x0001 - 0x0000)
struct FortDayNightLightingAndFog_GetPreviousDayPhase final
{
public:
	EFortDayPhase                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_GetPreviousDayPhase) == 0x000001, "Wrong alignment on FortDayNightLightingAndFog_GetPreviousDayPhase");
static_assert(sizeof(FortDayNightLightingAndFog_GetPreviousDayPhase) == 0x000001, "Wrong size on FortDayNightLightingAndFog_GetPreviousDayPhase");
static_assert(offsetof(FortDayNightLightingAndFog_GetPreviousDayPhase, ReturnValue) == 0x000000, "Member 'FortDayNightLightingAndFog_GetPreviousDayPhase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.OnUpdateDirectionalLightForTimeOfDay
// 0x0010 (0x0010 - 0x0000)
struct FortDayNightLightingAndFog_OnUpdateDirectionalLightForTimeOfDay final
{
public:
	struct FLinearColor                           AboutToApplyDirectionalLightColor;                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_OnUpdateDirectionalLightForTimeOfDay) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_OnUpdateDirectionalLightForTimeOfDay");
static_assert(sizeof(FortDayNightLightingAndFog_OnUpdateDirectionalLightForTimeOfDay) == 0x000010, "Wrong size on FortDayNightLightingAndFog_OnUpdateDirectionalLightForTimeOfDay");
static_assert(offsetof(FortDayNightLightingAndFog_OnUpdateDirectionalLightForTimeOfDay, AboutToApplyDirectionalLightColor) == 0x000000, "Member 'FortDayNightLightingAndFog_OnUpdateDirectionalLightForTimeOfDay::AboutToApplyDirectionalLightColor' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.OnUpdateHeightFogForTimeOfDay
// 0x0038 (0x0038 - 0x0000)
struct FortDayNightLightingAndFog_OnUpdateHeightFogForTimeOfDay final
{
public:
	struct FExponentialHeightFogValues            AboutToApplyFogValues;                             // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_OnUpdateHeightFogForTimeOfDay) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_OnUpdateHeightFogForTimeOfDay");
static_assert(sizeof(FortDayNightLightingAndFog_OnUpdateHeightFogForTimeOfDay) == 0x000038, "Wrong size on FortDayNightLightingAndFog_OnUpdateHeightFogForTimeOfDay");
static_assert(offsetof(FortDayNightLightingAndFog_OnUpdateHeightFogForTimeOfDay, AboutToApplyFogValues) == 0x000000, "Member 'FortDayNightLightingAndFog_OnUpdateHeightFogForTimeOfDay::AboutToApplyFogValues' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.SetDayPhase
// 0x000C (0x000C - 0x0000)
struct FortDayNightLightingAndFog_SetDayPhase final
{
public:
	class FString                                 DayPhase;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_SetDayPhase) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_SetDayPhase");
static_assert(sizeof(FortDayNightLightingAndFog_SetDayPhase) == 0x00000C, "Wrong size on FortDayNightLightingAndFog_SetDayPhase");
static_assert(offsetof(FortDayNightLightingAndFog_SetDayPhase, DayPhase) == 0x000000, "Member 'FortDayNightLightingAndFog_SetDayPhase::DayPhase' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.SetDirectionalLightColorMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FortDayNightLightingAndFog_SetDirectionalLightColorMultiplier final
{
public:
	float                                         NewDirectionalLightColorMultiplier;                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_SetDirectionalLightColorMultiplier) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_SetDirectionalLightColorMultiplier");
static_assert(sizeof(FortDayNightLightingAndFog_SetDirectionalLightColorMultiplier) == 0x000004, "Wrong size on FortDayNightLightingAndFog_SetDirectionalLightColorMultiplier");
static_assert(offsetof(FortDayNightLightingAndFog_SetDirectionalLightColorMultiplier, NewDirectionalLightColorMultiplier) == 0x000000, "Member 'FortDayNightLightingAndFog_SetDirectionalLightColorMultiplier::NewDirectionalLightColorMultiplier' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.SetFogDirectionalInscatteringMultiplier
// 0x0004 (0x0004 - 0x0000)
struct FortDayNightLightingAndFog_SetFogDirectionalInscatteringMultiplier final
{
public:
	float                                         NewFogDirectionalInscatteringMultiplier;           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_SetFogDirectionalInscatteringMultiplier) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_SetFogDirectionalInscatteringMultiplier");
static_assert(sizeof(FortDayNightLightingAndFog_SetFogDirectionalInscatteringMultiplier) == 0x000004, "Wrong size on FortDayNightLightingAndFog_SetFogDirectionalInscatteringMultiplier");
static_assert(offsetof(FortDayNightLightingAndFog_SetFogDirectionalInscatteringMultiplier, NewFogDirectionalInscatteringMultiplier) == 0x000000, "Member 'FortDayNightLightingAndFog_SetFogDirectionalInscatteringMultiplier::NewFogDirectionalInscatteringMultiplier' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.SetLightningColorAlpha
// 0x0004 (0x0004 - 0x0000)
struct FortDayNightLightingAndFog_SetLightningColorAlpha final
{
public:
	float                                         NewLightningColorAlpha;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_SetLightningColorAlpha) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_SetLightningColorAlpha");
static_assert(sizeof(FortDayNightLightingAndFog_SetLightningColorAlpha) == 0x000004, "Wrong size on FortDayNightLightingAndFog_SetLightningColorAlpha");
static_assert(offsetof(FortDayNightLightingAndFog_SetLightningColorAlpha, NewLightningColorAlpha) == 0x000000, "Member 'FortDayNightLightingAndFog_SetLightningColorAlpha::NewLightningColorAlpha' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.SetStormStrength
// 0x0004 (0x0004 - 0x0000)
struct FortDayNightLightingAndFog_SetStormStrength final
{
public:
	float                                         NewStormStrength;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_SetStormStrength) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_SetStormStrength");
static_assert(sizeof(FortDayNightLightingAndFog_SetStormStrength) == 0x000004, "Wrong size on FortDayNightLightingAndFog_SetStormStrength");
static_assert(offsetof(FortDayNightLightingAndFog_SetStormStrength, NewStormStrength) == 0x000000, "Member 'FortDayNightLightingAndFog_SetStormStrength::NewStormStrength' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.SetTimeOfDay
// 0x000C (0x000C - 0x0000)
struct FortDayNightLightingAndFog_SetTimeOfDay final
{
public:
	class FString                                 NewTimeOfDay;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_SetTimeOfDay) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_SetTimeOfDay");
static_assert(sizeof(FortDayNightLightingAndFog_SetTimeOfDay) == 0x00000C, "Wrong size on FortDayNightLightingAndFog_SetTimeOfDay");
static_assert(offsetof(FortDayNightLightingAndFog_SetTimeOfDay, NewTimeOfDay) == 0x000000, "Member 'FortDayNightLightingAndFog_SetTimeOfDay::NewTimeOfDay' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.SetTimeOfDayAbsoluteSpeed
// 0x0004 (0x0004 - 0x0000)
struct FortDayNightLightingAndFog_SetTimeOfDayAbsoluteSpeed final
{
public:
	float                                         NewTimeOfDaySpeed;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_SetTimeOfDayAbsoluteSpeed) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_SetTimeOfDayAbsoluteSpeed");
static_assert(sizeof(FortDayNightLightingAndFog_SetTimeOfDayAbsoluteSpeed) == 0x000004, "Wrong size on FortDayNightLightingAndFog_SetTimeOfDayAbsoluteSpeed");
static_assert(offsetof(FortDayNightLightingAndFog_SetTimeOfDayAbsoluteSpeed, NewTimeOfDaySpeed) == 0x000000, "Member 'FortDayNightLightingAndFog_SetTimeOfDayAbsoluteSpeed::NewTimeOfDaySpeed' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.SetTimeOfDayFloat
// 0x0004 (0x0004 - 0x0000)
struct FortDayNightLightingAndFog_SetTimeOfDayFloat final
{
public:
	float                                         TimeOfDayInHours;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_SetTimeOfDayFloat) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_SetTimeOfDayFloat");
static_assert(sizeof(FortDayNightLightingAndFog_SetTimeOfDayFloat) == 0x000004, "Wrong size on FortDayNightLightingAndFog_SetTimeOfDayFloat");
static_assert(offsetof(FortDayNightLightingAndFog_SetTimeOfDayFloat, TimeOfDayInHours) == 0x000000, "Member 'FortDayNightLightingAndFog_SetTimeOfDayFloat::TimeOfDayInHours' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.SetTimeOfDayInHours
// 0x0004 (0x0004 - 0x0000)
struct FortDayNightLightingAndFog_SetTimeOfDayInHours final
{
public:
	float                                         TimeOfDayInHours;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_SetTimeOfDayInHours) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_SetTimeOfDayInHours");
static_assert(sizeof(FortDayNightLightingAndFog_SetTimeOfDayInHours) == 0x000004, "Wrong size on FortDayNightLightingAndFog_SetTimeOfDayInHours");
static_assert(offsetof(FortDayNightLightingAndFog_SetTimeOfDayInHours, TimeOfDayInHours) == 0x000000, "Member 'FortDayNightLightingAndFog_SetTimeOfDayInHours::TimeOfDayInHours' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.SetTimeOfDaySpeed
// 0x0004 (0x0004 - 0x0000)
struct FortDayNightLightingAndFog_SetTimeOfDaySpeed final
{
public:
	float                                         TimeOfDaySpeedFactor;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_SetTimeOfDaySpeed) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_SetTimeOfDaySpeed");
static_assert(sizeof(FortDayNightLightingAndFog_SetTimeOfDaySpeed) == 0x000004, "Wrong size on FortDayNightLightingAndFog_SetTimeOfDaySpeed");
static_assert(offsetof(FortDayNightLightingAndFog_SetTimeOfDaySpeed, TimeOfDaySpeedFactor) == 0x000000, "Member 'FortDayNightLightingAndFog_SetTimeOfDaySpeed::TimeOfDaySpeedFactor' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.SetTimeOfDaySpeedFloat
// 0x0004 (0x0004 - 0x0000)
struct FortDayNightLightingAndFog_SetTimeOfDaySpeedFloat final
{
public:
	float                                         InTimeOfDaySpeed;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_SetTimeOfDaySpeedFloat) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_SetTimeOfDaySpeedFloat");
static_assert(sizeof(FortDayNightLightingAndFog_SetTimeOfDaySpeedFloat) == 0x000004, "Wrong size on FortDayNightLightingAndFog_SetTimeOfDaySpeedFloat");
static_assert(offsetof(FortDayNightLightingAndFog_SetTimeOfDaySpeedFloat, InTimeOfDaySpeed) == 0x000000, "Member 'FortDayNightLightingAndFog_SetTimeOfDaySpeedFloat::InTimeOfDaySpeed' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.GetDayPhaseStartAnnouncementString
// 0x000C (0x000C - 0x0000)
struct FortDayNightLightingAndFog_GetDayPhaseStartAnnouncementString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_GetDayPhaseStartAnnouncementString) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_GetDayPhaseStartAnnouncementString");
static_assert(sizeof(FortDayNightLightingAndFog_GetDayPhaseStartAnnouncementString) == 0x00000C, "Wrong size on FortDayNightLightingAndFog_GetDayPhaseStartAnnouncementString");
static_assert(offsetof(FortDayNightLightingAndFog_GetDayPhaseStartAnnouncementString, ReturnValue) == 0x000000, "Member 'FortDayNightLightingAndFog_GetDayPhaseStartAnnouncementString::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.GetStormStrength
// 0x0004 (0x0004 - 0x0000)
struct FortDayNightLightingAndFog_GetStormStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_GetStormStrength) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_GetStormStrength");
static_assert(sizeof(FortDayNightLightingAndFog_GetStormStrength) == 0x000004, "Wrong size on FortDayNightLightingAndFog_GetStormStrength");
static_assert(offsetof(FortDayNightLightingAndFog_GetStormStrength, ReturnValue) == 0x000000, "Member 'FortDayNightLightingAndFog_GetStormStrength::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDayNightLightingAndFog.GetThreatClouds
// 0x000C (0x000C - 0x0000)
struct FortDayNightLightingAndFog_GetThreatClouds final
{
public:
	TArray<struct FThreatLocationInfo>            ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDayNightLightingAndFog_GetThreatClouds) == 0x000004, "Wrong alignment on FortDayNightLightingAndFog_GetThreatClouds");
static_assert(sizeof(FortDayNightLightingAndFog_GetThreatClouds) == 0x00000C, "Wrong size on FortDayNightLightingAndFog_GetThreatClouds");
static_assert(offsetof(FortDayNightLightingAndFog_GetThreatClouds, ReturnValue) == 0x000000, "Member 'FortDayNightLightingAndFog_GetThreatClouds::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.CreatePreviewMID
// 0x0008 (0x0008 - 0x0000)
struct FortDecoPreview_CreatePreviewMID final
{
public:
	class UMaterialInterface*                     OverrideParentMaterial;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoPreview_CreatePreviewMID) == 0x000004, "Wrong alignment on FortDecoPreview_CreatePreviewMID");
static_assert(sizeof(FortDecoPreview_CreatePreviewMID) == 0x000008, "Wrong size on FortDecoPreview_CreatePreviewMID");
static_assert(offsetof(FortDecoPreview_CreatePreviewMID, OverrideParentMaterial) == 0x000000, "Member 'FortDecoPreview_CreatePreviewMID::OverrideParentMaterial' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_CreatePreviewMID, ReturnValue) == 0x000004, "Member 'FortDecoPreview_CreatePreviewMID::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.GetTextureParameterValueFromMeshComponent
// 0x0014 (0x0014 - 0x0000)
struct FortDecoPreview_GetTextureParameterValueFromMeshComponent final
{
public:
	class UMeshComponent*                         MeshComp;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElementIdx;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoPreview_GetTextureParameterValueFromMeshComponent) == 0x000004, "Wrong alignment on FortDecoPreview_GetTextureParameterValueFromMeshComponent");
static_assert(sizeof(FortDecoPreview_GetTextureParameterValueFromMeshComponent) == 0x000014, "Wrong size on FortDecoPreview_GetTextureParameterValueFromMeshComponent");
static_assert(offsetof(FortDecoPreview_GetTextureParameterValueFromMeshComponent, MeshComp) == 0x000000, "Member 'FortDecoPreview_GetTextureParameterValueFromMeshComponent::MeshComp' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_GetTextureParameterValueFromMeshComponent, ElementIdx) == 0x000004, "Member 'FortDecoPreview_GetTextureParameterValueFromMeshComponent::ElementIdx' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_GetTextureParameterValueFromMeshComponent, ParamName) == 0x000008, "Member 'FortDecoPreview_GetTextureParameterValueFromMeshComponent::ParamName' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_GetTextureParameterValueFromMeshComponent, ReturnValue) == 0x000010, "Member 'FortDecoPreview_GetTextureParameterValueFromMeshComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.OnBounceMotionUpdate
// 0x0004 (0x0004 - 0x0000)
struct FortDecoPreview_OnBounceMotionUpdate final
{
public:
	float                                         VectorScale;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoPreview_OnBounceMotionUpdate) == 0x000004, "Wrong alignment on FortDecoPreview_OnBounceMotionUpdate");
static_assert(sizeof(FortDecoPreview_OnBounceMotionUpdate) == 0x000004, "Wrong size on FortDecoPreview_OnBounceMotionUpdate");
static_assert(offsetof(FortDecoPreview_OnBounceMotionUpdate, VectorScale) == 0x000000, "Member 'FortDecoPreview_OnBounceMotionUpdate::VectorScale' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.OnInitializeDecoPreview
// 0x0008 (0x0008 - 0x0000)
struct FortDecoPreview_OnInitializeDecoPreview final
{
public:
	const class ABuildingActor*                   NewBuildingActor;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortDecoItemDefinition*          NewDecoItemDefinition;                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoPreview_OnInitializeDecoPreview) == 0x000004, "Wrong alignment on FortDecoPreview_OnInitializeDecoPreview");
static_assert(sizeof(FortDecoPreview_OnInitializeDecoPreview) == 0x000008, "Wrong size on FortDecoPreview_OnInitializeDecoPreview");
static_assert(offsetof(FortDecoPreview_OnInitializeDecoPreview, NewBuildingActor) == 0x000000, "Member 'FortDecoPreview_OnInitializeDecoPreview::NewBuildingActor' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_OnInitializeDecoPreview, NewDecoItemDefinition) == 0x000004, "Member 'FortDecoPreview_OnInitializeDecoPreview::NewDecoItemDefinition' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.OnUpdateScale
// 0x0010 (0x0010 - 0x0000)
struct FortDecoPreview_OnUpdateScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InWorldSpacePivot;                                 // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoPreview_OnUpdateScale) == 0x000004, "Wrong alignment on FortDecoPreview_OnUpdateScale");
static_assert(sizeof(FortDecoPreview_OnUpdateScale) == 0x000010, "Wrong size on FortDecoPreview_OnUpdateScale");
static_assert(offsetof(FortDecoPreview_OnUpdateScale, Scale) == 0x000000, "Member 'FortDecoPreview_OnUpdateScale::Scale' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_OnUpdateScale, InWorldSpacePivot) == 0x000004, "Member 'FortDecoPreview_OnUpdateScale::InWorldSpacePivot' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.OnUpdateVisuals
// 0x0008 (0x0008 - 0x0000)
struct FortDecoPreview_OnUpdateVisuals final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSafeToPlace;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDecoPreview_OnUpdateVisuals) == 0x000004, "Wrong alignment on FortDecoPreview_OnUpdateVisuals");
static_assert(sizeof(FortDecoPreview_OnUpdateVisuals) == 0x000008, "Wrong size on FortDecoPreview_OnUpdateVisuals");
static_assert(offsetof(FortDecoPreview_OnUpdateVisuals, DeltaSeconds) == 0x000000, "Member 'FortDecoPreview_OnUpdateVisuals::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_OnUpdateVisuals, bSafeToPlace) == 0x000004, "Member 'FortDecoPreview_OnUpdateVisuals::bSafeToPlace' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.SetDiffuseTextureParameterOnMID
// 0x0008 (0x0008 - 0x0000)
struct FortDecoPreview_SetDiffuseTextureParameterOnMID final
{
public:
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoPreview_SetDiffuseTextureParameterOnMID) == 0x000004, "Wrong alignment on FortDecoPreview_SetDiffuseTextureParameterOnMID");
static_assert(sizeof(FortDecoPreview_SetDiffuseTextureParameterOnMID) == 0x000008, "Wrong size on FortDecoPreview_SetDiffuseTextureParameterOnMID");
static_assert(offsetof(FortDecoPreview_SetDiffuseTextureParameterOnMID, Mid) == 0x000000, "Member 'FortDecoPreview_SetDiffuseTextureParameterOnMID::Mid' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_SetDiffuseTextureParameterOnMID, Texture) == 0x000004, "Member 'FortDecoPreview_SetDiffuseTextureParameterOnMID::Texture' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.SetScalarParameterValueOnAllPreviewMIDs
// 0x000C (0x000C - 0x0000)
struct FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParamValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs) == 0x000004, "Wrong alignment on FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs");
static_assert(sizeof(FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs) == 0x00000C, "Wrong size on FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs");
static_assert(offsetof(FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs, ParamName) == 0x000000, "Member 'FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs::ParamName' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs, ParamValue) == 0x000008, "Member 'FortDecoPreview_SetScalarParameterValueOnAllPreviewMIDs::ParamValue' has a wrong offset!");

// Function FortniteGame.FortDecoPreview.SetVectorParameterValueOnAllPreviewMIDs
// 0x0018 (0x0018 - 0x0000)
struct FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ParamValue;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs) == 0x000004, "Wrong alignment on FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs");
static_assert(sizeof(FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs) == 0x000018, "Wrong size on FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs");
static_assert(offsetof(FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs, ParamName) == 0x000000, "Member 'FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs::ParamName' has a wrong offset!");
static_assert(offsetof(FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs, ParamValue) == 0x000008, "Member 'FortDecoPreview_SetVectorParameterValueOnAllPreviewMIDs::ParamValue' has a wrong offset!");

// Function FortniteGame.FortTrackPreview.InitializeTrackPreview
// 0x0008 (0x0008 - 0x0000)
struct FortTrackPreview_InitializeTrackPreview final
{
public:
	class UStaticMeshComponent*                   InTrackMeshComp1;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   InTrackMeshComp2;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrackPreview_InitializeTrackPreview) == 0x000004, "Wrong alignment on FortTrackPreview_InitializeTrackPreview");
static_assert(sizeof(FortTrackPreview_InitializeTrackPreview) == 0x000008, "Wrong size on FortTrackPreview_InitializeTrackPreview");
static_assert(offsetof(FortTrackPreview_InitializeTrackPreview, InTrackMeshComp1) == 0x000000, "Member 'FortTrackPreview_InitializeTrackPreview::InTrackMeshComp1' has a wrong offset!");
static_assert(offsetof(FortTrackPreview_InitializeTrackPreview, InTrackMeshComp2) == 0x000004, "Member 'FortTrackPreview_InitializeTrackPreview::InTrackMeshComp2' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ClientSay
// 0x0018 (0x0018 - 0x0000)
struct FortLobbyBeaconClient_ClientSay final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ClientSay) == 0x000004, "Wrong alignment on FortLobbyBeaconClient_ClientSay");
static_assert(sizeof(FortLobbyBeaconClient_ClientSay) == 0x000018, "Wrong size on FortLobbyBeaconClient_ClientSay");
static_assert(offsetof(FortLobbyBeaconClient_ClientSay, PlayerName) == 0x000000, "Member 'FortLobbyBeaconClient_ClientSay::PlayerName' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ClientSay, Message) == 0x00000C, "Member 'FortLobbyBeaconClient_ClientSay::Message' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerIncrementHomeBaseVersion
// 0x0008 (0x0008 - 0x0000)
struct FortLobbyBeaconClient_ServerIncrementHomeBaseVersion final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerIncrementHomeBaseVersion) == 0x000004, "Wrong alignment on FortLobbyBeaconClient_ServerIncrementHomeBaseVersion");
static_assert(sizeof(FortLobbyBeaconClient_ServerIncrementHomeBaseVersion) == 0x000008, "Wrong size on FortLobbyBeaconClient_ServerIncrementHomeBaseVersion");
static_assert(offsetof(FortLobbyBeaconClient_ServerIncrementHomeBaseVersion, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerIncrementHomeBaseVersion::InUniqueId' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSay
// 0x000C (0x000C - 0x0000)
struct FortLobbyBeaconClient_ServerSay final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerSay) == 0x000004, "Wrong alignment on FortLobbyBeaconClient_ServerSay");
static_assert(sizeof(FortLobbyBeaconClient_ServerSay) == 0x00000C, "Wrong size on FortLobbyBeaconClient_ServerSay");
static_assert(offsetof(FortLobbyBeaconClient_ServerSay, Msg) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSay::Msg' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSayTeam
// 0x000C (0x000C - 0x0000)
struct FortLobbyBeaconClient_ServerSayTeam final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerSayTeam) == 0x000004, "Wrong alignment on FortLobbyBeaconClient_ServerSayTeam");
static_assert(sizeof(FortLobbyBeaconClient_ServerSayTeam) == 0x00000C, "Wrong size on FortLobbyBeaconClient_ServerSayTeam");
static_assert(offsetof(FortLobbyBeaconClient_ServerSayTeam, Msg) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSayTeam::Msg' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSetCharacterGender
// 0x000C (0x000C - 0x0000)
struct FortLobbyBeaconClient_ServerSetCharacterGender final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	EFortCustomGender                             GenderType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortLobbyBeaconClient_ServerSetCharacterGender) == 0x000004, "Wrong alignment on FortLobbyBeaconClient_ServerSetCharacterGender");
static_assert(sizeof(FortLobbyBeaconClient_ServerSetCharacterGender) == 0x00000C, "Wrong size on FortLobbyBeaconClient_ServerSetCharacterGender");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetCharacterGender, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSetCharacterGender::InUniqueId' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetCharacterGender, GenderType) == 0x000008, "Member 'FortLobbyBeaconClient_ServerSetCharacterGender::GenderType' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSetCurrentCharacterXp
// 0x000C (0x000C - 0x0000)
struct FortLobbyBeaconClient_ServerSetCurrentCharacterXp final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         CurrentCharacterXp;                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerSetCurrentCharacterXp) == 0x000004, "Wrong alignment on FortLobbyBeaconClient_ServerSetCurrentCharacterXp");
static_assert(sizeof(FortLobbyBeaconClient_ServerSetCurrentCharacterXp) == 0x00000C, "Wrong size on FortLobbyBeaconClient_ServerSetCurrentCharacterXp");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetCurrentCharacterXp, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSetCurrentCharacterXp::InUniqueId' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetCurrentCharacterXp, CurrentCharacterXp) == 0x000008, "Member 'FortLobbyBeaconClient_ServerSetCurrentCharacterXp::CurrentCharacterXp' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSetGadget
// 0x0018 (0x0018 - 0x0000)
struct FortLobbyBeaconClient_ServerSetGadget final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GadgetPersistentName;                              // 0x000C(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerSetGadget) == 0x000004, "Wrong alignment on FortLobbyBeaconClient_ServerSetGadget");
static_assert(sizeof(FortLobbyBeaconClient_ServerSetGadget) == 0x000018, "Wrong size on FortLobbyBeaconClient_ServerSetGadget");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetGadget, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSetGadget::InUniqueId' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetGadget, INDEX) == 0x000008, "Member 'FortLobbyBeaconClient_ServerSetGadget::INDEX' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetGadget, GadgetPersistentName) == 0x00000C, "Member 'FortLobbyBeaconClient_ServerSetGadget::GadgetPersistentName' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSetHeroId
// 0x0014 (0x0014 - 0x0000)
struct FortLobbyBeaconClient_ServerSetHeroId final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InHeroId;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerSetHeroId) == 0x000004, "Wrong alignment on FortLobbyBeaconClient_ServerSetHeroId");
static_assert(sizeof(FortLobbyBeaconClient_ServerSetHeroId) == 0x000014, "Wrong size on FortLobbyBeaconClient_ServerSetHeroId");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetHeroId, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSetHeroId::InUniqueId' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetHeroId, InHeroId) == 0x000008, "Member 'FortLobbyBeaconClient_ServerSetHeroId::InHeroId' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSetHeroType
// 0x000C (0x000C - 0x0000)
struct FortLobbyBeaconClient_ServerSetHeroType final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortHeroType*                    InHeroType;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerSetHeroType) == 0x000004, "Wrong alignment on FortLobbyBeaconClient_ServerSetHeroType");
static_assert(sizeof(FortLobbyBeaconClient_ServerSetHeroType) == 0x00000C, "Wrong size on FortLobbyBeaconClient_ServerSetHeroType");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetHeroType, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSetHeroType::InUniqueId' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetHeroType, InHeroType) == 0x000008, "Member 'FortLobbyBeaconClient_ServerSetHeroType::InHeroType' has a wrong offset!");

// Function FortniteGame.FortLobbyBeaconClient.ServerSetMatchmakingLevel
// 0x000C (0x000C - 0x0000)
struct FortLobbyBeaconClient_ServerSetMatchmakingLevel final
{
public:
	struct FUniqueNetIdRepl                       InUniqueId;                                        // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MatchmakingLevel;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortLobbyBeaconClient_ServerSetMatchmakingLevel) == 0x000004, "Wrong alignment on FortLobbyBeaconClient_ServerSetMatchmakingLevel");
static_assert(sizeof(FortLobbyBeaconClient_ServerSetMatchmakingLevel) == 0x00000C, "Wrong size on FortLobbyBeaconClient_ServerSetMatchmakingLevel");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetMatchmakingLevel, InUniqueId) == 0x000000, "Member 'FortLobbyBeaconClient_ServerSetMatchmakingLevel::InUniqueId' has a wrong offset!");
static_assert(offsetof(FortLobbyBeaconClient_ServerSetMatchmakingLevel, MatchmakingLevel) == 0x000008, "Member 'FortLobbyBeaconClient_ServerSetMatchmakingLevel::MatchmakingLevel' has a wrong offset!");

// Function FortniteGame.FortPlacementActorTagTest.LineTraceByChannel
// 0x00B0 (0x00B0 - 0x0000)
struct FortPlacementActorTagTest_LineTraceByChannel final
{
public:
	class AFortPlacementActor*                    PlacementActor;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x002C(0x0080)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00AD(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlacementActorTagTest_LineTraceByChannel) == 0x000004, "Wrong alignment on FortPlacementActorTagTest_LineTraceByChannel");
static_assert(sizeof(FortPlacementActorTagTest_LineTraceByChannel) == 0x0000B0, "Wrong size on FortPlacementActorTagTest_LineTraceByChannel");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, PlacementActor) == 0x000000, "Member 'FortPlacementActorTagTest_LineTraceByChannel::PlacementActor' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, Start) == 0x000004, "Member 'FortPlacementActorTagTest_LineTraceByChannel::Start' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, End) == 0x000010, "Member 'FortPlacementActorTagTest_LineTraceByChannel::End' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, TraceChannel) == 0x00001C, "Member 'FortPlacementActorTagTest_LineTraceByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, bTraceComplex) == 0x00001D, "Member 'FortPlacementActorTagTest_LineTraceByChannel::bTraceComplex' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, ActorsToIgnore) == 0x000020, "Member 'FortPlacementActorTagTest_LineTraceByChannel::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, OutHit) == 0x00002C, "Member 'FortPlacementActorTagTest_LineTraceByChannel::OutHit' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, bIgnoreSelf) == 0x0000AC, "Member 'FortPlacementActorTagTest_LineTraceByChannel::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_LineTraceByChannel, ReturnValue) == 0x0000AD, "Member 'FortPlacementActorTagTest_LineTraceByChannel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlacementActorTagTest.ShouldApplyTagsToPlacementActor
// 0x0014 (0x0014 - 0x0000)
struct FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor final
{
public:
	class AFortPlacementActor*                    FocusPlacementActor;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AveragePlacementActorLocation;                     // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor) == 0x000004, "Wrong alignment on FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor");
static_assert(sizeof(FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor) == 0x000014, "Wrong size on FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor");
static_assert(offsetof(FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor, FocusPlacementActor) == 0x000000, "Member 'FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor::FocusPlacementActor' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor, AveragePlacementActorLocation) == 0x000004, "Member 'FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor::AveragePlacementActorLocation' has a wrong offset!");
static_assert(offsetof(FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor, ReturnValue) == 0x000010, "Member 'FortPlacementActorTagTest_ShouldApplyTagsToPlacementActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameModeFrontEnd.ShowPersonalizationScreen
// 0x0004 (0x0004 - 0x0000)
struct FortGameModeFrontEnd_ShowPersonalizationScreen final
{
public:
	class AFortPlayerController*                  PC;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameModeFrontEnd_ShowPersonalizationScreen) == 0x000004, "Wrong alignment on FortGameModeFrontEnd_ShowPersonalizationScreen");
static_assert(sizeof(FortGameModeFrontEnd_ShowPersonalizationScreen) == 0x000004, "Wrong size on FortGameModeFrontEnd_ShowPersonalizationScreen");
static_assert(offsetof(FortGameModeFrontEnd_ShowPersonalizationScreen, PC) == 0x000000, "Member 'FortGameModeFrontEnd_ShowPersonalizationScreen::PC' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility_AIPortal.GetPortalBuilding
// 0x0004 (0x0004 - 0x0000)
struct FortGameplayAbility_AIPortal_GetPortalBuilding final
{
public:
	class ABuildingSMActor*                       ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_AIPortal_GetPortalBuilding) == 0x000004, "Wrong alignment on FortGameplayAbility_AIPortal_GetPortalBuilding");
static_assert(sizeof(FortGameplayAbility_AIPortal_GetPortalBuilding) == 0x000004, "Wrong size on FortGameplayAbility_AIPortal_GetPortalBuilding");
static_assert(offsetof(FortGameplayAbility_AIPortal_GetPortalBuilding, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_AIPortal_GetPortalBuilding::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility_AIPortal.GetPortalInPoint
// 0x000C (0x000C - 0x0000)
struct FortGameplayAbility_AIPortal_GetPortalInPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_AIPortal_GetPortalInPoint) == 0x000004, "Wrong alignment on FortGameplayAbility_AIPortal_GetPortalInPoint");
static_assert(sizeof(FortGameplayAbility_AIPortal_GetPortalInPoint) == 0x00000C, "Wrong size on FortGameplayAbility_AIPortal_GetPortalInPoint");
static_assert(offsetof(FortGameplayAbility_AIPortal_GetPortalInPoint, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_AIPortal_GetPortalInPoint::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility_AIPortal.GetPortalOutPoint
// 0x000C (0x000C - 0x0000)
struct FortGameplayAbility_AIPortal_GetPortalOutPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_AIPortal_GetPortalOutPoint) == 0x000004, "Wrong alignment on FortGameplayAbility_AIPortal_GetPortalOutPoint");
static_assert(sizeof(FortGameplayAbility_AIPortal_GetPortalOutPoint) == 0x00000C, "Wrong size on FortGameplayAbility_AIPortal_GetPortalOutPoint");
static_assert(offsetof(FortGameplayAbility_AIPortal_GetPortalOutPoint, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_AIPortal_GetPortalOutPoint::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility_AIPortal.HasPortalOutPoint
// 0x0001 (0x0001 - 0x0000)
struct FortGameplayAbility_AIPortal_HasPortalOutPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_AIPortal_HasPortalOutPoint) == 0x000001, "Wrong alignment on FortGameplayAbility_AIPortal_HasPortalOutPoint");
static_assert(sizeof(FortGameplayAbility_AIPortal_HasPortalOutPoint) == 0x000001, "Wrong size on FortGameplayAbility_AIPortal_HasPortalOutPoint");
static_assert(offsetof(FortGameplayAbility_AIPortal_HasPortalOutPoint, ReturnValue) == 0x000000, "Member 'FortGameplayAbility_AIPortal_HasPortalOutPoint::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbility_AITurnTransition.GetTurnTransitionMontageSectionNameAndYawRotationRate
// 0x000C (0x000C - 0x0000)
struct FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate final
{
public:
	class FName                                   MontageSectionName;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnYawRotationRate;                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate) == 0x000004, "Wrong alignment on FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate");
static_assert(sizeof(FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate) == 0x00000C, "Wrong size on FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate");
static_assert(offsetof(FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate, MontageSectionName) == 0x000000, "Member 'FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate::MontageSectionName' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate, TurnYawRotationRate) == 0x000008, "Member 'FortGameplayAbility_AITurnTransition_GetTurnTransitionMontageSectionNameAndYawRotationRate::TurnYawRotationRate' has a wrong offset!");

// Function FortniteGame.FortGameStatePvPBaseDestruction.GetExperienceRequiredForTeamLevel
// 0x0008 (0x0008 - 0x0000)
struct FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel final
{
public:
	int32                                         TeamLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel) == 0x000004, "Wrong alignment on FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel");
static_assert(sizeof(FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel) == 0x000008, "Wrong size on FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel");
static_assert(offsetof(FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel, TeamLevel) == 0x000000, "Member 'FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel::TeamLevel' has a wrong offset!");
static_assert(offsetof(FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel, ReturnValue) == 0x000004, "Member 'FortGameStatePvPBaseDestruction_GetExperienceRequiredForTeamLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvPBaseDestruction.GetMaxTeamExperience
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvPBaseDestruction_GetMaxTeamExperience final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvPBaseDestruction_GetMaxTeamExperience) == 0x000004, "Wrong alignment on FortGameStatePvPBaseDestruction_GetMaxTeamExperience");
static_assert(sizeof(FortGameStatePvPBaseDestruction_GetMaxTeamExperience) == 0x000004, "Wrong size on FortGameStatePvPBaseDestruction_GetMaxTeamExperience");
static_assert(offsetof(FortGameStatePvPBaseDestruction_GetMaxTeamExperience, ReturnValue) == 0x000000, "Member 'FortGameStatePvPBaseDestruction_GetMaxTeamExperience::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvPBaseDestruction.GetMaxTeamLevel
// 0x0004 (0x0004 - 0x0000)
struct FortGameStatePvPBaseDestruction_GetMaxTeamLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvPBaseDestruction_GetMaxTeamLevel) == 0x000004, "Wrong alignment on FortGameStatePvPBaseDestruction_GetMaxTeamLevel");
static_assert(sizeof(FortGameStatePvPBaseDestruction_GetMaxTeamLevel) == 0x000004, "Wrong size on FortGameStatePvPBaseDestruction_GetMaxTeamLevel");
static_assert(offsetof(FortGameStatePvPBaseDestruction_GetMaxTeamLevel, ReturnValue) == 0x000000, "Member 'FortGameStatePvPBaseDestruction_GetMaxTeamLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameStatePvPBaseDestruction.GetTeamLevelForExperienceAmount
// 0x0008 (0x0008 - 0x0000)
struct FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount final
{
public:
	int32                                         Experience;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount) == 0x000004, "Wrong alignment on FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount");
static_assert(sizeof(FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount) == 0x000008, "Wrong size on FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount");
static_assert(offsetof(FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount, Experience) == 0x000000, "Member 'FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount::Experience' has a wrong offset!");
static_assert(offsetof(FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount, ReturnValue) == 0x000004, "Member 'FortGameStatePvPBaseDestruction_GetTeamLevelForExperienceAmount::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostItemDefinition.GetLongDescription
// 0x000C (0x000C - 0x0000)
struct FortOutpostItemDefinition_GetLongDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostItemDefinition_GetLongDescription) == 0x000004, "Wrong alignment on FortOutpostItemDefinition_GetLongDescription");
static_assert(sizeof(FortOutpostItemDefinition_GetLongDescription) == 0x00000C, "Wrong size on FortOutpostItemDefinition_GetLongDescription");
static_assert(offsetof(FortOutpostItemDefinition_GetLongDescription, ReturnValue) == 0x000000, "Member 'FortOutpostItemDefinition_GetLongDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ApplyGlobalEnvironmentDamageToActor
// 0x0024 (0x0024 - 0x0000)
struct FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor final
{
public:
	class AActor*                                 DamageTargetActor;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnvironmentDamage;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AdditionalContextTags;                             // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            EnvironmentDamageGE;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor) == 0x000004, "Wrong alignment on FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor");
static_assert(sizeof(FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor) == 0x000024, "Wrong size on FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor, DamageTargetActor) == 0x000000, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor::DamageTargetActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor, EnvironmentDamage) == 0x000004, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor::EnvironmentDamage' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor, AdditionalContextTags) == 0x000008, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor::AdditionalContextTags' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor, EnvironmentDamageGE) == 0x000020, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentDamageToActor::EnvironmentDamageGE' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ApplyGlobalEnvironmentGameplayEffectToActor
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor final
{
public:
	class AActor*                                 EffectTargetActor;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AdditionalContextTags;                             // 0x000C(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor) == 0x000004, "Wrong alignment on FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor");
static_assert(sizeof(FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor) == 0x000028, "Wrong size on FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor, EffectTargetActor) == 0x000000, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor::EffectTargetActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor, GameplayEffect) == 0x000004, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor, GameplayEffectLevel) == 0x000008, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor, AdditionalContextTags) == 0x00000C, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor::AdditionalContextTags' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor, ReturnValue) == 0x000024, "Member 'FortKismetLibrary_ApplyGlobalEnvironmentGameplayEffectToActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.BroadcastMessage
// 0x001C (0x001C - 0x0000)
struct FortKismetLibrary_BroadcastMessage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Type;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Source;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_BroadcastMessage) == 0x000004, "Wrong alignment on FortKismetLibrary_BroadcastMessage");
static_assert(sizeof(FortKismetLibrary_BroadcastMessage) == 0x00001C, "Wrong size on FortKismetLibrary_BroadcastMessage");
static_assert(offsetof(FortKismetLibrary_BroadcastMessage, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_BroadcastMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastMessage, Message) == 0x000004, "Member 'FortKismetLibrary_BroadcastMessage::Message' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastMessage, Type) == 0x000010, "Member 'FortKismetLibrary_BroadcastMessage::Type' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastMessage, Source) == 0x000018, "Member 'FortKismetLibrary_BroadcastMessage::Source' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.BroadcastSound
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_BroadcastSound final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             InSound;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_BroadcastSound) == 0x000004, "Wrong alignment on FortKismetLibrary_BroadcastSound");
static_assert(sizeof(FortKismetLibrary_BroadcastSound) == 0x000010, "Wrong size on FortKismetLibrary_BroadcastSound");
static_assert(offsetof(FortKismetLibrary_BroadcastSound, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_BroadcastSound::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastSound, InSound) == 0x000004, "Member 'FortKismetLibrary_BroadcastSound::InSound' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastSound, VolumeMultiplier) == 0x000008, "Member 'FortKismetLibrary_BroadcastSound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastSound, PitchMultiplier) == 0x00000C, "Member 'FortKismetLibrary_BroadcastSound::PitchMultiplier' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.BroadcastSoundAtLocation
// 0x001C (0x001C - 0x0000)
struct FortKismetLibrary_BroadcastSoundAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             InSound;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_BroadcastSoundAtLocation) == 0x000004, "Wrong alignment on FortKismetLibrary_BroadcastSoundAtLocation");
static_assert(sizeof(FortKismetLibrary_BroadcastSoundAtLocation) == 0x00001C, "Wrong size on FortKismetLibrary_BroadcastSoundAtLocation");
static_assert(offsetof(FortKismetLibrary_BroadcastSoundAtLocation, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_BroadcastSoundAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastSoundAtLocation, InSound) == 0x000004, "Member 'FortKismetLibrary_BroadcastSoundAtLocation::InSound' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastSoundAtLocation, Location) == 0x000008, "Member 'FortKismetLibrary_BroadcastSoundAtLocation::Location' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastSoundAtLocation, VolumeMultiplier) == 0x000014, "Member 'FortKismetLibrary_BroadcastSoundAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_BroadcastSoundAtLocation, PitchMultiplier) == 0x000018, "Member 'FortKismetLibrary_BroadcastSoundAtLocation::PitchMultiplier' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ClientRequestSetTimeOfDay
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_ClientRequestSetTimeOfDay final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOfDay;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_ClientRequestSetTimeOfDay) == 0x000004, "Wrong alignment on FortKismetLibrary_ClientRequestSetTimeOfDay");
static_assert(sizeof(FortKismetLibrary_ClientRequestSetTimeOfDay) == 0x000008, "Wrong size on FortKismetLibrary_ClientRequestSetTimeOfDay");
static_assert(offsetof(FortKismetLibrary_ClientRequestSetTimeOfDay, FortPC) == 0x000000, "Member 'FortKismetLibrary_ClientRequestSetTimeOfDay::FortPC' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ClientRequestSetTimeOfDay, TimeOfDay) == 0x000004, "Member 'FortKismetLibrary_ClientRequestSetTimeOfDay::TimeOfDay' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ConvertToGameTime
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_ConvertToGameTime final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRealTime;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_ConvertToGameTime) == 0x000004, "Wrong alignment on FortKismetLibrary_ConvertToGameTime");
static_assert(sizeof(FortKismetLibrary_ConvertToGameTime) == 0x00000C, "Wrong size on FortKismetLibrary_ConvertToGameTime");
static_assert(offsetof(FortKismetLibrary_ConvertToGameTime, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_ConvertToGameTime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ConvertToGameTime, InRealTime) == 0x000004, "Member 'FortKismetLibrary_ConvertToGameTime::InRealTime' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ConvertToGameTime, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_ConvertToGameTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ConvertToRealTime
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_ConvertToRealTime final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InGameTime;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_ConvertToRealTime) == 0x000004, "Wrong alignment on FortKismetLibrary_ConvertToRealTime");
static_assert(sizeof(FortKismetLibrary_ConvertToRealTime) == 0x00000C, "Wrong size on FortKismetLibrary_ConvertToRealTime");
static_assert(offsetof(FortKismetLibrary_ConvertToRealTime, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_ConvertToRealTime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ConvertToRealTime, InGameTime) == 0x000004, "Member 'FortKismetLibrary_ConvertToRealTime::InGameTime' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ConvertToRealTime, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_ConvertToRealTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.CreateNewSplineObject
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_CreateNewSplineObject final
{
public:
	class UObject*                                Outer_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSpline*                            ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_CreateNewSplineObject) == 0x000004, "Wrong alignment on FortKismetLibrary_CreateNewSplineObject");
static_assert(sizeof(FortKismetLibrary_CreateNewSplineObject) == 0x000008, "Wrong size on FortKismetLibrary_CreateNewSplineObject");
static_assert(offsetof(FortKismetLibrary_CreateNewSplineObject, Outer_0) == 0x000000, "Member 'FortKismetLibrary_CreateNewSplineObject::Outer_0' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_CreateNewSplineObject, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_CreateNewSplineObject::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.DisableTutorialHighlight
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_DisableTutorialHighlight final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_DisableTutorialHighlight) == 0x000004, "Wrong alignment on FortKismetLibrary_DisableTutorialHighlight");
static_assert(sizeof(FortKismetLibrary_DisableTutorialHighlight) == 0x000008, "Wrong size on FortKismetLibrary_DisableTutorialHighlight");
static_assert(offsetof(FortKismetLibrary_DisableTutorialHighlight, WidgetName) == 0x000000, "Member 'FortKismetLibrary_DisableTutorialHighlight::WidgetName' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.EnableTutorialHighlight
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_EnableTutorialHighlight final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_EnableTutorialHighlight) == 0x000004, "Wrong alignment on FortKismetLibrary_EnableTutorialHighlight");
static_assert(sizeof(FortKismetLibrary_EnableTutorialHighlight) == 0x000008, "Wrong size on FortKismetLibrary_EnableTutorialHighlight");
static_assert(offsetof(FortKismetLibrary_EnableTutorialHighlight, WidgetName) == 0x000000, "Member 'FortKismetLibrary_EnableTutorialHighlight::WidgetName' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.EquipFortAbilitySet
// 0x0030 (0x0030 - 0x0000)
struct FortKismetLibrary_EquipFortAbilitySet final
{
public:
	TScriptInterface<class IAbilitySystemInterface> AbilitySystemInterfaceActor;                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UFortAbilitySet*                        AbilitySet;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OverrideSourceObject;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortAbilitySetHandle                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_EquipFortAbilitySet) == 0x000004, "Wrong alignment on FortKismetLibrary_EquipFortAbilitySet");
static_assert(sizeof(FortKismetLibrary_EquipFortAbilitySet) == 0x000030, "Wrong size on FortKismetLibrary_EquipFortAbilitySet");
static_assert(offsetof(FortKismetLibrary_EquipFortAbilitySet, AbilitySystemInterfaceActor) == 0x000000, "Member 'FortKismetLibrary_EquipFortAbilitySet::AbilitySystemInterfaceActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EquipFortAbilitySet, AbilitySet) == 0x000008, "Member 'FortKismetLibrary_EquipFortAbilitySet::AbilitySet' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EquipFortAbilitySet, OverrideSourceObject) == 0x00000C, "Member 'FortKismetLibrary_EquipFortAbilitySet::OverrideSourceObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EquipFortAbilitySet, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_EquipFortAbilitySet::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.EvaluateCurveTableRow
// 0x0024 (0x0024 - 0x0000)
struct FortKismetLibrary_EvaluateCurveTableRow final
{
public:
	struct FCurveTableRowHandle                   CurveTableRowHandle;                               // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	float                                         InXY;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutXY;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextString;                                     // 0x0014(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_EvaluateCurveTableRow) == 0x000004, "Wrong alignment on FortKismetLibrary_EvaluateCurveTableRow");
static_assert(sizeof(FortKismetLibrary_EvaluateCurveTableRow) == 0x000024, "Wrong size on FortKismetLibrary_EvaluateCurveTableRow");
static_assert(offsetof(FortKismetLibrary_EvaluateCurveTableRow, CurveTableRowHandle) == 0x000000, "Member 'FortKismetLibrary_EvaluateCurveTableRow::CurveTableRowHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EvaluateCurveTableRow, InXY) == 0x00000C, "Member 'FortKismetLibrary_EvaluateCurveTableRow::InXY' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EvaluateCurveTableRow, OutXY) == 0x000010, "Member 'FortKismetLibrary_EvaluateCurveTableRow::OutXY' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EvaluateCurveTableRow, ContextString) == 0x000014, "Member 'FortKismetLibrary_EvaluateCurveTableRow::ContextString' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_EvaluateCurveTableRow, ReturnValue) == 0x000020, "Member 'FortKismetLibrary_EvaluateCurveTableRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ExecuteClientEvent
// 0x001C (0x001C - 0x0000)
struct FortKismetLibrary_ExecuteClientEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortClientEventName                   EventType;                                         // 0x0004(0x0010)(Parm, NativeAccessSpecifierPublic)
	class UObject*                                EventSource;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_ExecuteClientEvent) == 0x000004, "Wrong alignment on FortKismetLibrary_ExecuteClientEvent");
static_assert(sizeof(FortKismetLibrary_ExecuteClientEvent) == 0x00001C, "Wrong size on FortKismetLibrary_ExecuteClientEvent");
static_assert(offsetof(FortKismetLibrary_ExecuteClientEvent, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_ExecuteClientEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ExecuteClientEvent, EventType) == 0x000004, "Member 'FortKismetLibrary_ExecuteClientEvent::EventType' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ExecuteClientEvent, EventSource) == 0x000014, "Member 'FortKismetLibrary_ExecuteClientEvent::EventSource' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ExecuteClientEvent, EventFocus) == 0x000018, "Member 'FortKismetLibrary_ExecuteClientEvent::EventFocus' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetActorTeam
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetActorTeam final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetActorTeam) == 0x000004, "Wrong alignment on FortKismetLibrary_GetActorTeam");
static_assert(sizeof(FortKismetLibrary_GetActorTeam) == 0x000008, "Wrong size on FortKismetLibrary_GetActorTeam");
static_assert(offsetof(FortKismetLibrary_GetActorTeam, Actor) == 0x000000, "Member 'FortKismetLibrary_GetActorTeam::Actor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetActorTeam, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetActorTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetActorTeamInfo
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetActorTeamInfo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortTeamInfo*                          ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetActorTeamInfo) == 0x000004, "Wrong alignment on FortKismetLibrary_GetActorTeamInfo");
static_assert(sizeof(FortKismetLibrary_GetActorTeamInfo) == 0x000008, "Wrong size on FortKismetLibrary_GetActorTeamInfo");
static_assert(offsetof(FortKismetLibrary_GetActorTeamInfo, Actor) == 0x000000, "Member 'FortKismetLibrary_GetActorTeamInfo::Actor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetActorTeamInfo, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetActorTeamInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetAIDirector
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetAIDirector final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAIDirector*                        ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetAIDirector) == 0x000004, "Wrong alignment on FortKismetLibrary_GetAIDirector");
static_assert(sizeof(FortKismetLibrary_GetAIDirector) == 0x000008, "Wrong size on FortKismetLibrary_GetAIDirector");
static_assert(offsetof(FortKismetLibrary_GetAIDirector, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetAIDirector::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetAIDirector, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetAIDirector::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetAIGoalManager
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetAIGoalManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAIGoalManager*                     ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetAIGoalManager) == 0x000004, "Wrong alignment on FortKismetLibrary_GetAIGoalManager");
static_assert(sizeof(FortKismetLibrary_GetAIGoalManager) == 0x000008, "Wrong size on FortKismetLibrary_GetAIGoalManager");
static_assert(offsetof(FortKismetLibrary_GetAIGoalManager, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetAIGoalManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetAIGoalManager, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetAIGoalManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetAllFortPlayerControllers
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetAllFortPlayerControllers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AFortPlayerController*>          ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetAllFortPlayerControllers) == 0x000004, "Wrong alignment on FortKismetLibrary_GetAllFortPlayerControllers");
static_assert(sizeof(FortKismetLibrary_GetAllFortPlayerControllers) == 0x000010, "Wrong size on FortKismetLibrary_GetAllFortPlayerControllers");
static_assert(offsetof(FortKismetLibrary_GetAllFortPlayerControllers, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetAllFortPlayerControllers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetAllFortPlayerControllers, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetAllFortPlayerControllers::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetAllFortPlayerPawns
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetAllFortPlayerPawns final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AFortPlayerPawn*>                OutFortPlayerPawns;                                // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetAllFortPlayerPawns) == 0x000004, "Wrong alignment on FortKismetLibrary_GetAllFortPlayerPawns");
static_assert(sizeof(FortKismetLibrary_GetAllFortPlayerPawns) == 0x000010, "Wrong size on FortKismetLibrary_GetAllFortPlayerPawns");
static_assert(offsetof(FortKismetLibrary_GetAllFortPlayerPawns, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetAllFortPlayerPawns::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetAllFortPlayerPawns, OutFortPlayerPawns) == 0x000004, "Member 'FortKismetLibrary_GetAllFortPlayerPawns::OutFortPlayerPawns' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetBuildingHealthPercentage
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetBuildingHealthPercentage final
{
public:
	const class ABuildingActor*                   BuildingActor;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetBuildingHealthPercentage) == 0x000004, "Wrong alignment on FortKismetLibrary_GetBuildingHealthPercentage");
static_assert(sizeof(FortKismetLibrary_GetBuildingHealthPercentage) == 0x000008, "Wrong size on FortKismetLibrary_GetBuildingHealthPercentage");
static_assert(offsetof(FortKismetLibrary_GetBuildingHealthPercentage, BuildingActor) == 0x000000, "Member 'FortKismetLibrary_GetBuildingHealthPercentage::BuildingActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetBuildingHealthPercentage, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetBuildingHealthPercentage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetBuildingStructuralSupportSystem
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetBuildingStructuralSupportSystem final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBuildingStructuralSupportSystem*       BuildingStructuralSupportSystem;                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetBuildingStructuralSupportSystem) == 0x000004, "Wrong alignment on FortKismetLibrary_GetBuildingStructuralSupportSystem");
static_assert(sizeof(FortKismetLibrary_GetBuildingStructuralSupportSystem) == 0x000008, "Wrong size on FortKismetLibrary_GetBuildingStructuralSupportSystem");
static_assert(offsetof(FortKismetLibrary_GetBuildingStructuralSupportSystem, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetBuildingStructuralSupportSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetBuildingStructuralSupportSystem, BuildingStructuralSupportSystem) == 0x000004, "Member 'FortKismetLibrary_GetBuildingStructuralSupportSystem::BuildingStructuralSupportSystem' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetCalculatedGameDifficulty
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetCalculatedGameDifficulty final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetCalculatedGameDifficulty) == 0x000004, "Wrong alignment on FortKismetLibrary_GetCalculatedGameDifficulty");
static_assert(sizeof(FortKismetLibrary_GetCalculatedGameDifficulty) == 0x000008, "Wrong size on FortKismetLibrary_GetCalculatedGameDifficulty");
static_assert(offsetof(FortKismetLibrary_GetCalculatedGameDifficulty, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetCalculatedGameDifficulty::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetCalculatedGameDifficulty, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetCalculatedGameDifficulty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetClosestBuildingActorFromArray
// 0x0014 (0x0014 - 0x0000)
struct FortKismetLibrary_GetClosestBuildingActorFromArray final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABuildingSMActor*>               ArrayOfBuildings;                                  // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ABuildingSMActor*                       ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetClosestBuildingActorFromArray) == 0x000004, "Wrong alignment on FortKismetLibrary_GetClosestBuildingActorFromArray");
static_assert(sizeof(FortKismetLibrary_GetClosestBuildingActorFromArray) == 0x000014, "Wrong size on FortKismetLibrary_GetClosestBuildingActorFromArray");
static_assert(offsetof(FortKismetLibrary_GetClosestBuildingActorFromArray, Actor) == 0x000000, "Member 'FortKismetLibrary_GetClosestBuildingActorFromArray::Actor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetClosestBuildingActorFromArray, ArrayOfBuildings) == 0x000004, "Member 'FortKismetLibrary_GetClosestBuildingActorFromArray::ArrayOfBuildings' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetClosestBuildingActorFromArray, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_GetClosestBuildingActorFromArray::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetClosestFortPlayerPawn
// 0x0014 (0x0014 - 0x0000)
struct FortKismetLibrary_GetClosestFortPlayerPawn final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortPlayerPawn*                        ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetClosestFortPlayerPawn) == 0x000004, "Wrong alignment on FortKismetLibrary_GetClosestFortPlayerPawn");
static_assert(sizeof(FortKismetLibrary_GetClosestFortPlayerPawn) == 0x000014, "Wrong size on FortKismetLibrary_GetClosestFortPlayerPawn");
static_assert(offsetof(FortKismetLibrary_GetClosestFortPlayerPawn, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetClosestFortPlayerPawn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetClosestFortPlayerPawn, Position) == 0x000004, "Member 'FortKismetLibrary_GetClosestFortPlayerPawn::Position' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetClosestFortPlayerPawn, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_GetClosestFortPlayerPawn::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetCurrentDayPhase
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetCurrentDayPhase final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetCurrentDayPhase) == 0x000004, "Wrong alignment on FortKismetLibrary_GetCurrentDayPhase");
static_assert(sizeof(FortKismetLibrary_GetCurrentDayPhase) == 0x000008, "Wrong size on FortKismetLibrary_GetCurrentDayPhase");
static_assert(offsetof(FortKismetLibrary_GetCurrentDayPhase, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetCurrentDayPhase::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetCurrentDayPhase, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetCurrentDayPhase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetDayNightDirectionalLightColor
// 0x0014 (0x0014 - 0x0000)
struct FortKismetLibrary_GetDayNightDirectionalLightColor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetDayNightDirectionalLightColor) == 0x000004, "Wrong alignment on FortKismetLibrary_GetDayNightDirectionalLightColor");
static_assert(sizeof(FortKismetLibrary_GetDayNightDirectionalLightColor) == 0x000014, "Wrong size on FortKismetLibrary_GetDayNightDirectionalLightColor");
static_assert(offsetof(FortKismetLibrary_GetDayNightDirectionalLightColor, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetDayNightDirectionalLightColor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetDayNightDirectionalLightColor, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetDayNightDirectionalLightColor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetDayNightDirectionalLightVector
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetDayNightDirectionalLightVector final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetDayNightDirectionalLightVector) == 0x000004, "Wrong alignment on FortKismetLibrary_GetDayNightDirectionalLightVector");
static_assert(sizeof(FortKismetLibrary_GetDayNightDirectionalLightVector) == 0x000010, "Wrong size on FortKismetLibrary_GetDayNightDirectionalLightVector");
static_assert(offsetof(FortKismetLibrary_GetDayNightDirectionalLightVector, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetDayNightDirectionalLightVector::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetDayNightDirectionalLightVector, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetDayNightDirectionalLightVector::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetDefaultAbsoluteTimeOfDaySpeed
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed) == 0x000004, "Wrong alignment on FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed");
static_assert(sizeof(FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed) == 0x000008, "Wrong size on FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed");
static_assert(offsetof(FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetDefaultAbsoluteTimeOfDaySpeed::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetDirectionActorToActor
// 0x0014 (0x0014 - 0x0000)
struct FortKismetLibrary_GetDirectionActorToActor final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetDirectionActorToActor) == 0x000004, "Wrong alignment on FortKismetLibrary_GetDirectionActorToActor");
static_assert(sizeof(FortKismetLibrary_GetDirectionActorToActor) == 0x000014, "Wrong size on FortKismetLibrary_GetDirectionActorToActor");
static_assert(offsetof(FortKismetLibrary_GetDirectionActorToActor, SourceActor) == 0x000000, "Member 'FortKismetLibrary_GetDirectionActorToActor::SourceActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetDirectionActorToActor, TargetActor) == 0x000004, "Member 'FortKismetLibrary_GetDirectionActorToActor::TargetActor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetDirectionActorToActor, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetDirectionActorToActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetFloatHoursUntilDayPhase
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_GetFloatHoursUntilDayPhase final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 DayPhase;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetFloatHoursUntilDayPhase) == 0x000004, "Wrong alignment on FortKismetLibrary_GetFloatHoursUntilDayPhase");
static_assert(sizeof(FortKismetLibrary_GetFloatHoursUntilDayPhase) == 0x00000C, "Wrong size on FortKismetLibrary_GetFloatHoursUntilDayPhase");
static_assert(offsetof(FortKismetLibrary_GetFloatHoursUntilDayPhase, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetFloatHoursUntilDayPhase::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetFloatHoursUntilDayPhase, DayPhase) == 0x000004, "Member 'FortKismetLibrary_GetFloatHoursUntilDayPhase::DayPhase' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetFloatHoursUntilDayPhase, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetFloatHoursUntilDayPhase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetFortPhysicalSurface
// 0x0084 (0x0084 - 0x0000)
struct FortKismetLibrary_GetFortPhysicalSurface final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetFortPhysicalSurface) == 0x000004, "Wrong alignment on FortKismetLibrary_GetFortPhysicalSurface");
static_assert(sizeof(FortKismetLibrary_GetFortPhysicalSurface) == 0x000084, "Wrong size on FortKismetLibrary_GetFortPhysicalSurface");
static_assert(offsetof(FortKismetLibrary_GetFortPhysicalSurface, Hit) == 0x000000, "Member 'FortKismetLibrary_GetFortPhysicalSurface::Hit' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetFortPhysicalSurface, ReturnValue) == 0x000080, "Member 'FortKismetLibrary_GetFortPhysicalSurface::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetFortPlayerPawns
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetFortPlayerPawns final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AFortPlayerPawn*>                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetFortPlayerPawns) == 0x000004, "Wrong alignment on FortKismetLibrary_GetFortPlayerPawns");
static_assert(sizeof(FortKismetLibrary_GetFortPlayerPawns) == 0x000010, "Wrong size on FortKismetLibrary_GetFortPlayerPawns");
static_assert(offsetof(FortKismetLibrary_GetFortPlayerPawns, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetFortPlayerPawns::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetFortPlayerPawns, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetFortPlayerPawns::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetGameDifficulty
// 0x0004 (0x0004 - 0x0000)
struct FortKismetLibrary_GetGameDifficulty final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetGameDifficulty) == 0x000004, "Wrong alignment on FortKismetLibrary_GetGameDifficulty");
static_assert(sizeof(FortKismetLibrary_GetGameDifficulty) == 0x000004, "Wrong size on FortKismetLibrary_GetGameDifficulty");
static_assert(offsetof(FortKismetLibrary_GetGameDifficulty, ReturnValue) == 0x000000, "Member 'FortKismetLibrary_GetGameDifficulty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetHostilityPercentage
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetHostilityPercentage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetHostilityPercentage) == 0x000004, "Wrong alignment on FortKismetLibrary_GetHostilityPercentage");
static_assert(sizeof(FortKismetLibrary_GetHostilityPercentage) == 0x000008, "Wrong size on FortKismetLibrary_GetHostilityPercentage");
static_assert(offsetof(FortKismetLibrary_GetHostilityPercentage, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetHostilityPercentage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetHostilityPercentage, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetHostilityPercentage::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetHoursUntilDayPhase
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_GetHoursUntilDayPhase final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 DayPhase;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetHoursUntilDayPhase) == 0x000004, "Wrong alignment on FortKismetLibrary_GetHoursUntilDayPhase");
static_assert(sizeof(FortKismetLibrary_GetHoursUntilDayPhase) == 0x00000C, "Wrong size on FortKismetLibrary_GetHoursUntilDayPhase");
static_assert(offsetof(FortKismetLibrary_GetHoursUntilDayPhase, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetHoursUntilDayPhase::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetHoursUntilDayPhase, DayPhase) == 0x000004, "Member 'FortKismetLibrary_GetHoursUntilDayPhase::DayPhase' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetHoursUntilDayPhase, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetHoursUntilDayPhase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetHumanReadableName
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetHumanReadableName final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetHumanReadableName) == 0x000004, "Wrong alignment on FortKismetLibrary_GetHumanReadableName");
static_assert(sizeof(FortKismetLibrary_GetHumanReadableName) == 0x000010, "Wrong size on FortKismetLibrary_GetHumanReadableName");
static_assert(offsetof(FortKismetLibrary_GetHumanReadableName, Actor) == 0x000000, "Member 'FortKismetLibrary_GetHumanReadableName::Actor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetHumanReadableName, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetHumanReadableName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetImpulseData
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_GetImpulseData final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                ImpulseDirection;                                  // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         KnockbackMagnitude;                                // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockbackZAngle;                                   // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetImpulseData) == 0x000004, "Wrong alignment on FortKismetLibrary_GetImpulseData");
static_assert(sizeof(FortKismetLibrary_GetImpulseData) == 0x000020, "Wrong size on FortKismetLibrary_GetImpulseData");
static_assert(offsetof(FortKismetLibrary_GetImpulseData, EffectContext) == 0x000000, "Member 'FortKismetLibrary_GetImpulseData::EffectContext' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetImpulseData, ImpulseDirection) == 0x00000C, "Member 'FortKismetLibrary_GetImpulseData::ImpulseDirection' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetImpulseData, KnockbackMagnitude) == 0x000018, "Member 'FortKismetLibrary_GetImpulseData::KnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetImpulseData, KnockbackZAngle) == 0x00001C, "Member 'FortKismetLibrary_GetImpulseData::KnockbackZAngle' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetLocalFortPlayerControllers
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_GetLocalFortPlayerControllers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AFortPlayerController*>          ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetLocalFortPlayerControllers) == 0x000004, "Wrong alignment on FortKismetLibrary_GetLocalFortPlayerControllers");
static_assert(sizeof(FortKismetLibrary_GetLocalFortPlayerControllers) == 0x000010, "Wrong size on FortKismetLibrary_GetLocalFortPlayerControllers");
static_assert(offsetof(FortKismetLibrary_GetLocalFortPlayerControllers, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetLocalFortPlayerControllers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetLocalFortPlayerControllers, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetLocalFortPlayerControllers::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetMeleeWeaponStatsRow
// 0x0120 (0x0120 - 0x0000)
struct FortKismetLibrary_GetMeleeWeaponStatsRow final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FFortMeleeWeaponStats                  OutRow;                                            // 0x000C(0x0110)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x011C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetMeleeWeaponStatsRow) == 0x000004, "Wrong alignment on FortKismetLibrary_GetMeleeWeaponStatsRow");
static_assert(sizeof(FortKismetLibrary_GetMeleeWeaponStatsRow) == 0x000120, "Wrong size on FortKismetLibrary_GetMeleeWeaponStatsRow");
static_assert(offsetof(FortKismetLibrary_GetMeleeWeaponStatsRow, DataTableRowHandle) == 0x000000, "Member 'FortKismetLibrary_GetMeleeWeaponStatsRow::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetMeleeWeaponStatsRow, OutRow) == 0x00000C, "Member 'FortKismetLibrary_GetMeleeWeaponStatsRow::OutRow' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetMeleeWeaponStatsRow, ReturnValue) == 0x00011C, "Member 'FortKismetLibrary_GetMeleeWeaponStatsRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetMIDForSkeletalMeshComponent
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_GetMIDForSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElementIndex;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetMIDForSkeletalMeshComponent) == 0x000004, "Wrong alignment on FortKismetLibrary_GetMIDForSkeletalMeshComponent");
static_assert(sizeof(FortKismetLibrary_GetMIDForSkeletalMeshComponent) == 0x00000C, "Wrong size on FortKismetLibrary_GetMIDForSkeletalMeshComponent");
static_assert(offsetof(FortKismetLibrary_GetMIDForSkeletalMeshComponent, SkeletalMeshComponent) == 0x000000, "Member 'FortKismetLibrary_GetMIDForSkeletalMeshComponent::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetMIDForSkeletalMeshComponent, ElementIndex) == 0x000004, "Member 'FortKismetLibrary_GetMIDForSkeletalMeshComponent::ElementIndex' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetMIDForSkeletalMeshComponent, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetMIDForSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetNumericCVar
// 0x0014 (0x0014 - 0x0000)
struct FortKismetLibrary_GetNumericCVar final
{
public:
	class FString                                 CVar;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutValue;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetNumericCVar) == 0x000004, "Wrong alignment on FortKismetLibrary_GetNumericCVar");
static_assert(sizeof(FortKismetLibrary_GetNumericCVar) == 0x000014, "Wrong size on FortKismetLibrary_GetNumericCVar");
static_assert(offsetof(FortKismetLibrary_GetNumericCVar, CVar) == 0x000000, "Member 'FortKismetLibrary_GetNumericCVar::CVar' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetNumericCVar, OutValue) == 0x00000C, "Member 'FortKismetLibrary_GetNumericCVar::OutValue' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetNumericCVar, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_GetNumericCVar::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetPawnStatsRow
// 0x0040 (0x0040 - 0x0000)
struct FortKismetLibrary_GetPawnStatsRow final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FFortPawnStats                         OutRow;                                            // 0x000C(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetPawnStatsRow) == 0x000004, "Wrong alignment on FortKismetLibrary_GetPawnStatsRow");
static_assert(sizeof(FortKismetLibrary_GetPawnStatsRow) == 0x000040, "Wrong size on FortKismetLibrary_GetPawnStatsRow");
static_assert(offsetof(FortKismetLibrary_GetPawnStatsRow, DataTableRowHandle) == 0x000000, "Member 'FortKismetLibrary_GetPawnStatsRow::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetPawnStatsRow, OutRow) == 0x00000C, "Member 'FortKismetLibrary_GetPawnStatsRow::OutRow' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetPawnStatsRow, ReturnValue) == 0x00003C, "Member 'FortKismetLibrary_GetPawnStatsRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetPreviousDayPhase
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetPreviousDayPhase final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetPreviousDayPhase) == 0x000004, "Wrong alignment on FortKismetLibrary_GetPreviousDayPhase");
static_assert(sizeof(FortKismetLibrary_GetPreviousDayPhase) == 0x000008, "Wrong size on FortKismetLibrary_GetPreviousDayPhase");
static_assert(offsetof(FortKismetLibrary_GetPreviousDayPhase, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetPreviousDayPhase::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetPreviousDayPhase, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetPreviousDayPhase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetPrimaryInstance
// 0x0054 (0x0054 - 0x0000)
struct FortKismetLibrary_GetPrimaryInstance final
{
public:
	struct FGameplayAbilitySpec                   Spec;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetPrimaryInstance) == 0x000004, "Wrong alignment on FortKismetLibrary_GetPrimaryInstance");
static_assert(sizeof(FortKismetLibrary_GetPrimaryInstance) == 0x000054, "Wrong size on FortKismetLibrary_GetPrimaryInstance");
static_assert(offsetof(FortKismetLibrary_GetPrimaryInstance, Spec) == 0x000000, "Member 'FortKismetLibrary_GetPrimaryInstance::Spec' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetPrimaryInstance, ReturnValue) == 0x000050, "Member 'FortKismetLibrary_GetPrimaryInstance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetRangedWeaponStatsRow
// 0x0188 (0x0188 - 0x0000)
struct FortKismetLibrary_GetRangedWeaponStatsRow final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FFortRangedWeaponStats                 OutRow;                                            // 0x000C(0x0178)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0184(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetRangedWeaponStatsRow) == 0x000004, "Wrong alignment on FortKismetLibrary_GetRangedWeaponStatsRow");
static_assert(sizeof(FortKismetLibrary_GetRangedWeaponStatsRow) == 0x000188, "Wrong size on FortKismetLibrary_GetRangedWeaponStatsRow");
static_assert(offsetof(FortKismetLibrary_GetRangedWeaponStatsRow, DataTableRowHandle) == 0x000000, "Member 'FortKismetLibrary_GetRangedWeaponStatsRow::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetRangedWeaponStatsRow, OutRow) == 0x00000C, "Member 'FortKismetLibrary_GetRangedWeaponStatsRow::OutRow' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetRangedWeaponStatsRow, ReturnValue) == 0x000184, "Member 'FortKismetLibrary_GetRangedWeaponStatsRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTeamAffiliation
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_GetTeamAffiliation final
{
public:
	const class AActor*                           ActorA;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorB;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeamAffiliation                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTeamAffiliation) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTeamAffiliation");
static_assert(sizeof(FortKismetLibrary_GetTeamAffiliation) == 0x00000C, "Wrong size on FortKismetLibrary_GetTeamAffiliation");
static_assert(offsetof(FortKismetLibrary_GetTeamAffiliation, ActorA) == 0x000000, "Member 'FortKismetLibrary_GetTeamAffiliation::ActorA' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTeamAffiliation, ActorB) == 0x000004, "Member 'FortKismetLibrary_GetTeamAffiliation::ActorB' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTeamAffiliation, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetTeamAffiliation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTeamAffiliationBetweenTeams
// 0x0003 (0x0003 - 0x0000)
struct FortKismetLibrary_GetTeamAffiliationBetweenTeams final
{
public:
	EFortTeam                                     TeamA;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     TeamB;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeamAffiliation                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetTeamAffiliationBetweenTeams) == 0x000001, "Wrong alignment on FortKismetLibrary_GetTeamAffiliationBetweenTeams");
static_assert(sizeof(FortKismetLibrary_GetTeamAffiliationBetweenTeams) == 0x000003, "Wrong size on FortKismetLibrary_GetTeamAffiliationBetweenTeams");
static_assert(offsetof(FortKismetLibrary_GetTeamAffiliationBetweenTeams, TeamA) == 0x000000, "Member 'FortKismetLibrary_GetTeamAffiliationBetweenTeams::TeamA' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTeamAffiliationBetweenTeams, TeamB) == 0x000001, "Member 'FortKismetLibrary_GetTeamAffiliationBetweenTeams::TeamB' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTeamAffiliationBetweenTeams, ReturnValue) == 0x000002, "Member 'FortKismetLibrary_GetTeamAffiliationBetweenTeams::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTeamInfo
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_GetTeamInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     Team;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortTeamInfo*                          ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetTeamInfo) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTeamInfo");
static_assert(sizeof(FortKismetLibrary_GetTeamInfo) == 0x00000C, "Wrong size on FortKismetLibrary_GetTeamInfo");
static_assert(offsetof(FortKismetLibrary_GetTeamInfo, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTeamInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTeamInfo, Team) == 0x000004, "Member 'FortKismetLibrary_GetTeamInfo::Team' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTeamInfo, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetTeamInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetThreatVisualsManager
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetThreatVisualsManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortThreatVisualsManager*              ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetThreatVisualsManager) == 0x000004, "Wrong alignment on FortKismetLibrary_GetThreatVisualsManager");
static_assert(sizeof(FortKismetLibrary_GetThreatVisualsManager) == 0x000008, "Wrong size on FortKismetLibrary_GetThreatVisualsManager");
static_assert(offsetof(FortKismetLibrary_GetThreatVisualsManager, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetThreatVisualsManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetThreatVisualsManager, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetThreatVisualsManager::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTimeDayPhaseBegins
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_GetTimeDayPhaseBegins final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 DayPhase;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetTimeDayPhaseBegins) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTimeDayPhaseBegins");
static_assert(sizeof(FortKismetLibrary_GetTimeDayPhaseBegins) == 0x00000C, "Wrong size on FortKismetLibrary_GetTimeDayPhaseBegins");
static_assert(offsetof(FortKismetLibrary_GetTimeDayPhaseBegins, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTimeDayPhaseBegins::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTimeDayPhaseBegins, DayPhase) == 0x000004, "Member 'FortKismetLibrary_GetTimeDayPhaseBegins::DayPhase' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTimeDayPhaseBegins, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetTimeDayPhaseBegins::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTimeOfDay
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetTimeOfDay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetTimeOfDay) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTimeOfDay");
static_assert(sizeof(FortKismetLibrary_GetTimeOfDay) == 0x000008, "Wrong size on FortKismetLibrary_GetTimeOfDay");
static_assert(offsetof(FortKismetLibrary_GetTimeOfDay, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTimeOfDay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTimeOfDay, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetTimeOfDay::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTimeOfDayAccumulator
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetTimeOfDayAccumulator final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetTimeOfDayAccumulator) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTimeOfDayAccumulator");
static_assert(sizeof(FortKismetLibrary_GetTimeOfDayAccumulator) == 0x000008, "Wrong size on FortKismetLibrary_GetTimeOfDayAccumulator");
static_assert(offsetof(FortKismetLibrary_GetTimeOfDayAccumulator, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTimeOfDayAccumulator::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTimeOfDayAccumulator, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetTimeOfDayAccumulator::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTimeOfDaySpeed
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_GetTimeOfDaySpeed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetTimeOfDaySpeed) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTimeOfDaySpeed");
static_assert(sizeof(FortKismetLibrary_GetTimeOfDaySpeed) == 0x000008, "Wrong size on FortKismetLibrary_GetTimeOfDaySpeed");
static_assert(offsetof(FortKismetLibrary_GetTimeOfDaySpeed, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTimeOfDaySpeed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTimeOfDaySpeed, ReturnValue) == 0x000004, "Member 'FortKismetLibrary_GetTimeOfDaySpeed::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTimeUntilInRealTimeSeconds
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_GetTimeUntilInRealTimeSeconds final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_GetTimeUntilInRealTimeSeconds) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTimeUntilInRealTimeSeconds");
static_assert(sizeof(FortKismetLibrary_GetTimeUntilInRealTimeSeconds) == 0x00000C, "Wrong size on FortKismetLibrary_GetTimeUntilInRealTimeSeconds");
static_assert(offsetof(FortKismetLibrary_GetTimeUntilInRealTimeSeconds, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_GetTimeUntilInRealTimeSeconds::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTimeUntilInRealTimeSeconds, GameTime) == 0x000004, "Member 'FortKismetLibrary_GetTimeUntilInRealTimeSeconds::GameTime' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTimeUntilInRealTimeSeconds, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_GetTimeUntilInRealTimeSeconds::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTooltipDescription
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_GetTooltipDescription final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(Parm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0010(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTooltipDescription) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTooltipDescription");
static_assert(sizeof(FortKismetLibrary_GetTooltipDescription) == 0x000020, "Wrong size on FortKismetLibrary_GetTooltipDescription");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescription, ObjectToDescribe) == 0x000000, "Member 'FortKismetLibrary_GetTooltipDescription::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescription, Tag) == 0x000004, "Member 'FortKismetLibrary_GetTooltipDescription::Tag' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescription, Context) == 0x00000C, "Member 'FortKismetLibrary_GetTooltipDescription::Context' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescription, Description) == 0x000010, "Member 'FortKismetLibrary_GetTooltipDescription::Description' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescription, ReturnValue) == 0x00001C, "Member 'FortKismetLibrary_GetTooltipDescription::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTooltipDescriptionArray
// 0x0024 (0x0024 - 0x0000)
struct FortKismetLibrary_GetTooltipDescriptionArray final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   Tags;                                              // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           Descriptions;                                      // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTooltipDescriptionArray) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTooltipDescriptionArray");
static_assert(sizeof(FortKismetLibrary_GetTooltipDescriptionArray) == 0x000024, "Wrong size on FortKismetLibrary_GetTooltipDescriptionArray");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionArray, ObjectToDescribe) == 0x000000, "Member 'FortKismetLibrary_GetTooltipDescriptionArray::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionArray, Tags) == 0x000004, "Member 'FortKismetLibrary_GetTooltipDescriptionArray::Tags' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionArray, Context) == 0x000010, "Member 'FortKismetLibrary_GetTooltipDescriptionArray::Context' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionArray, Descriptions) == 0x000014, "Member 'FortKismetLibrary_GetTooltipDescriptionArray::Descriptions' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionArray, ReturnValue) == 0x000020, "Member 'FortKismetLibrary_GetTooltipDescriptionArray::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTooltipDescriptionArrayFromTooltipClass
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortTooltip>               TooltipClass;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   Tags;                                              // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           Descriptions;                                      // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass");
static_assert(sizeof(FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass) == 0x000028, "Wrong size on FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass, ObjectToDescribe) == 0x000000, "Member 'FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass, TooltipClass) == 0x000004, "Member 'FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass::TooltipClass' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass, Tags) == 0x000008, "Member 'FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass::Tags' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass, Context) == 0x000014, "Member 'FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass::Context' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass, Descriptions) == 0x000018, "Member 'FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass::Descriptions' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass, ReturnValue) == 0x000024, "Member 'FortKismetLibrary_GetTooltipDescriptionArrayFromTooltipClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTooltipDescriptionFromTooltipClass
// 0x0024 (0x0024 - 0x0000)
struct FortKismetLibrary_GetTooltipDescriptionFromTooltipClass final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortTooltip>               TooltipClass;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0014(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTooltipDescriptionFromTooltipClass");
static_assert(sizeof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass) == 0x000024, "Wrong size on FortKismetLibrary_GetTooltipDescriptionFromTooltipClass");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass, ObjectToDescribe) == 0x000000, "Member 'FortKismetLibrary_GetTooltipDescriptionFromTooltipClass::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass, TooltipClass) == 0x000004, "Member 'FortKismetLibrary_GetTooltipDescriptionFromTooltipClass::TooltipClass' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass, Tag) == 0x000008, "Member 'FortKismetLibrary_GetTooltipDescriptionFromTooltipClass::Tag' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass, Context) == 0x000010, "Member 'FortKismetLibrary_GetTooltipDescriptionFromTooltipClass::Context' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass, Description) == 0x000014, "Member 'FortKismetLibrary_GetTooltipDescriptionFromTooltipClass::Description' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipDescriptionFromTooltipClass, ReturnValue) == 0x000020, "Member 'FortKismetLibrary_GetTooltipDescriptionFromTooltipClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTooltipNumericValue
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_GetTooltipNumericValue final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(Parm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTooltipNumericValue) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTooltipNumericValue");
static_assert(sizeof(FortKismetLibrary_GetTooltipNumericValue) == 0x000020, "Wrong size on FortKismetLibrary_GetTooltipNumericValue");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValue, ObjectToDescribe) == 0x000000, "Member 'FortKismetLibrary_GetTooltipNumericValue::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValue, Tag) == 0x000004, "Member 'FortKismetLibrary_GetTooltipNumericValue::Tag' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValue, Context) == 0x00000C, "Member 'FortKismetLibrary_GetTooltipNumericValue::Context' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValue, Token) == 0x000010, "Member 'FortKismetLibrary_GetTooltipNumericValue::Token' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValue, Value) == 0x000018, "Member 'FortKismetLibrary_GetTooltipNumericValue::Value' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValue, ReturnValue) == 0x00001C, "Member 'FortKismetLibrary_GetTooltipNumericValue::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTooltipNumericValueFromTooltipClass
// 0x0024 (0x0024 - 0x0000)
struct FortKismetLibrary_GetTooltipNumericValueFromTooltipClass final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortTooltip>               TooltipClass;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTooltipNumericValueFromTooltipClass");
static_assert(sizeof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass) == 0x000024, "Wrong size on FortKismetLibrary_GetTooltipNumericValueFromTooltipClass");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, ObjectToDescribe) == 0x000000, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, TooltipClass) == 0x000004, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::TooltipClass' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, Tag) == 0x000008, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::Tag' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, Context) == 0x000010, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::Context' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, Token) == 0x000014, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::Token' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, Value) == 0x00001C, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::Value' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipNumericValueFromTooltipClass, ReturnValue) == 0x000020, "Member 'FortKismetLibrary_GetTooltipNumericValueFromTooltipClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTooltipTextFromToken
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_GetTooltipTextFromToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0018(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTooltipTextFromToken) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTooltipTextFromToken");
static_assert(sizeof(FortKismetLibrary_GetTooltipTextFromToken) == 0x000028, "Wrong size on FortKismetLibrary_GetTooltipTextFromToken");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromToken, ObjectToDescribe) == 0x000000, "Member 'FortKismetLibrary_GetTooltipTextFromToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromToken, Tag) == 0x000004, "Member 'FortKismetLibrary_GetTooltipTextFromToken::Tag' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromToken, Context) == 0x00000C, "Member 'FortKismetLibrary_GetTooltipTextFromToken::Context' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromToken, Token) == 0x000010, "Member 'FortKismetLibrary_GetTooltipTextFromToken::Token' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromToken, OutText) == 0x000018, "Member 'FortKismetLibrary_GetTooltipTextFromToken::OutText' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromToken, ReturnValue) == 0x000024, "Member 'FortKismetLibrary_GetTooltipTextFromToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTooltipTextFromTokenFromTooltipClass
// 0x002C (0x002C - 0x0000)
struct FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortTooltip>               TooltipClass;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x001C(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass");
static_assert(sizeof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass) == 0x00002C, "Wrong size on FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, ObjectToDescribe) == 0x000000, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, TooltipClass) == 0x000004, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::TooltipClass' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, Tag) == 0x000008, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::Tag' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, Context) == 0x000010, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::Context' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, Token) == 0x000014, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::Token' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, OutText) == 0x00001C, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::OutText' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass, ReturnValue) == 0x000028, "Member 'FortKismetLibrary_GetTooltipTextFromTokenFromTooltipClass::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetTrapStatsRow
// 0x0110 (0x0110 - 0x0000)
struct FortKismetLibrary_GetTrapStatsRow final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FFortTrapStats                         OutRow;                                            // 0x000C(0x0100)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x010C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetTrapStatsRow) == 0x000004, "Wrong alignment on FortKismetLibrary_GetTrapStatsRow");
static_assert(sizeof(FortKismetLibrary_GetTrapStatsRow) == 0x000110, "Wrong size on FortKismetLibrary_GetTrapStatsRow");
static_assert(offsetof(FortKismetLibrary_GetTrapStatsRow, DataTableRowHandle) == 0x000000, "Member 'FortKismetLibrary_GetTrapStatsRow::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTrapStatsRow, OutRow) == 0x00000C, "Member 'FortKismetLibrary_GetTrapStatsRow::OutRow' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetTrapStatsRow, ReturnValue) == 0x00010C, "Member 'FortKismetLibrary_GetTrapStatsRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetWeaponDurabilityByRarityStatsRow
// 0x0038 (0x0038 - 0x0000)
struct FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FFortWeaponDurabilityByRarityStats     OutRow;                                            // 0x000C(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow) == 0x000004, "Wrong alignment on FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow");
static_assert(sizeof(FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow) == 0x000038, "Wrong size on FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow");
static_assert(offsetof(FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow, DataTableRowHandle) == 0x000000, "Member 'FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow, OutRow) == 0x00000C, "Member 'FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow::OutRow' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow, ReturnValue) == 0x000034, "Member 'FortKismetLibrary_GetWeaponDurabilityByRarityStatsRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.GetWeaponStatsRow
// 0x00FC (0x00FC - 0x0000)
struct FortKismetLibrary_GetWeaponStatsRow final
{
public:
	struct FDataTableRowHandle                    DataTableRowHandle;                                // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	struct FFortBaseWeaponStats                   OutRow;                                            // 0x000C(0x00EC)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_GetWeaponStatsRow) == 0x000004, "Wrong alignment on FortKismetLibrary_GetWeaponStatsRow");
static_assert(sizeof(FortKismetLibrary_GetWeaponStatsRow) == 0x0000FC, "Wrong size on FortKismetLibrary_GetWeaponStatsRow");
static_assert(offsetof(FortKismetLibrary_GetWeaponStatsRow, DataTableRowHandle) == 0x000000, "Member 'FortKismetLibrary_GetWeaponStatsRow::DataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetWeaponStatsRow, OutRow) == 0x00000C, "Member 'FortKismetLibrary_GetWeaponStatsRow::OutRow' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_GetWeaponStatsRow, ReturnValue) == 0x0000F8, "Member 'FortKismetLibrary_GetWeaponStatsRow::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.HideTutorialWidget
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_HideTutorialWidget final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_HideTutorialWidget) == 0x000004, "Wrong alignment on FortKismetLibrary_HideTutorialWidget");
static_assert(sizeof(FortKismetLibrary_HideTutorialWidget) == 0x000008, "Wrong size on FortKismetLibrary_HideTutorialWidget");
static_assert(offsetof(FortKismetLibrary_HideTutorialWidget, WidgetName) == 0x000000, "Member 'FortKismetLibrary_HideTutorialWidget::WidgetName' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsCriticalHit
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_IsCriticalHit final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_IsCriticalHit) == 0x000004, "Wrong alignment on FortKismetLibrary_IsCriticalHit");
static_assert(sizeof(FortKismetLibrary_IsCriticalHit) == 0x000010, "Wrong size on FortKismetLibrary_IsCriticalHit");
static_assert(offsetof(FortKismetLibrary_IsCriticalHit, EffectContext) == 0x000000, "Member 'FortKismetLibrary_IsCriticalHit::EffectContext' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_IsCriticalHit, ReturnValue) == 0x00000C, "Member 'FortKismetLibrary_IsCriticalHit::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsFatalHit
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_IsFatalHit final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_IsFatalHit) == 0x000004, "Wrong alignment on FortKismetLibrary_IsFatalHit");
static_assert(sizeof(FortKismetLibrary_IsFatalHit) == 0x000010, "Wrong size on FortKismetLibrary_IsFatalHit");
static_assert(offsetof(FortKismetLibrary_IsFatalHit, EffectContext) == 0x000000, "Member 'FortKismetLibrary_IsFatalHit::EffectContext' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_IsFatalHit, ReturnValue) == 0x00000C, "Member 'FortKismetLibrary_IsFatalHit::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsFullBodyHit
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_IsFullBodyHit final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_IsFullBodyHit) == 0x000004, "Wrong alignment on FortKismetLibrary_IsFullBodyHit");
static_assert(sizeof(FortKismetLibrary_IsFullBodyHit) == 0x000010, "Wrong size on FortKismetLibrary_IsFullBodyHit");
static_assert(offsetof(FortKismetLibrary_IsFullBodyHit, EffectContext) == 0x000000, "Member 'FortKismetLibrary_IsFullBodyHit::EffectContext' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_IsFullBodyHit, ReturnValue) == 0x00000C, "Member 'FortKismetLibrary_IsFullBodyHit::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.IsValid
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_IsValid final
{
public:
	struct FAttributeInfo                         AttributeInfo;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_IsValid) == 0x000004, "Wrong alignment on FortKismetLibrary_IsValid");
static_assert(sizeof(FortKismetLibrary_IsValid) == 0x00000C, "Wrong size on FortKismetLibrary_IsValid");
static_assert(offsetof(FortKismetLibrary_IsValid, AttributeInfo) == 0x000000, "Member 'FortKismetLibrary_IsValid::AttributeInfo' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_IsValid, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_IsValid::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.JonLHack_GetAllObjectsOfClassFromPath
// 0x001C (0x001C - 0x0000)
struct FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 Class_0;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath) == 0x000004, "Wrong alignment on FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath");
static_assert(sizeof(FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath) == 0x00001C, "Wrong size on FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath");
static_assert(offsetof(FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath, Path) == 0x000000, "Member 'FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath::Path' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath, Class_0) == 0x00000C, "Member 'FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath::Class_0' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_JonLHack_GetAllObjectsOfClassFromPath::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.K2_DoesPlayerHaveItem
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_K2_DoesPlayerHaveItem final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_K2_DoesPlayerHaveItem) == 0x000004, "Wrong alignment on FortKismetLibrary_K2_DoesPlayerHaveItem");
static_assert(sizeof(FortKismetLibrary_K2_DoesPlayerHaveItem) == 0x00000C, "Wrong size on FortKismetLibrary_K2_DoesPlayerHaveItem");
static_assert(offsetof(FortKismetLibrary_K2_DoesPlayerHaveItem, PlayerController) == 0x000000, "Member 'FortKismetLibrary_K2_DoesPlayerHaveItem::PlayerController' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_DoesPlayerHaveItem, ItemDefinition) == 0x000004, "Member 'FortKismetLibrary_K2_DoesPlayerHaveItem::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_DoesPlayerHaveItem, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_K2_DoesPlayerHaveItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.K2_GetClosestAxisXY
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_K2_GetClosestAxisXY final
{
public:
	struct FVector                                InVector;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_K2_GetClosestAxisXY) == 0x000004, "Wrong alignment on FortKismetLibrary_K2_GetClosestAxisXY");
static_assert(sizeof(FortKismetLibrary_K2_GetClosestAxisXY) == 0x000018, "Wrong size on FortKismetLibrary_K2_GetClosestAxisXY");
static_assert(offsetof(FortKismetLibrary_K2_GetClosestAxisXY, InVector) == 0x000000, "Member 'FortKismetLibrary_K2_GetClosestAxisXY::InVector' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GetClosestAxisXY, ReturnValue) == 0x00000C, "Member 'FortKismetLibrary_K2_GetClosestAxisXY::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.K2_GiveItemToAllPlayers
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_K2_GiveItemToAllPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToGive;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyPlayer;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_K2_GiveItemToAllPlayers) == 0x000004, "Wrong alignment on FortKismetLibrary_K2_GiveItemToAllPlayers");
static_assert(sizeof(FortKismetLibrary_K2_GiveItemToAllPlayers) == 0x000010, "Wrong size on FortKismetLibrary_K2_GiveItemToAllPlayers");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToAllPlayers, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_K2_GiveItemToAllPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToAllPlayers, ItemDefinition) == 0x000004, "Member 'FortKismetLibrary_K2_GiveItemToAllPlayers::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToAllPlayers, NumberToGive) == 0x000008, "Member 'FortKismetLibrary_K2_GiveItemToAllPlayers::NumberToGive' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToAllPlayers, bNotifyPlayer) == 0x00000C, "Member 'FortKismetLibrary_K2_GiveItemToAllPlayers::bNotifyPlayer' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.K2_GiveItemToPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_K2_GiveItemToPlayer final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortWorldItemDefinition*         ItemDefinition;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToGive;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyPlayer;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_K2_GiveItemToPlayer) == 0x000004, "Wrong alignment on FortKismetLibrary_K2_GiveItemToPlayer");
static_assert(sizeof(FortKismetLibrary_K2_GiveItemToPlayer) == 0x000010, "Wrong size on FortKismetLibrary_K2_GiveItemToPlayer");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToPlayer, PlayerController) == 0x000000, "Member 'FortKismetLibrary_K2_GiveItemToPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToPlayer, ItemDefinition) == 0x000004, "Member 'FortKismetLibrary_K2_GiveItemToPlayer::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToPlayer, NumberToGive) == 0x000008, "Member 'FortKismetLibrary_K2_GiveItemToPlayer::NumberToGive' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_GiveItemToPlayer, bNotifyPlayer) == 0x00000C, "Member 'FortKismetLibrary_K2_GiveItemToPlayer::bNotifyPlayer' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.K2_RemoveItemFromAllPlayers
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_K2_RemoveItemFromAllPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountToRemove;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_K2_RemoveItemFromAllPlayers) == 0x000004, "Wrong alignment on FortKismetLibrary_K2_RemoveItemFromAllPlayers");
static_assert(sizeof(FortKismetLibrary_K2_RemoveItemFromAllPlayers) == 0x00000C, "Wrong size on FortKismetLibrary_K2_RemoveItemFromAllPlayers");
static_assert(offsetof(FortKismetLibrary_K2_RemoveItemFromAllPlayers, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_K2_RemoveItemFromAllPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_RemoveItemFromAllPlayers, ItemDefinition) == 0x000004, "Member 'FortKismetLibrary_K2_RemoveItemFromAllPlayers::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_RemoveItemFromAllPlayers, AmountToRemove) == 0x000008, "Member 'FortKismetLibrary_K2_RemoveItemFromAllPlayers::AmountToRemove' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.K2_RemoveItemFromPlayer
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_K2_RemoveItemFromPlayer final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountToRemove;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_K2_RemoveItemFromPlayer) == 0x000004, "Wrong alignment on FortKismetLibrary_K2_RemoveItemFromPlayer");
static_assert(sizeof(FortKismetLibrary_K2_RemoveItemFromPlayer) == 0x000010, "Wrong size on FortKismetLibrary_K2_RemoveItemFromPlayer");
static_assert(offsetof(FortKismetLibrary_K2_RemoveItemFromPlayer, PlayerController) == 0x000000, "Member 'FortKismetLibrary_K2_RemoveItemFromPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_RemoveItemFromPlayer, ItemDefinition) == 0x000004, "Member 'FortKismetLibrary_K2_RemoveItemFromPlayer::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_RemoveItemFromPlayer, AmountToRemove) == 0x000008, "Member 'FortKismetLibrary_K2_RemoveItemFromPlayer::AmountToRemove' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_RemoveItemFromPlayer, ReturnValue) == 0x00000C, "Member 'FortKismetLibrary_K2_RemoveItemFromPlayer::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.K2_SpawnPickupInWorld
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_K2_SpawnPickupInWorld final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToSpawn;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OverrideMaxStackCount;                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_K2_SpawnPickupInWorld) == 0x000004, "Wrong alignment on FortKismetLibrary_K2_SpawnPickupInWorld");
static_assert(sizeof(FortKismetLibrary_K2_SpawnPickupInWorld) == 0x000028, "Wrong size on FortKismetLibrary_K2_SpawnPickupInWorld");
static_assert(offsetof(FortKismetLibrary_K2_SpawnPickupInWorld, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_K2_SpawnPickupInWorld::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_SpawnPickupInWorld, ItemDefinition) == 0x000004, "Member 'FortKismetLibrary_K2_SpawnPickupInWorld::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_SpawnPickupInWorld, NumberToSpawn) == 0x000008, "Member 'FortKismetLibrary_K2_SpawnPickupInWorld::NumberToSpawn' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_SpawnPickupInWorld, Position) == 0x00000C, "Member 'FortKismetLibrary_K2_SpawnPickupInWorld::Position' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_SpawnPickupInWorld, Direction) == 0x000018, "Member 'FortKismetLibrary_K2_SpawnPickupInWorld::Direction' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_K2_SpawnPickupInWorld, OverrideMaxStackCount) == 0x000024, "Member 'FortKismetLibrary_K2_SpawnPickupInWorld::OverrideMaxStackCount' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeAllPlayersTalkToSelf
// 0x0028 (0x0028 - 0x0000)
struct FortKismetLibrary_MakeAllPlayersTalkToSelf final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0004(0x0014)(Parm, NativeAccessSpecifierPublic)
	class USoundBase*                             Audio;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptCurrentLine;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bCanBeInterrupted;                                 // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bCanCue;                                           // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EFortFeedbackBroadcastFilter                  BroadcastFilter;                                   // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLatent;                                           // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_MakeAllPlayersTalkToSelf) == 0x000004, "Wrong alignment on FortKismetLibrary_MakeAllPlayersTalkToSelf");
static_assert(sizeof(FortKismetLibrary_MakeAllPlayersTalkToSelf) == 0x000028, "Wrong size on FortKismetLibrary_MakeAllPlayersTalkToSelf");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, LatentInfo) == 0x000004, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::LatentInfo' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, Audio) == 0x000018, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::Audio' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, Delay) == 0x00001C, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::Delay' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, bInterruptCurrentLine) == 0x000020, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::bInterruptCurrentLine' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, bCanBeInterrupted) == 0x000021, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::bCanBeInterrupted' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, bCanCue) == 0x000022, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::bCanCue' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, BroadcastFilter) == 0x000023, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::BroadcastFilter' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeAllPlayersTalkToSelf, bLatent) == 0x000024, "Member 'FortKismetLibrary_MakeAllPlayersTalkToSelf::bLatent' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeBuildingState
// 0x0002 (0x0002 - 0x0000)
struct FortKismetLibrary_MakeBuildingState final
{
public:
	EFortBuildingState                            Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingState                            ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_MakeBuildingState) == 0x000001, "Wrong alignment on FortKismetLibrary_MakeBuildingState");
static_assert(sizeof(FortKismetLibrary_MakeBuildingState) == 0x000002, "Wrong size on FortKismetLibrary_MakeBuildingState");
static_assert(offsetof(FortKismetLibrary_MakeBuildingState, Value) == 0x000000, "Member 'FortKismetLibrary_MakeBuildingState::Value' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeBuildingState, ReturnValue) == 0x000001, "Member 'FortKismetLibrary_MakeBuildingState::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeDayNightPhase
// 0x0002 (0x0002 - 0x0000)
struct FortKismetLibrary_MakeDayNightPhase final
{
public:
	EFortDayPhase                                 Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_MakeDayNightPhase) == 0x000001, "Wrong alignment on FortKismetLibrary_MakeDayNightPhase");
static_assert(sizeof(FortKismetLibrary_MakeDayNightPhase) == 0x000002, "Wrong size on FortKismetLibrary_MakeDayNightPhase");
static_assert(offsetof(FortKismetLibrary_MakeDayNightPhase, Value) == 0x000000, "Member 'FortKismetLibrary_MakeDayNightPhase::Value' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeDayNightPhase, ReturnValue) == 0x000001, "Member 'FortKismetLibrary_MakeDayNightPhase::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeGameplayEffectContainerSpecFromAbility
// 0x00D8 (0x00D8 - 0x0000)
struct FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility final
{
public:
	struct FFortGameplayEffectContainer           EffectContainer;                                   // 0x0000(0x006C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       Ability;                                           // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainerSpec       ReturnValue;                                       // 0x0074(0x0064)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility) == 0x000004, "Wrong alignment on FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility");
static_assert(sizeof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility) == 0x0000D8, "Wrong size on FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility, EffectContainer) == 0x000000, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility::EffectContainer' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility, Ability) == 0x00006C, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility::Ability' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility, GameplayEffectLevel) == 0x000070, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility, ReturnValue) == 0x000074, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbility::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeGameplayEffectContainerSpecFromAbilityComponent
// 0x00D8 (0x00D8 - 0x0000)
struct FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent final
{
public:
	struct FFortGameplayEffectContainer           EffectContainer;                                   // 0x0000(0x006C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                AbilityComp;                                       // 0x006C(0x0004)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayEffectLevel;                               // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainerSpec       ReturnValue;                                       // 0x0074(0x0064)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent) == 0x000004, "Wrong alignment on FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent");
static_assert(sizeof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent) == 0x0000D8, "Wrong size on FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent, EffectContainer) == 0x000000, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent::EffectContainer' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent, AbilityComp) == 0x00006C, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent::AbilityComp' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent, GameplayEffectLevel) == 0x000070, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent::GameplayEffectLevel' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent, ReturnValue) == 0x000074, "Member 'FortKismetLibrary_MakeGameplayEffectContainerSpecFromAbilityComponent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeMovementStyle
// 0x0002 (0x0002 - 0x0000)
struct FortKismetLibrary_MakeMovementStyle final
{
public:
	EFortMovementStyle                            Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMovementStyle                            ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_MakeMovementStyle) == 0x000001, "Wrong alignment on FortKismetLibrary_MakeMovementStyle");
static_assert(sizeof(FortKismetLibrary_MakeMovementStyle) == 0x000002, "Wrong size on FortKismetLibrary_MakeMovementStyle");
static_assert(offsetof(FortKismetLibrary_MakeMovementStyle, Value) == 0x000000, "Member 'FortKismetLibrary_MakeMovementStyle::Value' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeMovementStyle, ReturnValue) == 0x000001, "Member 'FortKismetLibrary_MakeMovementStyle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeResourceType
// 0x0002 (0x0002 - 0x0000)
struct FortKismetLibrary_MakeResourceType final
{
public:
	EFortResourceType                             Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortResourceType                             ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_MakeResourceType) == 0x000001, "Wrong alignment on FortKismetLibrary_MakeResourceType");
static_assert(sizeof(FortKismetLibrary_MakeResourceType) == 0x000002, "Wrong size on FortKismetLibrary_MakeResourceType");
static_assert(offsetof(FortKismetLibrary_MakeResourceType, Value) == 0x000000, "Member 'FortKismetLibrary_MakeResourceType::Value' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeResourceType, ReturnValue) == 0x000001, "Member 'FortKismetLibrary_MakeResourceType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.MakeWeaponCoreAnimation
// 0x0002 (0x0002 - 0x0000)
struct FortKismetLibrary_MakeWeaponCoreAnimation final
{
public:
	EFortWeaponCoreAnimation                      Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortWeaponCoreAnimation                      ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_MakeWeaponCoreAnimation) == 0x000001, "Wrong alignment on FortKismetLibrary_MakeWeaponCoreAnimation");
static_assert(sizeof(FortKismetLibrary_MakeWeaponCoreAnimation) == 0x000002, "Wrong size on FortKismetLibrary_MakeWeaponCoreAnimation");
static_assert(offsetof(FortKismetLibrary_MakeWeaponCoreAnimation, Value) == 0x000000, "Member 'FortKismetLibrary_MakeWeaponCoreAnimation::Value' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_MakeWeaponCoreAnimation, ReturnValue) == 0x000001, "Member 'FortKismetLibrary_MakeWeaponCoreAnimation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.OnSameTeam
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_OnSameTeam final
{
public:
	const class AActor*                           ActorA;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorB;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_OnSameTeam) == 0x000004, "Wrong alignment on FortKismetLibrary_OnSameTeam");
static_assert(sizeof(FortKismetLibrary_OnSameTeam) == 0x00000C, "Wrong size on FortKismetLibrary_OnSameTeam");
static_assert(offsetof(FortKismetLibrary_OnSameTeam, ActorA) == 0x000000, "Member 'FortKismetLibrary_OnSameTeam::ActorA' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_OnSameTeam, ActorB) == 0x000004, "Member 'FortKismetLibrary_OnSameTeam::ActorB' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_OnSameTeam, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_OnSameTeam::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.PickLootDrops
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_PickLootDrops final
{
public:
	TArray<struct FFortItemEntry>                 OutLootToDrop;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   TierGroupName;                                     // 0x000C(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldLevel;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcedLootTier;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELootQuotaLevel                               QuotaLevel;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_PickLootDrops) == 0x000004, "Wrong alignment on FortKismetLibrary_PickLootDrops");
static_assert(sizeof(FortKismetLibrary_PickLootDrops) == 0x000020, "Wrong size on FortKismetLibrary_PickLootDrops");
static_assert(offsetof(FortKismetLibrary_PickLootDrops, OutLootToDrop) == 0x000000, "Member 'FortKismetLibrary_PickLootDrops::OutLootToDrop' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PickLootDrops, TierGroupName) == 0x00000C, "Member 'FortKismetLibrary_PickLootDrops::TierGroupName' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PickLootDrops, WorldLevel) == 0x000014, "Member 'FortKismetLibrary_PickLootDrops::WorldLevel' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PickLootDrops, ForcedLootTier) == 0x000018, "Member 'FortKismetLibrary_PickLootDrops::ForcedLootTier' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PickLootDrops, QuotaLevel) == 0x00001C, "Member 'FortKismetLibrary_PickLootDrops::QuotaLevel' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.PushOffHitLocation
// 0x0094 (0x0094 - 0x0000)
struct FortKismetLibrary_PushOffHitLocation final
{
public:
	class AActor*                                 RequestedBy;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0004(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_PushOffHitLocation) == 0x000004, "Wrong alignment on FortKismetLibrary_PushOffHitLocation");
static_assert(sizeof(FortKismetLibrary_PushOffHitLocation) == 0x000094, "Wrong size on FortKismetLibrary_PushOffHitLocation");
static_assert(offsetof(FortKismetLibrary_PushOffHitLocation, RequestedBy) == 0x000000, "Member 'FortKismetLibrary_PushOffHitLocation::RequestedBy' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PushOffHitLocation, Hit) == 0x000004, "Member 'FortKismetLibrary_PushOffHitLocation::Hit' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PushOffHitLocation, Distance) == 0x000084, "Member 'FortKismetLibrary_PushOffHitLocation::Distance' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PushOffHitLocation, ReturnValue) == 0x000088, "Member 'FortKismetLibrary_PushOffHitLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.PushOffTransformByHitLocation
// 0x0100 (0x0100 - 0x0000)
struct FortKismetLibrary_PushOffTransformByHitLocation final
{
public:
	class AActor*                                 RequestedBy;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0040(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x00C0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0xC];                                       // 0x00C4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x00D0(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_PushOffTransformByHitLocation) == 0x000010, "Wrong alignment on FortKismetLibrary_PushOffTransformByHitLocation");
static_assert(sizeof(FortKismetLibrary_PushOffTransformByHitLocation) == 0x000100, "Wrong size on FortKismetLibrary_PushOffTransformByHitLocation");
static_assert(offsetof(FortKismetLibrary_PushOffTransformByHitLocation, RequestedBy) == 0x000000, "Member 'FortKismetLibrary_PushOffTransformByHitLocation::RequestedBy' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PushOffTransformByHitLocation, InTransform) == 0x000010, "Member 'FortKismetLibrary_PushOffTransformByHitLocation::InTransform' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PushOffTransformByHitLocation, Hit) == 0x000040, "Member 'FortKismetLibrary_PushOffTransformByHitLocation::Hit' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PushOffTransformByHitLocation, Distance) == 0x0000C0, "Member 'FortKismetLibrary_PushOffTransformByHitLocation::Distance' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_PushOffTransformByHitLocation, ReturnValue) == 0x0000D0, "Member 'FortKismetLibrary_PushOffTransformByHitLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.RegisterDayPhaseHitCallback
// 0x0014 (0x0014 - 0x0000)
struct FortKismetLibrary_RegisterDayPhaseHitCallback final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 Phase;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecurring;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBlockTriggeringThisCycle;                         // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_RegisterDayPhaseHitCallback) == 0x000004, "Wrong alignment on FortKismetLibrary_RegisterDayPhaseHitCallback");
static_assert(sizeof(FortKismetLibrary_RegisterDayPhaseHitCallback) == 0x000014, "Wrong size on FortKismetLibrary_RegisterDayPhaseHitCallback");
static_assert(offsetof(FortKismetLibrary_RegisterDayPhaseHitCallback, Object) == 0x000000, "Member 'FortKismetLibrary_RegisterDayPhaseHitCallback::Object' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayPhaseHitCallback, FunctionName) == 0x000004, "Member 'FortKismetLibrary_RegisterDayPhaseHitCallback::FunctionName' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayPhaseHitCallback, Phase) == 0x000010, "Member 'FortKismetLibrary_RegisterDayPhaseHitCallback::Phase' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayPhaseHitCallback, bRecurring) == 0x000011, "Member 'FortKismetLibrary_RegisterDayPhaseHitCallback::bRecurring' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayPhaseHitCallback, bBlockTriggeringThisCycle) == 0x000012, "Member 'FortKismetLibrary_RegisterDayPhaseHitCallback::bBlockTriggeringThisCycle' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.RegisterDayTimeHitCallback
// 0x0018 (0x0018 - 0x0000)
struct FortKismetLibrary_RegisterDayTimeHitCallback final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FunctionName;                                      // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInHours;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecurring;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBlockTriggeringThisCycle;                         // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_RegisterDayTimeHitCallback) == 0x000004, "Wrong alignment on FortKismetLibrary_RegisterDayTimeHitCallback");
static_assert(sizeof(FortKismetLibrary_RegisterDayTimeHitCallback) == 0x000018, "Wrong size on FortKismetLibrary_RegisterDayTimeHitCallback");
static_assert(offsetof(FortKismetLibrary_RegisterDayTimeHitCallback, Object) == 0x000000, "Member 'FortKismetLibrary_RegisterDayTimeHitCallback::Object' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayTimeHitCallback, FunctionName) == 0x000004, "Member 'FortKismetLibrary_RegisterDayTimeHitCallback::FunctionName' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayTimeHitCallback, TimeInHours) == 0x000010, "Member 'FortKismetLibrary_RegisterDayTimeHitCallback::TimeInHours' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayTimeHitCallback, bRecurring) == 0x000014, "Member 'FortKismetLibrary_RegisterDayTimeHitCallback::bRecurring' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RegisterDayTimeHitCallback, bBlockTriggeringThisCycle) == 0x000015, "Member 'FortKismetLibrary_RegisterDayTimeHitCallback::bBlockTriggeringThisCycle' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.RemoveActorsOfClassFromBuildingSMActorArray
// 0x001C (0x001C - 0x0000)
struct FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray final
{
public:
	TArray<class ABuildingSMActor*>               ArrayToRemoveClassFrom;                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingSMActor>           ClassToRemove;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABuildingSMActor*>               ArrayWithClassRemoved;                             // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray) == 0x000004, "Wrong alignment on FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray");
static_assert(sizeof(FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray) == 0x00001C, "Wrong size on FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray");
static_assert(offsetof(FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray, ArrayToRemoveClassFrom) == 0x000000, "Member 'FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray::ArrayToRemoveClassFrom' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray, ClassToRemove) == 0x00000C, "Member 'FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray::ClassToRemove' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray, ArrayWithClassRemoved) == 0x000010, "Member 'FortKismetLibrary_RemoveActorsOfClassFromBuildingSMActorArray::ArrayWithClassRemoved' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SelectMaterialInstance
// 0x0010 (0x0010 - 0x0000)
struct FortKismetLibrary_SelectMaterialInstance final
{
public:
	class UMaterialInstance*                      A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      B;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelectA;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_SelectMaterialInstance) == 0x000004, "Wrong alignment on FortKismetLibrary_SelectMaterialInstance");
static_assert(sizeof(FortKismetLibrary_SelectMaterialInstance) == 0x000010, "Wrong size on FortKismetLibrary_SelectMaterialInstance");
static_assert(offsetof(FortKismetLibrary_SelectMaterialInstance, A) == 0x000000, "Member 'FortKismetLibrary_SelectMaterialInstance::A' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SelectMaterialInstance, B) == 0x000004, "Member 'FortKismetLibrary_SelectMaterialInstance::B' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SelectMaterialInstance, bSelectA) == 0x000008, "Member 'FortKismetLibrary_SelectMaterialInstance::bSelectA' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SelectMaterialInstance, ReturnValue) == 0x00000C, "Member 'FortKismetLibrary_SelectMaterialInstance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SetCanBeDamaged
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_SetCanBeDamaged final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeDamaged;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_SetCanBeDamaged) == 0x000004, "Wrong alignment on FortKismetLibrary_SetCanBeDamaged");
static_assert(sizeof(FortKismetLibrary_SetCanBeDamaged) == 0x000008, "Wrong size on FortKismetLibrary_SetCanBeDamaged");
static_assert(offsetof(FortKismetLibrary_SetCanBeDamaged, Actor) == 0x000000, "Member 'FortKismetLibrary_SetCanBeDamaged::Actor' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SetCanBeDamaged, bCanBeDamaged) == 0x000004, "Member 'FortKismetLibrary_SetCanBeDamaged::bCanBeDamaged' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SetTimeOfDay
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_SetTimeOfDay final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOfDay;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_SetTimeOfDay) == 0x000004, "Wrong alignment on FortKismetLibrary_SetTimeOfDay");
static_assert(sizeof(FortKismetLibrary_SetTimeOfDay) == 0x000008, "Wrong size on FortKismetLibrary_SetTimeOfDay");
static_assert(offsetof(FortKismetLibrary_SetTimeOfDay, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_SetTimeOfDay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SetTimeOfDay, TimeOfDay) == 0x000004, "Member 'FortKismetLibrary_SetTimeOfDay::TimeOfDay' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SetTimeOfDaySpeed
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_SetTimeOfDaySpeed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOfDaySpeedFactor;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_SetTimeOfDaySpeed) == 0x000004, "Wrong alignment on FortKismetLibrary_SetTimeOfDaySpeed");
static_assert(sizeof(FortKismetLibrary_SetTimeOfDaySpeed) == 0x000008, "Wrong size on FortKismetLibrary_SetTimeOfDaySpeed");
static_assert(offsetof(FortKismetLibrary_SetTimeOfDaySpeed, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_SetTimeOfDaySpeed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SetTimeOfDaySpeed, TimeOfDaySpeedFactor) == 0x000004, "Member 'FortKismetLibrary_SetTimeOfDaySpeed::TimeOfDaySpeedFactor' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.ShouldHideTutorialWidget
// 0x000C (0x000C - 0x0000)
struct FortKismetLibrary_ShouldHideTutorialWidget final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_ShouldHideTutorialWidget) == 0x000004, "Wrong alignment on FortKismetLibrary_ShouldHideTutorialWidget");
static_assert(sizeof(FortKismetLibrary_ShouldHideTutorialWidget) == 0x00000C, "Wrong size on FortKismetLibrary_ShouldHideTutorialWidget");
static_assert(offsetof(FortKismetLibrary_ShouldHideTutorialWidget, WidgetName) == 0x000000, "Member 'FortKismetLibrary_ShouldHideTutorialWidget::WidgetName' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_ShouldHideTutorialWidget, ReturnValue) == 0x000008, "Member 'FortKismetLibrary_ShouldHideTutorialWidget::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SpawnAreaOfEffectCloud
// 0x00EC (0x00EC - 0x0000)
struct FortKismetLibrary_SpawnAreaOfEffectCloud final
{
public:
	TSubclassOf<class AFortAreaOfEffectCloud>     AreaOfEffectClass;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 RequestedBy;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainerSpec       EffectContainerSpecToApplyOnHit;                   // 0x0020(0x0064)(Parm, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainerSpec       EffectContainerSpecToApplyOnExplode;               // 0x0084(0x0064)(Parm, NativeAccessSpecifierPublic)
	class AFortAreaOfEffectCloud*                 ReturnValue;                                       // 0x00E8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_SpawnAreaOfEffectCloud) == 0x000004, "Wrong alignment on FortKismetLibrary_SpawnAreaOfEffectCloud");
static_assert(sizeof(FortKismetLibrary_SpawnAreaOfEffectCloud) == 0x0000EC, "Wrong size on FortKismetLibrary_SpawnAreaOfEffectCloud");
static_assert(offsetof(FortKismetLibrary_SpawnAreaOfEffectCloud, AreaOfEffectClass) == 0x000000, "Member 'FortKismetLibrary_SpawnAreaOfEffectCloud::AreaOfEffectClass' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnAreaOfEffectCloud, RequestedBy) == 0x000004, "Member 'FortKismetLibrary_SpawnAreaOfEffectCloud::RequestedBy' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnAreaOfEffectCloud, SpawnLocation) == 0x000008, "Member 'FortKismetLibrary_SpawnAreaOfEffectCloud::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnAreaOfEffectCloud, SpawnRotation) == 0x000014, "Member 'FortKismetLibrary_SpawnAreaOfEffectCloud::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnAreaOfEffectCloud, EffectContainerSpecToApplyOnHit) == 0x000020, "Member 'FortKismetLibrary_SpawnAreaOfEffectCloud::EffectContainerSpecToApplyOnHit' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnAreaOfEffectCloud, EffectContainerSpecToApplyOnExplode) == 0x000084, "Member 'FortKismetLibrary_SpawnAreaOfEffectCloud::EffectContainerSpecToApplyOnExplode' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnAreaOfEffectCloud, ReturnValue) == 0x0000E8, "Member 'FortKismetLibrary_SpawnAreaOfEffectCloud::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SpawnBuildingGameplayActor
// 0x0050 (0x0050 - 0x0000)
struct FortKismetLibrary_SpawnBuildingGameplayActor final
{
public:
	TSubclassOf<class ABuildingGameplayActor>     BGAClass;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortPawn*                              Instigator;                                        // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingGameplayActor*                 ReturnValue;                                       // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_SpawnBuildingGameplayActor) == 0x000010, "Wrong alignment on FortKismetLibrary_SpawnBuildingGameplayActor");
static_assert(sizeof(FortKismetLibrary_SpawnBuildingGameplayActor) == 0x000050, "Wrong size on FortKismetLibrary_SpawnBuildingGameplayActor");
static_assert(offsetof(FortKismetLibrary_SpawnBuildingGameplayActor, BGAClass) == 0x000000, "Member 'FortKismetLibrary_SpawnBuildingGameplayActor::BGAClass' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnBuildingGameplayActor, Transform) == 0x000010, "Member 'FortKismetLibrary_SpawnBuildingGameplayActor::Transform' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnBuildingGameplayActor, Instigator) == 0x000040, "Member 'FortKismetLibrary_SpawnBuildingGameplayActor::Instigator' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnBuildingGameplayActor, ReturnValue) == 0x000044, "Member 'FortKismetLibrary_SpawnBuildingGameplayActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SpawnProjectile
// 0x010C (0x010C - 0x0000)
struct FortKismetLibrary_SpawnProjectile final
{
public:
	TSubclassOf<class AFortProjectileBase>        ProjectileClass;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 RequestedBy;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnDirection;                                    // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainerSpec       EffectContainerSpecToApplyOnHit;                   // 0x002C(0x0064)(Parm, NativeAccessSpecifierPublic)
	struct FFortGameplayEffectContainerSpec       EffectContainerSpecToApplyOnExplode;               // 0x0090(0x0064)(Parm, NativeAccessSpecifierPublic)
	bool                                          bUseDefaultPhysics;                                // 0x00F4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HomingTarget;                                      // 0x00F8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialSpeed;                                      // 0x00FC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x0100(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargePercent;                                     // 0x0104(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortProjectileBase*                    ReturnValue;                                       // 0x0108(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_SpawnProjectile) == 0x000004, "Wrong alignment on FortKismetLibrary_SpawnProjectile");
static_assert(sizeof(FortKismetLibrary_SpawnProjectile) == 0x00010C, "Wrong size on FortKismetLibrary_SpawnProjectile");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, ProjectileClass) == 0x000000, "Member 'FortKismetLibrary_SpawnProjectile::ProjectileClass' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, RequestedBy) == 0x000004, "Member 'FortKismetLibrary_SpawnProjectile::RequestedBy' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, SpawnLocation) == 0x000008, "Member 'FortKismetLibrary_SpawnProjectile::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, SpawnRotation) == 0x000014, "Member 'FortKismetLibrary_SpawnProjectile::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, SpawnDirection) == 0x000020, "Member 'FortKismetLibrary_SpawnProjectile::SpawnDirection' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, EffectContainerSpecToApplyOnHit) == 0x00002C, "Member 'FortKismetLibrary_SpawnProjectile::EffectContainerSpecToApplyOnHit' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, EffectContainerSpecToApplyOnExplode) == 0x000090, "Member 'FortKismetLibrary_SpawnProjectile::EffectContainerSpecToApplyOnExplode' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, bUseDefaultPhysics) == 0x0000F4, "Member 'FortKismetLibrary_SpawnProjectile::bUseDefaultPhysics' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, HomingTarget) == 0x0000F8, "Member 'FortKismetLibrary_SpawnProjectile::HomingTarget' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, InitialSpeed) == 0x0000FC, "Member 'FortKismetLibrary_SpawnProjectile::InitialSpeed' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, GravityScale) == 0x000100, "Member 'FortKismetLibrary_SpawnProjectile::GravityScale' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, ChargePercent) == 0x000104, "Member 'FortKismetLibrary_SpawnProjectile::ChargePercent' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SpawnProjectile, ReturnValue) == 0x000108, "Member 'FortKismetLibrary_SpawnProjectile::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.SwitchHeroType
// 0x0014 (0x0014 - 0x0000)
struct FortKismetLibrary_SwitchHeroType final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewHeroName;                                       // 0x0004(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_SwitchHeroType) == 0x000004, "Wrong alignment on FortKismetLibrary_SwitchHeroType");
static_assert(sizeof(FortKismetLibrary_SwitchHeroType) == 0x000014, "Wrong size on FortKismetLibrary_SwitchHeroType");
static_assert(offsetof(FortKismetLibrary_SwitchHeroType, FortPC) == 0x000000, "Member 'FortKismetLibrary_SwitchHeroType::FortPC' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SwitchHeroType, NewHeroName) == 0x000004, "Member 'FortKismetLibrary_SwitchHeroType::NewHeroName' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_SwitchHeroType, ReturnValue) == 0x000010, "Member 'FortKismetLibrary_SwitchHeroType::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.TriggerFeedbackEvent
// 0x0024 (0x0024 - 0x0000)
struct FortKismetLibrary_TriggerFeedbackEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortFeedbackHandle                    EventHandle;                                       // 0x0004(0x0010)(Parm, NativeAccessSpecifierPublic)
	class AFortPawn*                              InstigatorPawn;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Recipient;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverriddenDelay;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowReplication;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortKismetLibrary_TriggerFeedbackEvent) == 0x000004, "Wrong alignment on FortKismetLibrary_TriggerFeedbackEvent");
static_assert(sizeof(FortKismetLibrary_TriggerFeedbackEvent) == 0x000024, "Wrong size on FortKismetLibrary_TriggerFeedbackEvent");
static_assert(offsetof(FortKismetLibrary_TriggerFeedbackEvent, WorldContextObject) == 0x000000, "Member 'FortKismetLibrary_TriggerFeedbackEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_TriggerFeedbackEvent, EventHandle) == 0x000004, "Member 'FortKismetLibrary_TriggerFeedbackEvent::EventHandle' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_TriggerFeedbackEvent, InstigatorPawn) == 0x000014, "Member 'FortKismetLibrary_TriggerFeedbackEvent::InstigatorPawn' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_TriggerFeedbackEvent, Recipient) == 0x000018, "Member 'FortKismetLibrary_TriggerFeedbackEvent::Recipient' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_TriggerFeedbackEvent, OverriddenDelay) == 0x00001C, "Member 'FortKismetLibrary_TriggerFeedbackEvent::OverriddenDelay' has a wrong offset!");
static_assert(offsetof(FortKismetLibrary_TriggerFeedbackEvent, bAllowReplication) == 0x000020, "Member 'FortKismetLibrary_TriggerFeedbackEvent::bAllowReplication' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.UnequipFortAbilitySet
// 0x0020 (0x0020 - 0x0000)
struct FortKismetLibrary_UnequipFortAbilitySet final
{
public:
	struct FFortAbilitySetHandle                  AbilitySetHandle;                                  // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_UnequipFortAbilitySet) == 0x000004, "Wrong alignment on FortKismetLibrary_UnequipFortAbilitySet");
static_assert(sizeof(FortKismetLibrary_UnequipFortAbilitySet) == 0x000020, "Wrong size on FortKismetLibrary_UnequipFortAbilitySet");
static_assert(offsetof(FortKismetLibrary_UnequipFortAbilitySet, AbilitySetHandle) == 0x000000, "Member 'FortKismetLibrary_UnequipFortAbilitySet::AbilitySetHandle' has a wrong offset!");

// Function FortniteGame.FortKismetLibrary.UnhideTutorialWidget
// 0x0008 (0x0008 - 0x0000)
struct FortKismetLibrary_UnhideTutorialWidget final
{
public:
	class FName                                   WidgetName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortKismetLibrary_UnhideTutorialWidget) == 0x000004, "Wrong alignment on FortKismetLibrary_UnhideTutorialWidget");
static_assert(sizeof(FortKismetLibrary_UnhideTutorialWidget) == 0x000008, "Wrong size on FortKismetLibrary_UnhideTutorialWidget");
static_assert(offsetof(FortKismetLibrary_UnhideTutorialWidget, WidgetName) == 0x000000, "Member 'FortKismetLibrary_UnhideTutorialWidget::WidgetName' has a wrong offset!");

// Function FortniteGame.FortMissionInterface.BlueprintHandleMissionEventNoReply
// 0x006C (0x006C - 0x0000)
struct FortMissionInterface_BlueprintHandleMissionEventNoReply final
{
public:
	struct FFortMissionEvent                      MissionEvent;                                      // 0x0000(0x006C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionInterface_BlueprintHandleMissionEventNoReply) == 0x000004, "Wrong alignment on FortMissionInterface_BlueprintHandleMissionEventNoReply");
static_assert(sizeof(FortMissionInterface_BlueprintHandleMissionEventNoReply) == 0x00006C, "Wrong size on FortMissionInterface_BlueprintHandleMissionEventNoReply");
static_assert(offsetof(FortMissionInterface_BlueprintHandleMissionEventNoReply, MissionEvent) == 0x000000, "Member 'FortMissionInterface_BlueprintHandleMissionEventNoReply::MissionEvent' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.SetMissionTimer
// 0x0010 (0x0010 - 0x0000)
struct FortMissionTimerComponent_SetMissionTimer final
{
public:
	class FString                                 FunctionName;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimerLength;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_SetMissionTimer) == 0x000004, "Wrong alignment on FortMissionTimerComponent_SetMissionTimer");
static_assert(sizeof(FortMissionTimerComponent_SetMissionTimer) == 0x000010, "Wrong size on FortMissionTimerComponent_SetMissionTimer");
static_assert(offsetof(FortMissionTimerComponent_SetMissionTimer, FunctionName) == 0x000000, "Member 'FortMissionTimerComponent_SetMissionTimer::FunctionName' has a wrong offset!");
static_assert(offsetof(FortMissionTimerComponent_SetMissionTimer, TimerLength) == 0x00000C, "Member 'FortMissionTimerComponent_SetMissionTimer::TimerLength' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.SetTimerDisplayFormat
// 0x0001 (0x0001 - 0x0000)
struct FortMissionTimerComponent_SetTimerDisplayFormat final
{
public:
	bool                                          bNewDisplayInTimeFormat;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_SetTimerDisplayFormat) == 0x000001, "Wrong alignment on FortMissionTimerComponent_SetTimerDisplayFormat");
static_assert(sizeof(FortMissionTimerComponent_SetTimerDisplayFormat) == 0x000001, "Wrong size on FortMissionTimerComponent_SetTimerDisplayFormat");
static_assert(offsetof(FortMissionTimerComponent_SetTimerDisplayFormat, bNewDisplayInTimeFormat) == 0x000000, "Member 'FortMissionTimerComponent_SetTimerDisplayFormat::bNewDisplayInTimeFormat' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.SetTimerLabelText
// 0x000C (0x000C - 0x0000)
struct FortMissionTimerComponent_SetTimerLabelText final
{
public:
	class FText                                   NewLabelText;                                      // 0x0000(0x000C)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_SetTimerLabelText) == 0x000004, "Wrong alignment on FortMissionTimerComponent_SetTimerLabelText");
static_assert(sizeof(FortMissionTimerComponent_SetTimerLabelText) == 0x00000C, "Wrong size on FortMissionTimerComponent_SetTimerLabelText");
static_assert(offsetof(FortMissionTimerComponent_SetTimerLabelText, NewLabelText) == 0x000000, "Member 'FortMissionTimerComponent_SetTimerLabelText::NewLabelText' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.SetTimerVisibilityOverrideSetting
// 0x0001 (0x0001 - 0x0000)
struct FortMissionTimerComponent_SetTimerVisibilityOverrideSetting final
{
public:
	ETimerOverrideSetting                         NewVisibilitySetting;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_SetTimerVisibilityOverrideSetting) == 0x000001, "Wrong alignment on FortMissionTimerComponent_SetTimerVisibilityOverrideSetting");
static_assert(sizeof(FortMissionTimerComponent_SetTimerVisibilityOverrideSetting) == 0x000001, "Wrong size on FortMissionTimerComponent_SetTimerVisibilityOverrideSetting");
static_assert(offsetof(FortMissionTimerComponent_SetTimerVisibilityOverrideSetting, NewVisibilitySetting) == 0x000000, "Member 'FortMissionTimerComponent_SetTimerVisibilityOverrideSetting::NewVisibilitySetting' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.GetMissionTimerTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct FortMissionTimerComponent_GetMissionTimerTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_GetMissionTimerTimeRemaining) == 0x000004, "Wrong alignment on FortMissionTimerComponent_GetMissionTimerTimeRemaining");
static_assert(sizeof(FortMissionTimerComponent_GetMissionTimerTimeRemaining) == 0x000004, "Wrong size on FortMissionTimerComponent_GetMissionTimerTimeRemaining");
static_assert(offsetof(FortMissionTimerComponent_GetMissionTimerTimeRemaining, ReturnValue) == 0x000000, "Member 'FortMissionTimerComponent_GetMissionTimerTimeRemaining::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.GetNormalizedTime
// 0x0004 (0x0004 - 0x0000)
struct FortMissionTimerComponent_GetNormalizedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_GetNormalizedTime) == 0x000004, "Wrong alignment on FortMissionTimerComponent_GetNormalizedTime");
static_assert(sizeof(FortMissionTimerComponent_GetNormalizedTime) == 0x000004, "Wrong size on FortMissionTimerComponent_GetNormalizedTime");
static_assert(offsetof(FortMissionTimerComponent_GetNormalizedTime, ReturnValue) == 0x000000, "Member 'FortMissionTimerComponent_GetNormalizedTime::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.IsMissionTimerPaused
// 0x0001 (0x0001 - 0x0000)
struct FortMissionTimerComponent_IsMissionTimerPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_IsMissionTimerPaused) == 0x000001, "Wrong alignment on FortMissionTimerComponent_IsMissionTimerPaused");
static_assert(sizeof(FortMissionTimerComponent_IsMissionTimerPaused) == 0x000001, "Wrong size on FortMissionTimerComponent_IsMissionTimerPaused");
static_assert(offsetof(FortMissionTimerComponent_IsMissionTimerPaused, ReturnValue) == 0x000000, "Member 'FortMissionTimerComponent_IsMissionTimerPaused::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMissionTimerComponent.IsMissionTimerSet
// 0x0001 (0x0001 - 0x0000)
struct FortMissionTimerComponent_IsMissionTimerSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMissionTimerComponent_IsMissionTimerSet) == 0x000001, "Wrong alignment on FortMissionTimerComponent_IsMissionTimerSet");
static_assert(sizeof(FortMissionTimerComponent_IsMissionTimerSet) == 0x000001, "Wrong size on FortMissionTimerComponent_IsMissionTimerSet");
static_assert(offsetof(FortMissionTimerComponent_IsMissionTimerSet, ReturnValue) == 0x000000, "Member 'FortMissionTimerComponent_IsMissionTimerSet::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMusicManager.ChangeMusic
// 0x0010 (0x0010 - 0x0000)
struct FortMusicManager_ChangeMusic final
{
public:
	class USoundBase*                             NewMusic;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicFadeStyles                              FadeStyle;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Stinger;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMusicManager_ChangeMusic) == 0x000004, "Wrong alignment on FortMusicManager_ChangeMusic");
static_assert(sizeof(FortMusicManager_ChangeMusic) == 0x000010, "Wrong size on FortMusicManager_ChangeMusic");
static_assert(offsetof(FortMusicManager_ChangeMusic, NewMusic) == 0x000000, "Member 'FortMusicManager_ChangeMusic::NewMusic' has a wrong offset!");
static_assert(offsetof(FortMusicManager_ChangeMusic, FadeStyle) == 0x000004, "Member 'FortMusicManager_ChangeMusic::FadeStyle' has a wrong offset!");
static_assert(offsetof(FortMusicManager_ChangeMusic, FadeTime) == 0x000008, "Member 'FortMusicManager_ChangeMusic::FadeTime' has a wrong offset!");
static_assert(offsetof(FortMusicManager_ChangeMusic, Stinger) == 0x00000C, "Member 'FortMusicManager_ChangeMusic::Stinger' has a wrong offset!");

// Function FortniteGame.FortMusicManager.GetEventHeatPercent
// 0x0008 (0x0008 - 0x0000)
struct FortMusicManager_GetEventHeatPercent final
{
public:
	EFortCombatEvents                             CombatEvent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMusicManager_GetEventHeatPercent) == 0x000004, "Wrong alignment on FortMusicManager_GetEventHeatPercent");
static_assert(sizeof(FortMusicManager_GetEventHeatPercent) == 0x000008, "Wrong size on FortMusicManager_GetEventHeatPercent");
static_assert(offsetof(FortMusicManager_GetEventHeatPercent, CombatEvent) == 0x000000, "Member 'FortMusicManager_GetEventHeatPercent::CombatEvent' has a wrong offset!");
static_assert(offsetof(FortMusicManager_GetEventHeatPercent, ReturnValue) == 0x000004, "Member 'FortMusicManager_GetEventHeatPercent::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMusicManager.GetEventHeatPercentTotal
// 0x0008 (0x0008 - 0x0000)
struct FortMusicManager_GetEventHeatPercentTotal final
{
public:
	EFortCombatEvents                             CombatEvent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMusicManager_GetEventHeatPercentTotal) == 0x000004, "Wrong alignment on FortMusicManager_GetEventHeatPercentTotal");
static_assert(sizeof(FortMusicManager_GetEventHeatPercentTotal) == 0x000008, "Wrong size on FortMusicManager_GetEventHeatPercentTotal");
static_assert(offsetof(FortMusicManager_GetEventHeatPercentTotal, CombatEvent) == 0x000000, "Member 'FortMusicManager_GetEventHeatPercentTotal::CombatEvent' has a wrong offset!");
static_assert(offsetof(FortMusicManager_GetEventHeatPercentTotal, ReturnValue) == 0x000004, "Member 'FortMusicManager_GetEventHeatPercentTotal::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortMusicManager.OnDayPhaseChanged
// 0x0003 (0x0003 - 0x0000)
struct FortMusicManager_OnDayPhaseChanged final
{
public:
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDayPhase                                 PreviousDayPhase;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAtCreation;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMusicManager_OnDayPhaseChanged) == 0x000001, "Wrong alignment on FortMusicManager_OnDayPhaseChanged");
static_assert(sizeof(FortMusicManager_OnDayPhaseChanged) == 0x000003, "Wrong size on FortMusicManager_OnDayPhaseChanged");
static_assert(offsetof(FortMusicManager_OnDayPhaseChanged, CurrentDayPhase) == 0x000000, "Member 'FortMusicManager_OnDayPhaseChanged::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(FortMusicManager_OnDayPhaseChanged, PreviousDayPhase) == 0x000001, "Member 'FortMusicManager_OnDayPhaseChanged::PreviousDayPhase' has a wrong offset!");
static_assert(offsetof(FortMusicManager_OnDayPhaseChanged, bAtCreation) == 0x000002, "Member 'FortMusicManager_OnDayPhaseChanged::bAtCreation' has a wrong offset!");

// Function FortniteGame.FortMusicManager.OnThresholdChange
// 0x0002 (0x0002 - 0x0000)
struct FortMusicManager_OnThresholdChange final
{
public:
	EFortCombatThresholds                         OldThreshold;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCombatThresholds                         NewThreshold;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMusicManager_OnThresholdChange) == 0x000001, "Wrong alignment on FortMusicManager_OnThresholdChange");
static_assert(sizeof(FortMusicManager_OnThresholdChange) == 0x000002, "Wrong size on FortMusicManager_OnThresholdChange");
static_assert(offsetof(FortMusicManager_OnThresholdChange, OldThreshold) == 0x000000, "Member 'FortMusicManager_OnThresholdChange::OldThreshold' has a wrong offset!");
static_assert(offsetof(FortMusicManager_OnThresholdChange, NewThreshold) == 0x000001, "Member 'FortMusicManager_OnThresholdChange::NewThreshold' has a wrong offset!");

// Function FortniteGame.FortNavSystem.OnNavDataRegistered
// 0x0004 (0x0004 - 0x0000)
struct FortNavSystem_OnNavDataRegistered final
{
public:
	class ANavigationData*                        NavData;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortNavSystem_OnNavDataRegistered) == 0x000004, "Wrong alignment on FortNavSystem_OnNavDataRegistered");
static_assert(sizeof(FortNavSystem_OnNavDataRegistered) == 0x000004, "Wrong size on FortNavSystem_OnNavDataRegistered");
static_assert(offsetof(FortNavSystem_OnNavDataRegistered, NavData) == 0x000000, "Member 'FortNavSystem_OnNavDataRegistered::NavData' has a wrong offset!");

// Function FortniteGame.FortTrackMovementComponent.GetDistanceAlongSpline
// 0x0004 (0x0004 - 0x0000)
struct FortTrackMovementComponent_GetDistanceAlongSpline final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrackMovementComponent_GetDistanceAlongSpline) == 0x000004, "Wrong alignment on FortTrackMovementComponent_GetDistanceAlongSpline");
static_assert(sizeof(FortTrackMovementComponent_GetDistanceAlongSpline) == 0x000004, "Wrong size on FortTrackMovementComponent_GetDistanceAlongSpline");
static_assert(offsetof(FortTrackMovementComponent_GetDistanceAlongSpline, ReturnValue) == 0x000000, "Member 'FortTrackMovementComponent_GetDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrackMovementComponent.GetSpline
// 0x0004 (0x0004 - 0x0000)
struct FortTrackMovementComponent_GetSpline final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0004)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrackMovementComponent_GetSpline) == 0x000004, "Wrong alignment on FortTrackMovementComponent_GetSpline");
static_assert(sizeof(FortTrackMovementComponent_GetSpline) == 0x000004, "Wrong size on FortTrackMovementComponent_GetSpline");
static_assert(offsetof(FortTrackMovementComponent_GetSpline, ReturnValue) == 0x000000, "Member 'FortTrackMovementComponent_GetSpline::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrackMovementComponent.GetTrack
// 0x0004 (0x0004 - 0x0000)
struct FortTrackMovementComponent_GetTrack final
{
public:
	class AFortTrack*                             ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrackMovementComponent_GetTrack) == 0x000004, "Wrong alignment on FortTrackMovementComponent_GetTrack");
static_assert(sizeof(FortTrackMovementComponent_GetTrack) == 0x000004, "Wrong size on FortTrackMovementComponent_GetTrack");
static_assert(offsetof(FortTrackMovementComponent_GetTrack, ReturnValue) == 0x000000, "Member 'FortTrackMovementComponent_GetTrack::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTrackMovementComponent.IsReverseDirection
// 0x0001 (0x0001 - 0x0000)
struct FortTrackMovementComponent_IsReverseDirection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTrackMovementComponent_IsReverseDirection) == 0x000001, "Wrong alignment on FortTrackMovementComponent_IsReverseDirection");
static_assert(sizeof(FortTrackMovementComponent_IsReverseDirection) == 0x000001, "Wrong size on FortTrackMovementComponent_IsReverseDirection");
static_assert(offsetof(FortTrackMovementComponent_IsReverseDirection, ReturnValue) == 0x000000, "Member 'FortTrackMovementComponent_IsReverseDirection::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityKitTooltip.GetTextForToken
// 0x0028 (0x0028 - 0x0000)
struct FortAbilityKitTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0018(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilityKitTooltip_GetTextForToken) == 0x000004, "Wrong alignment on FortAbilityKitTooltip_GetTextForToken");
static_assert(sizeof(FortAbilityKitTooltip_GetTextForToken) == 0x000028, "Wrong size on FortAbilityKitTooltip_GetTextForToken");
static_assert(offsetof(FortAbilityKitTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortAbilityKitTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTextForToken, Tag) == 0x000004, "Member 'FortAbilityKitTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTextForToken, Context) == 0x00000C, "Member 'FortAbilityKitTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTextForToken, Token) == 0x000010, "Member 'FortAbilityKitTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTextForToken, OutText) == 0x000018, "Member 'FortAbilityKitTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTextForToken, ReturnValue) == 0x000024, "Member 'FortAbilityKitTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityKitTooltip.GetTokenizedDescriptionText
// 0x0020 (0x0020 - 0x0000)
struct FortAbilityKitTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutDescription;                                    // 0x0010(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortAbilityKitTooltip_GetTokenizedDescriptionText) == 0x000004, "Wrong alignment on FortAbilityKitTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortAbilityKitTooltip_GetTokenizedDescriptionText) == 0x000020, "Wrong size on FortAbilityKitTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortAbilityKitTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortAbilityKitTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTokenizedDescriptionText, Tag) == 0x000004, "Member 'FortAbilityKitTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTokenizedDescriptionText, Context) == 0x00000C, "Member 'FortAbilityKitTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000010, "Member 'FortAbilityKitTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortAbilityKitTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x00001C, "Member 'FortAbilityKitTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortWeap_BuildingTool.OnBlueprintPaperPulseUpdate
// 0x0004 (0x0004 - 0x0000)
struct FortWeap_BuildingTool_OnBlueprintPaperPulseUpdate final
{
public:
	float                                         InCurveVal;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortWeap_BuildingTool_OnBlueprintPaperPulseUpdate) == 0x000004, "Wrong alignment on FortWeap_BuildingTool_OnBlueprintPaperPulseUpdate");
static_assert(sizeof(FortWeap_BuildingTool_OnBlueprintPaperPulseUpdate) == 0x000004, "Wrong size on FortWeap_BuildingTool_OnBlueprintPaperPulseUpdate");
static_assert(offsetof(FortWeap_BuildingTool_OnBlueprintPaperPulseUpdate, InCurveVal) == 0x000000, "Member 'FortWeap_BuildingTool_OnBlueprintPaperPulseUpdate::InCurveVal' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetEnemyGameplayEffectDictatedByPrestige
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostFunctionLibrary_GetEnemyGameplayEffectDictatedByPrestige final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetEnemyGameplayEffectDictatedByPrestige) == 0x000004, "Wrong alignment on FortOutpostFunctionLibrary_GetEnemyGameplayEffectDictatedByPrestige");
static_assert(sizeof(FortOutpostFunctionLibrary_GetEnemyGameplayEffectDictatedByPrestige) == 0x000008, "Wrong size on FortOutpostFunctionLibrary_GetEnemyGameplayEffectDictatedByPrestige");
static_assert(offsetof(FortOutpostFunctionLibrary_GetEnemyGameplayEffectDictatedByPrestige, WorldContextObject) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetEnemyGameplayEffectDictatedByPrestige::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetEnemyGameplayEffectDictatedByPrestige, ReturnValue) == 0x000004, "Member 'FortOutpostFunctionLibrary_GetEnemyGameplayEffectDictatedByPrestige::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetOutpostOwner
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostFunctionLibrary_GetOutpostOwner final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerControllerOutpost*           ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetOutpostOwner) == 0x000004, "Wrong alignment on FortOutpostFunctionLibrary_GetOutpostOwner");
static_assert(sizeof(FortOutpostFunctionLibrary_GetOutpostOwner) == 0x000008, "Wrong size on FortOutpostFunctionLibrary_GetOutpostOwner");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostOwner, WorldContextObject) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetOutpostOwner::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostOwner, ReturnValue) == 0x000004, "Member 'FortOutpostFunctionLibrary_GetOutpostOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.GetOutpostQuestMissionConfigData
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ConfigTag;                                         // 0x0004(0x0008)(Parm, NativeAccessSpecifierPublic)
	class UFortMissionConfigData*                 ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData) == 0x000004, "Wrong alignment on FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData");
static_assert(sizeof(FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData, WorldContextObject) == 0x000000, "Member 'FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData, ConfigTag) == 0x000004, "Member 'FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData::ConfigTag' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData, ReturnValue) == 0x00000C, "Member 'FortOutpostFunctionLibrary_GetOutpostQuestMissionConfigData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.SetOutpostDefenseActive
// 0x0008 (0x0008 - 0x0000)
struct FortOutpostFunctionLibrary_SetOutpostDefenseActive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortOutpostFunctionLibrary_SetOutpostDefenseActive) == 0x000004, "Wrong alignment on FortOutpostFunctionLibrary_SetOutpostDefenseActive");
static_assert(sizeof(FortOutpostFunctionLibrary_SetOutpostDefenseActive) == 0x000008, "Wrong size on FortOutpostFunctionLibrary_SetOutpostDefenseActive");
static_assert(offsetof(FortOutpostFunctionLibrary_SetOutpostDefenseActive, WorldContextObject) == 0x000000, "Member 'FortOutpostFunctionLibrary_SetOutpostDefenseActive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_SetOutpostDefenseActive, bActive) == 0x000004, "Member 'FortOutpostFunctionLibrary_SetOutpostDefenseActive::bActive' has a wrong offset!");

// Function FortniteGame.FortOutpostFunctionLibrary.SetOutpostGameDifficultyRow
// 0x0010 (0x0010 - 0x0000)
struct FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    GameDifficultyInfo;                                // 0x0004(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow) == 0x000004, "Wrong alignment on FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow");
static_assert(sizeof(FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow) == 0x000010, "Wrong size on FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow");
static_assert(offsetof(FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow, WorldContextObject) == 0x000000, "Member 'FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow, GameDifficultyInfo) == 0x000004, "Member 'FortOutpostFunctionLibrary_SetOutpostGameDifficultyRow::GameDifficultyInfo' has a wrong offset!");

// Function FortniteGame.FortAbilityDecoTool.AbilitySpawnDeco
// 0x0024 (0x0024 - 0x0000)
struct FortAbilityDecoTool_AbilitySpawnDeco final
{
public:
	struct FAbilityToolSpawnParameters            SpawnParameters;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ABuildingActor*                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityDecoTool_AbilitySpawnDeco) == 0x000004, "Wrong alignment on FortAbilityDecoTool_AbilitySpawnDeco");
static_assert(sizeof(FortAbilityDecoTool_AbilitySpawnDeco) == 0x000024, "Wrong size on FortAbilityDecoTool_AbilitySpawnDeco");
static_assert(offsetof(FortAbilityDecoTool_AbilitySpawnDeco, SpawnParameters) == 0x000000, "Member 'FortAbilityDecoTool_AbilitySpawnDeco::SpawnParameters' has a wrong offset!");
static_assert(offsetof(FortAbilityDecoTool_AbilitySpawnDeco, ReturnValue) == 0x000020, "Member 'FortAbilityDecoTool_AbilitySpawnDeco::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityDecoTool.GetPlacementAbilityHandle
// 0x0004 (0x0004 - 0x0000)
struct FortAbilityDecoTool_GetPlacementAbilityHandle final
{
public:
	struct FGameplayAbilitySpecHandle             ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityDecoTool_GetPlacementAbilityHandle) == 0x000004, "Wrong alignment on FortAbilityDecoTool_GetPlacementAbilityHandle");
static_assert(sizeof(FortAbilityDecoTool_GetPlacementAbilityHandle) == 0x000004, "Wrong size on FortAbilityDecoTool_GetPlacementAbilityHandle");
static_assert(offsetof(FortAbilityDecoTool_GetPlacementAbilityHandle, ReturnValue) == 0x000000, "Member 'FortAbilityDecoTool_GetPlacementAbilityHandle::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityDecoTool.GetPlacementAbilityInstance
// 0x0004 (0x0004 - 0x0000)
struct FortAbilityDecoTool_GetPlacementAbilityInstance final
{
public:
	class UFortGameplayAbility*                   ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityDecoTool_GetPlacementAbilityInstance) == 0x000004, "Wrong alignment on FortAbilityDecoTool_GetPlacementAbilityInstance");
static_assert(sizeof(FortAbilityDecoTool_GetPlacementAbilityInstance) == 0x000004, "Wrong size on FortAbilityDecoTool_GetPlacementAbilityInstance");
static_assert(offsetof(FortAbilityDecoTool_GetPlacementAbilityInstance, ReturnValue) == 0x000000, "Member 'FortAbilityDecoTool_GetPlacementAbilityInstance::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortAbilityDecoTool.GetSpawnParameters
// 0x0020 (0x0020 - 0x0000)
struct FortAbilityDecoTool_GetSpawnParameters final
{
public:
	struct FAbilityToolSpawnParameters            OutSpawnParamters;                                 // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityDecoTool_GetSpawnParameters) == 0x000004, "Wrong alignment on FortAbilityDecoTool_GetSpawnParameters");
static_assert(sizeof(FortAbilityDecoTool_GetSpawnParameters) == 0x000020, "Wrong size on FortAbilityDecoTool_GetSpawnParameters");
static_assert(offsetof(FortAbilityDecoTool_GetSpawnParameters, OutSpawnParamters) == 0x000000, "Member 'FortAbilityDecoTool_GetSpawnParameters::OutSpawnParamters' has a wrong offset!");

// Function FortniteGame.FortPawn_InteractablePawn.BlueprintOnInteract
// 0x0004 (0x0004 - 0x0000)
struct FortPawn_InteractablePawn_BlueprintOnInteract final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_InteractablePawn_BlueprintOnInteract) == 0x000004, "Wrong alignment on FortPawn_InteractablePawn_BlueprintOnInteract");
static_assert(sizeof(FortPawn_InteractablePawn_BlueprintOnInteract) == 0x000004, "Wrong size on FortPawn_InteractablePawn_BlueprintOnInteract");
static_assert(offsetof(FortPawn_InteractablePawn_BlueprintOnInteract, InteractingPawn) == 0x000000, "Member 'FortPawn_InteractablePawn_BlueprintOnInteract::InteractingPawn' has a wrong offset!");

// Function FortniteGame.FortPawn_InteractablePawn.BlueprintCanInteract
// 0x0008 (0x0008 - 0x0000)
struct FortPawn_InteractablePawn_BlueprintCanInteract final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPawn_InteractablePawn_BlueprintCanInteract) == 0x000004, "Wrong alignment on FortPawn_InteractablePawn_BlueprintCanInteract");
static_assert(sizeof(FortPawn_InteractablePawn_BlueprintCanInteract) == 0x000008, "Wrong size on FortPawn_InteractablePawn_BlueprintCanInteract");
static_assert(offsetof(FortPawn_InteractablePawn_BlueprintCanInteract, InteractingPawn) == 0x000000, "Member 'FortPawn_InteractablePawn_BlueprintCanInteract::InteractingPawn' has a wrong offset!");
static_assert(offsetof(FortPawn_InteractablePawn_BlueprintCanInteract, ReturnValue) == 0x000004, "Member 'FortPawn_InteractablePawn_BlueprintCanInteract::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPawn_InteractablePawn.BlueprintGetInteractionString
// 0x0010 (0x0010 - 0x0000)
struct FortPawn_InteractablePawn_BlueprintGetInteractionString final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPawn_InteractablePawn_BlueprintGetInteractionString) == 0x000004, "Wrong alignment on FortPawn_InteractablePawn_BlueprintGetInteractionString");
static_assert(sizeof(FortPawn_InteractablePawn_BlueprintGetInteractionString) == 0x000010, "Wrong size on FortPawn_InteractablePawn_BlueprintGetInteractionString");
static_assert(offsetof(FortPawn_InteractablePawn_BlueprintGetInteractionString, InteractingPawn) == 0x000000, "Member 'FortPawn_InteractablePawn_BlueprintGetInteractionString::InteractingPawn' has a wrong offset!");
static_assert(offsetof(FortPawn_InteractablePawn_BlueprintGetInteractionString, ReturnValue) == 0x000004, "Member 'FortPawn_InteractablePawn_BlueprintGetInteractionString::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseWorkers.CalculateTotalWorkerRatings
// 0x0010 (0x0010 - 0x0000)
struct HomeBaseWorkers_CalculateTotalWorkerRatings final
{
public:
	TArray<class UHomeBaseWorker*>                Workers_0;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseWorkers_CalculateTotalWorkerRatings) == 0x000004, "Wrong alignment on HomeBaseWorkers_CalculateTotalWorkerRatings");
static_assert(sizeof(HomeBaseWorkers_CalculateTotalWorkerRatings) == 0x000010, "Wrong size on HomeBaseWorkers_CalculateTotalWorkerRatings");
static_assert(offsetof(HomeBaseWorkers_CalculateTotalWorkerRatings, Workers_0) == 0x000000, "Member 'HomeBaseWorkers_CalculateTotalWorkerRatings::Workers_0' has a wrong offset!");
static_assert(offsetof(HomeBaseWorkers_CalculateTotalWorkerRatings, ReturnValue) == 0x00000C, "Member 'HomeBaseWorkers_CalculateTotalWorkerRatings::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseWorkers.GetAllManagers
// 0x000C (0x000C - 0x0000)
struct HomeBaseWorkers_GetAllManagers final
{
public:
	TArray<class UHomeBaseWorker*>                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseWorkers_GetAllManagers) == 0x000004, "Wrong alignment on HomeBaseWorkers_GetAllManagers");
static_assert(sizeof(HomeBaseWorkers_GetAllManagers) == 0x00000C, "Wrong size on HomeBaseWorkers_GetAllManagers");
static_assert(offsetof(HomeBaseWorkers_GetAllManagers, ReturnValue) == 0x000000, "Member 'HomeBaseWorkers_GetAllManagers::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseWorkers.GetAllWorkers
// 0x000C (0x000C - 0x0000)
struct HomeBaseWorkers_GetAllWorkers final
{
public:
	TArray<class UHomeBaseWorker*>                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseWorkers_GetAllWorkers) == 0x000004, "Wrong alignment on HomeBaseWorkers_GetAllWorkers");
static_assert(sizeof(HomeBaseWorkers_GetAllWorkers) == 0x00000C, "Wrong size on HomeBaseWorkers_GetAllWorkers");
static_assert(offsetof(HomeBaseWorkers_GetAllWorkers, ReturnValue) == 0x000000, "Member 'HomeBaseWorkers_GetAllWorkers::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseWorkers.GetSlots
// 0x000C (0x000C - 0x0000)
struct HomeBaseWorkers_GetSlots final
{
public:
	TArray<struct FHomeBaseWorkerSlot>            ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseWorkers_GetSlots) == 0x000004, "Wrong alignment on HomeBaseWorkers_GetSlots");
static_assert(sizeof(HomeBaseWorkers_GetSlots) == 0x00000C, "Wrong size on HomeBaseWorkers_GetSlots");
static_assert(offsetof(HomeBaseWorkers_GetSlots, ReturnValue) == 0x000000, "Member 'HomeBaseWorkers_GetSlots::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseWorkers.GetSlottedWorkers
// 0x000C (0x000C - 0x0000)
struct HomeBaseWorkers_GetSlottedWorkers final
{
public:
	TArray<class UHomeBaseWorker*>                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseWorkers_GetSlottedWorkers) == 0x000004, "Wrong alignment on HomeBaseWorkers_GetSlottedWorkers");
static_assert(sizeof(HomeBaseWorkers_GetSlottedWorkers) == 0x00000C, "Wrong size on HomeBaseWorkers_GetSlottedWorkers");
static_assert(offsetof(HomeBaseWorkers_GetSlottedWorkers, ReturnValue) == 0x000000, "Member 'HomeBaseWorkers_GetSlottedWorkers::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseWorkers.GetWorkerFromItem
// 0x0008 (0x0008 - 0x0000)
struct HomeBaseWorkers_GetWorkerFromItem final
{
public:
	const class UFortWorker*                      WorkerItem;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHomeBaseWorker*                        ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseWorkers_GetWorkerFromItem) == 0x000004, "Wrong alignment on HomeBaseWorkers_GetWorkerFromItem");
static_assert(sizeof(HomeBaseWorkers_GetWorkerFromItem) == 0x000008, "Wrong size on HomeBaseWorkers_GetWorkerFromItem");
static_assert(offsetof(HomeBaseWorkers_GetWorkerFromItem, WorkerItem) == 0x000000, "Member 'HomeBaseWorkers_GetWorkerFromItem::WorkerItem' has a wrong offset!");
static_assert(offsetof(HomeBaseWorkers_GetWorkerFromItem, ReturnValue) == 0x000004, "Member 'HomeBaseWorkers_GetWorkerFromItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseWorkers.OnBuildingItemChanged
// 0x0003 (0x0003 - 0x0000)
struct HomeBaseWorkers_OnBuildingItemChanged final
{
public:
	bool                                          bItemChanged;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAmmoChanged;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIngredientsChanged;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseWorkers_OnBuildingItemChanged) == 0x000001, "Wrong alignment on HomeBaseWorkers_OnBuildingItemChanged");
static_assert(sizeof(HomeBaseWorkers_OnBuildingItemChanged) == 0x000003, "Wrong size on HomeBaseWorkers_OnBuildingItemChanged");
static_assert(offsetof(HomeBaseWorkers_OnBuildingItemChanged, bItemChanged) == 0x000000, "Member 'HomeBaseWorkers_OnBuildingItemChanged::bItemChanged' has a wrong offset!");
static_assert(offsetof(HomeBaseWorkers_OnBuildingItemChanged, bAmmoChanged) == 0x000001, "Member 'HomeBaseWorkers_OnBuildingItemChanged::bAmmoChanged' has a wrong offset!");
static_assert(offsetof(HomeBaseWorkers_OnBuildingItemChanged, bIngredientsChanged) == 0x000002, "Member 'HomeBaseWorkers_OnBuildingItemChanged::bIngredientsChanged' has a wrong offset!");

// Function FortniteGame.HomeBaseWorkers.SlotWorker
// 0x0008 (0x0008 - 0x0000)
struct HomeBaseWorkers_SlotWorker final
{
public:
	class UHomeBaseWorker*                        Worker;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseWorkers_SlotWorker) == 0x000004, "Wrong alignment on HomeBaseWorkers_SlotWorker");
static_assert(sizeof(HomeBaseWorkers_SlotWorker) == 0x000008, "Wrong size on HomeBaseWorkers_SlotWorker");
static_assert(offsetof(HomeBaseWorkers_SlotWorker, Worker) == 0x000000, "Member 'HomeBaseWorkers_SlotWorker::Worker' has a wrong offset!");
static_assert(offsetof(HomeBaseWorkers_SlotWorker, SlotIndex) == 0x000004, "Member 'HomeBaseWorkers_SlotWorker::SlotIndex' has a wrong offset!");

// Function FortniteGame.FortPermaniteStructureInterface.OnBoundariesChanged
// 0x000C (0x000C - 0x0000)
struct FortPermaniteStructureInterface_OnBoundariesChanged final
{
public:
	int32                                         MinLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPermaniteStructureInterface_OnBoundariesChanged) == 0x000004, "Wrong alignment on FortPermaniteStructureInterface_OnBoundariesChanged");
static_assert(sizeof(FortPermaniteStructureInterface_OnBoundariesChanged) == 0x00000C, "Wrong size on FortPermaniteStructureInterface_OnBoundariesChanged");
static_assert(offsetof(FortPermaniteStructureInterface_OnBoundariesChanged, MinLevel) == 0x000000, "Member 'FortPermaniteStructureInterface_OnBoundariesChanged::MinLevel' has a wrong offset!");
static_assert(offsetof(FortPermaniteStructureInterface_OnBoundariesChanged, MaxLevel) == 0x000004, "Member 'FortPermaniteStructureInterface_OnBoundariesChanged::MaxLevel' has a wrong offset!");
static_assert(offsetof(FortPermaniteStructureInterface_OnBoundariesChanged, CurrentLevel) == 0x000008, "Member 'FortPermaniteStructureInterface_OnBoundariesChanged::CurrentLevel' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.DestroyAllFortPickupsWithItem
// 0x0008 (0x0008 - 0x0000)
struct FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFortWorldItemDefinition*         ItemDefinitionToCheck;                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem) == 0x000004, "Wrong alignment on FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem");
static_assert(sizeof(FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem) == 0x000008, "Wrong size on FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem");
static_assert(offsetof(FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem, ItemDefinitionToCheck) == 0x000004, "Member 'FortPvPFunctionLibrary_DestroyAllFortPickupsWithItem::ItemDefinitionToCheck' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.GetBaseDestructionTeamInfo
// 0x000C (0x000C - 0x0000)
struct FortPvPFunctionLibrary_GetBaseDestructionTeamInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     Team;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortTeamInfoPvPBaseDestruction*        ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPFunctionLibrary_GetBaseDestructionTeamInfo) == 0x000004, "Wrong alignment on FortPvPFunctionLibrary_GetBaseDestructionTeamInfo");
static_assert(sizeof(FortPvPFunctionLibrary_GetBaseDestructionTeamInfo) == 0x00000C, "Wrong size on FortPvPFunctionLibrary_GetBaseDestructionTeamInfo");
static_assert(offsetof(FortPvPFunctionLibrary_GetBaseDestructionTeamInfo, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_GetBaseDestructionTeamInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetBaseDestructionTeamInfo, Team) == 0x000004, "Member 'FortPvPFunctionLibrary_GetBaseDestructionTeamInfo::Team' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetBaseDestructionTeamInfo, ReturnValue) == 0x000008, "Member 'FortPvPFunctionLibrary_GetBaseDestructionTeamInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.GetDifficultyRowNamesFromPvPRating
// 0x0010 (0x0010 - 0x0000)
struct FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating final
{
public:
	TArray<class FName>                           OutDifficultyRows;                                 // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         InPvPRating;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating) == 0x000004, "Wrong alignment on FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating");
static_assert(sizeof(FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating) == 0x000010, "Wrong size on FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating");
static_assert(offsetof(FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating, OutDifficultyRows) == 0x000000, "Member 'FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating::OutDifficultyRows' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating, InPvPRating) == 0x00000C, "Member 'FortPvPFunctionLibrary_GetDifficultyRowNamesFromPvPRating::InPvPRating' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.GetMatchLevel
// 0x0008 (0x0008 - 0x0000)
struct FortPvPFunctionLibrary_GetMatchLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPFunctionLibrary_GetMatchLevel) == 0x000004, "Wrong alignment on FortPvPFunctionLibrary_GetMatchLevel");
static_assert(sizeof(FortPvPFunctionLibrary_GetMatchLevel) == 0x000008, "Wrong size on FortPvPFunctionLibrary_GetMatchLevel");
static_assert(offsetof(FortPvPFunctionLibrary_GetMatchLevel, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_GetMatchLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetMatchLevel, ReturnValue) == 0x000004, "Member 'FortPvPFunctionLibrary_GetMatchLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.GetRoundTimeAccumulated
// 0x0008 (0x0008 - 0x0000)
struct FortPvPFunctionLibrary_GetRoundTimeAccumulated final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPFunctionLibrary_GetRoundTimeAccumulated) == 0x000004, "Wrong alignment on FortPvPFunctionLibrary_GetRoundTimeAccumulated");
static_assert(sizeof(FortPvPFunctionLibrary_GetRoundTimeAccumulated) == 0x000008, "Wrong size on FortPvPFunctionLibrary_GetRoundTimeAccumulated");
static_assert(offsetof(FortPvPFunctionLibrary_GetRoundTimeAccumulated, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_GetRoundTimeAccumulated::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetRoundTimeAccumulated, ReturnValue) == 0x000004, "Member 'FortPvPFunctionLibrary_GetRoundTimeAccumulated::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.GetTeamCornerstone
// 0x000C (0x000C - 0x0000)
struct FortPvPFunctionLibrary_GetTeamCornerstone final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     Team;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPvPBaseCornerstone*                ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPFunctionLibrary_GetTeamCornerstone) == 0x000004, "Wrong alignment on FortPvPFunctionLibrary_GetTeamCornerstone");
static_assert(sizeof(FortPvPFunctionLibrary_GetTeamCornerstone) == 0x00000C, "Wrong size on FortPvPFunctionLibrary_GetTeamCornerstone");
static_assert(offsetof(FortPvPFunctionLibrary_GetTeamCornerstone, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_GetTeamCornerstone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetTeamCornerstone, Team) == 0x000004, "Member 'FortPvPFunctionLibrary_GetTeamCornerstone::Team' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetTeamCornerstone, ReturnValue) == 0x000008, "Member 'FortPvPFunctionLibrary_GetTeamCornerstone::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.GetTeamStrategicBuildingActor
// 0x0010 (0x0010 - 0x0000)
struct FortPvPFunctionLibrary_GetTeamStrategicBuildingActor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     Team;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTeamStrategicBuildingHandle           SBAHandle;                                         // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AStrategicBuildingActor*                ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPFunctionLibrary_GetTeamStrategicBuildingActor) == 0x000004, "Wrong alignment on FortPvPFunctionLibrary_GetTeamStrategicBuildingActor");
static_assert(sizeof(FortPvPFunctionLibrary_GetTeamStrategicBuildingActor) == 0x000010, "Wrong size on FortPvPFunctionLibrary_GetTeamStrategicBuildingActor");
static_assert(offsetof(FortPvPFunctionLibrary_GetTeamStrategicBuildingActor, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_GetTeamStrategicBuildingActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetTeamStrategicBuildingActor, Team) == 0x000004, "Member 'FortPvPFunctionLibrary_GetTeamStrategicBuildingActor::Team' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetTeamStrategicBuildingActor, SBAHandle) == 0x000008, "Member 'FortPvPFunctionLibrary_GetTeamStrategicBuildingActor::SBAHandle' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_GetTeamStrategicBuildingActor, ReturnValue) == 0x00000C, "Member 'FortPvPFunctionLibrary_GetTeamStrategicBuildingActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPvPFunctionLibrary.SetMatchLevel
// 0x0008 (0x0008 - 0x0000)
struct FortPvPFunctionLibrary_SetMatchLevel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchLevel;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPvPFunctionLibrary_SetMatchLevel) == 0x000004, "Wrong alignment on FortPvPFunctionLibrary_SetMatchLevel");
static_assert(sizeof(FortPvPFunctionLibrary_SetMatchLevel) == 0x000008, "Wrong size on FortPvPFunctionLibrary_SetMatchLevel");
static_assert(offsetof(FortPvPFunctionLibrary_SetMatchLevel, WorldContextObject) == 0x000000, "Member 'FortPvPFunctionLibrary_SetMatchLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FortPvPFunctionLibrary_SetMatchLevel, MatchLevel) == 0x000004, "Member 'FortPvPFunctionLibrary_SetMatchLevel::MatchLevel' has a wrong offset!");

// Function FortniteGame.FortUIZone.ToggleTargetInfoLock
// 0x0001 (0x0001 - 0x0000)
struct FortUIZone_ToggleTargetInfoLock final
{
public:
	bool                                          bTraceComplex;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortUIZone_ToggleTargetInfoLock) == 0x000001, "Wrong alignment on FortUIZone_ToggleTargetInfoLock");
static_assert(sizeof(FortUIZone_ToggleTargetInfoLock) == 0x000001, "Wrong size on FortUIZone_ToggleTargetInfoLock");
static_assert(offsetof(FortUIZone_ToggleTargetInfoLock, bTraceComplex) == 0x000000, "Member 'FortUIZone_ToggleTargetInfoLock::bTraceComplex' has a wrong offset!");

// Function FortniteGame.FortPlayerStateOutpost.ServerSetCanEditOutpost
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerStateOutpost_ServerSetCanEditOutpost final
{
public:
	class AFortPlayerStateOutpost*                InPlayer;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanEdit;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerStateOutpost_ServerSetCanEditOutpost) == 0x000004, "Wrong alignment on FortPlayerStateOutpost_ServerSetCanEditOutpost");
static_assert(sizeof(FortPlayerStateOutpost_ServerSetCanEditOutpost) == 0x000008, "Wrong size on FortPlayerStateOutpost_ServerSetCanEditOutpost");
static_assert(offsetof(FortPlayerStateOutpost_ServerSetCanEditOutpost, InPlayer) == 0x000000, "Member 'FortPlayerStateOutpost_ServerSetCanEditOutpost::InPlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerStateOutpost_ServerSetCanEditOutpost, bCanEdit) == 0x000004, "Member 'FortPlayerStateOutpost_ServerSetCanEditOutpost::bCanEdit' has a wrong offset!");

// Function FortniteGame.FortPlayerStateOutpost.SetCanEditOutpost
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerStateOutpost_SetCanEditOutpost final
{
public:
	class AFortPlayerStateOutpost*                InPlayer;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanEdit;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerStateOutpost_SetCanEditOutpost) == 0x000004, "Wrong alignment on FortPlayerStateOutpost_SetCanEditOutpost");
static_assert(sizeof(FortPlayerStateOutpost_SetCanEditOutpost) == 0x000008, "Wrong size on FortPlayerStateOutpost_SetCanEditOutpost");
static_assert(offsetof(FortPlayerStateOutpost_SetCanEditOutpost, InPlayer) == 0x000000, "Member 'FortPlayerStateOutpost_SetCanEditOutpost::InPlayer' has a wrong offset!");
static_assert(offsetof(FortPlayerStateOutpost_SetCanEditOutpost, bCanEdit) == 0x000004, "Member 'FortPlayerStateOutpost_SetCanEditOutpost::bCanEdit' has a wrong offset!");

// Function FortniteGame.FortPlayerStateOutpost.CanEditOutpost
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerStateOutpost_CanEditOutpost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerStateOutpost_CanEditOutpost) == 0x000001, "Wrong alignment on FortPlayerStateOutpost_CanEditOutpost");
static_assert(sizeof(FortPlayerStateOutpost_CanEditOutpost) == 0x000001, "Wrong size on FortPlayerStateOutpost_CanEditOutpost");
static_assert(offsetof(FortPlayerStateOutpost_CanEditOutpost, ReturnValue) == 0x000000, "Member 'FortPlayerStateOutpost_CanEditOutpost::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerKeep.ClientSetPermaniteAvailability
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerKeep_ClientSetPermaniteAvailability final
{
public:
	bool                                          bAvailable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerKeep_ClientSetPermaniteAvailability) == 0x000001, "Wrong alignment on FortPlayerControllerKeep_ClientSetPermaniteAvailability");
static_assert(sizeof(FortPlayerControllerKeep_ClientSetPermaniteAvailability) == 0x000001, "Wrong size on FortPlayerControllerKeep_ClientSetPermaniteAvailability");
static_assert(offsetof(FortPlayerControllerKeep_ClientSetPermaniteAvailability, bAvailable) == 0x000000, "Member 'FortPlayerControllerKeep_ClientSetPermaniteAvailability::bAvailable' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerKeep.ServerOnContainerItemsChosen
// 0x0010 (0x0010 - 0x0000)
struct FortPlayerControllerKeep_ServerOnContainerItemsChosen final
{
public:
	class AKeepItemContainer*                     Container;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ItemTemplateIDs;                                   // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerKeep_ServerOnContainerItemsChosen) == 0x000004, "Wrong alignment on FortPlayerControllerKeep_ServerOnContainerItemsChosen");
static_assert(sizeof(FortPlayerControllerKeep_ServerOnContainerItemsChosen) == 0x000010, "Wrong size on FortPlayerControllerKeep_ServerOnContainerItemsChosen");
static_assert(offsetof(FortPlayerControllerKeep_ServerOnContainerItemsChosen, Container) == 0x000000, "Member 'FortPlayerControllerKeep_ServerOnContainerItemsChosen::Container' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerKeep_ServerOnContainerItemsChosen, ItemTemplateIDs) == 0x000004, "Member 'FortPlayerControllerKeep_ServerOnContainerItemsChosen::ItemTemplateIDs' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerKeep.SetPermaniteAvailability
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerKeep_SetPermaniteAvailability final
{
public:
	bool                                          bAvailable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerKeep_SetPermaniteAvailability) == 0x000001, "Wrong alignment on FortPlayerControllerKeep_SetPermaniteAvailability");
static_assert(sizeof(FortPlayerControllerKeep_SetPermaniteAvailability) == 0x000001, "Wrong size on FortPlayerControllerKeep_SetPermaniteAvailability");
static_assert(offsetof(FortPlayerControllerKeep_SetPermaniteAvailability, bAvailable) == 0x000000, "Member 'FortPlayerControllerKeep_SetPermaniteAvailability::bAvailable' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ClientExecuteInventoryItem
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerControllerOutpost_ClientExecuteInventoryItem final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_ClientExecuteInventoryItem) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_ClientExecuteInventoryItem");
static_assert(sizeof(FortPlayerControllerOutpost_ClientExecuteInventoryItem) == 0x000014, "Wrong size on FortPlayerControllerOutpost_ClientExecuteInventoryItem");
static_assert(offsetof(FortPlayerControllerOutpost_ClientExecuteInventoryItem, ItemGuid) == 0x000000, "Member 'FortPlayerControllerOutpost_ClientExecuteInventoryItem::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_ClientExecuteInventoryItem, Delay) == 0x000010, "Member 'FortPlayerControllerOutpost_ClientExecuteInventoryItem::Delay' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ClientOnStructureLevelChanged
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerOutpost_ClientOnStructureLevelChanged final
{
public:
	class UFortOutpostItemDefinition*             UpgradedStructure;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InLevelBeforeUpgrade;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_ClientOnStructureLevelChanged) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_ClientOnStructureLevelChanged");
static_assert(sizeof(FortPlayerControllerOutpost_ClientOnStructureLevelChanged) == 0x000008, "Wrong size on FortPlayerControllerOutpost_ClientOnStructureLevelChanged");
static_assert(offsetof(FortPlayerControllerOutpost_ClientOnStructureLevelChanged, UpgradedStructure) == 0x000000, "Member 'FortPlayerControllerOutpost_ClientOnStructureLevelChanged::UpgradedStructure' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_ClientOnStructureLevelChanged, InLevelBeforeUpgrade) == 0x000004, "Member 'FortPlayerControllerOutpost_ClientOnStructureLevelChanged::InLevelBeforeUpgrade' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ServeMoveItemFromStorageVault
// 0x007C (0x007C - 0x0000)
struct FortPlayerControllerOutpost_ServeMoveItemFromStorageVault final
{
public:
	struct FFortItemEntry                         NewlyCollectedItem;                                // 0x0000(0x007C)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_ServeMoveItemFromStorageVault) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_ServeMoveItemFromStorageVault");
static_assert(sizeof(FortPlayerControllerOutpost_ServeMoveItemFromStorageVault) == 0x00007C, "Wrong size on FortPlayerControllerOutpost_ServeMoveItemFromStorageVault");
static_assert(offsetof(FortPlayerControllerOutpost_ServeMoveItemFromStorageVault, NewlyCollectedItem) == 0x000000, "Member 'FortPlayerControllerOutpost_ServeMoveItemFromStorageVault::NewlyCollectedItem' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ServeMoveItemToStorageVault
// 0x007C (0x007C - 0x0000)
struct FortPlayerControllerOutpost_ServeMoveItemToStorageVault final
{
public:
	struct FFortItemEntry                         NewlyStoredItem;                                   // 0x0000(0x007C)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_ServeMoveItemToStorageVault) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_ServeMoveItemToStorageVault");
static_assert(sizeof(FortPlayerControllerOutpost_ServeMoveItemToStorageVault) == 0x00007C, "Wrong size on FortPlayerControllerOutpost_ServeMoveItemToStorageVault");
static_assert(offsetof(FortPlayerControllerOutpost_ServeMoveItemToStorageVault, NewlyStoredItem) == 0x000000, "Member 'FortPlayerControllerOutpost_ServeMoveItemToStorageVault::NewlyStoredItem' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ServerDepositPOSTResource
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerControllerOutpost_ServerDepositPOSTResource final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_ServerDepositPOSTResource) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_ServerDepositPOSTResource");
static_assert(sizeof(FortPlayerControllerOutpost_ServerDepositPOSTResource) == 0x000014, "Wrong size on FortPlayerControllerOutpost_ServerDepositPOSTResource");
static_assert(offsetof(FortPlayerControllerOutpost_ServerDepositPOSTResource, ItemGuid) == 0x000000, "Member 'FortPlayerControllerOutpost_ServerDepositPOSTResource::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_ServerDepositPOSTResource, Count) == 0x000010, "Member 'FortPlayerControllerOutpost_ServerDepositPOSTResource::Count' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ServerDisintegrateItem
// 0x0014 (0x0014 - 0x0000)
struct FortPlayerControllerOutpost_ServerDisintegrateItem final
{
public:
	struct FGuid                                  ItemGuid;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_ServerDisintegrateItem) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_ServerDisintegrateItem");
static_assert(sizeof(FortPlayerControllerOutpost_ServerDisintegrateItem) == 0x000014, "Wrong size on FortPlayerControllerOutpost_ServerDisintegrateItem");
static_assert(offsetof(FortPlayerControllerOutpost_ServerDisintegrateItem, ItemGuid) == 0x000000, "Member 'FortPlayerControllerOutpost_ServerDisintegrateItem::ItemGuid' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_ServerDisintegrateItem, Count) == 0x000010, "Member 'FortPlayerControllerOutpost_ServerDisintegrateItem::Count' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ServerFabricateItem
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerOutpost_ServerFabricateItem final
{
public:
	const class UFortWorldItemDefinition*         ItemDef;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_ServerFabricateItem) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_ServerFabricateItem");
static_assert(sizeof(FortPlayerControllerOutpost_ServerFabricateItem) == 0x000004, "Wrong size on FortPlayerControllerOutpost_ServerFabricateItem");
static_assert(offsetof(FortPlayerControllerOutpost_ServerFabricateItem, ItemDef) == 0x000000, "Member 'FortPlayerControllerOutpost_ServerFabricateItem::ItemDef' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.ServerUpgradeStructure
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerOutpost_ServerUpgradeStructure final
{
public:
	class UFortOutpostItemDefinition*             StructureToUpgrade;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_ServerUpgradeStructure) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_ServerUpgradeStructure");
static_assert(sizeof(FortPlayerControllerOutpost_ServerUpgradeStructure) == 0x000004, "Wrong size on FortPlayerControllerOutpost_ServerUpgradeStructure");
static_assert(offsetof(FortPlayerControllerOutpost_ServerUpgradeStructure, StructureToUpgrade) == 0x000000, "Member 'FortPlayerControllerOutpost_ServerUpgradeStructure::StructureToUpgrade' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.UpgradeStructure
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerOutpost_UpgradeStructure final
{
public:
	class UFortOutpostItemDefinition*             StructureToUpgrade;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_UpgradeStructure) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_UpgradeStructure");
static_assert(sizeof(FortPlayerControllerOutpost_UpgradeStructure) == 0x000004, "Wrong size on FortPlayerControllerOutpost_UpgradeStructure");
static_assert(offsetof(FortPlayerControllerOutpost_UpgradeStructure, StructureToUpgrade) == 0x000000, "Member 'FortPlayerControllerOutpost_UpgradeStructure::StructureToUpgrade' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.CanUpgradeStructure
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerOutpost_CanUpgradeStructure final
{
public:
	class UFortOutpostItemDefinition*             OutpostStructure;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLog;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerControllerOutpost_CanUpgradeStructure) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_CanUpgradeStructure");
static_assert(sizeof(FortPlayerControllerOutpost_CanUpgradeStructure) == 0x000008, "Wrong size on FortPlayerControllerOutpost_CanUpgradeStructure");
static_assert(offsetof(FortPlayerControllerOutpost_CanUpgradeStructure, OutpostStructure) == 0x000000, "Member 'FortPlayerControllerOutpost_CanUpgradeStructure::OutpostStructure' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_CanUpgradeStructure, bLog) == 0x000004, "Member 'FortPlayerControllerOutpost_CanUpgradeStructure::bLog' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_CanUpgradeStructure, ReturnValue) == 0x000005, "Member 'FortPlayerControllerOutpost_CanUpgradeStructure::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetPendingFabricationProgress
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerOutpost_GetPendingFabricationProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_GetPendingFabricationProgress) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_GetPendingFabricationProgress");
static_assert(sizeof(FortPlayerControllerOutpost_GetPendingFabricationProgress) == 0x000004, "Wrong size on FortPlayerControllerOutpost_GetPendingFabricationProgress");
static_assert(offsetof(FortPlayerControllerOutpost_GetPendingFabricationProgress, ReturnValue) == 0x000000, "Member 'FortPlayerControllerOutpost_GetPendingFabricationProgress::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetPendingItemToFabricate
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerOutpost_GetPendingItemToFabricate final
{
public:
	class UFortWorldItemDefinition*               ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_GetPendingItemToFabricate) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_GetPendingItemToFabricate");
static_assert(sizeof(FortPlayerControllerOutpost_GetPendingItemToFabricate) == 0x000004, "Wrong size on FortPlayerControllerOutpost_GetPendingItemToFabricate");
static_assert(offsetof(FortPlayerControllerOutpost_GetPendingItemToFabricate, ReturnValue) == 0x000000, "Member 'FortPlayerControllerOutpost_GetPendingItemToFabricate::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetStormShieldLevelDefended
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerControllerOutpost_GetStormShieldLevelDefended final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_GetStormShieldLevelDefended) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_GetStormShieldLevelDefended");
static_assert(sizeof(FortPlayerControllerOutpost_GetStormShieldLevelDefended) == 0x000004, "Wrong size on FortPlayerControllerOutpost_GetStormShieldLevelDefended");
static_assert(offsetof(FortPlayerControllerOutpost_GetStormShieldLevelDefended, ReturnValue) == 0x000000, "Member 'FortPlayerControllerOutpost_GetStormShieldLevelDefended::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetStructureLevel
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerOutpost_GetStructureLevel final
{
public:
	class UFortOutpostItemDefinition*             OutpostStructure;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_GetStructureLevel) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_GetStructureLevel");
static_assert(sizeof(FortPlayerControllerOutpost_GetStructureLevel) == 0x000008, "Wrong size on FortPlayerControllerOutpost_GetStructureLevel");
static_assert(offsetof(FortPlayerControllerOutpost_GetStructureLevel, OutpostStructure) == 0x000000, "Member 'FortPlayerControllerOutpost_GetStructureLevel::OutpostStructure' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_GetStructureLevel, ReturnValue) == 0x000004, "Member 'FortPlayerControllerOutpost_GetStructureLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetStructureMaxLevel
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerControllerOutpost_GetStructureMaxLevel final
{
public:
	class UFortOutpostItemDefinition*             OutpostStructure;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_GetStructureMaxLevel) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_GetStructureMaxLevel");
static_assert(sizeof(FortPlayerControllerOutpost_GetStructureMaxLevel) == 0x000008, "Wrong size on FortPlayerControllerOutpost_GetStructureMaxLevel");
static_assert(offsetof(FortPlayerControllerOutpost_GetStructureMaxLevel, OutpostStructure) == 0x000000, "Member 'FortPlayerControllerOutpost_GetStructureMaxLevel::OutpostStructure' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_GetStructureMaxLevel, ReturnValue) == 0x000004, "Member 'FortPlayerControllerOutpost_GetStructureMaxLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.GetUpgradeStructureCost
// 0x001C (0x001C - 0x0000)
struct FortPlayerControllerOutpost_GetUpgradeStructureCost final
{
public:
	class UFortOutpostItemDefinition*             OutpostStructure;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutWorldItems;                                     // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemQuantityPair>          OutAccountItems;                                   // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_GetUpgradeStructureCost) == 0x000004, "Wrong alignment on FortPlayerControllerOutpost_GetUpgradeStructureCost");
static_assert(sizeof(FortPlayerControllerOutpost_GetUpgradeStructureCost) == 0x00001C, "Wrong size on FortPlayerControllerOutpost_GetUpgradeStructureCost");
static_assert(offsetof(FortPlayerControllerOutpost_GetUpgradeStructureCost, OutpostStructure) == 0x000000, "Member 'FortPlayerControllerOutpost_GetUpgradeStructureCost::OutpostStructure' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_GetUpgradeStructureCost, OutWorldItems) == 0x000004, "Member 'FortPlayerControllerOutpost_GetUpgradeStructureCost::OutWorldItems' has a wrong offset!");
static_assert(offsetof(FortPlayerControllerOutpost_GetUpgradeStructureCost, OutAccountItems) == 0x000010, "Member 'FortPlayerControllerOutpost_GetUpgradeStructureCost::OutAccountItems' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.IsFabricationPending
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerOutpost_IsFabricationPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_IsFabricationPending) == 0x000001, "Wrong alignment on FortPlayerControllerOutpost_IsFabricationPending");
static_assert(sizeof(FortPlayerControllerOutpost_IsFabricationPending) == 0x000001, "Wrong size on FortPlayerControllerOutpost_IsFabricationPending");
static_assert(offsetof(FortPlayerControllerOutpost_IsFabricationPending, ReturnValue) == 0x000000, "Member 'FortPlayerControllerOutpost_IsFabricationPending::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerControllerOutpost.IsOutpostOwner
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerControllerOutpost_IsOutpostOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerControllerOutpost_IsOutpostOwner) == 0x000001, "Wrong alignment on FortPlayerControllerOutpost_IsOutpostOwner");
static_assert(sizeof(FortPlayerControllerOutpost_IsOutpostOwner) == 0x000001, "Wrong size on FortPlayerControllerOutpost_IsOutpostOwner");
static_assert(offsetof(FortPlayerControllerOutpost_IsOutpostOwner, ReturnValue) == 0x000000, "Member 'FortPlayerControllerOutpost_IsOutpostOwner::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.CyclePartBP
// 0x0003 (0x0003 - 0x0000)
struct FortPlayerMannequin_CyclePartBP final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNextPart;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerMannequin_CyclePartBP) == 0x000001, "Wrong alignment on FortPlayerMannequin_CyclePartBP");
static_assert(sizeof(FortPlayerMannequin_CyclePartBP) == 0x000003, "Wrong size on FortPlayerMannequin_CyclePartBP");
static_assert(offsetof(FortPlayerMannequin_CyclePartBP, Part) == 0x000000, "Member 'FortPlayerMannequin_CyclePartBP::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerMannequin_CyclePartBP, bNextPart) == 0x000001, "Member 'FortPlayerMannequin_CyclePartBP::bNextPart' has a wrong offset!");
static_assert(offsetof(FortPlayerMannequin_CyclePartBP, ReturnValue) == 0x000002, "Member 'FortPlayerMannequin_CyclePartBP::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.RemovePart
// 0x0002 (0x0002 - 0x0000)
struct FortPlayerMannequin_RemovePart final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerMannequin_RemovePart) == 0x000001, "Wrong alignment on FortPlayerMannequin_RemovePart");
static_assert(sizeof(FortPlayerMannequin_RemovePart) == 0x000002, "Wrong size on FortPlayerMannequin_RemovePart");
static_assert(offsetof(FortPlayerMannequin_RemovePart, Part) == 0x000000, "Member 'FortPlayerMannequin_RemovePart::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerMannequin_RemovePart, ReturnValue) == 0x000001, "Member 'FortPlayerMannequin_RemovePart::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.SetPart
// 0x000C (0x000C - 0x0000)
struct FortPlayerMannequin_SetPart final
{
public:
	EFortCustomPartType                           Part;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomCharacterPart*                   PartAsset;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerMannequin_SetPart) == 0x000004, "Wrong alignment on FortPlayerMannequin_SetPart");
static_assert(sizeof(FortPlayerMannequin_SetPart) == 0x00000C, "Wrong size on FortPlayerMannequin_SetPart");
static_assert(offsetof(FortPlayerMannequin_SetPart, Part) == 0x000000, "Member 'FortPlayerMannequin_SetPart::Part' has a wrong offset!");
static_assert(offsetof(FortPlayerMannequin_SetPart, PartAsset) == 0x000004, "Member 'FortPlayerMannequin_SetPart::PartAsset' has a wrong offset!");
static_assert(offsetof(FortPlayerMannequin_SetPart, ReturnValue) == 0x000008, "Member 'FortPlayerMannequin_SetPart::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.SetSkeletalMesh
// 0x0004 (0x0004 - 0x0000)
struct FortPlayerMannequin_SetSkeletalMesh final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerMannequin_SetSkeletalMesh) == 0x000004, "Wrong alignment on FortPlayerMannequin_SetSkeletalMesh");
static_assert(sizeof(FortPlayerMannequin_SetSkeletalMesh) == 0x000004, "Wrong size on FortPlayerMannequin_SetSkeletalMesh");
static_assert(offsetof(FortPlayerMannequin_SetSkeletalMesh, SkeletalMesh) == 0x000000, "Member 'FortPlayerMannequin_SetSkeletalMesh::SkeletalMesh' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.SetWeaponSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct FortPlayerMannequin_SetWeaponSkeletalMesh final
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortPlayerMannequin_SetWeaponSkeletalMesh) == 0x000004, "Wrong alignment on FortPlayerMannequin_SetWeaponSkeletalMesh");
static_assert(sizeof(FortPlayerMannequin_SetWeaponSkeletalMesh) == 0x000008, "Wrong size on FortPlayerMannequin_SetWeaponSkeletalMesh");
static_assert(offsetof(FortPlayerMannequin_SetWeaponSkeletalMesh, SkeletalMesh) == 0x000000, "Member 'FortPlayerMannequin_SetWeaponSkeletalMesh::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FortPlayerMannequin_SetWeaponSkeletalMesh, ReturnValue) == 0x000004, "Member 'FortPlayerMannequin_SetWeaponSkeletalMesh::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortPlayerMannequin.GetGender
// 0x0001 (0x0001 - 0x0000)
struct FortPlayerMannequin_GetGender final
{
public:
	EFortCustomGender                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortPlayerMannequin_GetGender) == 0x000001, "Wrong alignment on FortPlayerMannequin_GetGender");
static_assert(sizeof(FortPlayerMannequin_GetGender) == 0x000001, "Wrong size on FortPlayerMannequin_GetGender");
static_assert(offsetof(FortPlayerMannequin_GetGender, ReturnValue) == 0x000000, "Member 'FortPlayerMannequin_GetGender::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestCategory.HasUnseenQuests
// 0x0001 (0x0001 - 0x0000)
struct FortQuestCategory_HasUnseenQuests final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestCategory_HasUnseenQuests) == 0x000001, "Wrong alignment on FortQuestCategory_HasUnseenQuests");
static_assert(sizeof(FortQuestCategory_HasUnseenQuests) == 0x000001, "Wrong size on FortQuestCategory_HasUnseenQuests");
static_assert(offsetof(FortQuestCategory_HasUnseenQuests, ReturnValue) == 0x000000, "Member 'FortQuestCategory_HasUnseenQuests::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.ClaimQuestReward
// 0x0004 (0x0004 - 0x0000)
struct FortQuestManager_ClaimQuestReward final
{
public:
	const class UFortQuestItem*                   Quest;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_ClaimQuestReward) == 0x000004, "Wrong alignment on FortQuestManager_ClaimQuestReward");
static_assert(sizeof(FortQuestManager_ClaimQuestReward) == 0x000004, "Wrong size on FortQuestManager_ClaimQuestReward");
static_assert(offsetof(FortQuestManager_ClaimQuestReward, Quest) == 0x000000, "Member 'FortQuestManager_ClaimQuestReward::Quest' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetCurrentQuestsCategories
// 0x000C (0x000C - 0x0000)
struct FortQuestManager_GetCurrentQuestsCategories final
{
public:
	TArray<class UFortQuestCategory*>             Categories;                                        // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetCurrentQuestsCategories) == 0x000004, "Wrong alignment on FortQuestManager_GetCurrentQuestsCategories");
static_assert(sizeof(FortQuestManager_GetCurrentQuestsCategories) == 0x00000C, "Wrong size on FortQuestManager_GetCurrentQuestsCategories");
static_assert(offsetof(FortQuestManager_GetCurrentQuestsCategories, Categories) == 0x000000, "Member 'FortQuestManager_GetCurrentQuestsCategories::Categories' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetQuestWithDefinition
// 0x0008 (0x0008 - 0x0000)
struct FortQuestManager_GetQuestWithDefinition final
{
public:
	const class UFortQuestItemDefinition*         Definition;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortQuestItem*                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetQuestWithDefinition) == 0x000004, "Wrong alignment on FortQuestManager_GetQuestWithDefinition");
static_assert(sizeof(FortQuestManager_GetQuestWithDefinition) == 0x000008, "Wrong size on FortQuestManager_GetQuestWithDefinition");
static_assert(offsetof(FortQuestManager_GetQuestWithDefinition, Definition) == 0x000000, "Member 'FortQuestManager_GetQuestWithDefinition::Definition' has a wrong offset!");
static_assert(offsetof(FortQuestManager_GetQuestWithDefinition, ReturnValue) == 0x000004, "Member 'FortQuestManager_GetQuestWithDefinition::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetRemainingDailyQuestRerolls
// 0x0004 (0x0004 - 0x0000)
struct FortQuestManager_GetRemainingDailyQuestRerolls final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetRemainingDailyQuestRerolls) == 0x000004, "Wrong alignment on FortQuestManager_GetRemainingDailyQuestRerolls");
static_assert(sizeof(FortQuestManager_GetRemainingDailyQuestRerolls) == 0x000004, "Wrong size on FortQuestManager_GetRemainingDailyQuestRerolls");
static_assert(offsetof(FortQuestManager_GetRemainingDailyQuestRerolls, ReturnValue) == 0x000000, "Member 'FortQuestManager_GetRemainingDailyQuestRerolls::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.GetSourceAndContextTags
// 0x0030 (0x0030 - 0x0000)
struct FortQuestManager_GetSourceAndContextTags final
{
public:
	struct FGameplayTagContainer                  OutSourceTags;                                     // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  OutContextTags;                                    // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_GetSourceAndContextTags) == 0x000004, "Wrong alignment on FortQuestManager_GetSourceAndContextTags");
static_assert(sizeof(FortQuestManager_GetSourceAndContextTags) == 0x000030, "Wrong size on FortQuestManager_GetSourceAndContextTags");
static_assert(offsetof(FortQuestManager_GetSourceAndContextTags, OutSourceTags) == 0x000000, "Member 'FortQuestManager_GetSourceAndContextTags::OutSourceTags' has a wrong offset!");
static_assert(offsetof(FortQuestManager_GetSourceAndContextTags, OutContextTags) == 0x000018, "Member 'FortQuestManager_GetSourceAndContextTags::OutContextTags' has a wrong offset!");

// Function FortniteGame.FortQuestManager.HasCompletedObjective
// 0x0014 (0x0014 - 0x0000)
struct FortQuestManager_HasCompletedObjective final
{
public:
	const class UFortQuestItemDefinition*         Definition;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0004(0x000C)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestManager_HasCompletedObjective) == 0x000004, "Wrong alignment on FortQuestManager_HasCompletedObjective");
static_assert(sizeof(FortQuestManager_HasCompletedObjective) == 0x000014, "Wrong size on FortQuestManager_HasCompletedObjective");
static_assert(offsetof(FortQuestManager_HasCompletedObjective, Definition) == 0x000000, "Member 'FortQuestManager_HasCompletedObjective::Definition' has a wrong offset!");
static_assert(offsetof(FortQuestManager_HasCompletedObjective, ObjectiveStatHandle) == 0x000004, "Member 'FortQuestManager_HasCompletedObjective::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FortQuestManager_HasCompletedObjective, ReturnValue) == 0x000010, "Member 'FortQuestManager_HasCompletedObjective::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.HasCompletedQuest
// 0x0008 (0x0008 - 0x0000)
struct FortQuestManager_HasCompletedQuest final
{
public:
	const class UFortQuestItemDefinition*         Definition;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortQuestManager_HasCompletedQuest) == 0x000004, "Wrong alignment on FortQuestManager_HasCompletedQuest");
static_assert(sizeof(FortQuestManager_HasCompletedQuest) == 0x000008, "Wrong size on FortQuestManager_HasCompletedQuest");
static_assert(offsetof(FortQuestManager_HasCompletedQuest, Definition) == 0x000000, "Member 'FortQuestManager_HasCompletedQuest::Definition' has a wrong offset!");
static_assert(offsetof(FortQuestManager_HasCompletedQuest, ReturnValue) == 0x000004, "Member 'FortQuestManager_HasCompletedQuest::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.HasUnseenQuests
// 0x0001 (0x0001 - 0x0000)
struct FortQuestManager_HasUnseenQuests final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_HasUnseenQuests) == 0x000001, "Wrong alignment on FortQuestManager_HasUnseenQuests");
static_assert(sizeof(FortQuestManager_HasUnseenQuests) == 0x000001, "Wrong size on FortQuestManager_HasUnseenQuests");
static_assert(offsetof(FortQuestManager_HasUnseenQuests, ReturnValue) == 0x000000, "Member 'FortQuestManager_HasUnseenQuests::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortQuestManager.MarkQuestSeen
// 0x0004 (0x0004 - 0x0000)
struct FortQuestManager_MarkQuestSeen final
{
public:
	class UFortQuestItem*                         Quest;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_MarkQuestSeen) == 0x000004, "Wrong alignment on FortQuestManager_MarkQuestSeen");
static_assert(sizeof(FortQuestManager_MarkQuestSeen) == 0x000004, "Wrong size on FortQuestManager_MarkQuestSeen");
static_assert(offsetof(FortQuestManager_MarkQuestSeen, Quest) == 0x000000, "Member 'FortQuestManager_MarkQuestSeen::Quest' has a wrong offset!");

// Function FortniteGame.FortQuestManager.RerollDailyQuest
// 0x0004 (0x0004 - 0x0000)
struct FortQuestManager_RerollDailyQuest final
{
public:
	const class UFortQuestItem*                   QuestToDiscard;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortQuestManager_RerollDailyQuest) == 0x000004, "Wrong alignment on FortQuestManager_RerollDailyQuest");
static_assert(sizeof(FortQuestManager_RerollDailyQuest) == 0x000004, "Wrong size on FortQuestManager_RerollDailyQuest");
static_assert(offsetof(FortQuestManager_RerollDailyQuest, QuestToDiscard) == 0x000000, "Member 'FortQuestManager_RerollDailyQuest::QuestToDiscard' has a wrong offset!");

// Function FortniteGame.FortRarityData.BPGetRarityData
// 0x0074 (0x0074 - 0x0000)
struct FortRarityData_BPGetRarityData final
{
public:
	EFortRarity                                   Rarity;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortRarityItemData                    ReturnValue;                                       // 0x0004(0x0070)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortRarityData_BPGetRarityData) == 0x000004, "Wrong alignment on FortRarityData_BPGetRarityData");
static_assert(sizeof(FortRarityData_BPGetRarityData) == 0x000074, "Wrong size on FortRarityData_BPGetRarityData");
static_assert(offsetof(FortRarityData_BPGetRarityData, Rarity) == 0x000000, "Member 'FortRarityData_BPGetRarityData::Rarity' has a wrong offset!");
static_assert(offsetof(FortRarityData_BPGetRarityData, ReturnValue) == 0x000004, "Member 'FortRarityData_BPGetRarityData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSaveFileBuildingInstructionsHandler.AreBuildingsLoaded
// 0x0001 (0x0001 - 0x0000)
struct FortSaveFileBuildingInstructionsHandler_AreBuildingsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSaveFileBuildingInstructionsHandler_AreBuildingsLoaded) == 0x000001, "Wrong alignment on FortSaveFileBuildingInstructionsHandler_AreBuildingsLoaded");
static_assert(sizeof(FortSaveFileBuildingInstructionsHandler_AreBuildingsLoaded) == 0x000001, "Wrong size on FortSaveFileBuildingInstructionsHandler_AreBuildingsLoaded");
static_assert(offsetof(FortSaveFileBuildingInstructionsHandler_AreBuildingsLoaded, ReturnValue) == 0x000000, "Member 'FortSaveFileBuildingInstructionsHandler_AreBuildingsLoaded::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSaveFileBuildingInstructionsHandler.GetAllSpawnedBuildings
// 0x000C (0x000C - 0x0000)
struct FortSaveFileBuildingInstructionsHandler_GetAllSpawnedBuildings final
{
public:
	TArray<class ABuildingActor*>                 ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSaveFileBuildingInstructionsHandler_GetAllSpawnedBuildings) == 0x000004, "Wrong alignment on FortSaveFileBuildingInstructionsHandler_GetAllSpawnedBuildings");
static_assert(sizeof(FortSaveFileBuildingInstructionsHandler_GetAllSpawnedBuildings) == 0x00000C, "Wrong size on FortSaveFileBuildingInstructionsHandler_GetAllSpawnedBuildings");
static_assert(offsetof(FortSaveFileBuildingInstructionsHandler_GetAllSpawnedBuildings, ReturnValue) == 0x000000, "Member 'FortSaveFileBuildingInstructionsHandler_GetAllSpawnedBuildings::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSaveFileBuildingInstructionsHandler.LoadBuildings
// 0x0004 (0x0004 - 0x0000)
struct FortSaveFileBuildingInstructionsHandler_LoadBuildings final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSaveFileBuildingInstructionsHandler_LoadBuildings) == 0x000004, "Wrong alignment on FortSaveFileBuildingInstructionsHandler_LoadBuildings");
static_assert(sizeof(FortSaveFileBuildingInstructionsHandler_LoadBuildings) == 0x000004, "Wrong size on FortSaveFileBuildingInstructionsHandler_LoadBuildings");
static_assert(offsetof(FortSaveFileBuildingInstructionsHandler_LoadBuildings, FortPC) == 0x000000, "Member 'FortSaveFileBuildingInstructionsHandler_LoadBuildings::FortPC' has a wrong offset!");

// Function FortniteGame.FortSaveFileBuildingInstructionsHandler.ResetBuildings
// 0x0008 (0x0008 - 0x0000)
struct FortSaveFileBuildingInstructionsHandler_ResetBuildings final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSaveFileBuildingInstructionsHandler_ResetBuildings) == 0x000004, "Wrong alignment on FortSaveFileBuildingInstructionsHandler_ResetBuildings");
static_assert(sizeof(FortSaveFileBuildingInstructionsHandler_ResetBuildings) == 0x000008, "Wrong size on FortSaveFileBuildingInstructionsHandler_ResetBuildings");
static_assert(offsetof(FortSaveFileBuildingInstructionsHandler_ResetBuildings, FortPC) == 0x000000, "Member 'FortSaveFileBuildingInstructionsHandler_ResetBuildings::FortPC' has a wrong offset!");
static_assert(offsetof(FortSaveFileBuildingInstructionsHandler_ResetBuildings, ReturnValue) == 0x000004, "Member 'FortSaveFileBuildingInstructionsHandler_ResetBuildings::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSaveFileBuildingInstructionsHandler.SaveBuildings
// 0x0008 (0x0008 - 0x0000)
struct FortSaveFileBuildingInstructionsHandler_SaveBuildings final
{
public:
	class AFortPlayerController*                  FortPC;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortSaveFileBuildingInstructionsHandler_SaveBuildings) == 0x000004, "Wrong alignment on FortSaveFileBuildingInstructionsHandler_SaveBuildings");
static_assert(sizeof(FortSaveFileBuildingInstructionsHandler_SaveBuildings) == 0x000008, "Wrong size on FortSaveFileBuildingInstructionsHandler_SaveBuildings");
static_assert(offsetof(FortSaveFileBuildingInstructionsHandler_SaveBuildings, FortPC) == 0x000000, "Member 'FortSaveFileBuildingInstructionsHandler_SaveBuildings::FortPC' has a wrong offset!");
static_assert(offsetof(FortSaveFileBuildingInstructionsHandler_SaveBuildings, ReturnValue) == 0x000004, "Member 'FortSaveFileBuildingInstructionsHandler_SaveBuildings::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortScriptedAction.Execute
// 0x0018 (0x0018 - 0x0000)
struct FortScriptedAction_Execute final
{
public:
	struct FFortScriptedActionParams              Params_0;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedAction_Execute) == 0x000004, "Wrong alignment on FortScriptedAction_Execute");
static_assert(sizeof(FortScriptedAction_Execute) == 0x000018, "Wrong size on FortScriptedAction_Execute");
static_assert(offsetof(FortScriptedAction_Execute, Params_0) == 0x000000, "Member 'FortScriptedAction_Execute::Params_0' has a wrong offset!");

// Function FortniteGame.FortScriptedAction.GetParams
// 0x0018 (0x0018 - 0x0000)
struct FortScriptedAction_GetParams final
{
public:
	struct FFortScriptedActionParams              Params_0;                                          // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedAction_GetParams) == 0x000004, "Wrong alignment on FortScriptedAction_GetParams");
static_assert(sizeof(FortScriptedAction_GetParams) == 0x000018, "Wrong size on FortScriptedAction_GetParams");
static_assert(offsetof(FortScriptedAction_GetParams, Params_0) == 0x000000, "Member 'FortScriptedAction_GetParams::Params_0' has a wrong offset!");

// Function FortniteGame.FortScriptedAction.CanExecute
// 0x001C (0x001C - 0x0000)
struct FortScriptedAction_CanExecute final
{
public:
	struct FFortScriptedActionParams              Params_0;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortScriptedAction_CanExecute) == 0x000004, "Wrong alignment on FortScriptedAction_CanExecute");
static_assert(sizeof(FortScriptedAction_CanExecute) == 0x00001C, "Wrong size on FortScriptedAction_CanExecute");
static_assert(offsetof(FortScriptedAction_CanExecute, Params_0) == 0x000000, "Member 'FortScriptedAction_CanExecute::Params_0' has a wrong offset!");
static_assert(offsetof(FortScriptedAction_CanExecute, ReturnValue) == 0x000018, "Member 'FortScriptedAction_CanExecute::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortScriptedActionManager.HandleClientEvent_Undefined
// 0x0020 (0x0020 - 0x0000)
struct FortScriptedActionManager_HandleClientEvent_Undefined final
{
public:
	class UObject*                                EventSource;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortClientEvent                       ClientEvent;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortScriptedActionManager_HandleClientEvent_Undefined) == 0x000004, "Wrong alignment on FortScriptedActionManager_HandleClientEvent_Undefined");
static_assert(sizeof(FortScriptedActionManager_HandleClientEvent_Undefined) == 0x000020, "Wrong size on FortScriptedActionManager_HandleClientEvent_Undefined");
static_assert(offsetof(FortScriptedActionManager_HandleClientEvent_Undefined, EventSource) == 0x000000, "Member 'FortScriptedActionManager_HandleClientEvent_Undefined::EventSource' has a wrong offset!");
static_assert(offsetof(FortScriptedActionManager_HandleClientEvent_Undefined, EventFocus) == 0x000004, "Member 'FortScriptedActionManager_HandleClientEvent_Undefined::EventFocus' has a wrong offset!");
static_assert(offsetof(FortScriptedActionManager_HandleClientEvent_Undefined, ClientEvent) == 0x000008, "Member 'FortScriptedActionManager_HandleClientEvent_Undefined::ClientEvent' has a wrong offset!");

// Function FortniteGame.FortSocialItem.GetBasicInfo
// 0x00FC (0x00FC - 0x0000)
struct FortSocialItem_GetBasicInfo final
{
public:
	struct FFortSocialItemBasicData               ReturnValue;                                       // 0x0000(0x00FC)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialItem_GetBasicInfo) == 0x000004, "Wrong alignment on FortSocialItem_GetBasicInfo");
static_assert(sizeof(FortSocialItem_GetBasicInfo) == 0x0000FC, "Wrong size on FortSocialItem_GetBasicInfo");
static_assert(offsetof(FortSocialItem_GetBasicInfo, ReturnValue) == 0x000000, "Member 'FortSocialItem_GetBasicInfo::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSocialItem.GetDisplayName
// 0x000C (0x000C - 0x0000)
struct FortSocialItem_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialItem_GetDisplayName) == 0x000004, "Wrong alignment on FortSocialItem_GetDisplayName");
static_assert(sizeof(FortSocialItem_GetDisplayName) == 0x00000C, "Wrong size on FortSocialItem_GetDisplayName");
static_assert(offsetof(FortSocialItem_GetDisplayName, ReturnValue) == 0x000000, "Member 'FortSocialItem_GetDisplayName::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSocialItem.GetLocation
// 0x000C (0x000C - 0x0000)
struct FortSocialItem_GetLocation final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialItem_GetLocation) == 0x000004, "Wrong alignment on FortSocialItem_GetLocation");
static_assert(sizeof(FortSocialItem_GetLocation) == 0x00000C, "Wrong size on FortSocialItem_GetLocation");
static_assert(offsetof(FortSocialItem_GetLocation, ReturnValue) == 0x000000, "Member 'FortSocialItem_GetLocation::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSocialItem.GetPresenceStatus
// 0x0001 (0x0001 - 0x0000)
struct FortSocialItem_GetPresenceStatus final
{
public:
	EFortSocialItemPresenceStatus                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialItem_GetPresenceStatus) == 0x000001, "Wrong alignment on FortSocialItem_GetPresenceStatus");
static_assert(sizeof(FortSocialItem_GetPresenceStatus) == 0x000001, "Wrong size on FortSocialItem_GetPresenceStatus");
static_assert(offsetof(FortSocialItem_GetPresenceStatus, ReturnValue) == 0x000000, "Member 'FortSocialItem_GetPresenceStatus::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortSocialItem.GetUniquePlayerId
// 0x0008 (0x0008 - 0x0000)
struct FortSocialItem_GetUniquePlayerId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortSocialItem_GetUniquePlayerId) == 0x000004, "Wrong alignment on FortSocialItem_GetUniquePlayerId");
static_assert(sizeof(FortSocialItem_GetUniquePlayerId) == 0x000008, "Wrong size on FortSocialItem_GetUniquePlayerId");
static_assert(offsetof(FortSocialItem_GetUniquePlayerId, ReturnValue) == 0x000000, "Member 'FortSocialItem_GetUniquePlayerId::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTeamInfo.GetTeamExperience
// 0x0004 (0x0004 - 0x0000)
struct FortTeamInfo_GetTeamExperience final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamInfo_GetTeamExperience) == 0x000004, "Wrong alignment on FortTeamInfo_GetTeamExperience");
static_assert(sizeof(FortTeamInfo_GetTeamExperience) == 0x000004, "Wrong size on FortTeamInfo_GetTeamExperience");
static_assert(offsetof(FortTeamInfo_GetTeamExperience, ReturnValue) == 0x000000, "Member 'FortTeamInfo_GetTeamExperience::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTeamInfo.GetTeamLevel
// 0x0004 (0x0004 - 0x0000)
struct FortTeamInfo_GetTeamLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamInfo_GetTeamLevel) == 0x000004, "Wrong alignment on FortTeamInfo_GetTeamLevel");
static_assert(sizeof(FortTeamInfo_GetTeamLevel) == 0x000004, "Wrong size on FortTeamInfo_GetTeamLevel");
static_assert(offsetof(FortTeamInfo_GetTeamLevel, ReturnValue) == 0x000000, "Member 'FortTeamInfo_GetTeamLevel::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTeamInfoPvPBaseDestruction.GetStrategicBuildingActor
// 0x0008 (0x0008 - 0x0000)
struct FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor final
{
public:
	struct FTeamStrategicBuildingHandle           Handle;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AStrategicBuildingActor*                ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor) == 0x000004, "Wrong alignment on FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor");
static_assert(sizeof(FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor) == 0x000008, "Wrong size on FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor");
static_assert(offsetof(FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor, Handle) == 0x000000, "Member 'FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor::Handle' has a wrong offset!");
static_assert(offsetof(FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor, ReturnValue) == 0x000004, "Member 'FortTeamInfoPvPBaseDestruction_GetStrategicBuildingActor::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTeamInfoPvPBaseDestruction.GetTeamCornerstone
// 0x0004 (0x0004 - 0x0000)
struct FortTeamInfoPvPBaseDestruction_GetTeamCornerstone final
{
public:
	class AFortPvPBaseCornerstone*                ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTeamInfoPvPBaseDestruction_GetTeamCornerstone) == 0x000004, "Wrong alignment on FortTeamInfoPvPBaseDestruction_GetTeamCornerstone");
static_assert(sizeof(FortTeamInfoPvPBaseDestruction_GetTeamCornerstone) == 0x000004, "Wrong size on FortTeamInfoPvPBaseDestruction_GetTeamCornerstone");
static_assert(offsetof(FortTeamInfoPvPBaseDestruction_GetTeamCornerstone, ReturnValue) == 0x000000, "Member 'FortTeamInfoPvPBaseDestruction_GetTeamCornerstone::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.OnDeselectWrapper
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_OnDeselectWrapper final
{
public:
	bool                                          bIsGameSessionOwner;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_OnDeselectWrapper) == 0x000001, "Wrong alignment on FortTheaterMapTile_OnDeselectWrapper");
static_assert(sizeof(FortTheaterMapTile_OnDeselectWrapper) == 0x000001, "Wrong size on FortTheaterMapTile_OnDeselectWrapper");
static_assert(offsetof(FortTheaterMapTile_OnDeselectWrapper, bIsGameSessionOwner) == 0x000000, "Member 'FortTheaterMapTile_OnDeselectWrapper::bIsGameSessionOwner' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.OnSelectWrapper
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_OnSelectWrapper final
{
public:
	bool                                          bIsGameSessionOwner;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_OnSelectWrapper) == 0x000001, "Wrong alignment on FortTheaterMapTile_OnSelectWrapper");
static_assert(sizeof(FortTheaterMapTile_OnSelectWrapper) == 0x000001, "Wrong size on FortTheaterMapTile_OnSelectWrapper");
static_assert(offsetof(FortTheaterMapTile_OnSelectWrapper, bIsGameSessionOwner) == 0x000000, "Member 'FortTheaterMapTile_OnSelectWrapper::bIsGameSessionOwner' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.GetZoneDifficulty
// 0x0048 (0x0048 - 0x0000)
struct FortTheaterMapTile_GetZoneDifficulty final
{
public:
	struct FGameDifficultyInfo                    ReturnValue;                                       // 0x0000(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_GetZoneDifficulty) == 0x000004, "Wrong alignment on FortTheaterMapTile_GetZoneDifficulty");
static_assert(sizeof(FortTheaterMapTile_GetZoneDifficulty) == 0x000048, "Wrong size on FortTheaterMapTile_GetZoneDifficulty");
static_assert(offsetof(FortTheaterMapTile_GetZoneDifficulty, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_GetZoneDifficulty::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.HasValidMissionData
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_HasValidMissionData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_HasValidMissionData) == 0x000001, "Wrong alignment on FortTheaterMapTile_HasValidMissionData");
static_assert(sizeof(FortTheaterMapTile_HasValidMissionData) == 0x000001, "Wrong size on FortTheaterMapTile_HasValidMissionData");
static_assert(offsetof(FortTheaterMapTile_HasValidMissionData, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_HasValidMissionData::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.IsTileHidden
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_IsTileHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_IsTileHidden) == 0x000001, "Wrong alignment on FortTheaterMapTile_IsTileHidden");
static_assert(sizeof(FortTheaterMapTile_IsTileHidden) == 0x000001, "Wrong size on FortTheaterMapTile_IsTileHidden");
static_assert(offsetof(FortTheaterMapTile_IsTileHidden, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_IsTileHidden::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.IsTileLocked
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_IsTileLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_IsTileLocked) == 0x000001, "Wrong alignment on FortTheaterMapTile_IsTileLocked");
static_assert(sizeof(FortTheaterMapTile_IsTileLocked) == 0x000001, "Wrong size on FortTheaterMapTile_IsTileLocked");
static_assert(offsetof(FortTheaterMapTile_IsTileLocked, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_IsTileLocked::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.IsTilePlayable
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_IsTilePlayable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_IsTilePlayable) == 0x000001, "Wrong alignment on FortTheaterMapTile_IsTilePlayable");
static_assert(sizeof(FortTheaterMapTile_IsTilePlayable) == 0x000001, "Wrong size on FortTheaterMapTile_IsTilePlayable");
static_assert(offsetof(FortTheaterMapTile_IsTilePlayable, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_IsTilePlayable::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTheaterMapTile.IsTileSelectable
// 0x0001 (0x0001 - 0x0000)
struct FortTheaterMapTile_IsTileSelectable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTheaterMapTile_IsTileSelectable) == 0x000001, "Wrong alignment on FortTheaterMapTile_IsTileSelectable");
static_assert(sizeof(FortTheaterMapTile_IsTileSelectable) == 0x000001, "Wrong size on FortTheaterMapTile_IsTileSelectable");
static_assert(offsetof(FortTheaterMapTile_IsTileSelectable, ReturnValue) == 0x000000, "Member 'FortTheaterMapTile_IsTileSelectable::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortThreatParticleActor.OnThreatCloudsChanged
// 0x000C (0x000C - 0x0000)
struct FortThreatParticleActor_OnThreatCloudsChanged final
{
public:
	TArray<struct FThreatLocationInfo>            ThreatLocationInfo;                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatParticleActor_OnThreatCloudsChanged) == 0x000004, "Wrong alignment on FortThreatParticleActor_OnThreatCloudsChanged");
static_assert(sizeof(FortThreatParticleActor_OnThreatCloudsChanged) == 0x00000C, "Wrong size on FortThreatParticleActor_OnThreatCloudsChanged");
static_assert(offsetof(FortThreatParticleActor_OnThreatCloudsChanged, ThreatLocationInfo) == 0x000000, "Member 'FortThreatParticleActor_OnThreatCloudsChanged::ThreatLocationInfo' has a wrong offset!");

// Function FortniteGame.FortThreatParticleActor.GetThreatClouds
// 0x000C (0x000C - 0x0000)
struct FortThreatParticleActor_GetThreatClouds final
{
public:
	TArray<struct FThreatLocationInfo>            ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortThreatParticleActor_GetThreatClouds) == 0x000004, "Wrong alignment on FortThreatParticleActor_GetThreatClouds");
static_assert(sizeof(FortThreatParticleActor_GetThreatClouds) == 0x00000C, "Wrong size on FortThreatParticleActor_GetThreatClouds");
static_assert(offsetof(FortThreatParticleActor_GetThreatClouds, ReturnValue) == 0x000000, "Member 'FortThreatParticleActor_GetThreatClouds::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbilityTooltip.GetTextForToken
// 0x0028 (0x0028 - 0x0000)
struct FortGameplayAbilityTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0018(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbilityTooltip_GetTextForToken) == 0x000004, "Wrong alignment on FortGameplayAbilityTooltip_GetTextForToken");
static_assert(sizeof(FortGameplayAbilityTooltip_GetTextForToken) == 0x000028, "Wrong size on FortGameplayAbilityTooltip_GetTextForToken");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortGameplayAbilityTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForToken, Tag) == 0x000004, "Member 'FortGameplayAbilityTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForToken, Context) == 0x00000C, "Member 'FortGameplayAbilityTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForToken, Token) == 0x000010, "Member 'FortGameplayAbilityTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForToken, OutText) == 0x000018, "Member 'FortGameplayAbilityTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForToken, ReturnValue) == 0x000024, "Member 'FortGameplayAbilityTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbilityTooltip.GetTextForTokenFromAbilitySpec
// 0x0074 (0x0074 - 0x0000)
struct FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec final
{
public:
	struct FGameplayAbilitySpec                   Spec;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0050(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x005C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0064(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec) == 0x000004, "Wrong alignment on FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec");
static_assert(sizeof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec) == 0x000074, "Wrong size on FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec, Spec) == 0x000000, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec::Spec' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec, Tag) == 0x000050, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec::Tag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec, Context) == 0x000058, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec::Context' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec, Token) == 0x00005C, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec::Token' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec, OutText) == 0x000064, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec::OutText' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec, ReturnValue) == 0x000070, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpec::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbilityTooltip.GetTextForTokenFromAbilitySpecInternal
// 0x0074 (0x0074 - 0x0000)
struct FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal final
{
public:
	struct FGameplayAbilitySpec                   Spec;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0050(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x005C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0064(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal) == 0x000004, "Wrong alignment on FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal");
static_assert(sizeof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal) == 0x000074, "Wrong size on FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal, Spec) == 0x000000, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal::Spec' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal, Tag) == 0x000050, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal::Tag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal, Context) == 0x000058, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal::Context' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal, Token) == 0x00005C, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal::Token' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal, OutText) == 0x000064, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal::OutText' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal, ReturnValue) == 0x000070, "Member 'FortGameplayAbilityTooltip_GetTextForTokenFromAbilitySpecInternal::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGameplayAbilityTooltip.GetTokenizedDescriptionText
// 0x0020 (0x0020 - 0x0000)
struct FortGameplayAbilityTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutDescription;                                    // 0x0010(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGameplayAbilityTooltip_GetTokenizedDescriptionText) == 0x000004, "Wrong alignment on FortGameplayAbilityTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortGameplayAbilityTooltip_GetTokenizedDescriptionText) == 0x000020, "Wrong size on FortGameplayAbilityTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortGameplayAbilityTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTokenizedDescriptionText, Tag) == 0x000004, "Member 'FortGameplayAbilityTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTokenizedDescriptionText, Context) == 0x00000C, "Member 'FortGameplayAbilityTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000010, "Member 'FortGameplayAbilityTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortGameplayAbilityTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x00001C, "Member 'FortGameplayAbilityTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGadgetItemDefinitionTooltip.GetTextForToken
// 0x0028 (0x0028 - 0x0000)
struct FortGadgetItemDefinitionTooltip_GetTextForToken final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Token;                                             // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0018(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGadgetItemDefinitionTooltip_GetTextForToken) == 0x000004, "Wrong alignment on FortGadgetItemDefinitionTooltip_GetTextForToken");
static_assert(sizeof(FortGadgetItemDefinitionTooltip_GetTextForToken) == 0x000028, "Wrong size on FortGadgetItemDefinitionTooltip_GetTextForToken");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTextForToken, ObjectToDescribe) == 0x000000, "Member 'FortGadgetItemDefinitionTooltip_GetTextForToken::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTextForToken, Tag) == 0x000004, "Member 'FortGadgetItemDefinitionTooltip_GetTextForToken::Tag' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTextForToken, Context) == 0x00000C, "Member 'FortGadgetItemDefinitionTooltip_GetTextForToken::Context' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTextForToken, Token) == 0x000010, "Member 'FortGadgetItemDefinitionTooltip_GetTextForToken::Token' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTextForToken, OutText) == 0x000018, "Member 'FortGadgetItemDefinitionTooltip_GetTextForToken::OutText' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTextForToken, ReturnValue) == 0x000024, "Member 'FortGadgetItemDefinitionTooltip_GetTextForToken::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortGadgetItemDefinitionTooltip.GetTokenizedDescriptionText
// 0x0020 (0x0020 - 0x0000)
struct FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText final
{
public:
	const class UObject*                          ObjectToDescribe;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFortTooltipContext*              Context;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutDescription;                                    // 0x0010(0x000C)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000004, "Wrong alignment on FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(sizeof(FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText) == 0x000020, "Wrong size on FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText, ObjectToDescribe) == 0x000000, "Member 'FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText::ObjectToDescribe' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText, Tag) == 0x000004, "Member 'FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText::Tag' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText, Context) == 0x00000C, "Member 'FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText::Context' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText, OutDescription) == 0x000010, "Member 'FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText::OutDescription' has a wrong offset!");
static_assert(offsetof(FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText, ReturnValue) == 0x00001C, "Member 'FortGadgetItemDefinitionTooltip_GetTokenizedDescriptionText::ReturnValue' has a wrong offset!");

// Function FortniteGame.FortTracerBase.Init
// 0x0018 (0x0018 - 0x0000)
struct FortTracerBase_Init final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTracerBase_Init) == 0x000004, "Wrong alignment on FortTracerBase_Init");
static_assert(sizeof(FortTracerBase_Init) == 0x000018, "Wrong size on FortTracerBase_Init");
static_assert(offsetof(FortTracerBase_Init, Start) == 0x000000, "Member 'FortTracerBase_Init::Start' has a wrong offset!");
static_assert(offsetof(FortTracerBase_Init, End) == 0x00000C, "Member 'FortTracerBase_Init::End' has a wrong offset!");

// Function FortniteGame.FortTracerBase.OnInitTracerDistance
// 0x0004 (0x0004 - 0x0000)
struct FortTracerBase_OnInitTracerDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortTracerBase_OnInitTracerDistance) == 0x000004, "Wrong alignment on FortTracerBase_OnInitTracerDistance");
static_assert(sizeof(FortTracerBase_OnInitTracerDistance) == 0x000004, "Wrong size on FortTracerBase_OnInitTracerDistance");
static_assert(offsetof(FortTracerBase_OnInitTracerDistance, Distance) == 0x000000, "Member 'FortTracerBase_OnInitTracerDistance::Distance' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapIcon
// 0x0004 (0x0004 - 0x0000)
struct FortMiniMapComponent_SetMiniMapIcon final
{
public:
	class UTexture2D*                             MiniMapIcon;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapIcon) == 0x000004, "Wrong alignment on FortMiniMapComponent_SetMiniMapIcon");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapIcon) == 0x000004, "Wrong size on FortMiniMapComponent_SetMiniMapIcon");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapIcon, MiniMapIcon) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapIcon::MiniMapIcon' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapIconColor
// 0x0010 (0x0010 - 0x0000)
struct FortMiniMapComponent_SetMiniMapIconColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapIconColor) == 0x000004, "Wrong alignment on FortMiniMapComponent_SetMiniMapIconColor");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapIconColor) == 0x000010, "Wrong size on FortMiniMapComponent_SetMiniMapIconColor");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapIconColor, InColor) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapIconColor::InColor' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapIconColorPulsesPerSecond
// 0x0004 (0x0004 - 0x0000)
struct FortMiniMapComponent_SetMiniMapIconColorPulsesPerSecond final
{
public:
	float                                         ColorPulsesPerSecond;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapIconColorPulsesPerSecond) == 0x000004, "Wrong alignment on FortMiniMapComponent_SetMiniMapIconColorPulsesPerSecond");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapIconColorPulsesPerSecond) == 0x000004, "Wrong size on FortMiniMapComponent_SetMiniMapIconColorPulsesPerSecond");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapIconColorPulsesPerSecond, ColorPulsesPerSecond) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapIconColorPulsesPerSecond::ColorPulsesPerSecond' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapIconPulseColor
// 0x0010 (0x0010 - 0x0000)
struct FortMiniMapComponent_SetMiniMapIconPulseColor final
{
public:
	struct FLinearColor                           PulseColor;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapIconPulseColor) == 0x000004, "Wrong alignment on FortMiniMapComponent_SetMiniMapIconPulseColor");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapIconPulseColor) == 0x000010, "Wrong size on FortMiniMapComponent_SetMiniMapIconPulseColor");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapIconPulseColor, PulseColor) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapIconPulseColor::PulseColor' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapIconSizePulsesPerSecond
// 0x0004 (0x0004 - 0x0000)
struct FortMiniMapComponent_SetMiniMapIconSizePulsesPerSecond final
{
public:
	float                                         SizePulsesPerSecond;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapIconSizePulsesPerSecond) == 0x000004, "Wrong alignment on FortMiniMapComponent_SetMiniMapIconSizePulsesPerSecond");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapIconSizePulsesPerSecond) == 0x000004, "Wrong size on FortMiniMapComponent_SetMiniMapIconSizePulsesPerSecond");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapIconSizePulsesPerSecond, SizePulsesPerSecond) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapIconSizePulsesPerSecond::SizePulsesPerSecond' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapIndicatorIsVisible
// 0x0001 (0x0001 - 0x0000)
struct FortMiniMapComponent_SetMiniMapIndicatorIsVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapIndicatorIsVisible) == 0x000001, "Wrong alignment on FortMiniMapComponent_SetMiniMapIndicatorIsVisible");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapIndicatorIsVisible) == 0x000001, "Wrong size on FortMiniMapComponent_SetMiniMapIndicatorIsVisible");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapIndicatorIsVisible, bVisible) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapIndicatorIsVisible::bVisible' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetMiniMapViewableDistance
// 0x0004 (0x0004 - 0x0000)
struct FortMiniMapComponent_SetMiniMapViewableDistance final
{
public:
	float                                         ViewDistance;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetMiniMapViewableDistance) == 0x000004, "Wrong alignment on FortMiniMapComponent_SetMiniMapViewableDistance");
static_assert(sizeof(FortMiniMapComponent_SetMiniMapViewableDistance) == 0x000004, "Wrong size on FortMiniMapComponent_SetMiniMapViewableDistance");
static_assert(offsetof(FortMiniMapComponent_SetMiniMapViewableDistance, ViewDistance) == 0x000000, "Member 'FortMiniMapComponent_SetMiniMapViewableDistance::ViewDistance' has a wrong offset!");

// Function FortniteGame.FortMiniMapComponent.SetupMiniMapComponent
// 0x002C (0x002C - 0x0000)
struct FortMiniMapComponent_SetupMiniMapComponent final
{
public:
	class UTexture2D*                             MiniMapIcon;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IconColor;                                         // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           PulseColor;                                        // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ColorPulsesPerSecond;                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizePulsesPerSecond;                               // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortMiniMapComponent_SetupMiniMapComponent) == 0x000004, "Wrong alignment on FortMiniMapComponent_SetupMiniMapComponent");
static_assert(sizeof(FortMiniMapComponent_SetupMiniMapComponent) == 0x00002C, "Wrong size on FortMiniMapComponent_SetupMiniMapComponent");
static_assert(offsetof(FortMiniMapComponent_SetupMiniMapComponent, MiniMapIcon) == 0x000000, "Member 'FortMiniMapComponent_SetupMiniMapComponent::MiniMapIcon' has a wrong offset!");
static_assert(offsetof(FortMiniMapComponent_SetupMiniMapComponent, IconColor) == 0x000004, "Member 'FortMiniMapComponent_SetupMiniMapComponent::IconColor' has a wrong offset!");
static_assert(offsetof(FortMiniMapComponent_SetupMiniMapComponent, PulseColor) == 0x000014, "Member 'FortMiniMapComponent_SetupMiniMapComponent::PulseColor' has a wrong offset!");
static_assert(offsetof(FortMiniMapComponent_SetupMiniMapComponent, ColorPulsesPerSecond) == 0x000024, "Member 'FortMiniMapComponent_SetupMiniMapComponent::ColorPulsesPerSecond' has a wrong offset!");
static_assert(offsetof(FortMiniMapComponent_SetupMiniMapComponent, SizePulsesPerSecond) == 0x000028, "Member 'FortMiniMapComponent_SetupMiniMapComponent::SizePulsesPerSecond' has a wrong offset!");

// Function FortniteGame.FortCustomizableAbilityDecoTool.BPOnEquip
// 0x0004 (0x0004 - 0x0000)
struct FortCustomizableAbilityDecoTool_BPOnEquip final
{
public:
	class AFortWeapon*                            OldWeapon;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCustomizableAbilityDecoTool_BPOnEquip) == 0x000004, "Wrong alignment on FortCustomizableAbilityDecoTool_BPOnEquip");
static_assert(sizeof(FortCustomizableAbilityDecoTool_BPOnEquip) == 0x000004, "Wrong size on FortCustomizableAbilityDecoTool_BPOnEquip");
static_assert(offsetof(FortCustomizableAbilityDecoTool_BPOnEquip, OldWeapon) == 0x000000, "Member 'FortCustomizableAbilityDecoTool_BPOnEquip::OldWeapon' has a wrong offset!");

// Function FortniteGame.FortCustomizableAbilityDecoTool.BPOnSetDecoObjectPreview
// 0x0004 (0x0004 - 0x0000)
struct FortCustomizableAbilityDecoTool_BPOnSetDecoObjectPreview final
{
public:
	class AFortDecoHelper*                        FortDecoHelper;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCustomizableAbilityDecoTool_BPOnSetDecoObjectPreview) == 0x000004, "Wrong alignment on FortCustomizableAbilityDecoTool_BPOnSetDecoObjectPreview");
static_assert(sizeof(FortCustomizableAbilityDecoTool_BPOnSetDecoObjectPreview) == 0x000004, "Wrong size on FortCustomizableAbilityDecoTool_BPOnSetDecoObjectPreview");
static_assert(offsetof(FortCustomizableAbilityDecoTool_BPOnSetDecoObjectPreview, FortDecoHelper) == 0x000000, "Member 'FortCustomizableAbilityDecoTool_BPOnSetDecoObjectPreview::FortDecoHelper' has a wrong offset!");

// Function FortniteGame.FortCustomizableAbilityDecoTool.BPPressSecondaryFire
// 0x0004 (0x0004 - 0x0000)
struct FortCustomizableAbilityDecoTool_BPPressSecondaryFire final
{
public:
	class AFortDecoHelper*                        FortDecoHelper;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCustomizableAbilityDecoTool_BPPressSecondaryFire) == 0x000004, "Wrong alignment on FortCustomizableAbilityDecoTool_BPPressSecondaryFire");
static_assert(sizeof(FortCustomizableAbilityDecoTool_BPPressSecondaryFire) == 0x000004, "Wrong size on FortCustomizableAbilityDecoTool_BPPressSecondaryFire");
static_assert(offsetof(FortCustomizableAbilityDecoTool_BPPressSecondaryFire, FortDecoHelper) == 0x000000, "Member 'FortCustomizableAbilityDecoTool_BPPressSecondaryFire::FortDecoHelper' has a wrong offset!");

// Function FortniteGame.FortCustomizableAbilityDecoTool.BPPressTrigger
// 0x0004 (0x0004 - 0x0000)
struct FortCustomizableAbilityDecoTool_BPPressTrigger final
{
public:
	class AFortDecoHelper*                        FortDecoHelper;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCustomizableAbilityDecoTool_BPPressTrigger) == 0x000004, "Wrong alignment on FortCustomizableAbilityDecoTool_BPPressTrigger");
static_assert(sizeof(FortCustomizableAbilityDecoTool_BPPressTrigger) == 0x000004, "Wrong size on FortCustomizableAbilityDecoTool_BPPressTrigger");
static_assert(offsetof(FortCustomizableAbilityDecoTool_BPPressTrigger, FortDecoHelper) == 0x000000, "Member 'FortCustomizableAbilityDecoTool_BPPressTrigger::FortDecoHelper' has a wrong offset!");

// Function FortniteGame.FortCustomizableAbilityDecoTool.BPReleaseSecondaryFire
// 0x0004 (0x0004 - 0x0000)
struct FortCustomizableAbilityDecoTool_BPReleaseSecondaryFire final
{
public:
	class AFortDecoHelper*                        FortDecoHelper;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCustomizableAbilityDecoTool_BPReleaseSecondaryFire) == 0x000004, "Wrong alignment on FortCustomizableAbilityDecoTool_BPReleaseSecondaryFire");
static_assert(sizeof(FortCustomizableAbilityDecoTool_BPReleaseSecondaryFire) == 0x000004, "Wrong size on FortCustomizableAbilityDecoTool_BPReleaseSecondaryFire");
static_assert(offsetof(FortCustomizableAbilityDecoTool_BPReleaseSecondaryFire, FortDecoHelper) == 0x000000, "Member 'FortCustomizableAbilityDecoTool_BPReleaseSecondaryFire::FortDecoHelper' has a wrong offset!");

// Function FortniteGame.FortCustomizableAbilityDecoTool.BPReleaseTrigger
// 0x0004 (0x0004 - 0x0000)
struct FortCustomizableAbilityDecoTool_BPReleaseTrigger final
{
public:
	class AFortDecoHelper*                        FortDecoHelper;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCustomizableAbilityDecoTool_BPReleaseTrigger) == 0x000004, "Wrong alignment on FortCustomizableAbilityDecoTool_BPReleaseTrigger");
static_assert(sizeof(FortCustomizableAbilityDecoTool_BPReleaseTrigger) == 0x000004, "Wrong size on FortCustomizableAbilityDecoTool_BPReleaseTrigger");
static_assert(offsetof(FortCustomizableAbilityDecoTool_BPReleaseTrigger, FortDecoHelper) == 0x000000, "Member 'FortCustomizableAbilityDecoTool_BPReleaseTrigger::FortDecoHelper' has a wrong offset!");

// Function FortniteGame.HomeBaseWorker.GetWorkerItem
// 0x0004 (0x0004 - 0x0000)
struct HomeBaseWorker_GetWorkerItem final
{
public:
	class UFortWorker*                            ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseWorker_GetWorkerItem) == 0x000004, "Wrong alignment on HomeBaseWorker_GetWorkerItem");
static_assert(sizeof(HomeBaseWorker_GetWorkerItem) == 0x000004, "Wrong size on HomeBaseWorker_GetWorkerItem");
static_assert(offsetof(HomeBaseWorker_GetWorkerItem, ReturnValue) == 0x000000, "Member 'HomeBaseWorker_GetWorkerItem::ReturnValue' has a wrong offset!");

// Function FortniteGame.HomeBaseCommandCenterBuilding.GetProducedResources
// 0x000C (0x000C - 0x0000)
struct HomeBaseCommandCenterBuilding_GetProducedResources final
{
public:
	TArray<struct FHomeBaseProducedResources>     ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HomeBaseCommandCenterBuilding_GetProducedResources) == 0x000004, "Wrong alignment on HomeBaseCommandCenterBuilding_GetProducedResources");
static_assert(sizeof(HomeBaseCommandCenterBuilding_GetProducedResources) == 0x00000C, "Wrong size on HomeBaseCommandCenterBuilding_GetProducedResources");
static_assert(offsetof(HomeBaseCommandCenterBuilding_GetProducedResources, ReturnValue) == 0x000000, "Member 'HomeBaseCommandCenterBuilding_GetProducedResources::ReturnValue' has a wrong offset!");

// Function FortniteGame.LevelTestingActorBase.ExtractSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct LevelTestingActorBase_ExtractSkeletalMesh final
{
public:
	TSubclassOf<class AActor>                     BlueprintClass;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelTestingActorBase_ExtractSkeletalMesh) == 0x000004, "Wrong alignment on LevelTestingActorBase_ExtractSkeletalMesh");
static_assert(sizeof(LevelTestingActorBase_ExtractSkeletalMesh) == 0x000008, "Wrong size on LevelTestingActorBase_ExtractSkeletalMesh");
static_assert(offsetof(LevelTestingActorBase_ExtractSkeletalMesh, BlueprintClass) == 0x000000, "Member 'LevelTestingActorBase_ExtractSkeletalMesh::BlueprintClass' has a wrong offset!");
static_assert(offsetof(LevelTestingActorBase_ExtractSkeletalMesh, ReturnValue) == 0x000004, "Member 'LevelTestingActorBase_ExtractSkeletalMesh::ReturnValue' has a wrong offset!");

// Function FortniteGame.LevelTestingActorBase.ExtractSkeletalMeshScale
// 0x0010 (0x0010 - 0x0000)
struct LevelTestingActorBase_ExtractSkeletalMeshScale final
{
public:
	TSubclassOf<class AActor>                     BlueprintClass;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelTestingActorBase_ExtractSkeletalMeshScale) == 0x000004, "Wrong alignment on LevelTestingActorBase_ExtractSkeletalMeshScale");
static_assert(sizeof(LevelTestingActorBase_ExtractSkeletalMeshScale) == 0x000010, "Wrong size on LevelTestingActorBase_ExtractSkeletalMeshScale");
static_assert(offsetof(LevelTestingActorBase_ExtractSkeletalMeshScale, BlueprintClass) == 0x000000, "Member 'LevelTestingActorBase_ExtractSkeletalMeshScale::BlueprintClass' has a wrong offset!");
static_assert(offsetof(LevelTestingActorBase_ExtractSkeletalMeshScale, ReturnValue) == 0x000004, "Member 'LevelTestingActorBase_ExtractSkeletalMeshScale::ReturnValue' has a wrong offset!");

// Function FortniteGame.ManorPortal.GetCurrencyCost
// 0x0008 (0x0008 - 0x0000)
struct ManorPortal_GetCurrencyCost final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManorPortal_GetCurrencyCost) == 0x000004, "Wrong alignment on ManorPortal_GetCurrencyCost");
static_assert(sizeof(ManorPortal_GetCurrencyCost) == 0x000008, "Wrong size on ManorPortal_GetCurrencyCost");
static_assert(offsetof(ManorPortal_GetCurrencyCost, Player) == 0x000000, "Member 'ManorPortal_GetCurrencyCost::Player' has a wrong offset!");
static_assert(offsetof(ManorPortal_GetCurrencyCost, ReturnValue) == 0x000004, "Member 'ManorPortal_GetCurrencyCost::ReturnValue' has a wrong offset!");

// Function FortniteGame.ManorPortal.GetPlayerCurrencyAmount
// 0x0008 (0x0008 - 0x0000)
struct ManorPortal_GetPlayerCurrencyAmount final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManorPortal_GetPlayerCurrencyAmount) == 0x000004, "Wrong alignment on ManorPortal_GetPlayerCurrencyAmount");
static_assert(sizeof(ManorPortal_GetPlayerCurrencyAmount) == 0x000008, "Wrong size on ManorPortal_GetPlayerCurrencyAmount");
static_assert(offsetof(ManorPortal_GetPlayerCurrencyAmount, Player) == 0x000000, "Member 'ManorPortal_GetPlayerCurrencyAmount::Player' has a wrong offset!");
static_assert(offsetof(ManorPortal_GetPlayerCurrencyAmount, ReturnValue) == 0x000004, "Member 'ManorPortal_GetPlayerCurrencyAmount::ReturnValue' has a wrong offset!");

// Function FortniteGame.ManorPortal.IsPortalUnlocked
// 0x0008 (0x0008 - 0x0000)
struct ManorPortal_IsPortalUnlocked final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManorPortal_IsPortalUnlocked) == 0x000004, "Wrong alignment on ManorPortal_IsPortalUnlocked");
static_assert(sizeof(ManorPortal_IsPortalUnlocked) == 0x000008, "Wrong size on ManorPortal_IsPortalUnlocked");
static_assert(offsetof(ManorPortal_IsPortalUnlocked, Player) == 0x000000, "Member 'ManorPortal_IsPortalUnlocked::Player' has a wrong offset!");
static_assert(offsetof(ManorPortal_IsPortalUnlocked, ReturnValue) == 0x000004, "Member 'ManorPortal_IsPortalUnlocked::ReturnValue' has a wrong offset!");

// Function FortniteGame.ManorPortal.IsProfileValidToReadPortalAvailability
// 0x0008 (0x0008 - 0x0000)
struct ManorPortal_IsProfileValidToReadPortalAvailability final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ManorPortal_IsProfileValidToReadPortalAvailability) == 0x000004, "Wrong alignment on ManorPortal_IsProfileValidToReadPortalAvailability");
static_assert(sizeof(ManorPortal_IsProfileValidToReadPortalAvailability) == 0x000008, "Wrong size on ManorPortal_IsProfileValidToReadPortalAvailability");
static_assert(offsetof(ManorPortal_IsProfileValidToReadPortalAvailability, Player) == 0x000000, "Member 'ManorPortal_IsProfileValidToReadPortalAvailability::Player' has a wrong offset!");
static_assert(offsetof(ManorPortal_IsProfileValidToReadPortalAvailability, ReturnValue) == 0x000004, "Member 'ManorPortal_IsProfileValidToReadPortalAvailability::ReturnValue' has a wrong offset!");

// Function FortniteGame.ManorPortal.OpenUnlockMenu
// 0x0004 (0x0004 - 0x0000)
struct ManorPortal_OpenUnlockMenu final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManorPortal_OpenUnlockMenu) == 0x000004, "Wrong alignment on ManorPortal_OpenUnlockMenu");
static_assert(sizeof(ManorPortal_OpenUnlockMenu) == 0x000004, "Wrong size on ManorPortal_OpenUnlockMenu");
static_assert(offsetof(ManorPortal_OpenUnlockMenu, Player) == 0x000000, "Member 'ManorPortal_OpenUnlockMenu::Player' has a wrong offset!");

// Function FortniteGame.ManorPortal.UnlockPortal
// 0x0004 (0x0004 - 0x0000)
struct ManorPortal_UnlockPortal final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ManorPortal_UnlockPortal) == 0x000004, "Wrong alignment on ManorPortal_UnlockPortal");
static_assert(sizeof(ManorPortal_UnlockPortal) == 0x000004, "Wrong size on ManorPortal_UnlockPortal");
static_assert(offsetof(ManorPortal_UnlockPortal, Player) == 0x000000, "Member 'ManorPortal_UnlockPortal::Player' has a wrong offset!");

}

#pragma pack(pop)
