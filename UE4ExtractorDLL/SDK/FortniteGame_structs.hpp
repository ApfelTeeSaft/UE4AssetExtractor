#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteGame

#include "Basic.hpp"

#include "Party_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "AIModule_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"
#include "McpProfileSys_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Enum FortniteGame.EFortAIDirectorEvent
// NumValues: 0x0019
enum class EFortAIDirectorEvent : uint8
{
	PlayerAIEnemies                          = 0,
	PlayerTakeDamage                         = 1,
	PlayerHealth                             = 2,
	PlayerDeath                              = 3,
	PlayerLookAtAIEnemy                      = 4,
	PlayerDamageAIEnemy                      = 5,
	PlayerKillAIEnemy                        = 6,
	PlayerHealingPotential                   = 7,
	PlayerAmmoLight                          = 8,
	PlayerAmmoMedium                         = 9,
	PlayerAmmoHeavy                          = 10,
	PlayerAmmoShells                         = 11,
	PlayerAmmoEnergy                         = 12,
	PlayerAINear                             = 13,
	PlayerMovement                           = 14,
	ObjectiveTakeDamage                      = 15,
	ObjectiveHealth                          = 16,
	ObjectiveDestroyed                       = 17,
	TrapFired                                = 18,
	TrapDamagedAIEnemy                       = 19,
	ObjectivePathCost                        = 20,
	PlayerPathCost                           = 21,
	ObjectiveNearbyBuildingDamaged           = 22,
	Max_None                                 = 23,
	EFortAIDirectorEvent_MAX                 = 24,
};

// Enum FortniteGame.EKeepDefenseState
// NumValues: 0x0006
enum class EKeepDefenseState : uint8
{
	Inactive                                 = 0,
	Warmup                                   = 1,
	Defense                                  = 2,
	LastAlive                                = 3,
	Max                                      = 4,
	EKeepDefenseState_MAX                    = 5,
};

// Enum FortniteGame.ECaptureState
// NumValues: 0x0007
enum class ECaptureState : uint8
{
	CS_Idle                                  = 0,
	CS_Capturing                             = 1,
	CS_Contested                             = 2,
	CS_Resetting                             = 3,
	CS_Captured                              = 4,
	CS_Reset                                 = 5,
	CS_MAX                                   = 6,
};

// Enum FortniteGame.EFortTeam
// NumValues: 0x000F
enum class EFortTeam : uint8
{
	HumanCampaign                            = 0,
	Monster                                  = 1,
	HumanPvP_Team1                           = 2,
	HumanPvP_Team2                           = 3,
	HumanPvP_Team3                           = 4,
	HumanPvP_Team4                           = 5,
	HumanPvP_Team5                           = 6,
	HumanPvP_Team6                           = 7,
	HumanPvP_Team7                           = 8,
	HumanPvP_Team8                           = 9,
	HumanPvP_Team9                           = 10,
	HumanPvP_Team10                          = 11,
	Spectator                                = 12,
	MAX                                      = 13,
	EFortTeam_MAX                            = 14,
};

// Enum FortniteGame.EFortCustomPartType
// NumValues: 0x0008
enum class EFortCustomPartType : uint8
{
	Head                                     = 0,
	Body                                     = 1,
	Hat                                      = 2,
	Backpack                                 = 3,
	Charm                                    = 4,
	Face                                     = 5,
	NumTypes                                 = 6,
	EFortCustomPartType_MAX                  = 7,
};

// Enum FortniteGame.EFortDayPhase
// NumValues: 0x0006
enum class EFortDayPhase : uint8
{
	Morning                                  = 0,
	Day                                      = 1,
	Evening                                  = 2,
	Night                                    = 3,
	NumPhases                                = 4,
	EFortDayPhase_MAX                        = 5,
};

// Enum FortniteGame.EFortPersistentResources
// NumValues: 0x0006
enum class EFortPersistentResources : uint8
{
	Power                                    = 0,
	ManufacturingParts                       = 1,
	Supplies                                 = 2,
	Food                                     = 3,
	Max_None                                 = 4,
	EFortPersistentResources_MAX             = 5,
};

// Enum FortniteGame.EFortAttributeDisplay
// NumValues: 0x000B
enum class EFortAttributeDisplay : uint8
{
	BasicInt                                 = 0,
	NegativeImpliesInfiniteInt               = 1,
	BasicFloat                               = 2,
	NegativeImpliesInfiniteFloat             = 3,
	BasicString                              = 4,
	NormalizedPercentage                     = 5,
	StringArray                              = 6,
	SlateBrush                               = 7,
	DoNotDisplay                             = 8,
	None_Max                                 = 9,
	EFortAttributeDisplay_MAX                = 10,
};

// Enum FortniteGame.EFortBrushSize
// NumValues: 0x0007
enum class EFortBrushSize : uint8
{
	VeryVerySmall                            = 0,
	VerySmall                                = 1,
	Small                                    = 2,
	Medium                                   = 3,
	Large                                    = 4,
	VeryLarge                                = 5,
	EFortBrushSize_MAX                       = 6,
};

// Enum FortniteGame.EMyTownBuildingState
// NumValues: 0x0005
enum class EMyTownBuildingState : uint8
{
	Locked                                   = 0,
	CanBuild                                 = 1,
	CanUpgrade                               = 2,
	Idle                                     = 3,
	EMyTownBuildingState_MAX                 = 4,
};

// Enum FortniteGame.EMatchmakingCompleteResult
// NumValues: 0x0007
enum class EMatchmakingCompleteResult : uint8
{
	NotStarted                               = 0,
	Cancelled                                = 1,
	NoResults                                = 2,
	Failure                                  = 3,
	CreateFailure                            = 4,
	Success                                  = 5,
	EMatchmakingCompleteResult_MAX           = 6,
};

// Enum FortniteGame.EMatchmakingState
// NumValues: 0x000F
enum class EMatchmakingState : uint8
{
	NotMatchmaking                           = 0,
	CancelingMatchmaking                     = 1,
	ReleasingLock                            = 2,
	AcquiringLock                            = 3,
	LockAcquistionFailure                    = 4,
	FindingEmptyServer                       = 5,
	FindingExistingSession                   = 6,
	TestingEmptyServers                      = 7,
	TestingExistingSessions                  = 8,
	JoiningExistingSession                   = 9,
	NoMatchesAvailable                       = 10,
	CleaningUpExisting                       = 11,
	HandlingFailure                          = 12,
	JoinSuccess                              = 13,
	EMatchmakingState_MAX                    = 14,
};

// Enum FortniteGame.EFortPartyRestriction
// NumValues: 0x0009
enum class EFortPartyRestriction : uint8
{
	Invalid                                  = 0,
	PartyCreatePending                       = 1,
	AlreadyInParty                           = 2,
	PartyFull                                = 3,
	GameFull                                 = 4,
	Private                                  = 5,
	CurrentlyNotAvailable                    = 6,
	Max                                      = 7,
	EFortPartyRestriction_MAX                = 8,
};

// Enum FortniteGame.EFortFriendRequestStatus
// NumValues: 0x0005
enum class EFortFriendRequestStatus : uint8
{
	None                                     = 0,
	Accepted                                 = 1,
	PendingReceived                          = 2,
	PendingSent                              = 3,
	EFortFriendRequestStatus_MAX             = 4,
};

// Enum FortniteGame.EFortPartyState
// NumValues: 0x0005
enum class EFortPartyState : uint8
{
	WorldView                                = 0,
	TheaterView                              = 1,
	Matchmaking                              = 2,
	PostMatchmaking                          = 3,
	EFortPartyState_MAX                      = 4,
};

// Enum FortniteGame.EFortPartyTransition
// NumValues: 0x0005
enum class EFortPartyTransition : uint8
{
	Idle                                     = 0,
	Joining                                  = 1,
	Leaving                                  = 2,
	Max                                      = 3,
	EFortPartyTransition_MAX                 = 4,
};

// Enum FortniteGame.EFortQuestObjectiveType
// NumValues: 0x0008
enum class EFortQuestObjectiveType : uint8
{
	Kill                                     = 0,
	Collect                                  = 1,
	Complete                                 = 2,
	Win                                      = 3,
	LevelUp                                  = 4,
	Custom                                   = 5,
	Client                                   = 6,
	EFortQuestObjectiveType_MAX              = 7,
};

// Enum FortniteGame.EAIHotSpotSlot
// NumValues: 0x0006
enum class EAIHotSpotSlot : uint8
{
	Free                                     = 0,
	Claimed                                  = 1,
	Occupied                                 = 2,
	Blocked                                  = 3,
	Disabled                                 = 4,
	EAIHotSpotSlot_MAX                       = 5,
};

// Enum FortniteGame.EAIHotSpotAssignmentFilter
// NumValues: 0x0004
enum class EAIHotSpotAssignmentFilter : uint8
{
	All                                      = 0,
	WithSlots                                = 1,
	WaitingList                              = 2,
	EAIHotSpotAssignmentFilter_MAX           = 3,
};

// Enum FortniteGame.EAIHotSpotSlotFilter
// NumValues: 0x0004
enum class EAIHotSpotSlotFilter : uint8
{
	All                                      = 0,
	AvailableOnly                            = 1,
	UnavailableOnly                          = 2,
	EAIHotSpotSlotFilter_MAX                 = 3,
};

// Enum FortniteGame.EFortBangType
// NumValues: 0x0013
enum class EFortBangType : uint8
{
	Invalid                                  = 0,
	Custom                                   = 1,
	PlayTab                                  = 2,
	HeroesTab                                = 3,
	VaultTab                                 = 4,
	StoreTab                                 = 5,
	FriendsButton                            = 6,
	PartyInviteButton                        = 7,
	DailyRewardsButton                       = 8,
	QuestsButton                             = 9,
	VaultSchematics                          = 10,
	VaultPersonnel                           = 11,
	VaultResources                           = 12,
	VaultMelee                               = 13,
	VaultRanged                              = 14,
	VaultConsumables                         = 15,
	VaultIngredients                         = 16,
	VaultTraps                               = 17,
	EFortBangType_MAX                        = 18,
};

// Enum FortniteGame.EFortEventNameType
// NumValues: 0x0003
enum class EFortEventNameType : uint8
{
	Mission                                  = 0,
	Client                                   = 1,
	EFortEventNameType_MAX                   = 2,
};

// Enum FortniteGame.EFortCraftFailCause
// NumValues: 0x0007
enum class EFortCraftFailCause : uint8
{
	Unknown                                  = 0,
	NotEnoughResources                       = 1,
	InventoryFull                            = 2,
	InsufficientTeamLevel                    = 3,
	CraftingQueueFull                        = 4,
	CurrentlyLocked                          = 5,
	EFortCraftFailCause_MAX                  = 6,
};

// Enum FortniteGame.EKeepContainerType
// NumValues: 0x0008
enum class EKeepContainerType : uint8
{
	Base                                     = 0,
	Storeroom                                = 1,
	FirstAid                                 = 2,
	Armory                                   = 3,
	Workshop                                 = 4,
	AmmoStash                                = 5,
	Max                                      = 6,
	EKeepContainerType_MAX                   = 7,
};

// Enum FortniteGame.EReadyCheckState
// NumValues: 0x0004
enum class EReadyCheckState : uint8
{
	CheckStarted                             = 0,
	Ready                                    = 1,
	NotReady                                 = 2,
	EReadyCheckState_MAX                     = 3,
};

// Enum FortniteGame.ERichPresenceStateChange
// NumValues: 0x0006
enum class ERichPresenceStateChange : uint8
{
	AutoUpdate                               = 0,
	Idle                                     = 1,
	Active                                   = 2,
	Busy                                     = 3,
	NotBusy                                  = 4,
	ERichPresenceStateChange_MAX             = 5,
};

// Enum FortniteGame.EFortAlteration
// NumValues: 0x0009
enum class EFortAlteration : uint8
{
	AttributeSlot                            = 0,
	GameplaySlot                             = 1,
	ComplexCosmeticSlot                      = 2,
	ColorSlot                                = 3,
	HeroSpecializationTier1Slot              = 4,
	HeroSpecializationTier2Slot              = 5,
	HeroSpecializationTier3Slot              = 6,
	HeroSpecializationTier4Slot              = 7,
	EFortAlteration_MAX                      = 8,
};

// Enum FortniteGame.EFortTeamAffiliation
// NumValues: 0x0004
enum class EFortTeamAffiliation : uint8
{
	Friendly                                 = 0,
	Neutral                                  = 1,
	Hostile                                  = 2,
	EFortTeamAffiliation_MAX                 = 3,
};

// Enum FortniteGame.EFortInventoryType
// NumValues: 0x0004
enum class EFortInventoryType : uint8
{
	World                                    = 0,
	Account                                  = 1,
	MAX                                      = 2,
	EFortInventoryType_MAX                   = 3,
};

// Enum FortniteGame.EFortAIUtility
// NumValues: 0x0012
enum class EFortAIUtility : uint8
{
	KillPlayersMelee                         = 0,
	KillPlayersRanged                        = 1,
	KillPlayersArtillery                     = 2,
	DestroyBuildingsMelee                    = 3,
	DestroyBuildingsRanged                   = 4,
	DestroyBuildingsArtillery                = 5,
	DestroyTraps                             = 6,
	Tank                                     = 7,
	Infiltrate                               = 8,
	Mob                                      = 9,
	Support                                  = 10,
	Kiting                                   = 11,
	AreaOfDenial                             = 12,
	DisableTraps                             = 13,
	Dormant                                  = 14,
	Assassin                                 = 15,
	MAX                                      = 16,
	EFortAIUtility_MAX                       = 17,
};

// Enum FortniteGame.EFortTileEdgeType
// NumValues: 0x0009
enum class EFortTileEdgeType : uint8
{
	Undefined                                = 0,
	Outer_1                                  = 1,
	Transition_2                             = 2,
	Inner_3                                  = 3,
	Border_4                                 = 4,
	BorderTransitionSingle_5                 = 5,
	BorderTransitionDouble_6                 = 6,
	MAX                                      = 7,
	EFortTileEdgeType_MAX                    = 8,
};

// Enum FortniteGame.EFortRequestedGameplayAction
// NumValues: 0x0009
enum class EFortRequestedGameplayAction : uint8
{
	ContinuePlaying                          = 0,
	StartPlaying                             = 1,
	StopPlaying                              = 2,
	EnterZone                                = 3,
	LeaveZone                                = 4,
	ReturnToMainMenu                         = 5,
	QuitGame                                 = 6,
	Invalid                                  = 7,
	EFortRequestedGameplayAction_MAX         = 8,
};

// Enum FortniteGame.EFortGameplayState
// NumValues: 0x0007
enum class EFortGameplayState : uint8
{
	NormalGameplay                           = 0,
	WaitingToStart                           = 1,
	EndOfZone                                = 2,
	EnteringZone                             = 3,
	LeavingZone                              = 4,
	Invalid                                  = 5,
	EFortGameplayState_MAX                   = 6,
};

// Enum FortniteGame.EFortEncounterDirection
// NumValues: 0x000A
enum class EFortEncounterDirection : uint8
{
	North                                    = 0,
	NorthEast                                = 1,
	East                                     = 2,
	SouthEast                                = 3,
	South                                    = 4,
	SouthWest                                = 5,
	West                                     = 6,
	NorthWest                                = 7,
	Max_None                                 = 8,
	EFortEncounterDirection_MAX              = 9,
};

// Enum FortniteGame.EFortMovementUrgency
// NumValues: 0x0006
enum class EFortMovementUrgency : uint8
{
	None                                     = 0,
	Low                                      = 1,
	Medium                                   = 2,
	High                                     = 3,
	NumLevels                                = 4,
	EFortMovementUrgency_MAX                 = 5,
};

// Enum FortniteGame.EFortMovementStyle
// NumValues: 0x0005
enum class EFortMovementStyle : uint8
{
	Running                                  = 0,
	Walking                                  = 1,
	Charging                                 = 2,
	Sprinting                                = 3,
	EFortMovementStyle_MAX                   = 4,
};

// Enum FortniteGame.EFortWeaponTriggerType
// NumValues: 0x0005
enum class EFortWeaponTriggerType : uint8
{
	OnPress                                  = 0,
	Automatic                                = 1,
	OnRelease                                = 2,
	OnPressAndRelease                        = 3,
	EFortWeaponTriggerType_MAX               = 4,
};

// Enum FortniteGame.EFortJumpStaminaCost
// NumValues: 0x0005
enum class EFortJumpStaminaCost : uint8
{
	None                                     = 0,
	Trigger                                  = 1,
	SprintTrigger                            = 2,
	SprintAir                                = 3,
	EFortJumpStaminaCost_MAX                 = 4,
};

// Enum FortniteGame.EFortReportDayPhase
// NumValues: 0x0004
enum class EFortReportDayPhase : uint8
{
	Dawn                                     = 0,
	Dusk                                     = 1,
	ZoneFinished                             = 2,
	EFortReportDayPhase_MAX                  = 3,
};

// Enum FortniteGame.EFortDayPhasePrio
// NumValues: 0x0003
enum class EFortDayPhasePrio : uint8
{
	Default                                  = 0,
	DailySummary                             = 1,
	EFortDayPhasePrio_MAX                    = 2,
};

// Enum FortniteGame.EFortCustomBodyType
// NumValues: 0x0009
enum class EFortCustomBodyType : uint8
{
	Small                                    = 1,
	Medium                                   = 2,
	MediumAndSmall                           = 3,
	Large                                    = 4,
	LargeAndSmall                            = 5,
	LargeAndMedium                           = 6,
	All                                      = 7,
	Deprecated                               = 8,
	EFortCustomBodyType_MAX                  = 9,
};

// Enum FortniteGame.EFortDisplayGender
// NumValues: 0x0005
enum class EFortDisplayGender : uint8
{
	Unknown                                  = 0,
	Male                                     = 1,
	Female                                   = 2,
	NumTypes                                 = 3,
	EFortDisplayGender_MAX                   = 4,
};

// Enum FortniteGame.EFortCustomGender
// NumValues: 0x0005
enum class EFortCustomGender : uint8
{
	Invalid                                  = 0,
	Male                                     = 1,
	Female                                   = 2,
	Both                                     = 3,
	EFortCustomGender_MAX                    = 4,
};

// Enum FortniteGame.EFortCompletionResult
// NumValues: 0x0005
enum class EFortCompletionResult : uint8
{
	Win                                      = 0,
	Loss                                     = 1,
	Draw                                     = 2,
	Undefined                                = 3,
	EFortCompletionResult_MAX                = 4,
};

// Enum FortniteGame.EFortPvPGameResult
// NumValues: 0x0004
enum class EFortPvPGameResult : uint8
{
	Win                                      = 0,
	Loss                                     = 1,
	Draw                                     = 2,
	EFortPvPGameResult_MAX                   = 3,
};

// Enum FortniteGame.EFortItemTier
// NumValues: 0x000D
enum class EFortItemTier : uint8
{
	No_Tier                                  = 0,
	I                                        = 1,
	II                                       = 2,
	III                                      = 3,
	IV                                       = 4,
	V                                        = 5,
	VI                                       = 6,
	VII                                      = 7,
	VIII                                     = 8,
	IX                                       = 9,
	X                                        = 10,
	NumItemTierValues                        = 11,
	EFortItemTier_MAX                        = 12,
};

// Enum FortniteGame.EFortQuality
// NumValues: 0x0005
enum class EFortQuality : uint8
{
	Common                                   = 0,
	Uncommon                                 = 1,
	Rare                                     = 2,
	NumQualityValues                         = 3,
	EFortQuality_MAX                         = 4,
};

// Enum FortniteGame.EFortRarity
// NumValues: 0x000C
enum class EFortRarity : uint8
{
	Handmade                                 = 0,
	Ordinary                                 = 1,
	Sturdy                                   = 2,
	Quality                                  = 3,
	Fine                                     = 4,
	Elegant                                  = 5,
	Masterwork                               = 6,
	Epic                                     = 7,
	Badass                                   = 8,
	Legendary                                = 9,
	NumRarityValues                          = 10,
	EFortRarity_MAX                          = 11,
};

// Enum FortniteGame.EFortItemPropertyType
// NumValues: 0x0015
enum class EFortItemPropertyType : uint8
{
	None                                     = 0,
	DisplayName                              = 1,
	Damage                                   = 2,
	EnvDamage                                = 3,
	Reload                                   = 4,
	HorizontalRecoil                         = 5,
	VerticalRecoil                           = 6,
	RateOfFire                               = 7,
	Durability                               = 8,
	HealthRestored                           = 9,
	StackCount                               = 10,
	StunTime                                 = 11,
	Uses                                     = 12,
	Description                              = 13,
	MagCapacity                              = 14,
	AmmoImage                                = 15,
	Rarity                                   = 16,
	Personality                              = 17,
	SetBonus                                 = 18,
	Count_AlwaysAtEnd                        = 19,
	EFortItemPropertyType_MAX                = 20,
};

// Enum FortniteGame.EFortTargetSelectionFilter
// NumValues: 0x000D
enum class EFortTargetSelectionFilter : uint8
{
	Damageable                               = 0,
	Everything                               = 1,
	Pawns                                    = 2,
	Buildings                                = 3,
	Walls                                    = 4,
	Traps                                    = 5,
	Players                                  = 6,
	AIPawns                                  = 7,
	Instigator                               = 8,
	WeakSpots                                = 9,
	World                                    = 10,
	Max                                      = 11,
	EFortTargetSelectionFilter_MAX           = 12,
};

// Enum FortniteGame.EFortTargetSelectionTestType
// NumValues: 0x0004
enum class EFortTargetSelectionTestType : uint8
{
	Overlap                                  = 0,
	Swept                                    = 1,
	Ballistic                                = 2,
	EFortTargetSelectionTestType_MAX         = 3,
};

// Enum FortniteGame.EFortTargetSelectionShape
// NumValues: 0x0007
enum class EFortTargetSelectionShape : uint8
{
	Sphere                                   = 0,
	Cone                                     = 1,
	Box                                      = 2,
	Capsule                                  = 3,
	Line                                     = 4,
	Custom                                   = 5,
	EFortTargetSelectionShape_MAX            = 6,
};

// Enum FortniteGame.EFortInventoryFilter
// NumValues: 0x000B
enum class EFortInventoryFilter : uint8
{
	WeaponMelee                              = 0,
	WeaponRanged                             = 1,
	Ammo                                     = 2,
	Traps                                    = 3,
	Consumables                              = 4,
	Ingredients                              = 5,
	Gadget                                   = 6,
	Decorations                              = 7,
	Invisible                                = 8,
	Max_None                                 = 9,
	EFortInventoryFilter_MAX                 = 10,
};

// Enum FortniteGame.EFortPartialPathUsage
// NumValues: 0x0004
enum class EFortPartialPathUsage : uint8
{
	Always                                   = 0,
	OnlyGoalsOnDestructible                  = 1,
	Never                                    = 2,
	EFortPartialPathUsage_MAX                = 3,
};

// Enum FortniteGame.EFortHotSpotDirection
// NumValues: 0x0008
enum class EFortHotSpotDirection : uint8
{
	PositiveX                                = 0,
	NegativeX                                = 1,
	PositiveY                                = 2,
	NegativeY                                = 3,
	PositiveZ                                = 4,
	NegativeZ                                = 5,
	Any                                      = 6,
	EFortHotSpotDirection_MAX                = 7,
};

// Enum FortniteGame.EFortHotSpotSlot
// NumValues: 0x0005
enum class EFortHotSpotSlot : uint8
{
	Melee                                    = 0,
	MeleeHuge                                = 1,
	Ranged                                   = 2,
	None                                     = 3,
	EFortHotSpotSlot_MAX                     = 4,
};

// Enum FortniteGame.EBumpIntoSleepingReaction
// NumValues: 0x0004
enum class EBumpIntoSleepingReaction : uint8
{
	WakeUp                                   = 0,
	Ignore                                   = 1,
	Sleep                                    = 2,
	EBumpIntoSleepingReaction_MAX            = 3,
};

// Enum FortniteGame.EBuildingFloorRailing
// NumValues: 0x0003
enum class EBuildingFloorRailing : uint8
{
	None                                     = 0,
	Balcony                                  = 1,
	EBuildingFloorRailing_MAX                = 2,
};

// Enum FortniteGame.EBuildingStairsRailing
// NumValues: 0x0004
enum class EBuildingStairsRailing : uint8
{
	None                                     = 0,
	Partial                                  = 1,
	Full                                     = 2,
	EBuildingStairsRailing_MAX               = 3,
};

// Enum FortniteGame.EBuildingWallArea
// NumValues: 0x0004
enum class EBuildingWallArea : uint8
{
	Regular                                  = 0,
	Flat                                     = 1,
	Special                                  = 2,
	EBuildingWallArea_MAX                    = 3,
};

// Enum FortniteGame.EAssignmentType
// NumValues: 0x0006
enum class EAssignmentType : uint8
{
	Invalid                                  = 0,
	Encounter                                = 1,
	World                                    = 2,
	Enemy                                    = 3,
	NumAssignmentTypes                       = 4,
	EAssignmentType_MAX                      = 5,
};

// Enum FortniteGame.EBoundingBoxSlotDirectionCalculation
// NumValues: 0x0005
enum class EBoundingBoxSlotDirectionCalculation : uint8
{
	Auto                                     = 0,
	FaceWall                                 = 1,
	FaceAwayFromWall                         = 2,
	FaceCenter                               = 3,
	EBoundingBoxSlotDirectionCalculation_MAX = 4,
};

// Enum FortniteGame.EFortSessionHelperJoinState
// NumValues: 0x0008
enum class EFortSessionHelperJoinState : uint8
{
	NotJoining                               = 0,
	RequestingReservation                    = 1,
	FailedReservation                        = 2,
	WaitingOnGame                            = 3,
	AttemptingJoin                           = 4,
	JoiningSession                           = 5,
	FailedJoin                               = 6,
	EFortSessionHelperJoinState_MAX          = 7,
};

// Enum FortniteGame.EFortSessionHelperJoinResult
// NumValues: 0x0006
enum class EFortSessionHelperJoinResult : uint8
{
	NoResult                                 = 0,
	ReservationSuccess                       = 1,
	ReservationFailure                       = 2,
	JoinSessionSuccess                       = 3,
	JoinSessionFailure                       = 4,
	EFortSessionHelperJoinResult_MAX         = 5,
};

// Enum FortniteGame.EMatchmakingFlags
// NumValues: 0x0006
enum class EMatchmakingFlags : uint8
{
	None                                     = 0,
	CreateNewOnly                            = 1,
	NoReservation                            = 2,
	Private                                  = 4,
	UseWorldDataOwner                        = 8,
	EMatchmakingFlags_MAX                    = 9,
};

// Enum FortniteGame.EMatchmakingStartLocation
// NumValues: 0x0005
enum class EMatchmakingStartLocation : uint8
{
	Lobby                                    = 0,
	Game                                     = 1,
	CreateNew                                = 2,
	FindSingle                               = 3,
	EMatchmakingStartLocation_MAX            = 4,
};

// Enum FortniteGame.EFortRewardType
// NumValues: 0x0004
enum class EFortRewardType : uint8
{
	Default                                  = 0,
	Missed                                   = 1,
	Max_None                                 = 2,
	EFortRewardType_MAX                      = 3,
};

// Enum FortniteGame.EFortRewardActivityType
// NumValues: 0x0008
enum class EFortRewardActivityType : uint8
{
	General                                  = 0,
	MissionPrimary                           = 1,
	MissionSecondary                         = 2,
	Campaign                                 = 3,
	AccountLevelUp                           = 4,
	HeroLevelUp                              = 5,
	Max_None                                 = 6,
	EFortRewardActivityType_MAX              = 7,
};

// Enum FortniteGame.EFortItemEntryState
// NumValues: 0x000B
enum class EFortItemEntryState : uint8
{
	NoneState                                = 0,
	NewItemCount                             = 1,
	ShouldShowItemToast                      = 2,
	DurabilityInitialized                    = 3,
	DoNotShowSpawnParticles                  = 4,
	FromRecoveredBackpack                    = 5,
	FromGift                                 = 6,
	PendingUpgradeCriteriaProgress           = 7,
	OwnerBuildingHandle                      = 8,
	FromDroppedPickup                        = 9,
	EFortItemEntryState_MAX                  = 10,
};

// Enum FortniteGame.EFortWorldPrivacy
// NumValues: 0x0005
enum class EFortWorldPrivacy : uint8
{
	Public                                   = 0,
	FriendsOnly                              = 1,
	Private                                  = 2,
	Max                                      = 3,
	EFortWorldPrivacy_MAX                    = 4,
};

// Enum FortniteGame.EMyFortBuildingCategory
// NumValues: 0x0007
enum class EMyFortBuildingCategory : uint8
{
	Training                                 = 0,
	Administration                           = 1,
	Production                               = 2,
	Fortification                            = 3,
	Crafting                                 = 4,
	Max_None                                 = 5,
	EMyFortBuildingCategory_MAX              = 6,
};

// Enum FortniteGame.EStatCategory
// NumValues: 0x0004
enum class EStatCategory : uint8
{
	Combat                                   = 0,
	Building                                 = 1,
	Utility                                  = 2,
	EStatCategory_MAX                        = 3,
};

// Enum FortniteGame.EFortReplicatedStat
// NumValues: 0x0023
enum class EFortReplicatedStat : uint8
{
	MonsterKills                             = 0,
	MonsterDamagePoints                      = 1,
	PlayerKills                              = 2,
	WoodGathered                             = 3,
	StoneGathered                            = 4,
	MetalGathered                            = 5,
	Deaths                                   = 6,
	BuildingsBuilt                           = 7,
	BuildingsBuilt_Wood                      = 8,
	BuildingsBuilt_Stone                     = 9,
	BuildingsBuilt_Metal                     = 10,
	BuildingsUpgraded_Wood2                  = 11,
	BuildingsUpgraded_Wood3                  = 12,
	BuildingsUpgraded_Stone2                 = 13,
	BuildingsUpgraded_Stone3                 = 14,
	BuildingsUpgraded_Metal2                 = 15,
	BuildingsUpgraded_Metal3                 = 16,
	BuildingsDestroyed                       = 17,
	Repair_Wood                              = 18,
	Repair_Stone                             = 19,
	Repair_Metal                             = 20,
	FlagsCaptured                            = 21,
	FlagsReturned                            = 22,
	ContainersLooted                         = 23,
	CraftingPoints                           = 24,
	TrapPlacementPoints                      = 25,
	TrapActivationPoints                     = 26,
	TotalScore                               = 27,
	OldTotalScore                            = 28,
	CombatScore                              = 29,
	BuildingScore                            = 30,
	UtilityScore                             = 31,
	None                                     = 32,
	MAX                                      = 33,
	EFortReplicatedStat_MAX                  = 34,
};

// Enum FortniteGame.EFortReplenishmentType
// NumValues: 0x0005
enum class EFortReplenishmentType : uint8
{
	Restricted                               = 0,
	ClampMin                                 = 1,
	Add                                      = 2,
	Ability                                  = 3,
	EFortReplenishmentType_MAX               = 4,
};

// Enum FortniteGame.EFortItemType
// NumValues: 0x0028
enum class EFortItemType : uint8
{
	WorldItem                                = 0,
	Ammo                                     = 1,
	Badge                                    = 2,
	BackpackPickup                           = 3,
	BuildingPiece                            = 4,
	CharacterPart                            = 5,
	Deco                                     = 6,
	EditTool                                 = 7,
	Food                                     = 8,
	Gadget                                   = 9,
	HomebaseGadget                           = 10,
	HeroAbility                              = 11,
	MissionItem                              = 12,
	Trap                                     = 13,
	Weapon                                   = 14,
	WeaponMelee                              = 15,
	WeaponRanged                             = 16,
	WeaponHarvest                            = 17,
	WorldResource                            = 18,
	Outpost                                  = 19,
	AccountItem                              = 20,
	AccountResource                          = 21,
	Alteration                               = 22,
	CardPack                                 = 23,
	CharacterCosmetic                        = 24,
	Currency                                 = 25,
	Hero                                     = 26,
	MyFortBuilding                           = 27,
	Schematic                                = 28,
	Ingredient                               = 29,
	Trait                                    = 30,
	Worker                                   = 31,
	Token                                    = 32,
	HeroSpecialization                       = 33,
	Quest                                    = 34,
	Emote                                    = 35,
	Stack                                    = 36,
	Profile                                  = 37,
	Max_None                                 = 38,
	EFortItemType_MAX                        = 39,
};

// Enum FortniteGame.EFortTemplateAccess
// NumValues: 0x0005
enum class EFortTemplateAccess : uint8
{
	Normal                                   = 0,
	Trusted                                  = 1,
	Private                                  = 2,
	EFortTemplateAccess_MAX                  = 3,
	Invalid                                  = 255,
};

// Enum FortniteGame.ESpecializationType
// NumValues: 0x0006
enum class ESpecializationType : uint8
{
	Tier1                                    = 0,
	Tier2                                    = 1,
	Tier3                                    = 2,
	Tier4                                    = 3,
	NumTiers                                 = 4,
	ESpecializationType_MAX                  = 5,
};

// Enum FortniteGame.EMyTown3DRoadType
// NumValues: 0x0004
enum class EMyTown3DRoadType : uint8
{
	UnbuiltUnbuilt                           = 0,
	UnbuiltBuilt                             = 1,
	BuiltBuilt                               = 2,
	EMyTown3DRoadType_MAX                    = 3,
};

// Enum FortniteGame.EFortQuestState
// NumValues: 0x0005
enum class EFortQuestState : uint8
{
	Inactive                                 = 0,
	Active                                   = 1,
	Completed                                = 2,
	Claimed                                  = 3,
	EFortQuestState_MAX                      = 4,
};

// Enum FortniteGame.EFortHexTileAdjacency
// NumValues: 0x0008
enum class EFortHexTileAdjacency : uint8
{
	North                                    = 0,
	NorthEast                                = 1,
	SouthEast                                = 2,
	South                                    = 3,
	SouthWest                                = 4,
	NorthWest                                = 5,
	Max_None                                 = 6,
	EFortHexTileAdjacency_MAX                = 7,
};

// Enum FortniteGame.EFortQuickBars
// NumValues: 0x0004
enum class EFortQuickBars : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Max_None                                 = 2,
	EFortQuickBars_MAX                       = 3,
};

// Enum FortniteGame.EFortEncounterSpawnLimitType
// NumValues: 0x0005
enum class EFortEncounterSpawnLimitType : uint8
{
	NoLimit                                  = 0,
	NumPawnsLimit                            = 1,
	SpawnPointLimit                          = 2,
	MAX                                      = 3,
	EFortEncounterSpawnLimitType_MAX         = 4,
};

// Enum FortniteGame.EFortEncounterUtilitiesMode
// NumValues: 0x0003
enum class EFortEncounterUtilitiesMode : uint8
{
	LockedOnly                               = 0,
	LockedAndFree                            = 1,
	EFortEncounterUtilitiesMode_MAX          = 2,
};

// Enum FortniteGame.EFortEncounterSpawnLocationPlacementMode
// NumValues: 0x0006
enum class EFortEncounterSpawnLocationPlacementMode : uint8
{
	Directional                              = 0,
	Ring                                     = 1,
	Volume                                   = 2,
	Custom                                   = 3,
	Max_None                                 = 4,
	EFortEncounterSpawnLocationPlacementMode_MAX = 5,
};

// Enum FortniteGame.EFortEncounterPacingMode
// NumValues: 0x0004
enum class EFortEncounterPacingMode : uint8
{
	SpawnPointsPercentageCurve               = 0,
	IntensityCurve                           = 1,
	Burst                                    = 2,
	EFortEncounterPacingMode_MAX             = 3,
};

// Enum FortniteGame.EFortTheaterType
// NumValues: 0x0008
enum class EFortTheaterType : uint8
{
	Standard                                 = 0,
	PvP                                      = 1,
	PvP2                                     = 2,
	Tutorial                                 = 3,
	TutorialGate                             = 4,
	Test                                     = 5,
	Max_None                                 = 6,
	EFortTheaterType_MAX                     = 7,
};

// Enum FortniteGame.EFortTheaterMapTileType
// NumValues: 0x0006
enum class EFortTheaterMapTileType : uint8
{
	Normal                                   = 0,
	CriticalMission                          = 1,
	AlwaysActive                             = 2,
	Outpost                                  = 3,
	NonMission                               = 4,
	EFortTheaterMapTileType_MAX              = 5,
};

// Enum FortniteGame.EFortBounceType
// NumValues: 0x0004
enum class EFortBounceType : uint8
{
	Hit                                      = 0,
	Interact                                 = 1,
	EditPlaced                               = 2,
	EFortBounceType_MAX                      = 3,
};

// Enum FortniteGame.EBuildingHighlightType
// NumValues: 0x0005
enum class EBuildingHighlightType : uint8
{
	Primary                                  = 0,
	Interact                                 = 1,
	WillBeDestroyed                          = 2,
	MAX                                      = 3,
	EBuildingHighlightType_MAX               = 4,
};

// Enum FortniteGame.EFortConnectivityCubeFace
// NumValues: 0x0008
enum class EFortConnectivityCubeFace : uint8
{
	Front                                    = 0,
	Left                                     = 1,
	Back                                     = 2,
	Right                                    = 3,
	Upper                                    = 4,
	Lower                                    = 5,
	MAX                                      = 6,
	EFortConnectivityCubeFace_MAX            = 7,
};

// Enum FortniteGame.EFortDecoPlacementQueryResults
// NumValues: 0x000D
enum class EFortDecoPlacementQueryResults : uint8
{
	CanAdd                                   = 0,
	ExistingTrap                             = 1,
	ExistingObject                           = 2,
	Obstructed                               = 3,
	NoLocation                               = 4,
	WrongType                                = 5,
	WrongShape                               = 6,
	BeingModified                            = 7,
	WrongTeam                                = 8,
	BlueprintFailure                         = 9,
	AbilityFailure                           = 10,
	RequiresPlayerBuildableActor             = 11,
	EFortDecoPlacementQueryResults_MAX       = 12,
};

// Enum FortniteGame.EFortStructuralGridQueryResults
// NumValues: 0x0007
enum class EFortStructuralGridQueryResults : uint8
{
	CanAdd                                   = 0,
	ExistingActor                            = 1,
	Obstructed                               = 2,
	NoStructuralSupport                      = 3,
	InvalidActor                             = 4,
	ReachedLimit                             = 5,
	EFortStructuralGridQueryResults_MAX      = 6,
};

// Enum FortniteGame.EFortCostInfoTypes
// NumValues: 0x0006
enum class EFortCostInfoTypes : uint8
{
	Placement                                = 0,
	Repair                                   = 1,
	Conversion                               = 2,
	Ability                                  = 3,
	None                                     = 4,
	EFortCostInfoTypes_MAX                   = 5,
};

// Enum FortniteGame.EFortBuildingInitializationReason
// NumValues: 0x0009
enum class EFortBuildingInitializationReason : uint8
{
	StaticallyPlaced                         = 0,
	Spawned                                  = 1,
	Replaced                                 = 2,
	LoadedFromSave                           = 3,
	DynamicBuilderPlaced                     = 4,
	PlacementTool                            = 5,
	TrapTool                                 = 6,
	None                                     = 7,
	EFortBuildingInitializationReason_MAX    = 8,
};

// Enum FortniteGame.EFortBuildingPersistentState
// NumValues: 0x0007
enum class EFortBuildingPersistentState : uint8
{
	Default                                  = 0,
	New                                      = 1,
	Constructed                              = 2,
	Destroyed                                = 3,
	Searched                                 = 4,
	None                                     = 5,
	EFortBuildingPersistentState_MAX         = 6,
};

// Enum FortniteGame.EFortBuildingState
// NumValues: 0x0004
enum class EFortBuildingState : uint8
{
	Placement                                = 0,
	EditMode                                 = 1,
	None                                     = 2,
	EFortBuildingState_MAX                   = 3,
};

// Enum FortniteGame.EFortResourceLevel
// NumValues: 0x0009
enum class EFortResourceLevel : uint8
{
	First                                    = 0,
	Second                                   = 1,
	Third                                    = 2,
	Fourth                                   = 3,
	Fifth                                    = 4,
	Sixth                                    = 5,
	NumLevels                                = 6,
	Invalid                                  = 7,
	EFortResourceLevel_MAX                   = 8,
};

// Enum FortniteGame.EFortResourceType
// NumValues: 0x0006
enum class EFortResourceType : uint8
{
	Wood                                     = 0,
	Stone                                    = 1,
	Metal                                    = 2,
	Permanite                                = 3,
	None                                     = 4,
	EFortResourceType_MAX                    = 5,
};

// Enum FortniteGame.EFortTextureDataSlot
// NumValues: 0x0006
enum class EFortTextureDataSlot : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Tertiary                                 = 2,
	Fourth                                   = 3,
	NumSlots                                 = 4,
	EFortTextureDataSlot_MAX                 = 5,
};

// Enum FortniteGame.EFortTextureDataType
// NumValues: 0x000C
enum class EFortTextureDataType : uint8
{
	Any                                      = 0,
	OuterWall                                = 1,
	InnerWall                                = 2,
	Corner                                   = 3,
	Floor                                    = 4,
	Ceiling                                  = 5,
	Trim                                     = 6,
	Roof                                     = 7,
	Pillar                                   = 8,
	Shingle                                  = 9,
	None                                     = 10,
	EFortTextureDataType_MAX                 = 11,
};

// Enum FortniteGame.EFortBuildingType
// NumValues: 0x000E
enum class EFortBuildingType : uint8
{
	Wall                                     = 0,
	Floor                                    = 1,
	Corner                                   = 2,
	Deco                                     = 3,
	Prop                                     = 4,
	Stairs                                   = 5,
	Roof                                     = 6,
	Pillar                                   = 7,
	SpawnedItem                              = 8,
	Container                                = 9,
	Trap                                     = 10,
	GenericCenterCellActor                   = 11,
	None                                     = 12,
	EFortBuildingType_MAX                    = 13,
};

// Enum FortniteGame.EFortMissionType
// NumValues: 0x0004
enum class EFortMissionType : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Max_None                                 = 2,
	EFortMissionType_MAX                     = 3,
};

// Enum FortniteGame.EFortObjectiveRequirement
// NumValues: 0x0003
enum class EFortObjectiveRequirement : uint8
{
	Optional                                 = 0,
	Required                                 = 1,
	EFortObjectiveRequirement_MAX            = 2,
};

// Enum FortniteGame.EFortMissionStatus
// NumValues: 0x0007
enum class EFortMissionStatus : uint8
{
	Created                                  = 0,
	InProgress                               = 1,
	Succeeded                                = 2,
	Failed                                   = 3,
	NeutralCompletion                        = 4,
	Max_None                                 = 5,
	EFortMissionStatus_MAX                   = 6,
};

// Enum FortniteGame.EFortObjectiveStatus
// NumValues: 0x0007
enum class EFortObjectiveStatus : uint8
{
	Created                                  = 0,
	InProgress                               = 1,
	Succeeded                                = 2,
	Failed                                   = 3,
	NeutralCompletion                        = 4,
	Max_None                                 = 5,
	EFortObjectiveStatus_MAX                 = 6,
};

// Enum FortniteGame.EMissionGenerationCategory
// NumValues: 0x0005
enum class EMissionGenerationCategory : uint8
{
	Primary                                  = 0,
	Secondary                                = 1,
	Tertiary                                 = 2,
	Max_None                                 = 3,
	EMissionGenerationCategory_MAX           = 4,
};

// Enum FortniteGame.EFortObjectLibrary
// NumValues: 0x0024
enum class EFortObjectLibrary : uint8
{
	PlayerBuildingClass                      = 0,
	BuildingTexture                          = 1,
	NavAgentCost                             = 2,
	Missions                                 = 3,
	MissionInfo                              = 4,
	MissionManagers                          = 5,
	MissionGenerators                        = 6,
	SpawnGroup                               = 7,
	CharacterPart                            = 8,
	ColorSwatch                              = 9,
	EnemyMutators                            = 10,
	WeaponData                               = 11,
	AmmoData                                 = 12,
	EmoteData                                = 13,
	ConsumableData                           = 14,
	SchematicData                            = 15,
	IngredientData                           = 16,
	PersistentResourceData                   = 17,
	GadgetData                               = 18,
	TrapData                                 = 19,
	TraitData                                = 20,
	HeroTypeData                             = 21,
	WorkerTypeData                           = 22,
	TokenTypeData                            = 23,
	TownBuildingData                         = 24,
	CurrencyData                             = 25,
	AlterationData                           = 26,
	CharacterCosmeticData                    = 27,
	DecoData                                 = 28,
	CardPackData                             = 29,
	WorldItems                               = 30,
	HeroSpecializationData                   = 31,
	QuestData                                = 32,
	OutpostData                              = 33,
	Max_None                                 = 34,
	EFortObjectLibrary_MAX                   = 35,
};

// Enum FortniteGame.EFortOptionGenerationResult
// NumValues: 0x0004
enum class EFortOptionGenerationResult : uint8
{
	NoOptionsGenerated                       = 0,
	NewOptionsGenerated                      = 1,
	ExistingOptionsGenerated                 = 2,
	EFortOptionGenerationResult_MAX          = 3,
};

// Enum FortniteGame.EWorldOnlineState
// NumValues: 0x0003
enum class EWorldOnlineState : uint8
{
	Offline                                  = 0,
	Online                                   = 1,
	EWorldOnlineState_MAX                    = 2,
};

// Enum FortniteGame.TInteractionType
// NumValues: 0x0006
enum class ETInteractionType : uint8
{
	IT_NoInteraction                         = 0,
	IT_Simple                                = 1,
	IT_LongPress                             = 2,
	IT_BuildingEdit                          = 3,
	IT_BuildingImprovement                   = 4,
	IT_MAX                                   = 5,
};

// Enum FortniteGame.EFortFeedbackBroadcastFilter
// NumValues: 0x0007
enum class EFortFeedbackBroadcastFilter : uint8
{
	FFBF_Speaker                             = 0,
	FFBF_SpeakerTeam                         = 1,
	FFBF_SpeakerAdressee                     = 2,
	FFBF_HumanPvP_Team1                      = 3,
	FFBF_HumanPvP_Team2                      = 4,
	FFBF_None_Max                            = 5,
	FFBF_MAX                                 = 6,
};

// Enum FortniteGame.EFortFeedbackSelectionMethod
// NumValues: 0x0009
enum class EFortFeedbackSelectionMethod : uint8
{
	FFSM_Instigator                          = 0,
	FFSM_Recipient                           = 1,
	FFSM_TeamWitness                         = 2,
	FFSM_EnemyWitness                        = 3,
	FFSM_Random                              = 4,
	FFSM_Priority_IRTE                       = 5,
	FFSM_AllPawns                            = 6,
	FFSM_Announcer                           = 7,
	FFSM_MAX                                 = 8,
};

// Enum FortniteGame.EFortFeedbackAddressee
// NumValues: 0x0004
enum class EFortFeedbackAddressee : uint8
{
	FFA_Instigator                           = 0,
	FFA_Recipient                            = 1,
	FFA_All                                  = 2,
	FFA_MAX                                  = 3,
};

// Enum FortniteGame.EFortFeedbackContext
// NumValues: 0x0008
enum class EFortFeedbackContext : uint8
{
	FFC_Instigator                           = 0,
	FFC_Recipient                            = 1,
	FFC_TeamWitness                          = 2,
	FFC_EnemyWitness                         = 3,
	FFC_AllPawns                             = 4,
	FFC_Announcer                            = 5,
	FFC_None_Max                             = 6,
	FFC_MAX                                  = 7,
};

// Enum FortniteGame.EFortMiniMapIconRotation
// NumValues: 0x0004
enum class EFortMiniMapIconRotation : uint8
{
	EFMMIR_None                              = 0,
	EFMMIR_Absolute                          = 1,
	EFMMIR_Relative                          = 2,
	EFMMIR_MAX                               = 3,
};

// Enum FortniteGame.EFortMiniMapContext
// NumValues: 0x0003
enum class EFortMiniMapContext : uint8
{
	EFMC_MiniMap                             = 0,
	EFMC_FullScreenMap                       = 1,
	EFMC_MAX                                 = 2,
};

// Enum FortniteGame.EFortMiniMapHeight
// NumValues: 0x0004
enum class EFortMiniMapHeight : uint8
{
	EFMH_Equal                               = 0,
	EFMH_Below                               = 1,
	EFMH_Above                               = 2,
	EFMH_MAX                                 = 3,
};

// Enum FortniteGame.EFortPIDValueGraphElements
// NumValues: 0x0004
enum class EFortPIDValueGraphElements : uint8
{
	Proportional                             = 0,
	Integral                                 = 1,
	Max_None                                 = 2,
	EFortPIDValueGraphElements_MAX           = 3,
};

// Enum FortniteGame.EFortIntensityGraphElements
// NumValues: 0x0004
enum class EFortIntensityGraphElements : uint8
{
	ActualIntensity                          = 0,
	DesiredIntensity                         = 1,
	Max_None                                 = 2,
	EFortIntensityGraphElements_MAX          = 3,
};

// Enum FortniteGame.EFortContributionGraphElements
// NumValues: 0x0007
enum class EFortContributionGraphElements : uint8
{
	ProportionalLine                         = 0,
	IntegralLine                             = 1,
	TotalLine                                = 2,
	PendingLine                              = 3,
	ActionLine                               = 4,
	Max_None                                 = 5,
	EFortContributionGraphElements_MAX       = 6,
};

// Enum FortniteGame.EFortFactorContributionType
// NumValues: 0x0005
enum class EFortFactorContributionType : uint8
{
	CurrentValue_Direct                      = 0,
	CurrentValue_Inverse                     = 1,
	AverageValue_Direct                      = 2,
	AverageValue_Inverse                     = 3,
	EFortFactorContributionType_MAX          = 4,
};

// Enum FortniteGame.EFortAIDirectorFactor
// NumValues: 0x000E
enum class EFortAIDirectorFactor : uint8
{
	PlayerDamageThreat                       = 0,
	ObjectiveDamageThreat                    = 1,
	ObjectivePathCost                        = 2,
	PlayerPathCost                           = 3,
	PlayerMovement                           = 4,
	TrapsEffective                           = 5,
	PlayerWander                             = 6,
	NearbyEnemyPresence                      = 7,
	OffensiveResources                       = 8,
	DefensiveResources                       = 9,
	Boredom                                  = 10,
	ArtilleryVulnerability                   = 11,
	Max_None                                 = 12,
	EFortAIDirectorFactor_MAX                = 13,
};

// Enum FortniteGame.EFortCombatFactors
// NumValues: 0x000E
enum class EFortCombatFactors : uint8
{
	PlayerDamageThreat                       = 0,
	ObjectiveDamageThreat                    = 1,
	ObjectivePathCost                        = 2,
	PlayerPathCost                           = 3,
	PlayerMovement                           = 4,
	TrapsEffective                           = 5,
	PlayerWander                             = 6,
	NearbyEnemyPresence                      = 7,
	OffensiveResources                       = 8,
	DefensiveResources                       = 9,
	Boredom                                  = 10,
	ArtilleryVulnerability                   = 11,
	Max_None                                 = 12,
	EFortCombatFactors_MAX                   = 13,
};

// Enum FortniteGame.EFortCombatEvents
// NumValues: 0x0018
enum class EFortCombatEvents : uint8
{
	HuskFollowing                            = 0,
	SmasherFollowing                         = 1,
	TrollFollowing                           = 2,
	TakerFollowing                           = 3,
	PlayerTakeDamage                         = 4,
	PlayerHealth                             = 5,
	PlayerLookAtEnemy                        = 6,
	PlayerDamageEnemy                        = 7,
	PlayerKilledEnemy                        = 8,
	AtlasTakeDamage                          = 9,
	AtlasHealth                              = 10,
	AtlasDestroyed                           = 11,
	TrapFiring                               = 12,
	BuildingTakeDamage                       = 13,
	FoodHealingPotential                     = 14,
	PlayerAmmo                               = 15,
	EnemiesNear                              = 16,
	PlayerMovement                           = 17,
	BuildingDamagedNearObjective             = 18,
	TrapDamageEnemy                          = 19,
	ObjectivePathCost                        = 20,
	PlayerPathCost                           = 21,
	Max_None                                 = 22,
	EFortCombatEvents_MAX                    = 23,
};

// Enum FortniteGame.EFortAIDirectorEventParticipant
// NumValues: 0x0005
enum class EFortAIDirectorEventParticipant : uint8
{
	Target                                   = 0,
	Source                                   = 1,
	Either                                   = 2,
	Max_None                                 = 3,
	EFortAIDirectorEventParticipant_MAX      = 4,
};

// Enum FortniteGame.EFortCombatThresholds
// NumValues: 0x0006
enum class EFortCombatThresholds : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	Extreme                                  = 3,
	Max_None                                 = 4,
	EFortCombatThresholds_MAX                = 5,
};

// Enum FortniteGame.EFortElementalDamageType
// NumValues: 0x0006
enum class EFortElementalDamageType : uint8
{
	None                                     = 0,
	Fire                                     = 1,
	Ice                                      = 2,
	Lightning                                = 3,
	MAX                                      = 4,
	EFortElementalDamageType_MAX             = 5,
};

// Enum FortniteGame.EFortDamageZone
// NumValues: 0x0006
enum class EFortDamageZone : uint8
{
	Light                                    = 0,
	Normal                                   = 1,
	Critical                                 = 2,
	Vulnerability                            = 3,
	Max                                      = 4,
	EFortDamageZone_MAX                      = 5,
};

// Enum FortniteGame.EFortBaseWeaponDamage
// NumValues: 0x0003
enum class EFortBaseWeaponDamage : uint8
{
	Combat                                   = 0,
	Environmental                            = 1,
	EFortBaseWeaponDamage_MAX                = 2,
};

// Enum FortniteGame.EFortWeaponCoreAnimation
// NumValues: 0x000F
enum class EFortWeaponCoreAnimation : uint8
{
	Melee                                    = 0,
	Pistol                                   = 1,
	Shotgun                                  = 2,
	PaperBlueprint                           = 3,
	Rifle                                    = 4,
	MeleeOneHand                             = 5,
	MachinePistol                            = 6,
	RocketLauncher                           = 7,
	GrenadeLauncher                          = 8,
	GoingCommando                            = 9,
	AssaultRifle                             = 10,
	TacticalShotgun                          = 11,
	SniperRifle                              = 12,
	TrapPlacement                            = 13,
	EFortWeaponCoreAnimation_MAX             = 14,
};

// Enum FortniteGame.EFortReloadFXState
// NumValues: 0x0005
enum class EFortReloadFXState : uint8
{
	ReloadStart                              = 0,
	ReloadCartridge                          = 1,
	ReloadEnd                                = 2,
	Max_None                                 = 3,
	EFortReloadFXState_MAX                   = 4,
};

// Enum FortniteGame.EFortWeaponSoundState
// NumValues: 0x0005
enum class EFortWeaponSoundState : uint8
{
	Normal                                   = 0,
	LowAmmo                                  = 1,
	Degraded                                 = 2,
	Max_None                                 = 3,
	EFortWeaponSoundState_MAX                = 4,
};

// Enum FortniteGame.EFortMontageInputType
// NumValues: 0x0004
enum class EFortMontageInputType : uint8
{
	WindowClickOrHold                        = 0,
	WindowHoldOnly                           = 1,
	InstantClick                             = 2,
	EFortMontageInputType_MAX                = 3,
};

// Enum FortniteGame.EFortAbilitySourceType
// NumValues: 0x0007
enum class EFortAbilitySourceType : uint8
{
	Unknown                                  = 0,
	Weapon                                   = 1,
	Gadget                                   = 2,
	Pawn                                     = 3,
	Building                                 = 4,
	HomeBase                                 = 5,
	EFortAbilitySourceType_MAX               = 6,
};

// Enum FortniteGame.EFortAbilityTargetingSource
// NumValues: 0x0008
enum class EFortAbilityTargetingSource : uint8
{
	Camera                                   = 0,
	PawnForward                              = 1,
	PawnTowardsFocus                         = 2,
	WeaponForward                            = 3,
	WeaponTowardsFocus                       = 4,
	Custom                                   = 5,
	Max_None                                 = 6,
	EFortAbilityTargetingSource_MAX          = 7,
};

// Enum FortniteGame.EFortAmmoType
// NumValues: 0x0006
enum class EFortAmmoType : uint8
{
	Pistol                                   = 0,
	Shotgun                                  = 1,
	Assault                                  = 2,
	Sniper                                   = 3,
	Energy                                   = 4,
	EFortAmmoType_MAX                        = 5,
};

// Enum FortniteGame.EFortPawnStasisMode
// NumValues: 0x0004
enum class EFortPawnStasisMode : uint8
{
	None                                     = 0,
	NoMovement                               = 1,
	NoMovementOrTurning                      = 2,
	EFortPawnStasisMode_MAX                  = 3,
};

// Enum FortniteGame.EFortNameValidationResult
// NumValues: 0x0005
enum class EFortNameValidationResult : uint8
{
	Valid                                    = 0,
	TooShort                                 = 1,
	TooLong                                  = 2,
	IllegalCharacter                         = 3,
	EFortNameValidationResult_MAX            = 4,
};

// Enum FortniteGame.EFortProximityBasedGEApplicationType
// NumValues: 0x0004
enum class EFortProximityBasedGEApplicationType : uint8
{
	ApplyOnProximityPulse                    = 0,
	ApplyOnProximityTouch                    = 1,
	ApplyOnlyDuringProximityTouch            = 2,
	EFortProximityBasedGEApplicationType_MAX = 3,
};

// Enum FortniteGame.ENavigationObstacleOverride
// NumValues: 0x0004
enum class ENavigationObstacleOverride : uint8
{
	UseMeshSettings                          = 0,
	ForceEnabled                             = 1,
	ForceDisabled                            = 2,
	ENavigationObstacleOverride_MAX          = 3,
};

// Enum FortniteGame.EDynamicBuildingPlacementType
// NumValues: 0x0004
enum class EDynamicBuildingPlacementType : uint8
{
	CountsTowardsBounds                      = 0,
	DestroyIfColliding                       = 1,
	DestroyAnythingThatCollides              = 2,
	EDynamicBuildingPlacementType_MAX        = 3,
};

// Enum FortniteGame.EUnlockRules
// NumValues: 0x0004
enum class EUnlockRules : uint8
{
	UR_Reset                                 = 0,
	UR_MaintainState                         = 1,
	UR_ResetDeactivate                       = 2,
	UR_MAX                                   = 3,
};

// Enum FortniteGame.EContentionRules
// NumValues: 0x0003
enum class EContentionRules : uint8
{
	CR_MajorityWins                          = 0,
	CR_OneTeamOnlyWins                       = 1,
	CR_MAX                                   = 2,
};

// Enum FortniteGame.EFortItemCollectorBehavior
// NumValues: 0x0004
enum class EFortItemCollectorBehavior : uint8
{
	FirstToGoal                              = 0,
	FreeForAll                               = 1,
	TugOfWar                                 = 2,
	EFortItemCollectorBehavior_MAX           = 3,
};

// Enum FortniteGame.EFortItemCollectorState
// NumValues: 0x0006
enum class EFortItemCollectorState : uint8
{
	CanInteract                              = 0,
	Active                                   = 1,
	Inactive                                 = 2,
	Captured                                 = 3,
	Invalid                                  = 4,
	EFortItemCollectorState_MAX              = 5,
};

// Enum FortniteGame.EFortStrategicBuildingLevelCriteriaDisplayRepresentation
// NumValues: 0x0003
enum class EFortStrategicBuildingLevelCriteriaDisplayRepresentation : uint8
{
	Integer                                  = 0,
	Float                                    = 1,
	EFortStrategicBuildingLevelCriteriaDisplayRepresentation_MAX = 2,
};

// Enum FortniteGame.EFortStrategicBuildingCategory
// NumValues: 0x0004
enum class EFortStrategicBuildingCategory : uint8
{
	Defensive                                = 0,
	Offensive                                = 1,
	Utility                                  = 2,
	EFortStrategicBuildingCategory_MAX       = 3,
};

// Enum FortniteGame.EFortRiftSlotStatus
// NumValues: 0x0004
enum class EFortRiftSlotStatus : uint8
{
	Reserved                                 = 0,
	Occupied                                 = 1,
	Max_None                                 = 2,
	EFortRiftSlotStatus_MAX                  = 3,
};

// Enum FortniteGame.EBuildingNavObstacleType
// NumValues: 0x0005
enum class EBuildingNavObstacleType : uint8
{
	UnwalkableAll                            = 0,
	UnwalkableHuskOnly                       = 1,
	SmashWhenLowHeight                       = 2,
	SmashAll                                 = 3,
	EBuildingNavObstacleType_MAX             = 4,
};

// Enum FortniteGame.EBuildingReplacementType
// NumValues: 0x0004
enum class EBuildingReplacementType : uint8
{
	BRT_None                                 = 0,
	BRT_Edited                               = 1,
	BRT_Conversion                           = 2,
	BRT_MAX                                  = 3,
};

// Enum FortniteGame.EPlacementType
// NumValues: 0x0004
enum class EPlacementType : uint8
{
	Free                                     = 0,
	Grid                                     = 1,
	None                                     = 2,
	EPlacementType_MAX                       = 3,
};

// Enum FortniteGame.EBuildingAttachmentType
// NumValues: 0x0008
enum class EBuildingAttachmentType : uint8
{
	ATTACH_Floor                             = 0,
	ATTACH_Wall                              = 1,
	ATTACH_Ceiling                           = 2,
	ATTACH_Corner                            = 3,
	ATTACH_All                               = 4,
	ATTACH_WallThenFloor                     = 5,
	ATTACH_None                              = 6,
	ATTACH_MAX                               = 7,
};

// Enum FortniteGame.EBuildingAttachmentSlot
// NumValues: 0x0005
enum class EBuildingAttachmentSlot : uint8
{
	SLOT_Floor                               = 0,
	SLOT_Wall                                = 1,
	SLOT_Ceiling                             = 2,
	SLOT_None                                = 3,
	SLOT_MAX                                 = 4,
};

// Enum FortniteGame.EBuildingAnim
// NumValues: 0x0008
enum class EBuildingAnim : uint8
{
	EBA_None                                 = 0,
	EBA_Building                             = 1,
	EBA_Breaking                             = 2,
	EBA_Destruction                          = 3,
	EBA_Placement                            = 4,
	EBA_BuildingCheat                        = 5,
	EBA_LODEffect                            = 6,
	EBA_MAX                                  = 7,
};

// Enum FortniteGame.ELootQuotaLevel
// NumValues: 0x000A
enum class ELootQuotaLevel : uint8
{
	Unlimited                                = 0,
	Level1                                   = 1,
	Level2                                   = 2,
	Level3                                   = 3,
	Level4                                   = 4,
	Level5                                   = 5,
	Level6                                   = 6,
	Level7                                   = 7,
	NumLevels                                = 8,
	ELootQuotaLevel_MAX                      = 9,
};

// Enum FortniteGame.EBuildingFoundationType
// NumValues: 0x0005
enum class EBuildingFoundationType : uint8
{
	BFT_3x3                                  = 0,
	BFT_5x5                                  = 1,
	BFT_5x10                                 = 2,
	BFT_None                                 = 3,
	BFT_MAX                                  = 4,
};

// Enum FortniteGame.ETrackVerticality
// NumValues: 0x0004
enum class ETrackVerticality : uint8
{
	Floor                                    = 0,
	Stair                                    = 1,
	Max_None                                 = 2,
	ETrackVerticality_MAX                    = 3,
};

// Enum FortniteGame.ETrackIncline
// NumValues: 0x0005
enum class ETrackIncline : uint8
{
	Flat                                     = 0,
	Up                                       = 1,
	Down                                     = 2,
	Max_None                                 = 3,
	ETrackIncline_MAX                        = 4,
};

// Enum FortniteGame.ETrackPieceType
// NumValues: 0x0005
enum class ETrackPieceType : uint8
{
	None                                     = 0,
	Straight                                 = 1,
	Turn                                     = 2,
	Max_None                                 = 3,
	ETrackPieceType_MAX                      = 4,
};

// Enum FortniteGame.ETrackDirection
// NumValues: 0x0006
enum class ETrackDirection : uint8
{
	Up                                       = 0,
	Right                                    = 1,
	Down                                     = 2,
	Left                                     = 3,
	Max_None                                 = 4,
	ETrackDirection_MAX                      = 5,
};

// Enum FortniteGame.EFortAbilityTargetSelectionUsage
// NumValues: 0x0004
enum class EFortAbilityTargetSelectionUsage : uint8
{
	BothTargetingAndCanHit                   = 0,
	OnlyTargeting                            = 1,
	OnlyCanHit                               = 2,
	EFortAbilityTargetSelectionUsage_MAX     = 3,
};

// Enum FortniteGame.FDynamicBuildOrder
// NumValues: 0x0005
enum class EFDynamicBuildOrder : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	None                                     = 3,
	FDynamicBuildOrder_MAX                   = 4,
};

// Enum FortniteGame.EBinaryToggleValues
// NumValues: 0x0004
enum class EBinaryToggleValues : uint8
{
	BTV_Active                               = 0,
	BTV_Inactive                             = 1,
	BTV_Either                               = 2,
	BTV_MAX                                  = 3,
};

// Enum FortniteGame.EAuxIndicatorStates
// NumValues: 0x0005
enum class EAuxIndicatorStates : uint8
{
	AIS_GuidingArrow                         = 0,
	AIS_ConfirmedArrow                       = 1,
	AIS_Inactive                             = 2,
	AIS_Active                               = 3,
	AIS_MAX                                  = 4,
};

// Enum FortniteGame.EColorSwatchType
// NumValues: 0x0006
enum class EColorSwatchType : uint8
{
	EColorSwatchType_Skin                    = 0,
	EColorSwatchType_Hair                    = 1,
	EColorSwatchType_BodyAccessory           = 2,
	EColorSwatchType_Accessory               = 3,
	EColorSwatchType_NumTypes                = 4,
	EColorSwatchType_MAX                     = 5,
};

// Enum FortniteGame.ECharacterColorSwatchType
// NumValues: 0x0004
enum class ECharacterColorSwatchType : uint8
{
	ECharacterColorSwatchType_Skin           = 0,
	ECharacterColorSwatchType_Hair           = 1,
	ECharacterColorSwatchType_NumTypes       = 2,
	ECharacterColorSwatchType_MAX            = 3,
};

// Enum FortniteGame.EAccessoryColorName
// NumValues: 0x0005
enum class EAccessoryColorName : uint8
{
	EAccessoryColorName_AccessoryColor1      = 0,
	EAccessoryColorName_AccessoryColor2      = 1,
	EAccessoryColorName_AccessoryColor3      = 2,
	EAccessoryColorName_NumTypes             = 3,
	EAccessoryColorName_MAX                  = 4,
};

// Enum FortniteGame.ECustomHatType
// NumValues: 0x0007
enum class ECustomHatType : uint8
{
	ECustomHatType_None                      = 0,
	ECustomHatType_Cap                       = 1,
	ECustomHatType_Helmet                    = 2,
	ECustomHatType_Mask                      = 3,
	ECustomHatType_Hat                       = 4,
	ECustomHatType_HeadReplacement           = 5,
	ECustomHatType_MAX                       = 6,
};

// Enum FortniteGame.EClothingColorName
// NumValues: 0x0004
enum class EClothingColorName : uint8
{
	EClothingColorName_AccessoryColor1       = 0,
	EClothingColorName_AccessoryColor2       = 1,
	EClothingColorName_NumTypes              = 2,
	EClothingColorName_MAX                   = 3,
};

// Enum FortniteGame.EFortItemPropertyValueType
// NumValues: 0x0007
enum class EFortItemPropertyValueType : uint8
{
	Float                                    = 0,
	Integer                                  = 1,
	Text                                     = 2,
	Color                                    = 3,
	TextArray                                = 4,
	ImageBrush                               = 5,
	EFortItemPropertyValueType_MAX           = 6,
};

// Enum FortniteGame.EFortItemPropertyUnit
// NumValues: 0x0003
enum class EFortItemPropertyUnit : uint8
{
	NoUnit                                   = 0,
	TimeSeconds                              = 1,
	EFortItemPropertyUnit_MAX                = 2,
};

// Enum FortniteGame.EFortItemPropertyDisplay
// NumValues: 0x000B
enum class EFortItemPropertyDisplay : uint8
{
	BasicInt                                 = 0,
	NegativeImpliesInfiniteInt               = 1,
	BasicFloat                               = 2,
	NegativeImpliesInfiniteFloat             = 3,
	BasicString                              = 4,
	NormalizedPercentage                     = 5,
	Color                                    = 6,
	StringArray                              = 7,
	SlateBrush                               = 8,
	DoNotDisplay                             = 9,
	EFortItemPropertyDisplay_MAX             = 10,
};

// Enum FortniteGame.EFortStatDisplayType
// NumValues: 0x0006
enum class EFortStatDisplayType : uint8
{
	Category                                 = 0,
	Buff                                     = 1,
	Debuff                                   = 2,
	Neutral                                  = 3,
	DoNotDisplay                             = 4,
	EFortStatDisplayType_MAX                 = 5,
};

// Enum FortniteGame.EPathUndermineEvent
// NumValues: 0x0004
enum class EPathUndermineEvent : uint8
{
	Predicted                                = 0,
	Started                                  = 1,
	Finished                                 = 2,
	EPathUndermineEvent_MAX                  = 3,
};

// Enum FortniteGame.EPathObstacleAction
// NumValues: 0x0005
enum class EPathObstacleAction : uint8
{
	Melee                                    = 0,
	Ignore                                   = 1,
	AbortMoveAsFailed                        = 2,
	FinishMoveAsSucceeded                    = 3,
	EPathObstacleAction_MAX                  = 4,
};

// Enum FortniteGame.EFortDirectedMovementSpace
// NumValues: 0x0005
enum class EFortDirectedMovementSpace : uint8
{
	WorldSpace                               = 0,
	ActorLocRelative                         = 1,
	ActorLocRotRelative                      = 2,
	CameraRelative                           = 3,
	EFortDirectedMovementSpace_MAX           = 4,
};

// Enum FortniteGame.EFortAbilityCostSource
// NumValues: 0x0006
enum class EFortAbilityCostSource : uint8
{
	Stamina                                  = 0,
	Durability                               = 1,
	AmmoMagazine                             = 2,
	AmmoPrimary                              = 3,
	Item                                     = 4,
	EFortAbilityCostSource_MAX               = 5,
};

// Enum FortniteGame.EFortGameplayAbilityActivation
// NumValues: 0x0004
enum class EFortGameplayAbilityActivation : uint8
{
	Passive                                  = 0,
	Triggered                                = 1,
	Active                                   = 2,
	EFortGameplayAbilityActivation_MAX       = 3,
};

// Enum FortniteGame.EFortGameplayAbilityMontageSectionToPlay
// NumValues: 0x0004
enum class EFortGameplayAbilityMontageSectionToPlay : uint8
{
	FirstSection                             = 0,
	RandomSection                            = 1,
	TestedRandomSection                      = 2,
	EFortGameplayAbilityMontageSectionToPlay_MAX = 3,
};

// Enum FortniteGame.EFortressAIType
// NumValues: 0x0007
enum class EFortressAIType : uint8
{
	FAT_Dormant                              = 0,
	FAT_Cleaner                              = 1,
	FAT_DayWanderer                          = 2,
	FAT_NightWanderer                        = 3,
	FAT_DebugOnly                            = 4,
	FAT_Encounter                            = 5,
	FAT_MAX                                  = 6,
};

// Enum FortniteGame.EFortAILODLevel
// NumValues: 0x0005
enum class EFortAILODLevel : uint8
{
	Invalid                                  = 0,
	Lowest                                   = 1,
	Lower                                    = 2,
	Normal                                   = 3,
	EFortAILODLevel_MAX                      = 4,
};

// Enum FortniteGame.EWardAffectType
// NumValues: 0x0004
enum class EWardAffectType : uint8
{
	AffectsBothStartAndEndPoints             = 0,
	AffectsOnlyStartPoints                   = 1,
	AffectsOnlyEndPoints                     = 2,
	EWardAffectType_MAX                      = 3,
};

// Enum FortniteGame.EFortEncounterUtilityDesire
// NumValues: 0x0006
enum class EFortEncounterUtilityDesire : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	VeryHigh                                 = 3,
	Max_None                                 = 4,
	EFortEncounterUtilityDesire_MAX          = 5,
};

// Enum FortniteGame.EFortAIDirectorFactorContribution
// NumValues: 0x0003
enum class EFortAIDirectorFactorContribution : uint8
{
	Direct                                   = 0,
	Inverse                                  = 1,
	EFortAIDirectorFactorContribution_MAX    = 2,
};

// Enum FortniteGame.EFortAIDirectorEventContribution
// NumValues: 0x0003
enum class EFortAIDirectorEventContribution : uint8
{
	Increment                                = 0,
	Set                                      = 1,
	EFortAIDirectorEventContribution_MAX     = 2,
};

// Enum FortniteGame.ETagGoalScoringCategory
// NumValues: 0x0004
enum class ETagGoalScoringCategory : uint8
{
	Ignore                                   = 0,
	HighInterest                             = 1,
	NumCategories                            = 2,
	ETagGoalScoringCategory_MAX              = 3,
};

// Enum FortniteGame.EFortIntensityCurveSequenceType
// NumValues: 0x0005
enum class EFortIntensityCurveSequenceType : uint8
{
	Sequence                                 = 0,
	Loop                                     = 1,
	Random                                   = 2,
	Max_None                                 = 3,
	EFortIntensityCurveSequenceType_MAX      = 4,
};

// Enum FortniteGame.EFortAIWaveProgressSection
// NumValues: 0x0004
enum class EFortAIWaveProgressSection : uint8
{
	SectionOne                               = 0,
	SectionTwo                               = 1,
	Max_None                                 = 2,
	EFortAIWaveProgressSection_MAX           = 3,
};

// Enum FortniteGame.EFortEncounterState
// NumValues: 0x0007
enum class EFortEncounterState : uint8
{
	Uninitialized                            = 0,
	InitializingProperties                   = 1,
	InitializingRiftManager                  = 2,
	AwaitingActivation                       = 3,
	Active                                   = 4,
	Max_None                                 = 5,
	EFortEncounterState_MAX                  = 6,
};

// Enum FortniteGame.EFortEncounterPacingState
// NumValues: 0x0006
enum class EFortEncounterPacingState : uint8
{
	Ramp                                     = 0,
	Peak                                     = 1,
	Fade                                     = 2,
	Rest                                     = 3,
	Max_None                                 = 4,
	EFortEncounterPacingState_MAX            = 5,
};

// Enum FortniteGame.EFortThreatDeactivationType
// NumValues: 0x0003
enum class EFortThreatDeactivationType : uint8
{
	Off                                      = 0,
	Dormant                                  = 1,
	EFortThreatDeactivationType_MAX          = 2,
};

// Enum FortniteGame.EFortEncounterSequenceResult
// NumValues: 0x0003
enum class EFortEncounterSequenceResult : uint8
{
	Success                                  = 0,
	FailedEncounterInProgress                = 1,
	EFortEncounterSequenceResult_MAX         = 2,
};

// Enum FortniteGame.EAssignmentCreationResult
// NumValues: 0x0004
enum class EAssignmentCreationResult : uint8
{
	AssignmentNotFoundOrCreated              = 0,
	AssignmentCreated                        = 1,
	AssignmentFound                          = 2,
	EAssignmentCreationResult_MAX            = 3,
};

// Enum FortniteGame.ECorePerceptionTypes
// NumValues: 0x0008
enum class ECorePerceptionTypes : uint8
{
	Sight                                    = 0,
	Hearing                                  = 1,
	Damage                                   = 2,
	Touch                                    = 3,
	Team                                     = 4,
	Prediction                               = 5,
	MAX                                      = 6,
	ECorePerceptionTypes_MAX                 = 7,
};

// Enum FortniteGame.EStatRecordingPeriod
// NumValues: 0x0007
enum class EStatRecordingPeriod : uint8
{
	Minute                                   = 0,
	Life                                     = 1,
	Map                                      = 2,
	Campaign                                 = 3,
	Persistent                               = 4,
	Max                                      = 5,
	EStatRecordingPeriod_MAX                 = 6,
};

// Enum FortniteGame.EStatMod
// NumValues: 0x0004
enum class EStatMod : uint8
{
	Delta                                    = 0,
	Set                                      = 1,
	Maximum                                  = 2,
	EStatMod_MAX                             = 3,
};

// Enum FortniteGame.EMontageInterrupt
// NumValues: 0x0004
enum class EMontageInterrupt : uint8
{
	Any                                      = 0,
	RootMotionOnly                           = 1,
	None                                     = 2,
	EMontageInterrupt_MAX                    = 3,
};

// Enum FortniteGame.ETargetDistanceComparisonType
// NumValues: 0x0004
enum class ETargetDistanceComparisonType : uint8
{
	TwoDimensions                            = 0,
	ThreeDimensions                          = 1,
	CollisionHalfHeightMultiplier            = 2,
	ETargetDistanceComparisonType_MAX        = 3,
};

// Enum FortniteGame.EFrontEndCamera
// NumValues: 0x000E
enum class EFrontEndCamera : uint8
{
	Invalid                                  = 0,
	HomeBase                                 = 1,
	MissionControl                           = 2,
	Store                                    = 3,
	Vault                                    = 4,
	Heroes                                   = 5,
	Login                                    = 6,
	TutorialPhaseOne                         = 7,
	TutorialPhaseTwo                         = 8,
	TutorialPhaseThree                       = 9,
	HeroSelect                               = 10,
	Party                                    = 11,
	WorldMap                                 = 12,
	EFrontEndCamera_MAX                      = 13,
};

// Enum FortniteGame.ECameraOrigin
// NumValues: 0x0003
enum class ECameraOrigin : uint8
{
	ViewTargetTransform                      = 0,
	BoneTransform                            = 1,
	ECameraOrigin_MAX                        = 2,
};

// Enum FortniteGame.EFortDamageNumberType
// NumValues: 0x0006
enum class EFortDamageNumberType : uint8
{
	None                                     = 0,
	Pawn                                     = 1,
	Building                                 = 2,
	Player                                   = 3,
	Shield                                   = 4,
	EFortDamageNumberType_MAX                = 5,
};

// Enum FortniteGame.EFortEventNotificationParameter
// NumValues: 0x0004
enum class EFortEventNotificationParameter : uint8
{
	ENPAR_None                               = 0,
	ENPAR_SchematicItemGuid                  = 1,
	ENPAR_ActionBinding                      = 2,
	ENPAR_MAX                                = 3,
};

// Enum FortniteGame.EFortEventNotificationPriority
// NumValues: 0x0003
enum class EFortEventNotificationPriority : uint8
{
	ENP_Normal                               = 0,
	ENP_High                                 = 1,
	ENP_MAX                                  = 2,
};

// Enum FortniteGame.EFortServerGameMode
// NumValues: 0x0006
enum class EFortServerGameMode : uint8
{
	Idle                                     = 0,
	LobbyPvE                                 = 1,
	LobbyPvP                                 = 2,
	ZonePvP                                  = 3,
	ZonePvE                                  = 4,
	EFortServerGameMode_MAX                  = 5,
};

// Enum FortniteGame.EFortInputPreset
// NumValues: 0x0003
enum class EFortInputPreset : uint8
{
	Default                                  = 0,
	Preset1                                  = 1,
	EFortInputPreset_MAX                     = 2,
};

// Enum FortniteGame.EFortCharacterCosmetic
// NumValues: 0x000A
enum class EFortCharacterCosmetic : uint8
{
	Head                                     = 0,
	Texture                                  = 1,
	Color                                    = 2,
	Trinket                                  = 3,
	Face                                     = 4,
	Gadget                                   = 5,
	Body                                     = 6,
	ClassFlair                               = 7,
	Max_Invalid                              = 8,
	EFortCharacterCosmetic_MAX               = 9,
};

// Enum FortniteGame.EFortQuestType
// NumValues: 0x0005
enum class EFortQuestType : uint8
{
	Task                                     = 0,
	DailyQuest                               = 1,
	Achievement                              = 2,
	Onboarding                               = 3,
	EFortQuestType_MAX                       = 4,
};

// Enum FortniteGame.ELobbyMissionGeneratorDetailsRequirement
// NumValues: 0x0004
enum class ELobbyMissionGeneratorDetailsRequirement : uint8
{
	Unknown                                  = 0,
	NotRequired                              = 1,
	Required                                 = 2,
	ELobbyMissionGeneratorDetailsRequirement_MAX = 3,
};

// Enum FortniteGame.EFortMatchmakingType
// NumValues: 0x0004
enum class EFortMatchmakingType : uint8
{
	Gathering                                = 0,
	CriticalMission                          = 1,
	Session                                  = 2,
	EFortMatchmakingType_MAX                 = 3,
};

// Enum FortniteGame.EFortCheatMissionGenType
// NumValues: 0x0004
enum class EFortCheatMissionGenType : uint8
{
	NewGeneration                            = 0,
	OldGeneration                            = 1,
	Max_None                                 = 2,
	EFortCheatMissionGenType_MAX             = 3,
};

// Enum FortniteGame.EPollActorsInVolumeTypes
// NumValues: 0x0004
enum class EPollActorsInVolumeTypes : uint8
{
	DesignerPlacedOnly                       = 0,
	PlayerBuiltOnly                          = 1,
	All                                      = 2,
	EPollActorsInVolumeTypes_MAX             = 3,
};

// Enum FortniteGame.EMissionReplyTypes
// NumValues: 0x0003
enum class EMissionReplyTypes : uint8
{
	Handled                                  = 0,
	NotHandled                               = 1,
	EMissionReplyTypes_MAX                   = 2,
};

// Enum FortniteGame.ETimerOverrideSetting
// NumValues: 0x0004
enum class ETimerOverrideSetting : uint8
{
	DefaultBehavior                          = 0,
	ForceShow                                = 1,
	ForceHide                                = 2,
	ETimerOverrideSetting_MAX                = 3,
};

// Enum FortniteGame.EMusicChannel
// NumValues: 0x0005
enum class EMusicChannel : uint8
{
	A                                        = 0,
	B                                        = 1,
	Stinger                                  = 2,
	Max_None                                 = 3,
	EMusicChannel_MAX                        = 4,
};

// Enum FortniteGame.EMusicFadeStyles
// NumValues: 0x0004
enum class EMusicFadeStyles : uint8
{
	CrossFade                                = 0,
	FadeOutThenIn                            = 1,
	Max_None                                 = 2,
	EMusicFadeStyles_MAX                     = 3,
};

// Enum FortniteGame.EFortAreaFlag
// NumValues: 0x0006
enum class EFortAreaFlag : uint8
{
	Default                                  = 0,
	Obstacle                                 = 1,
	Smashable                                = 2,
	Unwalkable                               = 3,
	Interactable                             = 4,
	EFortAreaFlag_MAX                        = 5,
};

// Enum FortniteGame.EFortNavLinkPattern
// NumValues: 0x0005
enum class EFortNavLinkPattern : uint8
{
	Floor                                    = 0,
	Stairs                                   = 1,
	Roof                                     = 2,
	Manual                                   = 3,
	EFortNavLinkPattern_MAX                  = 4,
};

// Enum FortniteGame.EFortNamedNavmesh
// NumValues: 0x0004
enum class EFortNamedNavmesh : uint8
{
	Husk                                     = 0,
	Smasher                                  = 1,
	MAX                                      = 2,
	EFortNamedNavmesh_MAX                    = 3,
};

// Enum FortniteGame.EFortPartyMemberLocation
// NumValues: 0x0006
enum class EFortPartyMemberLocation : uint8
{
	PreLobby                                 = 0,
	ConnectingToLobby                        = 1,
	Lobby                                    = 2,
	JoiningGame                              = 3,
	InGame                                   = 4,
	EFortPartyMemberLocation_MAX             = 5,
};

// Enum FortniteGame.EFortAnnouncerTeamVocalChords
// NumValues: 0x0004
enum class EFortAnnouncerTeamVocalChords : uint8
{
	Team1                                    = 0,
	Team2                                    = 1,
	Max_None                                 = 2,
	EFortAnnouncerTeamVocalChords_MAX        = 3,
};

// Enum FortniteGame.EFortContextualReticleTypes
// NumValues: 0x000A
enum class EFortContextualReticleTypes : uint8
{
	FCR_GenericFailure                       = 0,
	FCR_Upgrade                              = 1,
	FCR_Repair                               = 2,
	FCR_Locked                               = 3,
	FCR_Placement                            = 4,
	FCR_Edit                                 = 5,
	FCR_NoTarget                             = 6,
	FCR_InProgress                           = 7,
	FCR_None                                 = 8,
	FCR_MAX                                  = 9,
};

// Enum FortniteGame.EFortPointsFromNavGraphGoalPathDistanceFilterOperator
// NumValues: 0x0003
enum class EFortPointsFromNavGraphGoalPathDistanceFilterOperator : uint8
{
	AllGoalsInRange                          = 0,
	AnyGoalInRange                           = 1,
	EFortPointsFromNavGraphGoalPathDistanceFilterOperator_MAX = 2,
};

// Enum FortniteGame.EFortTestGoalActorDot
// NumValues: 0x0003
enum class EFortTestGoalActorDot : uint8
{
	Dot3D                                    = 0,
	Dot2D                                    = 1,
	EFortTestGoalActorDot_MAX                = 2,
};

// Enum FortniteGame.EDistanceMode
// NumValues: 0x0004
enum class EDistanceMode : uint8
{
	DistItemToContext                        = 0,
	DistItemGoalActorToContext               = 1,
	DistItemToItemGoalActor                  = 2,
	EDistanceMode_MAX                        = 3,
};

// Enum FortniteGame.ECountAIAssignedToType
// NumValues: 0x0004
enum class ECountAIAssignedToType : uint8
{
	Goal                                     = 0,
	Actor                                    = 1,
	Assignment                               = 2,
	ECountAIAssignedToType_MAX               = 3,
};

// Enum FortniteGame.EFortScriptedActionEnvironment
// NumValues: 0x0005
enum class EFortScriptedActionEnvironment : uint8
{
	FrontEnd                                 = 0,
	GameServer                               = 1,
	GameClient                               = 2,
	Max_None                                 = 3,
	EFortScriptedActionEnvironment_MAX       = 4,
};

// Enum FortniteGame.EFortScriptedActionSource
// NumValues: 0x0005
enum class EFortScriptedActionSource : uint8
{
	Quest                                    = 0,
	Token                                    = 1,
	Manual                                   = 2,
	Max_None                                 = 3,
	EFortScriptedActionSource_MAX            = 4,
};

// Enum FortniteGame.EFortSocialItemPresenceStatus
// NumValues: 0x0005
enum class EFortSocialItemPresenceStatus : uint8
{
	Offline                                  = 0,
	InGame                                   = 1,
	Away                                     = 2,
	Unknown                                  = 3,
	EFortSocialItemPresenceStatus_MAX        = 4,
};

// Enum FortniteGame.EFortSocialItemType
// NumValues: 0x0006
enum class EFortSocialItemType : uint8
{
	Header                                   = 0,
	Friend                                   = 1,
	PartyInvite                              = 2,
	RecentPlayer                             = 3,
	Max                                      = 4,
	EFortSocialItemType_MAX                  = 5,
};

// Enum FortniteGame.EFortEventConditionType
// NumValues: 0x0003
enum class EFortEventConditionType : uint8
{
	EFEC_StatCompare                         = 0,
	EFEC_CanCraft                            = 1,
	EFEC_MAX                                 = 2,
};

// Enum FortniteGame.EFortCompare
// NumValues: 0x0006
enum class EFortCompare : uint8
{
	EFC_LessThan                             = 0,
	EFC_LessThanOrEqual                      = 1,
	EFC_GreaterThan                          = 2,
	EFC_GreaterThanOrEqual                   = 3,
	EFC_Equals                               = 4,
	EFC_MAX                                  = 5,
};

// Enum FortniteGame.EFortEventRepeat
// NumValues: 0x0006
enum class EFortEventRepeat : uint8
{
	EFER_Inactive                            = 0,
	EFER_Always                              = 1,
	EFER_OncePerPlayer                       = 2,
	EFER_OncePerCampaign                     = 3,
	EFER_OncePerMap                          = 4,
	EFER_MAX                                 = 5,
};

// Enum FortniteGame.EFortVisibilityBehavior
// NumValues: 0x0004
enum class EFortVisibilityBehavior : uint8
{
	Proximity                                = 0,
	OnceSeenAlwaysSeen                       = 1,
	Invalid                                  = 2,
	EFortVisibilityBehavior_MAX              = 3,
};

// Enum FortniteGame.EFortReloadMontageSection
// NumValues: 0x0004
enum class EFortReloadMontageSection : uint8
{
	Intro                                    = 0,
	Loop                                     = 1,
	Outro                                    = 2,
	EFortReloadMontageSection_MAX            = 3,
};

// Enum FortniteGame.EFortWorldManagerState
// NumValues: 0x0008
enum class EFortWorldManagerState : uint8
{
	WMS_Created                              = 0,
	WMS_QueryingWorld                        = 1,
	WMS_WorldQueryComplete                   = 2,
	WMS_CreatingNewWorld                     = 3,
	WMS_LoadingExistingWorld                 = 4,
	WMS_Running                              = 5,
	WMS_Failed                               = 6,
	WMS_MAX                                  = 7,
};

// Enum FortniteGame.EFortLevelStreamingState
// NumValues: 0x0007
enum class EFortLevelStreamingState : uint8
{
	LSS_Unloaded                             = 0,
	LSS_Loaded                               = 1,
	LSS_FoundationsUpdated                   = 2,
	LSS_NewActorsCreatedButNotUpdated        = 3,
	LSS_AllUpdated                           = 4,
	LSS_Ready                                = 5,
	LSS_MAX                                  = 6,
};

// Enum FortniteGame.EFortWorldRecordState
// NumValues: 0x000F
enum class EFortWorldRecordState : uint8
{
	StartProcessing                          = 0,
	WaitingForResponse                       = 1,
	RetrievingTheaterInformation             = 2,
	RetrievingZoneInformation                = 3,
	RetrievingWorldMetadata                  = 4,
	EnumeratingCloudFiles                    = 5,
	LoadingWorldRecord                       = 6,
	LoadingZoneRecord                        = 7,
	SavingZoneRecord                         = 8,
	SavingWorldRecord                        = 9,
	SavingPlayerProfiles                     = 10,
	Succeeded                                = 11,
	Failed                                   = 12,
	Max_None                                 = 13,
	EFortWorldRecordState_MAX                = 14,
};

// Enum FortniteGame.EFortWorldRecordAction
// NumValues: 0x0006
enum class EFortWorldRecordAction : uint8
{
	LoadWorldOnly                            = 0,
	SaveWorldOnly                            = 1,
	SaveZoneAndWorld                         = 2,
	LoadZoneAndWorld                         = 3,
	Max_None                                 = 4,
	EFortWorldRecordAction_MAX               = 5,
};

// Enum FortniteGame.EFortZoneType
// NumValues: 0x0006
enum class EFortZoneType : uint8
{
	PVE                                      = 0,
	PVP                                      = 1,
	Keep                                     = 2,
	SingleZone                               = 3,
	Max_None                                 = 4,
	EFortZoneType_MAX                        = 5,
};

// Enum FortniteGame.EWorkerEmploy
// NumValues: 0x0004
enum class EWorkerEmploy : uint8
{
	None                                     = 0,
	CurrentBuilding                          = 1,
	OtherBuilding                            = 2,
	EWorkerEmploy_MAX                        = 3,
};

// Enum FortniteGame.EMyTownBuildingActorDisplayState
// NumValues: 0x0004
enum class EMyTownBuildingActorDisplayState : uint8
{
	Standard                                 = 0,
	Custom                                   = 1,
	Hidden                                   = 2,
	EMyTownBuildingActorDisplayState_MAX     = 3,
};

// ScriptStruct FortniteGame.ProjectileEventData
// 0x001C (0x001C - 0x0000)
struct FProjectileEventData final
{
public:
	class AFortProjectileBase*                    SpawnedProjectile;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     Hits;                                              // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ExplodedActors;                                    // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProjectileEventData) == 0x000004, "Wrong alignment on FProjectileEventData");
static_assert(sizeof(FProjectileEventData) == 0x00001C, "Wrong size on FProjectileEventData");
static_assert(offsetof(FProjectileEventData, SpawnedProjectile) == 0x000000, "Member 'FProjectileEventData::SpawnedProjectile' has a wrong offset!");
static_assert(offsetof(FProjectileEventData, Hits) == 0x000004, "Member 'FProjectileEventData::Hits' has a wrong offset!");
static_assert(offsetof(FProjectileEventData, ExplodedActors) == 0x000010, "Member 'FProjectileEventData::ExplodedActors' has a wrong offset!");

// ScriptStruct FortniteGame.OnTimeHitInfo
// 0x0030 (0x0030 - 0x0000)
struct FOnTimeHitInfo final
{
public:
	TDelegate<void()>                             TimeCallback;                                      // 0x0000(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x20];                                      // 0x0010(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOnTimeHitInfo) == 0x000004, "Wrong alignment on FOnTimeHitInfo");
static_assert(sizeof(FOnTimeHitInfo) == 0x000030, "Wrong size on FOnTimeHitInfo");
static_assert(offsetof(FOnTimeHitInfo, TimeCallback) == 0x000000, "Member 'FOnTimeHitInfo::TimeCallback' has a wrong offset!");

// ScriptStruct FortniteGame.FortUIFeedback
// 0x0018 (0x0018 - 0x0000)
struct FFortUIFeedback
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Audio;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeIn;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOut;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIFeedback) == 0x000004, "Wrong alignment on FFortUIFeedback");
static_assert(sizeof(FFortUIFeedback) == 0x000018, "Wrong size on FFortUIFeedback");
static_assert(offsetof(FFortUIFeedback, Name) == 0x000000, "Member 'FFortUIFeedback::Name' has a wrong offset!");
static_assert(offsetof(FFortUIFeedback, Audio) == 0x000008, "Member 'FFortUIFeedback::Audio' has a wrong offset!");
static_assert(offsetof(FFortUIFeedback, bLooping) == 0x00000C, "Member 'FFortUIFeedback::bLooping' has a wrong offset!");
static_assert(offsetof(FFortUIFeedback, FadeIn) == 0x000010, "Member 'FFortUIFeedback::FadeIn' has a wrong offset!");
static_assert(offsetof(FFortUIFeedback, FadeOut) == 0x000014, "Member 'FFortUIFeedback::FadeOut' has a wrong offset!");

// ScriptStruct FortniteGame.FortGiftingInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortGiftingInfo
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortHeroType*                          HeroType;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGiftingInfo) == 0x000004, "Wrong alignment on FFortGiftingInfo");
static_assert(sizeof(FFortGiftingInfo) == 0x000018, "Wrong size on FFortGiftingInfo");
static_assert(offsetof(FFortGiftingInfo, PlayerName) == 0x000000, "Member 'FFortGiftingInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FFortGiftingInfo, HeroType) == 0x00000C, "Member 'FFortGiftingInfo::HeroType' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemEntryStateValue
// 0x0010 (0x0010 - 0x0000)
struct FFortItemEntryStateValue final
{
public:
	int32                                         IntValue;                                          // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   NameValue;                                         // 0x0004(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFortItemEntryState                           StateType;                                         // 0x000C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemEntryStateValue) == 0x000004, "Wrong alignment on FFortItemEntryStateValue");
static_assert(sizeof(FFortItemEntryStateValue) == 0x000010, "Wrong size on FFortItemEntryStateValue");
static_assert(offsetof(FFortItemEntryStateValue, IntValue) == 0x000000, "Member 'FFortItemEntryStateValue::IntValue' has a wrong offset!");
static_assert(offsetof(FFortItemEntryStateValue, NameValue) == 0x000004, "Member 'FFortItemEntryStateValue::NameValue' has a wrong offset!");
static_assert(offsetof(FFortItemEntryStateValue, StateType) == 0x00000C, "Member 'FFortItemEntryStateValue::StateType' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemEntry
// 0x0070 (0x007C - 0x000C)
struct FFortItemEntry final : public FFastArraySerializerItem
{
public:
	int32                                         Count;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Durability;                                        // 0x0014(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Level;                                             // 0x0018(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LoadedAmmo;                                        // 0x001C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UFortAlterationItemDefinition*>  AlterationDefinitions;                             // 0x0020(0x000C)(ZeroConstructor, SaveGame, NativeAccessSpecifierPrivate)
	class FString                                 ItemSource;                                        // 0x002C(0x000C)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  ItemGuid;                                          // 0x0038(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bInOverflow;                                       // 0x0048(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bInStorageVault;                                   // 0x0049(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bIsReplicatedCopy;                                 // 0x004A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bIsDirty;                                          // 0x004B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FFortGiftingInfo                       GiftingInfo;                                       // 0x004C(0x0018)(NativeAccessSpecifierPrivate)
	TArray<struct FFortItemEntryStateValue>       StateValues;                                       // 0x0064(0x000C)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AFortInventory>          ParentInventory;                                   // 0x0070(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FGameplayAbilitySpecHandle             GameplayAbilitySpecHandle;                         // 0x0078(0x0004)(Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortItemEntry) == 0x000004, "Wrong alignment on FFortItemEntry");
static_assert(sizeof(FFortItemEntry) == 0x00007C, "Wrong size on FFortItemEntry");
static_assert(offsetof(FFortItemEntry, Count) == 0x00000C, "Member 'FFortItemEntry::Count' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, ItemDefinition) == 0x000010, "Member 'FFortItemEntry::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, Durability) == 0x000014, "Member 'FFortItemEntry::Durability' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, Level) == 0x000018, "Member 'FFortItemEntry::Level' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, LoadedAmmo) == 0x00001C, "Member 'FFortItemEntry::LoadedAmmo' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, AlterationDefinitions) == 0x000020, "Member 'FFortItemEntry::AlterationDefinitions' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, ItemSource) == 0x00002C, "Member 'FFortItemEntry::ItemSource' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, ItemGuid) == 0x000038, "Member 'FFortItemEntry::ItemGuid' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, bInOverflow) == 0x000048, "Member 'FFortItemEntry::bInOverflow' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, bInStorageVault) == 0x000049, "Member 'FFortItemEntry::bInStorageVault' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, bIsReplicatedCopy) == 0x00004A, "Member 'FFortItemEntry::bIsReplicatedCopy' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, bIsDirty) == 0x00004B, "Member 'FFortItemEntry::bIsDirty' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, GiftingInfo) == 0x00004C, "Member 'FFortItemEntry::GiftingInfo' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, StateValues) == 0x000064, "Member 'FFortItemEntry::StateValues' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, ParentInventory) == 0x000070, "Member 'FFortItemEntry::ParentInventory' has a wrong offset!");
static_assert(offsetof(FFortItemEntry, GameplayAbilitySpecHandle) == 0x000078, "Member 'FFortItemEntry::GameplayAbilitySpecHandle' has a wrong offset!");

// ScriptStruct FortniteGame.FortRewardActivity
// 0x004C (0x004C - 0x0000)
struct FFortRewardActivity final
{
public:
	EFortRewardActivityType                       ActivityType;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ActivityGuid;                                      // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0014(0x000C)(NativeAccessSpecifierPublic)
	class FText                                   DescriptionText;                                   // 0x0020(0x000C)(NativeAccessSpecifierPublic)
	float                                         RewardDisplayTime;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortItemEntry>                 RewardItems;                                       // 0x0030(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortItemEntry>                 MissedRewardItems;                                 // 0x003C(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	EFortCompletionResult                         ActivityCompletionResult;                          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRewardActivity) == 0x000004, "Wrong alignment on FFortRewardActivity");
static_assert(sizeof(FFortRewardActivity) == 0x00004C, "Wrong size on FFortRewardActivity");
static_assert(offsetof(FFortRewardActivity, ActivityType) == 0x000000, "Member 'FFortRewardActivity::ActivityType' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, ActivityGuid) == 0x000004, "Member 'FFortRewardActivity::ActivityGuid' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, TitleText) == 0x000014, "Member 'FFortRewardActivity::TitleText' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, DescriptionText) == 0x000020, "Member 'FFortRewardActivity::DescriptionText' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, RewardDisplayTime) == 0x00002C, "Member 'FFortRewardActivity::RewardDisplayTime' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, RewardItems) == 0x000030, "Member 'FFortRewardActivity::RewardItems' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, MissedRewardItems) == 0x00003C, "Member 'FFortRewardActivity::MissedRewardItems' has a wrong offset!");
static_assert(offsetof(FFortRewardActivity, ActivityCompletionResult) == 0x000048, "Member 'FFortRewardActivity::ActivityCompletionResult' has a wrong offset!");

// ScriptStruct FortniteGame.FortPublicAccountInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortPublicAccountInfo
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalXp;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalXpForLevel;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelXp;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelXpForLevel;                                   // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPublicAccountInfo) == 0x000004, "Wrong alignment on FFortPublicAccountInfo");
static_assert(sizeof(FFortPublicAccountInfo) == 0x000018, "Wrong size on FFortPublicAccountInfo");
static_assert(offsetof(FFortPublicAccountInfo, Level) == 0x000000, "Member 'FFortPublicAccountInfo::Level' has a wrong offset!");
static_assert(offsetof(FFortPublicAccountInfo, MaxLevel) == 0x000004, "Member 'FFortPublicAccountInfo::MaxLevel' has a wrong offset!");
static_assert(offsetof(FFortPublicAccountInfo, TotalXp) == 0x000008, "Member 'FFortPublicAccountInfo::TotalXp' has a wrong offset!");
static_assert(offsetof(FFortPublicAccountInfo, TotalXpForLevel) == 0x00000C, "Member 'FFortPublicAccountInfo::TotalXpForLevel' has a wrong offset!");
static_assert(offsetof(FFortPublicAccountInfo, LevelXp) == 0x000010, "Member 'FFortPublicAccountInfo::LevelXp' has a wrong offset!");
static_assert(offsetof(FFortPublicAccountInfo, LevelXpForLevel) == 0x000014, "Member 'FFortPublicAccountInfo::LevelXpForLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortPrivateAccountInfo
// 0x0004 (0x001C - 0x0018)
struct FFortPrivateAccountInfo final : public FFortPublicAccountInfo
{
public:
	int32                                         MtxBalance;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPrivateAccountInfo) == 0x000004, "Wrong alignment on FFortPrivateAccountInfo");
static_assert(sizeof(FFortPrivateAccountInfo) == 0x00001C, "Wrong size on FFortPrivateAccountInfo");
static_assert(offsetof(FFortPrivateAccountInfo, MtxBalance) == 0x000018, "Member 'FFortPrivateAccountInfo::MtxBalance' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterSpawnGroupCap
// 0x0018 (0x0018 - 0x0000)
struct FFortAIEncounterSpawnGroupCap final
{
public:
	struct FCurveTableRowHandle                   MinSpawnGroupNumberCap;                            // 0x0000(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   MaxSpawnGroupNumberCap;                            // 0x000C(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterSpawnGroupCap) == 0x000004, "Wrong alignment on FFortAIEncounterSpawnGroupCap");
static_assert(sizeof(FFortAIEncounterSpawnGroupCap) == 0x000018, "Wrong size on FFortAIEncounterSpawnGroupCap");
static_assert(offsetof(FFortAIEncounterSpawnGroupCap, MinSpawnGroupNumberCap) == 0x000000, "Member 'FFortAIEncounterSpawnGroupCap::MinSpawnGroupNumberCap' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCap, MaxSpawnGroupNumberCap) == 0x00000C, "Member 'FFortAIEncounterSpawnGroupCap::MaxSpawnGroupNumberCap' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterSpawnGroupCapsCategory
// 0x0048 (0x0048 - 0x0000)
struct FFortAIEncounterSpawnGroupCapsCategory final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0034)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bApplyGroupPopulationCurveToCategoryMax;           // 0x0034(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortAIEncounterSpawnGroupCap>  SpawnGroupCapsPerPlayerCount;                      // 0x0038(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         NumActiveCategorySpawnGroups;                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterSpawnGroupCapsCategory) == 0x000004, "Wrong alignment on FFortAIEncounterSpawnGroupCapsCategory");
static_assert(sizeof(FFortAIEncounterSpawnGroupCapsCategory) == 0x000048, "Wrong size on FFortAIEncounterSpawnGroupCapsCategory");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, TagQuery) == 0x000000, "Member 'FFortAIEncounterSpawnGroupCapsCategory::TagQuery' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, bApplyGroupPopulationCurveToCategoryMax) == 0x000034, "Member 'FFortAIEncounterSpawnGroupCapsCategory::bApplyGroupPopulationCurveToCategoryMax' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, SpawnGroupCapsPerPlayerCount) == 0x000038, "Member 'FFortAIEncounterSpawnGroupCapsCategory::SpawnGroupCapsPerPlayerCount' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsCategory, NumActiveCategorySpawnGroups) == 0x000044, "Member 'FFortAIEncounterSpawnGroupCapsCategory::NumActiveCategorySpawnGroups' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIDirectorEvent
// 0x0010 (0x0010 - 0x0000)
struct FFortAIDirectorEvent final
{
public:
	EFortAIDirectorEvent                          Event;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EventSource;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventTarget;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EventValue;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIDirectorEvent) == 0x000004, "Wrong alignment on FFortAIDirectorEvent");
static_assert(sizeof(FFortAIDirectorEvent) == 0x000010, "Wrong size on FFortAIDirectorEvent");
static_assert(offsetof(FFortAIDirectorEvent, Event) == 0x000000, "Member 'FFortAIDirectorEvent::Event' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorEvent, EventSource) == 0x000004, "Member 'FFortAIDirectorEvent::EventSource' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorEvent, EventTarget) == 0x000008, "Member 'FFortAIDirectorEvent::EventTarget' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorEvent, EventValue) == 0x00000C, "Member 'FFortAIDirectorEvent::EventValue' has a wrong offset!");

// ScriptStruct FortniteGame.MMAttemptState
// 0x000C (0x000C - 0x0000)
struct FMMAttemptState final
{
public:
	int32                                         BestSessionIdx;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSearchResults;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingState                             State;                                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyReservationResult                       LastBeaconResponse;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMMAttemptState) == 0x000004, "Wrong alignment on FMMAttemptState");
static_assert(sizeof(FMMAttemptState) == 0x00000C, "Wrong size on FMMAttemptState");
static_assert(offsetof(FMMAttemptState, BestSessionIdx) == 0x000000, "Member 'FMMAttemptState::BestSessionIdx' has a wrong offset!");
static_assert(offsetof(FMMAttemptState, NumSearchResults) == 0x000004, "Member 'FMMAttemptState::NumSearchResults' has a wrong offset!");
static_assert(offsetof(FMMAttemptState, State) == 0x000008, "Member 'FMMAttemptState::State' has a wrong offset!");
static_assert(offsetof(FMMAttemptState, LastBeaconResponse) == 0x000009, "Member 'FMMAttemptState::LastBeaconResponse' has a wrong offset!");

// ScriptStruct FortniteGame.FortPickupEntryData
// 0x0028 (0x0028 - 0x0000)
struct FFortPickupEntryData final
{
public:
	struct FInterpCurveFloat                      FloatCurve;                                        // 0x0000(0x0014)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FGuid                                  PickupGuid;                                        // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         StartTime;                                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortPickupEntryData) == 0x000004, "Wrong alignment on FFortPickupEntryData");
static_assert(sizeof(FFortPickupEntryData) == 0x000028, "Wrong size on FFortPickupEntryData");
static_assert(offsetof(FFortPickupEntryData, FloatCurve) == 0x000000, "Member 'FFortPickupEntryData::FloatCurve' has a wrong offset!");
static_assert(offsetof(FFortPickupEntryData, PickupGuid) == 0x000014, "Member 'FFortPickupEntryData::PickupGuid' has a wrong offset!");
static_assert(offsetof(FFortPickupEntryData, StartTime) == 0x000024, "Member 'FFortPickupEntryData::StartTime' has a wrong offset!");

// ScriptStruct FortniteGame.ChoiceDataEntry
// 0x0028 (0x0028 - 0x0000)
struct FChoiceDataEntry final
{
public:
	class FText                                   ButtonText;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ButtonDescription;                                 // 0x000C(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ConfirmText;                                       // 0x0018(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRequireConfirmation;                              // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCloseAfterSelection;                              // 0x0026(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChoiceDataEntry) == 0x000004, "Wrong alignment on FChoiceDataEntry");
static_assert(sizeof(FChoiceDataEntry) == 0x000028, "Wrong size on FChoiceDataEntry");
static_assert(offsetof(FChoiceDataEntry, ButtonText) == 0x000000, "Member 'FChoiceDataEntry::ButtonText' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, ButtonDescription) == 0x00000C, "Member 'FChoiceDataEntry::ButtonDescription' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, ConfirmText) == 0x000018, "Member 'FChoiceDataEntry::ConfirmText' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, bEnabled) == 0x000024, "Member 'FChoiceDataEntry::bEnabled' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, bRequireConfirmation) == 0x000025, "Member 'FChoiceDataEntry::bRequireConfirmation' has a wrong offset!");
static_assert(offsetof(FChoiceDataEntry, bCloseAfterSelection) == 0x000026, "Member 'FChoiceDataEntry::bCloseAfterSelection' has a wrong offset!");

// ScriptStruct FortniteGame.WorldTileSubArray
// 0x000C (0x000C - 0x0000)
struct FWorldTileSubArray final
{
public:
	TArray<class AWorldTileFoundation*>           X;                                                 // 0x0000(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldTileSubArray) == 0x000004, "Wrong alignment on FWorldTileSubArray");
static_assert(sizeof(FWorldTileSubArray) == 0x00000C, "Wrong size on FWorldTileSubArray");
static_assert(offsetof(FWorldTileSubArray, X) == 0x000000, "Member 'FWorldTileSubArray::X' has a wrong offset!");

// ScriptStruct FortniteGame.TrackMovement
// 0x000C (0x000C - 0x0000)
struct FTrackMovement
{
public:
	class USplineComponent*                       CurrentSpline;                                     // 0x0000(0x0004)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceAlongSpline;                               // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseDirectionAlongSpline;                      // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackMovement) == 0x000004, "Wrong alignment on FTrackMovement");
static_assert(sizeof(FTrackMovement) == 0x00000C, "Wrong size on FTrackMovement");
static_assert(offsetof(FTrackMovement, CurrentSpline) == 0x000000, "Member 'FTrackMovement::CurrentSpline' has a wrong offset!");
static_assert(offsetof(FTrackMovement, DistanceAlongSpline) == 0x000004, "Member 'FTrackMovement::DistanceAlongSpline' has a wrong offset!");
static_assert(offsetof(FTrackMovement, bReverseDirectionAlongSpline) == 0x000008, "Member 'FTrackMovement::bReverseDirectionAlongSpline' has a wrong offset!");

// ScriptStruct FortniteGame.RepTrackMovement
// 0x0004 (0x0010 - 0x000C)
struct FRepTrackMovement final : public FTrackMovement
{
public:
	float                                         TimeStamp;                                         // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRepTrackMovement) == 0x000004, "Wrong alignment on FRepTrackMovement");
static_assert(sizeof(FRepTrackMovement) == 0x000010, "Wrong size on FRepTrackMovement");
static_assert(offsetof(FRepTrackMovement, TimeStamp) == 0x00000C, "Member 'FRepTrackMovement::TimeStamp' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBarAndSlot
// 0x0008 (0x0008 - 0x0000)
struct FQuickBarAndSlot final
{
public:
	EFortQuickBars                                QuickBarType;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuickBarSlot;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuickBarAndSlot) == 0x000004, "Wrong alignment on FQuickBarAndSlot");
static_assert(sizeof(FQuickBarAndSlot) == 0x000008, "Wrong size on FQuickBarAndSlot");
static_assert(offsetof(FQuickBarAndSlot, QuickBarType) == 0x000000, "Member 'FQuickBarAndSlot::QuickBarType' has a wrong offset!");
static_assert(offsetof(FQuickBarAndSlot, QuickBarSlot) == 0x000004, "Member 'FQuickBarAndSlot::QuickBarSlot' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerDeathReport
// 0x0018 (0x0018 - 0x0000)
struct FFortPlayerDeathReport final
{
public:
	float                                         ServerTimeForRespawn;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LethalDamage;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       KillerPlayerState;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              KillerPawn;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDroppedBackpack : 1;                              // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlayerDeathReport) == 0x000004, "Wrong alignment on FFortPlayerDeathReport");
static_assert(sizeof(FFortPlayerDeathReport) == 0x000018, "Wrong size on FFortPlayerDeathReport");
static_assert(offsetof(FFortPlayerDeathReport, ServerTimeForRespawn) == 0x000000, "Member 'FFortPlayerDeathReport::ServerTimeForRespawn' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, LethalDamage) == 0x000004, "Member 'FFortPlayerDeathReport::LethalDamage' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, KillerPlayerState) == 0x000008, "Member 'FFortPlayerDeathReport::KillerPlayerState' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, KillerPawn) == 0x00000C, "Member 'FFortPlayerDeathReport::KillerPawn' has a wrong offset!");
static_assert(offsetof(FFortPlayerDeathReport, DamageCauser) == 0x000010, "Member 'FFortPlayerDeathReport::DamageCauser' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingClassData
// 0x000C (0x000C - 0x0000)
struct FBuildingClassData final
{
public:
	TSubclassOf<class ABuildingActor>             BuildingClass;                                     // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousBuildingLevel;                             // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpgradeLevel;                                      // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingClassData) == 0x000004, "Wrong alignment on FBuildingClassData");
static_assert(sizeof(FBuildingClassData) == 0x00000C, "Wrong size on FBuildingClassData");
static_assert(offsetof(FBuildingClassData, BuildingClass) == 0x000000, "Member 'FBuildingClassData::BuildingClass' has a wrong offset!");
static_assert(offsetof(FBuildingClassData, PreviousBuildingLevel) == 0x000004, "Member 'FBuildingClassData::PreviousBuildingLevel' has a wrong offset!");
static_assert(offsetof(FBuildingClassData, UpgradeLevel) == 0x000008, "Member 'FBuildingClassData::UpgradeLevel' has a wrong offset!");

// ScriptStruct FortniteGame.MtxPackage
// 0x003C (0x003C - 0x0000)
struct FMtxPackage final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         TotalAmount;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusAmount;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Price;                                             // 0x0020(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SaleBasePrice;                                     // 0x0030(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMtxPackage) == 0x000004, "Wrong alignment on FMtxPackage");
static_assert(sizeof(FMtxPackage) == 0x00003C, "Wrong size on FMtxPackage");
static_assert(offsetof(FMtxPackage, OfferId) == 0x000000, "Member 'FMtxPackage::OfferId' has a wrong offset!");
static_assert(offsetof(FMtxPackage, Title) == 0x00000C, "Member 'FMtxPackage::Title' has a wrong offset!");
static_assert(offsetof(FMtxPackage, TotalAmount) == 0x000018, "Member 'FMtxPackage::TotalAmount' has a wrong offset!");
static_assert(offsetof(FMtxPackage, BonusAmount) == 0x00001C, "Member 'FMtxPackage::BonusAmount' has a wrong offset!");
static_assert(offsetof(FMtxPackage, Price) == 0x000020, "Member 'FMtxPackage::Price' has a wrong offset!");
static_assert(offsetof(FMtxPackage, SaleBasePrice) == 0x000030, "Member 'FMtxPackage::SaleBasePrice' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingUpgradeCost
// 0x000C (0x000C - 0x0000)
struct FBuildingUpgradeCost final
{
public:
	bool                                          bAchieved;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortPersistentResources                      Type;                                              // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cost;                                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Available;                                         // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingUpgradeCost) == 0x000004, "Wrong alignment on FBuildingUpgradeCost");
static_assert(sizeof(FBuildingUpgradeCost) == 0x00000C, "Wrong size on FBuildingUpgradeCost");
static_assert(offsetof(FBuildingUpgradeCost, bAchieved) == 0x000000, "Member 'FBuildingUpgradeCost::bAchieved' has a wrong offset!");
static_assert(offsetof(FBuildingUpgradeCost, Type) == 0x000001, "Member 'FBuildingUpgradeCost::Type' has a wrong offset!");
static_assert(offsetof(FBuildingUpgradeCost, Cost) == 0x000004, "Member 'FBuildingUpgradeCost::Cost' has a wrong offset!");
static_assert(offsetof(FBuildingUpgradeCost, Available) == 0x000008, "Member 'FBuildingUpgradeCost::Available' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackHandle
// 0x0010 (0x0010 - 0x0000)
struct FFortFeedbackHandle final
{
public:
	class UFortFeedbackBank*                      FeedbackBank;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadOnly;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBankDefined;                                      // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortFeedbackBroadcastFilter                  BroadcastFilterOverride;                           // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFeedbackHandle) == 0x000004, "Wrong alignment on FFortFeedbackHandle");
static_assert(sizeof(FFortFeedbackHandle) == 0x000010, "Wrong size on FFortFeedbackHandle");
static_assert(offsetof(FFortFeedbackHandle, FeedbackBank) == 0x000000, "Member 'FFortFeedbackHandle::FeedbackBank' has a wrong offset!");
static_assert(offsetof(FFortFeedbackHandle, EventName) == 0x000004, "Member 'FFortFeedbackHandle::EventName' has a wrong offset!");
static_assert(offsetof(FFortFeedbackHandle, bReadOnly) == 0x00000C, "Member 'FFortFeedbackHandle::bReadOnly' has a wrong offset!");
static_assert(offsetof(FFortFeedbackHandle, bBankDefined) == 0x00000D, "Member 'FFortFeedbackHandle::bBankDefined' has a wrong offset!");
static_assert(offsetof(FFortFeedbackHandle, BroadcastFilterOverride) == 0x00000E, "Member 'FFortFeedbackHandle::BroadcastFilterOverride' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackEventData
// 0x002C (0x002C - 0x0000)
struct FFortFeedbackEventData final
{
public:
	struct FFortFeedbackHandle                    Handle;                                            // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	float                                         ChanceToPlay;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinReplayTime;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWitnessDistance;                                // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptCurrentLine;                             // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCanBeInterrupted;                                 // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCanQue;                                           // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortFeedbackBroadcastFilter                  MultiplayerBroadcastFilter;                        // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackSelectionMethod                  ContextSelectionMethod;                            // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FeedbackDelay;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLastPlayed;                                    // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFeedbackEventData) == 0x000004, "Wrong alignment on FFortFeedbackEventData");
static_assert(sizeof(FFortFeedbackEventData) == 0x00002C, "Wrong size on FFortFeedbackEventData");
static_assert(offsetof(FFortFeedbackEventData, Handle) == 0x000000, "Member 'FFortFeedbackEventData::Handle' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, ChanceToPlay) == 0x000010, "Member 'FFortFeedbackEventData::ChanceToPlay' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, MinReplayTime) == 0x000014, "Member 'FFortFeedbackEventData::MinReplayTime' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, MaxWitnessDistance) == 0x000018, "Member 'FFortFeedbackEventData::MaxWitnessDistance' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, bInterruptCurrentLine) == 0x00001C, "Member 'FFortFeedbackEventData::bInterruptCurrentLine' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, bCanBeInterrupted) == 0x00001D, "Member 'FFortFeedbackEventData::bCanBeInterrupted' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, bCanQue) == 0x00001E, "Member 'FFortFeedbackEventData::bCanQue' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, MultiplayerBroadcastFilter) == 0x00001F, "Member 'FFortFeedbackEventData::MultiplayerBroadcastFilter' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, ContextSelectionMethod) == 0x000020, "Member 'FFortFeedbackEventData::ContextSelectionMethod' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, FeedbackDelay) == 0x000024, "Member 'FFortFeedbackEventData::FeedbackDelay' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEventData, TimeLastPlayed) == 0x000028, "Member 'FFortFeedbackEventData::TimeLastPlayed' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIAssignmentIdentifier
// 0x0020 (0x0020 - 0x0000)
struct FFortAIAssignmentIdentifier final
{
public:
	EAssignmentType                               AssignmentType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AssignmentGameplayTags;                            // 0x0004(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EFortTeam                                     AssignmentTeam;                                    // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIAssignmentIdentifier) == 0x000004, "Wrong alignment on FFortAIAssignmentIdentifier");
static_assert(sizeof(FFortAIAssignmentIdentifier) == 0x000020, "Wrong size on FFortAIAssignmentIdentifier");
static_assert(offsetof(FFortAIAssignmentIdentifier, AssignmentType) == 0x000000, "Member 'FFortAIAssignmentIdentifier::AssignmentType' has a wrong offset!");
static_assert(offsetof(FFortAIAssignmentIdentifier, AssignmentGameplayTags) == 0x000004, "Member 'FFortAIAssignmentIdentifier::AssignmentGameplayTags' has a wrong offset!");
static_assert(offsetof(FFortAIAssignmentIdentifier, AssignmentTeam) == 0x00001C, "Member 'FFortAIAssignmentIdentifier::AssignmentTeam' has a wrong offset!");

// ScriptStruct FortniteGame.FortInstensityCurveSequenceProgression
// 0x0010 (0x0010 - 0x0000)
struct FFortInstensityCurveSequenceProgression final
{
public:
	class UFortIntensityCurveSequence*            CurveSequence;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   SelectionWeight;                                   // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortInstensityCurveSequenceProgression) == 0x000004, "Wrong alignment on FFortInstensityCurveSequenceProgression");
static_assert(sizeof(FFortInstensityCurveSequenceProgression) == 0x000010, "Wrong size on FFortInstensityCurveSequenceProgression");
static_assert(offsetof(FFortInstensityCurveSequenceProgression, CurveSequence) == 0x000000, "Member 'FFortInstensityCurveSequenceProgression::CurveSequence' has a wrong offset!");
static_assert(offsetof(FFortInstensityCurveSequenceProgression, SelectionWeight) == 0x000004, "Member 'FFortInstensityCurveSequenceProgression::SelectionWeight' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownBannerData
// 0x00E8 (0x00E8 - 0x0000)
struct FMyTownBannerData final
{
public:
	struct FSlateBrush                            BigBannerImage;                                    // 0x0000(0x0074)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SmallBannerImage;                                  // 0x0074(0x0074)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyTownBannerData) == 0x000004, "Wrong alignment on FMyTownBannerData");
static_assert(sizeof(FMyTownBannerData) == 0x0000E8, "Wrong size on FMyTownBannerData");
static_assert(offsetof(FMyTownBannerData, BigBannerImage) == 0x000000, "Member 'FMyTownBannerData::BigBannerImage' has a wrong offset!");
static_assert(offsetof(FMyTownBannerData, SmallBannerImage) == 0x000074, "Member 'FMyTownBannerData::SmallBannerImage' has a wrong offset!");

// ScriptStruct FortniteGame.FortHomeBaseInfo
// 0x011C (0x011C - 0x0000)
struct FFortHomeBaseInfo final
{
public:
	int32                                         Rating;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyRating;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMyTownBannerData                      Banner;                                            // 0x0008(0x00E8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x00F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0100(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<int32>                                 Resources;                                         // 0x010C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ValidData;                                         // 0x0118(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortHomeBaseInfo) == 0x000004, "Wrong alignment on FFortHomeBaseInfo");
static_assert(sizeof(FFortHomeBaseInfo) == 0x00011C, "Wrong size on FFortHomeBaseInfo");
static_assert(offsetof(FFortHomeBaseInfo, Rating) == 0x000000, "Member 'FFortHomeBaseInfo::Rating' has a wrong offset!");
static_assert(offsetof(FFortHomeBaseInfo, PartyRating) == 0x000004, "Member 'FFortHomeBaseInfo::PartyRating' has a wrong offset!");
static_assert(offsetof(FFortHomeBaseInfo, Banner) == 0x000008, "Member 'FFortHomeBaseInfo::Banner' has a wrong offset!");
static_assert(offsetof(FFortHomeBaseInfo, Color) == 0x0000F0, "Member 'FFortHomeBaseInfo::Color' has a wrong offset!");
static_assert(offsetof(FFortHomeBaseInfo, Name) == 0x000100, "Member 'FFortHomeBaseInfo::Name' has a wrong offset!");
static_assert(offsetof(FFortHomeBaseInfo, Resources) == 0x00010C, "Member 'FFortHomeBaseInfo::Resources' has a wrong offset!");
static_assert(offsetof(FFortHomeBaseInfo, ValidData) == 0x000118, "Member 'FFortHomeBaseInfo::ValidData' has a wrong offset!");

// ScriptStruct FortniteGame.ChoiceData
// 0x0020 (0x0020 - 0x0000)
struct FChoiceData final
{
public:
	int32                                         MenuIdentifier;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCloseButton;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FChoiceDataEntry>               Items;                                             // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChoiceData) == 0x000004, "Wrong alignment on FChoiceData");
static_assert(sizeof(FChoiceData) == 0x000020, "Wrong size on FChoiceData");
static_assert(offsetof(FChoiceData, MenuIdentifier) == 0x000000, "Member 'FChoiceData::MenuIdentifier' has a wrong offset!");
static_assert(offsetof(FChoiceData, bShowCloseButton) == 0x000004, "Member 'FChoiceData::bShowCloseButton' has a wrong offset!");
static_assert(offsetof(FChoiceData, Title) == 0x000008, "Member 'FChoiceData::Title' has a wrong offset!");
static_assert(offsetof(FChoiceData, Items) == 0x000014, "Member 'FChoiceData::Items' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingUpgradeItemCost
// 0x0010 (0x0010 - 0x0000)
struct FBuildingUpgradeItemCost final
{
public:
	bool                                          bAchieved;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemDefinition*                    Item;                                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Available;                                         // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingUpgradeItemCost) == 0x000004, "Wrong alignment on FBuildingUpgradeItemCost");
static_assert(sizeof(FBuildingUpgradeItemCost) == 0x000010, "Wrong size on FBuildingUpgradeItemCost");
static_assert(offsetof(FBuildingUpgradeItemCost, bAchieved) == 0x000000, "Member 'FBuildingUpgradeItemCost::bAchieved' has a wrong offset!");
static_assert(offsetof(FBuildingUpgradeItemCost, Item) == 0x000004, "Member 'FBuildingUpgradeItemCost::Item' has a wrong offset!");
static_assert(offsetof(FBuildingUpgradeItemCost, Quantity) == 0x000008, "Member 'FBuildingUpgradeItemCost::Quantity' has a wrong offset!");
static_assert(offsetof(FBuildingUpgradeItemCost, Available) == 0x00000C, "Member 'FBuildingUpgradeItemCost::Available' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownBuildingUpgradeData
// 0x0038 (0x0038 - 0x0000)
struct FMyTownBuildingUpgradeData final : public FTableRowBase
{
public:
	class FName                                   BuildingName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingLevel;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredAccountLevel;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostPower;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostManufacturingParts;                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostSupplies;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CostFood;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredTownGPAttributes;                          // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredItems;                                     // 0x002C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyTownBuildingUpgradeData) == 0x000004, "Wrong alignment on FMyTownBuildingUpgradeData");
static_assert(sizeof(FMyTownBuildingUpgradeData) == 0x000038, "Wrong size on FMyTownBuildingUpgradeData");
static_assert(offsetof(FMyTownBuildingUpgradeData, BuildingName) == 0x000000, "Member 'FMyTownBuildingUpgradeData::BuildingName' has a wrong offset!");
static_assert(offsetof(FMyTownBuildingUpgradeData, BuildingLevel) == 0x000008, "Member 'FMyTownBuildingUpgradeData::BuildingLevel' has a wrong offset!");
static_assert(offsetof(FMyTownBuildingUpgradeData, RequiredAccountLevel) == 0x00000C, "Member 'FMyTownBuildingUpgradeData::RequiredAccountLevel' has a wrong offset!");
static_assert(offsetof(FMyTownBuildingUpgradeData, CostPower) == 0x000010, "Member 'FMyTownBuildingUpgradeData::CostPower' has a wrong offset!");
static_assert(offsetof(FMyTownBuildingUpgradeData, CostManufacturingParts) == 0x000014, "Member 'FMyTownBuildingUpgradeData::CostManufacturingParts' has a wrong offset!");
static_assert(offsetof(FMyTownBuildingUpgradeData, CostSupplies) == 0x000018, "Member 'FMyTownBuildingUpgradeData::CostSupplies' has a wrong offset!");
static_assert(offsetof(FMyTownBuildingUpgradeData, CostFood) == 0x00001C, "Member 'FMyTownBuildingUpgradeData::CostFood' has a wrong offset!");
static_assert(offsetof(FMyTownBuildingUpgradeData, RequiredTownGPAttributes) == 0x000020, "Member 'FMyTownBuildingUpgradeData::RequiredTownGPAttributes' has a wrong offset!");
static_assert(offsetof(FMyTownBuildingUpgradeData, RequiredItems) == 0x00002C, "Member 'FMyTownBuildingUpgradeData::RequiredItems' has a wrong offset!");

// ScriptStruct FortniteGame.FortTeamMemberInfo
// 0x01E8 (0x01E8 - 0x0000)
struct FFortTeamMemberInfo final
{
public:
	struct FUniqueNetIdRepl                       MemberUniqueId;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PartyLeaderUniqueId;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   PlayerName;                                        // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bPartyLeader;                                      // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsInZone;                                         // 0x001D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumPlayersInParty;                                 // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     TeamAffiliation;                                   // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HeroClass;                                         // 0x002C(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   HeroLevel;                                         // 0x0038(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         HeroXP;                                            // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              HeroItem;                                          // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortItem*>                      SelectedGadgetItems;                               // 0x004C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HeroIcon;                                          // 0x0058(0x0074)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortHomeBaseInfo                      HomeBaseInfo;                                      // 0x00CC(0x011C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTeamMemberInfo) == 0x000004, "Wrong alignment on FFortTeamMemberInfo");
static_assert(sizeof(FFortTeamMemberInfo) == 0x0001E8, "Wrong size on FFortTeamMemberInfo");
static_assert(offsetof(FFortTeamMemberInfo, MemberUniqueId) == 0x000000, "Member 'FFortTeamMemberInfo::MemberUniqueId' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, PartyLeaderUniqueId) == 0x000008, "Member 'FFortTeamMemberInfo::PartyLeaderUniqueId' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, PlayerName) == 0x000010, "Member 'FFortTeamMemberInfo::PlayerName' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, bPartyLeader) == 0x00001C, "Member 'FFortTeamMemberInfo::bPartyLeader' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, bIsInZone) == 0x00001D, "Member 'FFortTeamMemberInfo::bIsInZone' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, NumPlayersInParty) == 0x000020, "Member 'FFortTeamMemberInfo::NumPlayersInParty' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, PlayerIndex) == 0x000024, "Member 'FFortTeamMemberInfo::PlayerIndex' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, TeamAffiliation) == 0x000028, "Member 'FFortTeamMemberInfo::TeamAffiliation' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroClass) == 0x00002C, "Member 'FFortTeamMemberInfo::HeroClass' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroLevel) == 0x000038, "Member 'FFortTeamMemberInfo::HeroLevel' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroXP) == 0x000044, "Member 'FFortTeamMemberInfo::HeroXP' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroItem) == 0x000048, "Member 'FFortTeamMemberInfo::HeroItem' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, SelectedGadgetItems) == 0x00004C, "Member 'FFortTeamMemberInfo::SelectedGadgetItems' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HeroIcon) == 0x000058, "Member 'FFortTeamMemberInfo::HeroIcon' has a wrong offset!");
static_assert(offsetof(FFortTeamMemberInfo, HomeBaseInfo) == 0x0000CC, "Member 'FFortTeamMemberInfo::HomeBaseInfo' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingUpgradeAttribute
// 0x0018 (0x0018 - 0x0000)
struct FBuildingUpgradeAttribute final
{
public:
	bool                                          bAchieved;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x000C(0x000C)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingUpgradeAttribute) == 0x000004, "Wrong alignment on FBuildingUpgradeAttribute");
static_assert(sizeof(FBuildingUpgradeAttribute) == 0x000018, "Wrong size on FBuildingUpgradeAttribute");
static_assert(offsetof(FBuildingUpgradeAttribute, bAchieved) == 0x000000, "Member 'FBuildingUpgradeAttribute::bAchieved' has a wrong offset!");
static_assert(offsetof(FBuildingUpgradeAttribute, Level) == 0x000004, "Member 'FBuildingUpgradeAttribute::Level' has a wrong offset!");
static_assert(offsetof(FBuildingUpgradeAttribute, CurrentLevel) == 0x000008, "Member 'FBuildingUpgradeAttribute::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FBuildingUpgradeAttribute, DisplayName) == 0x00000C, "Member 'FBuildingUpgradeAttribute::DisplayName' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingUpgradeRequirementsForLevel
// 0x002C (0x002C - 0x0000)
struct FBuildingUpgradeRequirementsForLevel final
{
public:
	bool                                          bAllAchieved;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AccountLevel;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBuildingUpgradeAttribute>      Attributes;                                        // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBuildingUpgradeCost>           Costs;                                             // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBuildingUpgradeItemCost>       ItemCosts;                                         // 0x0020(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingUpgradeRequirementsForLevel) == 0x000004, "Wrong alignment on FBuildingUpgradeRequirementsForLevel");
static_assert(sizeof(FBuildingUpgradeRequirementsForLevel) == 0x00002C, "Wrong size on FBuildingUpgradeRequirementsForLevel");
static_assert(offsetof(FBuildingUpgradeRequirementsForLevel, bAllAchieved) == 0x000000, "Member 'FBuildingUpgradeRequirementsForLevel::bAllAchieved' has a wrong offset!");
static_assert(offsetof(FBuildingUpgradeRequirementsForLevel, AccountLevel) == 0x000004, "Member 'FBuildingUpgradeRequirementsForLevel::AccountLevel' has a wrong offset!");
static_assert(offsetof(FBuildingUpgradeRequirementsForLevel, Attributes) == 0x000008, "Member 'FBuildingUpgradeRequirementsForLevel::Attributes' has a wrong offset!");
static_assert(offsetof(FBuildingUpgradeRequirementsForLevel, Costs) == 0x000014, "Member 'FBuildingUpgradeRequirementsForLevel::Costs' has a wrong offset!");
static_assert(offsetof(FBuildingUpgradeRequirementsForLevel, ItemCosts) == 0x000020, "Member 'FBuildingUpgradeRequirementsForLevel::ItemCosts' has a wrong offset!");

// ScriptStruct FortniteGame.FortCharacterPartMontageInfo
// 0x0008 (0x0008 - 0x0000)
struct FFortCharacterPartMontageInfo final
{
public:
	EFortCustomPartType                           CharacterPart;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AnimMontage;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCharacterPartMontageInfo) == 0x000004, "Wrong alignment on FFortCharacterPartMontageInfo");
static_assert(sizeof(FFortCharacterPartMontageInfo) == 0x000008, "Wrong size on FFortCharacterPartMontageInfo");
static_assert(offsetof(FFortCharacterPartMontageInfo, CharacterPart) == 0x000000, "Member 'FFortCharacterPartMontageInfo::CharacterPart' has a wrong offset!");
static_assert(offsetof(FFortCharacterPartMontageInfo, AnimMontage) == 0x000004, "Member 'FFortCharacterPartMontageInfo::AnimMontage' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayAbilityMontageInfo
// 0x0044 (0x0044 - 0x0000)
struct FFortGameplayAbilityMontageInfo final
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimPlayRate;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimRootMotionTranslationScale;                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortGameplayAbilityMontageSectionToPlay      MontageSectionToPlay;                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideSection;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayRandomSection;                                // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortCharacterPartMontageInfo>  CharacterPartMontages;                             // 0x001C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x1C];                                      // 0x0028(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGameplayAbilityMontageInfo) == 0x000004, "Wrong alignment on FFortGameplayAbilityMontageInfo");
static_assert(sizeof(FFortGameplayAbilityMontageInfo) == 0x000044, "Wrong size on FFortGameplayAbilityMontageInfo");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, MontageToPlay) == 0x000000, "Member 'FFortGameplayAbilityMontageInfo::MontageToPlay' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, AnimPlayRate) == 0x000004, "Member 'FFortGameplayAbilityMontageInfo::AnimPlayRate' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, AnimRootMotionTranslationScale) == 0x000008, "Member 'FFortGameplayAbilityMontageInfo::AnimRootMotionTranslationScale' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, MontageSectionToPlay) == 0x00000C, "Member 'FFortGameplayAbilityMontageInfo::MontageSectionToPlay' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, OverrideSection) == 0x000010, "Member 'FFortGameplayAbilityMontageInfo::OverrideSection' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, bPlayRandomSection) == 0x000018, "Member 'FFortGameplayAbilityMontageInfo::bPlayRandomSection' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityMontageInfo, CharacterPartMontages) == 0x00001C, "Member 'FFortGameplayAbilityMontageInfo::CharacterPartMontages' has a wrong offset!");

// ScriptStruct FortniteGame.AIHotSpotSlotConfig
// 0x001C (0x001C - 0x0000)
struct FAIHotSpotSlotConfig final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortHotSpotSlot                              SlotType;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIHotSpotSlotConfig) == 0x000004, "Wrong alignment on FAIHotSpotSlotConfig");
static_assert(sizeof(FAIHotSpotSlotConfig) == 0x00001C, "Wrong size on FAIHotSpotSlotConfig");
static_assert(offsetof(FAIHotSpotSlotConfig, Offset) == 0x000000, "Member 'FAIHotSpotSlotConfig::Offset' has a wrong offset!");
static_assert(offsetof(FAIHotSpotSlotConfig, Direction) == 0x00000C, "Member 'FAIHotSpotSlotConfig::Direction' has a wrong offset!");
static_assert(offsetof(FAIHotSpotSlotConfig, SlotType) == 0x000018, "Member 'FAIHotSpotSlotConfig::SlotType' has a wrong offset!");

// ScriptStruct FortniteGame.FortAdvancementInfo
// 0x0020 (0x0020 - 0x0000)
struct FFortAdvancementInfo final
{
public:
	class FString                                 TemplateName;                                      // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstanceId;                                        // 0x000C(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XP;                                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAdvancementInfo) == 0x000004, "Wrong alignment on FFortAdvancementInfo");
static_assert(sizeof(FFortAdvancementInfo) == 0x000020, "Wrong size on FFortAdvancementInfo");
static_assert(offsetof(FFortAdvancementInfo, TemplateName) == 0x000000, "Member 'FFortAdvancementInfo::TemplateName' has a wrong offset!");
static_assert(offsetof(FFortAdvancementInfo, InstanceId) == 0x00000C, "Member 'FFortAdvancementInfo::InstanceId' has a wrong offset!");
static_assert(offsetof(FFortAdvancementInfo, Level) == 0x000018, "Member 'FFortAdvancementInfo::Level' has a wrong offset!");
static_assert(offsetof(FFortAdvancementInfo, XP) == 0x00001C, "Member 'FFortAdvancementInfo::XP' has a wrong offset!");

// ScriptStruct FortniteGame.MatchmakingParams
// 0x0064 (0x0064 - 0x0000)
struct FMatchmakingParams final
{
public:
	int32                                         ControllerId;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartySize;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DatacenterId;                                      // 0x0008(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlaylistId;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchmakingLevel;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionPowerMin;                                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionPowerMax;                                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TheaterId;                                         // 0x0024(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZoneInstanceId;                                    // 0x0030(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WUID;                                              // 0x003C(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       WorldOwnerId;                                      // 0x0048(0x0008)(NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0050(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingStartLocation                     StartWith;                                         // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakingFlags                             Flags;                                             // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChanceToHostOverride;                              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingParams) == 0x000004, "Wrong alignment on FMatchmakingParams");
static_assert(sizeof(FMatchmakingParams) == 0x000064, "Wrong size on FMatchmakingParams");
static_assert(offsetof(FMatchmakingParams, ControllerId) == 0x000000, "Member 'FMatchmakingParams::ControllerId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, PartySize) == 0x000004, "Member 'FMatchmakingParams::PartySize' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, DatacenterId) == 0x000008, "Member 'FMatchmakingParams::DatacenterId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, PlaylistId) == 0x000014, "Member 'FMatchmakingParams::PlaylistId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, MatchmakingLevel) == 0x000018, "Member 'FMatchmakingParams::MatchmakingLevel' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, MissionPowerMin) == 0x00001C, "Member 'FMatchmakingParams::MissionPowerMin' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, MissionPowerMax) == 0x000020, "Member 'FMatchmakingParams::MissionPowerMax' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, TheaterId) == 0x000024, "Member 'FMatchmakingParams::TheaterId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, ZoneInstanceId) == 0x000030, "Member 'FMatchmakingParams::ZoneInstanceId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, WUID) == 0x00003C, "Member 'FMatchmakingParams::WUID' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, WorldOwnerId) == 0x000048, "Member 'FMatchmakingParams::WorldOwnerId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, SessionId) == 0x000050, "Member 'FMatchmakingParams::SessionId' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, StartWith) == 0x00005C, "Member 'FMatchmakingParams::StartWith' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, Flags) == 0x00005D, "Member 'FMatchmakingParams::Flags' has a wrong offset!");
static_assert(offsetof(FMatchmakingParams, ChanceToHostOverride) == 0x000060, "Member 'FMatchmakingParams::ChanceToHostOverride' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestReward
// 0x0008 (0x0008 - 0x0000)
struct FFortQuestReward final
{
public:
	class UFortItem*                              Item;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestReward) == 0x000004, "Wrong alignment on FFortQuestReward");
static_assert(sizeof(FFortQuestReward) == 0x000008, "Wrong size on FFortQuestReward");
static_assert(offsetof(FFortQuestReward, Item) == 0x000000, "Member 'FFortQuestReward::Item' has a wrong offset!");
static_assert(offsetof(FFortQuestReward, Quantity) == 0x000004, "Member 'FFortQuestReward::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortMultiSizeBrush
// 0x02B8 (0x02B8 - 0x0000)
struct FFortMultiSizeBrush final
{
public:
	struct FSlateBrush                            Brush_XXS;                                         // 0x0000(0x0074)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_XS;                                          // 0x0074(0x0074)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_S;                                           // 0x00E8(0x0074)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_M;                                           // 0x015C(0x0074)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_L;                                           // 0x01D0(0x0074)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_XL;                                          // 0x0244(0x0074)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMultiSizeBrush) == 0x000004, "Wrong alignment on FFortMultiSizeBrush");
static_assert(sizeof(FFortMultiSizeBrush) == 0x0002B8, "Wrong size on FFortMultiSizeBrush");
static_assert(offsetof(FFortMultiSizeBrush, Brush_XXS) == 0x000000, "Member 'FFortMultiSizeBrush::Brush_XXS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_XS) == 0x000074, "Member 'FFortMultiSizeBrush::Brush_XS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_S) == 0x0000E8, "Member 'FFortMultiSizeBrush::Brush_S' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_M) == 0x00015C, "Member 'FFortMultiSizeBrush::Brush_M' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_L) == 0x0001D0, "Member 'FFortMultiSizeBrush::Brush_L' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeBrush, Brush_XL) == 0x000244, "Member 'FFortMultiSizeBrush::Brush_XL' has a wrong offset!");

// ScriptStruct FortniteGame.FortAttributeDetailsInfo
// 0x02E8 (0x02E8 - 0x0000)
struct FFortAttributeDetailsInfo final
{
public:
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    Icon;                                              // 0x0018(0x02B8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x02D0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x02DC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAttributeDetailsInfo) == 0x000004, "Wrong alignment on FFortAttributeDetailsInfo");
static_assert(sizeof(FFortAttributeDetailsInfo) == 0x0002E8, "Wrong size on FFortAttributeDetailsInfo");
static_assert(offsetof(FFortAttributeDetailsInfo, RequiredTags) == 0x000000, "Member 'FFortAttributeDetailsInfo::RequiredTags' has a wrong offset!");
static_assert(offsetof(FFortAttributeDetailsInfo, Icon) == 0x000018, "Member 'FFortAttributeDetailsInfo::Icon' has a wrong offset!");
static_assert(offsetof(FFortAttributeDetailsInfo, DisplayName) == 0x0002D0, "Member 'FFortAttributeDetailsInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortAttributeDetailsInfo, Description) == 0x0002DC, "Member 'FFortAttributeDetailsInfo::Description' has a wrong offset!");

// ScriptStruct FortniteGame.FortAttributeInfo
// 0x0024 (0x0024 - 0x0000)
struct FFortAttributeInfo final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	EFortAttributeDisplay                         DisplayMethod;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnitDisplayName;                                   // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FFortAttributeDetailsInfo>      AttributeDetails;                                  // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowInSummaries;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bShowInDifferences;                                // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bNegativeValuesShouldBeDisplayedPositively;        // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAttributeInfo) == 0x000004, "Wrong alignment on FFortAttributeInfo");
static_assert(sizeof(FFortAttributeInfo) == 0x000024, "Wrong size on FFortAttributeInfo");
static_assert(offsetof(FFortAttributeInfo, Attribute) == 0x000000, "Member 'FFortAttributeInfo::Attribute' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, DisplayMethod) == 0x000004, "Member 'FFortAttributeInfo::DisplayMethod' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, UnitDisplayName) == 0x000008, "Member 'FFortAttributeInfo::UnitDisplayName' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, AttributeDetails) == 0x000014, "Member 'FFortAttributeInfo::AttributeDetails' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, bShowInSummaries) == 0x000020, "Member 'FFortAttributeInfo::bShowInSummaries' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, bShowInDifferences) == 0x000021, "Member 'FFortAttributeInfo::bShowInDifferences' has a wrong offset!");
static_assert(offsetof(FFortAttributeInfo, bNegativeValuesShouldBeDisplayedPositively) == 0x000022, "Member 'FFortAttributeInfo::bNegativeValuesShouldBeDisplayedPositively' has a wrong offset!");

// ScriptStruct FortniteGame.SingleBuildingBonusDescription
// 0x0054 (0x0054 - 0x0000)
struct FSingleBuildingBonusDescription final
{
public:
	class FText                                   NumericDescription;                                // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortAttributeInfo                     AffectedAttributeInfo;                             // 0x000C(0x0024)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RequiredTagsDescription;                           // 0x0048(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSingleBuildingBonusDescription) == 0x000004, "Wrong alignment on FSingleBuildingBonusDescription");
static_assert(sizeof(FSingleBuildingBonusDescription) == 0x000054, "Wrong size on FSingleBuildingBonusDescription");
static_assert(offsetof(FSingleBuildingBonusDescription, NumericDescription) == 0x000000, "Member 'FSingleBuildingBonusDescription::NumericDescription' has a wrong offset!");
static_assert(offsetof(FSingleBuildingBonusDescription, AffectedAttributeInfo) == 0x00000C, "Member 'FSingleBuildingBonusDescription::AffectedAttributeInfo' has a wrong offset!");
static_assert(offsetof(FSingleBuildingBonusDescription, RequiredTags) == 0x000030, "Member 'FSingleBuildingBonusDescription::RequiredTags' has a wrong offset!");
static_assert(offsetof(FSingleBuildingBonusDescription, RequiredTagsDescription) == 0x000048, "Member 'FSingleBuildingBonusDescription::RequiredTagsDescription' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityCanHitParameters
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FFortAbilityCanHitParameters final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAbilityCanHitParameters) == 0x000004, "Wrong alignment on FFortAbilityCanHitParameters");
static_assert(sizeof(FFortAbilityCanHitParameters) == 0x000010, "Wrong size on FFortAbilityCanHitParameters");

// ScriptStruct FortniteGame.FortZoneInstanceInfo
// 0x003C (0x003C - 0x0000)
struct FFortZoneInstanceInfo
{
public:
	class FString                                 WorldId;                                           // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TheaterId;                                         // 0x000C(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TheaterMissionId;                                  // 0x0018(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ZoneThemeClass;                                    // 0x0024(0x0018)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortZoneInstanceInfo) == 0x000004, "Wrong alignment on FFortZoneInstanceInfo");
static_assert(sizeof(FFortZoneInstanceInfo) == 0x00003C, "Wrong size on FFortZoneInstanceInfo");
static_assert(offsetof(FFortZoneInstanceInfo, WorldId) == 0x000000, "Member 'FFortZoneInstanceInfo::WorldId' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceInfo, TheaterId) == 0x00000C, "Member 'FFortZoneInstanceInfo::TheaterId' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceInfo, TheaterMissionId) == 0x000018, "Member 'FFortZoneInstanceInfo::TheaterMissionId' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceInfo, ZoneThemeClass) == 0x000024, "Member 'FFortZoneInstanceInfo::ZoneThemeClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortZoneInstanceDetails
// 0x0028 (0x0064 - 0x003C)
struct FFortZoneInstanceDetails final : public FFortZoneInstanceInfo
{
public:
	TSoftClassPtr<class UClass>                   MissionGenerator;                                  // 0x003C(0x0018)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ZoneDifficultyInfo;                                // 0x0054(0x000C)(NativeAccessSpecifierPublic)
	int32                                         TileIndex;                                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortZoneInstanceDetails) == 0x000004, "Wrong alignment on FFortZoneInstanceDetails");
static_assert(sizeof(FFortZoneInstanceDetails) == 0x000064, "Wrong size on FFortZoneInstanceDetails");
static_assert(offsetof(FFortZoneInstanceDetails, MissionGenerator) == 0x00003C, "Member 'FFortZoneInstanceDetails::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, ZoneDifficultyInfo) == 0x000054, "Member 'FFortZoneInstanceDetails::ZoneDifficultyInfo' has a wrong offset!");
static_assert(offsetof(FFortZoneInstanceDetails, TileIndex) == 0x000060, "Member 'FFortZoneInstanceDetails::TileIndex' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostFabricatorPerTheaterData
// 0x0008 (0x0008 - 0x0000)
struct FOutpostFabricatorPerTheaterData final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemTier                                 MaxAllowedTier;                                    // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOutpostFabricatorPerTheaterData) == 0x000004, "Wrong alignment on FOutpostFabricatorPerTheaterData");
static_assert(sizeof(FOutpostFabricatorPerTheaterData) == 0x000008, "Wrong size on FOutpostFabricatorPerTheaterData");
static_assert(offsetof(FOutpostFabricatorPerTheaterData, TheaterSlot) == 0x000000, "Member 'FOutpostFabricatorPerTheaterData::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FOutpostFabricatorPerTheaterData, MaxAllowedTier) == 0x000004, "Member 'FOutpostFabricatorPerTheaterData::MaxAllowedTier' has a wrong offset!");

// ScriptStruct FortniteGame.TrackMeshConfig
// 0x0008 (0x0008 - 0x0000)
struct FTrackMeshConfig final
{
public:
	ETrackIncline                                 InclineSideA;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrackIncline                                 InclineSideB;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Mesh;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackMeshConfig) == 0x000004, "Wrong alignment on FTrackMeshConfig");
static_assert(sizeof(FTrackMeshConfig) == 0x000008, "Wrong size on FTrackMeshConfig");
static_assert(offsetof(FTrackMeshConfig, InclineSideA) == 0x000000, "Member 'FTrackMeshConfig::InclineSideA' has a wrong offset!");
static_assert(offsetof(FTrackMeshConfig, InclineSideB) == 0x000001, "Member 'FTrackMeshConfig::InclineSideB' has a wrong offset!");
static_assert(offsetof(FTrackMeshConfig, Mesh) == 0x000004, "Member 'FTrackMeshConfig::Mesh' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingActorNavArea
// 0x0004 (0x0004 - 0x0000)
struct FBuildingActorNavArea final
{
public:
	int32                                         AreaBits;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingActorNavArea) == 0x000004, "Wrong alignment on FBuildingActorNavArea");
static_assert(sizeof(FBuildingActorNavArea) == 0x000004, "Wrong size on FBuildingActorNavArea");
static_assert(offsetof(FBuildingActorNavArea, AreaBits) == 0x000000, "Member 'FBuildingActorNavArea::AreaBits' has a wrong offset!");

// ScriptStruct FortniteGame.EncounterEnvironmentQueryInfo
// 0x001C (0x001C - 0x0000)
struct FEncounterEnvironmentQueryInfo final
{
public:
	class UEnvQuery*                              EnvironmentQuery;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEnvNamedValue>                 QueryParams;                                       // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsDirectional;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEncounterEnvironmentQueryInfo) == 0x000004, "Wrong alignment on FEncounterEnvironmentQueryInfo");
static_assert(sizeof(FEncounterEnvironmentQueryInfo) == 0x00001C, "Wrong size on FEncounterEnvironmentQueryInfo");
static_assert(offsetof(FEncounterEnvironmentQueryInfo, EnvironmentQuery) == 0x000000, "Member 'FEncounterEnvironmentQueryInfo::EnvironmentQuery' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInfo, QueryParams) == 0x000004, "Member 'FEncounterEnvironmentQueryInfo::QueryParams' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInfo, bIsDirectional) == 0x000018, "Member 'FEncounterEnvironmentQueryInfo::bIsDirectional' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostPOSTBoost
// 0x000C (0x000C - 0x0000)
struct FOutpostPOSTBoost final
{
public:
	struct FCurveTableRowHandle                   PlayerStructureHealthModPerPOSTLevel;              // 0x0000(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostPOSTBoost) == 0x000004, "Wrong alignment on FOutpostPOSTBoost");
static_assert(sizeof(FOutpostPOSTBoost) == 0x00000C, "Wrong size on FOutpostPOSTBoost");
static_assert(offsetof(FOutpostPOSTBoost, PlayerStructureHealthModPerPOSTLevel) == 0x000000, "Member 'FOutpostPOSTBoost::PlayerStructureHealthModPerPOSTLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortSearchPassParams
// 0x001C (0x001C - 0x0000)
struct FFortSearchPassParams final
{
public:
	int32                                         ControllerId;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SessionName;                                       // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BestDatacenterId;                                  // 0x000C(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x4];                                       // 0x0018(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSearchPassParams) == 0x000004, "Wrong alignment on FFortSearchPassParams");
static_assert(sizeof(FFortSearchPassParams) == 0x00001C, "Wrong size on FFortSearchPassParams");
static_assert(offsetof(FFortSearchPassParams, ControllerId) == 0x000000, "Member 'FFortSearchPassParams::ControllerId' has a wrong offset!");
static_assert(offsetof(FFortSearchPassParams, SessionName) == 0x000004, "Member 'FFortSearchPassParams::SessionName' has a wrong offset!");
static_assert(offsetof(FFortSearchPassParams, BestDatacenterId) == 0x00000C, "Member 'FFortSearchPassParams::BestDatacenterId' has a wrong offset!");

// ScriptStruct FortniteGame.FortSurfaceDamageRatioByAffiliationStats
// 0x000C (0x000C - 0x0000)
struct FFortSurfaceDamageRatioByAffiliationStats final : public FTableRowBase
{
public:
	float                                         Friendly;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Neutral;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Hostile;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortSurfaceDamageRatioByAffiliationStats) == 0x000004, "Wrong alignment on FFortSurfaceDamageRatioByAffiliationStats");
static_assert(sizeof(FFortSurfaceDamageRatioByAffiliationStats) == 0x00000C, "Wrong size on FFortSurfaceDamageRatioByAffiliationStats");
static_assert(offsetof(FFortSurfaceDamageRatioByAffiliationStats, Friendly) == 0x000000, "Member 'FFortSurfaceDamageRatioByAffiliationStats::Friendly' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioByAffiliationStats, Neutral) == 0x000004, "Member 'FFortSurfaceDamageRatioByAffiliationStats::Neutral' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioByAffiliationStats, Hostile) == 0x000008, "Member 'FFortSurfaceDamageRatioByAffiliationStats::Hostile' has a wrong offset!");

// ScriptStruct FortniteGame.FortDayPhaseCallbackHandle
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FFortDayPhaseCallbackHandle final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDayPhaseCallbackHandle) == 0x000004, "Wrong alignment on FFortDayPhaseCallbackHandle");
static_assert(sizeof(FFortDayPhaseCallbackHandle) == 0x000010, "Wrong size on FFortDayPhaseCallbackHandle");

// ScriptStruct FortniteGame.MissionTimeDisplayData
// 0x002C (0x002C - 0x0000)
struct FMissionTimeDisplayData final
{
public:
	float                                         LessThanTimeValue;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideTimer;                                        // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BaseColor;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           PulseColor;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ColorPulsesPerSecond;                              // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMissionTimeDisplayData) == 0x000004, "Wrong alignment on FMissionTimeDisplayData");
static_assert(sizeof(FMissionTimeDisplayData) == 0x00002C, "Wrong size on FMissionTimeDisplayData");
static_assert(offsetof(FMissionTimeDisplayData, LessThanTimeValue) == 0x000000, "Member 'FMissionTimeDisplayData::LessThanTimeValue' has a wrong offset!");
static_assert(offsetof(FMissionTimeDisplayData, bHideTimer) == 0x000004, "Member 'FMissionTimeDisplayData::bHideTimer' has a wrong offset!");
static_assert(offsetof(FMissionTimeDisplayData, BaseColor) == 0x000008, "Member 'FMissionTimeDisplayData::BaseColor' has a wrong offset!");
static_assert(offsetof(FMissionTimeDisplayData, PulseColor) == 0x000018, "Member 'FMissionTimeDisplayData::PulseColor' has a wrong offset!");
static_assert(offsetof(FMissionTimeDisplayData, ColorPulsesPerSecond) == 0x000028, "Member 'FMissionTimeDisplayData::ColorPulsesPerSecond' has a wrong offset!");

// ScriptStruct FortniteGame.ZoneLoadingScreenHeadingConfig
// 0x001C (0x001C - 0x0000)
struct FZoneLoadingScreenHeadingConfig final
{
public:
	class UTexture2D*                             HeadingImage;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Heading;                                           // 0x0004(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   HeadingDescription;                                // 0x0010(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZoneLoadingScreenHeadingConfig) == 0x000004, "Wrong alignment on FZoneLoadingScreenHeadingConfig");
static_assert(sizeof(FZoneLoadingScreenHeadingConfig) == 0x00001C, "Wrong size on FZoneLoadingScreenHeadingConfig");
static_assert(offsetof(FZoneLoadingScreenHeadingConfig, HeadingImage) == 0x000000, "Member 'FZoneLoadingScreenHeadingConfig::HeadingImage' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenHeadingConfig, Heading) == 0x000004, "Member 'FZoneLoadingScreenHeadingConfig::Heading' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenHeadingConfig, HeadingDescription) == 0x000010, "Member 'FZoneLoadingScreenHeadingConfig::HeadingDescription' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestRewardNotification
// 0x0030 (0x0030 - 0x0000)
struct FFortQuestRewardNotification final
{
public:
	class FString                                 QuestId;                                           // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         Loot;                                              // 0x000C(0x0024)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestRewardNotification) == 0x000004, "Wrong alignment on FFortQuestRewardNotification");
static_assert(sizeof(FFortQuestRewardNotification) == 0x000030, "Wrong size on FFortQuestRewardNotification");
static_assert(offsetof(FFortQuestRewardNotification, QuestId) == 0x000000, "Member 'FFortQuestRewardNotification::QuestId' has a wrong offset!");
static_assert(offsetof(FFortQuestRewardNotification, Loot) == 0x00000C, "Member 'FFortQuestRewardNotification::Loot' has a wrong offset!");

// ScriptStruct FortniteGame.WorkerSetBonusState
// 0x0010 (0x0010 - 0x0000)
struct FWorkerSetBonusState final
{
public:
	struct FGameplayTag                           SetBonusTag;                                       // 0x0000(0x0008)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         CurrentMatchCount;                                 // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredMatchCountToActivate;                      // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorkerSetBonusState) == 0x000004, "Wrong alignment on FWorkerSetBonusState");
static_assert(sizeof(FWorkerSetBonusState) == 0x000010, "Wrong size on FWorkerSetBonusState");
static_assert(offsetof(FWorkerSetBonusState, SetBonusTag) == 0x000000, "Member 'FWorkerSetBonusState::SetBonusTag' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusState, CurrentMatchCount) == 0x000008, "Member 'FWorkerSetBonusState::CurrentMatchCount' has a wrong offset!");
static_assert(offsetof(FWorkerSetBonusState, RequiredMatchCountToActivate) == 0x00000C, "Member 'FWorkerSetBonusState::RequiredMatchCountToActivate' has a wrong offset!");

// ScriptStruct FortniteGame.FortMiniMapData
// 0x0074 (0x0074 - 0x0000)
struct FFortMiniMapData final
{
public:
	class UTexture2D*                             MiniMapIcon;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              IconScale;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bUseIconSize : 1;                                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bUseTeamAffiliationColors : 1;                     // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           FriendColor;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           EnemyColor;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           NeutralColor;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           PulseColor;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ColorPulsesPerSecond;                              // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizePulsesPerSecond;                               // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewableDistance;                                  // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsVisible : 1;                                    // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, SaveGame, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMiniMapData) == 0x000004, "Wrong alignment on FFortMiniMapData");
static_assert(sizeof(FFortMiniMapData) == 0x000074, "Wrong size on FFortMiniMapData");
static_assert(offsetof(FFortMiniMapData, MiniMapIcon) == 0x000000, "Member 'FFortMiniMapData::MiniMapIcon' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, IconScale) == 0x000004, "Member 'FFortMiniMapData::IconScale' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, Color) == 0x000010, "Member 'FFortMiniMapData::Color' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, FriendColor) == 0x000020, "Member 'FFortMiniMapData::FriendColor' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, EnemyColor) == 0x000030, "Member 'FFortMiniMapData::EnemyColor' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, NeutralColor) == 0x000040, "Member 'FFortMiniMapData::NeutralColor' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, PulseColor) == 0x000050, "Member 'FFortMiniMapData::PulseColor' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, ColorPulsesPerSecond) == 0x000060, "Member 'FFortMiniMapData::ColorPulsesPerSecond' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, SizePulsesPerSecond) == 0x000064, "Member 'FFortMiniMapData::SizePulsesPerSecond' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, ViewableDistance) == 0x000068, "Member 'FFortMiniMapData::ViewableDistance' has a wrong offset!");
static_assert(offsetof(FFortMiniMapData, Priority) == 0x00006C, "Member 'FFortMiniMapData::Priority' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackResponse
// 0x0014 (0x0014 - 0x0000)
struct FFortFeedbackResponse final
{
public:
	struct FFortFeedbackHandle                    Handle;                                            // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	EFortFeedbackContext                          Context;                                           // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFeedbackResponse) == 0x000004, "Wrong alignment on FFortFeedbackResponse");
static_assert(sizeof(FFortFeedbackResponse) == 0x000014, "Wrong size on FFortFeedbackResponse");
static_assert(offsetof(FFortFeedbackResponse, Handle) == 0x000000, "Member 'FFortFeedbackResponse::Handle' has a wrong offset!");
static_assert(offsetof(FFortFeedbackResponse, Context) == 0x000010, "Member 'FFortFeedbackResponse::Context' has a wrong offset!");

// ScriptStruct FortniteGame.FortPersistentGameplayStatValue
// 0x0010 (0x0010 - 0x0000)
struct FFortPersistentGameplayStatValue final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPersistentGameplayStatValue) == 0x000004, "Wrong alignment on FFortPersistentGameplayStatValue");
static_assert(sizeof(FFortPersistentGameplayStatValue) == 0x000010, "Wrong size on FFortPersistentGameplayStatValue");
static_assert(offsetof(FFortPersistentGameplayStatValue, StatName) == 0x000000, "Member 'FFortPersistentGameplayStatValue::StatName' has a wrong offset!");
static_assert(offsetof(FFortPersistentGameplayStatValue, StatValue) == 0x00000C, "Member 'FFortPersistentGameplayStatValue::StatValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestObjectiveCompletion
// 0x0014 (0x0014 - 0x0000)
struct FFortQuestObjectiveCompletion final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortQuestObjectiveType                       ObjectiveType;                                     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestObjectiveCompletion) == 0x000004, "Wrong alignment on FFortQuestObjectiveCompletion");
static_assert(sizeof(FFortQuestObjectiveCompletion) == 0x000014, "Wrong size on FFortQuestObjectiveCompletion");
static_assert(offsetof(FFortQuestObjectiveCompletion, StatName) == 0x000000, "Member 'FFortQuestObjectiveCompletion::StatName' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveCompletion, ObjectiveType) == 0x00000C, "Member 'FFortQuestObjectiveCompletion::ObjectiveType' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveCompletion, Count) == 0x000010, "Member 'FFortQuestObjectiveCompletion::Count' has a wrong offset!");

// ScriptStruct FortniteGame.TransformableNavLinkClass
// 0x001C (0x001C - 0x0000)
struct FTransformableNavLinkClass final
{
public:
	struct FVector                                Translation;                                       // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavLinkDefinition>         NavigationLinksClass;                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransformableNavLinkClass) == 0x000004, "Wrong alignment on FTransformableNavLinkClass");
static_assert(sizeof(FTransformableNavLinkClass) == 0x00001C, "Wrong size on FTransformableNavLinkClass");
static_assert(offsetof(FTransformableNavLinkClass, Translation) == 0x000000, "Member 'FTransformableNavLinkClass::Translation' has a wrong offset!");
static_assert(offsetof(FTransformableNavLinkClass, Rotation) == 0x00000C, "Member 'FTransformableNavLinkClass::Rotation' has a wrong offset!");
static_assert(offsetof(FTransformableNavLinkClass, NavigationLinksClass) == 0x000018, "Member 'FTransformableNavLinkClass::NavigationLinksClass' has a wrong offset!");

// ScriptStruct FortniteGame.GameSummaryInfo
// 0x0010 (0x0010 - 0x0000)
struct FGameSummaryInfo final
{
public:
	class FString                                 GameSessionID;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Completed;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameSummaryInfo) == 0x000004, "Wrong alignment on FGameSummaryInfo");
static_assert(sizeof(FGameSummaryInfo) == 0x000010, "Wrong size on FGameSummaryInfo");
static_assert(offsetof(FGameSummaryInfo, GameSessionID) == 0x000000, "Member 'FGameSummaryInfo::GameSessionID' has a wrong offset!");
static_assert(offsetof(FGameSummaryInfo, Completed) == 0x00000C, "Member 'FGameSummaryInfo::Completed' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionActorRecord
// 0x0050 (0x0050 - 0x0000)
struct FFortMissionActorRecord final
{
public:
	TSubclassOf<class AActor>                     MissionActorClass;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MissionActorTransform;                             // 0x0010(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 MissionActorData;                                  // 0x0040(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionActorRecord) == 0x000010, "Wrong alignment on FFortMissionActorRecord");
static_assert(sizeof(FFortMissionActorRecord) == 0x000050, "Wrong size on FFortMissionActorRecord");
static_assert(offsetof(FFortMissionActorRecord, MissionActorClass) == 0x000000, "Member 'FFortMissionActorRecord::MissionActorClass' has a wrong offset!");
static_assert(offsetof(FFortMissionActorRecord, MissionActorTransform) == 0x000010, "Member 'FFortMissionActorRecord::MissionActorTransform' has a wrong offset!");
static_assert(offsetof(FFortMissionActorRecord, MissionActorData) == 0x000040, "Member 'FFortMissionActorRecord::MissionActorData' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterTransitionSettings
// 0x0001 (0x0001 - 0x0000)
struct FFortEncounterTransitionSettings final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortEncounterTransitionSettings) == 0x000001, "Wrong alignment on FFortEncounterTransitionSettings");
static_assert(sizeof(FFortEncounterTransitionSettings) == 0x000001, "Wrong size on FFortEncounterTransitionSettings");

// ScriptStruct FortniteGame.FortGeneratedEncounterSequence
// 0x0024 (0x0024 - 0x0000)
struct FFortGeneratedEncounterSequence final
{
public:
	struct FFortEncounterTransitionSettings       TransitionSettings;                                // 0x0000(0x0001)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartingGeneratedEncounterProfileIndex;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEncountersInSequence;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EncounterSequenceTags;                             // 0x000C(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGeneratedEncounterSequence) == 0x000004, "Wrong alignment on FFortGeneratedEncounterSequence");
static_assert(sizeof(FFortGeneratedEncounterSequence) == 0x000024, "Wrong size on FFortGeneratedEncounterSequence");
static_assert(offsetof(FFortGeneratedEncounterSequence, TransitionSettings) == 0x000000, "Member 'FFortGeneratedEncounterSequence::TransitionSettings' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterSequence, StartingGeneratedEncounterProfileIndex) == 0x000004, "Member 'FFortGeneratedEncounterSequence::StartingGeneratedEncounterProfileIndex' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterSequence, NumEncountersInSequence) == 0x000008, "Member 'FFortGeneratedEncounterSequence::NumEncountersInSequence' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterSequence, EncounterSequenceTags) == 0x00000C, "Member 'FFortGeneratedEncounterSequence::EncounterSequenceTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortGeneratedMissionOption
// 0x000C (0x000C - 0x0000)
struct FFortGeneratedMissionOption final
{
public:
	class UFortDifficultyOptionCategoryMission*   MissionOptionCategory;                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortDifficultyOptionMission> MissionOption;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeLerpValue;                                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGeneratedMissionOption) == 0x000004, "Wrong alignment on FFortGeneratedMissionOption");
static_assert(sizeof(FFortGeneratedMissionOption) == 0x00000C, "Wrong size on FFortGeneratedMissionOption");
static_assert(offsetof(FFortGeneratedMissionOption, MissionOptionCategory) == 0x000000, "Member 'FFortGeneratedMissionOption::MissionOptionCategory' has a wrong offset!");
static_assert(offsetof(FFortGeneratedMissionOption, MissionOption) == 0x000004, "Member 'FFortGeneratedMissionOption::MissionOption' has a wrong offset!");
static_assert(offsetof(FFortGeneratedMissionOption, RangeLerpValue) == 0x000008, "Member 'FFortGeneratedMissionOption::RangeLerpValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortGeneratedEncounterOption
// 0x0010 (0x0010 - 0x0000)
struct FFortGeneratedEncounterOption final
{
public:
	class UFortDifficultyOptionCategoryEncounter* EncounterOptionCategory;                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortDifficultyOptionEncounter> EncounterOption;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeLerpValue;                                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangedSinceLastVLog;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortGeneratedEncounterOption) == 0x000004, "Wrong alignment on FFortGeneratedEncounterOption");
static_assert(sizeof(FFortGeneratedEncounterOption) == 0x000010, "Wrong size on FFortGeneratedEncounterOption");
static_assert(offsetof(FFortGeneratedEncounterOption, EncounterOptionCategory) == 0x000000, "Member 'FFortGeneratedEncounterOption::EncounterOptionCategory' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterOption, EncounterOption) == 0x000004, "Member 'FFortGeneratedEncounterOption::EncounterOption' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterOption, RangeLerpValue) == 0x000008, "Member 'FFortGeneratedEncounterOption::RangeLerpValue' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterOption, bChangedSinceLastVLog) == 0x00000C, "Member 'FFortGeneratedEncounterOption::bChangedSinceLastVLog' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterModeSettings
// 0x0004 (0x0004 - 0x0000)
struct FFortEncounterModeSettings final
{
public:
	EFortEncounterPacingMode                      PacingMode;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterSpawnLocationPlacementMode      SpawnLocationMode;                                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterUtilitiesMode                   UtilitiesMode;                                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterSpawnLimitType                  SpawnLimitMode;                                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterModeSettings) == 0x000001, "Wrong alignment on FFortEncounterModeSettings");
static_assert(sizeof(FFortEncounterModeSettings) == 0x000004, "Wrong size on FFortEncounterModeSettings");
static_assert(offsetof(FFortEncounterModeSettings, PacingMode) == 0x000000, "Member 'FFortEncounterModeSettings::PacingMode' has a wrong offset!");
static_assert(offsetof(FFortEncounterModeSettings, SpawnLocationMode) == 0x000001, "Member 'FFortEncounterModeSettings::SpawnLocationMode' has a wrong offset!");
static_assert(offsetof(FFortEncounterModeSettings, UtilitiesMode) == 0x000002, "Member 'FFortEncounterModeSettings::UtilitiesMode' has a wrong offset!");
static_assert(offsetof(FFortEncounterModeSettings, SpawnLimitMode) == 0x000003, "Member 'FFortEncounterModeSettings::SpawnLimitMode' has a wrong offset!");

// ScriptStruct FortniteGame.FortGeneratedEncounterProfile
// 0x0038 (0x0038 - 0x0000)
struct FFortGeneratedEncounterProfile final
{
public:
	float                                         EncounterDifficultyLevel;                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortGeneratedEncounterOption>  EncounterOptions;                                  // 0x0004(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFortEncounterModeSettings             EncounterModeSettings;                             // 0x0010(0x0004)(NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0014(0x0018)(NativeAccessSpecifierPublic)
	int32                                         DifficultyOptionPointsAvailableAtGeneration;       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDifficultyOptionPointsToUse;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneratedEncounterIndex;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGeneratedEncounterProfile) == 0x000004, "Wrong alignment on FFortGeneratedEncounterProfile");
static_assert(sizeof(FFortGeneratedEncounterProfile) == 0x000038, "Wrong size on FFortGeneratedEncounterProfile");
static_assert(offsetof(FFortGeneratedEncounterProfile, EncounterDifficultyLevel) == 0x000000, "Member 'FFortGeneratedEncounterProfile::EncounterDifficultyLevel' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, EncounterOptions) == 0x000004, "Member 'FFortGeneratedEncounterProfile::EncounterOptions' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, EncounterModeSettings) == 0x000010, "Member 'FFortGeneratedEncounterProfile::EncounterModeSettings' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, EncounterTypeTags) == 0x000014, "Member 'FFortGeneratedEncounterProfile::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, DifficultyOptionPointsAvailableAtGeneration) == 0x00002C, "Member 'FFortGeneratedEncounterProfile::DifficultyOptionPointsAvailableAtGeneration' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, MinDifficultyOptionPointsToUse) == 0x000030, "Member 'FFortGeneratedEncounterProfile::MinDifficultyOptionPointsToUse' has a wrong offset!");
static_assert(offsetof(FFortGeneratedEncounterProfile, GeneratedEncounterIndex) == 0x000034, "Member 'FFortGeneratedEncounterProfile::GeneratedEncounterIndex' has a wrong offset!");

// ScriptStruct FortniteGame.FortGeneratedDifficultyOptions
// 0x0034 (0x0034 - 0x0000)
struct FFortGeneratedDifficultyOptions final
{
public:
	float                                         GameDifficultyAtGeneration;                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyOptionPointsAvailableAtGeneration;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxEncounterSpawnPointsAtGeneration;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDifficultyOptionPointsToUse;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortGeneratedEncounterSequence> GeneratedEncounterSequences;                       // 0x0010(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortGeneratedMissionOption>    MissionOptions;                                    // 0x001C(0x000C)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortGeneratedEncounterProfile> GeneratedEncounterProfiles;                        // 0x0028(0x000C)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortGeneratedDifficultyOptions) == 0x000004, "Wrong alignment on FFortGeneratedDifficultyOptions");
static_assert(sizeof(FFortGeneratedDifficultyOptions) == 0x000034, "Wrong size on FFortGeneratedDifficultyOptions");
static_assert(offsetof(FFortGeneratedDifficultyOptions, GameDifficultyAtGeneration) == 0x000000, "Member 'FFortGeneratedDifficultyOptions::GameDifficultyAtGeneration' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, DifficultyOptionPointsAvailableAtGeneration) == 0x000004, "Member 'FFortGeneratedDifficultyOptions::DifficultyOptionPointsAvailableAtGeneration' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, MaxEncounterSpawnPointsAtGeneration) == 0x000008, "Member 'FFortGeneratedDifficultyOptions::MaxEncounterSpawnPointsAtGeneration' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, MinDifficultyOptionPointsToUse) == 0x00000C, "Member 'FFortGeneratedDifficultyOptions::MinDifficultyOptionPointsToUse' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, GeneratedEncounterSequences) == 0x000010, "Member 'FFortGeneratedDifficultyOptions::GeneratedEncounterSequences' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, MissionOptions) == 0x00001C, "Member 'FFortGeneratedDifficultyOptions::MissionOptions' has a wrong offset!");
static_assert(offsetof(FFortGeneratedDifficultyOptions, GeneratedEncounterProfiles) == 0x000028, "Member 'FFortGeneratedDifficultyOptions::GeneratedEncounterProfiles' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionEntry
// 0x0058 (0x0058 - 0x0000)
struct FFortMissionEntry final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldMinLevel;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorldMaxLevel;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    MinDifficultyInfoRow;                              // 0x000C(0x000C)(Edit, NativeAccessSpecifierPublic)
	class UFortMissionGenerator*                  MissionGenerator;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMissionInfo*                       MissionInfo;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMissionGenerationCategory                    GenerationCategory;                                // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortGeneratedDifficultyOptions        GeneratedDifficultyOptions;                        // 0x0024(0x0034)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionEntry) == 0x000004, "Wrong alignment on FFortMissionEntry");
static_assert(sizeof(FFortMissionEntry) == 0x000058, "Wrong size on FFortMissionEntry");
static_assert(offsetof(FFortMissionEntry, Weight) == 0x000000, "Member 'FFortMissionEntry::Weight' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, WorldMinLevel) == 0x000004, "Member 'FFortMissionEntry::WorldMinLevel' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, WorldMaxLevel) == 0x000008, "Member 'FFortMissionEntry::WorldMaxLevel' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, MinDifficultyInfoRow) == 0x00000C, "Member 'FFortMissionEntry::MinDifficultyInfoRow' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, MissionGenerator) == 0x000018, "Member 'FFortMissionEntry::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, MissionInfo) == 0x00001C, "Member 'FFortMissionEntry::MissionInfo' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, GenerationCategory) == 0x000020, "Member 'FFortMissionEntry::GenerationCategory' has a wrong offset!");
static_assert(offsetof(FFortMissionEntry, GeneratedDifficultyOptions) == 0x000024, "Member 'FFortMissionEntry::GeneratedDifficultyOptions' has a wrong offset!");

// ScriptStruct FortniteGame.FortObjectiveRecord
// 0x0010 (0x0010 - 0x0000)
struct FFortObjectiveRecord final
{
public:
	TSubclassOf<class AFortObjectiveBase>         ObjectiveClass;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ObjectiveData;                                     // 0x0004(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortObjectiveRecord) == 0x000004, "Wrong alignment on FFortObjectiveRecord");
static_assert(sizeof(FFortObjectiveRecord) == 0x000010, "Wrong size on FFortObjectiveRecord");
static_assert(offsetof(FFortObjectiveRecord, ObjectiveClass) == 0x000000, "Member 'FFortObjectiveRecord::ObjectiveClass' has a wrong offset!");
static_assert(offsetof(FFortObjectiveRecord, ObjectiveData) == 0x000004, "Member 'FFortObjectiveRecord::ObjectiveData' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionRecord
// 0x00C4 (0x00C4 - 0x0000)
struct FFortMissionRecord final
{
public:
	struct FFortMissionEntry                      MissionEntry;                                      // 0x0000(0x0058)(NativeAccessSpecifierPublic)
	class UFortMissionGenerator*                  MissionGenerator;                                  // 0x0058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortGeneratedDifficultyOptions        GeneratedMissionOptions;                           // 0x005C(0x0034)(Transient, NativeAccessSpecifierPublic)
	int32                                         DayGenerated;                                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UIIndex;                                           // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMissionStatus                            MissionStatus;                                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortObjectiveRecord>           ObjectiveRecords;                                  // 0x009C(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 MissionData;                                       // 0x00A8(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortMissionRecord) == 0x000004, "Wrong alignment on FFortMissionRecord");
static_assert(sizeof(FFortMissionRecord) == 0x0000C4, "Wrong size on FFortMissionRecord");
static_assert(offsetof(FFortMissionRecord, MissionEntry) == 0x000000, "Member 'FFortMissionRecord::MissionEntry' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, MissionGenerator) == 0x000058, "Member 'FFortMissionRecord::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, GeneratedMissionOptions) == 0x00005C, "Member 'FFortMissionRecord::GeneratedMissionOptions' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, DayGenerated) == 0x000090, "Member 'FFortMissionRecord::DayGenerated' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, UIIndex) == 0x000094, "Member 'FFortMissionRecord::UIIndex' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, MissionStatus) == 0x000098, "Member 'FFortMissionRecord::MissionStatus' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, ObjectiveRecords) == 0x00009C, "Member 'FFortMissionRecord::ObjectiveRecords' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, MissionData) == 0x0000A8, "Member 'FFortMissionRecord::MissionData' has a wrong offset!");
static_assert(offsetof(FFortMissionRecord, MissionGuid) == 0x0000B4, "Member 'FFortMissionRecord::MissionGuid' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionManagerRecord
// 0x0028 (0x0028 - 0x0000)
struct FFortMissionManagerRecord final
{
public:
	TSubclassOf<class AFortMissionManager>        MissionManagerClass;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionActorRecord>        MissionActorRecords;                               // 0x0004(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionRecord>             MissionRecords;                                    // 0x0010(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 MissionManagerData;                                // 0x001C(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionManagerRecord) == 0x000004, "Wrong alignment on FFortMissionManagerRecord");
static_assert(sizeof(FFortMissionManagerRecord) == 0x000028, "Wrong size on FFortMissionManagerRecord");
static_assert(offsetof(FFortMissionManagerRecord, MissionManagerClass) == 0x000000, "Member 'FFortMissionManagerRecord::MissionManagerClass' has a wrong offset!");
static_assert(offsetof(FFortMissionManagerRecord, MissionActorRecords) == 0x000004, "Member 'FFortMissionManagerRecord::MissionActorRecords' has a wrong offset!");
static_assert(offsetof(FFortMissionManagerRecord, MissionRecords) == 0x000010, "Member 'FFortMissionManagerRecord::MissionRecords' has a wrong offset!");
static_assert(offsetof(FFortMissionManagerRecord, MissionManagerData) == 0x00001C, "Member 'FFortMissionManagerRecord::MissionManagerData' has a wrong offset!");

// ScriptStruct FortniteGame.FortLocalWildcardData
// 0x0008 (0x0008 - 0x0000)
struct FFortLocalWildcardData final
{
public:
	class FName                                   ColumnName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLocalWildcardData) == 0x000004, "Wrong alignment on FFortLocalWildcardData");
static_assert(sizeof(FFortLocalWildcardData) == 0x000008, "Wrong size on FFortLocalWildcardData");
static_assert(offsetof(FFortLocalWildcardData, ColumnName) == 0x000000, "Member 'FFortLocalWildcardData::ColumnName' has a wrong offset!");

// ScriptStruct FortniteGame.KeepEventWaveData
// 0x002C (0x002C - 0x0000)
struct FKeepEventWaveData final
{
public:
	class FText                                   WaveDescription;                                   // 0x0000(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortAIEncounterInfo>       EncounterTemplate;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAISpawnGroupProgressionInfo*       SpawnGroupProgressionInfo;                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarmupTime;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EncounterTime;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyLevel;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AliveMultiplier;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemySpawnBits1;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemySpawnBits2;                                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeepEventWaveData) == 0x000004, "Wrong alignment on FKeepEventWaveData");
static_assert(sizeof(FKeepEventWaveData) == 0x00002C, "Wrong size on FKeepEventWaveData");
static_assert(offsetof(FKeepEventWaveData, WaveDescription) == 0x000000, "Member 'FKeepEventWaveData::WaveDescription' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, EncounterTemplate) == 0x00000C, "Member 'FKeepEventWaveData::EncounterTemplate' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, SpawnGroupProgressionInfo) == 0x000010, "Member 'FKeepEventWaveData::SpawnGroupProgressionInfo' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, WarmupTime) == 0x000014, "Member 'FKeepEventWaveData::WarmupTime' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, EncounterTime) == 0x000018, "Member 'FKeepEventWaveData::EncounterTime' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, DifficultyLevel) == 0x00001C, "Member 'FKeepEventWaveData::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, AliveMultiplier) == 0x000020, "Member 'FKeepEventWaveData::AliveMultiplier' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, EnemySpawnBits1) == 0x000024, "Member 'FKeepEventWaveData::EnemySpawnBits1' has a wrong offset!");
static_assert(offsetof(FKeepEventWaveData, EnemySpawnBits2) == 0x000028, "Member 'FKeepEventWaveData::EnemySpawnBits2' has a wrong offset!");

// ScriptStruct FortniteGame.FortWorldAuxData
// 0x0030 (0x0030 - 0x0000)
struct FFortWorldAuxData final
{
public:
	class FString                                 WUID;                                              // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x000C(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurPlayers;                                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInvites;                                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bShouldAdvertise;                                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinViaPresence;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowJoinViaPresenceFriendsOnly;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWorldAuxData) == 0x000004, "Wrong alignment on FFortWorldAuxData");
static_assert(sizeof(FFortWorldAuxData) == 0x000030, "Wrong size on FFortWorldAuxData");
static_assert(offsetof(FFortWorldAuxData, WUID) == 0x000000, "Member 'FFortWorldAuxData::WUID' has a wrong offset!");
static_assert(offsetof(FFortWorldAuxData, SessionId) == 0x00000C, "Member 'FFortWorldAuxData::SessionId' has a wrong offset!");
static_assert(offsetof(FFortWorldAuxData, MaxPlayers) == 0x000018, "Member 'FFortWorldAuxData::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FFortWorldAuxData, CurPlayers) == 0x00001C, "Member 'FFortWorldAuxData::CurPlayers' has a wrong offset!");
static_assert(offsetof(FFortWorldAuxData, bAllowInvites) == 0x000020, "Member 'FFortWorldAuxData::bAllowInvites' has a wrong offset!");
static_assert(offsetof(FFortWorldAuxData, bShouldAdvertise) == 0x000021, "Member 'FFortWorldAuxData::bShouldAdvertise' has a wrong offset!");
static_assert(offsetof(FFortWorldAuxData, bAllowJoinViaPresence) == 0x000022, "Member 'FFortWorldAuxData::bAllowJoinViaPresence' has a wrong offset!");
static_assert(offsetof(FFortWorldAuxData, bAllowJoinViaPresenceFriendsOnly) == 0x000023, "Member 'FFortWorldAuxData::bAllowJoinViaPresenceFriendsOnly' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayEffectInfo
// 0x0024 (0x0024 - 0x0000)
struct FGameplayEffectInfo final
{
public:
	class FName                                   Attribute;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Operation;                                         // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rating;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NumericDescription;                                // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayEffectInfo) == 0x000004, "Wrong alignment on FGameplayEffectInfo");
static_assert(sizeof(FGameplayEffectInfo) == 0x000024, "Wrong size on FGameplayEffectInfo");
static_assert(offsetof(FGameplayEffectInfo, Attribute) == 0x000000, "Member 'FGameplayEffectInfo::Attribute' has a wrong offset!");
static_assert(offsetof(FGameplayEffectInfo, Magnitude) == 0x000008, "Member 'FGameplayEffectInfo::Magnitude' has a wrong offset!");
static_assert(offsetof(FGameplayEffectInfo, Operation) == 0x00000C, "Member 'FGameplayEffectInfo::Operation' has a wrong offset!");
static_assert(offsetof(FGameplayEffectInfo, Rating) == 0x000014, "Member 'FGameplayEffectInfo::Rating' has a wrong offset!");
static_assert(offsetof(FGameplayEffectInfo, NumericDescription) == 0x000018, "Member 'FGameplayEffectInfo::NumericDescription' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientEvent
// 0x0018 (0x0018 - 0x0000)
struct FFortClientEvent final
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventSource;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortClientEvent) == 0x000004, "Wrong alignment on FFortClientEvent");
static_assert(sizeof(FFortClientEvent) == 0x000018, "Wrong size on FFortClientEvent");
static_assert(offsetof(FFortClientEvent, CategoryName) == 0x000000, "Member 'FFortClientEvent::CategoryName' has a wrong offset!");
static_assert(offsetof(FFortClientEvent, EventName) == 0x000008, "Member 'FFortClientEvent::EventName' has a wrong offset!");
static_assert(offsetof(FFortClientEvent, EventSource) == 0x000010, "Member 'FFortClientEvent::EventSource' has a wrong offset!");
static_assert(offsetof(FFortClientEvent, EventFocus) == 0x000014, "Member 'FFortClientEvent::EventFocus' has a wrong offset!");

// ScriptStruct FortniteGame.ThreatLocationInfo
// 0x0048 (0x0054 - 0x000C)
struct FThreatLocationInfo final : public FFastArraySerializerItem
{
public:
	struct FVector                                CloudLocation;                                     // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   ThreatVolume;                                      // 0x0018(0x001C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortThreatVisualsManager*              ThreatVisualsManager;                              // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AThreatCloud>            CloudActor;                                        // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x4];                                       // 0x0040(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CloudBuildUpTime;                                  // 0x0044(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0xC];                                       // 0x0048(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FThreatLocationInfo) == 0x000004, "Wrong alignment on FThreatLocationInfo");
static_assert(sizeof(FThreatLocationInfo) == 0x000054, "Wrong size on FThreatLocationInfo");
static_assert(offsetof(FThreatLocationInfo, CloudLocation) == 0x00000C, "Member 'FThreatLocationInfo::CloudLocation' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, ThreatVolume) == 0x000018, "Member 'FThreatLocationInfo::ThreatVolume' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, ThreatVisualsManager) == 0x000034, "Member 'FThreatLocationInfo::ThreatVisualsManager' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, CloudActor) == 0x000038, "Member 'FThreatLocationInfo::CloudActor' has a wrong offset!");
static_assert(offsetof(FThreatLocationInfo, CloudBuildUpTime) == 0x000044, "Member 'FThreatLocationInfo::CloudBuildUpTime' has a wrong offset!");

// ScriptStruct FortniteGame.TeamStrategicBuildingHandle
// 0x0004 (0x0004 - 0x0000)
struct FTeamStrategicBuildingHandle final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamStrategicBuildingHandle) == 0x000004, "Wrong alignment on FTeamStrategicBuildingHandle");
static_assert(sizeof(FTeamStrategicBuildingHandle) == 0x000004, "Wrong size on FTeamStrategicBuildingHandle");
static_assert(offsetof(FTeamStrategicBuildingHandle, Handle) == 0x000000, "Member 'FTeamStrategicBuildingHandle::Handle' has a wrong offset!");

// ScriptStruct FortniteGame.FortEventName
// 0x0010 (0x0010 - 0x0000)
struct FFortEventName
{
public:
	class FName                                   CategoryName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEventName) == 0x000004, "Wrong alignment on FFortEventName");
static_assert(sizeof(FFortEventName) == 0x000010, "Wrong size on FFortEventName");
static_assert(offsetof(FFortEventName, CategoryName) == 0x000000, "Member 'FFortEventName::CategoryName' has a wrong offset!");
static_assert(offsetof(FFortEventName, EventName) == 0x000008, "Member 'FFortEventName::EventName' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientEventName
// 0x0000 (0x0010 - 0x0010)
struct FFortClientEventName final : public FFortEventName
{
};
static_assert(alignof(FFortClientEventName) == 0x000004, "Wrong alignment on FFortClientEventName");
static_assert(sizeof(FFortClientEventName) == 0x000010, "Wrong size on FFortClientEventName");

// ScriptStruct FortniteGame.FortMultiSizeMargin
// 0x0060 (0x0060 - 0x0000)
struct FFortMultiSizeMargin final
{
public:
	struct FMargin                                Margin_XXS;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_XS;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_S;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_M;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_L;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMargin                                Margin_XL;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMultiSizeMargin) == 0x000004, "Wrong alignment on FFortMultiSizeMargin");
static_assert(sizeof(FFortMultiSizeMargin) == 0x000060, "Wrong size on FFortMultiSizeMargin");
static_assert(offsetof(FFortMultiSizeMargin, Margin_XXS) == 0x000000, "Member 'FFortMultiSizeMargin::Margin_XXS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_XS) == 0x000010, "Member 'FFortMultiSizeMargin::Margin_XS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_S) == 0x000020, "Member 'FFortMultiSizeMargin::Margin_S' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_M) == 0x000030, "Member 'FFortMultiSizeMargin::Margin_M' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_L) == 0x000040, "Member 'FFortMultiSizeMargin::Margin_L' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeMargin, Margin_XL) == 0x000050, "Member 'FFortMultiSizeMargin::Margin_XL' has a wrong offset!");

// ScriptStruct FortniteGame.EvolutionRequirements
// 0x0010 (0x0010 - 0x0000)
struct FEvolutionRequirements final
{
public:
	class UFortAccountItemDefinition*             ResultItem;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortAccountItemDefinition*>     ItemsRequired;                                     // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvolutionRequirements) == 0x000004, "Wrong alignment on FEvolutionRequirements");
static_assert(sizeof(FEvolutionRequirements) == 0x000010, "Wrong size on FEvolutionRequirements");
static_assert(offsetof(FEvolutionRequirements, ResultItem) == 0x000000, "Member 'FEvolutionRequirements::ResultItem' has a wrong offset!");
static_assert(offsetof(FEvolutionRequirements, ItemsRequired) == 0x000004, "Member 'FEvolutionRequirements::ItemsRequired' has a wrong offset!");

// ScriptStruct FortniteGame.FortUITeamMember
// 0x002C (0x002C - 0x0000)
struct FFortUITeamMember final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortPartyMemberState*                  PartyMemberState;                                  // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortLobbyBeaconPlayerState*            LobbyPlayerState;                                  // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerState*                       ZonePlayerState;                                   // 0x0020(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x8];                                       // 0x0024(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortUITeamMember) == 0x000004, "Wrong alignment on FFortUITeamMember");
static_assert(sizeof(FFortUITeamMember) == 0x00002C, "Wrong size on FFortUITeamMember");
static_assert(offsetof(FFortUITeamMember, PartyMemberState) == 0x000018, "Member 'FFortUITeamMember::PartyMemberState' has a wrong offset!");
static_assert(offsetof(FFortUITeamMember, LobbyPlayerState) == 0x00001C, "Member 'FFortUITeamMember::LobbyPlayerState' has a wrong offset!");
static_assert(offsetof(FFortUITeamMember, ZonePlayerState) == 0x000020, "Member 'FFortUITeamMember::ZonePlayerState' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionEventName
// 0x0000 (0x0010 - 0x0010)
struct FFortMissionEventName final : public FFortEventName
{
};
static_assert(alignof(FFortMissionEventName) == 0x000004, "Wrong alignment on FFortMissionEventName");
static_assert(sizeof(FFortMissionEventName) == 0x000010, "Wrong size on FFortMissionEventName");

// ScriptStruct FortniteGame.FortMapData
// 0x0030 (0x0030 - 0x0000)
struct FFortMapData final
{
public:
	TSoftObjectPtr<class UWorld>                  BuildingWorld;                                     // 0x0000(0x0018)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  BuildingLevelTags;                                 // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMapData) == 0x000004, "Wrong alignment on FFortMapData");
static_assert(sizeof(FFortMapData) == 0x000030, "Wrong size on FFortMapData");
static_assert(offsetof(FFortMapData, BuildingWorld) == 0x000000, "Member 'FFortMapData::BuildingWorld' has a wrong offset!");
static_assert(offsetof(FFortMapData, BuildingLevelTags) == 0x000018, "Member 'FFortMapData::BuildingLevelTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestObjectiveStatTableRow
// 0x0074 (0x0074 - 0x0000)
struct FFortQuestObjectiveStatTableRow final : public FTableRowBase
{
public:
	EFortQuestObjectiveType                       Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetTags;                                        // 0x0004(0x000C)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceTags;                                        // 0x0010(0x000C)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContextTags;                                       // 0x001C(0x000C)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetTagContainer;                                // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SourceTagContainer;                                // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ContextTagContainer;                               // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	int32                                         IntParameter;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestObjectiveStatTableRow) == 0x000004, "Wrong alignment on FFortQuestObjectiveStatTableRow");
static_assert(sizeof(FFortQuestObjectiveStatTableRow) == 0x000074, "Wrong size on FFortQuestObjectiveStatTableRow");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, Type) == 0x000000, "Member 'FFortQuestObjectiveStatTableRow::Type' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, TargetTags) == 0x000004, "Member 'FFortQuestObjectiveStatTableRow::TargetTags' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, SourceTags) == 0x000010, "Member 'FFortQuestObjectiveStatTableRow::SourceTags' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, ContextTags) == 0x00001C, "Member 'FFortQuestObjectiveStatTableRow::ContextTags' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, TargetTagContainer) == 0x000028, "Member 'FFortQuestObjectiveStatTableRow::TargetTagContainer' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, SourceTagContainer) == 0x000040, "Member 'FFortQuestObjectiveStatTableRow::SourceTagContainer' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, ContextTagContainer) == 0x000058, "Member 'FFortQuestObjectiveStatTableRow::ContextTagContainer' has a wrong offset!");
static_assert(offsetof(FFortQuestObjectiveStatTableRow, IntParameter) == 0x000070, "Member 'FFortQuestObjectiveStatTableRow::IntParameter' has a wrong offset!");

// ScriptStruct FortniteGame.FortCatalogMeta
// 0x0010 (0x0010 - 0x0000)
struct FFortCatalogMeta final
{
public:
	TArray<class UFortAccountItemDefinition*>     ChaseItems;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UFortCardPackItemDefinition*            PackDefinition;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCatalogMeta) == 0x000004, "Wrong alignment on FFortCatalogMeta");
static_assert(sizeof(FFortCatalogMeta) == 0x000010, "Wrong size on FFortCatalogMeta");
static_assert(offsetof(FFortCatalogMeta, ChaseItems) == 0x000000, "Member 'FFortCatalogMeta::ChaseItems' has a wrong offset!");
static_assert(offsetof(FFortCatalogMeta, PackDefinition) == 0x00000C, "Member 'FFortCatalogMeta::PackDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.FortTraitCostData
// 0x0014 (0x0014 - 0x0000)
struct FFortTraitCostData final : public FTableRowBase
{
public:
	int32                                         One;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Two;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Three;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Four;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Five;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTraitCostData) == 0x000004, "Wrong alignment on FFortTraitCostData");
static_assert(sizeof(FFortTraitCostData) == 0x000014, "Wrong size on FFortTraitCostData");
static_assert(offsetof(FFortTraitCostData, One) == 0x000000, "Member 'FFortTraitCostData::One' has a wrong offset!");
static_assert(offsetof(FFortTraitCostData, Two) == 0x000004, "Member 'FFortTraitCostData::Two' has a wrong offset!");
static_assert(offsetof(FFortTraitCostData, Three) == 0x000008, "Member 'FFortTraitCostData::Three' has a wrong offset!");
static_assert(offsetof(FFortTraitCostData, Four) == 0x00000C, "Member 'FFortTraitCostData::Four' has a wrong offset!");
static_assert(offsetof(FFortTraitCostData, Five) == 0x000010, "Member 'FFortTraitCostData::Five' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnContext
// 0x001C (0x001C - 0x0000)
struct FFortSpawnContext final
{
public:
	EFortTeam                                     Team;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0004(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSpawnContext) == 0x000004, "Wrong alignment on FFortSpawnContext");
static_assert(sizeof(FFortSpawnContext) == 0x00001C, "Wrong size on FFortSpawnContext");
static_assert(offsetof(FFortSpawnContext, Team) == 0x000000, "Member 'FFortSpawnContext::Team' has a wrong offset!");
static_assert(offsetof(FFortSpawnContext, Tags) == 0x000004, "Member 'FFortSpawnContext::Tags' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostUpgradesPerTheaterData
// 0x0008 (0x0008 - 0x0000)
struct FOutpostUpgradesPerTheaterData final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             OutpostUpgradesData;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostUpgradesPerTheaterData) == 0x000004, "Wrong alignment on FOutpostUpgradesPerTheaterData");
static_assert(sizeof(FOutpostUpgradesPerTheaterData) == 0x000008, "Wrong size on FOutpostUpgradesPerTheaterData");
static_assert(offsetof(FOutpostUpgradesPerTheaterData, TheaterSlot) == 0x000000, "Member 'FOutpostUpgradesPerTheaterData::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FOutpostUpgradesPerTheaterData, OutpostUpgradesData) == 0x000004, "Member 'FOutpostUpgradesPerTheaterData::OutpostUpgradesData' has a wrong offset!");

// ScriptStruct FortniteGame.FortActiveMontageDecisionWindow
// 0x000C (0x000C - 0x0000)
struct FFortActiveMontageDecisionWindow final
{
public:
	class UFortAnimNotifyState_AbilityDecisionWindow* DecisionWindow;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      DecisionAnimation;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceivedPrimaryInput;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReceivedSecondaryInput;                           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAlreadyProcessedInput;                            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortActiveMontageDecisionWindow) == 0x000004, "Wrong alignment on FFortActiveMontageDecisionWindow");
static_assert(sizeof(FFortActiveMontageDecisionWindow) == 0x00000C, "Wrong size on FFortActiveMontageDecisionWindow");
static_assert(offsetof(FFortActiveMontageDecisionWindow, DecisionWindow) == 0x000000, "Member 'FFortActiveMontageDecisionWindow::DecisionWindow' has a wrong offset!");
static_assert(offsetof(FFortActiveMontageDecisionWindow, DecisionAnimation) == 0x000004, "Member 'FFortActiveMontageDecisionWindow::DecisionAnimation' has a wrong offset!");
static_assert(offsetof(FFortActiveMontageDecisionWindow, bReceivedPrimaryInput) == 0x000008, "Member 'FFortActiveMontageDecisionWindow::bReceivedPrimaryInput' has a wrong offset!");
static_assert(offsetof(FFortActiveMontageDecisionWindow, bReceivedSecondaryInput) == 0x000009, "Member 'FFortActiveMontageDecisionWindow::bReceivedSecondaryInput' has a wrong offset!");
static_assert(offsetof(FFortActiveMontageDecisionWindow, bAlreadyProcessedInput) == 0x00000A, "Member 'FFortActiveMontageDecisionWindow::bAlreadyProcessedInput' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilitySetHandle
// 0x0020 (0x0020 - 0x0000)
struct FFortAbilitySetHandle final
{
public:
	TWeakObjectPtr<class UAbilitySystemComponent> TargetAbilitySystemComponent;                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FGameplayAbilitySpecHandle>     GrantedAbilityHandles;                             // 0x0008(0x000C)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FActiveGameplayEffectHandle>    AppliedEffectHandles;                              // 0x0014(0x000C)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAbilitySetHandle) == 0x000004, "Wrong alignment on FFortAbilitySetHandle");
static_assert(sizeof(FFortAbilitySetHandle) == 0x000020, "Wrong size on FFortAbilitySetHandle");
static_assert(offsetof(FFortAbilitySetHandle, TargetAbilitySystemComponent) == 0x000000, "Member 'FFortAbilitySetHandle::TargetAbilitySystemComponent' has a wrong offset!");
static_assert(offsetof(FFortAbilitySetHandle, GrantedAbilityHandles) == 0x000008, "Member 'FFortAbilitySetHandle::GrantedAbilityHandles' has a wrong offset!");
static_assert(offsetof(FFortAbilitySetHandle, AppliedEffectHandles) == 0x000014, "Member 'FFortAbilitySetHandle::AppliedEffectHandles' has a wrong offset!");

// ScriptStruct FortniteGame.TileGroupInfo
// 0x0014 (0x0014 - 0x0000)
struct FTileGroupInfo final
{
public:
	class UWorldTileGroup*                        TileGroup;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinTiles;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTiles;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPlaceAdjacent : 1;                                // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTileGroupInfo) == 0x000004, "Wrong alignment on FTileGroupInfo");
static_assert(sizeof(FTileGroupInfo) == 0x000014, "Wrong size on FTileGroupInfo");
static_assert(offsetof(FTileGroupInfo, TileGroup) == 0x000000, "Member 'FTileGroupInfo::TileGroup' has a wrong offset!");
static_assert(offsetof(FTileGroupInfo, Weight) == 0x000004, "Member 'FTileGroupInfo::Weight' has a wrong offset!");
static_assert(offsetof(FTileGroupInfo, MinTiles) == 0x000008, "Member 'FTileGroupInfo::MinTiles' has a wrong offset!");
static_assert(offsetof(FTileGroupInfo, MaxTiles) == 0x00000C, "Member 'FTileGroupInfo::MaxTiles' has a wrong offset!");

// ScriptStruct FortniteGame.TileGroupSelection
// 0x000C (0x000C - 0x0000)
struct FTileGroupSelection final
{
public:
	TArray<struct FTileGroupInfo>                 TileGroupOptions;                                  // 0x0000(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTileGroupSelection) == 0x000004, "Wrong alignment on FTileGroupSelection");
static_assert(sizeof(FTileGroupSelection) == 0x00000C, "Wrong size on FTileGroupSelection");
static_assert(offsetof(FTileGroupSelection, TileGroupOptions) == 0x000000, "Member 'FTileGroupSelection::TileGroupOptions' has a wrong offset!");

// ScriptStruct FortniteGame.FortRequirementsInfo
// 0x0020 (0x0020 - 0x0000)
struct FFortRequirementsInfo final
{
public:
	int32                                         CommanderLevel;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PersonalPowerRating;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PartyPowerRating;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortQuestItemDefinition*               QuestDefinition;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRequirementsInfo) == 0x000004, "Wrong alignment on FFortRequirementsInfo");
static_assert(sizeof(FFortRequirementsInfo) == 0x000020, "Wrong size on FFortRequirementsInfo");
static_assert(offsetof(FFortRequirementsInfo, CommanderLevel) == 0x000000, "Member 'FFortRequirementsInfo::CommanderLevel' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, PersonalPowerRating) == 0x000004, "Member 'FFortRequirementsInfo::PersonalPowerRating' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, PartyPowerRating) == 0x000008, "Member 'FFortRequirementsInfo::PartyPowerRating' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, QuestDefinition) == 0x00000C, "Member 'FFortRequirementsInfo::QuestDefinition' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, ObjectiveStatHandle) == 0x000010, "Member 'FFortRequirementsInfo::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FFortRequirementsInfo, ItemDefinition) == 0x00001C, "Member 'FFortRequirementsInfo::ItemDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMissionWeight
// 0x001C (0x001C - 0x0000)
struct FFortTheaterMissionWeight final
{
public:
	TSoftClassPtr<class UClass>                   MissionGenerator;                                  // 0x0000(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterMissionWeight) == 0x000004, "Wrong alignment on FFortTheaterMissionWeight");
static_assert(sizeof(FFortTheaterMissionWeight) == 0x00001C, "Wrong size on FFortTheaterMissionWeight");
static_assert(offsetof(FFortTheaterMissionWeight, MissionGenerator) == 0x000000, "Member 'FFortTheaterMissionWeight::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortTheaterMissionWeight, Weight) == 0x000018, "Member 'FFortTheaterMissionWeight::Weight' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterDifficultyWeight
// 0x001C (0x001C - 0x0000)
struct FFortTheaterDifficultyWeight final
{
public:
	struct FDataTableRowHandle                    DifficultyInfo;                                    // 0x0000(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 LootTierGroup;                                     // 0x000C(0x000C)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterDifficultyWeight) == 0x000004, "Wrong alignment on FFortTheaterDifficultyWeight");
static_assert(sizeof(FFortTheaterDifficultyWeight) == 0x00001C, "Wrong size on FFortTheaterDifficultyWeight");
static_assert(offsetof(FFortTheaterDifficultyWeight, DifficultyInfo) == 0x000000, "Member 'FFortTheaterDifficultyWeight::DifficultyInfo' has a wrong offset!");
static_assert(offsetof(FFortTheaterDifficultyWeight, LootTierGroup) == 0x00000C, "Member 'FFortTheaterDifficultyWeight::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortTheaterDifficultyWeight, Weight) == 0x000018, "Member 'FFortTheaterDifficultyWeight::Weight' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMapTileData
// 0x005C (0x005C - 0x0000)
struct FFortTheaterMapTileData final
{
public:
	EFortTheaterMapTileType                       TileType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ZoneTheme;                                         // 0x0004(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  Requirements;                                      // 0x001C(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         XCoordinate;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YCoordinate;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterMissionWeight>      MissionWeightOverrides;                            // 0x0044(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterDifficultyWeight>   DifficultyWeightOverrides;                         // 0x0050(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterMapTileData) == 0x000004, "Wrong alignment on FFortTheaterMapTileData");
static_assert(sizeof(FFortTheaterMapTileData) == 0x00005C, "Wrong size on FFortTheaterMapTileData");
static_assert(offsetof(FFortTheaterMapTileData, TileType) == 0x000000, "Member 'FFortTheaterMapTileData::TileType' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, ZoneTheme) == 0x000004, "Member 'FFortTheaterMapTileData::ZoneTheme' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, Requirements) == 0x00001C, "Member 'FFortTheaterMapTileData::Requirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, XCoordinate) == 0x00003C, "Member 'FFortTheaterMapTileData::XCoordinate' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, YCoordinate) == 0x000040, "Member 'FFortTheaterMapTileData::YCoordinate' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, MissionWeightOverrides) == 0x000044, "Member 'FFortTheaterMapTileData::MissionWeightOverrides' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapTileData, DifficultyWeightOverrides) == 0x000050, "Member 'FFortTheaterMapTileData::DifficultyWeightOverrides' has a wrong offset!");

// ScriptStruct FortniteGame.FortDailyQuestInfo
// 0x0010 (0x0010 - 0x0000)
struct FFortDailyQuestInfo final
{
public:
	class FName                                   DefaultQuestPack;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxActiveDailyQuests;                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRerollsPerDay;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDailyQuestInfo) == 0x000004, "Wrong alignment on FFortDailyQuestInfo");
static_assert(sizeof(FFortDailyQuestInfo) == 0x000010, "Wrong size on FFortDailyQuestInfo");
static_assert(offsetof(FFortDailyQuestInfo, DefaultQuestPack) == 0x000000, "Member 'FFortDailyQuestInfo::DefaultQuestPack' has a wrong offset!");
static_assert(offsetof(FFortDailyQuestInfo, MaxActiveDailyQuests) == 0x000008, "Member 'FFortDailyQuestInfo::MaxActiveDailyQuests' has a wrong offset!");
static_assert(offsetof(FFortDailyQuestInfo, MaxRerollsPerDay) == 0x00000C, "Member 'FFortDailyQuestInfo::MaxRerollsPerDay' has a wrong offset!");

// ScriptStruct FortniteGame.FortLootQuotaData
// 0x0018 (0x0018 - 0x0000)
struct FFortLootQuotaData final : public FTableRowBase
{
public:
	class FName                                   QuotaCategory;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELootQuotaLevel                               QuotaLevel;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Min;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Quota;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLootQuotaData) == 0x000004, "Wrong alignment on FFortLootQuotaData");
static_assert(sizeof(FFortLootQuotaData) == 0x000018, "Wrong size on FFortLootQuotaData");
static_assert(offsetof(FFortLootQuotaData, QuotaCategory) == 0x000000, "Member 'FFortLootQuotaData::QuotaCategory' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, QuotaLevel) == 0x000008, "Member 'FFortLootQuotaData::QuotaLevel' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, Min) == 0x00000C, "Member 'FFortLootQuotaData::Min' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, Max) == 0x000010, "Member 'FFortLootQuotaData::Max' has a wrong offset!");
static_assert(offsetof(FFortLootQuotaData, Quota) == 0x000014, "Member 'FFortLootQuotaData::Quota' has a wrong offset!");

// ScriptStruct FortniteGame.FortLoginReward
// 0x001C (0x001C - 0x0000)
struct FFortLoginReward final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortAccountItemDefinition> ItemDefinition;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLoginReward) == 0x000004, "Wrong alignment on FFortLoginReward");
static_assert(sizeof(FFortLoginReward) == 0x00001C, "Wrong size on FFortLoginReward");
static_assert(offsetof(FFortLoginReward, ItemDefinition) == 0x000000, "Member 'FFortLoginReward::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortLoginReward, ItemCount) == 0x000018, "Member 'FFortLoginReward::ItemCount' has a wrong offset!");

// ScriptStruct FortniteGame.FortNavLinkPattern
// 0x0008 (0x0008 - 0x0000)
struct FFortNavLinkPattern final
{
public:
	int32                                         PatternBits;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WildcardBits;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortNavLinkPattern) == 0x000004, "Wrong alignment on FFortNavLinkPattern");
static_assert(sizeof(FFortNavLinkPattern) == 0x000008, "Wrong size on FFortNavLinkPattern");
static_assert(offsetof(FFortNavLinkPattern, PatternBits) == 0x000000, "Member 'FFortNavLinkPattern::PatternBits' has a wrong offset!");
static_assert(offsetof(FFortNavLinkPattern, WildcardBits) == 0x000004, "Member 'FFortNavLinkPattern::WildcardBits' has a wrong offset!");

// ScriptStruct FortniteGame.FortWildcardData
// 0x000C (0x000C - 0x0000)
struct FFortWildcardData final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Idx;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortWildcardData) == 0x000004, "Wrong alignment on FFortWildcardData");
static_assert(sizeof(FFortWildcardData) == 0x00000C, "Wrong size on FFortWildcardData");
static_assert(offsetof(FFortWildcardData, RowName) == 0x000000, "Member 'FFortWildcardData::RowName' has a wrong offset!");
static_assert(offsetof(FFortWildcardData, Idx) == 0x000008, "Member 'FFortWildcardData::Idx' has a wrong offset!");

// ScriptStruct FortniteGame.FortMontageInputAction
// 0x0014 (0x0014 - 0x0000)
struct FFortMontageInputAction final
{
public:
	struct FGameplayTag                           TriggerAbilityTag;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   NextSection;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMontageInputType                         InputType;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMontageInputAction) == 0x000004, "Wrong alignment on FFortMontageInputAction");
static_assert(sizeof(FFortMontageInputAction) == 0x000014, "Wrong size on FFortMontageInputAction");
static_assert(offsetof(FFortMontageInputAction, TriggerAbilityTag) == 0x000000, "Member 'FFortMontageInputAction::TriggerAbilityTag' has a wrong offset!");
static_assert(offsetof(FFortMontageInputAction, NextSection) == 0x000008, "Member 'FFortMontageInputAction::NextSection' has a wrong offset!");
static_assert(offsetof(FFortMontageInputAction, InputType) == 0x000010, "Member 'FFortMontageInputAction::InputType' has a wrong offset!");

// ScriptStruct FortniteGame.FortSavedModeLoadout
// 0x0018 (0x0018 - 0x0000)
struct FFortSavedModeLoadout final
{
public:
	class FString                                 LoadoutName;                                       // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SelectedGadgets;                                   // 0x000C(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSavedModeLoadout) == 0x000004, "Wrong alignment on FFortSavedModeLoadout");
static_assert(sizeof(FFortSavedModeLoadout) == 0x000018, "Wrong size on FFortSavedModeLoadout");
static_assert(offsetof(FFortSavedModeLoadout, LoadoutName) == 0x000000, "Member 'FFortSavedModeLoadout::LoadoutName' has a wrong offset!");
static_assert(offsetof(FFortSavedModeLoadout, SelectedGadgets) == 0x00000C, "Member 'FFortSavedModeLoadout::SelectedGadgets' has a wrong offset!");

// ScriptStruct FortniteGame.TeamChangeRequest
// 0x0008 (0x0008 - 0x0000)
struct FTeamChangeRequest final
{
public:
	class AFortPlayerController*                  RequestingController;                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     DesiredTeam;                                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeamChangeRequest) == 0x000004, "Wrong alignment on FTeamChangeRequest");
static_assert(sizeof(FTeamChangeRequest) == 0x000008, "Wrong size on FTeamChangeRequest");
static_assert(offsetof(FTeamChangeRequest, RequestingController) == 0x000000, "Member 'FTeamChangeRequest::RequestingController' has a wrong offset!");
static_assert(offsetof(FTeamChangeRequest, DesiredTeam) == 0x000004, "Member 'FTeamChangeRequest::DesiredTeam' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterSettings
// 0x0030 (0x0030 - 0x0000)
struct FFortEncounterSettings final
{
public:
	TArray<EFortEncounterDirection>               ForbiddenSpawnDirections;                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRiftsDestroyPlayerBuiltBuildings;                 // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMustFindSpawnPoints;                              // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumRiftsToUseOverride;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEnvQuery*                              RiftSelectionQuery;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ScriptedSpawnPoints;                               // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         WorkingScriptedSpawnPoints;                        // 0x0024(0x000C)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterSettings) == 0x000004, "Wrong alignment on FFortEncounterSettings");
static_assert(sizeof(FFortEncounterSettings) == 0x000030, "Wrong size on FFortEncounterSettings");
static_assert(offsetof(FFortEncounterSettings, ForbiddenSpawnDirections) == 0x000000, "Member 'FFortEncounterSettings::ForbiddenSpawnDirections' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bRiftsDestroyPlayerBuiltBuildings) == 0x00000C, "Member 'FFortEncounterSettings::bRiftsDestroyPlayerBuiltBuildings' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, bMustFindSpawnPoints) == 0x00000D, "Member 'FFortEncounterSettings::bMustFindSpawnPoints' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, NumRiftsToUseOverride) == 0x000010, "Member 'FFortEncounterSettings::NumRiftsToUseOverride' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, RiftSelectionQuery) == 0x000014, "Member 'FFortEncounterSettings::RiftSelectionQuery' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, ScriptedSpawnPoints) == 0x000018, "Member 'FFortEncounterSettings::ScriptedSpawnPoints' has a wrong offset!");
static_assert(offsetof(FFortEncounterSettings, WorkingScriptedSpawnPoints) == 0x000024, "Member 'FFortEncounterSettings::WorkingScriptedSpawnPoints' has a wrong offset!");

// ScriptStruct FortniteGame.FortSurfaceDamageRatioStats
// 0x0060 (0x0060 - 0x0000)
struct FFortSurfaceDamageRatioStats final : public FTableRowBase
{
public:
	class FName                                   Default;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Wood;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Stone;                                             // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Metal;                                             // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   HumanEntity;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   AIEntity;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Explosive;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WeakSpot;                                          // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   Objective;                                         // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WeakSpot_Wood;                                     // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WeakSpot_Stone;                                    // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   WeakSpot_Metal;                                    // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortSurfaceDamageRatioStats) == 0x000004, "Wrong alignment on FFortSurfaceDamageRatioStats");
static_assert(sizeof(FFortSurfaceDamageRatioStats) == 0x000060, "Wrong size on FFortSurfaceDamageRatioStats");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Default) == 0x000000, "Member 'FFortSurfaceDamageRatioStats::Default' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Wood) == 0x000008, "Member 'FFortSurfaceDamageRatioStats::Wood' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Stone) == 0x000010, "Member 'FFortSurfaceDamageRatioStats::Stone' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Metal) == 0x000018, "Member 'FFortSurfaceDamageRatioStats::Metal' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, HumanEntity) == 0x000020, "Member 'FFortSurfaceDamageRatioStats::HumanEntity' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, AIEntity) == 0x000028, "Member 'FFortSurfaceDamageRatioStats::AIEntity' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Explosive) == 0x000030, "Member 'FFortSurfaceDamageRatioStats::Explosive' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, WeakSpot) == 0x000038, "Member 'FFortSurfaceDamageRatioStats::WeakSpot' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, Objective) == 0x000040, "Member 'FFortSurfaceDamageRatioStats::Objective' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, WeakSpot_Wood) == 0x000048, "Member 'FFortSurfaceDamageRatioStats::WeakSpot_Wood' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, WeakSpot_Stone) == 0x000050, "Member 'FFortSurfaceDamageRatioStats::WeakSpot_Stone' has a wrong offset!");
static_assert(offsetof(FFortSurfaceDamageRatioStats, WeakSpot_Metal) == 0x000058, "Member 'FFortSurfaceDamageRatioStats::WeakSpot_Metal' has a wrong offset!");

// ScriptStruct FortniteGame.ItemCategory
// 0x02DC (0x02DC - 0x0000)
struct FItemCategory final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   CategoryName;                                      // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    CategoryBrush;                                     // 0x0024(0x02B8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemCategory) == 0x000004, "Wrong alignment on FItemCategory");
static_assert(sizeof(FItemCategory) == 0x0002DC, "Wrong size on FItemCategory");
static_assert(offsetof(FItemCategory, TagContainer) == 0x000000, "Member 'FItemCategory::TagContainer' has a wrong offset!");
static_assert(offsetof(FItemCategory, CategoryName) == 0x000018, "Member 'FItemCategory::CategoryName' has a wrong offset!");
static_assert(offsetof(FItemCategory, CategoryBrush) == 0x000024, "Member 'FItemCategory::CategoryBrush' has a wrong offset!");

// ScriptStruct FortniteGame.FortMultiSizeFont
// 0x00F0 (0x00F0 - 0x0000)
struct FFortMultiSizeFont final
{
public:
	struct FSlateFontInfo                         Font_XXS;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_XS;                                           // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_S;                                            // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_M;                                            // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_L;                                            // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_XL;                                           // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMultiSizeFont) == 0x000004, "Wrong alignment on FFortMultiSizeFont");
static_assert(sizeof(FFortMultiSizeFont) == 0x0000F0, "Wrong size on FFortMultiSizeFont");
static_assert(offsetof(FFortMultiSizeFont, Font_XXS) == 0x000000, "Member 'FFortMultiSizeFont::Font_XXS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_XS) == 0x000028, "Member 'FFortMultiSizeFont::Font_XS' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_S) == 0x000050, "Member 'FFortMultiSizeFont::Font_S' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_M) == 0x000078, "Member 'FFortMultiSizeFont::Font_M' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_L) == 0x0000A0, "Member 'FFortMultiSizeFont::Font_L' has a wrong offset!");
static_assert(offsetof(FFortMultiSizeFont, Font_XL) == 0x0000C8, "Member 'FFortMultiSizeFont::Font_XL' has a wrong offset!");

// ScriptStruct FortniteGame.FortTargetFilter
// 0x0014 (0x0014 - 0x0000)
struct FFortTargetFilter final
{
public:
	EFortTargetSelectionFilter                    ActorTypeFilter;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ActorClassFilter;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeInstigator;                                // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExcludeRequester;                                 // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExcludeAllAttachedToInstigator;                   // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExcludeAllAttachedToRequester;                    // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExcludePawnFriends;                               // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExcludePawnEnemies;                               // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExcludeNonPawnFriends;                            // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExcludeNonPawnEnemies;                            // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExcludeWithoutNavigationCorridor;                 // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExcludeNonPlayerBuiltPieces;                      // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExcludePlayerBuiltPieces;                         // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bTraceComplexCollision;                            // 0x0013(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTargetFilter) == 0x000004, "Wrong alignment on FFortTargetFilter");
static_assert(sizeof(FFortTargetFilter) == 0x000014, "Wrong size on FFortTargetFilter");
static_assert(offsetof(FFortTargetFilter, ActorTypeFilter) == 0x000000, "Member 'FFortTargetFilter::ActorTypeFilter' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, ActorClassFilter) == 0x000004, "Member 'FFortTargetFilter::ActorClassFilter' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeInstigator) == 0x000008, "Member 'FFortTargetFilter::bExcludeInstigator' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeRequester) == 0x000009, "Member 'FFortTargetFilter::bExcludeRequester' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeAllAttachedToInstigator) == 0x00000A, "Member 'FFortTargetFilter::bExcludeAllAttachedToInstigator' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeAllAttachedToRequester) == 0x00000B, "Member 'FFortTargetFilter::bExcludeAllAttachedToRequester' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludePawnFriends) == 0x00000C, "Member 'FFortTargetFilter::bExcludePawnFriends' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludePawnEnemies) == 0x00000D, "Member 'FFortTargetFilter::bExcludePawnEnemies' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeNonPawnFriends) == 0x00000E, "Member 'FFortTargetFilter::bExcludeNonPawnFriends' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeNonPawnEnemies) == 0x00000F, "Member 'FFortTargetFilter::bExcludeNonPawnEnemies' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeWithoutNavigationCorridor) == 0x000010, "Member 'FFortTargetFilter::bExcludeWithoutNavigationCorridor' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludeNonPlayerBuiltPieces) == 0x000011, "Member 'FFortTargetFilter::bExcludeNonPlayerBuiltPieces' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bExcludePlayerBuiltPieces) == 0x000012, "Member 'FFortTargetFilter::bExcludePlayerBuiltPieces' has a wrong offset!");
static_assert(offsetof(FFortTargetFilter, bTraceComplexCollision) == 0x000013, "Member 'FFortTargetFilter::bTraceComplexCollision' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityTargetSelection
// 0x004C (0x004C - 0x0000)
struct FFortAbilityTargetSelection final
{
public:
	EFortTargetSelectionShape                     Shape;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomShapeComponentName;                          // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTargetSelectionTestType                  TestType;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAbilityTargetingSource                   PrimarySource;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAbilityTargetingSource                   SecondarySource;                                   // 0x0012(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Range;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HalfExtents;                                       // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ConeYawAngle;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConePitchAngle;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConeMinRadius;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTargetFilter                      TargetFilter;                                      // 0x0030(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bExcludeObstructedByWorld;                         // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCreateHitResultWhenNoTargetsFound;                // 0x0045(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortAbilityTargetSelectionUsage              TargetSelectionUsage;                              // 0x0046(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxTargets;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAbilityTargetSelection) == 0x000004, "Wrong alignment on FFortAbilityTargetSelection");
static_assert(sizeof(FFortAbilityTargetSelection) == 0x00004C, "Wrong size on FFortAbilityTargetSelection");
static_assert(offsetof(FFortAbilityTargetSelection, Shape) == 0x000000, "Member 'FFortAbilityTargetSelection::Shape' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, CustomShapeComponentName) == 0x000004, "Member 'FFortAbilityTargetSelection::CustomShapeComponentName' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, TestType) == 0x000010, "Member 'FFortAbilityTargetSelection::TestType' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, PrimarySource) == 0x000011, "Member 'FFortAbilityTargetSelection::PrimarySource' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, SecondarySource) == 0x000012, "Member 'FFortAbilityTargetSelection::SecondarySource' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, Range) == 0x000014, "Member 'FFortAbilityTargetSelection::Range' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, HalfExtents) == 0x000018, "Member 'FFortAbilityTargetSelection::HalfExtents' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, ConeYawAngle) == 0x000024, "Member 'FFortAbilityTargetSelection::ConeYawAngle' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, ConePitchAngle) == 0x000028, "Member 'FFortAbilityTargetSelection::ConePitchAngle' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, ConeMinRadius) == 0x00002C, "Member 'FFortAbilityTargetSelection::ConeMinRadius' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, TargetFilter) == 0x000030, "Member 'FFortAbilityTargetSelection::TargetFilter' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, bExcludeObstructedByWorld) == 0x000044, "Member 'FFortAbilityTargetSelection::bExcludeObstructedByWorld' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, bCreateHitResultWhenNoTargetsFound) == 0x000045, "Member 'FFortAbilityTargetSelection::bCreateHitResultWhenNoTargetsFound' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, TargetSelectionUsage) == 0x000046, "Member 'FFortAbilityTargetSelection::TargetSelectionUsage' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelection, MaxTargets) == 0x000048, "Member 'FFortAbilityTargetSelection::MaxTargets' has a wrong offset!");

// ScriptStruct FortniteGame.AIHotSpotSlotInfo
// 0x0008 (0x0008 - 0x0000)
struct FAIHotSpotSlotInfo final
{
public:
	class AAIHotSpot*                             HotSpot;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIHotSpotSlotInfo) == 0x000004, "Wrong alignment on FAIHotSpotSlotInfo");
static_assert(sizeof(FAIHotSpotSlotInfo) == 0x000008, "Wrong size on FAIHotSpotSlotInfo");
static_assert(offsetof(FAIHotSpotSlotInfo, HotSpot) == 0x000000, "Member 'FAIHotSpotSlotInfo::HotSpot' has a wrong offset!");
static_assert(offsetof(FAIHotSpotSlotInfo, SlotIndex) == 0x000004, "Member 'FAIHotSpotSlotInfo::SlotIndex' has a wrong offset!");

// ScriptStruct FortniteGame.FortPersistentGameplayStatContainer
// 0x000C (0x000C - 0x0000)
struct FFortPersistentGameplayStatContainer final
{
public:
	TArray<struct FFortPersistentGameplayStatValue> GameplayStats;                                     // 0x0000(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPersistentGameplayStatContainer) == 0x000004, "Wrong alignment on FFortPersistentGameplayStatContainer");
static_assert(sizeof(FFortPersistentGameplayStatContainer) == 0x00000C, "Wrong size on FFortPersistentGameplayStatContainer");
static_assert(offsetof(FFortPersistentGameplayStatContainer, GameplayStats) == 0x000000, "Member 'FFortPersistentGameplayStatContainer::GameplayStats' has a wrong offset!");

// ScriptStruct FortniteGame.RecentDamagedBuildingInfo
// 0x0010 (0x0010 - 0x0000)
struct FRecentDamagedBuildingInfo final
{
public:
	TWeakObjectPtr<class ABuildingSMActor>        Building;                                          // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         LastDamagedTime;                                   // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UndistributedResources;                            // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecentDamagedBuildingInfo) == 0x000004, "Wrong alignment on FRecentDamagedBuildingInfo");
static_assert(sizeof(FRecentDamagedBuildingInfo) == 0x000010, "Wrong size on FRecentDamagedBuildingInfo");
static_assert(offsetof(FRecentDamagedBuildingInfo, Building) == 0x000000, "Member 'FRecentDamagedBuildingInfo::Building' has a wrong offset!");
static_assert(offsetof(FRecentDamagedBuildingInfo, LastDamagedTime) == 0x000008, "Member 'FRecentDamagedBuildingInfo::LastDamagedTime' has a wrong offset!");
static_assert(offsetof(FRecentDamagedBuildingInfo, UndistributedResources) == 0x00000C, "Member 'FRecentDamagedBuildingInfo::UndistributedResources' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectModifierDescription
// 0x0018 (0x0018 - 0x0000)
struct FFortGameplayEffectModifierDescription final
{
public:
	struct FGameplayAttribute                     ModAttribute;                                      // 0x0000(0x0004)(NativeAccessSpecifierPublic)
	class FText                                   ModDescription;                                    // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsBuff;                                           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortAttributeDisplay                         MagnitudeFormat;                                   // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortStatDisplayType                          DisplayType;                                       // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Magnitude;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayEffectModifierDescription) == 0x000004, "Wrong alignment on FFortGameplayEffectModifierDescription");
static_assert(sizeof(FFortGameplayEffectModifierDescription) == 0x000018, "Wrong size on FFortGameplayEffectModifierDescription");
static_assert(offsetof(FFortGameplayEffectModifierDescription, ModAttribute) == 0x000000, "Member 'FFortGameplayEffectModifierDescription::ModAttribute' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, ModDescription) == 0x000004, "Member 'FFortGameplayEffectModifierDescription::ModDescription' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, bIsBuff) == 0x000010, "Member 'FFortGameplayEffectModifierDescription::bIsBuff' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, MagnitudeFormat) == 0x000011, "Member 'FFortGameplayEffectModifierDescription::MagnitudeFormat' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, DisplayType) == 0x000012, "Member 'FFortGameplayEffectModifierDescription::DisplayType' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectModifierDescription, Magnitude) == 0x000014, "Member 'FFortGameplayEffectModifierDescription::Magnitude' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingActorHotSpotDirection
// 0x0018 (0x0018 - 0x0000)
struct FBuildingActorHotSpotDirection final
{
public:
	class UAIHotSpotConfig*                       HotSpotConfig;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bMirrorX : 1;                                      // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bMirrorY : 1;                                      // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EFortHotSpotDirection                         Direction;                                         // 0x0014(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingActorHotSpotDirection) == 0x000004, "Wrong alignment on FBuildingActorHotSpotDirection");
static_assert(sizeof(FBuildingActorHotSpotDirection) == 0x000018, "Wrong size on FBuildingActorHotSpotDirection");
static_assert(offsetof(FBuildingActorHotSpotDirection, HotSpotConfig) == 0x000000, "Member 'FBuildingActorHotSpotDirection::HotSpotConfig' has a wrong offset!");
static_assert(offsetof(FBuildingActorHotSpotDirection, Offset) == 0x000004, "Member 'FBuildingActorHotSpotDirection::Offset' has a wrong offset!");
static_assert(offsetof(FBuildingActorHotSpotDirection, Direction) == 0x000014, "Member 'FBuildingActorHotSpotDirection::Direction' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingNavObstacle
// 0x0020 (0x0020 - 0x0000)
struct FBuildingNavObstacle final
{
public:
	struct FBox                                   LocalBounds;                                       // 0x0000(0x001C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EBuildingNavObstacleType                      ObstacleType;                                      // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingNavObstacle) == 0x000004, "Wrong alignment on FBuildingNavObstacle");
static_assert(sizeof(FBuildingNavObstacle) == 0x000020, "Wrong size on FBuildingNavObstacle");
static_assert(offsetof(FBuildingNavObstacle, LocalBounds) == 0x000000, "Member 'FBuildingNavObstacle::LocalBounds' has a wrong offset!");
static_assert(offsetof(FBuildingNavObstacle, ObstacleType) == 0x00001C, "Member 'FBuildingNavObstacle::ObstacleType' has a wrong offset!");

// ScriptStruct FortniteGame.ReplicatedStatValues
// 0x0008 (0x0008 - 0x0000)
struct FReplicatedStatValues final
{
public:
	int32                                         StatValue;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreValue;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReplicatedStatValues) == 0x000004, "Wrong alignment on FReplicatedStatValues");
static_assert(sizeof(FReplicatedStatValues) == 0x000008, "Wrong size on FReplicatedStatValues");
static_assert(offsetof(FReplicatedStatValues, StatValue) == 0x000000, "Member 'FReplicatedStatValues::StatValue' has a wrong offset!");
static_assert(offsetof(FReplicatedStatValues, ScoreValue) == 0x000004, "Member 'FReplicatedStatValues::ScoreValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerScoreReport
// 0x0228 (0x0228 - 0x0000)
struct FFortPlayerScoreReport final
{
public:
	TWeakObjectPtr<class AFortPlayerState>        PlayerState;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTeam                                     PlayerTeam;                                        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReplicatedStatValues                  ReplicatedStats_Campaign[0x21];                    // 0x0018(0x0008)(NativeAccessSpecifierPublic)
	struct FReplicatedStatValues                  ReplicatedStats_Zone[0x21];                        // 0x0120(0x0008)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerScoreReport) == 0x000004, "Wrong alignment on FFortPlayerScoreReport");
static_assert(sizeof(FFortPlayerScoreReport) == 0x000228, "Wrong size on FFortPlayerScoreReport");
static_assert(offsetof(FFortPlayerScoreReport, PlayerState) == 0x000000, "Member 'FFortPlayerScoreReport::PlayerState' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, PlayerName) == 0x000008, "Member 'FFortPlayerScoreReport::PlayerName' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, PlayerTeam) == 0x000014, "Member 'FFortPlayerScoreReport::PlayerTeam' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, ReplicatedStats_Campaign) == 0x000018, "Member 'FFortPlayerScoreReport::ReplicatedStats_Campaign' has a wrong offset!");
static_assert(offsetof(FFortPlayerScoreReport, ReplicatedStats_Zone) == 0x000120, "Member 'FFortPlayerScoreReport::ReplicatedStats_Zone' has a wrong offset!");

// ScriptStruct FortniteGame.HeroSpecializationAttributeRequirement
// 0x0008 (0x0008 - 0x0000)
struct FHeroSpecializationAttributeRequirement final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         MinimumValue;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroSpecializationAttributeRequirement) == 0x000004, "Wrong alignment on FHeroSpecializationAttributeRequirement");
static_assert(sizeof(FHeroSpecializationAttributeRequirement) == 0x000008, "Wrong size on FHeroSpecializationAttributeRequirement");
static_assert(offsetof(FHeroSpecializationAttributeRequirement, Attribute) == 0x000000, "Member 'FHeroSpecializationAttributeRequirement::Attribute' has a wrong offset!");
static_assert(offsetof(FHeroSpecializationAttributeRequirement, MinimumValue) == 0x000004, "Member 'FHeroSpecializationAttributeRequirement::MinimumValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpecializationSlot
// 0x0030 (0x0030 - 0x0000)
struct FFortSpecializationSlot final
{
public:
	class UFortAbilityKit*                        GrantedAbilityKit;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilityKit*                        RemovedAbilityKit;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHeroSpecializationAttributeRequirement> AttributeRequirements;                             // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0014(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         MinimumHeroLevel;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSpecializationSlot) == 0x000004, "Wrong alignment on FFortSpecializationSlot");
static_assert(sizeof(FFortSpecializationSlot) == 0x000030, "Wrong size on FFortSpecializationSlot");
static_assert(offsetof(FFortSpecializationSlot, GrantedAbilityKit) == 0x000000, "Member 'FFortSpecializationSlot::GrantedAbilityKit' has a wrong offset!");
static_assert(offsetof(FFortSpecializationSlot, RemovedAbilityKit) == 0x000004, "Member 'FFortSpecializationSlot::RemovedAbilityKit' has a wrong offset!");
static_assert(offsetof(FFortSpecializationSlot, AttributeRequirements) == 0x000008, "Member 'FFortSpecializationSlot::AttributeRequirements' has a wrong offset!");
static_assert(offsetof(FFortSpecializationSlot, RequiredTags) == 0x000014, "Member 'FFortSpecializationSlot::RequiredTags' has a wrong offset!");
static_assert(offsetof(FFortSpecializationSlot, MinimumHeroLevel) == 0x00002C, "Member 'FFortSpecializationSlot::MinimumHeroLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortSearchPassState
// 0x001C (0x001C - 0x0000)
struct FFortSearchPassState final
{
public:
	int32                                         BestSessionIdx;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WUIDLockSemaphore;                                 // 0x0004(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasCanceled;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWasFailure;                                       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EMatchmakingState                             MatchmakingState;                                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyReservationResult                       LastBeaconResponse;                                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x8];                                       // 0x0014(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSearchPassState) == 0x000004, "Wrong alignment on FFortSearchPassState");
static_assert(sizeof(FFortSearchPassState) == 0x00001C, "Wrong size on FFortSearchPassState");
static_assert(offsetof(FFortSearchPassState, BestSessionIdx) == 0x000000, "Member 'FFortSearchPassState::BestSessionIdx' has a wrong offset!");
static_assert(offsetof(FFortSearchPassState, WUIDLockSemaphore) == 0x000004, "Member 'FFortSearchPassState::WUIDLockSemaphore' has a wrong offset!");
static_assert(offsetof(FFortSearchPassState, bWasCanceled) == 0x000010, "Member 'FFortSearchPassState::bWasCanceled' has a wrong offset!");
static_assert(offsetof(FFortSearchPassState, bWasFailure) == 0x000011, "Member 'FFortSearchPassState::bWasFailure' has a wrong offset!");
static_assert(offsetof(FFortSearchPassState, MatchmakingState) == 0x000012, "Member 'FFortSearchPassState::MatchmakingState' has a wrong offset!");
static_assert(offsetof(FFortSearchPassState, LastBeaconResponse) == 0x000013, "Member 'FFortSearchPassState::LastBeaconResponse' has a wrong offset!");

// ScriptStruct FortniteGame.GameplayEffectApplicationInfo
// 0x0008 (0x0008 - 0x0000)
struct FGameplayEffectApplicationInfo final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayEffectApplicationInfo) == 0x000004, "Wrong alignment on FGameplayEffectApplicationInfo");
static_assert(sizeof(FGameplayEffectApplicationInfo) == 0x000008, "Wrong size on FGameplayEffectApplicationInfo");
static_assert(offsetof(FGameplayEffectApplicationInfo, GameplayEffect) == 0x000000, "Member 'FGameplayEffectApplicationInfo::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FGameplayEffectApplicationInfo, Level) == 0x000004, "Member 'FGameplayEffectApplicationInfo::Level' has a wrong offset!");

// ScriptStruct FortniteGame.FortPresenceBasicInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortPresenceBasicInfo final
{
public:
	int32                                         HomeBaseRating;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BannerPatternIndex;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BannerColor;                                       // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPresenceBasicInfo) == 0x000004, "Wrong alignment on FFortPresenceBasicInfo");
static_assert(sizeof(FFortPresenceBasicInfo) == 0x000018, "Wrong size on FFortPresenceBasicInfo");
static_assert(offsetof(FFortPresenceBasicInfo, HomeBaseRating) == 0x000000, "Member 'FFortPresenceBasicInfo::HomeBaseRating' has a wrong offset!");
static_assert(offsetof(FFortPresenceBasicInfo, BannerPatternIndex) == 0x000004, "Member 'FFortPresenceBasicInfo::BannerPatternIndex' has a wrong offset!");
static_assert(offsetof(FFortPresenceBasicInfo, BannerColor) == 0x000008, "Member 'FFortPresenceBasicInfo::BannerColor' has a wrong offset!");

// ScriptStruct FortniteGame.FortHighlightColors
// 0x0030 (0x0030 - 0x0000)
struct FFortHighlightColors final
{
public:
	struct FLinearColor                           OutlineColor;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           SceneModulationColor1;                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           SceneModulationColor2;                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHighlightColors) == 0x000004, "Wrong alignment on FFortHighlightColors");
static_assert(sizeof(FFortHighlightColors) == 0x000030, "Wrong size on FFortHighlightColors");
static_assert(offsetof(FFortHighlightColors, OutlineColor) == 0x000000, "Member 'FFortHighlightColors::OutlineColor' has a wrong offset!");
static_assert(offsetof(FFortHighlightColors, SceneModulationColor1) == 0x000010, "Member 'FFortHighlightColors::SceneModulationColor1' has a wrong offset!");
static_assert(offsetof(FFortHighlightColors, SceneModulationColor2) == 0x000020, "Member 'FFortHighlightColors::SceneModulationColor2' has a wrong offset!");

// ScriptStruct FortniteGame.SchematicRequirement
// 0x000C (0x000C - 0x0000)
struct FSchematicRequirement final
{
public:
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsConsumed;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSchematicRequirement) == 0x000004, "Wrong alignment on FSchematicRequirement");
static_assert(sizeof(FSchematicRequirement) == 0x00000C, "Wrong size on FSchematicRequirement");
static_assert(offsetof(FSchematicRequirement, ItemDefinition) == 0x000000, "Member 'FSchematicRequirement::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FSchematicRequirement, Count) == 0x000004, "Member 'FSchematicRequirement::Count' has a wrong offset!");
static_assert(offsetof(FSchematicRequirement, bIsConsumed) == 0x000008, "Member 'FSchematicRequirement::bIsConsumed' has a wrong offset!");

// ScriptStruct FortniteGame.FortDeliveryInfoRequirementsFilter
// 0x0068 (0x0068 - 0x0000)
struct FFortDeliveryInfoRequirementsFilter final
{
public:
	struct FGameplayTagRequirements               SourceTagRequirements;                             // 0x0000(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TargetTagRequirements;                             // 0x0030(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortTeamAffiliation                          ApplicableTeamAffiliation;                         // 0x0060(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bConsiderTeamAffiliationToInstigator : 1;          // 0x0064(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bApplyToPlayerPawns : 1;                           // 0x0064(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bApplyToAIPawns : 1;                               // 0x0064(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bApplyToBuildingActors : 1;                        // 0x0064(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDeliveryInfoRequirementsFilter) == 0x000004, "Wrong alignment on FFortDeliveryInfoRequirementsFilter");
static_assert(sizeof(FFortDeliveryInfoRequirementsFilter) == 0x000068, "Wrong size on FFortDeliveryInfoRequirementsFilter");
static_assert(offsetof(FFortDeliveryInfoRequirementsFilter, SourceTagRequirements) == 0x000000, "Member 'FFortDeliveryInfoRequirementsFilter::SourceTagRequirements' has a wrong offset!");
static_assert(offsetof(FFortDeliveryInfoRequirementsFilter, TargetTagRequirements) == 0x000030, "Member 'FFortDeliveryInfoRequirementsFilter::TargetTagRequirements' has a wrong offset!");
static_assert(offsetof(FFortDeliveryInfoRequirementsFilter, ApplicableTeamAffiliation) == 0x000060, "Member 'FFortDeliveryInfoRequirementsFilter::ApplicableTeamAffiliation' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilitySetDeliveryInfo
// 0x0074 (0x0074 - 0x0000)
struct FFortAbilitySetDeliveryInfo final
{
public:
	struct FFortDeliveryInfoRequirementsFilter    DeliveryRequirements;                              // 0x0000(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UFortAbilitySet>> AbilitySets;                                       // 0x0068(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAbilitySetDeliveryInfo) == 0x000004, "Wrong alignment on FFortAbilitySetDeliveryInfo");
static_assert(sizeof(FFortAbilitySetDeliveryInfo) == 0x000074, "Wrong size on FFortAbilitySetDeliveryInfo");
static_assert(offsetof(FFortAbilitySetDeliveryInfo, DeliveryRequirements) == 0x000000, "Member 'FFortAbilitySetDeliveryInfo::DeliveryRequirements' has a wrong offset!");
static_assert(offsetof(FFortAbilitySetDeliveryInfo, AbilitySets) == 0x000068, "Member 'FFortAbilitySetDeliveryInfo::AbilitySets' has a wrong offset!");

// ScriptStruct FortniteGame.FortZoneEvent
// 0x0014 (0x0014 - 0x0000)
struct FFortZoneEvent final
{
public:
	class FName                                   EventType;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             EventContent;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortZoneEvent) == 0x000004, "Wrong alignment on FFortZoneEvent");
static_assert(sizeof(FFortZoneEvent) == 0x000014, "Wrong size on FFortZoneEvent");
static_assert(offsetof(FFortZoneEvent, EventType) == 0x000000, "Member 'FFortZoneEvent::EventType' has a wrong offset!");
static_assert(offsetof(FFortZoneEvent, EventFocus) == 0x000008, "Member 'FFortZoneEvent::EventFocus' has a wrong offset!");
static_assert(offsetof(FFortZoneEvent, EventContent) == 0x00000C, "Member 'FFortZoneEvent::EventContent' has a wrong offset!");
static_assert(offsetof(FFortZoneEvent, EventInstigator) == 0x000010, "Member 'FFortZoneEvent::EventInstigator' has a wrong offset!");

// ScriptStruct FortniteGame.FortRewardReport
// 0x0030 (0x0030 - 0x0000)
struct FFortRewardReport final
{
public:
	class FString                                 GameAccountId;                                     // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAdvancementInfo>           InitialAdvancementInfo;                            // 0x000C(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAdvancementInfo>           FinalAdvancementInfo;                              // 0x0018(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortRewardActivity>            RewardActivities;                                  // 0x0024(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRewardReport) == 0x000004, "Wrong alignment on FFortRewardReport");
static_assert(sizeof(FFortRewardReport) == 0x000030, "Wrong size on FFortRewardReport");
static_assert(offsetof(FFortRewardReport, GameAccountId) == 0x000000, "Member 'FFortRewardReport::GameAccountId' has a wrong offset!");
static_assert(offsetof(FFortRewardReport, InitialAdvancementInfo) == 0x00000C, "Member 'FFortRewardReport::InitialAdvancementInfo' has a wrong offset!");
static_assert(offsetof(FFortRewardReport, FinalAdvancementInfo) == 0x000018, "Member 'FFortRewardReport::FinalAdvancementInfo' has a wrong offset!");
static_assert(offsetof(FFortRewardReport, RewardActivities) == 0x000024, "Member 'FFortRewardReport::RewardActivities' has a wrong offset!");

// ScriptStruct FortniteGame.TeamSpottedActorInfo
// 0x000C (0x0018 - 0x000C)
struct FTeamSpottedActorInfo final : public FFastArraySerializerItem
{
public:
	float                                         ExpirationTime;                                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  Spotter;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpottedActor;                                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamSpottedActorInfo) == 0x000004, "Wrong alignment on FTeamSpottedActorInfo");
static_assert(sizeof(FTeamSpottedActorInfo) == 0x000018, "Wrong size on FTeamSpottedActorInfo");
static_assert(offsetof(FTeamSpottedActorInfo, ExpirationTime) == 0x00000C, "Member 'FTeamSpottedActorInfo::ExpirationTime' has a wrong offset!");
static_assert(offsetof(FTeamSpottedActorInfo, Spotter) == 0x000010, "Member 'FTeamSpottedActorInfo::Spotter' has a wrong offset!");
static_assert(offsetof(FTeamSpottedActorInfo, SpottedActor) == 0x000014, "Member 'FTeamSpottedActorInfo::SpottedActor' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityCost
// 0x0020 (0x0020 - 0x0000)
struct FFortAbilityCost final
{
public:
	EFortAbilityCostSource                        CostSource;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         CostValue;                                         // 0x0004(0x0014)(Edit, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyApplyCostOnHit;                               // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAbilityCost) == 0x000004, "Wrong alignment on FFortAbilityCost");
static_assert(sizeof(FFortAbilityCost) == 0x000020, "Wrong size on FFortAbilityCost");
static_assert(offsetof(FFortAbilityCost, CostSource) == 0x000000, "Member 'FFortAbilityCost::CostSource' has a wrong offset!");
static_assert(offsetof(FFortAbilityCost, CostValue) == 0x000004, "Member 'FFortAbilityCost::CostValue' has a wrong offset!");
static_assert(offsetof(FFortAbilityCost, ItemDefinition) == 0x000018, "Member 'FFortAbilityCost::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortAbilityCost, bOnlyApplyCostOnHit) == 0x00001C, "Member 'FFortAbilityCost::bOnlyApplyCostOnHit' has a wrong offset!");

// ScriptStruct FortniteGame.FortGiftGiver
// 0x0004 (0x001C - 0x0018)
struct FFortGiftGiver final : public FFortGiftingInfo
{
public:
	int32                                         NumItemsGiven;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGiftGiver) == 0x000004, "Wrong alignment on FFortGiftGiver");
static_assert(sizeof(FFortGiftGiver) == 0x00001C, "Wrong size on FFortGiftGiver");
static_assert(offsetof(FFortGiftGiver, NumItemsGiven) == 0x000018, "Member 'FFortGiftGiver::NumItemsGiven' has a wrong offset!");

// ScriptStruct FortniteGame.SpawnGroupEnemy
// 0x000C (0x000C - 0x0000)
struct FSpawnGroupEnemy final
{
public:
	TSubclassOf<class UFortAIPawnVariant>         EnemyVariantClass;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideVariantSpawnPointValue;                   // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnValue;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnGroupEnemy) == 0x000004, "Wrong alignment on FSpawnGroupEnemy");
static_assert(sizeof(FSpawnGroupEnemy) == 0x00000C, "Wrong size on FSpawnGroupEnemy");
static_assert(offsetof(FSpawnGroupEnemy, EnemyVariantClass) == 0x000000, "Member 'FSpawnGroupEnemy::EnemyVariantClass' has a wrong offset!");
static_assert(offsetof(FSpawnGroupEnemy, bOverrideVariantSpawnPointValue) == 0x000004, "Member 'FSpawnGroupEnemy::bOverrideVariantSpawnPointValue' has a wrong offset!");
static_assert(offsetof(FSpawnGroupEnemy, SpawnValue) == 0x000008, "Member 'FSpawnGroupEnemy::SpawnValue' has a wrong offset!");

// ScriptStruct FortniteGame.PawnDamageZones
// 0x0010 (0x0010 - 0x0000)
struct FPawnDamageZones final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Bones;                                             // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnDamageZones) == 0x000004, "Wrong alignment on FPawnDamageZones");
static_assert(sizeof(FPawnDamageZones) == 0x000010, "Wrong size on FPawnDamageZones");
static_assert(offsetof(FPawnDamageZones, bActive) == 0x000000, "Member 'FPawnDamageZones::bActive' has a wrong offset!");
static_assert(offsetof(FPawnDamageZones, Bones) == 0x000004, "Member 'FPawnDamageZones::Bones' has a wrong offset!");

// ScriptStruct FortniteGame.FortUpdatedObjectiveStat
// 0x0010 (0x0010 - 0x0000)
struct FFortUpdatedObjectiveStat final
{
public:
	class UFortQuestItemDefinition*               Quest;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObjectiveStatName;                                 // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUpdatedObjectiveStat) == 0x000004, "Wrong alignment on FFortUpdatedObjectiveStat");
static_assert(sizeof(FFortUpdatedObjectiveStat) == 0x000010, "Wrong size on FFortUpdatedObjectiveStat");
static_assert(offsetof(FFortUpdatedObjectiveStat, Quest) == 0x000000, "Member 'FFortUpdatedObjectiveStat::Quest' has a wrong offset!");
static_assert(offsetof(FFortUpdatedObjectiveStat, ObjectiveStatName) == 0x000004, "Member 'FFortUpdatedObjectiveStat::ObjectiveStatName' has a wrong offset!");
static_assert(offsetof(FFortUpdatedObjectiveStat, StatValue) == 0x00000C, "Member 'FFortUpdatedObjectiveStat::StatValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlacementActorFinderEntry
// 0x0068 (0x0068 - 0x0000)
struct FFortPlacementActorFinderEntry final
{
public:
	TSoftClassPtr<class UClass>                   BuildingToSpawn;                                   // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PreferredTags;                                     // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ExlusionTags;                                      // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingSMActor>           BuildingClassToReplace;                            // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCollisionCheck;                             // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSnapToGrid;                                       // 0x0065(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPlacementActorFinderEntry) == 0x000004, "Wrong alignment on FFortPlacementActorFinderEntry");
static_assert(sizeof(FFortPlacementActorFinderEntry) == 0x000068, "Wrong size on FFortPlacementActorFinderEntry");
static_assert(offsetof(FFortPlacementActorFinderEntry, BuildingToSpawn) == 0x000000, "Member 'FFortPlacementActorFinderEntry::BuildingToSpawn' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, RequiredTags) == 0x000018, "Member 'FFortPlacementActorFinderEntry::RequiredTags' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, PreferredTags) == 0x000030, "Member 'FFortPlacementActorFinderEntry::PreferredTags' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, ExlusionTags) == 0x000048, "Member 'FFortPlacementActorFinderEntry::ExlusionTags' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, BuildingClassToReplace) == 0x000060, "Member 'FFortPlacementActorFinderEntry::BuildingClassToReplace' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, bIgnoreCollisionCheck) == 0x000064, "Member 'FFortPlacementActorFinderEntry::bIgnoreCollisionCheck' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderEntry, bSnapToGrid) == 0x000065, "Member 'FFortPlacementActorFinderEntry::bSnapToGrid' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlacementActorFinderInfo
// 0x0014 (0x0014 - 0x0000)
struct FFortPlacementActorFinderInfo final
{
public:
	float                                         DistanceRangeMin;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceRangeMax;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortPlacementActorFinderEntry> BuildingData;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlacementActorFinderInfo) == 0x000004, "Wrong alignment on FFortPlacementActorFinderInfo");
static_assert(sizeof(FFortPlacementActorFinderInfo) == 0x000014, "Wrong size on FFortPlacementActorFinderInfo");
static_assert(offsetof(FFortPlacementActorFinderInfo, DistanceRangeMin) == 0x000000, "Member 'FFortPlacementActorFinderInfo::DistanceRangeMin' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderInfo, DistanceRangeMax) == 0x000004, "Member 'FFortPlacementActorFinderInfo::DistanceRangeMax' has a wrong offset!");
static_assert(offsetof(FFortPlacementActorFinderInfo, BuildingData) == 0x000008, "Member 'FFortPlacementActorFinderInfo::BuildingData' has a wrong offset!");

// ScriptStruct FortniteGame.FortTooltipMapEntry
// 0x0008 (0x0008 - 0x0000)
struct FFortTooltipMapEntry final
{
public:
	class UClass*                                 ObjectClass;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortTooltip>               TooltipClass;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTooltipMapEntry) == 0x000004, "Wrong alignment on FFortTooltipMapEntry");
static_assert(sizeof(FFortTooltipMapEntry) == 0x000008, "Wrong size on FFortTooltipMapEntry");
static_assert(offsetof(FFortTooltipMapEntry, ObjectClass) == 0x000000, "Member 'FFortTooltipMapEntry::ObjectClass' has a wrong offset!");
static_assert(offsetof(FFortTooltipMapEntry, TooltipClass) == 0x000004, "Member 'FFortTooltipMapEntry::TooltipClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortConnectionData
// 0x002C (0x002C - 0x0000)
struct FFortConnectionData final
{
public:
	class ABuildingSMActor*                       ConnectedActor;                                    // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGuid                                  ConnectedActorGuid;                                // 0x0004(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	class FName                                   MySocketName;                                      // 0x0014(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TheirSocketName;                                   // 0x001C(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x8];                                       // 0x0024(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortConnectionData) == 0x000004, "Wrong alignment on FFortConnectionData");
static_assert(sizeof(FFortConnectionData) == 0x00002C, "Wrong size on FFortConnectionData");
static_assert(offsetof(FFortConnectionData, ConnectedActor) == 0x000000, "Member 'FFortConnectionData::ConnectedActor' has a wrong offset!");
static_assert(offsetof(FFortConnectionData, ConnectedActorGuid) == 0x000004, "Member 'FFortConnectionData::ConnectedActorGuid' has a wrong offset!");
static_assert(offsetof(FFortConnectionData, MySocketName) == 0x000014, "Member 'FFortConnectionData::MySocketName' has a wrong offset!");
static_assert(offsetof(FFortConnectionData, TheirSocketName) == 0x00001C, "Member 'FFortConnectionData::TheirSocketName' has a wrong offset!");

// ScriptStruct FortniteGame.HeroItem
// 0x0040 (0x0040 - 0x0000)
struct FHeroItem final
{
public:
	class UFortWorldItemDefinition*               Item;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortReplenishmentType                        Replenishment;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RequiredGPTags;                                    // 0x000C(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SwapTag;                                           // 0x0024(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bShowInAbilityScreen;                              // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroItem) == 0x000004, "Wrong alignment on FHeroItem");
static_assert(sizeof(FHeroItem) == 0x000040, "Wrong size on FHeroItem");
static_assert(offsetof(FHeroItem, Item) == 0x000000, "Member 'FHeroItem::Item' has a wrong offset!");
static_assert(offsetof(FHeroItem, Quantity) == 0x000004, "Member 'FHeroItem::Quantity' has a wrong offset!");
static_assert(offsetof(FHeroItem, Replenishment) == 0x000008, "Member 'FHeroItem::Replenishment' has a wrong offset!");
static_assert(offsetof(FHeroItem, RequiredGPTags) == 0x00000C, "Member 'FHeroItem::RequiredGPTags' has a wrong offset!");
static_assert(offsetof(FHeroItem, SwapTag) == 0x000024, "Member 'FHeroItem::SwapTag' has a wrong offset!");
static_assert(offsetof(FHeroItem, bShowInAbilityScreen) == 0x00003C, "Member 'FHeroItem::bShowInAbilityScreen' has a wrong offset!");

// ScriptStruct FortniteGame.MinimapGoalByTagColorsData
// 0x0028 (0x0028 - 0x0000)
struct FMinimapGoalByTagColorsData final
{
public:
	struct FGameplayTagContainer                  GoalTags;                                          // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           MinimapColor;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinimapGoalByTagColorsData) == 0x000004, "Wrong alignment on FMinimapGoalByTagColorsData");
static_assert(sizeof(FMinimapGoalByTagColorsData) == 0x000028, "Wrong size on FMinimapGoalByTagColorsData");
static_assert(offsetof(FMinimapGoalByTagColorsData, GoalTags) == 0x000000, "Member 'FMinimapGoalByTagColorsData::GoalTags' has a wrong offset!");
static_assert(offsetof(FMinimapGoalByTagColorsData, MinimapColor) == 0x000018, "Member 'FMinimapGoalByTagColorsData::MinimapColor' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownWorkerPersonalityData
// 0x0028 (0x0028 - 0x0000)
struct FMyTownWorkerPersonalityData final
{
public:
	struct FGameplayTagContainer                  PersonalityTypeTag;                                // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   PersonalityName;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SelectionWeight;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyTownWorkerPersonalityData) == 0x000004, "Wrong alignment on FMyTownWorkerPersonalityData");
static_assert(sizeof(FMyTownWorkerPersonalityData) == 0x000028, "Wrong size on FMyTownWorkerPersonalityData");
static_assert(offsetof(FMyTownWorkerPersonalityData, PersonalityTypeTag) == 0x000000, "Member 'FMyTownWorkerPersonalityData::PersonalityTypeTag' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerPersonalityData, PersonalityName) == 0x000018, "Member 'FMyTownWorkerPersonalityData::PersonalityName' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerPersonalityData, SelectionWeight) == 0x000024, "Member 'FMyTownWorkerPersonalityData::SelectionWeight' has a wrong offset!");

// ScriptStruct FortniteGame.HeroAbilityKit
// 0x0020 (0x0020 - 0x0000)
struct FHeroAbilityKit final
{
public:
	class UFortAbilityKit*                        InherentAbilityKit;                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredGPTags;                                    // 0x0004(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bShowInAbilityScreen;                              // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroAbilityKit) == 0x000004, "Wrong alignment on FHeroAbilityKit");
static_assert(sizeof(FHeroAbilityKit) == 0x000020, "Wrong size on FHeroAbilityKit");
static_assert(offsetof(FHeroAbilityKit, InherentAbilityKit) == 0x000000, "Member 'FHeroAbilityKit::InherentAbilityKit' has a wrong offset!");
static_assert(offsetof(FHeroAbilityKit, RequiredGPTags) == 0x000004, "Member 'FHeroAbilityKit::RequiredGPTags' has a wrong offset!");
static_assert(offsetof(FHeroAbilityKit, bShowInAbilityScreen) == 0x00001C, "Member 'FHeroAbilityKit::bShowInAbilityScreen' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityKitSlot
// 0x000C (0x000C - 0x0000)
struct FFortAbilityKitSlot final
{
public:
	TArray<class UFortAbilityKit*>                AbilityKits;                                       // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAbilityKitSlot) == 0x000004, "Wrong alignment on FFortAbilityKitSlot");
static_assert(sizeof(FFortAbilityKitSlot) == 0x00000C, "Wrong size on FFortAbilityKitSlot");
static_assert(offsetof(FFortAbilityKitSlot, AbilityKits) == 0x000000, "Member 'FFortAbilityKitSlot::AbilityKits' has a wrong offset!");

// ScriptStruct FortniteGame.AbilityKitItem
// 0x000C (0x000C - 0x0000)
struct FAbilityKitItem final
{
public:
	class UFortWorldItemDefinition*               Item;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortReplenishmentType                        Replenishment;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityKitItem) == 0x000004, "Wrong alignment on FAbilityKitItem");
static_assert(sizeof(FAbilityKitItem) == 0x00000C, "Wrong size on FAbilityKitItem");
static_assert(offsetof(FAbilityKitItem, Item) == 0x000000, "Member 'FAbilityKitItem::Item' has a wrong offset!");
static_assert(offsetof(FAbilityKitItem, Quantity) == 0x000004, "Member 'FAbilityKitItem::Quantity' has a wrong offset!");
static_assert(offsetof(FAbilityKitItem, Replenishment) == 0x000008, "Member 'FAbilityKitItem::Replenishment' has a wrong offset!");

// ScriptStruct FortniteGame.SelectedClassAbilityKits
// 0x0064 (0x0064 - 0x0000)
struct FSelectedClassAbilityKits final
{
public:
	class UFortAbilityKit*                        AbilityKits[0x19];                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSelectedClassAbilityKits) == 0x000004, "Wrong alignment on FSelectedClassAbilityKits");
static_assert(sizeof(FSelectedClassAbilityKits) == 0x000064, "Wrong size on FSelectedClassAbilityKits");
static_assert(offsetof(FSelectedClassAbilityKits, AbilityKits) == 0x000000, "Member 'FSelectedClassAbilityKits::AbilityKits' has a wrong offset!");

// ScriptStruct FortniteGame.MeshSet
// 0x00C4 (0x00C4 - 0x0000)
struct FMeshSet final
{
public:
	float                                         Weight;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             BaseMesh;                                          // 0x0004(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortResourceType                             ResourceType;                                      // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bDoNotBlockBuildings : 1;                          // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bDestroyOnPlayerBuildingPlacement : 1;             // 0x0020(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bNeedsDamageOverlay : 1;                           // 0x0020(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UParticleSystem>         BreakEffect;                                       // 0x0024(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         DeathParticles;                                    // 0x003C(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DeathParticleSocketName;                           // 0x0054(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundBase>              DeathSound;                                        // 0x005C(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         ConstructedEffect;                                 // 0x0074(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             SearchedMesh;                                      // 0x008C(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   SearchSpeed;                                       // 0x00A4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         LootNoiseRange;                                    // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LootNoiseLoudness;                                 // 0x00B4(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LootSpawnLocation;                                 // 0x00B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshSet) == 0x000004, "Wrong alignment on FMeshSet");
static_assert(sizeof(FMeshSet) == 0x0000C4, "Wrong size on FMeshSet");
static_assert(offsetof(FMeshSet, Weight) == 0x000000, "Member 'FMeshSet::Weight' has a wrong offset!");
static_assert(offsetof(FMeshSet, BaseMesh) == 0x000004, "Member 'FMeshSet::BaseMesh' has a wrong offset!");
static_assert(offsetof(FMeshSet, ResourceType) == 0x00001C, "Member 'FMeshSet::ResourceType' has a wrong offset!");
static_assert(offsetof(FMeshSet, BreakEffect) == 0x000024, "Member 'FMeshSet::BreakEffect' has a wrong offset!");
static_assert(offsetof(FMeshSet, DeathParticles) == 0x00003C, "Member 'FMeshSet::DeathParticles' has a wrong offset!");
static_assert(offsetof(FMeshSet, DeathParticleSocketName) == 0x000054, "Member 'FMeshSet::DeathParticleSocketName' has a wrong offset!");
static_assert(offsetof(FMeshSet, DeathSound) == 0x00005C, "Member 'FMeshSet::DeathSound' has a wrong offset!");
static_assert(offsetof(FMeshSet, ConstructedEffect) == 0x000074, "Member 'FMeshSet::ConstructedEffect' has a wrong offset!");
static_assert(offsetof(FMeshSet, SearchedMesh) == 0x00008C, "Member 'FMeshSet::SearchedMesh' has a wrong offset!");
static_assert(offsetof(FMeshSet, SearchSpeed) == 0x0000A4, "Member 'FMeshSet::SearchSpeed' has a wrong offset!");
static_assert(offsetof(FMeshSet, LootNoiseRange) == 0x0000B0, "Member 'FMeshSet::LootNoiseRange' has a wrong offset!");
static_assert(offsetof(FMeshSet, LootNoiseLoudness) == 0x0000B4, "Member 'FMeshSet::LootNoiseLoudness' has a wrong offset!");
static_assert(offsetof(FMeshSet, LootSpawnLocation) == 0x0000B8, "Member 'FMeshSet::LootSpawnLocation' has a wrong offset!");

// ScriptStruct FortniteGame.TierMeshSets
// 0x0010 (0x0010 - 0x0000)
struct FTierMeshSets final
{
public:
	int32                                         Tier;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMeshSet>                       MeshSets;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTierMeshSets) == 0x000004, "Wrong alignment on FTierMeshSets");
static_assert(sizeof(FTierMeshSets) == 0x000010, "Wrong size on FTierMeshSets");
static_assert(offsetof(FTierMeshSets, Tier) == 0x000000, "Member 'FTierMeshSets::Tier' has a wrong offset!");
static_assert(offsetof(FTierMeshSets, MeshSets) == 0x000004, "Member 'FTierMeshSets::MeshSets' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingLevelCriteria
// 0x0014 (0x0014 - 0x0000)
struct FStrategicBuildingLevelCriteria final
{
public:
	class FText                                   UnlockRequirementText;                             // 0x0000(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortStrategicBuildingLevelCriteriaDisplayRepresentation RequirementDisplayRepresentation;                  // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnlockRequirementQuantity;                         // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrategicBuildingLevelCriteria) == 0x000004, "Wrong alignment on FStrategicBuildingLevelCriteria");
static_assert(sizeof(FStrategicBuildingLevelCriteria) == 0x000014, "Wrong size on FStrategicBuildingLevelCriteria");
static_assert(offsetof(FStrategicBuildingLevelCriteria, UnlockRequirementText) == 0x000000, "Member 'FStrategicBuildingLevelCriteria::UnlockRequirementText' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelCriteria, RequirementDisplayRepresentation) == 0x00000C, "Member 'FStrategicBuildingLevelCriteria::RequirementDisplayRepresentation' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelCriteria, UnlockRequirementQuantity) == 0x000010, "Member 'FStrategicBuildingLevelCriteria::UnlockRequirementQuantity' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownSubBuildingData
// 0x0004 (0x0004 - 0x0000)
struct FMyTownSubBuildingData final
{
public:
	class UMyTownBuildingDefinitionData*          SubBuilding;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyTownSubBuildingData) == 0x000004, "Wrong alignment on FMyTownSubBuildingData");
static_assert(sizeof(FMyTownSubBuildingData) == 0x000004, "Wrong size on FMyTownSubBuildingData");
static_assert(offsetof(FMyTownSubBuildingData, SubBuilding) == 0x000000, "Member 'FMyTownSubBuildingData::SubBuilding' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownWorkerSetBonusData
// 0x0030 (0x0030 - 0x0000)
struct FMyTownWorkerSetBonusData final
{
public:
	struct FGameplayTagContainer                  SetBonusTypeTag;                                   // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         RequiredWorkersCount;                              // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            SetBonusEffect;                                    // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectionWeight;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyTownWorkerSetBonusData) == 0x000004, "Wrong alignment on FMyTownWorkerSetBonusData");
static_assert(sizeof(FMyTownWorkerSetBonusData) == 0x000030, "Wrong size on FMyTownWorkerSetBonusData");
static_assert(offsetof(FMyTownWorkerSetBonusData, SetBonusTypeTag) == 0x000000, "Member 'FMyTownWorkerSetBonusData::SetBonusTypeTag' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerSetBonusData, DisplayName) == 0x000018, "Member 'FMyTownWorkerSetBonusData::DisplayName' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerSetBonusData, RequiredWorkersCount) == 0x000024, "Member 'FMyTownWorkerSetBonusData::RequiredWorkersCount' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerSetBonusData, SetBonusEffect) == 0x000028, "Member 'FMyTownWorkerSetBonusData::SetBonusEffect' has a wrong offset!");
static_assert(offsetof(FMyTownWorkerSetBonusData, SelectionWeight) == 0x00002C, "Member 'FMyTownWorkerSetBonusData::SelectionWeight' has a wrong offset!");

// ScriptStruct FortniteGame.FortLootPackageData
// 0x0064 (0x0064 - 0x0000)
struct FFortLootPackageData final : public FTableRowBase
{
public:
	class FName                                   LootPackageID;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootPackageCategory;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RequiredTag;                                       // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LootPackageCall;                                   // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortItemDefinition>     ItemDefinition;                                    // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PersistentLevel;                                   // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinWorldLevel;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWorldLevel;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowBonusDrops;                                  // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Annotation;                                        // 0x0058(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLootPackageData) == 0x000004, "Wrong alignment on FFortLootPackageData");
static_assert(sizeof(FFortLootPackageData) == 0x000064, "Wrong size on FFortLootPackageData");
static_assert(offsetof(FFortLootPackageData, LootPackageID) == 0x000000, "Member 'FFortLootPackageData::LootPackageID' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, Weight) == 0x000008, "Member 'FFortLootPackageData::Weight' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, Count) == 0x00000C, "Member 'FFortLootPackageData::Count' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, LootPackageCategory) == 0x000010, "Member 'FFortLootPackageData::LootPackageCategory' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, RequiredTag) == 0x000014, "Member 'FFortLootPackageData::RequiredTag' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, LootPackageCall) == 0x00001C, "Member 'FFortLootPackageData::LootPackageCall' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, ItemDefinition) == 0x000028, "Member 'FFortLootPackageData::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, PersistentLevel) == 0x000040, "Member 'FFortLootPackageData::PersistentLevel' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, MinWorldLevel) == 0x00004C, "Member 'FFortLootPackageData::MinWorldLevel' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, MaxWorldLevel) == 0x000050, "Member 'FFortLootPackageData::MaxWorldLevel' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, bAllowBonusDrops) == 0x000054, "Member 'FFortLootPackageData::bAllowBonusDrops' has a wrong offset!");
static_assert(offsetof(FFortLootPackageData, Annotation) == 0x000058, "Member 'FFortLootPackageData::Annotation' has a wrong offset!");

// ScriptStruct FortniteGame.AttributeInfo
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FAttributeInfo final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttributeInfo) == 0x000004, "Wrong alignment on FAttributeInfo");
static_assert(sizeof(FAttributeInfo) == 0x000008, "Wrong size on FAttributeInfo");

// ScriptStruct FortniteGame.MyTownColorBannerData
// 0x0008 (0x0008 - 0x0000)
struct FMyTownColorBannerData final
{
public:
	float                                         Position;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyTownColorBannerData) == 0x000004, "Wrong alignment on FMyTownColorBannerData");
static_assert(sizeof(FMyTownColorBannerData) == 0x000008, "Wrong size on FMyTownColorBannerData");
static_assert(offsetof(FMyTownColorBannerData, Position) == 0x000000, "Member 'FMyTownColorBannerData::Position' has a wrong offset!");
static_assert(offsetof(FMyTownColorBannerData, Color) == 0x000004, "Member 'FMyTownColorBannerData::Color' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownRoadData
// 0x0010 (0x0010 - 0x0000)
struct FMyTownRoadData final
{
public:
	class FName                                   BuildingName1;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BuildingName2;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyTownRoadData) == 0x000004, "Wrong alignment on FMyTownRoadData");
static_assert(sizeof(FMyTownRoadData) == 0x000010, "Wrong size on FMyTownRoadData");
static_assert(offsetof(FMyTownRoadData, BuildingName1) == 0x000000, "Member 'FMyTownRoadData::BuildingName1' has a wrong offset!");
static_assert(offsetof(FMyTownRoadData, BuildingName2) == 0x000008, "Member 'FMyTownRoadData::BuildingName2' has a wrong offset!");

// ScriptStruct FortniteGame.FortAnalyticsEventAttribute
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FFortAnalyticsEventAttribute final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAnalyticsEventAttribute) == 0x000004, "Wrong alignment on FFortAnalyticsEventAttribute");
static_assert(sizeof(FFortAnalyticsEventAttribute) == 0x000018, "Wrong size on FFortAnalyticsEventAttribute");

// ScriptStruct FortniteGame.FortPawnStats
// 0x0030 (0x0030 - 0x0000)
struct FFortPawnStats : public FTableRowBase
{
public:
	float                                         MaximumHealth;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedWalk;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedRun;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedSprint;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedBackwardsMultiplier;                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            FallingDamageTable;                                // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   FallingDamageTableRow;                             // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KnockbackResistThreshold;                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KnockbackResistMagScale;                           // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StunResistThreshold;                               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StunResistMagScale;                                // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortPawnStats) == 0x000004, "Wrong alignment on FFortPawnStats");
static_assert(sizeof(FFortPawnStats) == 0x000030, "Wrong size on FFortPawnStats");
static_assert(offsetof(FFortPawnStats, MaximumHealth) == 0x000000, "Member 'FFortPawnStats::MaximumHealth' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedWalk) == 0x000004, "Member 'FFortPawnStats::SpeedWalk' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedRun) == 0x000008, "Member 'FFortPawnStats::SpeedRun' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedSprint) == 0x00000C, "Member 'FFortPawnStats::SpeedSprint' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, SpeedBackwardsMultiplier) == 0x000010, "Member 'FFortPawnStats::SpeedBackwardsMultiplier' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, FallingDamageTable) == 0x000014, "Member 'FFortPawnStats::FallingDamageTable' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, FallingDamageTableRow) == 0x000018, "Member 'FFortPawnStats::FallingDamageTableRow' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, KnockbackResistThreshold) == 0x000020, "Member 'FFortPawnStats::KnockbackResistThreshold' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, KnockbackResistMagScale) == 0x000024, "Member 'FFortPawnStats::KnockbackResistMagScale' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, StunResistThreshold) == 0x000028, "Member 'FFortPawnStats::StunResistThreshold' has a wrong offset!");
static_assert(offsetof(FFortPawnStats, StunResistMagScale) == 0x00002C, "Member 'FFortPawnStats::StunResistMagScale' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerPawnStats
// 0x003C (0x006C - 0x0030)
struct FFortPlayerPawnStats final : public FFortPawnStats
{
public:
	float                                         MaxJumpTime;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxStamina;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StaminaRegenRate;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StaminaRegenDelay;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SprintingStaminaExpenditureRate;                   // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HealthRegenRate;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HealthRegenDelay;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HealthRegenThreshold;                              // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxShield;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShieldRegenRate;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShieldRegenDelay;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShieldRegenThreshold;                              // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         JumpStaminaCost;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ControlStrength;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ControlResistance;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortPlayerPawnStats) == 0x000004, "Wrong alignment on FFortPlayerPawnStats");
static_assert(sizeof(FFortPlayerPawnStats) == 0x00006C, "Wrong size on FFortPlayerPawnStats");
static_assert(offsetof(FFortPlayerPawnStats, MaxJumpTime) == 0x000030, "Member 'FFortPlayerPawnStats::MaxJumpTime' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, MaxStamina) == 0x000034, "Member 'FFortPlayerPawnStats::MaxStamina' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, StaminaRegenRate) == 0x000038, "Member 'FFortPlayerPawnStats::StaminaRegenRate' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, StaminaRegenDelay) == 0x00003C, "Member 'FFortPlayerPawnStats::StaminaRegenDelay' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, SprintingStaminaExpenditureRate) == 0x000040, "Member 'FFortPlayerPawnStats::SprintingStaminaExpenditureRate' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, HealthRegenRate) == 0x000044, "Member 'FFortPlayerPawnStats::HealthRegenRate' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, HealthRegenDelay) == 0x000048, "Member 'FFortPlayerPawnStats::HealthRegenDelay' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, HealthRegenThreshold) == 0x00004C, "Member 'FFortPlayerPawnStats::HealthRegenThreshold' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, MaxShield) == 0x000050, "Member 'FFortPlayerPawnStats::MaxShield' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, ShieldRegenRate) == 0x000054, "Member 'FFortPlayerPawnStats::ShieldRegenRate' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, ShieldRegenDelay) == 0x000058, "Member 'FFortPlayerPawnStats::ShieldRegenDelay' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, ShieldRegenThreshold) == 0x00005C, "Member 'FFortPlayerPawnStats::ShieldRegenThreshold' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, JumpStaminaCost) == 0x000060, "Member 'FFortPlayerPawnStats::JumpStaminaCost' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, ControlStrength) == 0x000064, "Member 'FFortPlayerPawnStats::ControlStrength' has a wrong offset!");
static_assert(offsetof(FFortPlayerPawnStats, ControlResistance) == 0x000068, "Member 'FFortPlayerPawnStats::ControlResistance' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownRoadData3D
// 0x000C (0x000C - 0x0000)
struct FMyTownRoadData3D final
{
public:
	int32                                         MapSlotId1;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapSlotId2;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMyTown3DRoadType                             RoadType;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMyTownRoadData3D) == 0x000004, "Wrong alignment on FMyTownRoadData3D");
static_assert(sizeof(FMyTownRoadData3D) == 0x00000C, "Wrong size on FMyTownRoadData3D");
static_assert(offsetof(FMyTownRoadData3D, MapSlotId1) == 0x000000, "Member 'FMyTownRoadData3D::MapSlotId1' has a wrong offset!");
static_assert(offsetof(FMyTownRoadData3D, MapSlotId2) == 0x000004, "Member 'FMyTownRoadData3D::MapSlotId2' has a wrong offset!");
static_assert(offsetof(FMyTownRoadData3D, RoadType) == 0x000008, "Member 'FMyTownRoadData3D::RoadType' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownBuildingData
// 0x0008 (0x0008 - 0x0000)
struct FMyTownBuildingData final
{
public:
	class UMyTownBuildingDefinitionData*          Building;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapSlotId;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyTownBuildingData) == 0x000004, "Wrong alignment on FMyTownBuildingData");
static_assert(sizeof(FMyTownBuildingData) == 0x000008, "Wrong size on FMyTownBuildingData");
static_assert(offsetof(FMyTownBuildingData, Building) == 0x000000, "Member 'FMyTownBuildingData::Building' has a wrong offset!");
static_assert(offsetof(FMyTownBuildingData, MapSlotId) == 0x000004, "Member 'FMyTownBuildingData::MapSlotId' has a wrong offset!");

// ScriptStruct FortniteGame.FortPartyRepState
// 0x0034 (0x003C - 0x0008)
struct FFortPartyRepState final : public FPartyState
{
public:
	EFortPartyState                               PartyProgression;                                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLobbyConnectionStarted;                           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EMatchmakingCompleteResult                    MatchmakingResult;                                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionId;                                         // 0x000C(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSessionIsCriticalMission;                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZoneTileIndex;                                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZoneInstanceId;                                    // 0x0020(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TheaterId;                                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  TileStates;                                        // 0x0030(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPartyRepState) == 0x000004, "Wrong alignment on FFortPartyRepState");
static_assert(sizeof(FFortPartyRepState) == 0x00003C, "Wrong size on FFortPartyRepState");
static_assert(offsetof(FFortPartyRepState, PartyProgression) == 0x000008, "Member 'FFortPartyRepState::PartyProgression' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, bLobbyConnectionStarted) == 0x000009, "Member 'FFortPartyRepState::bLobbyConnectionStarted' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, MatchmakingResult) == 0x00000A, "Member 'FFortPartyRepState::MatchmakingResult' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, SessionId) == 0x00000C, "Member 'FFortPartyRepState::SessionId' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, bSessionIsCriticalMission) == 0x000018, "Member 'FFortPartyRepState::bSessionIsCriticalMission' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, ZoneTileIndex) == 0x00001C, "Member 'FFortPartyRepState::ZoneTileIndex' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, ZoneInstanceId) == 0x000020, "Member 'FFortPartyRepState::ZoneInstanceId' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, TheaterId) == 0x00002C, "Member 'FFortPartyRepState::TheaterId' has a wrong offset!");
static_assert(offsetof(FFortPartyRepState, TileStates) == 0x000030, "Member 'FFortPartyRepState::TileStates' has a wrong offset!");

// ScriptStruct FortniteGame.FortQuestManagerAttributes
// 0x000C (0x000C - 0x0000)
struct FFortQuestManagerAttributes final
{
public:
	struct FDateTime                              DailyLoginInterval;                                // 0x0000(0x0008)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DailyQuestRerolls;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortQuestManagerAttributes) == 0x000004, "Wrong alignment on FFortQuestManagerAttributes");
static_assert(sizeof(FFortQuestManagerAttributes) == 0x00000C, "Wrong size on FFortQuestManagerAttributes");
static_assert(offsetof(FFortQuestManagerAttributes, DailyLoginInterval) == 0x000000, "Member 'FFortQuestManagerAttributes::DailyLoginInterval' has a wrong offset!");
static_assert(offsetof(FFortQuestManagerAttributes, DailyQuestRerolls) == 0x000008, "Member 'FFortQuestManagerAttributes::DailyQuestRerolls' has a wrong offset!");

// ScriptStruct FortniteGame.FortDailyQuestRerollNotification
// 0x000C (0x000C - 0x0000)
struct FFortDailyQuestRerollNotification final
{
public:
	class FString                                 NewQuestId;                                        // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDailyQuestRerollNotification) == 0x000004, "Wrong alignment on FFortDailyQuestRerollNotification");
static_assert(sizeof(FFortDailyQuestRerollNotification) == 0x00000C, "Wrong size on FFortDailyQuestRerollNotification");
static_assert(offsetof(FFortDailyQuestRerollNotification, NewQuestId) == 0x000000, "Member 'FFortDailyQuestRerollNotification::NewQuestId' has a wrong offset!");

// ScriptStruct FortniteGame.CardPackResultNotification
// 0x0028 (0x0028 - 0x0000)
struct FCardPackResultNotification final
{
public:
	struct FMcpLootResult                         LootGranted;                                       // 0x0000(0x0024)(NativeAccessSpecifierPublic)
	int32                                         DisplayLevel;                                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCardPackResultNotification) == 0x000004, "Wrong alignment on FCardPackResultNotification");
static_assert(sizeof(FCardPackResultNotification) == 0x000028, "Wrong size on FCardPackResultNotification");
static_assert(offsetof(FCardPackResultNotification, LootGranted) == 0x000000, "Member 'FCardPackResultNotification::LootGranted' has a wrong offset!");
static_assert(offsetof(FCardPackResultNotification, DisplayLevel) == 0x000024, "Member 'FCardPackResultNotification::DisplayLevel' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostPOSTPerTheaterData
// 0x0010 (0x0010 - 0x0000)
struct FOutpostPOSTPerTheaterData final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOutpostPOSTBoost                      POSTData;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostPOSTPerTheaterData) == 0x000004, "Wrong alignment on FOutpostPOSTPerTheaterData");
static_assert(sizeof(FOutpostPOSTPerTheaterData) == 0x000010, "Wrong size on FOutpostPOSTPerTheaterData");
static_assert(offsetof(FOutpostPOSTPerTheaterData, TheaterSlot) == 0x000000, "Member 'FOutpostPOSTPerTheaterData::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FOutpostPOSTPerTheaterData, POSTData) == 0x000004, "Member 'FOutpostPOSTPerTheaterData::POSTData' has a wrong offset!");

// ScriptStruct FortniteGame.PowerPointCalculationData
// 0x0024 (0x0024 - 0x0000)
struct FPowerPointCalculationData final : public FTableRowBase
{
public:
	float                                         HeroBasePowerPoints;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerPointsPerDifficultyPoint;                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealthPerPowerPoint;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStaminaPerPowerPoint;                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunSpeedPerPowerPoint;                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintSpeedPerPowerPoint;                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamagePerPowerPoint;                               // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FakeHeroDamagePowerPointValue;                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponPPPerOtherPP;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowerPointCalculationData) == 0x000004, "Wrong alignment on FPowerPointCalculationData");
static_assert(sizeof(FPowerPointCalculationData) == 0x000024, "Wrong size on FPowerPointCalculationData");
static_assert(offsetof(FPowerPointCalculationData, HeroBasePowerPoints) == 0x000000, "Member 'FPowerPointCalculationData::HeroBasePowerPoints' has a wrong offset!");
static_assert(offsetof(FPowerPointCalculationData, PowerPointsPerDifficultyPoint) == 0x000004, "Member 'FPowerPointCalculationData::PowerPointsPerDifficultyPoint' has a wrong offset!");
static_assert(offsetof(FPowerPointCalculationData, MaxHealthPerPowerPoint) == 0x000008, "Member 'FPowerPointCalculationData::MaxHealthPerPowerPoint' has a wrong offset!");
static_assert(offsetof(FPowerPointCalculationData, MaxStaminaPerPowerPoint) == 0x00000C, "Member 'FPowerPointCalculationData::MaxStaminaPerPowerPoint' has a wrong offset!");
static_assert(offsetof(FPowerPointCalculationData, RunSpeedPerPowerPoint) == 0x000010, "Member 'FPowerPointCalculationData::RunSpeedPerPowerPoint' has a wrong offset!");
static_assert(offsetof(FPowerPointCalculationData, SprintSpeedPerPowerPoint) == 0x000014, "Member 'FPowerPointCalculationData::SprintSpeedPerPowerPoint' has a wrong offset!");
static_assert(offsetof(FPowerPointCalculationData, DamagePerPowerPoint) == 0x000018, "Member 'FPowerPointCalculationData::DamagePerPowerPoint' has a wrong offset!");
static_assert(offsetof(FPowerPointCalculationData, FakeHeroDamagePowerPointValue) == 0x00001C, "Member 'FPowerPointCalculationData::FakeHeroDamagePowerPointValue' has a wrong offset!");
static_assert(offsetof(FPowerPointCalculationData, WeaponPPPerOtherPP) == 0x000020, "Member 'FPowerPointCalculationData::WeaponPPPerOtherPP' has a wrong offset!");

// ScriptStruct FortniteGame.FortLootNotification
// 0x003C (0x003C - 0x0000)
struct FFortLootNotification final
{
public:
	class FString                                 LootSource;                                        // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LootSourceInstance;                                // 0x000C(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         LootGranted;                                       // 0x0018(0x0024)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLootNotification) == 0x000004, "Wrong alignment on FFortLootNotification");
static_assert(sizeof(FFortLootNotification) == 0x00003C, "Wrong size on FFortLootNotification");
static_assert(offsetof(FFortLootNotification, LootSource) == 0x000000, "Member 'FFortLootNotification::LootSource' has a wrong offset!");
static_assert(offsetof(FFortLootNotification, LootSourceInstance) == 0x00000C, "Member 'FFortLootNotification::LootSourceInstance' has a wrong offset!");
static_assert(offsetof(FFortLootNotification, LootGranted) == 0x000018, "Member 'FFortLootNotification::LootGranted' has a wrong offset!");

// ScriptStruct FortniteGame.FortNotificationLevelUp
// 0x004C (0x004C - 0x0000)
struct FFortNotificationLevelUp final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeroId;                                            // 0x0004(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortLootNotification                  Loot;                                              // 0x0010(0x003C)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortNotificationLevelUp) == 0x000004, "Wrong alignment on FFortNotificationLevelUp");
static_assert(sizeof(FFortNotificationLevelUp) == 0x00004C, "Wrong size on FFortNotificationLevelUp");
static_assert(offsetof(FFortNotificationLevelUp, Level) == 0x000000, "Member 'FFortNotificationLevelUp::Level' has a wrong offset!");
static_assert(offsetof(FFortNotificationLevelUp, HeroId) == 0x000004, "Member 'FFortNotificationLevelUp::HeroId' has a wrong offset!");
static_assert(offsetof(FFortNotificationLevelUp, Loot) == 0x000010, "Member 'FFortNotificationLevelUp::Loot' has a wrong offset!");

// ScriptStruct FortniteGame.UtilityTypeFloatPair
// 0x0008 (0x0008 - 0x0000)
struct FUtilityTypeFloatPair final
{
public:
	EFortAIUtility                                Utility;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUtilityTypeFloatPair) == 0x000004, "Wrong alignment on FUtilityTypeFloatPair");
static_assert(sizeof(FUtilityTypeFloatPair) == 0x000008, "Wrong size on FUtilityTypeFloatPair");
static_assert(offsetof(FUtilityTypeFloatPair, Utility) == 0x000000, "Member 'FUtilityTypeFloatPair::Utility' has a wrong offset!");
static_assert(offsetof(FUtilityTypeFloatPair, Value) == 0x000004, "Member 'FUtilityTypeFloatPair::Value' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionCompletionNotification
// 0x0034 (0x0034 - 0x0000)
struct FFortMissionCompletionNotification final
{
public:
	bool                                          bWasCritical;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MissionName;                                       // 0x0004(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         LootGranted;                                       // 0x0010(0x0024)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionCompletionNotification) == 0x000004, "Wrong alignment on FFortMissionCompletionNotification");
static_assert(sizeof(FFortMissionCompletionNotification) == 0x000034, "Wrong size on FFortMissionCompletionNotification");
static_assert(offsetof(FFortMissionCompletionNotification, bWasCritical) == 0x000000, "Member 'FFortMissionCompletionNotification::bWasCritical' has a wrong offset!");
static_assert(offsetof(FFortMissionCompletionNotification, MissionName) == 0x000004, "Member 'FFortMissionCompletionNotification::MissionName' has a wrong offset!");
static_assert(offsetof(FFortMissionCompletionNotification, LootGranted) == 0x000010, "Member 'FFortMissionCompletionNotification::LootGranted' has a wrong offset!");

// ScriptStruct FortniteGame.FortHexMapCoord
// 0x000C (0x000C - 0x0000)
struct FFortHexMapCoord final
{
public:
	int32                                         Horizontal;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vertical;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Depth;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHexMapCoord) == 0x000004, "Wrong alignment on FFortHexMapCoord");
static_assert(sizeof(FFortHexMapCoord) == 0x00000C, "Wrong size on FFortHexMapCoord");
static_assert(offsetof(FFortHexMapCoord, Horizontal) == 0x000000, "Member 'FFortHexMapCoord::Horizontal' has a wrong offset!");
static_assert(offsetof(FFortHexMapCoord, Vertical) == 0x000004, "Member 'FFortHexMapCoord::Vertical' has a wrong offset!");
static_assert(offsetof(FFortHexMapCoord, Depth) == 0x000008, "Member 'FFortHexMapCoord::Depth' has a wrong offset!");

// ScriptStruct FortniteGame.FortHighlightColorsContainer
// 0x0060 (0x0060 - 0x0000)
struct FFortHighlightColorsContainer final
{
public:
	struct FFortHighlightColors                   ValidHighlight;                                    // 0x0000(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortHighlightColors                   InvalidHighlight;                                  // 0x0030(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHighlightColorsContainer) == 0x000004, "Wrong alignment on FFortHighlightColorsContainer");
static_assert(sizeof(FFortHighlightColorsContainer) == 0x000060, "Wrong size on FFortHighlightColorsContainer");
static_assert(offsetof(FFortHighlightColorsContainer, ValidHighlight) == 0x000000, "Member 'FFortHighlightColorsContainer::ValidHighlight' has a wrong offset!");
static_assert(offsetof(FFortHighlightColorsContainer, InvalidHighlight) == 0x000030, "Member 'FFortHighlightColorsContainer::InvalidHighlight' has a wrong offset!");

// ScriptStruct FortniteGame.TileCompInterpData
// 0x0018 (0x0018 - 0x0000)
struct FTileCompInterpData final
{
public:
	struct FVector                                InitialTranslation;                                // 0x0000(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                DesiredTranslation;                                // 0x000C(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTileCompInterpData) == 0x000004, "Wrong alignment on FTileCompInterpData");
static_assert(sizeof(FTileCompInterpData) == 0x000018, "Wrong size on FTileCompInterpData");
static_assert(offsetof(FTileCompInterpData, InitialTranslation) == 0x000000, "Member 'FTileCompInterpData::InitialTranslation' has a wrong offset!");
static_assert(offsetof(FTileCompInterpData, DesiredTranslation) == 0x00000C, "Member 'FTileCompInterpData::DesiredTranslation' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBarSlot
// 0x000C (0x000C - 0x0000)
struct FQuickBarSlot final
{
public:
	TArray<struct FGuid>                          Items;                                             // 0x0000(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FQuickBarSlot) == 0x000004, "Wrong alignment on FQuickBarSlot");
static_assert(sizeof(FQuickBarSlot) == 0x00000C, "Wrong size on FQuickBarSlot");
static_assert(offsetof(FQuickBarSlot, Items) == 0x000000, "Member 'FQuickBarSlot::Items' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBarSlotData
// 0x0028 (0x0028 - 0x0000)
struct FQuickBarSlotData final
{
public:
	TArray<EFortItemType>                         AcceptedItemTypes;                                 // 0x0000(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bStaticSlot;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortWorldItemDefinition> DefaultItem;                                       // 0x0010(0x0018)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuickBarSlotData) == 0x000004, "Wrong alignment on FQuickBarSlotData");
static_assert(sizeof(FQuickBarSlotData) == 0x000028, "Wrong size on FQuickBarSlotData");
static_assert(offsetof(FQuickBarSlotData, AcceptedItemTypes) == 0x000000, "Member 'FQuickBarSlotData::AcceptedItemTypes' has a wrong offset!");
static_assert(offsetof(FQuickBarSlotData, bStaticSlot) == 0x00000C, "Member 'FQuickBarSlotData::bStaticSlot' has a wrong offset!");
static_assert(offsetof(FQuickBarSlotData, DefaultItem) == 0x000010, "Member 'FQuickBarSlotData::DefaultItem' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBarData
// 0x000C (0x000C - 0x0000)
struct FQuickBarData final
{
public:
	TArray<struct FQuickBarSlotData>              QuickbarSlots;                                     // 0x0000(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuickBarData) == 0x000004, "Wrong alignment on FQuickBarData");
static_assert(sizeof(FQuickBarData) == 0x00000C, "Wrong size on FQuickBarData");
static_assert(offsetof(FQuickBarData, QuickbarSlots) == 0x000000, "Member 'FQuickBarData::QuickbarSlots' has a wrong offset!");

// ScriptStruct FortniteGame.QuickBar
// 0x0020 (0x0020 - 0x0000)
struct FQuickBar final
{
public:
	int32                                         CurrentFocusedSlot;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousFocusedSlot;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQuickBarSlot>                  Slots;                                             // 0x0008(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FQuickBarData                          DataDefinition;                                    // 0x0014(0x000C)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FQuickBar) == 0x000004, "Wrong alignment on FQuickBar");
static_assert(sizeof(FQuickBar) == 0x000020, "Wrong size on FQuickBar");
static_assert(offsetof(FQuickBar, CurrentFocusedSlot) == 0x000000, "Member 'FQuickBar::CurrentFocusedSlot' has a wrong offset!");
static_assert(offsetof(FQuickBar, PreviousFocusedSlot) == 0x000004, "Member 'FQuickBar::PreviousFocusedSlot' has a wrong offset!");
static_assert(offsetof(FQuickBar, Slots) == 0x000008, "Member 'FQuickBar::Slots' has a wrong offset!");
static_assert(offsetof(FQuickBar, DataDefinition) == 0x000014, "Member 'FQuickBar::DataDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackLine
// 0x005C (0x005C - 0x0000)
struct FFortFeedbackLine final
{
public:
	TSoftObjectPtr<class USoundBase>              Audio;                                             // 0x0000(0x0018)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           AnimSequence;                                      // 0x0018(0x0018)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            AnimMontage;                                       // 0x0030(0x0018)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackAddressee                        Addressee;                                         // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackContext                          Context;                                           // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortFeedbackResponse>          ResponseEvents;                                    // 0x004C(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bInterruptCurrentLine;                             // 0x0058(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCanBeInterrupted;                                 // 0x0059(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCanQue;                                           // 0x005A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortFeedbackLine) == 0x000004, "Wrong alignment on FFortFeedbackLine");
static_assert(sizeof(FFortFeedbackLine) == 0x00005C, "Wrong size on FFortFeedbackLine");
static_assert(offsetof(FFortFeedbackLine, Audio) == 0x000000, "Member 'FFortFeedbackLine::Audio' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, AnimSequence) == 0x000018, "Member 'FFortFeedbackLine::AnimSequence' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, AnimMontage) == 0x000030, "Member 'FFortFeedbackLine::AnimMontage' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, Addressee) == 0x000048, "Member 'FFortFeedbackLine::Addressee' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, Context) == 0x000049, "Member 'FFortFeedbackLine::Context' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, ResponseEvents) == 0x00004C, "Member 'FFortFeedbackLine::ResponseEvents' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, bInterruptCurrentLine) == 0x000058, "Member 'FFortFeedbackLine::bInterruptCurrentLine' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, bCanBeInterrupted) == 0x000059, "Member 'FFortFeedbackLine::bCanBeInterrupted' has a wrong offset!");
static_assert(offsetof(FFortFeedbackLine, bCanQue) == 0x00005A, "Member 'FFortFeedbackLine::bCanQue' has a wrong offset!");

// ScriptStruct FortniteGame.ActiveFortCamera
// 0x0014 (0x0014 - 0x0000)
struct FActiveFortCamera final
{
public:
	class UFortCameraMode*                        Camera;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ViewTarget;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionAlpha;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionUpdateRate;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActiveFortCamera) == 0x000004, "Wrong alignment on FActiveFortCamera");
static_assert(sizeof(FActiveFortCamera) == 0x000014, "Wrong size on FActiveFortCamera");
static_assert(offsetof(FActiveFortCamera, Camera) == 0x000000, "Member 'FActiveFortCamera::Camera' has a wrong offset!");
static_assert(offsetof(FActiveFortCamera, ViewTarget) == 0x000004, "Member 'FActiveFortCamera::ViewTarget' has a wrong offset!");
static_assert(offsetof(FActiveFortCamera, TransitionAlpha) == 0x000008, "Member 'FActiveFortCamera::TransitionAlpha' has a wrong offset!");
static_assert(offsetof(FActiveFortCamera, TransitionUpdateRate) == 0x00000C, "Member 'FActiveFortCamera::TransitionUpdateRate' has a wrong offset!");
static_assert(offsetof(FActiveFortCamera, BlendWeight) == 0x000010, "Member 'FActiveFortCamera::BlendWeight' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionConfigDataBucket
// 0x0020 (0x0020 - 0x0000)
struct FFortMissionConfigDataBucket final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ConfigDataClass;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionConfigDataBucket) == 0x000004, "Wrong alignment on FFortMissionConfigDataBucket");
static_assert(sizeof(FFortMissionConfigDataBucket) == 0x000020, "Wrong size on FFortMissionConfigDataBucket");
static_assert(offsetof(FFortMissionConfigDataBucket, Tag) == 0x000000, "Member 'FFortMissionConfigDataBucket::Tag' has a wrong offset!");
static_assert(offsetof(FFortMissionConfigDataBucket, ConfigDataClass) == 0x000008, "Member 'FFortMissionConfigDataBucket::ConfigDataClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionConfigDataParams
// 0x000C (0x000C - 0x0000)
struct FFortMissionConfigDataParams final
{
public:
	TArray<struct FFortMissionConfigDataBucket>   ConfigParams;                                      // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortMissionConfigDataParams) == 0x000004, "Wrong alignment on FFortMissionConfigDataParams");
static_assert(sizeof(FFortMissionConfigDataParams) == 0x00000C, "Wrong size on FFortMissionConfigDataParams");
static_assert(offsetof(FFortMissionConfigDataParams, ConfigParams) == 0x000000, "Member 'FFortMissionConfigDataParams::ConfigParams' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostItemUpgradeData
// 0x0034 (0x0034 - 0x0000)
struct FOutpostItemUpgradeData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortOutpostItemDefinition> ItemDefinition;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemLevel;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredItems;                                     // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredAccountItems;                              // 0x0028(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostItemUpgradeData) == 0x000004, "Wrong alignment on FOutpostItemUpgradeData");
static_assert(sizeof(FOutpostItemUpgradeData) == 0x000034, "Wrong size on FOutpostItemUpgradeData");
static_assert(offsetof(FOutpostItemUpgradeData, ItemDefinition) == 0x000000, "Member 'FOutpostItemUpgradeData::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FOutpostItemUpgradeData, ItemLevel) == 0x000018, "Member 'FOutpostItemUpgradeData::ItemLevel' has a wrong offset!");
static_assert(offsetof(FOutpostItemUpgradeData, RequiredItems) == 0x00001C, "Member 'FOutpostItemUpgradeData::RequiredItems' has a wrong offset!");
static_assert(offsetof(FOutpostItemUpgradeData, RequiredAccountItems) == 0x000028, "Member 'FOutpostItemUpgradeData::RequiredAccountItems' has a wrong offset!");

// ScriptStruct FortniteGame.FortHostSessionParams
// 0x000C (0x000C - 0x0000)
struct FFortHostSessionParams final
{
public:
	class FName                                   SessionName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControllerId;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHostSessionParams) == 0x000004, "Wrong alignment on FFortHostSessionParams");
static_assert(sizeof(FFortHostSessionParams) == 0x00000C, "Wrong size on FFortHostSessionParams");
static_assert(offsetof(FFortHostSessionParams, SessionName) == 0x000000, "Member 'FFortHostSessionParams::SessionName' has a wrong offset!");
static_assert(offsetof(FFortHostSessionParams, ControllerId) == 0x000008, "Member 'FFortHostSessionParams::ControllerId' has a wrong offset!");

// ScriptStruct FortniteGame.BASEGameplayEffect
// 0x0008 (0x0008 - 0x0000)
struct FBASEGameplayEffect final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelOverride;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBASEGameplayEffect) == 0x000004, "Wrong alignment on FBASEGameplayEffect");
static_assert(sizeof(FBASEGameplayEffect) == 0x000008, "Wrong size on FBASEGameplayEffect");
static_assert(offsetof(FBASEGameplayEffect, Effect) == 0x000000, "Member 'FBASEGameplayEffect::Effect' has a wrong offset!");
static_assert(offsetof(FBASEGameplayEffect, LevelOverride) == 0x000004, "Member 'FBASEGameplayEffect::LevelOverride' has a wrong offset!");

// ScriptStruct FortniteGame.FortConnectivityComponentData
// 0x0010 (0x0010 - 0x0000)
struct FFortConnectivityComponentData final
{
public:
	TArray<struct FFortConnectionData>            Connections;                                       // 0x0000(0x000C)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	bool                                          bIsPowered;                                        // 0x000C(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsProvidingPower;                                 // 0x000D(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowConnections;                                 // 0x000E(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowsPowerToPassThrough;                         // 0x000F(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortConnectivityComponentData) == 0x000004, "Wrong alignment on FFortConnectivityComponentData");
static_assert(sizeof(FFortConnectivityComponentData) == 0x000010, "Wrong size on FFortConnectivityComponentData");
static_assert(offsetof(FFortConnectivityComponentData, Connections) == 0x000000, "Member 'FFortConnectivityComponentData::Connections' has a wrong offset!");
static_assert(offsetof(FFortConnectivityComponentData, bIsPowered) == 0x00000C, "Member 'FFortConnectivityComponentData::bIsPowered' has a wrong offset!");
static_assert(offsetof(FFortConnectivityComponentData, bIsProvidingPower) == 0x00000D, "Member 'FFortConnectivityComponentData::bIsProvidingPower' has a wrong offset!");
static_assert(offsetof(FFortConnectivityComponentData, bAllowConnections) == 0x00000E, "Member 'FFortConnectivityComponentData::bAllowConnections' has a wrong offset!");
static_assert(offsetof(FFortConnectivityComponentData, bAllowsPowerToPassThrough) == 0x00000F, "Member 'FFortConnectivityComponentData::bAllowsPowerToPassThrough' has a wrong offset!");

// ScriptStruct FortniteGame.DirectionalLightValues
// 0x0008 (0x0008 - 0x0000)
struct FDirectionalLightValues final
{
public:
	struct FColor                                 LightColor;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectionalLightValues) == 0x000004, "Wrong alignment on FDirectionalLightValues");
static_assert(sizeof(FDirectionalLightValues) == 0x000008, "Wrong size on FDirectionalLightValues");
static_assert(offsetof(FDirectionalLightValues, LightColor) == 0x000000, "Member 'FDirectionalLightValues::LightColor' has a wrong offset!");
static_assert(offsetof(FDirectionalLightValues, Brightness) == 0x000004, "Member 'FDirectionalLightValues::Brightness' has a wrong offset!");

// ScriptStruct FortniteGame.FortLevelStreamingInfo
// 0x000C (0x000C - 0x0000)
struct FFortLevelStreamingInfo final
{
public:
	class FName                                   PackageName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortLevelStreamingState                      LevelState;                                        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLevelStreamingInfo) == 0x000004, "Wrong alignment on FFortLevelStreamingInfo");
static_assert(sizeof(FFortLevelStreamingInfo) == 0x00000C, "Wrong size on FFortLevelStreamingInfo");
static_assert(offsetof(FFortLevelStreamingInfo, PackageName) == 0x000000, "Member 'FFortLevelStreamingInfo::PackageName' has a wrong offset!");
static_assert(offsetof(FFortLevelStreamingInfo, LevelState) == 0x000008, "Member 'FFortLevelStreamingInfo::LevelState' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMapMissionData
// 0x0024 (0x0024 - 0x0000)
struct FFortTheaterMapMissionData final
{
public:
	TArray<struct FFortTheaterMissionWeight>      MissionWeights;                                    // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterDifficultyWeight>   DifficultyWeights;                                 // 0x000C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         NumMissionsAvailable;                              // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMissionsToChange;                               // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MissionChangeFrequency;                            // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterMapMissionData) == 0x000004, "Wrong alignment on FFortTheaterMapMissionData");
static_assert(sizeof(FFortTheaterMapMissionData) == 0x000024, "Wrong size on FFortTheaterMapMissionData");
static_assert(offsetof(FFortTheaterMapMissionData, MissionWeights) == 0x000000, "Member 'FFortTheaterMapMissionData::MissionWeights' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapMissionData, DifficultyWeights) == 0x00000C, "Member 'FFortTheaterMapMissionData::DifficultyWeights' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapMissionData, NumMissionsAvailable) == 0x000018, "Member 'FFortTheaterMapMissionData::NumMissionsAvailable' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapMissionData, NumMissionsToChange) == 0x00001C, "Member 'FFortTheaterMapMissionData::NumMissionsToChange' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapMissionData, MissionChangeFrequency) == 0x000020, "Member 'FFortTheaterMapMissionData::MissionChangeFrequency' has a wrong offset!");

// ScriptStruct FortniteGame.FortEventConditional
// 0x0024 (0x0024 - 0x0000)
struct FFortEventConditional final
{
public:
	EFortEventConditionType                       ConditionalType;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StatToCompare;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatRecordingPeriod                          RelevantPeriod;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCompare                                  ComparisonType;                                    // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortSchematicItemDefinition*           CraftingItem;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanCraft;                                         // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStat*                                  Stat;                                              // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  FPC;                                               // 0x0020(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEventConditional) == 0x000004, "Wrong alignment on FFortEventConditional");
static_assert(sizeof(FFortEventConditional) == 0x000024, "Wrong size on FFortEventConditional");
static_assert(offsetof(FFortEventConditional, ConditionalType) == 0x000000, "Member 'FFortEventConditional::ConditionalType' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, StatToCompare) == 0x000004, "Member 'FFortEventConditional::StatToCompare' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, RelevantPeriod) == 0x00000C, "Member 'FFortEventConditional::RelevantPeriod' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, ComparisonType) == 0x00000D, "Member 'FFortEventConditional::ComparisonType' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, Value) == 0x000010, "Member 'FFortEventConditional::Value' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, CraftingItem) == 0x000014, "Member 'FFortEventConditional::CraftingItem' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, bCanCraft) == 0x000018, "Member 'FFortEventConditional::bCanCraft' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, Stat) == 0x00001C, "Member 'FFortEventConditional::Stat' has a wrong offset!");
static_assert(offsetof(FFortEventConditional, FPC) == 0x000020, "Member 'FFortEventConditional::FPC' has a wrong offset!");

// ScriptStruct FortniteGame.FortStatEvent
// 0x0040 (0x0040 - 0x0000)
struct FFortStatEvent final
{
public:
	class FName                                   StatEventName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEventRepeat                              RepeatType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           StatsToMonitor;                                    // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortEventConditional>          Conditions;                                        // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   NotificationToDisplay;                             // 0x0024(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotificationToRemove;                              // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                NotificationParameter;                             // 0x0034(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStat*                                  AssociatedStat;                                    // 0x0038(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  FPC;                                               // 0x003C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortStatEvent) == 0x000004, "Wrong alignment on FFortStatEvent");
static_assert(sizeof(FFortStatEvent) == 0x000040, "Wrong size on FFortStatEvent");
static_assert(offsetof(FFortStatEvent, StatEventName) == 0x000000, "Member 'FFortStatEvent::StatEventName' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, RepeatType) == 0x000008, "Member 'FFortStatEvent::RepeatType' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, StatsToMonitor) == 0x00000C, "Member 'FFortStatEvent::StatsToMonitor' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, Conditions) == 0x000018, "Member 'FFortStatEvent::Conditions' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, NotificationToDisplay) == 0x000024, "Member 'FFortStatEvent::NotificationToDisplay' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, NotificationToRemove) == 0x00002C, "Member 'FFortStatEvent::NotificationToRemove' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, NotificationParameter) == 0x000034, "Member 'FFortStatEvent::NotificationParameter' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, AssociatedStat) == 0x000038, "Member 'FFortStatEvent::AssociatedStat' has a wrong offset!");
static_assert(offsetof(FFortStatEvent, FPC) == 0x00003C, "Member 'FFortStatEvent::FPC' has a wrong offset!");

// ScriptStruct FortniteGame.FortStatEventSequence
// 0x0038 (0x0038 - 0x0000)
struct FFortStatEventSequence final
{
public:
	class FName                                   StatEventName;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEventRepeat                              RepeatType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortStatEvent>                 EventSequence;                                     // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UStat*                                  AssociatedStat;                                    // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerController*                  FPC;                                               // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           StatsToMonitor;                                    // 0x0020(0x000C)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortEventConditional>          Conditions;                                        // 0x002C(0x000C)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortStatEventSequence) == 0x000004, "Wrong alignment on FFortStatEventSequence");
static_assert(sizeof(FFortStatEventSequence) == 0x000038, "Wrong size on FFortStatEventSequence");
static_assert(offsetof(FFortStatEventSequence, StatEventName) == 0x000000, "Member 'FFortStatEventSequence::StatEventName' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, RepeatType) == 0x000008, "Member 'FFortStatEventSequence::RepeatType' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, EventSequence) == 0x00000C, "Member 'FFortStatEventSequence::EventSequence' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, AssociatedStat) == 0x000018, "Member 'FFortStatEventSequence::AssociatedStat' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, FPC) == 0x00001C, "Member 'FFortStatEventSequence::FPC' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, StatsToMonitor) == 0x000020, "Member 'FFortStatEventSequence::StatsToMonitor' has a wrong offset!");
static_assert(offsetof(FFortStatEventSequence, Conditions) == 0x00002C, "Member 'FFortStatEventSequence::Conditions' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseBuildingStaticEffectData
// 0x0010 (0x0010 - 0x0000)
struct FHomebaseBuildingStaticEffectData final
{
public:
	class FName                                   BuildingName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingLevel;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            GameplayEffectClass;                               // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseBuildingStaticEffectData) == 0x000004, "Wrong alignment on FHomebaseBuildingStaticEffectData");
static_assert(sizeof(FHomebaseBuildingStaticEffectData) == 0x000010, "Wrong size on FHomebaseBuildingStaticEffectData");
static_assert(offsetof(FHomebaseBuildingStaticEffectData, BuildingName) == 0x000000, "Member 'FHomebaseBuildingStaticEffectData::BuildingName' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticEffectData, BuildingLevel) == 0x000008, "Member 'FHomebaseBuildingStaticEffectData::BuildingLevel' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticEffectData, GameplayEffectClass) == 0x00000C, "Member 'FHomebaseBuildingStaticEffectData::GameplayEffectClass' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterTileEditorData
// 0x004C (0x004C - 0x0000)
struct FFortTheaterTileEditorData final
{
public:
	int32                                         XCoordinate;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         YCoordinate;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortZoneTheme>             ZoneTheme;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortRegionInfo*                        Region;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  Requirements;                                      // 0x0010(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFortTheaterMapTileType                       TileType;                                          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortTheaterMissionWeight>      MissionWeightOverrides;                            // 0x0034(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterDifficultyWeight>   DifficultyWeightOverrides;                         // 0x0040(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterTileEditorData) == 0x000004, "Wrong alignment on FFortTheaterTileEditorData");
static_assert(sizeof(FFortTheaterTileEditorData) == 0x00004C, "Wrong size on FFortTheaterTileEditorData");
static_assert(offsetof(FFortTheaterTileEditorData, XCoordinate) == 0x000000, "Member 'FFortTheaterTileEditorData::XCoordinate' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, YCoordinate) == 0x000004, "Member 'FFortTheaterTileEditorData::YCoordinate' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, ZoneTheme) == 0x000008, "Member 'FFortTheaterTileEditorData::ZoneTheme' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, Region) == 0x00000C, "Member 'FFortTheaterTileEditorData::Region' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, Requirements) == 0x000010, "Member 'FFortTheaterTileEditorData::Requirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, TileType) == 0x000030, "Member 'FFortTheaterTileEditorData::TileType' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, MissionWeightOverrides) == 0x000034, "Member 'FFortTheaterTileEditorData::MissionWeightOverrides' has a wrong offset!");
static_assert(offsetof(FFortTheaterTileEditorData, DifficultyWeightOverrides) == 0x000040, "Member 'FFortTheaterTileEditorData::DifficultyWeightOverrides' has a wrong offset!");

// ScriptStruct FortniteGame.FortEditorTheaterMapRegionColor
// 0x0014 (0x0014 - 0x0000)
struct FFortEditorTheaterMapRegionColor final
{
public:
	class UFortRegionInfo*                        Region;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RegionColor;                                       // 0x0004(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEditorTheaterMapRegionColor) == 0x000004, "Wrong alignment on FFortEditorTheaterMapRegionColor");
static_assert(sizeof(FFortEditorTheaterMapRegionColor) == 0x000014, "Wrong size on FFortEditorTheaterMapRegionColor");
static_assert(offsetof(FFortEditorTheaterMapRegionColor, Region) == 0x000000, "Member 'FFortEditorTheaterMapRegionColor::Region' has a wrong offset!");
static_assert(offsetof(FFortEditorTheaterMapRegionColor, RegionColor) == 0x000004, "Member 'FFortEditorTheaterMapRegionColor::RegionColor' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIGoalInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortAIGoalInfo
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bActorAlwaysPerceived;                             // 0x0014(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bAllowsUndermining;                                // 0x0015(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIGoalInfo) == 0x000004, "Wrong alignment on FFortAIGoalInfo");
static_assert(sizeof(FFortAIGoalInfo) == 0x000018, "Wrong size on FFortAIGoalInfo");
static_assert(offsetof(FFortAIGoalInfo, Actor) == 0x000000, "Member 'FFortAIGoalInfo::Actor' has a wrong offset!");
static_assert(offsetof(FFortAIGoalInfo, Location) == 0x000008, "Member 'FFortAIGoalInfo::Location' has a wrong offset!");
static_assert(offsetof(FFortAIGoalInfo, bActorAlwaysPerceived) == 0x000014, "Member 'FFortAIGoalInfo::bActorAlwaysPerceived' has a wrong offset!");
static_assert(offsetof(FFortAIGoalInfo, bAllowsUndermining) == 0x000015, "Member 'FFortAIGoalInfo::bAllowsUndermining' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterColorInfo
// 0x0020 (0x0020 - 0x0000)
struct FFortTheaterColorInfo final
{
public:
	bool                                          bUseDifficultyToDetermineColor;                    // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            Color;                                             // 0x0004(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterColorInfo) == 0x000004, "Wrong alignment on FFortTheaterColorInfo");
static_assert(sizeof(FFortTheaterColorInfo) == 0x000020, "Wrong size on FFortTheaterColorInfo");
static_assert(offsetof(FFortTheaterColorInfo, bUseDifficultyToDetermineColor) == 0x000000, "Member 'FFortTheaterColorInfo::bUseDifficultyToDetermineColor' has a wrong offset!");
static_assert(offsetof(FFortTheaterColorInfo, Color) == 0x000004, "Member 'FFortTheaterColorInfo::Color' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterRuntimeData
// 0x008C (0x008C - 0x0000)
struct FFortTheaterRuntimeData final
{
public:
	EFortTheaterType                              TheaterType;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TheaterTags;                                       // 0x0004(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  TheaterVisibilityRequirements;                     // 0x001C(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  Requirements;                                      // 0x003C(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class AWorldMapPin>               WorldMapPinClass;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TheaterImage;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTheaterColorInfo                  TheaterColorInfo;                                  // 0x0064(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   Socket;                                            // 0x0084(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterRuntimeData) == 0x000004, "Wrong alignment on FFortTheaterRuntimeData");
static_assert(sizeof(FFortTheaterRuntimeData) == 0x00008C, "Wrong size on FFortTheaterRuntimeData");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterType) == 0x000000, "Member 'FFortTheaterRuntimeData::TheaterType' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterTags) == 0x000004, "Member 'FFortTheaterRuntimeData::TheaterTags' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterVisibilityRequirements) == 0x00001C, "Member 'FFortTheaterRuntimeData::TheaterVisibilityRequirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, Requirements) == 0x00003C, "Member 'FFortTheaterRuntimeData::Requirements' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, WorldMapPinClass) == 0x00005C, "Member 'FFortTheaterRuntimeData::WorldMapPinClass' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterImage) == 0x000060, "Member 'FFortTheaterRuntimeData::TheaterImage' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, TheaterColorInfo) == 0x000064, "Member 'FFortTheaterRuntimeData::TheaterColorInfo' has a wrong offset!");
static_assert(offsetof(FFortTheaterRuntimeData, Socket) == 0x000084, "Member 'FFortTheaterRuntimeData::Socket' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMapRegionData
// 0x008C (0x008C - 0x0000)
struct FFortTheaterMapRegionData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RegionTags;                                        // 0x000C(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<int32>                                 TileIndices;                                       // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USlateBrushAsset>        RegionThemeIcon;                                   // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortTheaterMapMissionData             MissionData;                                       // 0x0048(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortRequirementsInfo                  Requirements;                                      // 0x006C(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterMapRegionData) == 0x000004, "Wrong alignment on FFortTheaterMapRegionData");
static_assert(sizeof(FFortTheaterMapRegionData) == 0x00008C, "Wrong size on FFortTheaterMapRegionData");
static_assert(offsetof(FFortTheaterMapRegionData, DisplayName) == 0x000000, "Member 'FFortTheaterMapRegionData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, RegionTags) == 0x00000C, "Member 'FFortTheaterMapRegionData::RegionTags' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, TileIndices) == 0x000024, "Member 'FFortTheaterMapRegionData::TileIndices' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, RegionThemeIcon) == 0x000030, "Member 'FFortTheaterMapRegionData::RegionThemeIcon' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, MissionData) == 0x000048, "Member 'FFortTheaterMapRegionData::MissionData' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapRegionData, Requirements) == 0x00006C, "Member 'FFortTheaterMapRegionData::Requirements' has a wrong offset!");

// ScriptStruct FortniteGame.FortTheaterMapData
// 0x00D0 (0x00D0 - 0x0000)
struct FFortTheaterMapData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 UniqueId;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TheaterSlot;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTestTheater;                                    // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortTheaterRuntimeData                RuntimeInfo;                                       // 0x002C(0x008C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterMapTileData>        Tiles;                                             // 0x00B8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FFortTheaterMapRegionData>      Regions;                                           // 0x00C4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTheaterMapData) == 0x000004, "Wrong alignment on FFortTheaterMapData");
static_assert(sizeof(FFortTheaterMapData) == 0x0000D0, "Wrong size on FFortTheaterMapData");
static_assert(offsetof(FFortTheaterMapData, DisplayName) == 0x000000, "Member 'FFortTheaterMapData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, UniqueId) == 0x00000C, "Member 'FFortTheaterMapData::UniqueId' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, TheaterSlot) == 0x000018, "Member 'FFortTheaterMapData::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, bIsTestTheater) == 0x00001C, "Member 'FFortTheaterMapData::bIsTestTheater' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, Description) == 0x000020, "Member 'FFortTheaterMapData::Description' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, RuntimeInfo) == 0x00002C, "Member 'FFortTheaterMapData::RuntimeInfo' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, Tiles) == 0x0000B8, "Member 'FFortTheaterMapData::Tiles' has a wrong offset!");
static_assert(offsetof(FFortTheaterMapData, Regions) == 0x0000C4, "Member 'FFortTheaterMapData::Regions' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpokenLine
// 0x001C (0x001C - 0x0000)
struct FFortSpokenLine final
{
public:
	class USoundBase*                             Audio;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AnimMontage;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimSequence;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Addressee;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFeedbackBroadcastFilter                  BroadcastFilter;                                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptCurrentLine;                             // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCanBeInterrupted;                                 // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCanQue;                                           // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpokenLine) == 0x000004, "Wrong alignment on FFortSpokenLine");
static_assert(sizeof(FFortSpokenLine) == 0x00001C, "Wrong size on FFortSpokenLine");
static_assert(offsetof(FFortSpokenLine, Audio) == 0x000000, "Member 'FFortSpokenLine::Audio' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, AnimMontage) == 0x000004, "Member 'FFortSpokenLine::AnimMontage' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, AnimSequence) == 0x000008, "Member 'FFortSpokenLine::AnimSequence' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, Addressee) == 0x00000C, "Member 'FFortSpokenLine::Addressee' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, BroadcastFilter) == 0x000010, "Member 'FFortSpokenLine::BroadcastFilter' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, Delay) == 0x000014, "Member 'FFortSpokenLine::Delay' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, bInterruptCurrentLine) == 0x000018, "Member 'FFortSpokenLine::bInterruptCurrentLine' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, bCanBeInterrupted) == 0x000019, "Member 'FFortSpokenLine::bCanBeInterrupted' has a wrong offset!");
static_assert(offsetof(FFortSpokenLine, bCanQue) == 0x00001A, "Member 'FFortSpokenLine::bCanQue' has a wrong offset!");

// ScriptStruct FortniteGame.FortPawnVocalChord
// 0x0080 (0x0080 - 0x0000)
struct FFortPawnVocalChord final
{
public:
	class UAudioComponent*                        FeedbackAudioComponent;                            // 0x0000(0x0004)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortSpokenLine                        ReplicatedSpokenLine;                              // 0x0004(0x001C)(NativeAccessSpecifierPublic)
	struct FFortSpokenLine                        PendingSpokenLine;                                 // 0x0020(0x001C)(RepSkip, NativeAccessSpecifierPublic)
	struct FFortSpokenLine                        QueuedSpokenLine;                                  // 0x003C(0x001C)(RepSkip, NativeAccessSpecifierPublic)
	struct FFortSpokenLine                        CurrentSpokenLine;                                 // 0x0058(0x001C)(RepSkip, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPawnVocalChord) == 0x000004, "Wrong alignment on FFortPawnVocalChord");
static_assert(sizeof(FFortPawnVocalChord) == 0x000080, "Wrong size on FFortPawnVocalChord");
static_assert(offsetof(FFortPawnVocalChord, FeedbackAudioComponent) == 0x000000, "Member 'FFortPawnVocalChord::FeedbackAudioComponent' has a wrong offset!");
static_assert(offsetof(FFortPawnVocalChord, ReplicatedSpokenLine) == 0x000004, "Member 'FFortPawnVocalChord::ReplicatedSpokenLine' has a wrong offset!");
static_assert(offsetof(FFortPawnVocalChord, PendingSpokenLine) == 0x000020, "Member 'FFortPawnVocalChord::PendingSpokenLine' has a wrong offset!");
static_assert(offsetof(FFortPawnVocalChord, QueuedSpokenLine) == 0x00003C, "Member 'FFortPawnVocalChord::QueuedSpokenLine' has a wrong offset!");
static_assert(offsetof(FFortPawnVocalChord, CurrentSpokenLine) == 0x000058, "Member 'FFortPawnVocalChord::CurrentSpokenLine' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackAction
// 0x001C (0x001C - 0x0000)
struct FFortFeedbackAction
{
public:
	struct FFortFeedbackHandle                    Handle;                                            // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FFortFeedbackLine>              Lines;                                             // 0x0010(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFeedbackAction) == 0x000004, "Wrong alignment on FFortFeedbackAction");
static_assert(sizeof(FFortFeedbackAction) == 0x00001C, "Wrong size on FFortFeedbackAction");
static_assert(offsetof(FFortFeedbackAction, Handle) == 0x000000, "Member 'FFortFeedbackAction::Handle' has a wrong offset!");
static_assert(offsetof(FFortFeedbackAction, Lines) == 0x000010, "Member 'FFortFeedbackAction::Lines' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackActionBankDefined
// 0x0000 (0x001C - 0x001C)
struct FFortFeedbackActionBankDefined final : public FFortFeedbackAction
{
};
static_assert(alignof(FFortFeedbackActionBankDefined) == 0x000004, "Wrong alignment on FFortFeedbackActionBankDefined");
static_assert(sizeof(FFortFeedbackActionBankDefined) == 0x00001C, "Wrong size on FFortFeedbackActionBankDefined");

// ScriptStruct FortniteGame.FortCurveSequenceInstanceInfo
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FFortCurveSequenceInstanceInfo
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCurveSequenceInstanceInfo) == 0x000004, "Wrong alignment on FFortCurveSequenceInstanceInfo");
static_assert(sizeof(FFortCurveSequenceInstanceInfo) == 0x000004, "Wrong size on FFortCurveSequenceInstanceInfo");

// ScriptStruct FortniteGame.FortMissionGenerationElementCostAndAvailabilityRow
// 0x0014 (0x0014 - 0x0000)
struct FFortMissionGenerationElementCostAndAvailabilityRow final : public FTableRowBase
{
public:
	class UCurveTable*                            AvailabilityCurveTable;                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AvailabilityCurveTableRow;                         // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinCost;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxCost;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortMissionGenerationElementCostAndAvailabilityRow) == 0x000004, "Wrong alignment on FFortMissionGenerationElementCostAndAvailabilityRow");
static_assert(sizeof(FFortMissionGenerationElementCostAndAvailabilityRow) == 0x000014, "Wrong size on FFortMissionGenerationElementCostAndAvailabilityRow");
static_assert(offsetof(FFortMissionGenerationElementCostAndAvailabilityRow, AvailabilityCurveTable) == 0x000000, "Member 'FFortMissionGenerationElementCostAndAvailabilityRow::AvailabilityCurveTable' has a wrong offset!");
static_assert(offsetof(FFortMissionGenerationElementCostAndAvailabilityRow, AvailabilityCurveTableRow) == 0x000004, "Member 'FFortMissionGenerationElementCostAndAvailabilityRow::AvailabilityCurveTableRow' has a wrong offset!");
static_assert(offsetof(FFortMissionGenerationElementCostAndAvailabilityRow, MinCost) == 0x00000C, "Member 'FFortMissionGenerationElementCostAndAvailabilityRow::MinCost' has a wrong offset!");
static_assert(offsetof(FFortMissionGenerationElementCostAndAvailabilityRow, MaxCost) == 0x000010, "Member 'FFortMissionGenerationElementCostAndAvailabilityRow::MaxCost' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayAbilityBehaviorDistanceData
// 0x001C (0x001C - 0x0000)
struct FFortGameplayAbilityBehaviorDistanceData final
{
public:
	struct FGameplayTagContainer                  DistanceDataTag;                                   // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayAbilityBehaviorDistanceData) == 0x000004, "Wrong alignment on FFortGameplayAbilityBehaviorDistanceData");
static_assert(sizeof(FFortGameplayAbilityBehaviorDistanceData) == 0x00001C, "Wrong size on FFortGameplayAbilityBehaviorDistanceData");
static_assert(offsetof(FFortGameplayAbilityBehaviorDistanceData, DistanceDataTag) == 0x000000, "Member 'FFortGameplayAbilityBehaviorDistanceData::DistanceDataTag' has a wrong offset!");
static_assert(offsetof(FFortGameplayAbilityBehaviorDistanceData, Distance) == 0x000018, "Member 'FFortGameplayAbilityBehaviorDistanceData::Distance' has a wrong offset!");

// ScriptStruct FortniteGame.FortBounceData
// 0x0030 (0x0030 - 0x0000)
struct FFortBounceData final
{
public:
	float                                         StartTime;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceValue;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DeformationVector;                                 // 0x000C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           DeformationCenter;                                 // 0x001C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortBounceType                               BounceType;                                        // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortBounceData) == 0x000004, "Wrong alignment on FFortBounceData");
static_assert(sizeof(FFortBounceData) == 0x000030, "Wrong size on FFortBounceData");
static_assert(offsetof(FFortBounceData, StartTime) == 0x000000, "Member 'FFortBounceData::StartTime' has a wrong offset!");
static_assert(offsetof(FFortBounceData, BounceValue) == 0x000004, "Member 'FFortBounceData::BounceValue' has a wrong offset!");
static_assert(offsetof(FFortBounceData, Radius) == 0x000008, "Member 'FFortBounceData::Radius' has a wrong offset!");
static_assert(offsetof(FFortBounceData, DeformationVector) == 0x00000C, "Member 'FFortBounceData::DeformationVector' has a wrong offset!");
static_assert(offsetof(FFortBounceData, DeformationCenter) == 0x00001C, "Member 'FFortBounceData::DeformationCenter' has a wrong offset!");
static_assert(offsetof(FFortBounceData, BounceType) == 0x00002C, "Member 'FFortBounceData::BounceType' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionInstancedConfigDataBucket
// 0x000C (0x000C - 0x0000)
struct FFortMissionInstancedConfigDataBucket final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Transient, NativeAccessSpecifierPublic)
	class UFortMissionConfigData*                 ConfigData;                                        // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionInstancedConfigDataBucket) == 0x000004, "Wrong alignment on FFortMissionInstancedConfigDataBucket");
static_assert(sizeof(FFortMissionInstancedConfigDataBucket) == 0x00000C, "Wrong size on FFortMissionInstancedConfigDataBucket");
static_assert(offsetof(FFortMissionInstancedConfigDataBucket, Tag) == 0x000000, "Member 'FFortMissionInstancedConfigDataBucket::Tag' has a wrong offset!");
static_assert(offsetof(FFortMissionInstancedConfigDataBucket, ConfigData) == 0x000008, "Member 'FFortMissionInstancedConfigDataBucket::ConfigData' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionInstancedConfigData
// 0x000C (0x000C - 0x0000)
struct FFortMissionInstancedConfigData final
{
public:
	TArray<struct FFortMissionInstancedConfigDataBucket> ConfigDataBuckets;                                 // 0x0000(0x000C)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortMissionInstancedConfigData) == 0x000004, "Wrong alignment on FFortMissionInstancedConfigData");
static_assert(sizeof(FFortMissionInstancedConfigData) == 0x00000C, "Wrong size on FFortMissionInstancedConfigData");
static_assert(offsetof(FFortMissionInstancedConfigData, ConfigDataBuckets) == 0x000000, "Member 'FFortMissionInstancedConfigData::ConfigDataBuckets' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterRift
// 0x0014 (0x0014 - 0x0000)
struct FFortAIEncounterRift final
{
public:
	int32                                         QueryID;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RiftLocation;                                      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ABuildingRift*                          RiftActor;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterRift) == 0x000004, "Wrong alignment on FFortAIEncounterRift");
static_assert(sizeof(FFortAIEncounterRift) == 0x000014, "Wrong size on FFortAIEncounterRift");
static_assert(offsetof(FFortAIEncounterRift, QueryID) == 0x000000, "Member 'FFortAIEncounterRift::QueryID' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRift, RiftLocation) == 0x000004, "Member 'FFortAIEncounterRift::RiftLocation' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRift, RiftActor) == 0x000010, "Member 'FFortAIEncounterRift::RiftActor' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlacementDistanceRequirements
// 0x0008 (0x0008 - 0x0000)
struct FFortPlacementDistanceRequirements final
{
public:
	float                                         DistanceRangeMin;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceRangeMax;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlacementDistanceRequirements) == 0x000004, "Wrong alignment on FFortPlacementDistanceRequirements");
static_assert(sizeof(FFortPlacementDistanceRequirements) == 0x000008, "Wrong size on FFortPlacementDistanceRequirements");
static_assert(offsetof(FFortPlacementDistanceRequirements, DistanceRangeMin) == 0x000000, "Member 'FFortPlacementDistanceRequirements::DistanceRangeMin' has a wrong offset!");
static_assert(offsetof(FFortPlacementDistanceRequirements, DistanceRangeMax) == 0x000004, "Member 'FFortPlacementDistanceRequirements::DistanceRangeMax' has a wrong offset!");

// ScriptStruct FortniteGame.TeamSpottedActorInfoArray
// 0x0010 (0x0090 - 0x0080)
struct FTeamSpottedActorInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FTeamSpottedActorInfo>          SpottedActorInfo;                                  // 0x0080(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class AFortTeamInfo*                          OwningTeam;                                        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTeamSpottedActorInfoArray) == 0x000004, "Wrong alignment on FTeamSpottedActorInfoArray");
static_assert(sizeof(FTeamSpottedActorInfoArray) == 0x000090, "Wrong size on FTeamSpottedActorInfoArray");
static_assert(offsetof(FTeamSpottedActorInfoArray, SpottedActorInfo) == 0x000080, "Member 'FTeamSpottedActorInfoArray::SpottedActorInfo' has a wrong offset!");
static_assert(offsetof(FTeamSpottedActorInfoArray, OwningTeam) == 0x00008C, "Member 'FTeamSpottedActorInfoArray::OwningTeam' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionEvent
// 0x006C (0x006C - 0x0000)
struct FFortMissionEvent final
{
public:
	class FName                                   EventType;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UObject*                                EventFocus;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             EventContent;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EventInstigator;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenericInt;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenericFloat;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GenericText;                                       // 0x0034(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UFortMissionEventParams*                Params;                                            // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionEvent) == 0x000004, "Wrong alignment on FFortMissionEvent");
static_assert(sizeof(FFortMissionEvent) == 0x00006C, "Wrong size on FFortMissionEvent");
static_assert(offsetof(FFortMissionEvent, EventType) == 0x000000, "Member 'FFortMissionEvent::EventType' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, ObjectiveHandle) == 0x000008, "Member 'FFortMissionEvent::ObjectiveHandle' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, EventFocus) == 0x000020, "Member 'FFortMissionEvent::EventFocus' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, EventContent) == 0x000024, "Member 'FFortMissionEvent::EventContent' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, EventInstigator) == 0x000028, "Member 'FFortMissionEvent::EventInstigator' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, GenericInt) == 0x00002C, "Member 'FFortMissionEvent::GenericInt' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, GenericFloat) == 0x000030, "Member 'FFortMissionEvent::GenericFloat' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, GenericText) == 0x000034, "Member 'FFortMissionEvent::GenericText' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, GameplayTags) == 0x000040, "Member 'FFortMissionEvent::GameplayTags' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, MissionGuid) == 0x000058, "Member 'FFortMissionEvent::MissionGuid' has a wrong offset!");
static_assert(offsetof(FFortMissionEvent, Params) == 0x000068, "Member 'FFortMissionEvent::Params' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemList
// 0x0090 (0x0110 - 0x0080)
struct FFortItemList final : public FFastArraySerializer
{
public:
	TArray<struct FFortItemEntry>                 ReplicatedEntries;                                 // 0x0080(0x000C)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x3C];                                      // 0x008C(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortWorldItem*>                 ItemInstances;                                     // 0x00C8(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x3C];                                      // 0x00D4(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemList) == 0x000004, "Wrong alignment on FFortItemList");
static_assert(sizeof(FFortItemList) == 0x000110, "Wrong size on FFortItemList");
static_assert(offsetof(FFortItemList, ReplicatedEntries) == 0x000080, "Member 'FFortItemList::ReplicatedEntries' has a wrong offset!");
static_assert(offsetof(FFortItemList, ItemInstances) == 0x0000C8, "Member 'FFortItemList::ItemInstances' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerBuildableClassContainer
// 0x000C (0x000C - 0x0000)
struct FPlayerBuildableClassContainer final
{
public:
	TArray<TSubclassOf<class ABuildingSMActor>>   BuildingClasses;                                   // 0x0000(0x000C)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerBuildableClassContainer) == 0x000004, "Wrong alignment on FPlayerBuildableClassContainer");
static_assert(sizeof(FPlayerBuildableClassContainer) == 0x00000C, "Wrong size on FPlayerBuildableClassContainer");
static_assert(offsetof(FPlayerBuildableClassContainer, BuildingClasses) == 0x000000, "Member 'FPlayerBuildableClassContainer::BuildingClasses' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemQuantityPair
// 0x001C (0x001C - 0x0000)
struct FFortItemQuantityPair final
{
public:
	TSoftObjectPtr<class UFortItemDefinition>     ItemDefinition;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortItemQuantityPair) == 0x000004, "Wrong alignment on FFortItemQuantityPair");
static_assert(sizeof(FFortItemQuantityPair) == 0x00001C, "Wrong size on FFortItemQuantityPair");
static_assert(offsetof(FFortItemQuantityPair, ItemDefinition) == 0x000000, "Member 'FFortItemQuantityPair::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FFortItemQuantityPair, Quantity) == 0x000018, "Member 'FFortItemQuantityPair::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.AuxiliaryEditTileMeshData
// 0x0014 (0x0014 - 0x0000)
struct FAuxiliaryEditTileMeshData final
{
public:
	class UStaticMesh*                            TileMesh;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TileTexture;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRot;                                       // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAuxiliaryEditTileMeshData) == 0x000004, "Wrong alignment on FAuxiliaryEditTileMeshData");
static_assert(sizeof(FAuxiliaryEditTileMeshData) == 0x000014, "Wrong size on FAuxiliaryEditTileMeshData");
static_assert(offsetof(FAuxiliaryEditTileMeshData, TileMesh) == 0x000000, "Member 'FAuxiliaryEditTileMeshData::TileMesh' has a wrong offset!");
static_assert(offsetof(FAuxiliaryEditTileMeshData, TileTexture) == 0x000004, "Member 'FAuxiliaryEditTileMeshData::TileTexture' has a wrong offset!");
static_assert(offsetof(FAuxiliaryEditTileMeshData, RelativeRot) == 0x000008, "Member 'FAuxiliaryEditTileMeshData::RelativeRot' has a wrong offset!");

// ScriptStruct FortniteGame.FortTextFormatData
// 0x0054 (0x0054 - 0x0000)
struct FFortTextFormatData final
{
public:
	class FText                                   DisplayText;                                       // 0x0000(0x000C)(NativeAccessSpecifierPublic)
	class FText                                   PawnName1;                                         // 0x000C(0x000C)(NativeAccessSpecifierPublic)
	class FText                                   PawnName2;                                         // 0x0018(0x000C)(NativeAccessSpecifierPublic)
	class FText                                   ItemName;                                          // 0x0024(0x000C)(NativeAccessSpecifierPublic)
	class FText                                   ItemBaseName;                                      // 0x0030(0x000C)(NativeAccessSpecifierPublic)
	float                                         DisplayValue;                                      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortPlayerState>        PlayerState1;                                      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AFortPlayerState>        PlayerState2;                                      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UFortItemDefinition*                    ItemDefinition;                                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortTextFormatData) == 0x000004, "Wrong alignment on FFortTextFormatData");
static_assert(sizeof(FFortTextFormatData) == 0x000054, "Wrong size on FFortTextFormatData");
static_assert(offsetof(FFortTextFormatData, DisplayText) == 0x000000, "Member 'FFortTextFormatData::DisplayText' has a wrong offset!");
static_assert(offsetof(FFortTextFormatData, PawnName1) == 0x00000C, "Member 'FFortTextFormatData::PawnName1' has a wrong offset!");
static_assert(offsetof(FFortTextFormatData, PawnName2) == 0x000018, "Member 'FFortTextFormatData::PawnName2' has a wrong offset!");
static_assert(offsetof(FFortTextFormatData, ItemName) == 0x000024, "Member 'FFortTextFormatData::ItemName' has a wrong offset!");
static_assert(offsetof(FFortTextFormatData, ItemBaseName) == 0x000030, "Member 'FFortTextFormatData::ItemBaseName' has a wrong offset!");
static_assert(offsetof(FFortTextFormatData, DisplayValue) == 0x00003C, "Member 'FFortTextFormatData::DisplayValue' has a wrong offset!");
static_assert(offsetof(FFortTextFormatData, PlayerState1) == 0x000040, "Member 'FFortTextFormatData::PlayerState1' has a wrong offset!");
static_assert(offsetof(FFortTextFormatData, PlayerState2) == 0x000048, "Member 'FFortTextFormatData::PlayerState2' has a wrong offset!");
static_assert(offsetof(FFortTextFormatData, ItemDefinition) == 0x000050, "Member 'FFortTextFormatData::ItemDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.FortObjectLibraryEntry
// 0x0014 (0x0014 - 0x0000)
struct FFortObjectLibraryEntry final
{
public:
	class UObjectLibrary*                         Library;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemType                                 ItemType;                                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         LoadedPaths;                                       // 0x0008(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortObjectLibraryEntry) == 0x000004, "Wrong alignment on FFortObjectLibraryEntry");
static_assert(sizeof(FFortObjectLibraryEntry) == 0x000014, "Wrong size on FFortObjectLibraryEntry");
static_assert(offsetof(FFortObjectLibraryEntry, Library) == 0x000000, "Member 'FFortObjectLibraryEntry::Library' has a wrong offset!");
static_assert(offsetof(FFortObjectLibraryEntry, ItemType) == 0x000004, "Member 'FFortObjectLibraryEntry::ItemType' has a wrong offset!");
static_assert(offsetof(FFortObjectLibraryEntry, LoadedPaths) == 0x000008, "Member 'FFortObjectLibraryEntry::LoadedPaths' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionWeightedReward
// 0x0080 (0x0080 - 0x0000)
struct FFortMissionWeightedReward final
{
public:
	class FName                                   LootTierGroup;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LootIcon;                                          // 0x0008(0x0074)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionWeightedReward) == 0x000004, "Wrong alignment on FFortMissionWeightedReward");
static_assert(sizeof(FFortMissionWeightedReward) == 0x000080, "Wrong size on FFortMissionWeightedReward");
static_assert(offsetof(FFortMissionWeightedReward, LootTierGroup) == 0x000000, "Member 'FFortMissionWeightedReward::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FFortMissionWeightedReward, LootIcon) == 0x000008, "Member 'FFortMissionWeightedReward::LootIcon' has a wrong offset!");
static_assert(offsetof(FFortMissionWeightedReward, Weight) == 0x00007C, "Member 'FFortMissionWeightedReward::Weight' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionTaggedRewards
// 0x0014 (0x0014 - 0x0000)
struct FFortMissionTaggedRewards final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UFortWorldItemDefinition>> WorldItemDefinitions;                              // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionTaggedRewards) == 0x000004, "Wrong alignment on FFortMissionTaggedRewards");
static_assert(sizeof(FFortMissionTaggedRewards) == 0x000014, "Wrong size on FFortMissionTaggedRewards");
static_assert(offsetof(FFortMissionTaggedRewards, Tag) == 0x000000, "Member 'FFortMissionTaggedRewards::Tag' has a wrong offset!");
static_assert(offsetof(FFortMissionTaggedRewards, WorldItemDefinitions) == 0x000008, "Member 'FFortMissionTaggedRewards::WorldItemDefinitions' has a wrong offset!");

// ScriptStruct FortniteGame.FortActorRecord
// 0x0070 (0x0070 - 0x0000)
struct FFortActorRecord final
{
public:
	struct FGuid                                  ActorGuid;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortBuildingPersistentState                  ActorState;                                        // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ABuildingActor>             ActorClass;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorTransform;                                    // 0x0020(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSpawnedActor;                                     // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ActorData;                                         // 0x0054(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortActorRecord) == 0x000010, "Wrong alignment on FFortActorRecord");
static_assert(sizeof(FFortActorRecord) == 0x000070, "Wrong size on FFortActorRecord");
static_assert(offsetof(FFortActorRecord, ActorGuid) == 0x000000, "Member 'FFortActorRecord::ActorGuid' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, ActorState) == 0x000010, "Member 'FFortActorRecord::ActorState' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, ActorClass) == 0x000014, "Member 'FFortActorRecord::ActorClass' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, ActorTransform) == 0x000020, "Member 'FFortActorRecord::ActorTransform' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, bSpawnedActor) == 0x000050, "Member 'FFortActorRecord::bSpawnedActor' has a wrong offset!");
static_assert(offsetof(FFortActorRecord, ActorData) == 0x000054, "Member 'FFortActorRecord::ActorData' has a wrong offset!");

// ScriptStruct FortniteGame.FortBuildingInstruction
// 0x0070 (0x0070 - 0x0000)
struct FFortBuildingInstruction final
{
public:
	struct FFortActorRecord                       ActorRecord;                                       // 0x0000(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBuildingInstruction) == 0x000010, "Wrong alignment on FFortBuildingInstruction");
static_assert(sizeof(FFortBuildingInstruction) == 0x000070, "Wrong size on FFortBuildingInstruction");
static_assert(offsetof(FFortBuildingInstruction, ActorRecord) == 0x000000, "Member 'FFortBuildingInstruction::ActorRecord' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionPopupWidgetData
// 0x00E8 (0x00E8 - 0x0000)
struct FFortMissionPopupWidgetData final
{
public:
	struct FSlateBrush                            AvailableIcon;                                     // 0x0000(0x0074)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UnavailableIcon;                                   // 0x0074(0x0074)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionPopupWidgetData) == 0x000004, "Wrong alignment on FFortMissionPopupWidgetData");
static_assert(sizeof(FFortMissionPopupWidgetData) == 0x0000E8, "Wrong size on FFortMissionPopupWidgetData");
static_assert(offsetof(FFortMissionPopupWidgetData, AvailableIcon) == 0x000000, "Member 'FFortMissionPopupWidgetData::AvailableIcon' has a wrong offset!");
static_assert(offsetof(FFortMissionPopupWidgetData, UnavailableIcon) == 0x000074, "Member 'FFortMissionPopupWidgetData::UnavailableIcon' has a wrong offset!");

// ScriptStruct FortniteGame.FortObjectiveEntry
// 0x0038 (0x0038 - 0x0000)
struct FFortObjectiveEntry final
{
public:
	TSoftClassPtr<class UClass>                   ObjectiveRef;                                      // 0x0000(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortBadgeItemDefinition*               ObjectiveRewardBadge;                              // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortObjectiveRequirement                     MissionRequirement;                                // 0x001C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ObjectiveHandle;                                   // 0x0020(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortObjectiveEntry) == 0x000004, "Wrong alignment on FFortObjectiveEntry");
static_assert(sizeof(FFortObjectiveEntry) == 0x000038, "Wrong size on FFortObjectiveEntry");
static_assert(offsetof(FFortObjectiveEntry, ObjectiveRef) == 0x000000, "Member 'FFortObjectiveEntry::ObjectiveRef' has a wrong offset!");
static_assert(offsetof(FFortObjectiveEntry, ObjectiveRewardBadge) == 0x000018, "Member 'FFortObjectiveEntry::ObjectiveRewardBadge' has a wrong offset!");
static_assert(offsetof(FFortObjectiveEntry, MissionRequirement) == 0x00001C, "Member 'FFortObjectiveEntry::MissionRequirement' has a wrong offset!");
static_assert(offsetof(FFortObjectiveEntry, ObjectiveHandle) == 0x000020, "Member 'FFortObjectiveEntry::ObjectiveHandle' has a wrong offset!");

// ScriptStruct FortniteGame.FortObjectiveBlock
// 0x000C (0x000C - 0x0000)
struct FFortObjectiveBlock final
{
public:
	TArray<struct FFortObjectiveEntry>            ObjectiveEntries;                                  // 0x0000(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortObjectiveBlock) == 0x000004, "Wrong alignment on FFortObjectiveBlock");
static_assert(sizeof(FFortObjectiveBlock) == 0x00000C, "Wrong size on FFortObjectiveBlock");
static_assert(offsetof(FFortObjectiveBlock, ObjectiveEntries) == 0x000000, "Member 'FFortObjectiveBlock::ObjectiveEntries' has a wrong offset!");

// ScriptStruct FortniteGame.VelocityGridStrokeSubData
// 0x0001 (0x0001 - 0x0000)
struct FVelocityGridStrokeSubData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVelocityGridStrokeSubData) == 0x000001, "Wrong alignment on FVelocityGridStrokeSubData");
static_assert(sizeof(FVelocityGridStrokeSubData) == 0x000001, "Wrong size on FVelocityGridStrokeSubData");

// ScriptStruct FortniteGame.VisibilityInfo
// 0x0008 (0x0014 - 0x000C)
struct FVisibilityInfo final : public FFastArraySerializerItem
{
public:
	class AActor*                                 Actor;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TeamVisibilityFlag;                                // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVisibilityInfo) == 0x000004, "Wrong alignment on FVisibilityInfo");
static_assert(sizeof(FVisibilityInfo) == 0x000014, "Wrong size on FVisibilityInfo");
static_assert(offsetof(FVisibilityInfo, Actor) == 0x00000C, "Member 'FVisibilityInfo::Actor' has a wrong offset!");
static_assert(offsetof(FVisibilityInfo, TeamVisibilityFlag) == 0x000010, "Member 'FVisibilityInfo::TeamVisibilityFlag' has a wrong offset!");

// ScriptStruct FortniteGame.ExponentialHeightFogValues
// 0x0038 (0x0038 - 0x0000)
struct FExponentialHeightFogValues final
{
public:
	float                                         FogDensity;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExponentialHeightFogValues) == 0x000004, "Wrong alignment on FExponentialHeightFogValues");
static_assert(sizeof(FExponentialHeightFogValues) == 0x000038, "Wrong size on FExponentialHeightFogValues");
static_assert(offsetof(FExponentialHeightFogValues, FogDensity) == 0x000000, "Member 'FExponentialHeightFogValues::FogDensity' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, FogHeightFalloff) == 0x000004, "Member 'FExponentialHeightFogValues::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, FogMaxOpacity) == 0x000008, "Member 'FExponentialHeightFogValues::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, StartDistance) == 0x00000C, "Member 'FExponentialHeightFogValues::StartDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, DirectionalInscatteringExponent) == 0x000010, "Member 'FExponentialHeightFogValues::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, DirectionalInscatteringStartDistance) == 0x000014, "Member 'FExponentialHeightFogValues::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, DirectionalInscatteringColor) == 0x000018, "Member 'FExponentialHeightFogValues::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogValues, FogInscatteringColor) == 0x000028, "Member 'FExponentialHeightFogValues::FogInscatteringColor' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionInfoTagRequirement
// 0x0030 (0x0030 - 0x0000)
struct FFortMissionInfoTagRequirement final
{
public:
	struct FGameplayTagContainer                  OldTags;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  NewTags;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionInfoTagRequirement) == 0x000004, "Wrong alignment on FFortMissionInfoTagRequirement");
static_assert(sizeof(FFortMissionInfoTagRequirement) == 0x000030, "Wrong size on FFortMissionInfoTagRequirement");
static_assert(offsetof(FFortMissionInfoTagRequirement, OldTags) == 0x000000, "Member 'FFortMissionInfoTagRequirement::OldTags' has a wrong offset!");
static_assert(offsetof(FFortMissionInfoTagRequirement, NewTags) == 0x000018, "Member 'FFortMissionInfoTagRequirement::NewTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortStartingMissionInfo
// 0x000C (0x000C - 0x0000)
struct FFortStartingMissionInfo final
{
public:
	TArray<class UFortMissionInfo*>               StartingMissions;                                  // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortStartingMissionInfo) == 0x000004, "Wrong alignment on FFortStartingMissionInfo");
static_assert(sizeof(FFortStartingMissionInfo) == 0x00000C, "Wrong size on FFortStartingMissionInfo");
static_assert(offsetof(FFortStartingMissionInfo, StartingMissions) == 0x000000, "Member 'FFortStartingMissionInfo::StartingMissions' has a wrong offset!");

// ScriptStruct FortniteGame.CameraPair
// 0x0008 (0x0008 - 0x0000)
struct FCameraPair final
{
public:
	EFrontEndCamera                               Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortCameraBase*                        Camera;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraPair) == 0x000004, "Wrong alignment on FCameraPair");
static_assert(sizeof(FCameraPair) == 0x000008, "Wrong size on FCameraPair");
static_assert(offsetof(FCameraPair, Type) == 0x000000, "Member 'FCameraPair::Type' has a wrong offset!");
static_assert(offsetof(FCameraPair, Camera) == 0x000004, "Member 'FCameraPair::Camera' has a wrong offset!");

// ScriptStruct FortniteGame.AIEncounterSpawnGroupWeights
// 0x002C (0x002C - 0x0000)
struct alignas(0x04) FAIEncounterSpawnGroupWeights final
{
public:
	uint8                                         Pad_0[0x2C];                                       // 0x0000(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIEncounterSpawnGroupWeights) == 0x000004, "Wrong alignment on FAIEncounterSpawnGroupWeights");
static_assert(sizeof(FAIEncounterSpawnGroupWeights) == 0x00002C, "Wrong size on FAIEncounterSpawnGroupWeights");

// ScriptStruct FortniteGame.FortEncounterProfile
// 0x003C (0x003C - 0x0000)
struct FFortEncounterProfile final
{
public:
	TSoftObjectPtr<class UFortDifficultyOptionSetEncounter> EncounterOptions;                                  // 0x0000(0x0018)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortDifficultyOptionCategoryEncounter*> OverrideCategories;                                // 0x0018(0x000C)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0024(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterProfile) == 0x000004, "Wrong alignment on FFortEncounterProfile");
static_assert(sizeof(FFortEncounterProfile) == 0x00003C, "Wrong size on FFortEncounterProfile");
static_assert(offsetof(FFortEncounterProfile, EncounterOptions) == 0x000000, "Member 'FFortEncounterProfile::EncounterOptions' has a wrong offset!");
static_assert(offsetof(FFortEncounterProfile, OverrideCategories) == 0x000018, "Member 'FFortEncounterProfile::OverrideCategories' has a wrong offset!");
static_assert(offsetof(FFortEncounterProfile, EncounterTypeTags) == 0x000024, "Member 'FFortEncounterProfile::EncounterTypeTags' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterSequenceSettings
// 0x0028 (0x0028 - 0x0000)
struct FFortEncounterSequenceSettings final
{
public:
	struct FFortEncounterTransitionSettings       TransitionSettings;                                // 0x0000(0x0001)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortEncounterProfile>          EncounterSequence;                                 // 0x0004(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SequenceTags;                                      // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterSequenceSettings) == 0x000004, "Wrong alignment on FFortEncounterSequenceSettings");
static_assert(sizeof(FFortEncounterSequenceSettings) == 0x000028, "Wrong size on FFortEncounterSequenceSettings");
static_assert(offsetof(FFortEncounterSequenceSettings, TransitionSettings) == 0x000000, "Member 'FFortEncounterSequenceSettings::TransitionSettings' has a wrong offset!");
static_assert(offsetof(FFortEncounterSequenceSettings, EncounterSequence) == 0x000004, "Member 'FFortEncounterSequenceSettings::EncounterSequence' has a wrong offset!");
static_assert(offsetof(FFortEncounterSequenceSettings, SequenceTags) == 0x000010, "Member 'FFortEncounterSequenceSettings::SequenceTags' has a wrong offset!");

// ScriptStruct FortniteGame.TileGroupMapInfo
// 0x0024 (0x0024 - 0x0000)
struct FTileGroupMapInfo final
{
public:
	TSoftObjectPtr<class UWorld>                  GroupWorld;                                        // 0x0000(0x0018)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Weight;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QuotaCategory;                                     // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTileGroupMapInfo) == 0x000004, "Wrong alignment on FTileGroupMapInfo");
static_assert(sizeof(FTileGroupMapInfo) == 0x000024, "Wrong size on FTileGroupMapInfo");
static_assert(offsetof(FTileGroupMapInfo, GroupWorld) == 0x000000, "Member 'FTileGroupMapInfo::GroupWorld' has a wrong offset!");
static_assert(offsetof(FTileGroupMapInfo, Weight) == 0x000018, "Member 'FTileGroupMapInfo::Weight' has a wrong offset!");
static_assert(offsetof(FTileGroupMapInfo, QuotaCategory) == 0x00001C, "Member 'FTileGroupMapInfo::QuotaCategory' has a wrong offset!");

// ScriptStruct FortniteGame.GoalSelectionQueryInfo
// 0x001C (0x001C - 0x0000)
struct FGoalSelectionQueryInfo final
{
public:
	class UEnvQuery*                              GoalSelectionQuery;                                // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0004(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoalSelectionQueryInfo) == 0x000004, "Wrong alignment on FGoalSelectionQueryInfo");
static_assert(sizeof(FGoalSelectionQueryInfo) == 0x00001C, "Wrong size on FGoalSelectionQueryInfo");
static_assert(offsetof(FGoalSelectionQueryInfo, GoalSelectionQuery) == 0x000000, "Member 'FGoalSelectionQueryInfo::GoalSelectionQuery' has a wrong offset!");
static_assert(offsetof(FGoalSelectionQueryInfo, RequiredGameplayTags) == 0x000004, "Member 'FGoalSelectionQueryInfo::RequiredGameplayTags' has a wrong offset!");

// ScriptStruct FortniteGame.ItemDefinitionAndCount
// 0x001C (0x001C - 0x0000)
struct FItemDefinitionAndCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortItemDefinition>     ItemDefinition;                                    // 0x0004(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDefinitionAndCount) == 0x000004, "Wrong alignment on FItemDefinitionAndCount");
static_assert(sizeof(FItemDefinitionAndCount) == 0x00001C, "Wrong size on FItemDefinitionAndCount");
static_assert(offsetof(FItemDefinitionAndCount, Count) == 0x000000, "Member 'FItemDefinitionAndCount::Count' has a wrong offset!");
static_assert(offsetof(FItemDefinitionAndCount, ItemDefinition) == 0x000004, "Member 'FItemDefinitionAndCount::ItemDefinition' has a wrong offset!");

// ScriptStruct FortniteGame.SpawnGroupInstanceInfo
// 0x003C (0x003C - 0x0000)
struct FSpawnGroupInstanceInfo final
{
public:
	class UFortAISpawnGroup*                      SpawnGroup;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumActiveAlive;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentGroupInstanceSpawnPointsUsed;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumEngaged;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadyToSpawn;                                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFinishedSpawning;                                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  GroupGuid;                                         // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         EnemySpawnDataIndex;                               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSelected;                                      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextEnemyToSpawnIndex;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AFortAIPawn*>                    PawnList;                                          // 0x0030(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnGroupInstanceInfo) == 0x000004, "Wrong alignment on FSpawnGroupInstanceInfo");
static_assert(sizeof(FSpawnGroupInstanceInfo) == 0x00003C, "Wrong size on FSpawnGroupInstanceInfo");
static_assert(offsetof(FSpawnGroupInstanceInfo, SpawnGroup) == 0x000000, "Member 'FSpawnGroupInstanceInfo::SpawnGroup' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, NumActiveAlive) == 0x000004, "Member 'FSpawnGroupInstanceInfo::NumActiveAlive' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, CurrentGroupInstanceSpawnPointsUsed) == 0x000008, "Member 'FSpawnGroupInstanceInfo::CurrentGroupInstanceSpawnPointsUsed' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, NumEngaged) == 0x00000C, "Member 'FSpawnGroupInstanceInfo::NumEngaged' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, bReadyToSpawn) == 0x000010, "Member 'FSpawnGroupInstanceInfo::bReadyToSpawn' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, bFinishedSpawning) == 0x000011, "Member 'FSpawnGroupInstanceInfo::bFinishedSpawning' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, GroupGuid) == 0x000014, "Member 'FSpawnGroupInstanceInfo::GroupGuid' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, EnemySpawnDataIndex) == 0x000024, "Member 'FSpawnGroupInstanceInfo::EnemySpawnDataIndex' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, TimeSelected) == 0x000028, "Member 'FSpawnGroupInstanceInfo::TimeSelected' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, NextEnemyToSpawnIndex) == 0x00002C, "Member 'FSpawnGroupInstanceInfo::NextEnemyToSpawnIndex' has a wrong offset!");
static_assert(offsetof(FSpawnGroupInstanceInfo, PawnList) == 0x000030, "Member 'FSpawnGroupInstanceInfo::PawnList' has a wrong offset!");

// ScriptStruct FortniteGame.FortAvailableMissionData
// 0x0060 (0x0060 - 0x0000)
struct FFortAvailableMissionData final
{
public:
	class FString                                 MissionGuid;                                       // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMcpLootResult                         MissionRewards;                                    // 0x000C(0x0024)(NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MissionGenerator;                                  // 0x0030(0x0018)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    MissionDifficultyInfo;                             // 0x0048(0x000C)(NativeAccessSpecifierPublic)
	int32                                         TileIndex;                                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              AvailableUntil;                                    // 0x0058(0x0008)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAvailableMissionData) == 0x000004, "Wrong alignment on FFortAvailableMissionData");
static_assert(sizeof(FFortAvailableMissionData) == 0x000060, "Wrong size on FFortAvailableMissionData");
static_assert(offsetof(FFortAvailableMissionData, MissionGuid) == 0x000000, "Member 'FFortAvailableMissionData::MissionGuid' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, MissionRewards) == 0x00000C, "Member 'FFortAvailableMissionData::MissionRewards' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, MissionGenerator) == 0x000030, "Member 'FFortAvailableMissionData::MissionGenerator' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, MissionDifficultyInfo) == 0x000048, "Member 'FFortAvailableMissionData::MissionDifficultyInfo' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, TileIndex) == 0x000054, "Member 'FFortAvailableMissionData::TileIndex' has a wrong offset!");
static_assert(offsetof(FFortAvailableMissionData, AvailableUntil) == 0x000058, "Member 'FFortAvailableMissionData::AvailableUntil' has a wrong offset!");

// ScriptStruct FortniteGame.FortAvailableTheaterMissions
// 0x0020 (0x0020 - 0x0000)
struct FFortAvailableTheaterMissions final
{
public:
	class FString                                 TheaterId;                                         // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortAvailableMissionData>      AvailableMissions;                                 // 0x000C(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              NextRefresh;                                       // 0x0018(0x0008)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAvailableTheaterMissions) == 0x000004, "Wrong alignment on FFortAvailableTheaterMissions");
static_assert(sizeof(FFortAvailableTheaterMissions) == 0x000020, "Wrong size on FFortAvailableTheaterMissions");
static_assert(offsetof(FFortAvailableTheaterMissions, TheaterId) == 0x000000, "Member 'FFortAvailableTheaterMissions::TheaterId' has a wrong offset!");
static_assert(offsetof(FFortAvailableTheaterMissions, AvailableMissions) == 0x00000C, "Member 'FFortAvailableTheaterMissions::AvailableMissions' has a wrong offset!");
static_assert(offsetof(FFortAvailableTheaterMissions, NextRefresh) == 0x000018, "Member 'FFortAvailableTheaterMissions::NextRefresh' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterSpawnGroupCapsProfile
// 0x0024 (0x0024 - 0x0000)
struct FFortAIEncounterSpawnGroupCapsProfile final
{
public:
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterSpawnGroupCapsCategory> PopulationCategories;                              // 0x0018(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterSpawnGroupCapsProfile) == 0x000004, "Wrong alignment on FFortAIEncounterSpawnGroupCapsProfile");
static_assert(sizeof(FFortAIEncounterSpawnGroupCapsProfile) == 0x000024, "Wrong size on FFortAIEncounterSpawnGroupCapsProfile");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsProfile, EncounterTypeTags) == 0x000000, "Member 'FFortAIEncounterSpawnGroupCapsProfile::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnGroupCapsProfile, PopulationCategories) == 0x000018, "Member 'FFortAIEncounterSpawnGroupCapsProfile::PopulationCategories' has a wrong offset!");

// ScriptStruct FortniteGame.FortActiveTheaterInfo
// 0x0018 (0x0018 - 0x0000)
struct FFortActiveTheaterInfo final
{
public:
	TArray<struct FFortTheaterMapData>            Theaters;                                          // 0x0000(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAvailableTheaterMissions>  Missions;                                          // 0x000C(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortActiveTheaterInfo) == 0x000004, "Wrong alignment on FFortActiveTheaterInfo");
static_assert(sizeof(FFortActiveTheaterInfo) == 0x000018, "Wrong size on FFortActiveTheaterInfo");
static_assert(offsetof(FFortActiveTheaterInfo, Theaters) == 0x000000, "Member 'FFortActiveTheaterInfo::Theaters' has a wrong offset!");
static_assert(offsetof(FFortActiveTheaterInfo, Missions) == 0x00000C, "Member 'FFortActiveTheaterInfo::Missions' has a wrong offset!");

// ScriptStruct FortniteGame.FortWorldData
// 0x0084 (0x0084 - 0x0000)
struct FFortWorldData final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerName;                                         // 0x000C(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       OwnerId;                                           // 0x0018(0x0008)(NativeAccessSpecifierPublic)
	class FString                                 WUID;                                              // 0x0020(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastPlayedStr;                                     // 0x002C(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LastPlayedDisplayStr;                              // 0x0038(0x000C)(NativeAccessSpecifierPublic)
	EFortWorldPrivacy                             Privacy;                                           // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3F];                                      // 0x0045(0x003F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWorldData) == 0x000004, "Wrong alignment on FFortWorldData");
static_assert(sizeof(FFortWorldData) == 0x000084, "Wrong size on FFortWorldData");
static_assert(offsetof(FFortWorldData, DisplayName) == 0x000000, "Member 'FFortWorldData::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortWorldData, OwnerName) == 0x00000C, "Member 'FFortWorldData::OwnerName' has a wrong offset!");
static_assert(offsetof(FFortWorldData, OwnerId) == 0x000018, "Member 'FFortWorldData::OwnerId' has a wrong offset!");
static_assert(offsetof(FFortWorldData, WUID) == 0x000020, "Member 'FFortWorldData::WUID' has a wrong offset!");
static_assert(offsetof(FFortWorldData, LastPlayedStr) == 0x00002C, "Member 'FFortWorldData::LastPlayedStr' has a wrong offset!");
static_assert(offsetof(FFortWorldData, LastPlayedDisplayStr) == 0x000038, "Member 'FFortWorldData::LastPlayedDisplayStr' has a wrong offset!");
static_assert(offsetof(FFortWorldData, Privacy) == 0x000044, "Member 'FFortWorldData::Privacy' has a wrong offset!");

// ScriptStruct FortniteGame.FortClusterInfoRecord
// 0x001C (0x001C - 0x0000)
struct FFortClusterInfoRecord final
{
public:
	struct FFortHexMapCoord                       MapCoord;                                          // 0x0000(0x000C)(NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x000C(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClusterIndex;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortClusterInfoRecord) == 0x000004, "Wrong alignment on FFortClusterInfoRecord");
static_assert(sizeof(FFortClusterInfoRecord) == 0x00001C, "Wrong size on FFortClusterInfoRecord");
static_assert(offsetof(FFortClusterInfoRecord, MapCoord) == 0x000000, "Member 'FFortClusterInfoRecord::MapCoord' has a wrong offset!");
static_assert(offsetof(FFortClusterInfoRecord, Name) == 0x00000C, "Member 'FFortClusterInfoRecord::Name' has a wrong offset!");
static_assert(offsetof(FFortClusterInfoRecord, ClusterIndex) == 0x000018, "Member 'FFortClusterInfoRecord::ClusterIndex' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingLevelActiveCriteriaProgress
// 0x000C (0x000C - 0x0000)
struct FStrategicBuildingLevelActiveCriteriaProgress final
{
public:
	float                                         CurrentProgress;                                   // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxProgress;                                       // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bProgressAllowed : 1;                              // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, NativeAccessSpecifierPrivate))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStrategicBuildingLevelActiveCriteriaProgress) == 0x000004, "Wrong alignment on FStrategicBuildingLevelActiveCriteriaProgress");
static_assert(sizeof(FStrategicBuildingLevelActiveCriteriaProgress) == 0x00000C, "Wrong size on FStrategicBuildingLevelActiveCriteriaProgress");
static_assert(offsetof(FStrategicBuildingLevelActiveCriteriaProgress, CurrentProgress) == 0x000000, "Member 'FStrategicBuildingLevelActiveCriteriaProgress::CurrentProgress' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelActiveCriteriaProgress, MaxProgress) == 0x000004, "Member 'FStrategicBuildingLevelActiveCriteriaProgress::MaxProgress' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerStatsRecord
// 0x0084 (0x0084 - 0x0000)
struct FPlayerStatsRecord final
{
public:
	int32                                         Stats[0x21];                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerStatsRecord) == 0x000004, "Wrong alignment on FPlayerStatsRecord");
static_assert(sizeof(FPlayerStatsRecord) == 0x000084, "Wrong size on FPlayerStatsRecord");
static_assert(offsetof(FPlayerStatsRecord, Stats) == 0x000000, "Member 'FPlayerStatsRecord::Stats' has a wrong offset!");

// ScriptStruct FortniteGame.FortZoneInfoRecord
// 0x0020 (0x0020 - 0x0000)
struct FFortZoneInfoRecord final
{
public:
	int32                                         ZoneIndex;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SaveArchiveNumber;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZoneFilename;                                      // 0x0008(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlayerStatsRecord>             PlayerStatsData;                                   // 0x0014(0x000C)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortZoneInfoRecord) == 0x000004, "Wrong alignment on FFortZoneInfoRecord");
static_assert(sizeof(FFortZoneInfoRecord) == 0x000020, "Wrong size on FFortZoneInfoRecord");
static_assert(offsetof(FFortZoneInfoRecord, ZoneIndex) == 0x000000, "Member 'FFortZoneInfoRecord::ZoneIndex' has a wrong offset!");
static_assert(offsetof(FFortZoneInfoRecord, SaveArchiveNumber) == 0x000004, "Member 'FFortZoneInfoRecord::SaveArchiveNumber' has a wrong offset!");
static_assert(offsetof(FFortZoneInfoRecord, ZoneFilename) == 0x000008, "Member 'FFortZoneInfoRecord::ZoneFilename' has a wrong offset!");
static_assert(offsetof(FFortZoneInfoRecord, PlayerStatsData) == 0x000014, "Member 'FFortZoneInfoRecord::PlayerStatsData' has a wrong offset!");

// ScriptStruct FortniteGame.CloudColorState
// 0x0050 (0x0050 - 0x0000)
struct FCloudColorState final
{
public:
	struct FLinearColor                           BottomEmissive;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           TopEmissive;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           BottomLightning;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           TopLightning;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           InternalColor;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCloudColorState) == 0x000004, "Wrong alignment on FCloudColorState");
static_assert(sizeof(FCloudColorState) == 0x000050, "Wrong size on FCloudColorState");
static_assert(offsetof(FCloudColorState, BottomEmissive) == 0x000000, "Member 'FCloudColorState::BottomEmissive' has a wrong offset!");
static_assert(offsetof(FCloudColorState, TopEmissive) == 0x000010, "Member 'FCloudColorState::TopEmissive' has a wrong offset!");
static_assert(offsetof(FCloudColorState, BottomLightning) == 0x000020, "Member 'FCloudColorState::BottomLightning' has a wrong offset!");
static_assert(offsetof(FCloudColorState, TopLightning) == 0x000030, "Member 'FCloudColorState::TopLightning' has a wrong offset!");
static_assert(offsetof(FCloudColorState, InternalColor) == 0x000040, "Member 'FCloudColorState::InternalColor' has a wrong offset!");

// ScriptStruct FortniteGame.ThreatCloudValues
// 0x00A0 (0x00A0 - 0x0000)
struct FThreatCloudValues final
{
public:
	struct FCloudColorState                       CloudActivated;                                    // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCloudColorState                       CloudDeactivated;                                  // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreatCloudValues) == 0x000004, "Wrong alignment on FThreatCloudValues");
static_assert(sizeof(FThreatCloudValues) == 0x0000A0, "Wrong size on FThreatCloudValues");
static_assert(offsetof(FThreatCloudValues, CloudActivated) == 0x000000, "Member 'FThreatCloudValues::CloudActivated' has a wrong offset!");
static_assert(offsetof(FThreatCloudValues, CloudDeactivated) == 0x000050, "Member 'FThreatCloudValues::CloudDeactivated' has a wrong offset!");

// ScriptStruct FortniteGame.StatRecord
// 0x000C (0x000C - 0x0000)
struct FStatRecord final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatRecord) == 0x000004, "Wrong alignment on FStatRecord");
static_assert(sizeof(FStatRecord) == 0x00000C, "Wrong size on FStatRecord");
static_assert(offsetof(FStatRecord, StatName) == 0x000000, "Member 'FStatRecord::StatName' has a wrong offset!");
static_assert(offsetof(FStatRecord, StatValue) == 0x000008, "Member 'FStatRecord::StatValue' has a wrong offset!");

// ScriptStruct FortniteGame.StatManagerPeriodRecord
// 0x000C (0x000C - 0x0000)
struct FStatManagerPeriodRecord final
{
public:
	TArray<struct FStatRecord>                    StatRecords;                                       // 0x0000(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatManagerPeriodRecord) == 0x000004, "Wrong alignment on FStatManagerPeriodRecord");
static_assert(sizeof(FStatManagerPeriodRecord) == 0x00000C, "Wrong size on FStatManagerPeriodRecord");
static_assert(offsetof(FStatManagerPeriodRecord, StatRecords) == 0x000000, "Member 'FStatManagerPeriodRecord::StatRecords' has a wrong offset!");

// ScriptStruct FortniteGame.PinnedSchematicsRecord
// 0x000C (0x000C - 0x0000)
struct FPinnedSchematicsRecord final
{
public:
	TArray<class FString>                         PinnedSchematicInstances;                          // 0x0000(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPinnedSchematicsRecord) == 0x000004, "Wrong alignment on FPinnedSchematicsRecord");
static_assert(sizeof(FPinnedSchematicsRecord) == 0x00000C, "Wrong size on FPinnedSchematicsRecord");
static_assert(offsetof(FPinnedSchematicsRecord, PinnedSchematicInstances) == 0x000000, "Member 'FPinnedSchematicsRecord::PinnedSchematicInstances' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerRecord
// 0x0104 (0x0104 - 0x0000)
struct FFortPlayerRecord final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UniqueId;                                          // 0x000C(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 BackpackData;                                      // 0x0018(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bPlayerIsNew;                                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerStatsRecord                     PlayerStatsData;                                   // 0x0028(0x0084)(NativeAccessSpecifierPublic)
	struct FStatManagerPeriodRecord               CampaignPeriodRecord;                              // 0x00AC(0x000C)(NativeAccessSpecifierPublic)
	struct FPinnedSchematicsRecord                PinnedSchematicsRecord;                            // 0x00B8(0x000C)(NativeAccessSpecifierPublic)
	struct FQuickBar                              PrimaryQuickBarRecord;                             // 0x00C4(0x0020)(NativeAccessSpecifierPublic)
	struct FQuickBar                              SecondaryQuickBarRecord;                           // 0x00E4(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerRecord) == 0x000004, "Wrong alignment on FFortPlayerRecord");
static_assert(sizeof(FFortPlayerRecord) == 0x000104, "Wrong size on FFortPlayerRecord");
static_assert(offsetof(FFortPlayerRecord, DisplayName) == 0x000000, "Member 'FFortPlayerRecord::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, UniqueId) == 0x00000C, "Member 'FFortPlayerRecord::UniqueId' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, BackpackData) == 0x000018, "Member 'FFortPlayerRecord::BackpackData' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, bPlayerIsNew) == 0x000024, "Member 'FFortPlayerRecord::bPlayerIsNew' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, PlayerStatsData) == 0x000028, "Member 'FFortPlayerRecord::PlayerStatsData' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, CampaignPeriodRecord) == 0x0000AC, "Member 'FFortPlayerRecord::CampaignPeriodRecord' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, PinnedSchematicsRecord) == 0x0000B8, "Member 'FFortPlayerRecord::PinnedSchematicsRecord' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, PrimaryQuickBarRecord) == 0x0000C4, "Member 'FFortPlayerRecord::PrimaryQuickBarRecord' has a wrong offset!");
static_assert(offsetof(FFortPlayerRecord, SecondaryQuickBarRecord) == 0x0000E4, "Member 'FFortPlayerRecord::SecondaryQuickBarRecord' has a wrong offset!");

// ScriptStruct FortniteGame.FortEventNotification
// 0x004C (0x004C - 0x0000)
struct FFortEventNotification final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEventNotificationPriority                NotificationPriority;                              // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AFortClientNotification>    NotificationClass;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NotificationTitleText;                             // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   NotificationText;                                  // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   InputText;                                         // 0x0028(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   NotificationActionName;                            // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEventNotificationParameter               NotificationParamType;                             // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NotificationDuration;                              // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             OptionalNotificationIcon;                          // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             OptionalNotificationSound;                         // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEventNotification) == 0x000004, "Wrong alignment on FFortEventNotification");
static_assert(sizeof(FFortEventNotification) == 0x00004C, "Wrong size on FFortEventNotification");
static_assert(offsetof(FFortEventNotification, Name) == 0x000000, "Member 'FFortEventNotification::Name' has a wrong offset!");
static_assert(offsetof(FFortEventNotification, NotificationPriority) == 0x000008, "Member 'FFortEventNotification::NotificationPriority' has a wrong offset!");
static_assert(offsetof(FFortEventNotification, NotificationClass) == 0x00000C, "Member 'FFortEventNotification::NotificationClass' has a wrong offset!");
static_assert(offsetof(FFortEventNotification, NotificationTitleText) == 0x000010, "Member 'FFortEventNotification::NotificationTitleText' has a wrong offset!");
static_assert(offsetof(FFortEventNotification, NotificationText) == 0x00001C, "Member 'FFortEventNotification::NotificationText' has a wrong offset!");
static_assert(offsetof(FFortEventNotification, InputText) == 0x000028, "Member 'FFortEventNotification::InputText' has a wrong offset!");
static_assert(offsetof(FFortEventNotification, NotificationActionName) == 0x000034, "Member 'FFortEventNotification::NotificationActionName' has a wrong offset!");
static_assert(offsetof(FFortEventNotification, NotificationParamType) == 0x00003C, "Member 'FFortEventNotification::NotificationParamType' has a wrong offset!");
static_assert(offsetof(FFortEventNotification, NotificationDuration) == 0x000040, "Member 'FFortEventNotification::NotificationDuration' has a wrong offset!");
static_assert(offsetof(FFortEventNotification, OptionalNotificationIcon) == 0x000044, "Member 'FFortEventNotification::OptionalNotificationIcon' has a wrong offset!");
static_assert(offsetof(FFortEventNotification, OptionalNotificationSound) == 0x000048, "Member 'FFortEventNotification::OptionalNotificationSound' has a wrong offset!");

// ScriptStruct FortniteGame.AIDiscouragedGoalTimer
// 0x0024 (0x0024 - 0x0000)
struct FAIDiscouragedGoalTimer final
{
public:
	struct FFortAIGoalInfo                        DiscouragedGoalInfo;                               // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	double                                        ExpirationTime;                                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumberOfTimesMarkedForDiscouragement;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIDiscouragedGoalTimer) == 0x000004, "Wrong alignment on FAIDiscouragedGoalTimer");
static_assert(sizeof(FAIDiscouragedGoalTimer) == 0x000024, "Wrong size on FAIDiscouragedGoalTimer");
static_assert(offsetof(FAIDiscouragedGoalTimer, DiscouragedGoalInfo) == 0x000000, "Member 'FAIDiscouragedGoalTimer::DiscouragedGoalInfo' has a wrong offset!");
static_assert(offsetof(FAIDiscouragedGoalTimer, ExpirationTime) == 0x000018, "Member 'FAIDiscouragedGoalTimer::ExpirationTime' has a wrong offset!");
static_assert(offsetof(FAIDiscouragedGoalTimer, NumberOfTimesMarkedForDiscouragement) == 0x000020, "Member 'FAIDiscouragedGoalTimer::NumberOfTimesMarkedForDiscouragement' has a wrong offset!");

// ScriptStruct FortniteGame.FortCachedMatchmakingSearchParams
// 0x006C (0x006C - 0x0000)
struct FFortCachedMatchmakingSearchParams final
{
public:
	EFortMatchmakingType                          MatchmakingType;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchmakingParams                     MatchmakingParams;                                 // 0x0004(0x0064)(NativeAccessSpecifierPrivate)
	bool                                          bValid;                                            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCachedMatchmakingSearchParams) == 0x000004, "Wrong alignment on FFortCachedMatchmakingSearchParams");
static_assert(sizeof(FFortCachedMatchmakingSearchParams) == 0x00006C, "Wrong size on FFortCachedMatchmakingSearchParams");
static_assert(offsetof(FFortCachedMatchmakingSearchParams, MatchmakingType) == 0x000000, "Member 'FFortCachedMatchmakingSearchParams::MatchmakingType' has a wrong offset!");
static_assert(offsetof(FFortCachedMatchmakingSearchParams, MatchmakingParams) == 0x000004, "Member 'FFortCachedMatchmakingSearchParams::MatchmakingParams' has a wrong offset!");
static_assert(offsetof(FFortCachedMatchmakingSearchParams, bValid) == 0x000068, "Member 'FFortCachedMatchmakingSearchParams::bValid' has a wrong offset!");

// ScriptStruct FortniteGame.FortBaseWeaponStats
// 0x00EC (0x00EC - 0x0000)
struct FFortBaseWeaponStats : public FTableRowBase
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BaseLevel;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgPB;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgMid;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgLong;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgMaxRange;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgPB;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgMid;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgLong;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgMaxRange;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RngPB;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RngMid;                                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RngLong;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RngMax;                                            // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            DmgScaleTable;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DmgScaleTableRow;                                  // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DmgScale;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            EnvDmgScaleTable;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   EnvDmgScaleTableRow;                               // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EnvDmgScale;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SurfaceRatioRowName;                               // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageZone_Light;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageZone_Normal;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageZone_Critical;                               // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageZone_Vulnerability;                          // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KnockbackMagnitude;                                // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MidRangeKnockbackMagnitude;                        // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LongRangeKnockbackMagnitude;                       // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KnockbackZAngle;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ControlStrength;                                   // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MidRangeControlStrength;                           // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LongRangeControlStrength;                          // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StunTime;                                          // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StunScale;                                         // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             Durability;                                        // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DurabilityRowName;                                 // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DurabilityScale;                                   // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DurabilityPerUse;                                  // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DurabilityChance;                                  // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DiceCritChance;                                    // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DiceCritDamageMultiplier;                          // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ReloadTime;                                        // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ReloadScale;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReloadIndividualBullets;                          // 0x00BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClipSize;                                          // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ClipScale;                                         // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InitialClips;                                      // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CartridgePerFire;                                  // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AmmoCostPerFire;                                   // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxAmmoCostPerFire;                                // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinChargeTime;                                     // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxChargeTime;                                     // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ChargeDownTime;                                    // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinChargeDamageMultiplier;                         // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxChargeDamageMultiplier;                         // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortBaseWeaponStats) == 0x000004, "Wrong alignment on FFortBaseWeaponStats");
static_assert(sizeof(FFortBaseWeaponStats) == 0x0000EC, "Wrong size on FFortBaseWeaponStats");
static_assert(offsetof(FFortBaseWeaponStats, BaseLevel) == 0x000004, "Member 'FFortBaseWeaponStats::BaseLevel' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgPB) == 0x000008, "Member 'FFortBaseWeaponStats::DmgPB' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgMid) == 0x00000C, "Member 'FFortBaseWeaponStats::DmgMid' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgLong) == 0x000010, "Member 'FFortBaseWeaponStats::DmgLong' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgMaxRange) == 0x000014, "Member 'FFortBaseWeaponStats::DmgMaxRange' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgPB) == 0x000018, "Member 'FFortBaseWeaponStats::EnvDmgPB' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgMid) == 0x00001C, "Member 'FFortBaseWeaponStats::EnvDmgMid' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgLong) == 0x000020, "Member 'FFortBaseWeaponStats::EnvDmgLong' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgMaxRange) == 0x000024, "Member 'FFortBaseWeaponStats::EnvDmgMaxRange' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, RngPB) == 0x000028, "Member 'FFortBaseWeaponStats::RngPB' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, RngMid) == 0x00002C, "Member 'FFortBaseWeaponStats::RngMid' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, RngLong) == 0x000030, "Member 'FFortBaseWeaponStats::RngLong' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, RngMax) == 0x000034, "Member 'FFortBaseWeaponStats::RngMax' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgScaleTable) == 0x000038, "Member 'FFortBaseWeaponStats::DmgScaleTable' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgScaleTableRow) == 0x00003C, "Member 'FFortBaseWeaponStats::DmgScaleTableRow' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DmgScale) == 0x000044, "Member 'FFortBaseWeaponStats::DmgScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgScaleTable) == 0x000048, "Member 'FFortBaseWeaponStats::EnvDmgScaleTable' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgScaleTableRow) == 0x00004C, "Member 'FFortBaseWeaponStats::EnvDmgScaleTableRow' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, EnvDmgScale) == 0x000054, "Member 'FFortBaseWeaponStats::EnvDmgScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, SurfaceRatioRowName) == 0x000058, "Member 'FFortBaseWeaponStats::SurfaceRatioRowName' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DamageZone_Light) == 0x000060, "Member 'FFortBaseWeaponStats::DamageZone_Light' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DamageZone_Normal) == 0x000064, "Member 'FFortBaseWeaponStats::DamageZone_Normal' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DamageZone_Critical) == 0x000068, "Member 'FFortBaseWeaponStats::DamageZone_Critical' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DamageZone_Vulnerability) == 0x00006C, "Member 'FFortBaseWeaponStats::DamageZone_Vulnerability' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, KnockbackMagnitude) == 0x000070, "Member 'FFortBaseWeaponStats::KnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MidRangeKnockbackMagnitude) == 0x000074, "Member 'FFortBaseWeaponStats::MidRangeKnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, LongRangeKnockbackMagnitude) == 0x000078, "Member 'FFortBaseWeaponStats::LongRangeKnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, KnockbackZAngle) == 0x00007C, "Member 'FFortBaseWeaponStats::KnockbackZAngle' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ControlStrength) == 0x000080, "Member 'FFortBaseWeaponStats::ControlStrength' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MidRangeControlStrength) == 0x000084, "Member 'FFortBaseWeaponStats::MidRangeControlStrength' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, LongRangeControlStrength) == 0x000088, "Member 'FFortBaseWeaponStats::LongRangeControlStrength' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, StunTime) == 0x00008C, "Member 'FFortBaseWeaponStats::StunTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, StunScale) == 0x000090, "Member 'FFortBaseWeaponStats::StunScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, Durability) == 0x000094, "Member 'FFortBaseWeaponStats::Durability' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DurabilityRowName) == 0x000098, "Member 'FFortBaseWeaponStats::DurabilityRowName' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DurabilityScale) == 0x0000A0, "Member 'FFortBaseWeaponStats::DurabilityScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DurabilityPerUse) == 0x0000A4, "Member 'FFortBaseWeaponStats::DurabilityPerUse' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DurabilityChance) == 0x0000A8, "Member 'FFortBaseWeaponStats::DurabilityChance' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DiceCritChance) == 0x0000AC, "Member 'FFortBaseWeaponStats::DiceCritChance' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, DiceCritDamageMultiplier) == 0x0000B0, "Member 'FFortBaseWeaponStats::DiceCritDamageMultiplier' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ReloadTime) == 0x0000B4, "Member 'FFortBaseWeaponStats::ReloadTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ReloadScale) == 0x0000B8, "Member 'FFortBaseWeaponStats::ReloadScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, bReloadIndividualBullets) == 0x0000BC, "Member 'FFortBaseWeaponStats::bReloadIndividualBullets' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ClipSize) == 0x0000C0, "Member 'FFortBaseWeaponStats::ClipSize' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ClipScale) == 0x0000C4, "Member 'FFortBaseWeaponStats::ClipScale' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, InitialClips) == 0x0000C8, "Member 'FFortBaseWeaponStats::InitialClips' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, CartridgePerFire) == 0x0000CC, "Member 'FFortBaseWeaponStats::CartridgePerFire' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, AmmoCostPerFire) == 0x0000D0, "Member 'FFortBaseWeaponStats::AmmoCostPerFire' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MaxAmmoCostPerFire) == 0x0000D4, "Member 'FFortBaseWeaponStats::MaxAmmoCostPerFire' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MinChargeTime) == 0x0000D8, "Member 'FFortBaseWeaponStats::MinChargeTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MaxChargeTime) == 0x0000DC, "Member 'FFortBaseWeaponStats::MaxChargeTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, ChargeDownTime) == 0x0000E0, "Member 'FFortBaseWeaponStats::ChargeDownTime' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MinChargeDamageMultiplier) == 0x0000E4, "Member 'FFortBaseWeaponStats::MinChargeDamageMultiplier' has a wrong offset!");
static_assert(offsetof(FFortBaseWeaponStats, MaxChargeDamageMultiplier) == 0x0000E8, "Member 'FFortBaseWeaponStats::MaxChargeDamageMultiplier' has a wrong offset!");

// ScriptStruct FortniteGame.FortLinearSpline
// 0x0001 (0x0001 - 0x0000)
struct FFortLinearSpline final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLinearSpline) == 0x000001, "Wrong alignment on FFortLinearSpline");
static_assert(sizeof(FFortLinearSpline) == 0x000001, "Wrong size on FFortLinearSpline");

// ScriptStruct FortniteGame.ConnectivityCube
// 0x00A8 (0x00A8 - 0x0000)
struct alignas(0x04) FConnectivityCube final
{
public:
	uint8                                         Pad_0[0xA8];                                       // 0x0000(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConnectivityCube) == 0x000004, "Wrong alignment on FConnectivityCube");
static_assert(sizeof(FConnectivityCube) == 0x0000A8, "Wrong size on FConnectivityCube");

// ScriptStruct FortniteGame.FortSplineBase
// 0x000C (0x000C - 0x0000)
struct FFortSplineBase
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Duration;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortSplineBase) == 0x000004, "Wrong alignment on FFortSplineBase");
static_assert(sizeof(FFortSplineBase) == 0x00000C, "Wrong size on FFortSplineBase");
static_assert(offsetof(FFortSplineBase, StartTime) == 0x000004, "Member 'FFortSplineBase::StartTime' has a wrong offset!");
static_assert(offsetof(FFortSplineBase, Duration) == 0x000008, "Member 'FFortSplineBase::Duration' has a wrong offset!");

// ScriptStruct FortniteGame.FortCatmullRomSpline
// 0x000C (0x0018 - 0x000C)
struct FFortCatmullRomSpline final : public FFortSplineBase
{
public:
	TArray<struct FVector>                        ControlPoints;                                     // 0x000C(0x000C)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortCatmullRomSpline) == 0x000004, "Wrong alignment on FFortCatmullRomSpline");
static_assert(sizeof(FFortCatmullRomSpline) == 0x000018, "Wrong size on FFortCatmullRomSpline");
static_assert(offsetof(FFortCatmullRomSpline, ControlPoints) == 0x00000C, "Member 'FFortCatmullRomSpline::ControlPoints' has a wrong offset!");

// ScriptStruct FortniteGame.IntensityContribution
// 0x0034 (0x0034 - 0x0000)
struct FIntensityContribution final
{
public:
	EFortCombatFactors                            CombatFactor;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorFactor                         ContributingAIDirectorFactor;                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxContribution;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyContributionByCompletionPercentage;         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   CompletionPercentageInitialMultiplier;             // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   CompletionPercentageToStartReducingMultiplier;     // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   CompletionPercentageToStopReducingMultiplier;      // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bModifyByNumberOfCriticalEncounterGoals;           // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIntensityContribution) == 0x000004, "Wrong alignment on FIntensityContribution");
static_assert(sizeof(FIntensityContribution) == 0x000034, "Wrong size on FIntensityContribution");
static_assert(offsetof(FIntensityContribution, CombatFactor) == 0x000000, "Member 'FIntensityContribution::CombatFactor' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, ContributingAIDirectorFactor) == 0x000001, "Member 'FIntensityContribution::ContributingAIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, MaxContribution) == 0x000004, "Member 'FIntensityContribution::MaxContribution' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, bModifyContributionByCompletionPercentage) == 0x000008, "Member 'FIntensityContribution::bModifyContributionByCompletionPercentage' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, CompletionPercentageInitialMultiplier) == 0x00000C, "Member 'FIntensityContribution::CompletionPercentageInitialMultiplier' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, CompletionPercentageToStartReducingMultiplier) == 0x000018, "Member 'FIntensityContribution::CompletionPercentageToStartReducingMultiplier' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, CompletionPercentageToStopReducingMultiplier) == 0x000024, "Member 'FIntensityContribution::CompletionPercentageToStopReducingMultiplier' has a wrong offset!");
static_assert(offsetof(FIntensityContribution, bModifyByNumberOfCriticalEncounterGoals) == 0x000030, "Member 'FIntensityContribution::bModifyByNumberOfCriticalEncounterGoals' has a wrong offset!");

// ScriptStruct FortniteGame.InteractContextInfo
// 0x0040 (0x0040 - 0x0000)
struct FInteractContextInfo final
{
public:
	class FText                                   ContextText;                                       // 0x0000(0x000C)(NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  ReceivingActor;                                    // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPrimitiveComponent>     InteractComponent;                                 // 0x0014(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FVector                                InteractPoint;                                     // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bCurrentlyDisplayed : 1;                           // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bUseInteractComponentForUI : 1;                    // 0x0028(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RequiredDuration;                                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractContextInfo) == 0x000004, "Wrong alignment on FInteractContextInfo");
static_assert(sizeof(FInteractContextInfo) == 0x000040, "Wrong size on FInteractContextInfo");
static_assert(offsetof(FInteractContextInfo, ContextText) == 0x000000, "Member 'FInteractContextInfo::ContextText' has a wrong offset!");
static_assert(offsetof(FInteractContextInfo, ReceivingActor) == 0x00000C, "Member 'FInteractContextInfo::ReceivingActor' has a wrong offset!");
static_assert(offsetof(FInteractContextInfo, InteractComponent) == 0x000014, "Member 'FInteractContextInfo::InteractComponent' has a wrong offset!");
static_assert(offsetof(FInteractContextInfo, InteractPoint) == 0x00001C, "Member 'FInteractContextInfo::InteractPoint' has a wrong offset!");
static_assert(offsetof(FInteractContextInfo, RequiredDuration) == 0x00002C, "Member 'FInteractContextInfo::RequiredDuration' has a wrong offset!");
static_assert(offsetof(FInteractContextInfo, TextColor) == 0x000030, "Member 'FInteractContextInfo::TextColor' has a wrong offset!");

// ScriptStruct FortniteGame.InteractionType
// 0x0020 (0x0020 - 0x0000)
struct FInteractionType final
{
public:
	ETInteractionType                             InteractionType;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AFortPlayerPawn>         RequestingPawn;                                    // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPrimitiveComponent>     InteractComponent;                                 // 0x000C(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FVector                                InteractPoint;                                     // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionType) == 0x000004, "Wrong alignment on FInteractionType");
static_assert(sizeof(FInteractionType) == 0x000020, "Wrong size on FInteractionType");
static_assert(offsetof(FInteractionType, InteractionType) == 0x000000, "Member 'FInteractionType::InteractionType' has a wrong offset!");
static_assert(offsetof(FInteractionType, RequestingPawn) == 0x000004, "Member 'FInteractionType::RequestingPawn' has a wrong offset!");
static_assert(offsetof(FInteractionType, InteractComponent) == 0x00000C, "Member 'FInteractionType::InteractComponent' has a wrong offset!");
static_assert(offsetof(FInteractionType, InteractPoint) == 0x000014, "Member 'FInteractionType::InteractPoint' has a wrong offset!");

// ScriptStruct FortniteGame.FortPickupLocationData
// 0x0044 (0x0044 - 0x0000)
struct FFortPickupLocationData final
{
public:
	class AFortPlayerPawn*                        PickupTarget;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPickup*                            CombineTarget;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ItemOwner;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  LootInitialPosition;                               // 0x000C(0x000C)(NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  LootFinalPosition;                                 // 0x0018(0x000C)(NativeAccessSpecifierPublic)
	float                                         FlyTime;                                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              StartDirection;                                    // 0x0028(0x000C)(NativeAccessSpecifierPublic)
	struct FGuid                                  PickupGuid;                                        // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortPickupLocationData) == 0x000004, "Wrong alignment on FFortPickupLocationData");
static_assert(sizeof(FFortPickupLocationData) == 0x000044, "Wrong size on FFortPickupLocationData");
static_assert(offsetof(FFortPickupLocationData, PickupTarget) == 0x000000, "Member 'FFortPickupLocationData::PickupTarget' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, CombineTarget) == 0x000004, "Member 'FFortPickupLocationData::CombineTarget' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, ItemOwner) == 0x000008, "Member 'FFortPickupLocationData::ItemOwner' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, LootInitialPosition) == 0x00000C, "Member 'FFortPickupLocationData::LootInitialPosition' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, LootFinalPosition) == 0x000018, "Member 'FFortPickupLocationData::LootFinalPosition' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, FlyTime) == 0x000024, "Member 'FFortPickupLocationData::FlyTime' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, StartDirection) == 0x000028, "Member 'FFortPickupLocationData::StartDirection' has a wrong offset!");
static_assert(offsetof(FFortPickupLocationData, PickupGuid) == 0x000034, "Member 'FFortPickupLocationData::PickupGuid' has a wrong offset!");

// ScriptStruct FortniteGame.FortFeedbackEvent
// 0x001C (0x001C - 0x0000)
struct FFortFeedbackEvent final
{
public:
	class AFortPawn*                              Instigator;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPawn*                              Recipient;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortFeedbackHandle                    Handle;                                            // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFeedbackEvent) == 0x000004, "Wrong alignment on FFortFeedbackEvent");
static_assert(sizeof(FFortFeedbackEvent) == 0x00001C, "Wrong size on FFortFeedbackEvent");
static_assert(offsetof(FFortFeedbackEvent, Instigator) == 0x000000, "Member 'FFortFeedbackEvent::Instigator' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEvent, Recipient) == 0x000004, "Member 'FFortFeedbackEvent::Recipient' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEvent, Handle) == 0x000008, "Member 'FFortFeedbackEvent::Handle' has a wrong offset!");
static_assert(offsetof(FFortFeedbackEvent, Delay) == 0x000018, "Member 'FFortFeedbackEvent::Delay' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnAIRequest
// 0x0040 (0x0040 - 0x0000)
struct FFortSpawnAIRequest final
{
public:
	struct FGuid                                  SpawnGroupInstanceGuid;                            // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         EnemyIndex;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnPoint;                                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFortAbilitySet*>                AbilitySetsToGrantOnSpawn;                         // 0x0030(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCollisionWhenSpawning;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpawnAIRequest) == 0x000004, "Wrong alignment on FFortSpawnAIRequest");
static_assert(sizeof(FFortSpawnAIRequest) == 0x000040, "Wrong size on FFortSpawnAIRequest");
static_assert(offsetof(FFortSpawnAIRequest, SpawnGroupInstanceGuid) == 0x000000, "Member 'FFortSpawnAIRequest::SpawnGroupInstanceGuid' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, EnemyIndex) == 0x000010, "Member 'FFortSpawnAIRequest::EnemyIndex' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, SpawnLocation) == 0x000014, "Member 'FFortSpawnAIRequest::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, SpawnRotation) == 0x000020, "Member 'FFortSpawnAIRequest::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, SpawnPoint) == 0x00002C, "Member 'FFortSpawnAIRequest::SpawnPoint' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, AbilitySetsToGrantOnSpawn) == 0x000030, "Member 'FFortSpawnAIRequest::AbilitySetsToGrantOnSpawn' has a wrong offset!");
static_assert(offsetof(FFortSpawnAIRequest, bIgnoreCollisionWhenSpawning) == 0x00003C, "Member 'FFortSpawnAIRequest::bIgnoreCollisionWhenSpawning' has a wrong offset!");

// ScriptStruct FortniteGame.FortAISpawnerData
// 0x0050 (0x0050 - 0x0000)
struct FFortAISpawnerData final
{
public:
	struct FGuid                                  SpawnGroupInstanceGuid;                            // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortSpawnAIRequest                    ReservedSpawnRequest;                              // 0x0010(0x0040)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAISpawnerData) == 0x000004, "Wrong alignment on FFortAISpawnerData");
static_assert(sizeof(FFortAISpawnerData) == 0x000050, "Wrong size on FFortAISpawnerData");
static_assert(offsetof(FFortAISpawnerData, SpawnGroupInstanceGuid) == 0x000000, "Member 'FFortAISpawnerData::SpawnGroupInstanceGuid' has a wrong offset!");
static_assert(offsetof(FFortAISpawnerData, ReservedSpawnRequest) == 0x000010, "Member 'FFortAISpawnerData::ReservedSpawnRequest' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterPawnNumberCaps
// 0x0010 (0x0010 - 0x0000)
struct FFortEncounterPawnNumberCaps final
{
public:
	bool                                          bApplyPawnNumberCaps;                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCurveTableRowHandle>           PawnCapsPerPlayerCount;                            // 0x0004(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterPawnNumberCaps) == 0x000004, "Wrong alignment on FFortEncounterPawnNumberCaps");
static_assert(sizeof(FFortEncounterPawnNumberCaps) == 0x000010, "Wrong size on FFortEncounterPawnNumberCaps");
static_assert(offsetof(FFortEncounterPawnNumberCaps, bApplyPawnNumberCaps) == 0x000000, "Member 'FFortEncounterPawnNumberCaps::bApplyPawnNumberCaps' has a wrong offset!");
static_assert(offsetof(FFortEncounterPawnNumberCaps, PawnCapsPerPlayerCount) == 0x000004, "Member 'FFortEncounterPawnNumberCaps::PawnCapsPerPlayerCount' has a wrong offset!");

// ScriptStruct FortniteGame.FortPointOnCurveRange
// 0x0008 (0x0008 - 0x0000)
struct FFortPointOnCurveRange final
{
public:
	float                                         MinPercentage;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPercentage;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPointOnCurveRange) == 0x000004, "Wrong alignment on FFortPointOnCurveRange");
static_assert(sizeof(FFortPointOnCurveRange) == 0x000008, "Wrong size on FFortPointOnCurveRange");
static_assert(offsetof(FFortPointOnCurveRange, MinPercentage) == 0x000000, "Member 'FFortPointOnCurveRange::MinPercentage' has a wrong offset!");
static_assert(offsetof(FFortPointOnCurveRange, MaxPercentage) == 0x000004, "Member 'FFortPointOnCurveRange::MaxPercentage' has a wrong offset!");

// ScriptStruct FortniteGame.FortPointsOnCurve
// 0x0024 (0x0024 - 0x0000)
struct FFortPointsOnCurve final
{
public:
	TSoftObjectPtr<class UCurveFloat>             Curve;                                             // 0x0000(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortPointOnCurveRange>         RangesForPointsOnCurve;                            // 0x0018(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPointsOnCurve) == 0x000004, "Wrong alignment on FFortPointsOnCurve");
static_assert(sizeof(FFortPointsOnCurve) == 0x000024, "Wrong size on FFortPointsOnCurve");
static_assert(offsetof(FFortPointsOnCurve, Curve) == 0x000000, "Member 'FFortPointsOnCurve::Curve' has a wrong offset!");
static_assert(offsetof(FFortPointsOnCurve, RangesForPointsOnCurve) == 0x000018, "Member 'FFortPointsOnCurve::RangesForPointsOnCurve' has a wrong offset!");

// ScriptStruct FortniteGame.FortDamageSource
// 0x0010 (0x0010 - 0x0000)
struct FFortDamageSource final
{
public:
	TWeakObjectPtr<class AController>             InstigatorController;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  DamageCauser;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDamageSource) == 0x000004, "Wrong alignment on FFortDamageSource");
static_assert(sizeof(FFortDamageSource) == 0x000010, "Wrong size on FFortDamageSource");
static_assert(offsetof(FFortDamageSource, InstigatorController) == 0x000000, "Member 'FFortDamageSource::InstigatorController' has a wrong offset!");
static_assert(offsetof(FFortDamageSource, DamageCauser) == 0x000008, "Member 'FFortDamageSource::DamageCauser' has a wrong offset!");

// ScriptStruct FortniteGame.TurnFloatRange
// 0x0008 (0x0008 - 0x0000)
struct FTurnFloatRange final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTurnFloatRange) == 0x000004, "Wrong alignment on FTurnFloatRange");
static_assert(sizeof(FTurnFloatRange) == 0x000008, "Wrong size on FTurnFloatRange");
static_assert(offsetof(FTurnFloatRange, Min) == 0x000000, "Member 'FTurnFloatRange::Min' has a wrong offset!");
static_assert(offsetof(FTurnFloatRange, Max) == 0x000004, "Member 'FTurnFloatRange::Max' has a wrong offset!");

// ScriptStruct FortniteGame.FortRangedWeaponStats
// 0x008C (0x0178 - 0x00EC)
struct FFortRangedWeaponStats final : public FFortBaseWeaponStats
{
public:
	float                                         Spread;                                            // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpreadDownsights;                                  // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StandingStillSpreadMultiplier;                     // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatX1;                                            // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatY1;                                            // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatX2;                                            // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatY2;                                            // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatX3;                                            // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatY3;                                            // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatXScale;                                        // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeatYScale;                                        // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolX1;                                            // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolY1;                                            // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolX2;                                            // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolY2;                                            // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolX3;                                            // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolY3;                                            // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolXScale;                                        // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoolYScale;                                        // 0x0134(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BulletsPerCartridge;                               // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FiringRate;                                        // 0x013C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ROFScale;                                          // 0x0140(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BurstFiringRate;                                   // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilVert;                                        // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilVertScale;                                   // 0x014C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VertRecoilDownChance;                              // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilHoriz;                                       // 0x0154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilHorizScale;                                  // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilInterpSpeed;                                 // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilRecoveryInterpSpeed;                         // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilRecoveryDelay;                               // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilRecoveryFraction;                            // 0x0168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RecoilDownsightsMultiplier;                        // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSpareAmmo;                                      // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BulletsPerTracer;                                  // 0x0174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortRangedWeaponStats) == 0x000004, "Wrong alignment on FFortRangedWeaponStats");
static_assert(sizeof(FFortRangedWeaponStats) == 0x000178, "Wrong size on FFortRangedWeaponStats");
static_assert(offsetof(FFortRangedWeaponStats, Spread) == 0x0000EC, "Member 'FFortRangedWeaponStats::Spread' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, SpreadDownsights) == 0x0000F0, "Member 'FFortRangedWeaponStats::SpreadDownsights' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, StandingStillSpreadMultiplier) == 0x0000F4, "Member 'FFortRangedWeaponStats::StandingStillSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatX1) == 0x0000F8, "Member 'FFortRangedWeaponStats::HeatX1' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatY1) == 0x0000FC, "Member 'FFortRangedWeaponStats::HeatY1' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatX2) == 0x000100, "Member 'FFortRangedWeaponStats::HeatX2' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatY2) == 0x000104, "Member 'FFortRangedWeaponStats::HeatY2' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatX3) == 0x000108, "Member 'FFortRangedWeaponStats::HeatX3' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatY3) == 0x00010C, "Member 'FFortRangedWeaponStats::HeatY3' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatXScale) == 0x000110, "Member 'FFortRangedWeaponStats::HeatXScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, HeatYScale) == 0x000114, "Member 'FFortRangedWeaponStats::HeatYScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolX1) == 0x000118, "Member 'FFortRangedWeaponStats::CoolX1' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolY1) == 0x00011C, "Member 'FFortRangedWeaponStats::CoolY1' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolX2) == 0x000120, "Member 'FFortRangedWeaponStats::CoolX2' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolY2) == 0x000124, "Member 'FFortRangedWeaponStats::CoolY2' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolX3) == 0x000128, "Member 'FFortRangedWeaponStats::CoolX3' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolY3) == 0x00012C, "Member 'FFortRangedWeaponStats::CoolY3' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolXScale) == 0x000130, "Member 'FFortRangedWeaponStats::CoolXScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, CoolYScale) == 0x000134, "Member 'FFortRangedWeaponStats::CoolYScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, BulletsPerCartridge) == 0x000138, "Member 'FFortRangedWeaponStats::BulletsPerCartridge' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, FiringRate) == 0x00013C, "Member 'FFortRangedWeaponStats::FiringRate' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, ROFScale) == 0x000140, "Member 'FFortRangedWeaponStats::ROFScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, BurstFiringRate) == 0x000144, "Member 'FFortRangedWeaponStats::BurstFiringRate' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilVert) == 0x000148, "Member 'FFortRangedWeaponStats::RecoilVert' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilVertScale) == 0x00014C, "Member 'FFortRangedWeaponStats::RecoilVertScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, VertRecoilDownChance) == 0x000150, "Member 'FFortRangedWeaponStats::VertRecoilDownChance' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilHoriz) == 0x000154, "Member 'FFortRangedWeaponStats::RecoilHoriz' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilHorizScale) == 0x000158, "Member 'FFortRangedWeaponStats::RecoilHorizScale' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilInterpSpeed) == 0x00015C, "Member 'FFortRangedWeaponStats::RecoilInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilRecoveryInterpSpeed) == 0x000160, "Member 'FFortRangedWeaponStats::RecoilRecoveryInterpSpeed' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilRecoveryDelay) == 0x000164, "Member 'FFortRangedWeaponStats::RecoilRecoveryDelay' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilRecoveryFraction) == 0x000168, "Member 'FFortRangedWeaponStats::RecoilRecoveryFraction' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, RecoilDownsightsMultiplier) == 0x00016C, "Member 'FFortRangedWeaponStats::RecoilDownsightsMultiplier' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, MaxSpareAmmo) == 0x000170, "Member 'FFortRangedWeaponStats::MaxSpareAmmo' has a wrong offset!");
static_assert(offsetof(FFortRangedWeaponStats, BulletsPerTracer) == 0x000174, "Member 'FFortRangedWeaponStats::BulletsPerTracer' has a wrong offset!");

// ScriptStruct FortniteGame.AssetAttachment
// 0x001C (0x001C - 0x0000)
struct FAssetAttachment final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMeshAsset;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMeshAsset;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipOnDedicatedServers;                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkelMeshComp;                                      // 0x0014(0x0004)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   StaticMeshComp;                                    // 0x0018(0x0004)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssetAttachment) == 0x000004, "Wrong alignment on FAssetAttachment");
static_assert(sizeof(FAssetAttachment) == 0x00001C, "Wrong size on FAssetAttachment");
static_assert(offsetof(FAssetAttachment, SocketName) == 0x000000, "Member 'FAssetAttachment::SocketName' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, SkeletalMeshAsset) == 0x000008, "Member 'FAssetAttachment::SkeletalMeshAsset' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, StaticMeshAsset) == 0x00000C, "Member 'FAssetAttachment::StaticMeshAsset' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, bSkipOnDedicatedServers) == 0x000010, "Member 'FAssetAttachment::bSkipOnDedicatedServers' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, SkelMeshComp) == 0x000014, "Member 'FAssetAttachment::SkelMeshComp' has a wrong offset!");
static_assert(offsetof(FAssetAttachment, StaticMeshComp) == 0x000018, "Member 'FAssetAttachment::StaticMeshComp' has a wrong offset!");

// ScriptStruct FortniteGame.PlayerBuildableClassFilter
// 0x000C (0x000C - 0x0000)
struct FPlayerBuildableClassFilter final
{
public:
	EFortResourceType                             ResourceType;                                      // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingType                             BuildingType;                                      // 0x0001(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBuildingEditModeMetadata*              EditModeMetadata;                                  // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerBuildableClassFilter) == 0x000004, "Wrong alignment on FPlayerBuildableClassFilter");
static_assert(sizeof(FPlayerBuildableClassFilter) == 0x00000C, "Wrong size on FPlayerBuildableClassFilter");
static_assert(offsetof(FPlayerBuildableClassFilter, ResourceType) == 0x000000, "Member 'FPlayerBuildableClassFilter::ResourceType' has a wrong offset!");
static_assert(offsetof(FPlayerBuildableClassFilter, BuildingType) == 0x000001, "Member 'FPlayerBuildableClassFilter::BuildingType' has a wrong offset!");
static_assert(offsetof(FPlayerBuildableClassFilter, Level) == 0x000004, "Member 'FPlayerBuildableClassFilter::Level' has a wrong offset!");
static_assert(offsetof(FPlayerBuildableClassFilter, EditModeMetadata) == 0x000008, "Member 'FPlayerBuildableClassFilter::EditModeMetadata' has a wrong offset!");

// ScriptStruct FortniteGame.DamagerInfo
// 0x0008 (0x0008 - 0x0000)
struct FDamagerInfo final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageAmount;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamagerInfo) == 0x000004, "Wrong alignment on FDamagerInfo");
static_assert(sizeof(FDamagerInfo) == 0x000008, "Wrong size on FDamagerInfo");
static_assert(offsetof(FDamagerInfo, DamageCauser) == 0x000000, "Member 'FDamagerInfo::DamageCauser' has a wrong offset!");
static_assert(offsetof(FDamagerInfo, DamageAmount) == 0x000004, "Member 'FDamagerInfo::DamageAmount' has a wrong offset!");

// ScriptStruct FortniteGame.TileLootQuota
// 0x000C (0x000C - 0x0000)
struct FTileLootQuota : public FTableRowBase
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Quota;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTileLootQuota) == 0x000004, "Wrong alignment on FTileLootQuota");
static_assert(sizeof(FTileLootQuota) == 0x00000C, "Wrong size on FTileLootQuota");
static_assert(offsetof(FTileLootQuota, Min) == 0x000000, "Member 'FTileLootQuota::Min' has a wrong offset!");
static_assert(offsetof(FTileLootQuota, Max) == 0x000004, "Member 'FTileLootQuota::Max' has a wrong offset!");
static_assert(offsetof(FTileLootQuota, Quota) == 0x000008, "Member 'FTileLootQuota::Quota' has a wrong offset!");

// ScriptStruct FortniteGame.VisibilityTestPoint
// 0x0010 (0x0010 - 0x0000)
struct FVisibilityTestPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    Component;                                         // 0x000C(0x0004)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVisibilityTestPoint) == 0x000004, "Wrong alignment on FVisibilityTestPoint");
static_assert(sizeof(FVisibilityTestPoint) == 0x000010, "Wrong size on FVisibilityTestPoint");
static_assert(offsetof(FVisibilityTestPoint, Location) == 0x000000, "Member 'FVisibilityTestPoint::Location' has a wrong offset!");
static_assert(offsetof(FVisibilityTestPoint, Component) == 0x00000C, "Member 'FVisibilityTestPoint::Component' has a wrong offset!");

// ScriptStruct FortniteGame.CarriedObjectAttachmentInfo
// 0x0024 (0x0024 - 0x0000)
struct FCarriedObjectAttachmentInfo final
{
public:
	class AActor*                                 AttachParent;                                      // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0004(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeTranslation;                               // 0x000C(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0018(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCarriedObjectAttachmentInfo) == 0x000004, "Wrong alignment on FCarriedObjectAttachmentInfo");
static_assert(sizeof(FCarriedObjectAttachmentInfo) == 0x000024, "Wrong size on FCarriedObjectAttachmentInfo");
static_assert(offsetof(FCarriedObjectAttachmentInfo, AttachParent) == 0x000000, "Member 'FCarriedObjectAttachmentInfo::AttachParent' has a wrong offset!");
static_assert(offsetof(FCarriedObjectAttachmentInfo, SocketName) == 0x000004, "Member 'FCarriedObjectAttachmentInfo::SocketName' has a wrong offset!");
static_assert(offsetof(FCarriedObjectAttachmentInfo, RelativeTranslation) == 0x00000C, "Member 'FCarriedObjectAttachmentInfo::RelativeTranslation' has a wrong offset!");
static_assert(offsetof(FCarriedObjectAttachmentInfo, RelativeRotation) == 0x000018, "Member 'FCarriedObjectAttachmentInfo::RelativeRotation' has a wrong offset!");

// ScriptStruct FortniteGame.PermaniteBoundariesInfo
// 0x0014 (0x0014 - 0x0000)
struct FPermaniteBoundariesInfo final
{
public:
	int32                                         MaxPermaniteStructures;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPermaniteStructures;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AveragePermaniteStructureLevel;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPermaniteStructureLevel;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPermaniteStructureLevel;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPermaniteBoundariesInfo) == 0x000004, "Wrong alignment on FPermaniteBoundariesInfo");
static_assert(sizeof(FPermaniteBoundariesInfo) == 0x000014, "Wrong size on FPermaniteBoundariesInfo");
static_assert(offsetof(FPermaniteBoundariesInfo, MaxPermaniteStructures) == 0x000000, "Member 'FPermaniteBoundariesInfo::MaxPermaniteStructures' has a wrong offset!");
static_assert(offsetof(FPermaniteBoundariesInfo, TotalPermaniteStructures) == 0x000004, "Member 'FPermaniteBoundariesInfo::TotalPermaniteStructures' has a wrong offset!");
static_assert(offsetof(FPermaniteBoundariesInfo, AveragePermaniteStructureLevel) == 0x000008, "Member 'FPermaniteBoundariesInfo::AveragePermaniteStructureLevel' has a wrong offset!");
static_assert(offsetof(FPermaniteBoundariesInfo, MinPermaniteStructureLevel) == 0x00000C, "Member 'FPermaniteBoundariesInfo::MinPermaniteStructureLevel' has a wrong offset!");
static_assert(offsetof(FPermaniteBoundariesInfo, MaxPermaniteStructureLevel) == 0x000010, "Member 'FPermaniteBoundariesInfo::MaxPermaniteStructureLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnGroupEncounterTypeData
// 0x0030 (0x0030 - 0x0000)
struct FFortSpawnGroupEncounterTypeData final
{
public:
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   MaxGroupCategoryPopulationDensityCurve;            // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   RespawnDelayCurve;                                 // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSpawnGroupEncounterTypeData) == 0x000004, "Wrong alignment on FFortSpawnGroupEncounterTypeData");
static_assert(sizeof(FFortSpawnGroupEncounterTypeData) == 0x000030, "Wrong size on FFortSpawnGroupEncounterTypeData");
static_assert(offsetof(FFortSpawnGroupEncounterTypeData, EncounterTypeTags) == 0x000000, "Member 'FFortSpawnGroupEncounterTypeData::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortSpawnGroupEncounterTypeData, MaxGroupCategoryPopulationDensityCurve) == 0x000018, "Member 'FFortSpawnGroupEncounterTypeData::MaxGroupCategoryPopulationDensityCurve' has a wrong offset!");
static_assert(offsetof(FFortSpawnGroupEncounterTypeData, RespawnDelayCurve) == 0x000024, "Member 'FFortSpawnGroupEncounterTypeData::RespawnDelayCurve' has a wrong offset!");

// ScriptStruct FortniteGame.FortCharacterPartsRepMontageInfo
// 0x0014 (0x0014 - 0x0000)
struct FFortCharacterPartsRepMontageInfo final
{
public:
	TArray<struct FFortCharacterPartMontageInfo>  CharPartMontages;                                  // 0x0000(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PawnMontage;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayBit;                                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortCharacterPartsRepMontageInfo) == 0x000004, "Wrong alignment on FFortCharacterPartsRepMontageInfo");
static_assert(sizeof(FFortCharacterPartsRepMontageInfo) == 0x000014, "Wrong size on FFortCharacterPartsRepMontageInfo");
static_assert(offsetof(FFortCharacterPartsRepMontageInfo, CharPartMontages) == 0x000000, "Member 'FFortCharacterPartsRepMontageInfo::CharPartMontages' has a wrong offset!");
static_assert(offsetof(FFortCharacterPartsRepMontageInfo, PawnMontage) == 0x00000C, "Member 'FFortCharacterPartsRepMontageInfo::PawnMontage' has a wrong offset!");
static_assert(offsetof(FFortCharacterPartsRepMontageInfo, bPlayBit) == 0x000010, "Member 'FFortCharacterPartsRepMontageInfo::bPlayBit' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIDirectorFactorContribution
// 0x000C (0x000C - 0x0000)
struct FFortAIDirectorFactorContribution final
{
public:
	EFortAIDirectorEvent                          AIDirectorEvent;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxContribution;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorFactorContribution             ContributionType;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIDirectorFactorContribution) == 0x000004, "Wrong alignment on FFortAIDirectorFactorContribution");
static_assert(sizeof(FFortAIDirectorFactorContribution) == 0x00000C, "Wrong size on FFortAIDirectorFactorContribution");
static_assert(offsetof(FFortAIDirectorFactorContribution, AIDirectorEvent) == 0x000000, "Member 'FFortAIDirectorFactorContribution::AIDirectorEvent' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorContribution, MaxContribution) == 0x000004, "Member 'FFortAIDirectorFactorContribution::MaxContribution' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorContribution, ContributionType) == 0x000008, "Member 'FFortAIDirectorFactorContribution::ContributionType' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerAttributeSets
// 0x0018 (0x0018 - 0x0000)
struct FFortPlayerAttributeSets final
{
public:
	class UFortRegenHealthSet*                    HealthSet;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortDamageSet*                         DamageSet;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortMovementSet*                       MovementSet;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortConstructionSet*                   ConstructionSet;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortPlayerAttrSet*                     PlayerAttrSet;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortHomebaseSet*                       HomebaseSet;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerAttributeSets) == 0x000004, "Wrong alignment on FFortPlayerAttributeSets");
static_assert(sizeof(FFortPlayerAttributeSets) == 0x000018, "Wrong size on FFortPlayerAttributeSets");
static_assert(offsetof(FFortPlayerAttributeSets, HealthSet) == 0x000000, "Member 'FFortPlayerAttributeSets::HealthSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, DamageSet) == 0x000004, "Member 'FFortPlayerAttributeSets::DamageSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, MovementSet) == 0x000008, "Member 'FFortPlayerAttributeSets::MovementSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, ConstructionSet) == 0x00000C, "Member 'FFortPlayerAttributeSets::ConstructionSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, PlayerAttrSet) == 0x000010, "Member 'FFortPlayerAttributeSets::PlayerAttrSet' has a wrong offset!");
static_assert(offsetof(FFortPlayerAttributeSets, HomebaseSet) == 0x000014, "Member 'FFortPlayerAttributeSets::HomebaseSet' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingBonusDescription
// 0x0014 (0x0014 - 0x0000)
struct FBuildingBonusDescription final
{
public:
	int32                                         Rating;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           Descriptions;                                      // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsNew;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingBonusDescription) == 0x000004, "Wrong alignment on FBuildingBonusDescription");
static_assert(sizeof(FBuildingBonusDescription) == 0x000014, "Wrong size on FBuildingBonusDescription");
static_assert(offsetof(FBuildingBonusDescription, Rating) == 0x000000, "Member 'FBuildingBonusDescription::Rating' has a wrong offset!");
static_assert(offsetof(FBuildingBonusDescription, Descriptions) == 0x000004, "Member 'FBuildingBonusDescription::Descriptions' has a wrong offset!");
static_assert(offsetof(FBuildingBonusDescription, bIsNew) == 0x000010, "Member 'FBuildingBonusDescription::bIsNew' has a wrong offset!");

// ScriptStruct FortniteGame.FortClientNotificationData
// 0x0114 (0x0114 - 0x0000)
struct FFortClientNotificationData
{
public:
	TSubclassOf<class AFortClientNotification>    NotificationType;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            OverrideDisplayBrush;                              // 0x0004(0x0074)(NativeAccessSpecifierPublic)
	float                                         OverrideDisplayTime;                               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OverrideTitleText;                                 // 0x007C(0x000C)(NativeAccessSpecifierPublic)
	class USoundBase*                             OverrideSound;                                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaySoundAsFeedback;                              // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTreatAsUnique;                                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDestroyAfterViewing;                              // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHighPriority;                                     // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bStopViewing;                                      // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFortTextFormatData                    TextData;                                          // 0x009C(0x0054)(NativeAccessSpecifierPublic)
	bool                                          bViewedByPlayer;                                   // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFinishedViewing;                                  // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWaitForClients;                                   // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F3[0x1];                                       // 0x00F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  NotificationID;                                    // 0x00F4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortUIBypassNotification*              NotificationActor;                                 // 0x0104(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ClientFormattedOverrideText;                       // 0x0108(0x000C)(RepSkip, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortClientNotificationData) == 0x000004, "Wrong alignment on FFortClientNotificationData");
static_assert(sizeof(FFortClientNotificationData) == 0x000114, "Wrong size on FFortClientNotificationData");
static_assert(offsetof(FFortClientNotificationData, NotificationType) == 0x000000, "Member 'FFortClientNotificationData::NotificationType' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, OverrideDisplayBrush) == 0x000004, "Member 'FFortClientNotificationData::OverrideDisplayBrush' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, OverrideDisplayTime) == 0x000078, "Member 'FFortClientNotificationData::OverrideDisplayTime' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, OverrideTitleText) == 0x00007C, "Member 'FFortClientNotificationData::OverrideTitleText' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, OverrideSound) == 0x000088, "Member 'FFortClientNotificationData::OverrideSound' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, bPlaySoundAsFeedback) == 0x00008C, "Member 'FFortClientNotificationData::bPlaySoundAsFeedback' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, ActionName) == 0x000090, "Member 'FFortClientNotificationData::ActionName' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, bTreatAsUnique) == 0x000098, "Member 'FFortClientNotificationData::bTreatAsUnique' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, bDestroyAfterViewing) == 0x000099, "Member 'FFortClientNotificationData::bDestroyAfterViewing' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, bHighPriority) == 0x00009A, "Member 'FFortClientNotificationData::bHighPriority' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, bStopViewing) == 0x00009B, "Member 'FFortClientNotificationData::bStopViewing' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, TextData) == 0x00009C, "Member 'FFortClientNotificationData::TextData' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, bViewedByPlayer) == 0x0000F0, "Member 'FFortClientNotificationData::bViewedByPlayer' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, bFinishedViewing) == 0x0000F1, "Member 'FFortClientNotificationData::bFinishedViewing' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, bWaitForClients) == 0x0000F2, "Member 'FFortClientNotificationData::bWaitForClients' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, NotificationID) == 0x0000F4, "Member 'FFortClientNotificationData::NotificationID' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, NotificationActor) == 0x000104, "Member 'FFortClientNotificationData::NotificationActor' has a wrong offset!");
static_assert(offsetof(FFortClientNotificationData, ClientFormattedOverrideText) == 0x000108, "Member 'FFortClientNotificationData::ClientFormattedOverrideText' has a wrong offset!");

// ScriptStruct FortniteGame.FortTutorialNotificationData
// 0x0030 (0x0144 - 0x0114)
struct FFortTutorialNotificationData final : public FFortClientNotificationData
{
public:
	class FText                                   OverrideNameText;                                  // 0x0114(0x000C)(NativeAccessSpecifierPublic)
	class FText                                   OverrideSystemText;                                // 0x0120(0x000C)(NativeAccessSpecifierPublic)
	bool                                          bOverrideButtonEnabled;                            // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideLightboxEnabled;                          // 0x012D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideLightboxDisableInputOnly;                 // 0x012E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F[0x1];                                      // 0x012F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                OverridePadding;                                   // 0x0130(0x0010)(NativeAccessSpecifierPublic)
	EVerticalAlignment                            OverrideVAlign;                                    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          OverrideHAlign;                                    // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142[0x2];                                      // 0x0142(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTutorialNotificationData) == 0x000004, "Wrong alignment on FFortTutorialNotificationData");
static_assert(sizeof(FFortTutorialNotificationData) == 0x000144, "Wrong size on FFortTutorialNotificationData");
static_assert(offsetof(FFortTutorialNotificationData, OverrideNameText) == 0x000114, "Member 'FFortTutorialNotificationData::OverrideNameText' has a wrong offset!");
static_assert(offsetof(FFortTutorialNotificationData, OverrideSystemText) == 0x000120, "Member 'FFortTutorialNotificationData::OverrideSystemText' has a wrong offset!");
static_assert(offsetof(FFortTutorialNotificationData, bOverrideButtonEnabled) == 0x00012C, "Member 'FFortTutorialNotificationData::bOverrideButtonEnabled' has a wrong offset!");
static_assert(offsetof(FFortTutorialNotificationData, bOverrideLightboxEnabled) == 0x00012D, "Member 'FFortTutorialNotificationData::bOverrideLightboxEnabled' has a wrong offset!");
static_assert(offsetof(FFortTutorialNotificationData, bOverrideLightboxDisableInputOnly) == 0x00012E, "Member 'FFortTutorialNotificationData::bOverrideLightboxDisableInputOnly' has a wrong offset!");
static_assert(offsetof(FFortTutorialNotificationData, OverridePadding) == 0x000130, "Member 'FFortTutorialNotificationData::OverridePadding' has a wrong offset!");
static_assert(offsetof(FFortTutorialNotificationData, OverrideVAlign) == 0x000140, "Member 'FFortTutorialNotificationData::OverrideVAlign' has a wrong offset!");
static_assert(offsetof(FFortTutorialNotificationData, OverrideHAlign) == 0x000141, "Member 'FFortTutorialNotificationData::OverrideHAlign' has a wrong offset!");

// ScriptStruct FortniteGame.FortKeepAmmoStash
// 0x0024 (0x0024 - 0x0000)
struct FFortKeepAmmoStash final : public FTableRowBase
{
public:
	int32                                         Max1;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cooldown1;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max2;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cooldown2;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max3;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cooldown3;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max4;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cooldown4;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickupTier;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortKeepAmmoStash) == 0x000004, "Wrong alignment on FFortKeepAmmoStash");
static_assert(sizeof(FFortKeepAmmoStash) == 0x000024, "Wrong size on FFortKeepAmmoStash");
static_assert(offsetof(FFortKeepAmmoStash, Max1) == 0x000000, "Member 'FFortKeepAmmoStash::Max1' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Cooldown1) == 0x000004, "Member 'FFortKeepAmmoStash::Cooldown1' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Max2) == 0x000008, "Member 'FFortKeepAmmoStash::Max2' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Cooldown2) == 0x00000C, "Member 'FFortKeepAmmoStash::Cooldown2' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Max3) == 0x000010, "Member 'FFortKeepAmmoStash::Max3' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Cooldown3) == 0x000014, "Member 'FFortKeepAmmoStash::Cooldown3' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Max4) == 0x000018, "Member 'FFortKeepAmmoStash::Max4' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, Cooldown4) == 0x00001C, "Member 'FFortKeepAmmoStash::Cooldown4' has a wrong offset!");
static_assert(offsetof(FFortKeepAmmoStash, PickupTier) == 0x000020, "Member 'FFortKeepAmmoStash::PickupTier' has a wrong offset!");

// ScriptStruct FortniteGame.MyTownBuildingUpgradeRequirements
// 0x002C (0x002C - 0x0000)
struct FMyTownBuildingUpgradeRequirements final
{
public:
	int32                                         RequiredAccountLevel;                              // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredResources[0x4];                            // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x18];                                      // 0x0014(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMyTownBuildingUpgradeRequirements) == 0x000004, "Wrong alignment on FMyTownBuildingUpgradeRequirements");
static_assert(sizeof(FMyTownBuildingUpgradeRequirements) == 0x00002C, "Wrong size on FMyTownBuildingUpgradeRequirements");
static_assert(offsetof(FMyTownBuildingUpgradeRequirements, RequiredAccountLevel) == 0x000000, "Member 'FMyTownBuildingUpgradeRequirements::RequiredAccountLevel' has a wrong offset!");
static_assert(offsetof(FMyTownBuildingUpgradeRequirements, RequiredResources) == 0x000004, "Member 'FMyTownBuildingUpgradeRequirements::RequiredResources' has a wrong offset!");

// ScriptStruct FortniteGame.FortAttributeValuePair
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FFortAttributeValuePair final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAttributeValuePair) == 0x000004, "Wrong alignment on FFortAttributeValuePair");
static_assert(sizeof(FFortAttributeValuePair) == 0x000008, "Wrong size on FFortAttributeValuePair");

// ScriptStruct FortniteGame.ProximityBasedGEDeliveryInfo
// 0x0078 (0x0078 - 0x0000)
struct FProximityBasedGEDeliveryInfo final
{
public:
	struct FFortDeliveryInfoRequirementsFilter    DeliveryRequirements;                              // 0x0000(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayEffectApplicationInfo> EffectsToApply;                                    // 0x0068(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	EFortProximityBasedGEApplicationType          ProximityApplicationType;                          // 0x0074(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProximityBasedGEDeliveryInfo) == 0x000004, "Wrong alignment on FProximityBasedGEDeliveryInfo");
static_assert(sizeof(FProximityBasedGEDeliveryInfo) == 0x000078, "Wrong size on FProximityBasedGEDeliveryInfo");
static_assert(offsetof(FProximityBasedGEDeliveryInfo, DeliveryRequirements) == 0x000000, "Member 'FProximityBasedGEDeliveryInfo::DeliveryRequirements' has a wrong offset!");
static_assert(offsetof(FProximityBasedGEDeliveryInfo, EffectsToApply) == 0x000068, "Member 'FProximityBasedGEDeliveryInfo::EffectsToApply' has a wrong offset!");
static_assert(offsetof(FProximityBasedGEDeliveryInfo, ProximityApplicationType) == 0x000074, "Member 'FProximityBasedGEDeliveryInfo::ProximityApplicationType' has a wrong offset!");

// ScriptStruct FortniteGame.FortConditionalIncludeTags
// 0x0030 (0x0030 - 0x0000)
struct FFortConditionalIncludeTags final
{
public:
	struct FGameplayTagContainer                  ConditionTags;                                     // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IncludeTags;                                       // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortConditionalIncludeTags) == 0x000004, "Wrong alignment on FFortConditionalIncludeTags");
static_assert(sizeof(FFortConditionalIncludeTags) == 0x000030, "Wrong size on FFortConditionalIncludeTags");
static_assert(offsetof(FFortConditionalIncludeTags, ConditionTags) == 0x000000, "Member 'FFortConditionalIncludeTags::ConditionTags' has a wrong offset!");
static_assert(offsetof(FFortConditionalIncludeTags, IncludeTags) == 0x000018, "Member 'FFortConditionalIncludeTags::IncludeTags' has a wrong offset!");

// ScriptStruct FortniteGame.TeamStrategicBuildingEntry
// 0x0008 (0x0014 - 0x000C)
struct FTeamStrategicBuildingEntry final : public FFastArraySerializerItem
{
public:
	struct FTeamStrategicBuildingHandle           StrategicBuildingHandle;                           // 0x000C(0x0004)(Transient, NativeAccessSpecifierPublic)
	class AStrategicBuildingActor*                StrategicBuilding;                                 // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTeamStrategicBuildingEntry) == 0x000004, "Wrong alignment on FTeamStrategicBuildingEntry");
static_assert(sizeof(FTeamStrategicBuildingEntry) == 0x000014, "Wrong size on FTeamStrategicBuildingEntry");
static_assert(offsetof(FTeamStrategicBuildingEntry, StrategicBuildingHandle) == 0x00000C, "Member 'FTeamStrategicBuildingEntry::StrategicBuildingHandle' has a wrong offset!");
static_assert(offsetof(FTeamStrategicBuildingEntry, StrategicBuilding) == 0x000010, "Member 'FTeamStrategicBuildingEntry::StrategicBuilding' has a wrong offset!");

// ScriptStruct FortniteGame.PooledDamageNumberComponents
// 0x000C (0x000C - 0x0000)
struct FPooledDamageNumberComponents final
{
public:
	TArray<class UStaticMeshComponent*>           Components;                                        // 0x0000(0x000C)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPooledDamageNumberComponents) == 0x000004, "Wrong alignment on FPooledDamageNumberComponents");
static_assert(sizeof(FPooledDamageNumberComponents) == 0x00000C, "Wrong size on FPooledDamageNumberComponents");
static_assert(offsetof(FPooledDamageNumberComponents, Components) == 0x000000, "Member 'FPooledDamageNumberComponents::Components' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectContext
// 0x0028 (0x0070 - 0x0048)
struct FFortGameplayEffectContext final : public FGameplayEffectContext
{
public:
	bool                                          bIsFatalHit;                                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsCriticalHit;                                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsFullBodyHit;                                    // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KnockbackMagnitude;                                // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KnockbackZAngle;                                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeMagnitude;                                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ItemGuid;                                          // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UObject*                                DamageSourceObject;                                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SourceLevel;                                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortGameplayEffectContext) == 0x000004, "Wrong alignment on FFortGameplayEffectContext");
static_assert(sizeof(FFortGameplayEffectContext) == 0x000070, "Wrong size on FFortGameplayEffectContext");
static_assert(offsetof(FFortGameplayEffectContext, bIsFatalHit) == 0x000048, "Member 'FFortGameplayEffectContext::bIsFatalHit' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, bIsCriticalHit) == 0x000049, "Member 'FFortGameplayEffectContext::bIsCriticalHit' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, bIsFullBodyHit) == 0x00004A, "Member 'FFortGameplayEffectContext::bIsFullBodyHit' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, KnockbackMagnitude) == 0x00004C, "Member 'FFortGameplayEffectContext::KnockbackMagnitude' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, KnockbackZAngle) == 0x000050, "Member 'FFortGameplayEffectContext::KnockbackZAngle' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, ChargeMagnitude) == 0x000054, "Member 'FFortGameplayEffectContext::ChargeMagnitude' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, ItemGuid) == 0x000058, "Member 'FFortGameplayEffectContext::ItemGuid' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, DamageSourceObject) == 0x000068, "Member 'FFortGameplayEffectContext::DamageSourceObject' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContext, SourceLevel) == 0x00006C, "Member 'FFortGameplayEffectContext::SourceLevel' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingGameplayActorAbilityDeliveryBucket
// 0x006C (0x006C - 0x0000)
struct FBuildingGameplayActorAbilityDeliveryBucket final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FProximityBasedGEDeliveryInfo>  ProximityBasedEffectBuckets;                       // 0x0008(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortAbilitySetDeliveryInfo>    PawnPersistentAbilitySetBuckets;                   // 0x0014(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FFortAbilitySetHandle>          PersistentlyAppliedAbilitySets;                    // 0x0020(0x000C)(ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         bEnabled : 1;                                      // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, Protected, NativeAccessSpecifierProtected))
	uint8                                         bEnabledByDefault : 1;                             // 0x002C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected))
	uint8                                         bHasGEsToApplyOnTouch : 1;                         // 0x002C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, Protected, NativeAccessSpecifierProtected))
	uint8                                         bHasGEsToApplyOnPulseTimer : 1;                    // 0x002C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, Protected, NativeAccessSpecifierProtected))
	uint8                                         bHasPersistentEffects : 1;                         // 0x002C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, Protected, NativeAccessSpecifierProtected))
	uint8                                         Pad_2D[0x3F];                                      // 0x002D(0x003F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingGameplayActorAbilityDeliveryBucket) == 0x000004, "Wrong alignment on FBuildingGameplayActorAbilityDeliveryBucket");
static_assert(sizeof(FBuildingGameplayActorAbilityDeliveryBucket) == 0x00006C, "Wrong size on FBuildingGameplayActorAbilityDeliveryBucket");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryBucket, Tag) == 0x000000, "Member 'FBuildingGameplayActorAbilityDeliveryBucket::Tag' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryBucket, ProximityBasedEffectBuckets) == 0x000008, "Member 'FBuildingGameplayActorAbilityDeliveryBucket::ProximityBasedEffectBuckets' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryBucket, PawnPersistentAbilitySetBuckets) == 0x000014, "Member 'FBuildingGameplayActorAbilityDeliveryBucket::PawnPersistentAbilitySetBuckets' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryBucket, PersistentlyAppliedAbilitySets) == 0x000020, "Member 'FBuildingGameplayActorAbilityDeliveryBucket::PersistentlyAppliedAbilitySets' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingGameplayActorAbilityDeliveryInfo
// 0x0030 (0x0030 - 0x0000)
struct FBuildingGameplayActorAbilityDeliveryInfo final
{
public:
	TArray<struct FBuildingGameplayActorAbilityDeliveryBucket> DeliveryBuckets;                                   // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         ProximityPulseInterval;                            // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bHasGEsToApplyOnTouch : 1;                         // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, NativeAccessSpecifierProtected))
	uint8                                         bHasGEsToApplyOnPulseTimer : 1;                    // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, Protected, NativeAccessSpecifierProtected))
	uint8                                         bHasPersistentEffects : 1;                         // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, Protected, NativeAccessSpecifierProtected))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABuildingGameplayActor*                 OwningActor;                                       // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         DeferredTouchActorsToProcess;                      // 0x0018(0x000C)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingGameplayActorAbilityDeliveryInfo) == 0x000004, "Wrong alignment on FBuildingGameplayActorAbilityDeliveryInfo");
static_assert(sizeof(FBuildingGameplayActorAbilityDeliveryInfo) == 0x000030, "Wrong size on FBuildingGameplayActorAbilityDeliveryInfo");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryInfo, DeliveryBuckets) == 0x000000, "Member 'FBuildingGameplayActorAbilityDeliveryInfo::DeliveryBuckets' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryInfo, ProximityPulseInterval) == 0x00000C, "Member 'FBuildingGameplayActorAbilityDeliveryInfo::ProximityPulseInterval' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryInfo, OwningActor) == 0x000014, "Member 'FBuildingGameplayActorAbilityDeliveryInfo::OwningActor' has a wrong offset!");
static_assert(offsetof(FBuildingGameplayActorAbilityDeliveryInfo, DeferredTouchActorsToProcess) == 0x000018, "Member 'FBuildingGameplayActorAbilityDeliveryInfo::DeferredTouchActorsToProcess' has a wrong offset!");

// ScriptStruct FortniteGame.EditModeState
// 0x000C (0x000C - 0x0000)
struct FEditModeState final
{
public:
	TSubclassOf<class ABuildingSMActor>           EditClass;                                         // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RotationIterations;                                // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMirrored;                                         // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCurrentlyValid;                                   // 0x0009(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEditModeState) == 0x000004, "Wrong alignment on FEditModeState");
static_assert(sizeof(FEditModeState) == 0x00000C, "Wrong size on FEditModeState");
static_assert(offsetof(FEditModeState, EditClass) == 0x000000, "Member 'FEditModeState::EditClass' has a wrong offset!");
static_assert(offsetof(FEditModeState, RotationIterations) == 0x000004, "Member 'FEditModeState::RotationIterations' has a wrong offset!");
static_assert(offsetof(FEditModeState, bMirrored) == 0x000008, "Member 'FEditModeState::bMirrored' has a wrong offset!");
static_assert(offsetof(FEditModeState, bCurrentlyValid) == 0x000009, "Member 'FEditModeState::bCurrentlyValid' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingActiveConstructionInfo
// 0x0014 (0x0014 - 0x0000)
struct FStrategicBuildingActiveConstructionInfo final
{
public:
	float                                         ConstructionStartTime;                             // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstructionEndTime;                               // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConstructionLevel;                                 // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUnderConstruction : 1;                            // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x7];                                        // 0x000D(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStrategicBuildingActiveConstructionInfo) == 0x000004, "Wrong alignment on FStrategicBuildingActiveConstructionInfo");
static_assert(sizeof(FStrategicBuildingActiveConstructionInfo) == 0x000014, "Wrong size on FStrategicBuildingActiveConstructionInfo");
static_assert(offsetof(FStrategicBuildingActiveConstructionInfo, ConstructionStartTime) == 0x000000, "Member 'FStrategicBuildingActiveConstructionInfo::ConstructionStartTime' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingActiveConstructionInfo, ConstructionEndTime) == 0x000004, "Member 'FStrategicBuildingActiveConstructionInfo::ConstructionEndTime' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingActiveConstructionInfo, ConstructionLevel) == 0x000008, "Member 'FStrategicBuildingActiveConstructionInfo::ConstructionLevel' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingUpgradePathInfo
// 0x0098 (0x0098 - 0x0000)
struct FStrategicBuildingUpgradePathInfo final
{
public:
	class FText                                   UpgradeDesc;                                       // 0x0000(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UpgradeBrush;                                      // 0x000C(0x0074)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  UpgradeTags;                                       // 0x0080(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrategicBuildingUpgradePathInfo) == 0x000004, "Wrong alignment on FStrategicBuildingUpgradePathInfo");
static_assert(sizeof(FStrategicBuildingUpgradePathInfo) == 0x000098, "Wrong size on FStrategicBuildingUpgradePathInfo");
static_assert(offsetof(FStrategicBuildingUpgradePathInfo, UpgradeDesc) == 0x000000, "Member 'FStrategicBuildingUpgradePathInfo::UpgradeDesc' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingUpgradePathInfo, UpgradeBrush) == 0x00000C, "Member 'FStrategicBuildingUpgradePathInfo::UpgradeBrush' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingUpgradePathInfo, UpgradeTags) == 0x000080, "Member 'FStrategicBuildingUpgradePathInfo::UpgradeTags' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingLevelUnlocks
// 0x0024 (0x0024 - 0x0000)
struct FStrategicBuildingLevelUnlocks final
{
public:
	TArray<struct FFortAbilitySetDeliveryInfo>    OwnerStrategicBuildingAbilitySetBuckets;           // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FFortAbilitySetDeliveryInfo>    PawnPersistentAbilitySetBuckets;                   // 0x000C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProximityBasedGEDeliveryInfo>  ProximityBasedEffectBuckets;                       // 0x0018(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrategicBuildingLevelUnlocks) == 0x000004, "Wrong alignment on FStrategicBuildingLevelUnlocks");
static_assert(sizeof(FStrategicBuildingLevelUnlocks) == 0x000024, "Wrong size on FStrategicBuildingLevelUnlocks");
static_assert(offsetof(FStrategicBuildingLevelUnlocks, OwnerStrategicBuildingAbilitySetBuckets) == 0x000000, "Member 'FStrategicBuildingLevelUnlocks::OwnerStrategicBuildingAbilitySetBuckets' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelUnlocks, PawnPersistentAbilitySetBuckets) == 0x00000C, "Member 'FStrategicBuildingLevelUnlocks::PawnPersistentAbilitySetBuckets' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelUnlocks, ProximityBasedEffectBuckets) == 0x000018, "Member 'FStrategicBuildingLevelUnlocks::ProximityBasedEffectBuckets' has a wrong offset!");

// ScriptStruct FortniteGame.StrategicBuildingLevelInformation
// 0x004C (0x004C - 0x0000)
struct FStrategicBuildingLevelInformation final
{
public:
	struct FStrategicBuildingLevelCriteria        UpgradeCriteria;                                   // 0x0000(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FStrategicBuildingUpgradePathInfo> UpgradePaths;                                      // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FStrategicBuildingLevelUnlocks         LevelUnlocks;                                      // 0x0020(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ConstructionTime;                                  // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructionRecoveryTime;                           // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStrategicBuildingLevelInformation) == 0x000004, "Wrong alignment on FStrategicBuildingLevelInformation");
static_assert(sizeof(FStrategicBuildingLevelInformation) == 0x00004C, "Wrong size on FStrategicBuildingLevelInformation");
static_assert(offsetof(FStrategicBuildingLevelInformation, UpgradeCriteria) == 0x000000, "Member 'FStrategicBuildingLevelInformation::UpgradeCriteria' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelInformation, UpgradePaths) == 0x000014, "Member 'FStrategicBuildingLevelInformation::UpgradePaths' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelInformation, LevelUnlocks) == 0x000020, "Member 'FStrategicBuildingLevelInformation::LevelUnlocks' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelInformation, ConstructionTime) == 0x000044, "Member 'FStrategicBuildingLevelInformation::ConstructionTime' has a wrong offset!");
static_assert(offsetof(FStrategicBuildingLevelInformation, DestructionRecoveryTime) == 0x000048, "Member 'FStrategicBuildingLevelInformation::DestructionRecoveryTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnSlotData
// 0x0014 (0x0014 - 0x0000)
struct FFortSpawnSlotData final
{
public:
	struct FVector                                SpawnSlotLocation;                                 // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AFortAIPawn*                            OccupyingAI;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortRiftSlotStatus                           SlotStatus;                                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortSpawnSlotData) == 0x000004, "Wrong alignment on FFortSpawnSlotData");
static_assert(sizeof(FFortSpawnSlotData) == 0x000014, "Wrong size on FFortSpawnSlotData");
static_assert(offsetof(FFortSpawnSlotData, SpawnSlotLocation) == 0x000000, "Member 'FFortSpawnSlotData::SpawnSlotLocation' has a wrong offset!");
static_assert(offsetof(FFortSpawnSlotData, OccupyingAI) == 0x00000C, "Member 'FFortSpawnSlotData::OccupyingAI' has a wrong offset!");
static_assert(offsetof(FFortSpawnSlotData, SlotStatus) == 0x000010, "Member 'FFortSpawnSlotData::SlotStatus' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityTargetSelectionList
// 0x001C (0x001C - 0x0000)
struct FFortAbilityTargetSelectionList final
{
public:
	TArray<struct FFortAbilityTargetSelection>    List;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bStopAtFirstSuccess;                               // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseWeaponRanges;                                  // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxYawAngleToTarget;                               // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMaxYawAngleToTarget;                           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x7];                                       // 0x0015(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAbilityTargetSelectionList) == 0x000004, "Wrong alignment on FFortAbilityTargetSelectionList");
static_assert(sizeof(FFortAbilityTargetSelectionList) == 0x00001C, "Wrong size on FFortAbilityTargetSelectionList");
static_assert(offsetof(FFortAbilityTargetSelectionList, List) == 0x000000, "Member 'FFortAbilityTargetSelectionList::List' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelectionList, bStopAtFirstSuccess) == 0x00000C, "Member 'FFortAbilityTargetSelectionList::bStopAtFirstSuccess' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelectionList, bUseWeaponRanges) == 0x00000D, "Member 'FFortAbilityTargetSelectionList::bUseWeaponRanges' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelectionList, MaxYawAngleToTarget) == 0x000010, "Member 'FFortAbilityTargetSelectionList::MaxYawAngleToTarget' has a wrong offset!");
static_assert(offsetof(FFortAbilityTargetSelectionList, bUseMaxYawAngleToTarget) == 0x000014, "Member 'FFortAbilityTargetSelectionList::bUseMaxYawAngleToTarget' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectContainer
// 0x006C (0x006C - 0x0000)
struct FFortGameplayEffectContainer final
{
public:
	struct FGameplayTag                           ApplicationTag;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortAbilityTargetSelectionList        TargetSelection;                                   // 0x0008(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    TargetGameplayEffectClasses;                       // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    OwnerGameplayEffectClasses;                        // 0x0030(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActivationCues;                                    // 0x003C(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ImpactCues;                                        // 0x0054(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayEffectContainer) == 0x000004, "Wrong alignment on FFortGameplayEffectContainer");
static_assert(sizeof(FFortGameplayEffectContainer) == 0x00006C, "Wrong size on FFortGameplayEffectContainer");
static_assert(offsetof(FFortGameplayEffectContainer, ApplicationTag) == 0x000000, "Member 'FFortGameplayEffectContainer::ApplicationTag' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, TargetSelection) == 0x000008, "Member 'FFortGameplayEffectContainer::TargetSelection' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, TargetGameplayEffectClasses) == 0x000024, "Member 'FFortGameplayEffectContainer::TargetGameplayEffectClasses' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, OwnerGameplayEffectClasses) == 0x000030, "Member 'FFortGameplayEffectContainer::OwnerGameplayEffectClasses' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, ActivationCues) == 0x00003C, "Member 'FFortGameplayEffectContainer::ActivationCues' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainer, ImpactCues) == 0x000054, "Member 'FFortGameplayEffectContainer::ImpactCues' has a wrong offset!");

// ScriptStruct FortniteGame.FortCrackEffectData
// 0x0020 (0x0020 - 0x0000)
struct FFortCrackEffectData final
{
public:
	struct FVector_NetQuantizeNormal              Normal;                                            // 0x0000(0x000C)(NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  Position;                                          // 0x000C(0x000C)(NativeAccessSpecifierPublic)
	EPhysicalSurface                              SurfaceType;                                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortCrackEffect*                       OldCrackEffect;                                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCrackEffectData) == 0x000004, "Wrong alignment on FFortCrackEffectData");
static_assert(sizeof(FFortCrackEffectData) == 0x000020, "Wrong size on FFortCrackEffectData");
static_assert(offsetof(FFortCrackEffectData, Normal) == 0x000000, "Member 'FFortCrackEffectData::Normal' has a wrong offset!");
static_assert(offsetof(FFortCrackEffectData, Position) == 0x00000C, "Member 'FFortCrackEffectData::Position' has a wrong offset!");
static_assert(offsetof(FFortCrackEffectData, SurfaceType) == 0x000018, "Member 'FFortCrackEffectData::SurfaceType' has a wrong offset!");
static_assert(offsetof(FFortCrackEffectData, OldCrackEffect) == 0x00001C, "Member 'FFortCrackEffectData::OldCrackEffect' has a wrong offset!");

// ScriptStruct FortniteGame.RandomDayphaseFX
// 0x0028 (0x0028 - 0x0000)
struct FRandomDayphaseFX final
{
public:
	class UParticleSystem*                        ParticleSystem;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleSystem*>                AltParticleSystems;                                // 0x0004(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ChanceToSpawnFX;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EFortDayPhase>                         RequiredDayphases;                                 // 0x0014(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRandomSelectionAlreadyHappened;                   // 0x0020(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               SpawnedComponent;                                  // 0x0024(0x0004)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomDayphaseFX) == 0x000004, "Wrong alignment on FRandomDayphaseFX");
static_assert(sizeof(FRandomDayphaseFX) == 0x000028, "Wrong size on FRandomDayphaseFX");
static_assert(offsetof(FRandomDayphaseFX, ParticleSystem) == 0x000000, "Member 'FRandomDayphaseFX::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, AltParticleSystems) == 0x000004, "Member 'FRandomDayphaseFX::AltParticleSystems' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, ChanceToSpawnFX) == 0x000010, "Member 'FRandomDayphaseFX::ChanceToSpawnFX' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, RequiredDayphases) == 0x000014, "Member 'FRandomDayphaseFX::RequiredDayphases' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, bRandomSelectionAlreadyHappened) == 0x000020, "Member 'FRandomDayphaseFX::bRandomSelectionAlreadyHappened' has a wrong offset!");
static_assert(offsetof(FRandomDayphaseFX, SpawnedComponent) == 0x000024, "Member 'FRandomDayphaseFX::SpawnedComponent' has a wrong offset!");

// ScriptStruct FortniteGame.FortVariantSpawnPoints
// 0x0004 (0x0004 - 0x0000)
struct FFortVariantSpawnPoints final : public FTableRowBase
{
public:
	int32                                         BudgetPoints;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortVariantSpawnPoints) == 0x000004, "Wrong alignment on FFortVariantSpawnPoints");
static_assert(sizeof(FFortVariantSpawnPoints) == 0x000004, "Wrong size on FFortVariantSpawnPoints");
static_assert(offsetof(FFortVariantSpawnPoints, BudgetPoints) == 0x000000, "Member 'FFortVariantSpawnPoints::BudgetPoints' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIGoal
// 0x0010 (0x0028 - 0x0018)
struct FFortAIGoal final : public FFortAIGoalInfo
{
public:
	class UFortAIAssignment*                      UnderminingAssignment;                             // 0x0018(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AFortAIController*>              ControllersAssignedToGoal;                         // 0x001C(0x000C)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAIGoal) == 0x000004, "Wrong alignment on FFortAIGoal");
static_assert(sizeof(FFortAIGoal) == 0x000028, "Wrong size on FFortAIGoal");
static_assert(offsetof(FFortAIGoal, UnderminingAssignment) == 0x000018, "Member 'FFortAIGoal::UnderminingAssignment' has a wrong offset!");
static_assert(offsetof(FFortAIGoal, ControllersAssignedToGoal) == 0x00001C, "Member 'FFortAIGoal::ControllersAssignedToGoal' has a wrong offset!");

// ScriptStruct FortniteGame.FortWeakSpotPosition
// 0x001C (0x001C - 0x0000)
struct FFortWeakSpotPosition final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bValidSpot;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWeakSpotPosition) == 0x000004, "Wrong alignment on FFortWeakSpotPosition");
static_assert(sizeof(FFortWeakSpotPosition) == 0x00001C, "Wrong size on FFortWeakSpotPosition");
static_assert(offsetof(FFortWeakSpotPosition, Position) == 0x000000, "Member 'FFortWeakSpotPosition::Position' has a wrong offset!");
static_assert(offsetof(FFortWeakSpotPosition, Normal) == 0x00000C, "Member 'FFortWeakSpotPosition::Normal' has a wrong offset!");
static_assert(offsetof(FFortWeakSpotPosition, bValidSpot) == 0x000018, "Member 'FFortWeakSpotPosition::bValidSpot' has a wrong offset!");

// ScriptStruct FortniteGame.FortAlterationSlots
// 0x0002 (0x0002 - 0x0000)
struct FFortAlterationSlots final
{
public:
	EFortAlteration                               Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NumSlots;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAlterationSlots) == 0x000001, "Wrong alignment on FFortAlterationSlots");
static_assert(sizeof(FFortAlterationSlots) == 0x000002, "Wrong size on FFortAlterationSlots");
static_assert(offsetof(FFortAlterationSlots, Type) == 0x000000, "Member 'FFortAlterationSlots::Type' has a wrong offset!");
static_assert(offsetof(FFortAlterationSlots, NumSlots) == 0x000001, "Member 'FFortAlterationSlots::NumSlots' has a wrong offset!");

// ScriptStruct FortniteGame.FortSearchBounceData
// 0x0010 (0x0010 - 0x0000)
struct FFortSearchBounceData final
{
public:
	struct FVector                                BounceNormal;                                      // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint32                                        SearchAnimationCount;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSearchBounceData) == 0x000004, "Wrong alignment on FFortSearchBounceData");
static_assert(sizeof(FFortSearchBounceData) == 0x000010, "Wrong size on FFortSearchBounceData");
static_assert(offsetof(FFortSearchBounceData, BounceNormal) == 0x000000, "Member 'FFortSearchBounceData::BounceNormal' has a wrong offset!");
static_assert(offsetof(FFortSearchBounceData, SearchAnimationCount) == 0x00000C, "Member 'FFortSearchBounceData::SearchAnimationCount' has a wrong offset!");

// ScriptStruct FortniteGame.FortKeepItemGroup
// 0x000C (0x000C - 0x0000)
struct FFortKeepItemGroup final : public FTableRowBase
{
public:
	int32                                         Items;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTier;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseLevel;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortKeepItemGroup) == 0x000004, "Wrong alignment on FFortKeepItemGroup");
static_assert(sizeof(FFortKeepItemGroup) == 0x00000C, "Wrong size on FFortKeepItemGroup");
static_assert(offsetof(FFortKeepItemGroup, Items) == 0x000000, "Member 'FFortKeepItemGroup::Items' has a wrong offset!");
static_assert(offsetof(FFortKeepItemGroup, MaxTier) == 0x000004, "Member 'FFortKeepItemGroup::MaxTier' has a wrong offset!");
static_assert(offsetof(FFortKeepItemGroup, BaseLevel) == 0x000008, "Member 'FFortKeepItemGroup::BaseLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortRarityItemData
// 0x0070 (0x0070 - 0x0000)
struct FFortRarityItemData final
{
public:
	class FText                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color1;                                            // 0x000C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color2;                                            // 0x001C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color3;                                            // 0x002C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color4;                                            // 0x003C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color5;                                            // 0x004C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roughness;                                         // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Glow;                                              // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortRarityItemData) == 0x000004, "Wrong alignment on FFortRarityItemData");
static_assert(sizeof(FFortRarityItemData) == 0x000070, "Wrong size on FFortRarityItemData");
static_assert(offsetof(FFortRarityItemData, Name) == 0x000000, "Member 'FFortRarityItemData::Name' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color1) == 0x00000C, "Member 'FFortRarityItemData::Color1' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color2) == 0x00001C, "Member 'FFortRarityItemData::Color2' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color3) == 0x00002C, "Member 'FFortRarityItemData::Color3' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color4) == 0x00003C, "Member 'FFortRarityItemData::Color4' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Color5) == 0x00004C, "Member 'FFortRarityItemData::Color5' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Radius) == 0x00005C, "Member 'FFortRarityItemData::Radius' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Falloff) == 0x000060, "Member 'FFortRarityItemData::Falloff' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Brightness) == 0x000064, "Member 'FFortRarityItemData::Brightness' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Roughness) == 0x000068, "Member 'FFortRarityItemData::Roughness' has a wrong offset!");
static_assert(offsetof(FFortRarityItemData, Glow) == 0x00006C, "Member 'FFortRarityItemData::Glow' has a wrong offset!");

// ScriptStruct FortniteGame.FortKeepResourceGroup
// 0x0030 (0x0030 - 0x0000)
struct FFortKeepResourceGroup final : public FTableRowBase
{
public:
	class FName                                   Container;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ResourceName;                                      // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFortItemDefinition>     FullPath;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortKeepResourceGroup) == 0x000004, "Wrong alignment on FFortKeepResourceGroup");
static_assert(sizeof(FFortKeepResourceGroup) == 0x000030, "Wrong size on FFortKeepResourceGroup");
static_assert(offsetof(FFortKeepResourceGroup, Container) == 0x000000, "Member 'FFortKeepResourceGroup::Container' has a wrong offset!");
static_assert(offsetof(FFortKeepResourceGroup, ItemCount) == 0x000008, "Member 'FFortKeepResourceGroup::ItemCount' has a wrong offset!");
static_assert(offsetof(FFortKeepResourceGroup, ResourceName) == 0x00000C, "Member 'FFortKeepResourceGroup::ResourceName' has a wrong offset!");
static_assert(offsetof(FFortKeepResourceGroup, FullPath) == 0x000018, "Member 'FFortKeepResourceGroup::FullPath' has a wrong offset!");

// ScriptStruct FortniteGame.FortWeaponDurabilityByRarityStats
// 0x0028 (0x0028 - 0x0000)
struct FFortWeaponDurabilityByRarityStats final : public FTableRowBase
{
public:
	int32                                         Handmade;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Ordinary;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Sturdy;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Quality;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Fine;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Elegant;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Masterwork;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Epic;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Badass;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Legendary;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortWeaponDurabilityByRarityStats) == 0x000004, "Wrong alignment on FFortWeaponDurabilityByRarityStats");
static_assert(sizeof(FFortWeaponDurabilityByRarityStats) == 0x000028, "Wrong size on FFortWeaponDurabilityByRarityStats");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Handmade) == 0x000000, "Member 'FFortWeaponDurabilityByRarityStats::Handmade' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Ordinary) == 0x000004, "Member 'FFortWeaponDurabilityByRarityStats::Ordinary' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Sturdy) == 0x000008, "Member 'FFortWeaponDurabilityByRarityStats::Sturdy' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Quality) == 0x00000C, "Member 'FFortWeaponDurabilityByRarityStats::Quality' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Fine) == 0x000010, "Member 'FFortWeaponDurabilityByRarityStats::Fine' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Elegant) == 0x000014, "Member 'FFortWeaponDurabilityByRarityStats::Elegant' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Masterwork) == 0x000018, "Member 'FFortWeaponDurabilityByRarityStats::Masterwork' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Epic) == 0x00001C, "Member 'FFortWeaponDurabilityByRarityStats::Epic' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Badass) == 0x000020, "Member 'FFortWeaponDurabilityByRarityStats::Badass' has a wrong offset!");
static_assert(offsetof(FFortWeaponDurabilityByRarityStats, Legendary) == 0x000024, "Member 'FFortWeaponDurabilityByRarityStats::Legendary' has a wrong offset!");

// ScriptStruct FortniteGame.PatternBASEEffect
// 0x0008 (0x0008 - 0x0000)
struct FPatternBASEEffect final
{
public:
	class UBuildingEditModeMetadata*              Pattern;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatternBASEEffect) == 0x000004, "Wrong alignment on FPatternBASEEffect");
static_assert(sizeof(FPatternBASEEffect) == 0x000008, "Wrong size on FPatternBASEEffect");
static_assert(offsetof(FPatternBASEEffect, Pattern) == 0x000000, "Member 'FPatternBASEEffect::Pattern' has a wrong offset!");
static_assert(offsetof(FPatternBASEEffect, Mesh) == 0x000004, "Member 'FPatternBASEEffect::Mesh' has a wrong offset!");

// ScriptStruct FortniteGame.TrackMeshVerticalityConfig
// 0x000C (0x000C - 0x0000)
struct FTrackMeshVerticalityConfig final
{
public:
	TArray<struct FTrackMeshConfig>               MeshConfigs;                                       // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackMeshVerticalityConfig) == 0x000004, "Wrong alignment on FTrackMeshVerticalityConfig");
static_assert(sizeof(FTrackMeshVerticalityConfig) == 0x00000C, "Wrong size on FTrackMeshVerticalityConfig");
static_assert(offsetof(FTrackMeshVerticalityConfig, MeshConfigs) == 0x000000, "Member 'FTrackMeshVerticalityConfig::MeshConfigs' has a wrong offset!");

// ScriptStruct FortniteGame.TrackMeshTrackPieceTypeConfig
// 0x0018 (0x0018 - 0x0000)
struct FTrackMeshTrackPieceTypeConfig final
{
public:
	struct FTrackMeshVerticalityConfig            MeshesByVerticality[0x2];                          // 0x0000(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackMeshTrackPieceTypeConfig) == 0x000004, "Wrong alignment on FTrackMeshTrackPieceTypeConfig");
static_assert(sizeof(FTrackMeshTrackPieceTypeConfig) == 0x000018, "Wrong size on FTrackMeshTrackPieceTypeConfig");
static_assert(offsetof(FTrackMeshTrackPieceTypeConfig, MeshesByVerticality) == 0x000000, "Member 'FTrackMeshTrackPieceTypeConfig::MeshesByVerticality' has a wrong offset!");

// ScriptStruct FortniteGame.TrackPieceConfig
// 0x0010 (0x0010 - 0x0000)
struct FTrackPieceConfig final
{
public:
	ETrackPieceType                               Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackPieceConfig) == 0x000004, "Wrong alignment on FTrackPieceConfig");
static_assert(sizeof(FTrackPieceConfig) == 0x000010, "Wrong size on FTrackPieceConfig");
static_assert(offsetof(FTrackPieceConfig, Type) == 0x000000, "Member 'FTrackPieceConfig::Type' has a wrong offset!");
static_assert(offsetof(FTrackPieceConfig, Rotation) == 0x000004, "Member 'FTrackPieceConfig::Rotation' has a wrong offset!");

// ScriptStruct FortniteGame.TrackSplineConfig
// 0x0003 (0x0003 - 0x0000)
struct FTrackSplineConfig final
{
public:
	bool                                          bUseSpline;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ETrackDirection                               Start;                                             // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrackDirection                               End;                                               // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackSplineConfig) == 0x000001, "Wrong alignment on FTrackSplineConfig");
static_assert(sizeof(FTrackSplineConfig) == 0x000003, "Wrong size on FTrackSplineConfig");
static_assert(offsetof(FTrackSplineConfig, bUseSpline) == 0x000000, "Member 'FTrackSplineConfig::bUseSpline' has a wrong offset!");
static_assert(offsetof(FTrackSplineConfig, Start) == 0x000001, "Member 'FTrackSplineConfig::Start' has a wrong offset!");
static_assert(offsetof(FTrackSplineConfig, End) == 0x000002, "Member 'FTrackSplineConfig::End' has a wrong offset!");

// ScriptStruct FortniteGame.TrackSwitchStateConfig
// 0x0028 (0x0028 - 0x0000)
struct FTrackSwitchStateConfig final
{
public:
	struct FTrackPieceConfig                      TrackPiece1;                                       // 0x0000(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTrackPieceConfig                      TrackPiece2;                                       // 0x0010(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTrackSplineConfig                     SplineConfig1;                                     // 0x0020(0x0003)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTrackSplineConfig                     SplineConfig2;                                     // 0x0023(0x0003)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTrackSwitchStateConfig) == 0x000004, "Wrong alignment on FTrackSwitchStateConfig");
static_assert(sizeof(FTrackSwitchStateConfig) == 0x000028, "Wrong size on FTrackSwitchStateConfig");
static_assert(offsetof(FTrackSwitchStateConfig, TrackPiece1) == 0x000000, "Member 'FTrackSwitchStateConfig::TrackPiece1' has a wrong offset!");
static_assert(offsetof(FTrackSwitchStateConfig, TrackPiece2) == 0x000010, "Member 'FTrackSwitchStateConfig::TrackPiece2' has a wrong offset!");
static_assert(offsetof(FTrackSwitchStateConfig, SplineConfig1) == 0x000020, "Member 'FTrackSwitchStateConfig::SplineConfig1' has a wrong offset!");
static_assert(offsetof(FTrackSwitchStateConfig, SplineConfig2) == 0x000023, "Member 'FTrackSwitchStateConfig::SplineConfig2' has a wrong offset!");

// ScriptStruct FortniteGame.TrackConfiguration
// 0x0030 (0x0030 - 0x0000)
struct FTrackConfiguration final
{
public:
	TArray<bool>                                  NeighborsByDirection;                              // 0x0000(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTrackSwitchStateConfig>        SwitchStates;                                      // 0x000C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FRotator                               SwitchRotation;                                    // 0x0018(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SwitchOffset;                                      // 0x0024(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTrackConfiguration) == 0x000004, "Wrong alignment on FTrackConfiguration");
static_assert(sizeof(FTrackConfiguration) == 0x000030, "Wrong size on FTrackConfiguration");
static_assert(offsetof(FTrackConfiguration, NeighborsByDirection) == 0x000000, "Member 'FTrackConfiguration::NeighborsByDirection' has a wrong offset!");
static_assert(offsetof(FTrackConfiguration, SwitchStates) == 0x00000C, "Member 'FTrackConfiguration::SwitchStates' has a wrong offset!");
static_assert(offsetof(FTrackConfiguration, SwitchRotation) == 0x000018, "Member 'FTrackConfiguration::SwitchRotation' has a wrong offset!");
static_assert(offsetof(FTrackConfiguration, SwitchOffset) == 0x000024, "Member 'FTrackConfiguration::SwitchOffset' has a wrong offset!");

// ScriptStruct FortniteGame.LastBuildableState
// 0x000C (0x000C - 0x0000)
struct FLastBuildableState final
{
public:
	class UBuildingEditModeMetadata*              LastBuildableMetaData;                             // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastBuildableMirrored;                             // 0x0004(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastBuildableRotationIterations;                   // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLastBuildableState) == 0x000004, "Wrong alignment on FLastBuildableState");
static_assert(sizeof(FLastBuildableState) == 0x00000C, "Wrong size on FLastBuildableState");
static_assert(offsetof(FLastBuildableState, LastBuildableMetaData) == 0x000000, "Member 'FLastBuildableState::LastBuildableMetaData' has a wrong offset!");
static_assert(offsetof(FLastBuildableState, LastBuildableMirrored) == 0x000004, "Member 'FLastBuildableState::LastBuildableMirrored' has a wrong offset!");
static_assert(offsetof(FLastBuildableState, LastBuildableRotationIterations) == 0x000008, "Member 'FLastBuildableState::LastBuildableRotationIterations' has a wrong offset!");

// ScriptStruct FortniteGame.UtilityContribution
// 0x000C (0x000C - 0x0000)
struct FUtilityContribution final
{
public:
	EFortCombatFactors                            ContributingFactor;                                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorFactor                         ContributingAIDirectorFactor;                      // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxContribution;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFactorContributionType                   ContributionType;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUtilityContribution) == 0x000004, "Wrong alignment on FUtilityContribution");
static_assert(sizeof(FUtilityContribution) == 0x00000C, "Wrong size on FUtilityContribution");
static_assert(offsetof(FUtilityContribution, ContributingFactor) == 0x000000, "Member 'FUtilityContribution::ContributingFactor' has a wrong offset!");
static_assert(offsetof(FUtilityContribution, ContributingAIDirectorFactor) == 0x000001, "Member 'FUtilityContribution::ContributingAIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FUtilityContribution, MaxContribution) == 0x000004, "Member 'FUtilityContribution::MaxContribution' has a wrong offset!");
static_assert(offsetof(FUtilityContribution, ContributionType) == 0x000008, "Member 'FUtilityContribution::ContributionType' has a wrong offset!");

// ScriptStruct FortniteGame.TransparentActorInfo
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FTransparentActorInfo final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTransparentActorInfo) == 0x000004, "Wrong alignment on FTransparentActorInfo");
static_assert(sizeof(FTransparentActorInfo) == 0x00000C, "Wrong size on FTransparentActorInfo");

// ScriptStruct FortniteGame.IntensityData
// 0x0020 (0x0020 - 0x0000)
struct FIntensityData final
{
public:
	TArray<struct FIntensityContribution>         ContributingFactors;                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ContributionsTotal;                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBuildingEditModeMetadata*>      ExceptionEditModes;                                // 0x0010(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ExceptionEditModeWeight;                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIntensityData) == 0x000004, "Wrong alignment on FIntensityData");
static_assert(sizeof(FIntensityData) == 0x000020, "Wrong size on FIntensityData");
static_assert(offsetof(FIntensityData, ContributingFactors) == 0x000000, "Member 'FIntensityData::ContributingFactors' has a wrong offset!");
static_assert(offsetof(FIntensityData, ContributionsTotal) == 0x00000C, "Member 'FIntensityData::ContributionsTotal' has a wrong offset!");
static_assert(offsetof(FIntensityData, ExceptionEditModes) == 0x000010, "Member 'FIntensityData::ExceptionEditModes' has a wrong offset!");
static_assert(offsetof(FIntensityData, ExceptionEditModeWeight) == 0x00001C, "Member 'FIntensityData::ExceptionEditModeWeight' has a wrong offset!");

// ScriptStruct FortniteGame.FortCosmeticModification
// 0x0034 (0x0034 - 0x0000)
struct FFortCosmeticModification final
{
public:
	class UMaterialInterface*                     CosmeticMaterial;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        AmbientParticleSystem;                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        MuzzleParticleSystem;                              // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ReloadParticleSystem;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        BeamParticleSystem;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFortTracerBase>            TracerTemplate;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyColor;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ColorAlteration;                                   // 0x001C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ColorParameterName;                                // 0x002C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCosmeticModification) == 0x000004, "Wrong alignment on FFortCosmeticModification");
static_assert(sizeof(FFortCosmeticModification) == 0x000034, "Wrong size on FFortCosmeticModification");
static_assert(offsetof(FFortCosmeticModification, CosmeticMaterial) == 0x000000, "Member 'FFortCosmeticModification::CosmeticMaterial' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, AmbientParticleSystem) == 0x000004, "Member 'FFortCosmeticModification::AmbientParticleSystem' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, MuzzleParticleSystem) == 0x000008, "Member 'FFortCosmeticModification::MuzzleParticleSystem' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, ReloadParticleSystem) == 0x00000C, "Member 'FFortCosmeticModification::ReloadParticleSystem' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, BeamParticleSystem) == 0x000010, "Member 'FFortCosmeticModification::BeamParticleSystem' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, TracerTemplate) == 0x000014, "Member 'FFortCosmeticModification::TracerTemplate' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, bModifyColor) == 0x000018, "Member 'FFortCosmeticModification::bModifyColor' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, ColorAlteration) == 0x00001C, "Member 'FFortCosmeticModification::ColorAlteration' has a wrong offset!");
static_assert(offsetof(FFortCosmeticModification, ColorParameterName) == 0x00002C, "Member 'FFortCosmeticModification::ColorParameterName' has a wrong offset!");

// ScriptStruct FortniteGame.FortConditionalCosmeticModification
// 0x004C (0x004C - 0x0000)
struct FFortConditionalCosmeticModification final
{
public:
	struct FFortCosmeticModification              CosmeticModification;                              // 0x0000(0x0034)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ConditionalTags;                                   // 0x0034(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortConditionalCosmeticModification) == 0x000004, "Wrong alignment on FFortConditionalCosmeticModification");
static_assert(sizeof(FFortConditionalCosmeticModification) == 0x00004C, "Wrong size on FFortConditionalCosmeticModification");
static_assert(offsetof(FFortConditionalCosmeticModification, CosmeticModification) == 0x000000, "Member 'FFortConditionalCosmeticModification::CosmeticModification' has a wrong offset!");
static_assert(offsetof(FFortConditionalCosmeticModification, ConditionalTags) == 0x000034, "Member 'FFortConditionalCosmeticModification::ConditionalTags' has a wrong offset!");

// ScriptStruct FortniteGame.ClimbLinkData
// 0x002C (0x002C - 0x0000)
struct FClimbLinkData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        UniqueLinkId;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x8];                                       // 0x0024(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClimbLinkData) == 0x000004, "Wrong alignment on FClimbLinkData");
static_assert(sizeof(FClimbLinkData) == 0x00002C, "Wrong size on FClimbLinkData");
static_assert(offsetof(FClimbLinkData, UniqueLinkId) == 0x000020, "Member 'FClimbLinkData::UniqueLinkId' has a wrong offset!");

// ScriptStruct FortniteGame.KeepEventInfo
// 0x001C (0x001C - 0x0000)
struct FKeepEventInfo final
{
public:
	TSoftObjectPtr<class UFortKeepEventInfo>      KeepEvent;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DifficultyLevelOffset;                             // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKeepEventInfo) == 0x000004, "Wrong alignment on FKeepEventInfo");
static_assert(sizeof(FKeepEventInfo) == 0x00001C, "Wrong size on FKeepEventInfo");
static_assert(offsetof(FKeepEventInfo, KeepEvent) == 0x000000, "Member 'FKeepEventInfo::KeepEvent' has a wrong offset!");
static_assert(offsetof(FKeepEventInfo, DifficultyLevelOffset) == 0x000018, "Member 'FKeepEventInfo::DifficultyLevelOffset' has a wrong offset!");

// ScriptStruct FortniteGame.WorldItemAndMinMaxCount
// 0x001C (0x001C - 0x0000)
struct FWorldItemAndMinMaxCount final
{
public:
	struct FCurveTableRowHandle                   MinCurveTable;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   MaxCurveTable;                                     // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               Item;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWorldItemAndMinMaxCount) == 0x000004, "Wrong alignment on FWorldItemAndMinMaxCount");
static_assert(sizeof(FWorldItemAndMinMaxCount) == 0x00001C, "Wrong size on FWorldItemAndMinMaxCount");
static_assert(offsetof(FWorldItemAndMinMaxCount, MinCurveTable) == 0x000000, "Member 'FWorldItemAndMinMaxCount::MinCurveTable' has a wrong offset!");
static_assert(offsetof(FWorldItemAndMinMaxCount, MaxCurveTable) == 0x00000C, "Member 'FWorldItemAndMinMaxCount::MaxCurveTable' has a wrong offset!");
static_assert(offsetof(FWorldItemAndMinMaxCount, Item) == 0x000018, "Member 'FWorldItemAndMinMaxCount::Item' has a wrong offset!");

// ScriptStruct FortniteGame.FortZoneStats
// 0x00B4 (0x00B4 - 0x0000)
struct alignas(0x04) FFortZoneStats final
{
public:
	uint8                                         Pad_0[0xB4];                                       // 0x0000(0x00B4)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortZoneStats) == 0x000004, "Wrong alignment on FFortZoneStats");
static_assert(sizeof(FFortZoneStats) == 0x0000B4, "Wrong size on FFortZoneStats");

// ScriptStruct FortniteGame.ContainerStatInfo
// 0x000C (0x000C - 0x0000)
struct FContainerStatInfo final
{
public:
	int32                                         NumSpawned;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSearched;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDestroyedWithoutSearch;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FContainerStatInfo) == 0x000004, "Wrong alignment on FContainerStatInfo");
static_assert(sizeof(FContainerStatInfo) == 0x00000C, "Wrong size on FContainerStatInfo");
static_assert(offsetof(FContainerStatInfo, NumSpawned) == 0x000000, "Member 'FContainerStatInfo::NumSpawned' has a wrong offset!");
static_assert(offsetof(FContainerStatInfo, NumSearched) == 0x000004, "Member 'FContainerStatInfo::NumSearched' has a wrong offset!");
static_assert(offsetof(FContainerStatInfo, NumDestroyedWithoutSearch) == 0x000008, "Member 'FContainerStatInfo::NumDestroyedWithoutSearch' has a wrong offset!");

// ScriptStruct FortniteGame.SoundPerResourceLevel
// 0x0018 (0x0018 - 0x0000)
struct FSoundPerResourceLevel final
{
public:
	class USoundBase*                             Sounds[0x6];                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundPerResourceLevel) == 0x000004, "Wrong alignment on FSoundPerResourceLevel");
static_assert(sizeof(FSoundPerResourceLevel) == 0x000018, "Wrong size on FSoundPerResourceLevel");
static_assert(offsetof(FSoundPerResourceLevel, Sounds) == 0x000000, "Member 'FSoundPerResourceLevel::Sounds' has a wrong offset!");

// ScriptStruct FortniteGame.NpcStatInfo
// 0x0010 (0x0010 - 0x0000)
struct FNpcStatInfo final
{
public:
	int32                                         NumSpawned;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumKilled;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDespawnedNormally;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDespawnedDueToInactivity;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNpcStatInfo) == 0x000004, "Wrong alignment on FNpcStatInfo");
static_assert(sizeof(FNpcStatInfo) == 0x000010, "Wrong size on FNpcStatInfo");
static_assert(offsetof(FNpcStatInfo, NumSpawned) == 0x000000, "Member 'FNpcStatInfo::NumSpawned' has a wrong offset!");
static_assert(offsetof(FNpcStatInfo, NumKilled) == 0x000004, "Member 'FNpcStatInfo::NumKilled' has a wrong offset!");
static_assert(offsetof(FNpcStatInfo, NumDespawnedNormally) == 0x000008, "Member 'FNpcStatInfo::NumDespawnedNormally' has a wrong offset!");
static_assert(offsetof(FNpcStatInfo, NumDespawnedDueToInactivity) == 0x00000C, "Member 'FNpcStatInfo::NumDespawnedDueToInactivity' has a wrong offset!");

// ScriptStruct FortniteGame.FortBadgeScoringData
// 0x0008 (0x0008 - 0x0000)
struct FFortBadgeScoringData final : public FTableRowBase
{
public:
	int32                                         ScoreAwarded;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissionPoints;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBadgeScoringData) == 0x000004, "Wrong alignment on FFortBadgeScoringData");
static_assert(sizeof(FFortBadgeScoringData) == 0x000008, "Wrong size on FFortBadgeScoringData");
static_assert(offsetof(FFortBadgeScoringData, ScoreAwarded) == 0x000000, "Member 'FFortBadgeScoringData::ScoreAwarded' has a wrong offset!");
static_assert(offsetof(FFortBadgeScoringData, MissionPoints) == 0x000004, "Member 'FFortBadgeScoringData::MissionPoints' has a wrong offset!");

// ScriptStruct FortniteGame.FortLevelRecord
// 0x0034 (0x0034 - 0x0000)
struct FFortLevelRecord final
{
public:
	int32                                         ParentLevelIndex;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  BoundActorGuid;                                    // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PackageName;                                       // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortActorRecord>               SavedActors;                                       // 0x001C(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         X_Loc;                                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y_Loc;                                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Rotation;                                          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortLevelRecord) == 0x000004, "Wrong alignment on FFortLevelRecord");
static_assert(sizeof(FFortLevelRecord) == 0x000034, "Wrong size on FFortLevelRecord");
static_assert(offsetof(FFortLevelRecord, ParentLevelIndex) == 0x000000, "Member 'FFortLevelRecord::ParentLevelIndex' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, BoundActorGuid) == 0x000004, "Member 'FFortLevelRecord::BoundActorGuid' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, PackageName) == 0x000014, "Member 'FFortLevelRecord::PackageName' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, SavedActors) == 0x00001C, "Member 'FFortLevelRecord::SavedActors' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, X_Loc) == 0x000028, "Member 'FFortLevelRecord::X_Loc' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, Y_Loc) == 0x00002C, "Member 'FFortLevelRecord::Y_Loc' has a wrong offset!");
static_assert(offsetof(FFortLevelRecord, Rotation) == 0x000030, "Member 'FFortLevelRecord::Rotation' has a wrong offset!");

// ScriptStruct FortniteGame.ZoneLoadingScreenConfig
// 0x0070 (0x0070 - 0x0000)
struct FZoneLoadingScreenConfig final
{
public:
	class UTexture2D*                             BackgroundImage;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TitleDescription;                                  // 0x0004(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0010(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FZoneLoadingScreenHeadingConfig        Headings[0x3];                                     // 0x001C(0x001C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZoneLoadingScreenConfig) == 0x000004, "Wrong alignment on FZoneLoadingScreenConfig");
static_assert(sizeof(FZoneLoadingScreenConfig) == 0x000070, "Wrong size on FZoneLoadingScreenConfig");
static_assert(offsetof(FZoneLoadingScreenConfig, BackgroundImage) == 0x000000, "Member 'FZoneLoadingScreenConfig::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenConfig, TitleDescription) == 0x000004, "Member 'FZoneLoadingScreenConfig::TitleDescription' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenConfig, Title) == 0x000010, "Member 'FZoneLoadingScreenConfig::Title' has a wrong offset!");
static_assert(offsetof(FZoneLoadingScreenConfig, Headings) == 0x00001C, "Member 'FZoneLoadingScreenConfig::Headings' has a wrong offset!");

// ScriptStruct FortniteGame.BuildingValueRules
// 0x001C (0x001C - 0x0000)
struct FBuildingValueRules final
{
public:
	int32                                         CellsAbove;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellsBelow;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CellHorizontalRadius;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromObjectiveWeight;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackWeight;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StructuralWeight;                                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrapWeight;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingValueRules) == 0x000004, "Wrong alignment on FBuildingValueRules");
static_assert(sizeof(FBuildingValueRules) == 0x00001C, "Wrong size on FBuildingValueRules");
static_assert(offsetof(FBuildingValueRules, CellsAbove) == 0x000000, "Member 'FBuildingValueRules::CellsAbove' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, CellsBelow) == 0x000004, "Member 'FBuildingValueRules::CellsBelow' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, CellHorizontalRadius) == 0x000008, "Member 'FBuildingValueRules::CellHorizontalRadius' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, DistanceFromObjectiveWeight) == 0x00000C, "Member 'FBuildingValueRules::DistanceFromObjectiveWeight' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, AttackWeight) == 0x000010, "Member 'FBuildingValueRules::AttackWeight' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, StructuralWeight) == 0x000014, "Member 'FBuildingValueRules::StructuralWeight' has a wrong offset!");
static_assert(offsetof(FBuildingValueRules, TrapWeight) == 0x000018, "Member 'FBuildingValueRules::TrapWeight' has a wrong offset!");

// ScriptStruct FortniteGame.ThreatCloudMeshInfo
// 0x0024 (0x0024 - 0x0000)
struct FThreatCloudMeshInfo final
{
public:
	TWeakObjectPtr<class AThreatCloud>            CloudActor;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UStaticMeshComponent>    CloudMeshComponent;                                // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMaterialInstanceDynamic> CloudMID;                                          // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FVector                                FinalScale;                                        // 0x0018(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreatCloudMeshInfo) == 0x000004, "Wrong alignment on FThreatCloudMeshInfo");
static_assert(sizeof(FThreatCloudMeshInfo) == 0x000024, "Wrong size on FThreatCloudMeshInfo");
static_assert(offsetof(FThreatCloudMeshInfo, CloudActor) == 0x000000, "Member 'FThreatCloudMeshInfo::CloudActor' has a wrong offset!");
static_assert(offsetof(FThreatCloudMeshInfo, CloudMeshComponent) == 0x000008, "Member 'FThreatCloudMeshInfo::CloudMeshComponent' has a wrong offset!");
static_assert(offsetof(FThreatCloudMeshInfo, CloudMID) == 0x000010, "Member 'FThreatCloudMeshInfo::CloudMID' has a wrong offset!");
static_assert(offsetof(FThreatCloudMeshInfo, FinalScale) == 0x000018, "Member 'FThreatCloudMeshInfo::FinalScale' has a wrong offset!");

// ScriptStruct FortniteGame.ThreatCloudInfluenceInfo
// 0x003C (0x003C - 0x0000)
struct FThreatCloudInfluenceInfo final
{
public:
	struct FThreatCloudMeshInfo                   CloudMeshInfo;                                     // 0x0000(0x0024)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x18];                                      // 0x0024(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FThreatCloudInfluenceInfo) == 0x000004, "Wrong alignment on FThreatCloudInfluenceInfo");
static_assert(sizeof(FThreatCloudInfluenceInfo) == 0x00003C, "Wrong size on FThreatCloudInfluenceInfo");
static_assert(offsetof(FThreatCloudInfluenceInfo, CloudMeshInfo) == 0x000000, "Member 'FThreatCloudInfluenceInfo::CloudMeshInfo' has a wrong offset!");

// ScriptStruct FortniteGame.MOBATurretPrioritySetting
// 0x000C (0x000C - 0x0000)
struct FMOBATurretPrioritySetting final
{
public:
	int32                                         AIPriority;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerPriority;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingPriority;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMOBATurretPrioritySetting) == 0x000004, "Wrong alignment on FMOBATurretPrioritySetting");
static_assert(sizeof(FMOBATurretPrioritySetting) == 0x00000C, "Wrong size on FMOBATurretPrioritySetting");
static_assert(offsetof(FMOBATurretPrioritySetting, AIPriority) == 0x000000, "Member 'FMOBATurretPrioritySetting::AIPriority' has a wrong offset!");
static_assert(offsetof(FMOBATurretPrioritySetting, PlayerPriority) == 0x000004, "Member 'FMOBATurretPrioritySetting::PlayerPriority' has a wrong offset!");
static_assert(offsetof(FMOBATurretPrioritySetting, BuildingPriority) == 0x000008, "Member 'FMOBATurretPrioritySetting::BuildingPriority' has a wrong offset!");

// ScriptStruct FortniteGame.FortLootLevelData
// 0x0014 (0x0014 - 0x0000)
struct FFortLootLevelData final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LootLevel;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinItemLevel;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxItemLevel;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLootLevelData) == 0x000004, "Wrong alignment on FFortLootLevelData");
static_assert(sizeof(FFortLootLevelData) == 0x000014, "Wrong size on FFortLootLevelData");
static_assert(offsetof(FFortLootLevelData, Category) == 0x000000, "Member 'FFortLootLevelData::Category' has a wrong offset!");
static_assert(offsetof(FFortLootLevelData, LootLevel) == 0x000008, "Member 'FFortLootLevelData::LootLevel' has a wrong offset!");
static_assert(offsetof(FFortLootLevelData, MinItemLevel) == 0x00000C, "Member 'FFortLootLevelData::MinItemLevel' has a wrong offset!");
static_assert(offsetof(FFortLootLevelData, MaxItemLevel) == 0x000010, "Member 'FFortLootLevelData::MaxItemLevel' has a wrong offset!");

// ScriptStruct FortniteGame.ColorSwatchPair
// 0x0018 (0x0018 - 0x0000)
struct FColorSwatchPair final
{
public:
	class FName                                   ColorName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorValue;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FColorSwatchPair) == 0x000004, "Wrong alignment on FColorSwatchPair");
static_assert(sizeof(FColorSwatchPair) == 0x000018, "Wrong size on FColorSwatchPair");
static_assert(offsetof(FColorSwatchPair, ColorName) == 0x000000, "Member 'FColorSwatchPair::ColorName' has a wrong offset!");
static_assert(offsetof(FColorSwatchPair, ColorValue) == 0x000008, "Member 'FColorSwatchPair::ColorValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortItemPropertyValue
// 0x004C (0x004C - 0x0000)
struct FFortItemPropertyValue final
{
public:
	EFortItemPropertyType                         PropertyType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemPropertyDisplay                      DisplayMethod;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortItemPropertyUnit                         UnitType;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntValue;                                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   StringValue;                                       // 0x0018(0x000C)(NativeAccessSpecifierPublic)
	TArray<class FText>                           ArrayStringValue;                                  // 0x0024(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorValue;                                        // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   NameValue;                                         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x4];                                       // 0x0048(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemPropertyValue) == 0x000004, "Wrong alignment on FFortItemPropertyValue");
static_assert(sizeof(FFortItemPropertyValue) == 0x00004C, "Wrong size on FFortItemPropertyValue");
static_assert(offsetof(FFortItemPropertyValue, PropertyType) == 0x000000, "Member 'FFortItemPropertyValue::PropertyType' has a wrong offset!");
static_assert(offsetof(FFortItemPropertyValue, DisplayMethod) == 0x000001, "Member 'FFortItemPropertyValue::DisplayMethod' has a wrong offset!");
static_assert(offsetof(FFortItemPropertyValue, UnitType) == 0x000002, "Member 'FFortItemPropertyValue::UnitType' has a wrong offset!");
static_assert(offsetof(FFortItemPropertyValue, DisplayName) == 0x000004, "Member 'FFortItemPropertyValue::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortItemPropertyValue, FloatValue) == 0x000010, "Member 'FFortItemPropertyValue::FloatValue' has a wrong offset!");
static_assert(offsetof(FFortItemPropertyValue, IntValue) == 0x000014, "Member 'FFortItemPropertyValue::IntValue' has a wrong offset!");
static_assert(offsetof(FFortItemPropertyValue, StringValue) == 0x000018, "Member 'FFortItemPropertyValue::StringValue' has a wrong offset!");
static_assert(offsetof(FFortItemPropertyValue, ArrayStringValue) == 0x000024, "Member 'FFortItemPropertyValue::ArrayStringValue' has a wrong offset!");
static_assert(offsetof(FFortItemPropertyValue, ColorValue) == 0x000030, "Member 'FFortItemPropertyValue::ColorValue' has a wrong offset!");
static_assert(offsetof(FFortItemPropertyValue, NameValue) == 0x000040, "Member 'FFortItemPropertyValue::NameValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortGameplayEffectContainerSpec
// 0x0064 (0x0064 - 0x0000)
struct FFortGameplayEffectContainerSpec final
{
public:
	struct FFortAbilityTargetSelectionList        TargetSelection;                                   // 0x0000(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpecHandle>      TargetGameplayEffectSpecs;                         // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectSpecHandle>      OwnerGameplayEffectSpecs;                          // 0x0028(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActivationCues;                                    // 0x0034(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ImpactCues;                                        // 0x004C(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGameplayEffectContainerSpec) == 0x000004, "Wrong alignment on FFortGameplayEffectContainerSpec");
static_assert(sizeof(FFortGameplayEffectContainerSpec) == 0x000064, "Wrong size on FFortGameplayEffectContainerSpec");
static_assert(offsetof(FFortGameplayEffectContainerSpec, TargetSelection) == 0x000000, "Member 'FFortGameplayEffectContainerSpec::TargetSelection' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainerSpec, TargetGameplayEffectSpecs) == 0x00001C, "Member 'FFortGameplayEffectContainerSpec::TargetGameplayEffectSpecs' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainerSpec, OwnerGameplayEffectSpecs) == 0x000028, "Member 'FFortGameplayEffectContainerSpec::OwnerGameplayEffectSpecs' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainerSpec, ActivationCues) == 0x000034, "Member 'FFortGameplayEffectContainerSpec::ActivationCues' has a wrong offset!");
static_assert(offsetof(FFortGameplayEffectContainerSpec, ImpactCues) == 0x00004C, "Member 'FFortGameplayEffectContainerSpec::ImpactCues' has a wrong offset!");

// ScriptStruct FortniteGame.DamagerInfoAnalytics
// 0x0010 (0x0010 - 0x0000)
struct FDamagerInfoAnalytics final
{
public:
	class FString                                 DamageCauser;                                      // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageAmount;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDamagerInfoAnalytics) == 0x000004, "Wrong alignment on FDamagerInfoAnalytics");
static_assert(sizeof(FDamagerInfoAnalytics) == 0x000010, "Wrong size on FDamagerInfoAnalytics");
static_assert(offsetof(FDamagerInfoAnalytics, DamageCauser) == 0x000000, "Member 'FDamagerInfoAnalytics::DamageCauser' has a wrong offset!");
static_assert(offsetof(FDamagerInfoAnalytics, DamageAmount) == 0x00000C, "Member 'FDamagerInfoAnalytics::DamageAmount' has a wrong offset!");

// ScriptStruct FortniteGame.ViewOffsetData
// 0x0024 (0x0024 - 0x0000)
struct FViewOffsetData final
{
public:
	struct FVector                                OffsetHigh;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OffsetMid;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OffsetLow;                                         // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FViewOffsetData) == 0x000004, "Wrong alignment on FViewOffsetData");
static_assert(sizeof(FViewOffsetData) == 0x000024, "Wrong size on FViewOffsetData");
static_assert(offsetof(FViewOffsetData, OffsetHigh) == 0x000000, "Member 'FViewOffsetData::OffsetHigh' has a wrong offset!");
static_assert(offsetof(FViewOffsetData, OffsetMid) == 0x00000C, "Member 'FViewOffsetData::OffsetMid' has a wrong offset!");
static_assert(offsetof(FViewOffsetData, OffsetLow) == 0x000018, "Member 'FViewOffsetData::OffsetLow' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIPawnStats
// 0x0180 (0x01B0 - 0x0030)
struct FFortAIPawnStats final : public FFortPawnStats
{
public:
	float                                         MinProximityNotifyDistXY;                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ProximityNotifyDistXY;                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ProximityNotifyDistZ;                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanOpenDoors;                                     // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bStopOnMelee;                                      // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bPauseAfterMelee;                                  // 0x003E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bPerformMeleeLungeAttacks;                         // 0x003F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         HostilityAdjustmentDeathFixed;                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HostilityAdjustmentDeathScaled;                    // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ScoreValue;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DormantSightRadius;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DormantHearingThreshold;                           // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DormantLOSHearingThreshold;                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DormantPeripheralVisionAngle;                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DormantNightAlwaysSenseRadius;                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlertSightRadius;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlertHearingThreshold;                             // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlertLOSHearingThreshold;                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AlertPeripheralVisionAngle;                        // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AutoSuccessRangeFromLastSeenLocation;              // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SuicideDamage;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShortRange;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MediumRange;                                       // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LongRange;                                         // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            HealthScalingTable;                                // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HealthScalingTableRow;                             // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat1;                                    // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat1;                                     // 0x0094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat2;                                    // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat2;                                     // 0x00A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat3;                                    // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat3;                                     // 0x00B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat4;                                    // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat4;                                     // 0x00C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat5;                                    // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat5;                                     // 0x00D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat6;                                    // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat6;                                     // 0x00E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat7;                                    // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat7;                                     // 0x00F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat8;                                    // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat8;                                     // 0x0104(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat9;                                    // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat9;                                     // 0x0114(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat10;                                   // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat10;                                    // 0x0124(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat11;                                   // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat11;                                    // 0x0134(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat12;                                   // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat12;                                    // 0x0144(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat13;                                   // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat13;                                    // 0x0154(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat14;                                   // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat14;                                    // 0x0164(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat15;                                   // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat15;                                    // 0x0174(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WildcardFloat16;                                   // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentFloat16;                                    // 0x0184(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         WildcardInt1;                                      // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentInt1;                                       // 0x0194(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         WildcardInt2;                                      // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 CommentInt2;                                       // 0x01A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortAIPawnStats) == 0x000004, "Wrong alignment on FFortAIPawnStats");
static_assert(sizeof(FFortAIPawnStats) == 0x0001B0, "Wrong size on FFortAIPawnStats");
static_assert(offsetof(FFortAIPawnStats, MinProximityNotifyDistXY) == 0x000030, "Member 'FFortAIPawnStats::MinProximityNotifyDistXY' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, ProximityNotifyDistXY) == 0x000034, "Member 'FFortAIPawnStats::ProximityNotifyDistXY' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, ProximityNotifyDistZ) == 0x000038, "Member 'FFortAIPawnStats::ProximityNotifyDistZ' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, bCanOpenDoors) == 0x00003C, "Member 'FFortAIPawnStats::bCanOpenDoors' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, bStopOnMelee) == 0x00003D, "Member 'FFortAIPawnStats::bStopOnMelee' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, bPauseAfterMelee) == 0x00003E, "Member 'FFortAIPawnStats::bPauseAfterMelee' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, bPerformMeleeLungeAttacks) == 0x00003F, "Member 'FFortAIPawnStats::bPerformMeleeLungeAttacks' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, HostilityAdjustmentDeathFixed) == 0x000040, "Member 'FFortAIPawnStats::HostilityAdjustmentDeathFixed' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, HostilityAdjustmentDeathScaled) == 0x000044, "Member 'FFortAIPawnStats::HostilityAdjustmentDeathScaled' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, ScoreValue) == 0x000048, "Member 'FFortAIPawnStats::ScoreValue' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DormantSightRadius) == 0x00004C, "Member 'FFortAIPawnStats::DormantSightRadius' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DormantHearingThreshold) == 0x000050, "Member 'FFortAIPawnStats::DormantHearingThreshold' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DormantLOSHearingThreshold) == 0x000054, "Member 'FFortAIPawnStats::DormantLOSHearingThreshold' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DormantPeripheralVisionAngle) == 0x000058, "Member 'FFortAIPawnStats::DormantPeripheralVisionAngle' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, DormantNightAlwaysSenseRadius) == 0x00005C, "Member 'FFortAIPawnStats::DormantNightAlwaysSenseRadius' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AlertSightRadius) == 0x000060, "Member 'FFortAIPawnStats::AlertSightRadius' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AlertHearingThreshold) == 0x000064, "Member 'FFortAIPawnStats::AlertHearingThreshold' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AlertLOSHearingThreshold) == 0x000068, "Member 'FFortAIPawnStats::AlertLOSHearingThreshold' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AlertPeripheralVisionAngle) == 0x00006C, "Member 'FFortAIPawnStats::AlertPeripheralVisionAngle' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, AutoSuccessRangeFromLastSeenLocation) == 0x000070, "Member 'FFortAIPawnStats::AutoSuccessRangeFromLastSeenLocation' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, SuicideDamage) == 0x000074, "Member 'FFortAIPawnStats::SuicideDamage' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, ShortRange) == 0x000078, "Member 'FFortAIPawnStats::ShortRange' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, MediumRange) == 0x00007C, "Member 'FFortAIPawnStats::MediumRange' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, LongRange) == 0x000080, "Member 'FFortAIPawnStats::LongRange' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, HealthScalingTable) == 0x000084, "Member 'FFortAIPawnStats::HealthScalingTable' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, HealthScalingTableRow) == 0x000088, "Member 'FFortAIPawnStats::HealthScalingTableRow' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat1) == 0x000090, "Member 'FFortAIPawnStats::WildcardFloat1' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat1) == 0x000094, "Member 'FFortAIPawnStats::CommentFloat1' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat2) == 0x0000A0, "Member 'FFortAIPawnStats::WildcardFloat2' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat2) == 0x0000A4, "Member 'FFortAIPawnStats::CommentFloat2' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat3) == 0x0000B0, "Member 'FFortAIPawnStats::WildcardFloat3' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat3) == 0x0000B4, "Member 'FFortAIPawnStats::CommentFloat3' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat4) == 0x0000C0, "Member 'FFortAIPawnStats::WildcardFloat4' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat4) == 0x0000C4, "Member 'FFortAIPawnStats::CommentFloat4' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat5) == 0x0000D0, "Member 'FFortAIPawnStats::WildcardFloat5' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat5) == 0x0000D4, "Member 'FFortAIPawnStats::CommentFloat5' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat6) == 0x0000E0, "Member 'FFortAIPawnStats::WildcardFloat6' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat6) == 0x0000E4, "Member 'FFortAIPawnStats::CommentFloat6' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat7) == 0x0000F0, "Member 'FFortAIPawnStats::WildcardFloat7' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat7) == 0x0000F4, "Member 'FFortAIPawnStats::CommentFloat7' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat8) == 0x000100, "Member 'FFortAIPawnStats::WildcardFloat8' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat8) == 0x000104, "Member 'FFortAIPawnStats::CommentFloat8' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat9) == 0x000110, "Member 'FFortAIPawnStats::WildcardFloat9' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat9) == 0x000114, "Member 'FFortAIPawnStats::CommentFloat9' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat10) == 0x000120, "Member 'FFortAIPawnStats::WildcardFloat10' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat10) == 0x000124, "Member 'FFortAIPawnStats::CommentFloat10' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat11) == 0x000130, "Member 'FFortAIPawnStats::WildcardFloat11' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat11) == 0x000134, "Member 'FFortAIPawnStats::CommentFloat11' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat12) == 0x000140, "Member 'FFortAIPawnStats::WildcardFloat12' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat12) == 0x000144, "Member 'FFortAIPawnStats::CommentFloat12' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat13) == 0x000150, "Member 'FFortAIPawnStats::WildcardFloat13' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat13) == 0x000154, "Member 'FFortAIPawnStats::CommentFloat13' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat14) == 0x000160, "Member 'FFortAIPawnStats::WildcardFloat14' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat14) == 0x000164, "Member 'FFortAIPawnStats::CommentFloat14' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat15) == 0x000170, "Member 'FFortAIPawnStats::WildcardFloat15' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat15) == 0x000174, "Member 'FFortAIPawnStats::CommentFloat15' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardFloat16) == 0x000180, "Member 'FFortAIPawnStats::WildcardFloat16' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentFloat16) == 0x000184, "Member 'FFortAIPawnStats::CommentFloat16' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardInt1) == 0x000190, "Member 'FFortAIPawnStats::WildcardInt1' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentInt1) == 0x000194, "Member 'FFortAIPawnStats::CommentInt1' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, WildcardInt2) == 0x0001A0, "Member 'FFortAIPawnStats::WildcardInt2' has a wrong offset!");
static_assert(offsetof(FFortAIPawnStats, CommentInt2) == 0x0001A4, "Member 'FFortAIPawnStats::CommentInt2' has a wrong offset!");

// ScriptStruct FortniteGame.RunVariationData
// 0x000C (0x000C - 0x0000)
struct FRunVariationData final
{
public:
	TWeakObjectPtr<class AFortAIPawn>             FortAIPawn;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRunVariationData) == 0x000004, "Wrong alignment on FRunVariationData");
static_assert(sizeof(FRunVariationData) == 0x00000C, "Wrong size on FRunVariationData");
static_assert(offsetof(FRunVariationData, FortAIPawn) == 0x000000, "Member 'FRunVariationData::FortAIPawn' has a wrong offset!");
static_assert(offsetof(FRunVariationData, Distance) == 0x000008, "Member 'FRunVariationData::Distance' has a wrong offset!");

// ScriptStruct FortniteGame.FortMcpQuestObjectiveInfo
// 0x0040 (0x0040 - 0x0000)
struct FFortMcpQuestObjectiveInfo final
{
public:
	struct FDataTableRowHandle                    ObjectiveStatHandle;                               // 0x0000(0x000C)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>            AlternativeStatHandles;                            // 0x000C(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x000C)(Edit, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ScriptedAction;                                    // 0x0028(0x0018)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMcpQuestObjectiveInfo) == 0x000004, "Wrong alignment on FFortMcpQuestObjectiveInfo");
static_assert(sizeof(FFortMcpQuestObjectiveInfo) == 0x000040, "Wrong size on FFortMcpQuestObjectiveInfo");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, ObjectiveStatHandle) == 0x000000, "Member 'FFortMcpQuestObjectiveInfo::ObjectiveStatHandle' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, AlternativeStatHandles) == 0x00000C, "Member 'FFortMcpQuestObjectiveInfo::AlternativeStatHandles' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, Description) == 0x000018, "Member 'FFortMcpQuestObjectiveInfo::Description' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, Count) == 0x000024, "Member 'FFortMcpQuestObjectiveInfo::Count' has a wrong offset!");
static_assert(offsetof(FFortMcpQuestObjectiveInfo, ScriptedAction) == 0x000028, "Member 'FFortMcpQuestObjectiveInfo::ScriptedAction' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterSpawnPointsProfile
// 0x0030 (0x0030 - 0x0000)
struct FFortAIEncounterSpawnPointsProfile final
{
public:
	struct FGameplayTagContainer                  EncounterTypeTags;                                 // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FCurveTableRowHandle>           MaxSpawnPointsPerPlayerCount;                      // 0x0018(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FCurveTableRowHandle>           MinSpawnPointsPerPlayerCount;                      // 0x0024(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterSpawnPointsProfile) == 0x000004, "Wrong alignment on FFortAIEncounterSpawnPointsProfile");
static_assert(sizeof(FFortAIEncounterSpawnPointsProfile) == 0x000030, "Wrong size on FFortAIEncounterSpawnPointsProfile");
static_assert(offsetof(FFortAIEncounterSpawnPointsProfile, EncounterTypeTags) == 0x000000, "Member 'FFortAIEncounterSpawnPointsProfile::EncounterTypeTags' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnPointsProfile, MaxSpawnPointsPerPlayerCount) == 0x000018, "Member 'FFortAIEncounterSpawnPointsProfile::MaxSpawnPointsPerPlayerCount' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnPointsProfile, MinSpawnPointsPerPlayerCount) == 0x000024, "Member 'FFortAIEncounterSpawnPointsProfile::MinSpawnPointsPerPlayerCount' has a wrong offset!");

// ScriptStruct FortniteGame.FortPlayerPerformanceEstimateSettings
// 0x0030 (0x0030 - 0x0000)
struct FFortPlayerPerformanceEstimateSettings final
{
public:
	struct FCurveTableRowHandle                   PlayerPerformanceEstimateTransformMin;             // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   PlayerPerformanceEstimateTransformOrigin;          // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   PlayerPerformanceEstimateTransformMax;             // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         EncounterPlayerPerformanceWeight;                  // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousWavePlayerPerformanceWeight;               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CampaignPlayerPerformanceWeight;                   // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPlayerPerformanceEstimateSettings) == 0x000004, "Wrong alignment on FFortPlayerPerformanceEstimateSettings");
static_assert(sizeof(FFortPlayerPerformanceEstimateSettings) == 0x000030, "Wrong size on FFortPlayerPerformanceEstimateSettings");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PlayerPerformanceEstimateTransformMin) == 0x000000, "Member 'FFortPlayerPerformanceEstimateSettings::PlayerPerformanceEstimateTransformMin' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PlayerPerformanceEstimateTransformOrigin) == 0x00000C, "Member 'FFortPlayerPerformanceEstimateSettings::PlayerPerformanceEstimateTransformOrigin' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PlayerPerformanceEstimateTransformMax) == 0x000018, "Member 'FFortPlayerPerformanceEstimateSettings::PlayerPerformanceEstimateTransformMax' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, EncounterPlayerPerformanceWeight) == 0x000024, "Member 'FFortPlayerPerformanceEstimateSettings::EncounterPlayerPerformanceWeight' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, PreviousWavePlayerPerformanceWeight) == 0x000028, "Member 'FFortPlayerPerformanceEstimateSettings::PreviousWavePlayerPerformanceWeight' has a wrong offset!");
static_assert(offsetof(FFortPlayerPerformanceEstimateSettings, CampaignPlayerPerformanceWeight) == 0x00002C, "Member 'FFortPlayerPerformanceEstimateSettings::CampaignPlayerPerformanceWeight' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterPIDController
// 0x0058 (0x0058 - 0x0000)
struct FFortAIEncounterPIDController final
{
public:
	float                                         ProportionalGain;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntegralGain;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DerivativeGain;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4C];                                       // 0x000C(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterPIDController) == 0x000004, "Wrong alignment on FFortAIEncounterPIDController");
static_assert(sizeof(FFortAIEncounterPIDController) == 0x000058, "Wrong size on FFortAIEncounterPIDController");
static_assert(offsetof(FFortAIEncounterPIDController, ProportionalGain) == 0x000000, "Member 'FFortAIEncounterPIDController::ProportionalGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDController, IntegralGain) == 0x000004, "Member 'FFortAIEncounterPIDController::IntegralGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDController, DerivativeGain) == 0x000008, "Member 'FFortAIEncounterPIDController::DerivativeGain' has a wrong offset!");

// ScriptStruct FortniteGame.FortLevelUpData
// 0x001C (0x001C - 0x0000)
struct FFortLevelUpData final : public FTableRowBase
{
public:
	int32                                         XP;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemRewardsText;                                   // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MaximumXPMultBonusTier;                            // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLevelUpData) == 0x000004, "Wrong alignment on FFortLevelUpData");
static_assert(sizeof(FFortLevelUpData) == 0x00001C, "Wrong size on FFortLevelUpData");
static_assert(offsetof(FFortLevelUpData, XP) == 0x000000, "Member 'FFortLevelUpData::XP' has a wrong offset!");
static_assert(offsetof(FFortLevelUpData, ItemRewardsText) == 0x000004, "Member 'FFortLevelUpData::ItemRewardsText' has a wrong offset!");
static_assert(offsetof(FFortLevelUpData, MaximumXPMultBonusTier) == 0x000010, "Member 'FFortLevelUpData::MaximumXPMultBonusTier' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnPointsPercentageCurveSequenceInstanceInfo
// 0x0004 (0x0008 - 0x0004)
struct FFortSpawnPointsPercentageCurveSequenceInstanceInfo final : public FFortCurveSequenceInstanceInfo
{
public:
	class UFortSpawnPointsPercentageCurveSequence* SpawnPointsPercentageCurveSequence;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortSpawnPointsPercentageCurveSequenceInstanceInfo) == 0x000004, "Wrong alignment on FFortSpawnPointsPercentageCurveSequenceInstanceInfo");
static_assert(sizeof(FFortSpawnPointsPercentageCurveSequenceInstanceInfo) == 0x000008, "Wrong size on FFortSpawnPointsPercentageCurveSequenceInstanceInfo");
static_assert(offsetof(FFortSpawnPointsPercentageCurveSequenceInstanceInfo, SpawnPointsPercentageCurveSequence) == 0x000004, "Member 'FFortSpawnPointsPercentageCurveSequenceInstanceInfo::SpawnPointsPercentageCurveSequence' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterPIDControllerSettings
// 0x0024 (0x0024 - 0x0000)
struct FFortAIEncounterPIDControllerSettings final
{
public:
	struct FCurveTableRowHandle                   ProportionalGain;                                  // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   IntegralGain;                                      // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   DerivativeGain;                                    // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterPIDControllerSettings) == 0x000004, "Wrong alignment on FFortAIEncounterPIDControllerSettings");
static_assert(sizeof(FFortAIEncounterPIDControllerSettings) == 0x000024, "Wrong size on FFortAIEncounterPIDControllerSettings");
static_assert(offsetof(FFortAIEncounterPIDControllerSettings, ProportionalGain) == 0x000000, "Member 'FFortAIEncounterPIDControllerSettings::ProportionalGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDControllerSettings, IntegralGain) == 0x00000C, "Member 'FFortAIEncounterPIDControllerSettings::IntegralGain' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterPIDControllerSettings, DerivativeGain) == 0x000018, "Member 'FFortAIEncounterPIDControllerSettings::DerivativeGain' has a wrong offset!");

// ScriptStruct FortniteGame.PendingSpawnInfo
// 0x0080 (0x0080 - 0x0000)
struct FPendingSpawnInfo final
{
public:
	TSubclassOf<class AFortAIPawn>                PawnClassToSpawn;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnPoint;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnSource;                                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnedFromExternalSpawner;                       // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnSetIndex;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortressAIType                               AIType;                                            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  TargetPlayer;                                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAIEncounterInfo*                   EncounterInfo;                                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifficultyLevel;                                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAISpawnGroup*                      SpawnGroup;                                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SpawnGroupGuid;                                    // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         EnemyIndexInSpawnGroup;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToSpawn;                                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PendingSpawnInfoGuid;                              // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCollision;                                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bKillBuildingActorsAtSpawnLocation;                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EncounterAILifespan;                               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugSpawnedAI;                                   // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAbilitySet*>                AbilitySetsToGrantOnSpawn;                         // 0x0074(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPendingSpawnInfo) == 0x000004, "Wrong alignment on FPendingSpawnInfo");
static_assert(sizeof(FPendingSpawnInfo) == 0x000080, "Wrong size on FPendingSpawnInfo");
static_assert(offsetof(FPendingSpawnInfo, PawnClassToSpawn) == 0x000000, "Member 'FPendingSpawnInfo::PawnClassToSpawn' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnPoint) == 0x000004, "Member 'FPendingSpawnInfo::SpawnPoint' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnLocation) == 0x000008, "Member 'FPendingSpawnInfo::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnRotation) == 0x000014, "Member 'FPendingSpawnInfo::SpawnRotation' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnSource) == 0x000020, "Member 'FPendingSpawnInfo::SpawnSource' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bSpawnedFromExternalSpawner) == 0x000024, "Member 'FPendingSpawnInfo::bSpawnedFromExternalSpawner' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnSetIndex) == 0x000028, "Member 'FPendingSpawnInfo::SpawnSetIndex' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, AIType) == 0x00002C, "Member 'FPendingSpawnInfo::AIType' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, TargetPlayer) == 0x000030, "Member 'FPendingSpawnInfo::TargetPlayer' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, EncounterInfo) == 0x000034, "Member 'FPendingSpawnInfo::EncounterInfo' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, DifficultyLevel) == 0x000038, "Member 'FPendingSpawnInfo::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnGroup) == 0x00003C, "Member 'FPendingSpawnInfo::SpawnGroup' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, SpawnGroupGuid) == 0x000040, "Member 'FPendingSpawnInfo::SpawnGroupGuid' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, EnemyIndexInSpawnGroup) == 0x000050, "Member 'FPendingSpawnInfo::EnemyIndexInSpawnGroup' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, TimeToSpawn) == 0x000054, "Member 'FPendingSpawnInfo::TimeToSpawn' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, PendingSpawnInfoGuid) == 0x000058, "Member 'FPendingSpawnInfo::PendingSpawnInfoGuid' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bIgnoreCollision) == 0x000068, "Member 'FPendingSpawnInfo::bIgnoreCollision' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bKillBuildingActorsAtSpawnLocation) == 0x000069, "Member 'FPendingSpawnInfo::bKillBuildingActorsAtSpawnLocation' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, EncounterAILifespan) == 0x00006C, "Member 'FPendingSpawnInfo::EncounterAILifespan' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, bDebugSpawnedAI) == 0x000070, "Member 'FPendingSpawnInfo::bDebugSpawnedAI' has a wrong offset!");
static_assert(offsetof(FPendingSpawnInfo, AbilitySetsToGrantOnSpawn) == 0x000074, "Member 'FPendingSpawnInfo::AbilitySetsToGrantOnSpawn' has a wrong offset!");

// ScriptStruct FortniteGame.UtilityData
// 0x0038 (0x0038 - 0x0000)
struct FUtilityData final
{
public:
	TArray<struct FUtilityContribution>           ContributingFactors;                               // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ContributionsTotal;                                // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyRecentSelectionPenalty;                      // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecentlySelectedPenaltyPercentage;                 // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PenaltyFallOffRate;                                // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugGraphName;                                    // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugGraphColor;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUtilityData) == 0x000004, "Wrong alignment on FUtilityData");
static_assert(sizeof(FUtilityData) == 0x000038, "Wrong size on FUtilityData");
static_assert(offsetof(FUtilityData, ContributingFactors) == 0x000000, "Member 'FUtilityData::ContributingFactors' has a wrong offset!");
static_assert(offsetof(FUtilityData, ContributionsTotal) == 0x00000C, "Member 'FUtilityData::ContributionsTotal' has a wrong offset!");
static_assert(offsetof(FUtilityData, bApplyRecentSelectionPenalty) == 0x000010, "Member 'FUtilityData::bApplyRecentSelectionPenalty' has a wrong offset!");
static_assert(offsetof(FUtilityData, RecentlySelectedPenaltyPercentage) == 0x000014, "Member 'FUtilityData::RecentlySelectedPenaltyPercentage' has a wrong offset!");
static_assert(offsetof(FUtilityData, PenaltyFallOffRate) == 0x000018, "Member 'FUtilityData::PenaltyFallOffRate' has a wrong offset!");
static_assert(offsetof(FUtilityData, DebugGraphName) == 0x00001C, "Member 'FUtilityData::DebugGraphName' has a wrong offset!");
static_assert(offsetof(FUtilityData, DebugGraphColor) == 0x000028, "Member 'FUtilityData::DebugGraphColor' has a wrong offset!");

// ScriptStruct FortniteGame.DormantSpawnInfo
// 0x0028 (0x0028 - 0x0000)
struct FDormantSpawnInfo final
{
public:
	TSubclassOf<class UFortAIPawnVariant>         DormantEnemyVariant;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroupWeight;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ExcludedGameplayTags;                              // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MinSpawns;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSpawns;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDormantSpawnInfo) == 0x000004, "Wrong alignment on FDormantSpawnInfo");
static_assert(sizeof(FDormantSpawnInfo) == 0x000028, "Wrong size on FDormantSpawnInfo");
static_assert(offsetof(FDormantSpawnInfo, DormantEnemyVariant) == 0x000000, "Member 'FDormantSpawnInfo::DormantEnemyVariant' has a wrong offset!");
static_assert(offsetof(FDormantSpawnInfo, GroupWeight) == 0x000004, "Member 'FDormantSpawnInfo::GroupWeight' has a wrong offset!");
static_assert(offsetof(FDormantSpawnInfo, ExcludedGameplayTags) == 0x000008, "Member 'FDormantSpawnInfo::ExcludedGameplayTags' has a wrong offset!");
static_assert(offsetof(FDormantSpawnInfo, MinSpawns) == 0x000020, "Member 'FDormantSpawnInfo::MinSpawns' has a wrong offset!");
static_assert(offsetof(FDormantSpawnInfo, MaxSpawns) == 0x000024, "Member 'FDormantSpawnInfo::MaxSpawns' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIDirectorFactorData
// 0x0014 (0x0014 - 0x0000)
struct FFortAIDirectorFactorData final
{
public:
	EFortAIDirectorFactor                         AIDirectorFactor;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortAIDirectorFactorContribution> ContributingEvents;                                // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIDirectorFactorData) == 0x000004, "Wrong alignment on FFortAIDirectorFactorData");
static_assert(sizeof(FFortAIDirectorFactorData) == 0x000014, "Wrong size on FFortAIDirectorFactorData");
static_assert(offsetof(FFortAIDirectorFactorData, AIDirectorFactor) == 0x000000, "Member 'FFortAIDirectorFactorData::AIDirectorFactor' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorData, ContributingEvents) == 0x000004, "Member 'FFortAIDirectorFactorData::ContributingEvents' has a wrong offset!");
static_assert(offsetof(FFortAIDirectorFactorData, MaxValue) == 0x000010, "Member 'FFortAIDirectorFactorData::MaxValue' has a wrong offset!");

// ScriptStruct FortniteGame.AIDirectorEventData
// 0x0020 (0x0020 - 0x0000)
struct FAIDirectorEventData final
{
public:
	EFortAIDirectorEvent                          Event;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   DataMax;                                           // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   CoolDownRate;                                      // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EFortAIDirectorEventContribution              ContributionType;                                  // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIDirectorEventParticipant               OwnerParticipantType;                              // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIDirectorEventData) == 0x000004, "Wrong alignment on FAIDirectorEventData");
static_assert(sizeof(FAIDirectorEventData) == 0x000020, "Wrong size on FAIDirectorEventData");
static_assert(offsetof(FAIDirectorEventData, Event) == 0x000000, "Member 'FAIDirectorEventData::Event' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, DataMax) == 0x000004, "Member 'FAIDirectorEventData::DataMax' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, CoolDownRate) == 0x000010, "Member 'FAIDirectorEventData::CoolDownRate' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, ContributionType) == 0x00001C, "Member 'FAIDirectorEventData::ContributionType' has a wrong offset!");
static_assert(offsetof(FAIDirectorEventData, OwnerParticipantType) == 0x00001D, "Member 'FAIDirectorEventData::OwnerParticipantType' has a wrong offset!");

// ScriptStruct FortniteGame.GoalSelectionCriteria
// 0x0004 (0x0004 - 0x0000)
struct FGoalSelectionCriteria final
{
public:
	class UEnvQuery*                              GoalSelectionQuery;                                // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoalSelectionCriteria) == 0x000004, "Wrong alignment on FGoalSelectionCriteria");
static_assert(sizeof(FGoalSelectionCriteria) == 0x000004, "Wrong size on FGoalSelectionCriteria");
static_assert(offsetof(FGoalSelectionCriteria, GoalSelectionQuery) == 0x000000, "Member 'FGoalSelectionCriteria::GoalSelectionQuery' has a wrong offset!");

// ScriptStruct FortniteGame.PawnGoalSelectionCriteria
// 0x003C (0x003C - 0x0000)
struct FPawnGoalSelectionCriteria final
{
public:
	struct FGameplayTagContainer                  IncludeEnemiesWithTags;                            // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ExcludeEnemiesWithTags;                            // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FGoalSelectionCriteria>         GoalSelectionCriteria;                             // 0x0030(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnGoalSelectionCriteria) == 0x000004, "Wrong alignment on FPawnGoalSelectionCriteria");
static_assert(sizeof(FPawnGoalSelectionCriteria) == 0x00003C, "Wrong size on FPawnGoalSelectionCriteria");
static_assert(offsetof(FPawnGoalSelectionCriteria, IncludeEnemiesWithTags) == 0x000000, "Member 'FPawnGoalSelectionCriteria::IncludeEnemiesWithTags' has a wrong offset!");
static_assert(offsetof(FPawnGoalSelectionCriteria, ExcludeEnemiesWithTags) == 0x000018, "Member 'FPawnGoalSelectionCriteria::ExcludeEnemiesWithTags' has a wrong offset!");
static_assert(offsetof(FPawnGoalSelectionCriteria, GoalSelectionCriteria) == 0x000030, "Member 'FPawnGoalSelectionCriteria::GoalSelectionCriteria' has a wrong offset!");

// ScriptStruct FortniteGame.PawnGoalSelectionTableEntry
// 0x0054 (0x0054 - 0x0000)
struct FPawnGoalSelectionTableEntry final
{
public:
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FPawnGoalSelectionCriteria             PawnGoalSelectionCriteria;                         // 0x0018(0x003C)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnGoalSelectionTableEntry) == 0x000004, "Wrong alignment on FPawnGoalSelectionTableEntry");
static_assert(sizeof(FPawnGoalSelectionTableEntry) == 0x000054, "Wrong size on FPawnGoalSelectionTableEntry");
static_assert(offsetof(FPawnGoalSelectionTableEntry, RequiredGameplayTags) == 0x000000, "Member 'FPawnGoalSelectionTableEntry::RequiredGameplayTags' has a wrong offset!");
static_assert(offsetof(FPawnGoalSelectionTableEntry, PawnGoalSelectionCriteria) == 0x000018, "Member 'FPawnGoalSelectionTableEntry::PawnGoalSelectionCriteria' has a wrong offset!");

// ScriptStruct FortniteGame.EncounterGoalSelectionTableEntry
// 0x001C (0x001C - 0x0000)
struct FEncounterGoalSelectionTableEntry final
{
public:
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FGoalSelectionCriteria                 GoalSelectionCriteria;                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterGoalSelectionTableEntry) == 0x000004, "Wrong alignment on FEncounterGoalSelectionTableEntry");
static_assert(sizeof(FEncounterGoalSelectionTableEntry) == 0x00001C, "Wrong size on FEncounterGoalSelectionTableEntry");
static_assert(offsetof(FEncounterGoalSelectionTableEntry, RequiredGameplayTags) == 0x000000, "Member 'FEncounterGoalSelectionTableEntry::RequiredGameplayTags' has a wrong offset!");
static_assert(offsetof(FEncounterGoalSelectionTableEntry, GoalSelectionCriteria) == 0x000018, "Member 'FEncounterGoalSelectionTableEntry::GoalSelectionCriteria' has a wrong offset!");

// ScriptStruct FortniteGame.FortGoalActorEncounterDataManagerPair
// 0x0008 (0x0008 - 0x0000)
struct FFortGoalActorEncounterDataManagerPair final
{
public:
	class AActor*                                 GoalActor;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAIDirectorDataManager*             EncounterDataManager;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortGoalActorEncounterDataManagerPair) == 0x000004, "Wrong alignment on FFortGoalActorEncounterDataManagerPair");
static_assert(sizeof(FFortGoalActorEncounterDataManagerPair) == 0x000008, "Wrong size on FFortGoalActorEncounterDataManagerPair");
static_assert(offsetof(FFortGoalActorEncounterDataManagerPair, GoalActor) == 0x000000, "Member 'FFortGoalActorEncounterDataManagerPair::GoalActor' has a wrong offset!");
static_assert(offsetof(FFortGoalActorEncounterDataManagerPair, EncounterDataManager) == 0x000004, "Member 'FFortGoalActorEncounterDataManagerPair::EncounterDataManager' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterWaveProgressEstimation
// 0x001C (0x001C - 0x0000)
struct FFortAIEncounterWaveProgressEstimation final
{
public:
	float                                         SectionProgressEstimate;                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SectionStartTime;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastWaveProgressUpdateTime;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakAndFadeWavePercentage;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAdjustmentPerSecond;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortAIWaveProgressSection                    CurrentSection;                                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfWaveSegments;                              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterWaveProgressEstimation) == 0x000004, "Wrong alignment on FFortAIEncounterWaveProgressEstimation");
static_assert(sizeof(FFortAIEncounterWaveProgressEstimation) == 0x00001C, "Wrong size on FFortAIEncounterWaveProgressEstimation");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, SectionProgressEstimate) == 0x000000, "Member 'FFortAIEncounterWaveProgressEstimation::SectionProgressEstimate' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, SectionStartTime) == 0x000004, "Member 'FFortAIEncounterWaveProgressEstimation::SectionStartTime' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, LastWaveProgressUpdateTime) == 0x000008, "Member 'FFortAIEncounterWaveProgressEstimation::LastWaveProgressUpdateTime' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, PeakAndFadeWavePercentage) == 0x00000C, "Member 'FFortAIEncounterWaveProgressEstimation::PeakAndFadeWavePercentage' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, MaxAdjustmentPerSecond) == 0x000010, "Member 'FFortAIEncounterWaveProgressEstimation::MaxAdjustmentPerSecond' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, CurrentSection) == 0x000014, "Member 'FFortAIEncounterWaveProgressEstimation::CurrentSection' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterWaveProgressEstimation, NumberOfWaveSegments) == 0x000018, "Member 'FFortAIEncounterWaveProgressEstimation::NumberOfWaveSegments' has a wrong offset!");

// ScriptStruct FortniteGame.EncounterEnvironmentQueryInstance
// 0x0034 (0x0034 - 0x0000)
struct FEncounterEnvironmentQueryInstance final
{
public:
	struct FEncounterEnvironmentQueryInfo         EnvironmentQueryInfo;                              // 0x0000(0x001C)(NativeAccessSpecifierPublic)
	int32                                         QueryID;                                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWaitingForQueryResults;                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortEncounterDirection                       ChosenDirection;                                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        QueryLocations;                                    // 0x0024(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumTimesUsed;                                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncounterEnvironmentQueryInstance) == 0x000004, "Wrong alignment on FEncounterEnvironmentQueryInstance");
static_assert(sizeof(FEncounterEnvironmentQueryInstance) == 0x000034, "Wrong size on FEncounterEnvironmentQueryInstance");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, EnvironmentQueryInfo) == 0x000000, "Member 'FEncounterEnvironmentQueryInstance::EnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, QueryID) == 0x00001C, "Member 'FEncounterEnvironmentQueryInstance::QueryID' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, bIsWaitingForQueryResults) == 0x000020, "Member 'FEncounterEnvironmentQueryInstance::bIsWaitingForQueryResults' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, ChosenDirection) == 0x000021, "Member 'FEncounterEnvironmentQueryInstance::ChosenDirection' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, QueryLocations) == 0x000024, "Member 'FEncounterEnvironmentQueryInstance::QueryLocations' has a wrong offset!");
static_assert(offsetof(FEncounterEnvironmentQueryInstance, NumTimesUsed) == 0x000030, "Member 'FEncounterEnvironmentQueryInstance::NumTimesUsed' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterAIDirectorFactor
// 0x000C (0x000C - 0x0000)
struct FFortEncounterAIDirectorFactor final
{
public:
	float                                         CurrentValue;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedPeriodValue;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPeriodTime;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterAIDirectorFactor) == 0x000004, "Wrong alignment on FFortEncounterAIDirectorFactor");
static_assert(sizeof(FFortEncounterAIDirectorFactor) == 0x00000C, "Wrong size on FFortEncounterAIDirectorFactor");
static_assert(offsetof(FFortEncounterAIDirectorFactor, CurrentValue) == 0x000000, "Member 'FFortEncounterAIDirectorFactor::CurrentValue' has a wrong offset!");
static_assert(offsetof(FFortEncounterAIDirectorFactor, AccumulatedPeriodValue) == 0x000004, "Member 'FFortEncounterAIDirectorFactor::AccumulatedPeriodValue' has a wrong offset!");
static_assert(offsetof(FFortEncounterAIDirectorFactor, TotalPeriodTime) == 0x000008, "Member 'FFortEncounterAIDirectorFactor::TotalPeriodTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortIntensityCurveSequenceInstanceInfo
// 0x0004 (0x0008 - 0x0004)
struct FFortIntensityCurveSequenceInstanceInfo final : public FFortCurveSequenceInstanceInfo
{
public:
	class UFortIntensityCurveSequence*            IntensityCurveSequence;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortIntensityCurveSequenceInstanceInfo) == 0x000004, "Wrong alignment on FFortIntensityCurveSequenceInstanceInfo");
static_assert(sizeof(FFortIntensityCurveSequenceInstanceInfo) == 0x000008, "Wrong size on FFortIntensityCurveSequenceInstanceInfo");
static_assert(offsetof(FFortIntensityCurveSequenceInstanceInfo, IntensityCurveSequence) == 0x000004, "Member 'FFortIntensityCurveSequenceInstanceInfo::IntensityCurveSequence' has a wrong offset!");

// ScriptStruct FortniteGame.FortIntensityCurve
// 0x0020 (0x0020 - 0x0000)
struct FFortIntensityCurve final : public FTableRowBase
{
public:
	class UCurveTable*                            IntensityCurveTable;                               // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   IntensityCurveTableRow;                            // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LowPlayerPerformancePeakIntensityThreshold;        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NormalPlayerPerformancePeakIntensityThreshold;     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HighPlayerPerformancePeakIntensityThreshold;       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRampTime;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeEndIntensityThreshold;                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortIntensityCurve) == 0x000004, "Wrong alignment on FFortIntensityCurve");
static_assert(sizeof(FFortIntensityCurve) == 0x000020, "Wrong size on FFortIntensityCurve");
static_assert(offsetof(FFortIntensityCurve, IntensityCurveTable) == 0x000000, "Member 'FFortIntensityCurve::IntensityCurveTable' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, IntensityCurveTableRow) == 0x000004, "Member 'FFortIntensityCurve::IntensityCurveTableRow' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, LowPlayerPerformancePeakIntensityThreshold) == 0x00000C, "Member 'FFortIntensityCurve::LowPlayerPerformancePeakIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, NormalPlayerPerformancePeakIntensityThreshold) == 0x000010, "Member 'FFortIntensityCurve::NormalPlayerPerformancePeakIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, HighPlayerPerformancePeakIntensityThreshold) == 0x000014, "Member 'FFortIntensityCurve::HighPlayerPerformancePeakIntensityThreshold' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, MaxRampTime) == 0x000018, "Member 'FFortIntensityCurve::MaxRampTime' has a wrong offset!");
static_assert(offsetof(FFortIntensityCurve, FadeEndIntensityThreshold) == 0x00001C, "Member 'FFortIntensityCurve::FadeEndIntensityThreshold' has a wrong offset!");

// ScriptStruct FortniteGame.FortSpawnPointsPercentageCurve
// 0x0010 (0x0010 - 0x0000)
struct FFortSpawnPointsPercentageCurve final : public FTableRowBase
{
public:
	class UCurveTable*                            SpawnPointsPercentageCurveTable;                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SpawnPointsPercentageCurveTableRow;                // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRampTime;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortSpawnPointsPercentageCurve) == 0x000004, "Wrong alignment on FFortSpawnPointsPercentageCurve");
static_assert(sizeof(FFortSpawnPointsPercentageCurve) == 0x000010, "Wrong size on FFortSpawnPointsPercentageCurve");
static_assert(offsetof(FFortSpawnPointsPercentageCurve, SpawnPointsPercentageCurveTable) == 0x000000, "Member 'FFortSpawnPointsPercentageCurve::SpawnPointsPercentageCurveTable' has a wrong offset!");
static_assert(offsetof(FFortSpawnPointsPercentageCurve, SpawnPointsPercentageCurveTableRow) == 0x000004, "Member 'FFortSpawnPointsPercentageCurve::SpawnPointsPercentageCurveTableRow' has a wrong offset!");
static_assert(offsetof(FFortSpawnPointsPercentageCurve, MaxRampTime) == 0x00000C, "Member 'FFortSpawnPointsPercentageCurve::MaxRampTime' has a wrong offset!");

// ScriptStruct FortniteGame.FortPartyMemberRepState
// 0x003C (0x0040 - 0x0004)
struct FFortPartyMemberRepState final : public FPartyMemberRepState
{
public:
	EFortPartyMemberLocation                      Location;                                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MatchmakingLevel;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZoneInstanceId;                                    // 0x000C(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentCharXP;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeroId;                                            // 0x001C(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeroTypeRefName;                                   // 0x0028(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortCustomGender                             CharacterGender;                                   // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         HomeBaseVersion;                                   // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortPartyMemberRepState) == 0x000004, "Wrong alignment on FFortPartyMemberRepState");
static_assert(sizeof(FFortPartyMemberRepState) == 0x000040, "Wrong size on FFortPartyMemberRepState");
static_assert(offsetof(FFortPartyMemberRepState, Location) == 0x000004, "Member 'FFortPartyMemberRepState::Location' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, MatchmakingLevel) == 0x000008, "Member 'FFortPartyMemberRepState::MatchmakingLevel' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, ZoneInstanceId) == 0x00000C, "Member 'FFortPartyMemberRepState::ZoneInstanceId' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, CurrentCharXP) == 0x000018, "Member 'FFortPartyMemberRepState::CurrentCharXP' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, HeroId) == 0x00001C, "Member 'FFortPartyMemberRepState::HeroId' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, HeroTypeRefName) == 0x000028, "Member 'FFortPartyMemberRepState::HeroTypeRefName' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, CharacterGender) == 0x000034, "Member 'FFortPartyMemberRepState::CharacterGender' has a wrong offset!");
static_assert(offsetof(FFortPartyMemberRepState, HomeBaseVersion) == 0x000038, "Member 'FFortPartyMemberRepState::HomeBaseVersion' has a wrong offset!");

// ScriptStruct FortniteGame.SpawnGroupProgression
// 0x001C (0x001C - 0x0000)
struct FSpawnGroupProgression final
{
public:
	class UFortAISpawnGroup*                      SpawnGroup;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   MaxPopulationDensityCurve;                         // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   SpawnDelayCurve;                                   // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnGroupProgression) == 0x000004, "Wrong alignment on FSpawnGroupProgression");
static_assert(sizeof(FSpawnGroupProgression) == 0x00001C, "Wrong size on FSpawnGroupProgression");
static_assert(offsetof(FSpawnGroupProgression, SpawnGroup) == 0x000000, "Member 'FSpawnGroupProgression::SpawnGroup' has a wrong offset!");
static_assert(offsetof(FSpawnGroupProgression, MaxPopulationDensityCurve) == 0x000004, "Member 'FSpawnGroupProgression::MaxPopulationDensityCurve' has a wrong offset!");
static_assert(offsetof(FSpawnGroupProgression, SpawnDelayCurve) == 0x000010, "Member 'FSpawnGroupProgression::SpawnDelayCurve' has a wrong offset!");

// ScriptStruct FortniteGame.ThreatLocationArray
// 0x000C (0x008C - 0x0080)
struct FThreatLocationArray final : public FFastArraySerializer
{
public:
	TArray<struct FThreatLocationInfo>            Locations;                                         // 0x0080(0x000C)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreatLocationArray) == 0x000004, "Wrong alignment on FThreatLocationArray");
static_assert(sizeof(FThreatLocationArray) == 0x00008C, "Wrong size on FThreatLocationArray");
static_assert(offsetof(FThreatLocationArray, Locations) == 0x000080, "Member 'FThreatLocationArray::Locations' has a wrong offset!");

// ScriptStruct FortniteGame.EmptyServerReservation
// 0x0028 (0x0028 - 0x0000)
struct FEmptyServerReservation final
{
public:
	int32                                         PlaylistId;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ZoneInstanceId;                                    // 0x0004(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WUID;                                              // 0x0010(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       WorldDataOwner;                                    // 0x001C(0x0008)(NativeAccessSpecifierPublic)
	bool                                          bMakePrivate;                                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEmptyServerReservation) == 0x000004, "Wrong alignment on FEmptyServerReservation");
static_assert(sizeof(FEmptyServerReservation) == 0x000028, "Wrong size on FEmptyServerReservation");
static_assert(offsetof(FEmptyServerReservation, PlaylistId) == 0x000000, "Member 'FEmptyServerReservation::PlaylistId' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, ZoneInstanceId) == 0x000004, "Member 'FEmptyServerReservation::ZoneInstanceId' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, WUID) == 0x000010, "Member 'FEmptyServerReservation::WUID' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, WorldDataOwner) == 0x00001C, "Member 'FEmptyServerReservation::WorldDataOwner' has a wrong offset!");
static_assert(offsetof(FEmptyServerReservation, bMakePrivate) == 0x000024, "Member 'FEmptyServerReservation::bMakePrivate' has a wrong offset!");

// ScriptStruct FortniteGame.ThreatGridIndex
// 0x0008 (0x0008 - 0x0000)
struct FThreatGridIndex final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FThreatGridIndex) == 0x000004, "Wrong alignment on FThreatGridIndex");
static_assert(sizeof(FThreatGridIndex) == 0x000008, "Wrong size on FThreatGridIndex");
static_assert(offsetof(FThreatGridIndex, X) == 0x000000, "Member 'FThreatGridIndex::X' has a wrong offset!");
static_assert(offsetof(FThreatGridIndex, Y) == 0x000004, "Member 'FThreatGridIndex::Y' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterQueryDirectionTracker
// 0x0034 (0x0034 - 0x0000)
struct FFortAIEncounterQueryDirectionTracker final
{
public:
	bool                                          bHasTriedPreviousDirections;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EFortEncounterDirection>               PreviousQueryDirections;                           // 0x0004(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortEncounterDirection>               ChosenDirections;                                  // 0x0010(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortEncounterDirection>               FailedDirections;                                  // 0x001C(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EFortEncounterDirection>               AvailableDirections;                               // 0x0028(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterQueryDirectionTracker) == 0x000004, "Wrong alignment on FFortAIEncounterQueryDirectionTracker");
static_assert(sizeof(FFortAIEncounterQueryDirectionTracker) == 0x000034, "Wrong size on FFortAIEncounterQueryDirectionTracker");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, bHasTriedPreviousDirections) == 0x000000, "Member 'FFortAIEncounterQueryDirectionTracker::bHasTriedPreviousDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, PreviousQueryDirections) == 0x000004, "Member 'FFortAIEncounterQueryDirectionTracker::PreviousQueryDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, ChosenDirections) == 0x000010, "Member 'FFortAIEncounterQueryDirectionTracker::ChosenDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, FailedDirections) == 0x00001C, "Member 'FFortAIEncounterQueryDirectionTracker::FailedDirections' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterQueryDirectionTracker, AvailableDirections) == 0x000028, "Member 'FFortAIEncounterQueryDirectionTracker::AvailableDirections' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterRiftManagerInitializationData
// 0x0078 (0x0078 - 0x0000)
struct FFortAIEncounterRiftManagerInitializationData final
{
public:
	class UFortAIEncounterInfo*                   EncounterInfo;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFortEncounterSettings                 EncounterSettings;                                 // 0x0004(0x0030)(NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         CurrentEnvironmentQueryInfo;                       // 0x0034(0x001C)(NativeAccessSpecifierPublic)
	struct FEncounterEnvironmentQueryInfo         FallbackEnvironmentQueryInfo;                      // 0x0050(0x001C)(NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingRift>              RiftClassTemplate;                                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRiftsToUse;                                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinRiftsToUse;                                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIEncounterRiftManagerInitializationData) == 0x000004, "Wrong alignment on FFortAIEncounterRiftManagerInitializationData");
static_assert(sizeof(FFortAIEncounterRiftManagerInitializationData) == 0x000078, "Wrong size on FFortAIEncounterRiftManagerInitializationData");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, EncounterInfo) == 0x000000, "Member 'FFortAIEncounterRiftManagerInitializationData::EncounterInfo' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, EncounterSettings) == 0x000004, "Member 'FFortAIEncounterRiftManagerInitializationData::EncounterSettings' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, CurrentEnvironmentQueryInfo) == 0x000034, "Member 'FFortAIEncounterRiftManagerInitializationData::CurrentEnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, FallbackEnvironmentQueryInfo) == 0x000050, "Member 'FFortAIEncounterRiftManagerInitializationData::FallbackEnvironmentQueryInfo' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, RiftClassTemplate) == 0x00006C, "Member 'FFortAIEncounterRiftManagerInitializationData::RiftClassTemplate' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, NumRiftsToUse) == 0x000070, "Member 'FFortAIEncounterRiftManagerInitializationData::NumRiftsToUse' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterRiftManagerInitializationData, MinRiftsToUse) == 0x000074, "Member 'FFortAIEncounterRiftManagerInitializationData::MinRiftsToUse' has a wrong offset!");

// ScriptStruct FortniteGame.CachedPlayerPowerPointsData
// 0x0040 (0x0040 - 0x0000)
struct FCachedPlayerPowerPointsData final
{
public:
	float                                         BaseScaleLevel;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroBasePowerPoints;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerPointsPerDifficultyPoint;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponPPPerOtherPP;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HomeBasePowerPoints;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeroTypeTag;                                       // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroLevel;                                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroTotalPowerPoints;                              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EarnedPowerPointsWithoutWeaponPP;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponPowerPoints;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EarnedPowerPoints;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerStateWorldPlayerID;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCachedPlayerPowerPointsData) == 0x000004, "Wrong alignment on FCachedPlayerPowerPointsData");
static_assert(sizeof(FCachedPlayerPowerPointsData) == 0x000040, "Wrong size on FCachedPlayerPowerPointsData");
static_assert(offsetof(FCachedPlayerPowerPointsData, BaseScaleLevel) == 0x000000, "Member 'FCachedPlayerPowerPointsData::BaseScaleLevel' has a wrong offset!");
static_assert(offsetof(FCachedPlayerPowerPointsData, HeroBasePowerPoints) == 0x000004, "Member 'FCachedPlayerPowerPointsData::HeroBasePowerPoints' has a wrong offset!");
static_assert(offsetof(FCachedPlayerPowerPointsData, PowerPointsPerDifficultyPoint) == 0x000008, "Member 'FCachedPlayerPowerPointsData::PowerPointsPerDifficultyPoint' has a wrong offset!");
static_assert(offsetof(FCachedPlayerPowerPointsData, WeaponPPPerOtherPP) == 0x00000C, "Member 'FCachedPlayerPowerPointsData::WeaponPPPerOtherPP' has a wrong offset!");
static_assert(offsetof(FCachedPlayerPowerPointsData, HomeBasePowerPoints) == 0x000010, "Member 'FCachedPlayerPowerPointsData::HomeBasePowerPoints' has a wrong offset!");
static_assert(offsetof(FCachedPlayerPowerPointsData, HeroTypeTag) == 0x000014, "Member 'FCachedPlayerPowerPointsData::HeroTypeTag' has a wrong offset!");
static_assert(offsetof(FCachedPlayerPowerPointsData, HeroLevel) == 0x00001C, "Member 'FCachedPlayerPowerPointsData::HeroLevel' has a wrong offset!");
static_assert(offsetof(FCachedPlayerPowerPointsData, HeroTotalPowerPoints) == 0x000020, "Member 'FCachedPlayerPowerPointsData::HeroTotalPowerPoints' has a wrong offset!");
static_assert(offsetof(FCachedPlayerPowerPointsData, EarnedPowerPointsWithoutWeaponPP) == 0x000024, "Member 'FCachedPlayerPowerPointsData::EarnedPowerPointsWithoutWeaponPP' has a wrong offset!");
static_assert(offsetof(FCachedPlayerPowerPointsData, WeaponPowerPoints) == 0x000028, "Member 'FCachedPlayerPowerPointsData::WeaponPowerPoints' has a wrong offset!");
static_assert(offsetof(FCachedPlayerPowerPointsData, EarnedPowerPoints) == 0x00002C, "Member 'FCachedPlayerPowerPointsData::EarnedPowerPoints' has a wrong offset!");
static_assert(offsetof(FCachedPlayerPowerPointsData, PlayerStateWorldPlayerID) == 0x000030, "Member 'FCachedPlayerPowerPointsData::PlayerStateWorldPlayerID' has a wrong offset!");

// ScriptStruct FortniteGame.CachedGameDifficultyData
// 0x0050 (0x0050 - 0x0000)
struct FCachedGameDifficultyData final
{
public:
	float                                         GameDifficulty;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseScaleLevel;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbsoluteTheaterZoneDifficulty;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeTheaterZoneDifficulty;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinGameDifficulty;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGameDifficulty;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighestPPWorldPlayerID;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCachedPlayerPowerPointsData>   AllPlayerPowerPointsData;                          // 0x001C(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ZoneDifficultyInfoRow;                             // 0x0028(0x000C)(NativeAccessSpecifierPublic)
	bool                                          bGameDifficultyIsOverridden;                       // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBaseScaleLevelIsOverridden;                       // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DifficultyEquationString;                          // 0x0038(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseScaleLevelEquationString;                      // 0x0044(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedGameDifficultyData) == 0x000004, "Wrong alignment on FCachedGameDifficultyData");
static_assert(sizeof(FCachedGameDifficultyData) == 0x000050, "Wrong size on FCachedGameDifficultyData");
static_assert(offsetof(FCachedGameDifficultyData, GameDifficulty) == 0x000000, "Member 'FCachedGameDifficultyData::GameDifficulty' has a wrong offset!");
static_assert(offsetof(FCachedGameDifficultyData, BaseScaleLevel) == 0x000004, "Member 'FCachedGameDifficultyData::BaseScaleLevel' has a wrong offset!");
static_assert(offsetof(FCachedGameDifficultyData, AbsoluteTheaterZoneDifficulty) == 0x000008, "Member 'FCachedGameDifficultyData::AbsoluteTheaterZoneDifficulty' has a wrong offset!");
static_assert(offsetof(FCachedGameDifficultyData, RelativeTheaterZoneDifficulty) == 0x00000C, "Member 'FCachedGameDifficultyData::RelativeTheaterZoneDifficulty' has a wrong offset!");
static_assert(offsetof(FCachedGameDifficultyData, MinGameDifficulty) == 0x000010, "Member 'FCachedGameDifficultyData::MinGameDifficulty' has a wrong offset!");
static_assert(offsetof(FCachedGameDifficultyData, MaxGameDifficulty) == 0x000014, "Member 'FCachedGameDifficultyData::MaxGameDifficulty' has a wrong offset!");
static_assert(offsetof(FCachedGameDifficultyData, HighestPPWorldPlayerID) == 0x000018, "Member 'FCachedGameDifficultyData::HighestPPWorldPlayerID' has a wrong offset!");
static_assert(offsetof(FCachedGameDifficultyData, AllPlayerPowerPointsData) == 0x00001C, "Member 'FCachedGameDifficultyData::AllPlayerPowerPointsData' has a wrong offset!");
static_assert(offsetof(FCachedGameDifficultyData, ZoneDifficultyInfoRow) == 0x000028, "Member 'FCachedGameDifficultyData::ZoneDifficultyInfoRow' has a wrong offset!");
static_assert(offsetof(FCachedGameDifficultyData, bGameDifficultyIsOverridden) == 0x000034, "Member 'FCachedGameDifficultyData::bGameDifficultyIsOverridden' has a wrong offset!");
static_assert(offsetof(FCachedGameDifficultyData, bBaseScaleLevelIsOverridden) == 0x000035, "Member 'FCachedGameDifficultyData::bBaseScaleLevelIsOverridden' has a wrong offset!");
static_assert(offsetof(FCachedGameDifficultyData, DifficultyEquationString) == 0x000038, "Member 'FCachedGameDifficultyData::DifficultyEquationString' has a wrong offset!");
static_assert(offsetof(FCachedGameDifficultyData, BaseScaleLevelEquationString) == 0x000044, "Member 'FCachedGameDifficultyData::BaseScaleLevelEquationString' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIEncounterSpawnArea
// 0x0028 (0x0028 - 0x0000)
struct FFortAIEncounterSpawnArea final
{
public:
	TArray<struct FEncounterEnvironmentQueryInstance> QueryInstances;                                    // 0x0000(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterRift>           PendingRifts;                                      // 0x000C(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFortAIEncounterRift>           Rifts;                                             // 0x0018(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUsingFallbackQuery;                               // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortAIEncounterSpawnArea) == 0x000004, "Wrong alignment on FFortAIEncounterSpawnArea");
static_assert(sizeof(FFortAIEncounterSpawnArea) == 0x000028, "Wrong size on FFortAIEncounterSpawnArea");
static_assert(offsetof(FFortAIEncounterSpawnArea, QueryInstances) == 0x000000, "Member 'FFortAIEncounterSpawnArea::QueryInstances' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, PendingRifts) == 0x00000C, "Member 'FFortAIEncounterSpawnArea::PendingRifts' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, Rifts) == 0x000018, "Member 'FFortAIEncounterSpawnArea::Rifts' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, bIsActive) == 0x000024, "Member 'FFortAIEncounterSpawnArea::bIsActive' has a wrong offset!");
static_assert(offsetof(FFortAIEncounterSpawnArea, bUsingFallbackQuery) == 0x000025, "Member 'FFortAIEncounterSpawnArea::bUsingFallbackQuery' has a wrong offset!");

// ScriptStruct FortniteGame.FortInviteSessionParams
// 0x001C (0x001C - 0x0000)
struct FFortInviteSessionParams final
{
public:
	EMatchmakingState                             State;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FailureReason;                                     // 0x0004(0x000C)(NativeAccessSpecifierPublic)
	EPartyReservationResult                       LastBeaconResponse;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xB];                                       // 0x0011(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortInviteSessionParams) == 0x000004, "Wrong alignment on FFortInviteSessionParams");
static_assert(sizeof(FFortInviteSessionParams) == 0x00001C, "Wrong size on FFortInviteSessionParams");
static_assert(offsetof(FFortInviteSessionParams, State) == 0x000000, "Member 'FFortInviteSessionParams::State' has a wrong offset!");
static_assert(offsetof(FFortInviteSessionParams, FailureReason) == 0x000004, "Member 'FFortInviteSessionParams::FailureReason' has a wrong offset!");
static_assert(offsetof(FFortInviteSessionParams, LastBeaconResponse) == 0x000010, "Member 'FFortInviteSessionParams::LastBeaconResponse' has a wrong offset!");

// ScriptStruct FortniteGame.AIAssignmentInfo
// 0x0070 (0x0070 - 0x0000)
struct FAIAssignmentInfo final
{
public:
	TWeakObjectPtr<class UFortAIAssignment>       CurrentAssignment;                                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FFortAIGoalInfo                        CurrentGoal;                                       // 0x0008(0x0018)(NativeAccessSpecifierPrivate)
	float                                         TimeCurrentGoalWasChosen;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeExitedLastAssignmentOfType[0x4];               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UFortAIAssignment>       PreviousAssignment;                                // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FFortAIGoalInfo                        PreviousGoal;                                      // 0x003C(0x0018)(NativeAccessSpecifierPrivate)
	bool                                          bWaitingForQueryResponse;                          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bSuppressGoalUpdates;                              // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_56[0x1A];                                      // 0x0056(0x001A)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIAssignmentInfo) == 0x000004, "Wrong alignment on FAIAssignmentInfo");
static_assert(sizeof(FAIAssignmentInfo) == 0x000070, "Wrong size on FAIAssignmentInfo");
static_assert(offsetof(FAIAssignmentInfo, CurrentAssignment) == 0x000000, "Member 'FAIAssignmentInfo::CurrentAssignment' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, CurrentGoal) == 0x000008, "Member 'FAIAssignmentInfo::CurrentGoal' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, TimeCurrentGoalWasChosen) == 0x000020, "Member 'FAIAssignmentInfo::TimeCurrentGoalWasChosen' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, TimeExitedLastAssignmentOfType) == 0x000024, "Member 'FAIAssignmentInfo::TimeExitedLastAssignmentOfType' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, PreviousAssignment) == 0x000034, "Member 'FAIAssignmentInfo::PreviousAssignment' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, PreviousGoal) == 0x00003C, "Member 'FAIAssignmentInfo::PreviousGoal' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, bWaitingForQueryResponse) == 0x000054, "Member 'FAIAssignmentInfo::bWaitingForQueryResponse' has a wrong offset!");
static_assert(offsetof(FAIAssignmentInfo, bSuppressGoalUpdates) == 0x000055, "Member 'FAIAssignmentInfo::bSuppressGoalUpdates' has a wrong offset!");

// ScriptStruct FortniteGame.FortAIPawnVariantDefinition
// 0x0048 (0x0048 - 0x0000)
struct FFortAIPawnVariantDefinition final
{
public:
	TSubclassOf<class AFortAIPawn>                PawnClass;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   VariantWeightCurve;                                // 0x0004(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         CurrentWeight;                                     // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      RequiredTagsQuery;                                 // 0x0014(0x0034)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAIPawnVariantDefinition) == 0x000004, "Wrong alignment on FFortAIPawnVariantDefinition");
static_assert(sizeof(FFortAIPawnVariantDefinition) == 0x000048, "Wrong size on FFortAIPawnVariantDefinition");
static_assert(offsetof(FFortAIPawnVariantDefinition, PawnClass) == 0x000000, "Member 'FFortAIPawnVariantDefinition::PawnClass' has a wrong offset!");
static_assert(offsetof(FFortAIPawnVariantDefinition, VariantWeightCurve) == 0x000004, "Member 'FFortAIPawnVariantDefinition::VariantWeightCurve' has a wrong offset!");
static_assert(offsetof(FFortAIPawnVariantDefinition, CurrentWeight) == 0x000010, "Member 'FFortAIPawnVariantDefinition::CurrentWeight' has a wrong offset!");
static_assert(offsetof(FFortAIPawnVariantDefinition, RequiredTagsQuery) == 0x000014, "Member 'FFortAIPawnVariantDefinition::RequiredTagsQuery' has a wrong offset!");

// ScriptStruct FortniteGame.MyFortCategoryData
// 0x0034 (0x0034 - 0x0000)
struct FMyFortCategoryData final
{
public:
	class FText                                   CategoryName;                                      // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ModifiedTagContainer;                              // 0x000C(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsCore;                                           // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayAttribute>             Attributes;                                        // 0x0028(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyFortCategoryData) == 0x000004, "Wrong alignment on FMyFortCategoryData");
static_assert(sizeof(FMyFortCategoryData) == 0x000034, "Wrong size on FMyFortCategoryData");
static_assert(offsetof(FMyFortCategoryData, CategoryName) == 0x000000, "Member 'FMyFortCategoryData::CategoryName' has a wrong offset!");
static_assert(offsetof(FMyFortCategoryData, ModifiedTagContainer) == 0x00000C, "Member 'FMyFortCategoryData::ModifiedTagContainer' has a wrong offset!");
static_assert(offsetof(FMyFortCategoryData, bIsCore) == 0x000024, "Member 'FMyFortCategoryData::bIsCore' has a wrong offset!");
static_assert(offsetof(FMyFortCategoryData, Attributes) == 0x000028, "Member 'FMyFortCategoryData::Attributes' has a wrong offset!");

// ScriptStruct FortniteGame.FortSocialItemBasicData
// 0x00FC (0x00FC - 0x0000)
struct FFortSocialItemBasicData final
{
public:
	int32                                         Rating;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMyTownBannerData                      Banner;                                            // 0x0004(0x00E8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x00EC(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortSocialItemBasicData) == 0x000004, "Wrong alignment on FFortSocialItemBasicData");
static_assert(sizeof(FFortSocialItemBasicData) == 0x0000FC, "Wrong size on FFortSocialItemBasicData");
static_assert(offsetof(FFortSocialItemBasicData, Rating) == 0x000000, "Member 'FFortSocialItemBasicData::Rating' has a wrong offset!");
static_assert(offsetof(FFortSocialItemBasicData, Banner) == 0x000004, "Member 'FFortSocialItemBasicData::Banner' has a wrong offset!");
static_assert(offsetof(FFortSocialItemBasicData, Color) == 0x0000EC, "Member 'FFortSocialItemBasicData::Color' has a wrong offset!");

// ScriptStruct FortniteGame.DistanceToTargetComparison
// 0x001C (0x001C - 0x0000)
struct FDistanceToTargetComparison final
{
public:
	struct FGameplayTagContainer                  DistanceDataTags;                                  // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	EArithmeticKeyOperation                       Operator;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETargetDistanceComparisonType                 ComparisonType;                                    // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDistanceToTargetComparison) == 0x000004, "Wrong alignment on FDistanceToTargetComparison");
static_assert(sizeof(FDistanceToTargetComparison) == 0x00001C, "Wrong size on FDistanceToTargetComparison");
static_assert(offsetof(FDistanceToTargetComparison, DistanceDataTags) == 0x000000, "Member 'FDistanceToTargetComparison::DistanceDataTags' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, Operator) == 0x000018, "Member 'FDistanceToTargetComparison::Operator' has a wrong offset!");
static_assert(offsetof(FDistanceToTargetComparison, ComparisonType) == 0x000019, "Member 'FDistanceToTargetComparison::ComparisonType' has a wrong offset!");

// ScriptStruct FortniteGame.PenetrationAvoidanceFeeler
// 0x0020 (0x0020 - 0x0000)
struct FPenetrationAvoidanceFeeler final
{
public:
	struct FRotator                               AdjustmentRot;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         WorldWeight;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PawnWeight;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TraceInterval;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FramesUntilNextTrace;                              // 0x001C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPenetrationAvoidanceFeeler) == 0x000004, "Wrong alignment on FPenetrationAvoidanceFeeler");
static_assert(sizeof(FPenetrationAvoidanceFeeler) == 0x000020, "Wrong size on FPenetrationAvoidanceFeeler");
static_assert(offsetof(FPenetrationAvoidanceFeeler, AdjustmentRot) == 0x000000, "Member 'FPenetrationAvoidanceFeeler::AdjustmentRot' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, WorldWeight) == 0x00000C, "Member 'FPenetrationAvoidanceFeeler::WorldWeight' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, PawnWeight) == 0x000010, "Member 'FPenetrationAvoidanceFeeler::PawnWeight' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, Extent) == 0x000014, "Member 'FPenetrationAvoidanceFeeler::Extent' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, TraceInterval) == 0x000018, "Member 'FPenetrationAvoidanceFeeler::TraceInterval' has a wrong offset!");
static_assert(offsetof(FPenetrationAvoidanceFeeler, FramesUntilNextTrace) == 0x00001C, "Member 'FPenetrationAvoidanceFeeler::FramesUntilNextTrace' has a wrong offset!");

// ScriptStruct FortniteGame.InterpOffsetData
// 0x001C (0x001C - 0x0000)
struct FInterpOffsetData final
{
public:
	struct FVector                                ViewOffset;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LargeBodyTypeAddtnlOffset;                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PitchAngle;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInterpOffsetData) == 0x000004, "Wrong alignment on FInterpOffsetData");
static_assert(sizeof(FInterpOffsetData) == 0x00001C, "Wrong size on FInterpOffsetData");
static_assert(offsetof(FInterpOffsetData, ViewOffset) == 0x000000, "Member 'FInterpOffsetData::ViewOffset' has a wrong offset!");
static_assert(offsetof(FInterpOffsetData, LargeBodyTypeAddtnlOffset) == 0x00000C, "Member 'FInterpOffsetData::LargeBodyTypeAddtnlOffset' has a wrong offset!");
static_assert(offsetof(FInterpOffsetData, PitchAngle) == 0x000018, "Member 'FInterpOffsetData::PitchAngle' has a wrong offset!");

// ScriptStruct FortniteGame.InterpOffset
// 0x000C (0x000C - 0x0000)
struct FInterpOffset final
{
public:
	TArray<struct FInterpOffsetData>              SamplePoints;                                      // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInterpOffset) == 0x000004, "Wrong alignment on FInterpOffset");
static_assert(sizeof(FInterpOffset) == 0x00000C, "Wrong size on FInterpOffset");
static_assert(offsetof(FInterpOffset, SamplePoints) == 0x000000, "Member 'FInterpOffset::SamplePoints' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseBuildingStaticDataTableRow
// 0x0074 (0x0074 - 0x0000)
struct FHomebaseBuildingStaticDataTableRow final : public FTableRowBase
{
public:
	class FName                                   BuildingName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingLevel;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Attribute;                                         // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Operation;                                         // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ApplicationRequiredTags;                           // 0x0020(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredSourceTags;                                // 0x002C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredTargetTags;                                // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MagnitudeAttribute;                                // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveTable*                            MagnitudeDataTable;                                // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MagnitudeCategory;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GrantedTags;                                       // 0x0058(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerPointValue;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PowerPointClassTagFilter;                          // 0x0068(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseBuildingStaticDataTableRow) == 0x000004, "Wrong alignment on FHomebaseBuildingStaticDataTableRow");
static_assert(sizeof(FHomebaseBuildingStaticDataTableRow) == 0x000074, "Wrong size on FHomebaseBuildingStaticDataTableRow");
static_assert(offsetof(FHomebaseBuildingStaticDataTableRow, BuildingName) == 0x000000, "Member 'FHomebaseBuildingStaticDataTableRow::BuildingName' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticDataTableRow, BuildingLevel) == 0x000008, "Member 'FHomebaseBuildingStaticDataTableRow::BuildingLevel' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticDataTableRow, Attribute) == 0x00000C, "Member 'FHomebaseBuildingStaticDataTableRow::Attribute' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticDataTableRow, Operation) == 0x000014, "Member 'FHomebaseBuildingStaticDataTableRow::Operation' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticDataTableRow, Magnitude) == 0x00001C, "Member 'FHomebaseBuildingStaticDataTableRow::Magnitude' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticDataTableRow, ApplicationRequiredTags) == 0x000020, "Member 'FHomebaseBuildingStaticDataTableRow::ApplicationRequiredTags' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticDataTableRow, RequiredSourceTags) == 0x00002C, "Member 'FHomebaseBuildingStaticDataTableRow::RequiredSourceTags' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticDataTableRow, RequiredTargetTags) == 0x000038, "Member 'FHomebaseBuildingStaticDataTableRow::RequiredTargetTags' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticDataTableRow, MagnitudeAttribute) == 0x000044, "Member 'FHomebaseBuildingStaticDataTableRow::MagnitudeAttribute' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticDataTableRow, MagnitudeDataTable) == 0x00004C, "Member 'FHomebaseBuildingStaticDataTableRow::MagnitudeDataTable' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticDataTableRow, MagnitudeCategory) == 0x000050, "Member 'FHomebaseBuildingStaticDataTableRow::MagnitudeCategory' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticDataTableRow, GrantedTags) == 0x000058, "Member 'FHomebaseBuildingStaticDataTableRow::GrantedTags' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticDataTableRow, PowerPointValue) == 0x000064, "Member 'FHomebaseBuildingStaticDataTableRow::PowerPointValue' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingStaticDataTableRow, PowerPointClassTagFilter) == 0x000068, "Member 'FHomebaseBuildingStaticDataTableRow::PowerPointClassTagFilter' has a wrong offset!");

// ScriptStruct FortniteGame.SpawnPickupEntry
// 0x0010 (0x0010 - 0x0000)
struct FSpawnPickupEntry final
{
public:
	class FString                                 Name;                                              // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     PickupClass;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpawnPickupEntry) == 0x000004, "Wrong alignment on FSpawnPickupEntry");
static_assert(sizeof(FSpawnPickupEntry) == 0x000010, "Wrong size on FSpawnPickupEntry");
static_assert(offsetof(FSpawnPickupEntry, Name) == 0x000000, "Member 'FSpawnPickupEntry::Name' has a wrong offset!");
static_assert(offsetof(FSpawnPickupEntry, PickupClass) == 0x00000C, "Member 'FSpawnPickupEntry::PickupClass' has a wrong offset!");

// ScriptStruct FortniteGame.LiveDamageNumberComponent
// 0x000C (0x000C - 0x0000)
struct FLiveDamageNumberComponent final
{
public:
	class UStaticMeshComponent*                   Component;                                         // 0x0000(0x0004)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x8];                                        // 0x0004(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLiveDamageNumberComponent) == 0x000004, "Wrong alignment on FLiveDamageNumberComponent");
static_assert(sizeof(FLiveDamageNumberComponent) == 0x00000C, "Wrong size on FLiveDamageNumberComponent");
static_assert(offsetof(FLiveDamageNumberComponent, Component) == 0x000000, "Member 'FLiveDamageNumberComponent::Component' has a wrong offset!");

// ScriptStruct FortniteGame.FortDamageNumberInfo
// 0x0058 (0x0058 - 0x0000)
struct FFortDamageNumberInfo final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsCriticalDamage;                                 // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Damage;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDamageNumberType                         DamageNumberType;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VisualDamageScale;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortElementalDamageType                      ElementalDamageType;                               // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       MeshMIDs;                                          // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 DamageNumberArray;                                 // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  DamagedActor;                                      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APawn>                   DamageCauser;                                      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDamageNumberInfo) == 0x000004, "Wrong alignment on FFortDamageNumberInfo");
static_assert(sizeof(FFortDamageNumberInfo) == 0x000058, "Wrong size on FFortDamageNumberInfo");
static_assert(offsetof(FFortDamageNumberInfo, WorldLocation) == 0x000000, "Member 'FFortDamageNumberInfo::WorldLocation' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, HitNormal) == 0x00000C, "Member 'FFortDamageNumberInfo::HitNormal' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, bIsCriticalDamage) == 0x000018, "Member 'FFortDamageNumberInfo::bIsCriticalDamage' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, Damage) == 0x00001C, "Member 'FFortDamageNumberInfo::Damage' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, DamageNumberType) == 0x000020, "Member 'FFortDamageNumberInfo::DamageNumberType' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, VisualDamageScale) == 0x000024, "Member 'FFortDamageNumberInfo::VisualDamageScale' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, ElementalDamageType) == 0x000028, "Member 'FFortDamageNumberInfo::ElementalDamageType' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, StaticMeshComponent) == 0x00002C, "Member 'FFortDamageNumberInfo::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, MeshMIDs) == 0x000030, "Member 'FFortDamageNumberInfo::MeshMIDs' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, DamageNumberArray) == 0x00003C, "Member 'FFortDamageNumberInfo::DamageNumberArray' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, DamagedActor) == 0x000048, "Member 'FFortDamageNumberInfo::DamagedActor' has a wrong offset!");
static_assert(offsetof(FFortDamageNumberInfo, DamageCauser) == 0x000050, "Member 'FFortDamageNumberInfo::DamageCauser' has a wrong offset!");

// ScriptStruct FortniteGame.CombatThresholdData
// 0x0020 (0x0020 - 0x0000)
struct FCombatThresholdData final
{
public:
	float                                         HeatLevel;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThresholdName;                                     // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugGraphColor;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatThresholdData) == 0x000004, "Wrong alignment on FCombatThresholdData");
static_assert(sizeof(FCombatThresholdData) == 0x000020, "Wrong size on FCombatThresholdData");
static_assert(offsetof(FCombatThresholdData, HeatLevel) == 0x000000, "Member 'FCombatThresholdData::HeatLevel' has a wrong offset!");
static_assert(offsetof(FCombatThresholdData, ThresholdName) == 0x000004, "Member 'FCombatThresholdData::ThresholdName' has a wrong offset!");
static_assert(offsetof(FCombatThresholdData, DebugGraphColor) == 0x000010, "Member 'FCombatThresholdData::DebugGraphColor' has a wrong offset!");

// ScriptStruct FortniteGame.CombatEventMultiplier
// 0x0008 (0x0008 - 0x0000)
struct FCombatEventMultiplier final
{
public:
	EFortCombatEvents                             CombatEvent;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxContribution;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatEventMultiplier) == 0x000004, "Wrong alignment on FCombatEventMultiplier");
static_assert(sizeof(FCombatEventMultiplier) == 0x000008, "Wrong size on FCombatEventMultiplier");
static_assert(offsetof(FCombatEventMultiplier, CombatEvent) == 0x000000, "Member 'FCombatEventMultiplier::CombatEvent' has a wrong offset!");
static_assert(offsetof(FCombatEventMultiplier, MaxContribution) == 0x000004, "Member 'FCombatEventMultiplier::MaxContribution' has a wrong offset!");

// ScriptStruct FortniteGame.CombatFactorData
// 0x002C (0x002C - 0x0000)
struct FCombatFactorData final
{
public:
	TArray<struct FCombatEventMultiplier>         ContributingCombatEvents;                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugFactorName;                                   // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugGraphColor;                                   // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatFactorData) == 0x000004, "Wrong alignment on FCombatFactorData");
static_assert(sizeof(FCombatFactorData) == 0x00002C, "Wrong size on FCombatFactorData");
static_assert(offsetof(FCombatFactorData, ContributingCombatEvents) == 0x000000, "Member 'FCombatFactorData::ContributingCombatEvents' has a wrong offset!");
static_assert(offsetof(FCombatFactorData, MaxValue) == 0x00000C, "Member 'FCombatFactorData::MaxValue' has a wrong offset!");
static_assert(offsetof(FCombatFactorData, DebugFactorName) == 0x000010, "Member 'FCombatFactorData::DebugFactorName' has a wrong offset!");
static_assert(offsetof(FCombatFactorData, DebugGraphColor) == 0x00001C, "Member 'FCombatFactorData::DebugGraphColor' has a wrong offset!");

// ScriptStruct FortniteGame.AbilityToolSpawnParameters
// 0x0020 (0x0020 - 0x0000)
struct FAbilityToolSpawnParameters final
{
public:
	TSubclassOf<class ABuildingActor>             SpawnClass;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0010(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ABuildingSMActor*                       AttachedToActor;                                   // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbilityToolSpawnParameters) == 0x000004, "Wrong alignment on FAbilityToolSpawnParameters");
static_assert(sizeof(FAbilityToolSpawnParameters) == 0x000020, "Wrong size on FAbilityToolSpawnParameters");
static_assert(offsetof(FAbilityToolSpawnParameters, SpawnClass) == 0x000000, "Member 'FAbilityToolSpawnParameters::SpawnClass' has a wrong offset!");
static_assert(offsetof(FAbilityToolSpawnParameters, Location) == 0x000004, "Member 'FAbilityToolSpawnParameters::Location' has a wrong offset!");
static_assert(offsetof(FAbilityToolSpawnParameters, Rotation) == 0x000010, "Member 'FAbilityToolSpawnParameters::Rotation' has a wrong offset!");
static_assert(offsetof(FAbilityToolSpawnParameters, AttachedToActor) == 0x00001C, "Member 'FAbilityToolSpawnParameters::AttachedToActor' has a wrong offset!");

// ScriptStruct FortniteGame.CombatEventData
// 0x0028 (0x0028 - 0x0000)
struct FCombatEventData final
{
public:
	float                                         Heat;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeatContribution;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoolDownRate;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugGraphColor;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombatEventData) == 0x000004, "Wrong alignment on FCombatEventData");
static_assert(sizeof(FCombatEventData) == 0x000028, "Wrong size on FCombatEventData");
static_assert(offsetof(FCombatEventData, Heat) == 0x000000, "Member 'FCombatEventData::Heat' has a wrong offset!");
static_assert(offsetof(FCombatEventData, MaxHeatContribution) == 0x000004, "Member 'FCombatEventData::MaxHeatContribution' has a wrong offset!");
static_assert(offsetof(FCombatEventData, CoolDownRate) == 0x000008, "Member 'FCombatEventData::CoolDownRate' has a wrong offset!");
static_assert(offsetof(FCombatEventData, EventName) == 0x00000C, "Member 'FCombatEventData::EventName' has a wrong offset!");
static_assert(offsetof(FCombatEventData, DebugGraphColor) == 0x000018, "Member 'FCombatEventData::DebugGraphColor' has a wrong offset!");

// ScriptStruct FortniteGame.SkyLightValues
// 0x0024 (0x0024 - 0x0000)
struct FSkyLightValues final
{
public:
	struct FLinearColor                           SkyLightColor;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLightOcclusionTint;                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SkyLightMinOcclusion;                              // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyLightValues) == 0x000004, "Wrong alignment on FSkyLightValues");
static_assert(sizeof(FSkyLightValues) == 0x000024, "Wrong size on FSkyLightValues");
static_assert(offsetof(FSkyLightValues, SkyLightColor) == 0x000000, "Member 'FSkyLightValues::SkyLightColor' has a wrong offset!");
static_assert(offsetof(FSkyLightValues, SkyLightOcclusionTint) == 0x000010, "Member 'FSkyLightValues::SkyLightOcclusionTint' has a wrong offset!");
static_assert(offsetof(FSkyLightValues, SkyLightMinOcclusion) == 0x000020, "Member 'FSkyLightValues::SkyLightMinOcclusion' has a wrong offset!");

// ScriptStruct FortniteGame.ElementalCharValues
// 0x0014 (0x0014 - 0x0000)
struct FElementalCharValues final
{
public:
	struct FLinearColor                           FireCharColor;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ElectricalCharEmissive;                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FElementalCharValues) == 0x000004, "Wrong alignment on FElementalCharValues");
static_assert(sizeof(FElementalCharValues) == 0x000014, "Wrong size on FElementalCharValues");
static_assert(offsetof(FElementalCharValues, FireCharColor) == 0x000000, "Member 'FElementalCharValues::FireCharColor' has a wrong offset!");
static_assert(offsetof(FElementalCharValues, ElectricalCharEmissive) == 0x000010, "Member 'FElementalCharValues::ElectricalCharEmissive' has a wrong offset!");

// ScriptStruct FortniteGame.DayPhaseInfo
// 0x014C (0x014C - 0x0000)
struct FDayPhaseInfo final
{
public:
	class FString                                 PhaseStartAnnouncement;                            // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimePhaseBegins;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseLengthInHours;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentageTransitionIn;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionInTimeInMinutes;                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentageTransitionOut;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionOutTimeInMinutes;                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkyLightValues                        SkyLightValues;                                    // 0x0024(0x0024)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FThreatCloudValues                     ThreatCloudValues;                                 // 0x0048(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FElementalCharValues                   ElementalCharValues;                               // 0x00E8(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDirectionalLightValues                DirectionalLightValues;                            // 0x00FC(0x0008)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogValues            ExpHeightFogValues;                                // 0x0104(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class APostProcessVolume*                     PostProcessVolume;                                 // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APostProcessVolume*                     LowPriPostProcessVolume;                           // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      SkyMaterialInstance;                               // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      StarMapMaterialInstance;                           // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDayPhaseInfo) == 0x000004, "Wrong alignment on FDayPhaseInfo");
static_assert(sizeof(FDayPhaseInfo) == 0x00014C, "Wrong size on FDayPhaseInfo");
static_assert(offsetof(FDayPhaseInfo, PhaseStartAnnouncement) == 0x000000, "Member 'FDayPhaseInfo::PhaseStartAnnouncement' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, TimePhaseBegins) == 0x00000C, "Member 'FDayPhaseInfo::TimePhaseBegins' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, PhaseLengthInHours) == 0x000010, "Member 'FDayPhaseInfo::PhaseLengthInHours' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, PercentageTransitionIn) == 0x000014, "Member 'FDayPhaseInfo::PercentageTransitionIn' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, TransitionInTimeInMinutes) == 0x000018, "Member 'FDayPhaseInfo::TransitionInTimeInMinutes' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, PercentageTransitionOut) == 0x00001C, "Member 'FDayPhaseInfo::PercentageTransitionOut' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, TransitionOutTimeInMinutes) == 0x000020, "Member 'FDayPhaseInfo::TransitionOutTimeInMinutes' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, SkyLightValues) == 0x000024, "Member 'FDayPhaseInfo::SkyLightValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, ThreatCloudValues) == 0x000048, "Member 'FDayPhaseInfo::ThreatCloudValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, ElementalCharValues) == 0x0000E8, "Member 'FDayPhaseInfo::ElementalCharValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, DirectionalLightValues) == 0x0000FC, "Member 'FDayPhaseInfo::DirectionalLightValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, ExpHeightFogValues) == 0x000104, "Member 'FDayPhaseInfo::ExpHeightFogValues' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, PostProcessVolume) == 0x00013C, "Member 'FDayPhaseInfo::PostProcessVolume' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, LowPriPostProcessVolume) == 0x000140, "Member 'FDayPhaseInfo::LowPriPostProcessVolume' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, SkyMaterialInstance) == 0x000144, "Member 'FDayPhaseInfo::SkyMaterialInstance' has a wrong offset!");
static_assert(offsetof(FDayPhaseInfo, StarMapMaterialInstance) == 0x000148, "Member 'FDayPhaseInfo::StarMapMaterialInstance' has a wrong offset!");

// ScriptStruct FortniteGame.DecoPlacementState
// 0x0080 (0x0080 - 0x0000)
struct FDecoPlacementState final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RawLocation;                                       // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  AbsoluteRotation;                                  // 0x0030(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                GridLocation;                                      // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PreviousLocation;                                  // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                FallbackLocation;                                  // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  LastHitActor;                                      // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ABuildingSMActor>        CurrentBuildingActorAttachment;                    // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EFortDecoPlacementQueryResults                CanPlaceState;                                     // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0xB];                                       // 0x0075(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDecoPlacementState) == 0x000010, "Wrong alignment on FDecoPlacementState");
static_assert(sizeof(FDecoPlacementState) == 0x000080, "Wrong size on FDecoPlacementState");
static_assert(offsetof(FDecoPlacementState, Start) == 0x000000, "Member 'FDecoPlacementState::Start' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, End) == 0x00000C, "Member 'FDecoPlacementState::End' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, RawLocation) == 0x000018, "Member 'FDecoPlacementState::RawLocation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, Normal) == 0x000024, "Member 'FDecoPlacementState::Normal' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, AbsoluteRotation) == 0x000030, "Member 'FDecoPlacementState::AbsoluteRotation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, GridLocation) == 0x000040, "Member 'FDecoPlacementState::GridLocation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, PreviousLocation) == 0x00004C, "Member 'FDecoPlacementState::PreviousLocation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, FallbackLocation) == 0x000058, "Member 'FDecoPlacementState::FallbackLocation' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, LastHitActor) == 0x000064, "Member 'FDecoPlacementState::LastHitActor' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, CurrentBuildingActorAttachment) == 0x00006C, "Member 'FDecoPlacementState::CurrentBuildingActorAttachment' has a wrong offset!");
static_assert(offsetof(FDecoPlacementState, CanPlaceState) == 0x000074, "Member 'FDecoPlacementState::CanPlaceState' has a wrong offset!");

// ScriptStruct FortniteGame.FortEncounterLockedUtility
// 0x0002 (0x0002 - 0x0000)
struct FFortEncounterLockedUtility final
{
public:
	EFortAIUtility                                Utility;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortEncounterUtilityDesire                   UtilityDesire;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortEncounterLockedUtility) == 0x000001, "Wrong alignment on FFortEncounterLockedUtility");
static_assert(sizeof(FFortEncounterLockedUtility) == 0x000002, "Wrong size on FFortEncounterLockedUtility");
static_assert(offsetof(FFortEncounterLockedUtility, Utility) == 0x000000, "Member 'FFortEncounterLockedUtility::Utility' has a wrong offset!");
static_assert(offsetof(FFortEncounterLockedUtility, UtilityDesire) == 0x000001, "Member 'FFortEncounterLockedUtility::UtilityDesire' has a wrong offset!");

// ScriptStruct FortniteGame.ScoreMultiplierRow
// 0x007C (0x007C - 0x0000)
struct FScoreMultiplierRow final : public FTableRowBase
{
public:
	float                                         CombatMultiplier;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BuildingMultiplier;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UtilityMultiplier;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BadgeMultiplier;                                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MonsterKills;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MonsterDamagePoints;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PlayerKills;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         WoodGathered;                                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         StoneGathered;                                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MetalGathered;                                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Deaths;                                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsBuilt;                                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsBuilt_Wood;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsBuilt_Stone;                              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsBuilt_Metal;                              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Wood2;                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Wood3;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Stone2;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Stone3;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Metal2;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsUpgraded_Metal3;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildingsDestroyed;                                // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Repair_Wood;                                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Repair_Stone;                                      // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Repair_Metal;                                      // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FlagsCaptured;                                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FlagsReturned;                                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ContainersLooted;                                  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CraftingPoints;                                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TrapPlacementPoints;                               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TrapActivationPoints;                              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FScoreMultiplierRow) == 0x000004, "Wrong alignment on FScoreMultiplierRow");
static_assert(sizeof(FScoreMultiplierRow) == 0x00007C, "Wrong size on FScoreMultiplierRow");
static_assert(offsetof(FScoreMultiplierRow, CombatMultiplier) == 0x000000, "Member 'FScoreMultiplierRow::CombatMultiplier' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingMultiplier) == 0x000004, "Member 'FScoreMultiplierRow::BuildingMultiplier' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, UtilityMultiplier) == 0x000008, "Member 'FScoreMultiplierRow::UtilityMultiplier' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BadgeMultiplier) == 0x00000C, "Member 'FScoreMultiplierRow::BadgeMultiplier' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, MonsterKills) == 0x000010, "Member 'FScoreMultiplierRow::MonsterKills' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, MonsterDamagePoints) == 0x000014, "Member 'FScoreMultiplierRow::MonsterDamagePoints' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, PlayerKills) == 0x000018, "Member 'FScoreMultiplierRow::PlayerKills' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, WoodGathered) == 0x00001C, "Member 'FScoreMultiplierRow::WoodGathered' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, StoneGathered) == 0x000020, "Member 'FScoreMultiplierRow::StoneGathered' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, MetalGathered) == 0x000024, "Member 'FScoreMultiplierRow::MetalGathered' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, Deaths) == 0x000028, "Member 'FScoreMultiplierRow::Deaths' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsBuilt) == 0x00002C, "Member 'FScoreMultiplierRow::BuildingsBuilt' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsBuilt_Wood) == 0x000030, "Member 'FScoreMultiplierRow::BuildingsBuilt_Wood' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsBuilt_Stone) == 0x000034, "Member 'FScoreMultiplierRow::BuildingsBuilt_Stone' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsBuilt_Metal) == 0x000038, "Member 'FScoreMultiplierRow::BuildingsBuilt_Metal' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Wood2) == 0x00003C, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Wood2' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Wood3) == 0x000040, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Wood3' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Stone2) == 0x000044, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Stone2' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Stone3) == 0x000048, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Stone3' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Metal2) == 0x00004C, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Metal2' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsUpgraded_Metal3) == 0x000050, "Member 'FScoreMultiplierRow::BuildingsUpgraded_Metal3' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, BuildingsDestroyed) == 0x000054, "Member 'FScoreMultiplierRow::BuildingsDestroyed' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, Repair_Wood) == 0x000058, "Member 'FScoreMultiplierRow::Repair_Wood' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, Repair_Stone) == 0x00005C, "Member 'FScoreMultiplierRow::Repair_Stone' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, Repair_Metal) == 0x000060, "Member 'FScoreMultiplierRow::Repair_Metal' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, FlagsCaptured) == 0x000064, "Member 'FScoreMultiplierRow::FlagsCaptured' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, FlagsReturned) == 0x000068, "Member 'FScoreMultiplierRow::FlagsReturned' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, ContainersLooted) == 0x00006C, "Member 'FScoreMultiplierRow::ContainersLooted' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, CraftingPoints) == 0x000070, "Member 'FScoreMultiplierRow::CraftingPoints' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, TrapPlacementPoints) == 0x000074, "Member 'FScoreMultiplierRow::TrapPlacementPoints' has a wrong offset!");
static_assert(offsetof(FScoreMultiplierRow, TrapActivationPoints) == 0x000078, "Member 'FScoreMultiplierRow::TrapActivationPoints' has a wrong offset!");

// ScriptStruct FortniteGame.FortReplicatedStatMapping
// 0x0010 (0x0010 - 0x0000)
struct FFortReplicatedStatMapping final
{
public:
	EStatCategory                                 StatCategory;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0004(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortReplicatedStatMapping) == 0x000004, "Wrong alignment on FFortReplicatedStatMapping");
static_assert(sizeof(FFortReplicatedStatMapping) == 0x000010, "Wrong size on FFortReplicatedStatMapping");
static_assert(offsetof(FFortReplicatedStatMapping, StatCategory) == 0x000000, "Member 'FFortReplicatedStatMapping::StatCategory' has a wrong offset!");
static_assert(offsetof(FFortReplicatedStatMapping, DisplayName) == 0x000004, "Member 'FFortReplicatedStatMapping::DisplayName' has a wrong offset!");

// ScriptStruct FortniteGame.FortAbilityTagRelationship
// 0x0038 (0x0038 - 0x0000)
struct FFortAbilityTagRelationship final
{
public:
	struct FGameplayTag                           AbilityTag;                                        // 0x0000(0x0008)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityTagsToBlock;                                // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityTagsToCancel;                               // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAbilityTagRelationship) == 0x000004, "Wrong alignment on FFortAbilityTagRelationship");
static_assert(sizeof(FFortAbilityTagRelationship) == 0x000038, "Wrong size on FFortAbilityTagRelationship");
static_assert(offsetof(FFortAbilityTagRelationship, AbilityTag) == 0x000000, "Member 'FFortAbilityTagRelationship::AbilityTag' has a wrong offset!");
static_assert(offsetof(FFortAbilityTagRelationship, AbilityTagsToBlock) == 0x000008, "Member 'FFortAbilityTagRelationship::AbilityTagsToBlock' has a wrong offset!");
static_assert(offsetof(FFortAbilityTagRelationship, AbilityTagsToCancel) == 0x000020, "Member 'FFortAbilityTagRelationship::AbilityTagsToCancel' has a wrong offset!");

// ScriptStruct FortniteGame.ItemAndCount
// 0x0008 (0x0008 - 0x0000)
struct FItemAndCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItemDefinition*                    Item;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemAndCount) == 0x000004, "Wrong alignment on FItemAndCount");
static_assert(sizeof(FItemAndCount) == 0x000008, "Wrong size on FItemAndCount");
static_assert(offsetof(FItemAndCount, Count) == 0x000000, "Member 'FItemAndCount::Count' has a wrong offset!");
static_assert(offsetof(FItemAndCount, Item) == 0x000004, "Member 'FItemAndCount::Item' has a wrong offset!");

// ScriptStruct FortniteGame.GameDifficultyInfo
// 0x0048 (0x0048 - 0x0000)
struct FGameDifficultyInfo final : public FTableRowBase
{
public:
	float                                         GrowthDLStart;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrowthDLCap;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LootLevel;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbsoluteDifficulty;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelativeDifficulty;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredRating;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PvPRating;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedRating;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreBonus;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XPMult;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LootTierGroup;                                     // 0x0028(0x000C)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ThreatDisplayName;                                 // 0x0034(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   ColorParamName;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameDifficultyInfo) == 0x000004, "Wrong alignment on FGameDifficultyInfo");
static_assert(sizeof(FGameDifficultyInfo) == 0x000048, "Wrong size on FGameDifficultyInfo");
static_assert(offsetof(FGameDifficultyInfo, GrowthDLStart) == 0x000000, "Member 'FGameDifficultyInfo::GrowthDLStart' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, GrowthDLCap) == 0x000004, "Member 'FGameDifficultyInfo::GrowthDLCap' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, LootLevel) == 0x000008, "Member 'FGameDifficultyInfo::LootLevel' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, AbsoluteDifficulty) == 0x00000C, "Member 'FGameDifficultyInfo::AbsoluteDifficulty' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, RelativeDifficulty) == 0x000010, "Member 'FGameDifficultyInfo::RelativeDifficulty' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, RequiredRating) == 0x000014, "Member 'FGameDifficultyInfo::RequiredRating' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, PvPRating) == 0x000018, "Member 'FGameDifficultyInfo::PvPRating' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, RecommendedRating) == 0x00001C, "Member 'FGameDifficultyInfo::RecommendedRating' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, ScoreBonus) == 0x000020, "Member 'FGameDifficultyInfo::ScoreBonus' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, XPMult) == 0x000024, "Member 'FGameDifficultyInfo::XPMult' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, LootTierGroup) == 0x000028, "Member 'FGameDifficultyInfo::LootTierGroup' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, ThreatDisplayName) == 0x000034, "Member 'FGameDifficultyInfo::ThreatDisplayName' has a wrong offset!");
static_assert(offsetof(FGameDifficultyInfo, ColorParamName) == 0x000040, "Member 'FGameDifficultyInfo::ColorParamName' has a wrong offset!");

// ScriptStruct FortniteGame.FortRegisteredPlayer
// 0x0018 (0x0018 - 0x0000)
struct FFortRegisteredPlayer final
{
public:
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0000(0x0008)(NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0008(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInitialPlayer;                                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortRegisteredPlayer) == 0x000004, "Wrong alignment on FFortRegisteredPlayer");
static_assert(sizeof(FFortRegisteredPlayer) == 0x000018, "Wrong size on FFortRegisteredPlayer");
static_assert(offsetof(FFortRegisteredPlayer, UniqueId) == 0x000000, "Member 'FFortRegisteredPlayer::UniqueId' has a wrong offset!");
static_assert(offsetof(FFortRegisteredPlayer, PlayerName) == 0x000008, "Member 'FFortRegisteredPlayer::PlayerName' has a wrong offset!");
static_assert(offsetof(FFortRegisteredPlayer, bIsInitialPlayer) == 0x000014, "Member 'FFortRegisteredPlayer::bIsInitialPlayer' has a wrong offset!");

// ScriptStruct FortniteGame.TurnTransitionData
// 0x003C (0x003C - 0x0000)
struct FTurnTransitionData final
{
public:
	class FName                                   MontageSectionName;                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinYawAngle;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxYawAngle;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnRate;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredGameplayTags;                              // 0x0014(0x0018)(Edit, NativeAccessSpecifierPublic)
	int32                                         PriorityLevel;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTurnFloatRange                        SpeedConstraintRange;                              // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableSpeedConstraint;                            // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSkipTransitionInCrowd;                            // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTurnTransitionData) == 0x000004, "Wrong alignment on FTurnTransitionData");
static_assert(sizeof(FTurnTransitionData) == 0x00003C, "Wrong size on FTurnTransitionData");
static_assert(offsetof(FTurnTransitionData, MontageSectionName) == 0x000000, "Member 'FTurnTransitionData::MontageSectionName' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, MinYawAngle) == 0x000008, "Member 'FTurnTransitionData::MinYawAngle' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, MaxYawAngle) == 0x00000C, "Member 'FTurnTransitionData::MaxYawAngle' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, TurnRate) == 0x000010, "Member 'FTurnTransitionData::TurnRate' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, RequiredGameplayTags) == 0x000014, "Member 'FTurnTransitionData::RequiredGameplayTags' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, PriorityLevel) == 0x00002C, "Member 'FTurnTransitionData::PriorityLevel' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, SpeedConstraintRange) == 0x000030, "Member 'FTurnTransitionData::SpeedConstraintRange' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, bEnableSpeedConstraint) == 0x000038, "Member 'FTurnTransitionData::bEnableSpeedConstraint' has a wrong offset!");
static_assert(offsetof(FTurnTransitionData, bSkipTransitionInCrowd) == 0x000039, "Member 'FTurnTransitionData::bSkipTransitionInCrowd' has a wrong offset!");

// ScriptStruct FortniteGame.FortActionKeyMapping
// 0x003C (0x003C - 0x0000)
struct FFortActionKeyMapping final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LocalizedName;                                     // 0x0008(0x000C)(NativeAccessSpecifierPublic)
	struct FKey                                   KeyBind1;                                          // 0x0014(0x0010)(NativeAccessSpecifierPublic)
	struct FKey                                   KeyBind2;                                          // 0x0024(0x0010)(NativeAccessSpecifierPublic)
	float                                         InputScale;                                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAxisMapping;                                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortActionKeyMapping) == 0x000004, "Wrong alignment on FFortActionKeyMapping");
static_assert(sizeof(FFortActionKeyMapping) == 0x00003C, "Wrong size on FFortActionKeyMapping");
static_assert(offsetof(FFortActionKeyMapping, ActionName) == 0x000000, "Member 'FFortActionKeyMapping::ActionName' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, LocalizedName) == 0x000008, "Member 'FFortActionKeyMapping::LocalizedName' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, KeyBind1) == 0x000014, "Member 'FFortActionKeyMapping::KeyBind1' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, KeyBind2) == 0x000024, "Member 'FFortActionKeyMapping::KeyBind2' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, InputScale) == 0x000034, "Member 'FFortActionKeyMapping::InputScale' has a wrong offset!");
static_assert(offsetof(FFortActionKeyMapping, bIsAxisMapping) == 0x000038, "Member 'FFortActionKeyMapping::bIsAxisMapping' has a wrong offset!");

// ScriptStruct FortniteGame.FortHealthBarComponentData
// 0x000C (0x000C - 0x0000)
struct FFortHealthBarComponentData final
{
public:
	class FText                                   DisplayText;                                       // 0x0000(0x000C)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHealthBarComponentData) == 0x000004, "Wrong alignment on FFortHealthBarComponentData");
static_assert(sizeof(FFortHealthBarComponentData) == 0x00000C, "Wrong size on FFortHealthBarComponentData");
static_assert(offsetof(FFortHealthBarComponentData, DisplayText) == 0x000000, "Member 'FFortHealthBarComponentData::DisplayText' has a wrong offset!");

// ScriptStruct FortniteGame.HomebaseBuildingDataTableRow
// 0x0058 (0x0058 - 0x0000)
struct FHomebaseBuildingDataTableRow final : public FTableRowBase
{
public:
	int32                                         MinRating;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Attribute;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Operation;                                         // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredSourceTags;                                // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredTargetTags;                                // 0x0024(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ApplicationRequiredTags;                           // 0x0030(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveTable*                            MagnitudeDataTable;                                // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MagnitudeCategory;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PowerPointValue;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PowerPointClassTagFilter;                          // 0x004C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomebaseBuildingDataTableRow) == 0x000004, "Wrong alignment on FHomebaseBuildingDataTableRow");
static_assert(sizeof(FHomebaseBuildingDataTableRow) == 0x000058, "Wrong size on FHomebaseBuildingDataTableRow");
static_assert(offsetof(FHomebaseBuildingDataTableRow, MinRating) == 0x000000, "Member 'FHomebaseBuildingDataTableRow::MinRating' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingDataTableRow, Attribute) == 0x000004, "Member 'FHomebaseBuildingDataTableRow::Attribute' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingDataTableRow, Operation) == 0x00000C, "Member 'FHomebaseBuildingDataTableRow::Operation' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingDataTableRow, Magnitude) == 0x000014, "Member 'FHomebaseBuildingDataTableRow::Magnitude' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingDataTableRow, RequiredSourceTags) == 0x000018, "Member 'FHomebaseBuildingDataTableRow::RequiredSourceTags' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingDataTableRow, RequiredTargetTags) == 0x000024, "Member 'FHomebaseBuildingDataTableRow::RequiredTargetTags' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingDataTableRow, ApplicationRequiredTags) == 0x000030, "Member 'FHomebaseBuildingDataTableRow::ApplicationRequiredTags' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingDataTableRow, MagnitudeDataTable) == 0x00003C, "Member 'FHomebaseBuildingDataTableRow::MagnitudeDataTable' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingDataTableRow, MagnitudeCategory) == 0x000040, "Member 'FHomebaseBuildingDataTableRow::MagnitudeCategory' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingDataTableRow, PowerPointValue) == 0x000048, "Member 'FHomebaseBuildingDataTableRow::PowerPointValue' has a wrong offset!");
static_assert(offsetof(FHomebaseBuildingDataTableRow, PowerPointClassTagFilter) == 0x00004C, "Member 'FHomebaseBuildingDataTableRow::PowerPointClassTagFilter' has a wrong offset!");

// ScriptStruct FortniteGame.MissionTimerData
// 0x0024 (0x0024 - 0x0000)
struct FMissionTimerData final
{
public:
	bool                                          bTimerIsPaused;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OriginalTimePeriod;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReplicatedRemainingTime;                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClientRemainingTime;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x14];                                      // 0x0010(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMissionTimerData) == 0x000004, "Wrong alignment on FMissionTimerData");
static_assert(sizeof(FMissionTimerData) == 0x000024, "Wrong size on FMissionTimerData");
static_assert(offsetof(FMissionTimerData, bTimerIsPaused) == 0x000000, "Member 'FMissionTimerData::bTimerIsPaused' has a wrong offset!");
static_assert(offsetof(FMissionTimerData, OriginalTimePeriod) == 0x000004, "Member 'FMissionTimerData::OriginalTimePeriod' has a wrong offset!");
static_assert(offsetof(FMissionTimerData, ReplicatedRemainingTime) == 0x000008, "Member 'FMissionTimerData::ReplicatedRemainingTime' has a wrong offset!");
static_assert(offsetof(FMissionTimerData, ClientRemainingTime) == 0x00000C, "Member 'FMissionTimerData::ClientRemainingTime' has a wrong offset!");

// ScriptStruct FortniteGame.ItemCategoryMappingData
// 0x0010 (0x0010 - 0x0000)
struct FItemCategoryMappingData final
{
public:
	EFortItemType                                 CategoryType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CategoryName;                                      // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemCategoryMappingData) == 0x000004, "Wrong alignment on FItemCategoryMappingData");
static_assert(sizeof(FItemCategoryMappingData) == 0x000010, "Wrong size on FItemCategoryMappingData");
static_assert(offsetof(FItemCategoryMappingData, CategoryType) == 0x000000, "Member 'FItemCategoryMappingData::CategoryType' has a wrong offset!");
static_assert(offsetof(FItemCategoryMappingData, CategoryName) == 0x000004, "Member 'FItemCategoryMappingData::CategoryName' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostPrestigeEffects
// 0x000C (0x000C - 0x0000)
struct FOutpostPrestigeEffects final
{
public:
	TArray<TSubclassOf<class UGameplayEffect>>    EnemyPrestigeEffect;                               // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostPrestigeEffects) == 0x000004, "Wrong alignment on FOutpostPrestigeEffects");
static_assert(sizeof(FOutpostPrestigeEffects) == 0x00000C, "Wrong size on FOutpostPrestigeEffects");
static_assert(offsetof(FOutpostPrestigeEffects, EnemyPrestigeEffect) == 0x000000, "Member 'FOutpostPrestigeEffects::EnemyPrestigeEffect' has a wrong offset!");

// ScriptStruct FortniteGame.FortCategoryTableRow
// 0x0010 (0x0010 - 0x0000)
struct FFortCategoryTableRow final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCategoryTableRow) == 0x000004, "Wrong alignment on FFortCategoryTableRow");
static_assert(sizeof(FFortCategoryTableRow) == 0x000010, "Wrong size on FFortCategoryTableRow");
static_assert(offsetof(FFortCategoryTableRow, Name) == 0x000000, "Member 'FFortCategoryTableRow::Name' has a wrong offset!");
static_assert(offsetof(FFortCategoryTableRow, SortPriority) == 0x00000C, "Member 'FFortCategoryTableRow::SortPriority' has a wrong offset!");

// ScriptStruct FortniteGame.ConsumeEffectData
// 0x0018 (0x0018 - 0x0000)
struct FConsumeEffectData final
{
public:
	TSubclassOf<class UGameplayEffect>            EffectClass;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Level;                                             // 0x0004(0x0014)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConsumeEffectData) == 0x000004, "Wrong alignment on FConsumeEffectData");
static_assert(sizeof(FConsumeEffectData) == 0x000018, "Wrong size on FConsumeEffectData");
static_assert(offsetof(FConsumeEffectData, EffectClass) == 0x000000, "Member 'FConsumeEffectData::EffectClass' has a wrong offset!");
static_assert(offsetof(FConsumeEffectData, Level) == 0x000004, "Member 'FConsumeEffectData::Level' has a wrong offset!");

// ScriptStruct FortniteGame.FortLootTierData
// 0x007C (0x007C - 0x0000)
struct FFortLootTierData final : public FTableRowBase
{
public:
	class FName                                   TierGroup;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELootQuotaLevel                               QuotaLevel;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LootTier;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinWorldLevel;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWorldLevel;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StreakBreakerCurrency;                             // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreakBreakerPointsMin;                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreakBreakerPointsMax;                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StreakBreakerPointsSpend;                          // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RequiredTag;                                       // 0x0034(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LootPackage;                                       // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LootPreviewPackage;                                // 0x0044(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumLootPackageDrops;                               // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveTable*                            LootPackageCategoryData;                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LootPackageCategoryWeightRowName;                  // 0x0054(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LootPackageCategoryMinRowName;                     // 0x005C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LootPackageCategoryMaxRowName;                     // 0x0064(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowBonusLootDrops;                              // 0x006C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Annotation;                                        // 0x0070(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortLootTierData) == 0x000004, "Wrong alignment on FFortLootTierData");
static_assert(sizeof(FFortLootTierData) == 0x00007C, "Wrong size on FFortLootTierData");
static_assert(offsetof(FFortLootTierData, TierGroup) == 0x000000, "Member 'FFortLootTierData::TierGroup' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, Weight) == 0x000008, "Member 'FFortLootTierData::Weight' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, QuotaLevel) == 0x00000C, "Member 'FFortLootTierData::QuotaLevel' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootTier) == 0x000010, "Member 'FFortLootTierData::LootTier' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, MinWorldLevel) == 0x000014, "Member 'FFortLootTierData::MinWorldLevel' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, MaxWorldLevel) == 0x000018, "Member 'FFortLootTierData::MaxWorldLevel' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, StreakBreakerCurrency) == 0x00001C, "Member 'FFortLootTierData::StreakBreakerCurrency' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, StreakBreakerPointsMin) == 0x000028, "Member 'FFortLootTierData::StreakBreakerPointsMin' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, StreakBreakerPointsMax) == 0x00002C, "Member 'FFortLootTierData::StreakBreakerPointsMax' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, StreakBreakerPointsSpend) == 0x000030, "Member 'FFortLootTierData::StreakBreakerPointsSpend' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, RequiredTag) == 0x000034, "Member 'FFortLootTierData::RequiredTag' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPackage) == 0x00003C, "Member 'FFortLootTierData::LootPackage' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPreviewPackage) == 0x000044, "Member 'FFortLootTierData::LootPreviewPackage' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, NumLootPackageDrops) == 0x00004C, "Member 'FFortLootTierData::NumLootPackageDrops' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPackageCategoryData) == 0x000050, "Member 'FFortLootTierData::LootPackageCategoryData' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPackageCategoryWeightRowName) == 0x000054, "Member 'FFortLootTierData::LootPackageCategoryWeightRowName' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPackageCategoryMinRowName) == 0x00005C, "Member 'FFortLootTierData::LootPackageCategoryMinRowName' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, LootPackageCategoryMaxRowName) == 0x000064, "Member 'FFortLootTierData::LootPackageCategoryMaxRowName' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, bAllowBonusLootDrops) == 0x00006C, "Member 'FFortLootTierData::bAllowBonusLootDrops' has a wrong offset!");
static_assert(offsetof(FFortLootTierData, Annotation) == 0x000070, "Member 'FFortLootTierData::Annotation' has a wrong offset!");

// ScriptStruct FortniteGame.DepositedResources
// 0x0010 (0x0010 - 0x0000)
struct FDepositedResources final
{
public:
	class FString                                 TemplateId;                                        // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDepositedResources) == 0x000004, "Wrong alignment on FDepositedResources");
static_assert(sizeof(FDepositedResources) == 0x000010, "Wrong size on FDepositedResources");
static_assert(offsetof(FDepositedResources, TemplateId) == 0x000000, "Member 'FDepositedResources::TemplateId' has a wrong offset!");
static_assert(offsetof(FDepositedResources, Quantity) == 0x00000C, "Member 'FDepositedResources::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.FortTrapStats
// 0x0014 (0x0100 - 0x00EC)
struct FFortTrapStats final : public FFortBaseWeaponStats
{
public:
	float                                         ArmTime;                                           // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireDelay;                                         // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageDelay;                                       // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlacementScore;                                    // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivationScore;                                   // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTrapStats) == 0x000004, "Wrong alignment on FFortTrapStats");
static_assert(sizeof(FFortTrapStats) == 0x000100, "Wrong size on FFortTrapStats");
static_assert(offsetof(FFortTrapStats, ArmTime) == 0x0000EC, "Member 'FFortTrapStats::ArmTime' has a wrong offset!");
static_assert(offsetof(FFortTrapStats, FireDelay) == 0x0000F0, "Member 'FFortTrapStats::FireDelay' has a wrong offset!");
static_assert(offsetof(FFortTrapStats, DamageDelay) == 0x0000F4, "Member 'FFortTrapStats::DamageDelay' has a wrong offset!");
static_assert(offsetof(FFortTrapStats, PlacementScore) == 0x0000F8, "Member 'FFortTrapStats::PlacementScore' has a wrong offset!");
static_assert(offsetof(FFortTrapStats, ActivationScore) == 0x0000FC, "Member 'FFortTrapStats::ActivationScore' has a wrong offset!");

// ScriptStruct FortniteGame.FortTileLootData
// 0x00E0 (0x00E0 - 0x0000)
struct FFortTileLootData final
{
public:
	struct FFortLootQuotaData                     LootQuotas[0x8];                                   // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	int32                                         LootDrops[0x8];                                    // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortTileLootData) == 0x000004, "Wrong alignment on FFortTileLootData");
static_assert(sizeof(FFortTileLootData) == 0x0000E0, "Wrong size on FFortTileLootData");
static_assert(offsetof(FFortTileLootData, LootQuotas) == 0x000000, "Member 'FFortTileLootData::LootQuotas' has a wrong offset!");
static_assert(offsetof(FFortTileLootData, LootDrops) == 0x0000C0, "Member 'FFortTileLootData::LootDrops' has a wrong offset!");

// ScriptStruct FortniteGame.FortMeleeWeaponStats
// 0x0024 (0x0110 - 0x00EC)
struct FFortMeleeWeaponStats final : public FFortBaseWeaponStats
{
public:
	float                                         RangeVSEnemies;                                    // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ConeYawAngle;                                      // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ConePitchAngle;                                    // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SwingPlaySpeed;                                    // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BuildingConeAngle;                                 // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BuildingConeAnglePitch;                            // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RangeVSBuildings2D;                                // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RangeVSBuildingsZ;                                 // 0x0108(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RangeVSWeakSpots;                                  // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFortMeleeWeaponStats) == 0x000004, "Wrong alignment on FFortMeleeWeaponStats");
static_assert(sizeof(FFortMeleeWeaponStats) == 0x000110, "Wrong size on FFortMeleeWeaponStats");
static_assert(offsetof(FFortMeleeWeaponStats, RangeVSEnemies) == 0x0000EC, "Member 'FFortMeleeWeaponStats::RangeVSEnemies' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, ConeYawAngle) == 0x0000F0, "Member 'FFortMeleeWeaponStats::ConeYawAngle' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, ConePitchAngle) == 0x0000F4, "Member 'FFortMeleeWeaponStats::ConePitchAngle' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, SwingPlaySpeed) == 0x0000F8, "Member 'FFortMeleeWeaponStats::SwingPlaySpeed' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, BuildingConeAngle) == 0x0000FC, "Member 'FFortMeleeWeaponStats::BuildingConeAngle' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, BuildingConeAnglePitch) == 0x000100, "Member 'FFortMeleeWeaponStats::BuildingConeAnglePitch' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, RangeVSBuildings2D) == 0x000104, "Member 'FFortMeleeWeaponStats::RangeVSBuildings2D' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, RangeVSBuildingsZ) == 0x000108, "Member 'FFortMeleeWeaponStats::RangeVSBuildingsZ' has a wrong offset!");
static_assert(offsetof(FFortMeleeWeaponStats, RangeVSWeakSpots) == 0x00010C, "Member 'FFortMeleeWeaponStats::RangeVSWeakSpots' has a wrong offset!");

// ScriptStruct FortniteGame.FortWorldProfileUpdateRequest
// 0x0048 (0x0048 - 0x0000)
struct FFortWorldProfileUpdateRequest final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfRequests;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x3C];                                       // 0x000C(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortWorldProfileUpdateRequest) == 0x000004, "Wrong alignment on FFortWorldProfileUpdateRequest");
static_assert(sizeof(FFortWorldProfileUpdateRequest) == 0x000048, "Wrong size on FFortWorldProfileUpdateRequest");
static_assert(offsetof(FFortWorldProfileUpdateRequest, NumberOfRequests) == 0x000008, "Member 'FFortWorldProfileUpdateRequest::NumberOfRequests' has a wrong offset!");

// ScriptStruct FortniteGame.FortWorldPlayerLoadout
// 0x0054 (0x0054 - 0x0000)
struct FFortWorldPlayerLoadout final
{
public:
	bool                                          bPlayerIsNew;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PinnedSchematicInstances;                          // 0x0004(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FQuickBar                              PrimaryQuickBarRecord;                             // 0x0010(0x0020)(NativeAccessSpecifierPublic)
	struct FQuickBar                              SecondaryQuickBarRecord;                           // 0x0030(0x0020)(NativeAccessSpecifierPublic)
	int32                                         ZonesCompleted;                                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortWorldPlayerLoadout) == 0x000004, "Wrong alignment on FFortWorldPlayerLoadout");
static_assert(sizeof(FFortWorldPlayerLoadout) == 0x000054, "Wrong size on FFortWorldPlayerLoadout");
static_assert(offsetof(FFortWorldPlayerLoadout, bPlayerIsNew) == 0x000000, "Member 'FFortWorldPlayerLoadout::bPlayerIsNew' has a wrong offset!");
static_assert(offsetof(FFortWorldPlayerLoadout, PinnedSchematicInstances) == 0x000004, "Member 'FFortWorldPlayerLoadout::PinnedSchematicInstances' has a wrong offset!");
static_assert(offsetof(FFortWorldPlayerLoadout, PrimaryQuickBarRecord) == 0x000010, "Member 'FFortWorldPlayerLoadout::PrimaryQuickBarRecord' has a wrong offset!");
static_assert(offsetof(FFortWorldPlayerLoadout, SecondaryQuickBarRecord) == 0x000030, "Member 'FFortWorldPlayerLoadout::SecondaryQuickBarRecord' has a wrong offset!");
static_assert(offsetof(FFortWorldPlayerLoadout, ZonesCompleted) == 0x000050, "Member 'FFortWorldPlayerLoadout::ZonesCompleted' has a wrong offset!");

// ScriptStruct FortniteGame.NavAgentData
// 0x002C (0x002C - 0x0000)
struct FNavAgentData final
{
public:
	class FName                                   AgentName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   AgentAttackCount;                                  // 0x0008(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   DamageHandle;                                      // 0x0014(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    SurfaceDamageRatioHandle;                          // 0x0020(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNavAgentData) == 0x000004, "Wrong alignment on FNavAgentData");
static_assert(sizeof(FNavAgentData) == 0x00002C, "Wrong size on FNavAgentData");
static_assert(offsetof(FNavAgentData, AgentName) == 0x000000, "Member 'FNavAgentData::AgentName' has a wrong offset!");
static_assert(offsetof(FNavAgentData, AgentAttackCount) == 0x000008, "Member 'FNavAgentData::AgentAttackCount' has a wrong offset!");
static_assert(offsetof(FNavAgentData, DamageHandle) == 0x000014, "Member 'FNavAgentData::DamageHandle' has a wrong offset!");
static_assert(offsetof(FNavAgentData, SurfaceDamageRatioHandle) == 0x000020, "Member 'FNavAgentData::SurfaceDamageRatioHandle' has a wrong offset!");

// ScriptStruct FortniteGame.FortDifficultyOptionBudget
// 0x0024 (0x0024 - 0x0000)
struct FFortDifficultyOptionBudget final
{
public:
	struct FGameplayTagContainer                  BudgetTypeTags;                                    // 0x0000(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   DifficultyOptionPointsCurve;                       // 0x0018(0x000C)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDifficultyOptionBudget) == 0x000004, "Wrong alignment on FFortDifficultyOptionBudget");
static_assert(sizeof(FFortDifficultyOptionBudget) == 0x000024, "Wrong size on FFortDifficultyOptionBudget");
static_assert(offsetof(FFortDifficultyOptionBudget, BudgetTypeTags) == 0x000000, "Member 'FFortDifficultyOptionBudget::BudgetTypeTags' has a wrong offset!");
static_assert(offsetof(FFortDifficultyOptionBudget, DifficultyOptionPointsCurve) == 0x000018, "Member 'FFortDifficultyOptionBudget::DifficultyOptionPointsCurve' has a wrong offset!");

// ScriptStruct FortniteGame.FortPossibleMission
// 0x0024 (0x0024 - 0x0000)
struct FFortPossibleMission final
{
public:
	TSoftObjectPtr<class UFortMissionInfo>        MissionInfo;                                       // 0x0000(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinAlwaysGenerated;                                // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPrototype;                                      // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortPossibleMission) == 0x000004, "Wrong alignment on FFortPossibleMission");
static_assert(sizeof(FFortPossibleMission) == 0x000024, "Wrong size on FFortPossibleMission");
static_assert(offsetof(FFortPossibleMission, MissionInfo) == 0x000000, "Member 'FFortPossibleMission::MissionInfo' has a wrong offset!");
static_assert(offsetof(FFortPossibleMission, Weight) == 0x000018, "Member 'FFortPossibleMission::Weight' has a wrong offset!");
static_assert(offsetof(FFortPossibleMission, MinAlwaysGenerated) == 0x00001C, "Member 'FFortPossibleMission::MinAlwaysGenerated' has a wrong offset!");
static_assert(offsetof(FFortPossibleMission, bIsPrototype) == 0x000020, "Member 'FFortPossibleMission::bIsPrototype' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionInfoOption
// 0x001C (0x001C - 0x0000)
struct FFortMissionInfoOption final
{
public:
	TSoftObjectPtr<class UFortMissionInfo>        MissionInfo;                                       // 0x0000(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDifficultyLevel;                                // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionInfoOption) == 0x000004, "Wrong alignment on FFortMissionInfoOption");
static_assert(sizeof(FFortMissionInfoOption) == 0x00001C, "Wrong size on FFortMissionInfoOption");
static_assert(offsetof(FFortMissionInfoOption, MissionInfo) == 0x000000, "Member 'FFortMissionInfoOption::MissionInfo' has a wrong offset!");
static_assert(offsetof(FFortMissionInfoOption, MinDifficultyLevel) == 0x000018, "Member 'FFortMissionInfoOption::MinDifficultyLevel' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionUIActorHandle
// 0x0030 (0x0030 - 0x0000)
struct FFortMissionUIActorHandle final
{
public:
	TWeakObjectPtr<class AActor>                  AttachedActor;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FVector                                AttachmentOffset;                                  // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxVisibleDistance;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MissionGuid;                                       // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UFortMissionInfoIndicator> MissionUIIndicator;                                // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionUIActorHandle) == 0x000004, "Wrong alignment on FFortMissionUIActorHandle");
static_assert(sizeof(FFortMissionUIActorHandle) == 0x000030, "Wrong size on FFortMissionUIActorHandle");
static_assert(offsetof(FFortMissionUIActorHandle, AttachedActor) == 0x000000, "Member 'FFortMissionUIActorHandle::AttachedActor' has a wrong offset!");
static_assert(offsetof(FFortMissionUIActorHandle, AttachmentOffset) == 0x000008, "Member 'FFortMissionUIActorHandle::AttachmentOffset' has a wrong offset!");
static_assert(offsetof(FFortMissionUIActorHandle, MaxVisibleDistance) == 0x000014, "Member 'FFortMissionUIActorHandle::MaxVisibleDistance' has a wrong offset!");
static_assert(offsetof(FFortMissionUIActorHandle, MissionGuid) == 0x000018, "Member 'FFortMissionUIActorHandle::MissionGuid' has a wrong offset!");
static_assert(offsetof(FFortMissionUIActorHandle, MissionUIIndicator) == 0x000028, "Member 'FFortMissionUIActorHandle::MissionUIIndicator' has a wrong offset!");

// ScriptStruct FortniteGame.QueuedMusic
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FQueuedMusic final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQueuedMusic) == 0x000004, "Wrong alignment on FQueuedMusic");
static_assert(sizeof(FQueuedMusic) == 0x00000C, "Wrong size on FQueuedMusic");

// ScriptStruct FortniteGame.OutpostPrestigeEffectsPerTheater
// 0x0010 (0x0010 - 0x0000)
struct FOutpostPrestigeEffectsPerTheater final
{
public:
	int32                                         TheaterSlot;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOutpostPrestigeEffects                PrestigeEffects;                                   // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostPrestigeEffectsPerTheater) == 0x000004, "Wrong alignment on FOutpostPrestigeEffectsPerTheater");
static_assert(sizeof(FOutpostPrestigeEffectsPerTheater) == 0x000010, "Wrong size on FOutpostPrestigeEffectsPerTheater");
static_assert(offsetof(FOutpostPrestigeEffectsPerTheater, TheaterSlot) == 0x000000, "Member 'FOutpostPrestigeEffectsPerTheater::TheaterSlot' has a wrong offset!");
static_assert(offsetof(FOutpostPrestigeEffectsPerTheater, PrestigeEffects) == 0x000004, "Member 'FOutpostPrestigeEffectsPerTheater::PrestigeEffects' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostCraftingTableData
// 0x0014 (0x0014 - 0x0000)
struct FOutpostCraftingTableData final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequiredItems;                                     // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostCraftingTableData) == 0x000004, "Wrong alignment on FOutpostCraftingTableData");
static_assert(sizeof(FOutpostCraftingTableData) == 0x000014, "Wrong size on FOutpostCraftingTableData");
static_assert(offsetof(FOutpostCraftingTableData, Level) == 0x000000, "Member 'FOutpostCraftingTableData::Level' has a wrong offset!");
static_assert(offsetof(FOutpostCraftingTableData, ItemCount) == 0x000004, "Member 'FOutpostCraftingTableData::ItemCount' has a wrong offset!");
static_assert(offsetof(FOutpostCraftingTableData, RequiredItems) == 0x000008, "Member 'FOutpostCraftingTableData::RequiredItems' has a wrong offset!");

// ScriptStruct FortniteGame.OutpostDisintegrationData
// 0x001C (0x001C - 0x0000)
struct FOutpostDisintegrationData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortWorldItemDefinition> ItemDefinition;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisintegrationValue;                               // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutpostDisintegrationData) == 0x000004, "Wrong alignment on FOutpostDisintegrationData");
static_assert(sizeof(FOutpostDisintegrationData) == 0x00001C, "Wrong size on FOutpostDisintegrationData");
static_assert(offsetof(FOutpostDisintegrationData, ItemDefinition) == 0x000000, "Member 'FOutpostDisintegrationData::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FOutpostDisintegrationData, DisintegrationValue) == 0x000018, "Member 'FOutpostDisintegrationData::DisintegrationValue' has a wrong offset!");

// ScriptStruct FortniteGame.FortCameraModeOverride
// 0x0008 (0x0008 - 0x0000)
struct FFortCameraModeOverride final
{
public:
	TSubclassOf<class UFortCameraMode>            OriginalClass;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortCameraMode>            ClassOverride;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCameraModeOverride) == 0x000004, "Wrong alignment on FFortCameraModeOverride");
static_assert(sizeof(FFortCameraModeOverride) == 0x000008, "Wrong size on FFortCameraModeOverride");
static_assert(offsetof(FFortCameraModeOverride, OriginalClass) == 0x000000, "Member 'FFortCameraModeOverride::OriginalClass' has a wrong offset!");
static_assert(offsetof(FFortCameraModeOverride, ClassOverride) == 0x000004, "Member 'FFortCameraModeOverride::ClassOverride' has a wrong offset!");

// ScriptStruct FortniteGame.FortCameraPrototype
// 0x0020 (0x0020 - 0x0000)
struct FFortCameraPrototype final
{
public:
	class FName                                   PrototypeName;                                     // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrototypeDescription;                              // 0x0008(0x000C)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortCameraModeOverride>        ModeOverrides;                                     // 0x0014(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCameraPrototype) == 0x000004, "Wrong alignment on FFortCameraPrototype");
static_assert(sizeof(FFortCameraPrototype) == 0x000020, "Wrong size on FFortCameraPrototype");
static_assert(offsetof(FFortCameraPrototype, PrototypeName) == 0x000000, "Member 'FFortCameraPrototype::PrototypeName' has a wrong offset!");
static_assert(offsetof(FFortCameraPrototype, PrototypeDescription) == 0x000008, "Member 'FFortCameraPrototype::PrototypeDescription' has a wrong offset!");
static_assert(offsetof(FFortCameraPrototype, ModeOverrides) == 0x000014, "Member 'FFortCameraPrototype::ModeOverrides' has a wrong offset!");

// ScriptStruct FortniteGame.FortCameraInstanceEntry
// 0x000C (0x000C - 0x0000)
struct FFortCameraInstanceEntry final
{
public:
	TSubclassOf<class UFortCameraMode>            CameraClass;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ViewTarget;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortCameraMode*                        Camera;                                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortCameraInstanceEntry) == 0x000004, "Wrong alignment on FFortCameraInstanceEntry");
static_assert(sizeof(FFortCameraInstanceEntry) == 0x00000C, "Wrong size on FFortCameraInstanceEntry");
static_assert(offsetof(FFortCameraInstanceEntry, CameraClass) == 0x000000, "Member 'FFortCameraInstanceEntry::CameraClass' has a wrong offset!");
static_assert(offsetof(FFortCameraInstanceEntry, ViewTarget) == 0x000004, "Member 'FFortCameraInstanceEntry::ViewTarget' has a wrong offset!");
static_assert(offsetof(FFortCameraInstanceEntry, Camera) == 0x000008, "Member 'FFortCameraInstanceEntry::Camera' has a wrong offset!");

// ScriptStruct FortniteGame.AIDirectorDebugInfo
// 0x0020 (0x0020 - 0x0000)
struct FAIDirectorDebugInfo final
{
public:
	float                                         TimeStamp;                                         // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 DebugGraphData;                                    // 0x0004(0x000C)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIDirectorDebugInfo) == 0x000004, "Wrong alignment on FAIDirectorDebugInfo");
static_assert(sizeof(FAIDirectorDebugInfo) == 0x000020, "Wrong size on FAIDirectorDebugInfo");
static_assert(offsetof(FAIDirectorDebugInfo, TimeStamp) == 0x000000, "Member 'FAIDirectorDebugInfo::TimeStamp' has a wrong offset!");
static_assert(offsetof(FAIDirectorDebugInfo, DebugGraphData) == 0x000004, "Member 'FAIDirectorDebugInfo::DebugGraphData' has a wrong offset!");

// ScriptStruct FortniteGame.MorphValuePair
// 0x000C (0x000C - 0x0000)
struct FMorphValuePair final
{
public:
	class FName                                   MorphName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MorphValue;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMorphValuePair) == 0x000004, "Wrong alignment on FMorphValuePair");
static_assert(sizeof(FMorphValuePair) == 0x00000C, "Wrong size on FMorphValuePair");
static_assert(offsetof(FMorphValuePair, MorphName) == 0x000000, "Member 'FMorphValuePair::MorphName' has a wrong offset!");
static_assert(offsetof(FMorphValuePair, MorphValue) == 0x000008, "Member 'FMorphValuePair::MorphValue' has a wrong offset!");

// ScriptStruct FortniteGame.AccumulatedItemEntry
// 0x0008 (0x0008 - 0x0000)
struct FAccumulatedItemEntry final
{
public:
	class UFortWorldItemDefinition*               ItemDefinition;                                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccumulatedItemEntry) == 0x000004, "Wrong alignment on FAccumulatedItemEntry");
static_assert(sizeof(FAccumulatedItemEntry) == 0x000008, "Wrong size on FAccumulatedItemEntry");
static_assert(offsetof(FAccumulatedItemEntry, ItemDefinition) == 0x000000, "Member 'FAccumulatedItemEntry::ItemDefinition' has a wrong offset!");
static_assert(offsetof(FAccumulatedItemEntry, Quantity) == 0x000004, "Member 'FAccumulatedItemEntry::Quantity' has a wrong offset!");

// ScriptStruct FortniteGame.GoalDistanceData
// 0x0054 (0x0054 - 0x0000)
struct FGoalDistanceData final
{
public:
	bool                                          bIgnoreScreeningDistance;                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIDataProviderFloatValue              ScreeningTestMaxDistance;                          // 0x0004(0x001C)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             TestScoreCurve;                                    // 0x0020(0x0018)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIDataProviderFloatValue              CurveDistanceScale;                                // 0x0038(0x001C)(Edit, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoalDistanceData) == 0x000004, "Wrong alignment on FGoalDistanceData");
static_assert(sizeof(FGoalDistanceData) == 0x000054, "Wrong size on FGoalDistanceData");
static_assert(offsetof(FGoalDistanceData, bIgnoreScreeningDistance) == 0x000000, "Member 'FGoalDistanceData::bIgnoreScreeningDistance' has a wrong offset!");
static_assert(offsetof(FGoalDistanceData, ScreeningTestMaxDistance) == 0x000004, "Member 'FGoalDistanceData::ScreeningTestMaxDistance' has a wrong offset!");
static_assert(offsetof(FGoalDistanceData, TestScoreCurve) == 0x000020, "Member 'FGoalDistanceData::TestScoreCurve' has a wrong offset!");
static_assert(offsetof(FGoalDistanceData, CurveDistanceScale) == 0x000038, "Member 'FGoalDistanceData::CurveDistanceScale' has a wrong offset!");

// ScriptStruct FortniteGame.FortDestroyedActorRecord
// 0x0050 (0x0050 - 0x0000)
struct FFortDestroyedActorRecord final
{
public:
	struct FGuid                                  ActorGuid;                                         // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingActor>             ActorClass;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorTransform;                                    // 0x0020(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDestroyedActorRecord) == 0x000010, "Wrong alignment on FFortDestroyedActorRecord");
static_assert(sizeof(FFortDestroyedActorRecord) == 0x000050, "Wrong size on FFortDestroyedActorRecord");
static_assert(offsetof(FFortDestroyedActorRecord, ActorGuid) == 0x000000, "Member 'FFortDestroyedActorRecord::ActorGuid' has a wrong offset!");
static_assert(offsetof(FFortDestroyedActorRecord, ActorClass) == 0x000010, "Member 'FFortDestroyedActorRecord::ActorClass' has a wrong offset!");
static_assert(offsetof(FFortDestroyedActorRecord, ActorTransform) == 0x000020, "Member 'FFortDestroyedActorRecord::ActorTransform' has a wrong offset!");

// ScriptStruct FortniteGame.FortBuildingActorArray
// 0x000C (0x000C - 0x0000)
struct FFortBuildingActorArray final
{
public:
	TArray<struct FFortDestroyedActorRecord>      ActorRecords;                                      // 0x0000(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBuildingActorArray) == 0x000004, "Wrong alignment on FFortBuildingActorArray");
static_assert(sizeof(FFortBuildingActorArray) == 0x00000C, "Wrong size on FFortBuildingActorArray");
static_assert(offsetof(FFortBuildingActorArray, ActorRecords) == 0x000000, "Member 'FFortBuildingActorArray::ActorRecords' has a wrong offset!");

// ScriptStruct FortniteGame.FortScriptedActionParams
// 0x0018 (0x0018 - 0x0000)
struct FFortScriptedActionParams final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortScriptedActionSource                     SourceType;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              SourceItem;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    SourceData;                                        // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortScriptedActionParams) == 0x000004, "Wrong alignment on FFortScriptedActionParams");
static_assert(sizeof(FFortScriptedActionParams) == 0x000018, "Wrong size on FFortScriptedActionParams");
static_assert(offsetof(FFortScriptedActionParams, Player) == 0x000000, "Member 'FFortScriptedActionParams::Player' has a wrong offset!");
static_assert(offsetof(FFortScriptedActionParams, SourceType) == 0x000004, "Member 'FFortScriptedActionParams::SourceType' has a wrong offset!");
static_assert(offsetof(FFortScriptedActionParams, SourceItem) == 0x000008, "Member 'FFortScriptedActionParams::SourceItem' has a wrong offset!");
static_assert(offsetof(FFortScriptedActionParams, SourceData) == 0x00000C, "Member 'FFortScriptedActionParams::SourceData' has a wrong offset!");

// ScriptStruct FortniteGame.FortAvailableScriptedAction
// 0x001C (0x001C - 0x0000)
struct FFortAvailableScriptedAction final
{
public:
	struct FFortScriptedActionParams              Params;                                            // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	class AFortScriptedAction*                    ActionDefaults;                                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAvailableScriptedAction) == 0x000004, "Wrong alignment on FFortAvailableScriptedAction");
static_assert(sizeof(FFortAvailableScriptedAction) == 0x00001C, "Wrong size on FFortAvailableScriptedAction");
static_assert(offsetof(FFortAvailableScriptedAction, Params) == 0x000000, "Member 'FFortAvailableScriptedAction::Params' has a wrong offset!");
static_assert(offsetof(FFortAvailableScriptedAction, ActionDefaults) == 0x000018, "Member 'FFortAvailableScriptedAction::ActionDefaults' has a wrong offset!");

// ScriptStruct FortniteGame.FortTaggedActorOctreeFilter
// 0x0040 (0x0040 - 0x0000)
struct FFortTaggedActorOctreeFilter final
{
public:
	struct FBoxSphereBounds                       Bounds;                                            // 0x0000(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinDistanceFromBoundsCenter;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ABuildingSMActor>           OptionalSubclass;                                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsToLookFor;                                     // 0x0024(0x0018)(NativeAccessSpecifierPublic)
	bool                                          bHasAllTags;                                       // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortTaggedActorOctreeFilter) == 0x000004, "Wrong alignment on FFortTaggedActorOctreeFilter");
static_assert(sizeof(FFortTaggedActorOctreeFilter) == 0x000040, "Wrong size on FFortTaggedActorOctreeFilter");
static_assert(offsetof(FFortTaggedActorOctreeFilter, Bounds) == 0x000000, "Member 'FFortTaggedActorOctreeFilter::Bounds' has a wrong offset!");
static_assert(offsetof(FFortTaggedActorOctreeFilter, MinDistanceFromBoundsCenter) == 0x00001C, "Member 'FFortTaggedActorOctreeFilter::MinDistanceFromBoundsCenter' has a wrong offset!");
static_assert(offsetof(FFortTaggedActorOctreeFilter, OptionalSubclass) == 0x000020, "Member 'FFortTaggedActorOctreeFilter::OptionalSubclass' has a wrong offset!");
static_assert(offsetof(FFortTaggedActorOctreeFilter, TagsToLookFor) == 0x000024, "Member 'FFortTaggedActorOctreeFilter::TagsToLookFor' has a wrong offset!");
static_assert(offsetof(FFortTaggedActorOctreeFilter, bHasAllTags) == 0x00003C, "Member 'FFortTaggedActorOctreeFilter::bHasAllTags' has a wrong offset!");

// ScriptStruct FortniteGame.TeamStrategicBuildingEntryArray
// 0x000C (0x008C - 0x0080)
struct FTeamStrategicBuildingEntryArray final : public FFastArraySerializer
{
public:
	TArray<struct FTeamStrategicBuildingEntry>    Items;                                             // 0x0080(0x000C)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTeamStrategicBuildingEntryArray) == 0x000004, "Wrong alignment on FTeamStrategicBuildingEntryArray");
static_assert(sizeof(FTeamStrategicBuildingEntryArray) == 0x00008C, "Wrong size on FTeamStrategicBuildingEntryArray");
static_assert(offsetof(FTeamStrategicBuildingEntryArray, Items) == 0x000080, "Member 'FTeamStrategicBuildingEntryArray::Items' has a wrong offset!");

// ScriptStruct FortniteGame.FortUIFeedbackBlueprintOnly
// 0x0008 (0x0020 - 0x0018)
struct FFortUIFeedbackBlueprintOnly final : public FFortUIFeedback
{
public:
	class FName                                   EditableName;                                      // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIFeedbackBlueprintOnly) == 0x000004, "Wrong alignment on FFortUIFeedbackBlueprintOnly");
static_assert(sizeof(FFortUIFeedbackBlueprintOnly) == 0x000020, "Wrong size on FFortUIFeedbackBlueprintOnly");
static_assert(offsetof(FFortUIFeedbackBlueprintOnly, EditableName) == 0x000018, "Member 'FFortUIFeedbackBlueprintOnly::EditableName' has a wrong offset!");

// ScriptStruct FortniteGame.VisibiltyInfoArray
// 0x000C (0x008C - 0x0080)
struct FVisibiltyInfoArray final : public FFastArraySerializer
{
public:
	TArray<struct FVisibilityInfo>                VisibilityInfoArray;                               // 0x0080(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVisibiltyInfoArray) == 0x000004, "Wrong alignment on FVisibiltyInfoArray");
static_assert(sizeof(FVisibiltyInfoArray) == 0x00008C, "Wrong size on FVisibiltyInfoArray");
static_assert(offsetof(FVisibiltyInfoArray, VisibilityInfoArray) == 0x000080, "Member 'FVisibiltyInfoArray::VisibilityInfoArray' has a wrong offset!");

// ScriptStruct FortniteGame.FortDeferredNewActorData
// 0x000C (0x000C - 0x0000)
struct FFortDeferredNewActorData final
{
public:
	class ABuildingActor*                         BuildingActor;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SavedLevelIndex;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActorRecordIndex;                                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortDeferredNewActorData) == 0x000004, "Wrong alignment on FFortDeferredNewActorData");
static_assert(sizeof(FFortDeferredNewActorData) == 0x00000C, "Wrong size on FFortDeferredNewActorData");
static_assert(offsetof(FFortDeferredNewActorData, BuildingActor) == 0x000000, "Member 'FFortDeferredNewActorData::BuildingActor' has a wrong offset!");
static_assert(offsetof(FFortDeferredNewActorData, SavedLevelIndex) == 0x000004, "Member 'FFortDeferredNewActorData::SavedLevelIndex' has a wrong offset!");
static_assert(offsetof(FFortDeferredNewActorData, ActorRecordIndex) == 0x000008, "Member 'FFortDeferredNewActorData::ActorRecordIndex' has a wrong offset!");

// ScriptStruct FortniteGame.FortMissionInfoTagRequirementReplacement
// 0x003C (0x003C - 0x0000)
struct alignas(0x04) FFortMissionInfoTagRequirementReplacement final
{
public:
	uint8                                         Pad_0[0x3C];                                       // 0x0000(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortMissionInfoTagRequirementReplacement) == 0x000004, "Wrong alignment on FFortMissionInfoTagRequirementReplacement");
static_assert(sizeof(FFortMissionInfoTagRequirementReplacement) == 0x00003C, "Wrong size on FFortMissionInfoTagRequirementReplacement");

// ScriptStruct FortniteGame.HomeBaseWorkerSlot
// 0x0008 (0x0008 - 0x0000)
struct FHomeBaseWorkerSlot final
{
public:
	bool                                          bIsManager;                                        // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsLocked;                                         // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UHomeBaseWorker*                        Worker;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomeBaseWorkerSlot) == 0x000004, "Wrong alignment on FHomeBaseWorkerSlot");
static_assert(sizeof(FHomeBaseWorkerSlot) == 0x000008, "Wrong size on FHomeBaseWorkerSlot");
static_assert(offsetof(FHomeBaseWorkerSlot, bIsManager) == 0x000000, "Member 'FHomeBaseWorkerSlot::bIsManager' has a wrong offset!");
static_assert(offsetof(FHomeBaseWorkerSlot, bIsLocked) == 0x000001, "Member 'FHomeBaseWorkerSlot::bIsLocked' has a wrong offset!");
static_assert(offsetof(FHomeBaseWorkerSlot, Worker) == 0x000004, "Member 'FHomeBaseWorkerSlot::Worker' has a wrong offset!");

// ScriptStruct FortniteGame.HomeBaseProducedResources
// 0x0010 (0x0010 - 0x0000)
struct FHomeBaseProducedResources final
{
public:
	EFortPersistentResources                      Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Produced;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Capacity;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHomeBaseProducedResources) == 0x000004, "Wrong alignment on FHomeBaseProducedResources");
static_assert(sizeof(FHomeBaseProducedResources) == 0x000010, "Wrong size on FHomeBaseProducedResources");
static_assert(offsetof(FHomeBaseProducedResources, Type) == 0x000000, "Member 'FHomeBaseProducedResources::Type' has a wrong offset!");
static_assert(offsetof(FHomeBaseProducedResources, Produced) == 0x000004, "Member 'FHomeBaseProducedResources::Produced' has a wrong offset!");
static_assert(offsetof(FHomeBaseProducedResources, Capacity) == 0x000008, "Member 'FHomeBaseProducedResources::Capacity' has a wrong offset!");
static_assert(offsetof(FHomeBaseProducedResources, Rate) == 0x00000C, "Member 'FHomeBaseProducedResources::Rate' has a wrong offset!");

// ScriptStruct FortniteGame.VelocityGridStrokeData
// 0x0001 (0x0001 - 0x0000)
struct FVelocityGridStrokeData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVelocityGridStrokeData) == 0x000001, "Wrong alignment on FVelocityGridStrokeData");
static_assert(sizeof(FVelocityGridStrokeData) == 0x000001, "Wrong size on FVelocityGridStrokeData");

// ScriptStruct FortniteGame.LootQuota
// 0x0004 (0x0010 - 0x000C)
struct FLootQuota final : public FTileLootQuota
{
public:
	ELootQuotaLevel                               QuotaLevel;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLootQuota) == 0x000004, "Wrong alignment on FLootQuota");
static_assert(sizeof(FLootQuota) == 0x000010, "Wrong size on FLootQuota");
static_assert(offsetof(FLootQuota, QuotaLevel) == 0x00000C, "Member 'FLootQuota::QuotaLevel' has a wrong offset!");

}

#pragma pack(pop)
