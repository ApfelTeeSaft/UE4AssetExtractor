#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteUI

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "UMG_classes.hpp"
#include "FriendsAndChat_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Class FortniteUI.FortAbstractButtonGroup
// 0x0048 (0x0118 - 0x00D0)
class UFortAbstractButtonGroup : public UWidget
{
public:
	int32                                         SelectedIndex;                                     // 0x00D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x00D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x00D5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                InternalPadding;                                   // 0x00D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ESelectionMode                                SelectionMode;                                     // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonGroupDirection                         LayoutMode;                                        // 0x00E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnButtonClicked;                                   // 0x00EC(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<class FText>                           DataProvider;                                      // 0x00F8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UFortButton*>                    Buttons;                                           // 0x0104(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleButtonClicked(class UFortButton* Button);
	void SetDataProvider(const TArray<class FText>& InDataProvider);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAbstractButtonGroup">();
	}
	static class UFortAbstractButtonGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAbstractButtonGroup>();
	}
};
static_assert(alignof(UFortAbstractButtonGroup) == 0x000004, "Wrong alignment on UFortAbstractButtonGroup");
static_assert(sizeof(UFortAbstractButtonGroup) == 0x000118, "Wrong size on UFortAbstractButtonGroup");
static_assert(offsetof(UFortAbstractButtonGroup, SelectedIndex) == 0x0000D0, "Member 'UFortAbstractButtonGroup::SelectedIndex' has a wrong offset!");
static_assert(offsetof(UFortAbstractButtonGroup, VerticalAlignment) == 0x0000D4, "Member 'UFortAbstractButtonGroup::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UFortAbstractButtonGroup, HorizontalAlignment) == 0x0000D5, "Member 'UFortAbstractButtonGroup::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UFortAbstractButtonGroup, InternalPadding) == 0x0000D8, "Member 'UFortAbstractButtonGroup::InternalPadding' has a wrong offset!");
static_assert(offsetof(UFortAbstractButtonGroup, SelectionMode) == 0x0000E8, "Member 'UFortAbstractButtonGroup::SelectionMode' has a wrong offset!");
static_assert(offsetof(UFortAbstractButtonGroup, LayoutMode) == 0x0000E9, "Member 'UFortAbstractButtonGroup::LayoutMode' has a wrong offset!");
static_assert(offsetof(UFortAbstractButtonGroup, OnButtonClicked) == 0x0000EC, "Member 'UFortAbstractButtonGroup::OnButtonClicked' has a wrong offset!");
static_assert(offsetof(UFortAbstractButtonGroup, DataProvider) == 0x0000F8, "Member 'UFortAbstractButtonGroup::DataProvider' has a wrong offset!");
static_assert(offsetof(UFortAbstractButtonGroup, Buttons) == 0x000104, "Member 'UFortAbstractButtonGroup::Buttons' has a wrong offset!");

// Class FortniteUI.FortButtonGroup
// 0x0014 (0x012C - 0x0118)
class UFortButtonGroup final : public UFortAbstractButtonGroup
{
public:
	TDelegate<void()>                             OnGenerateButtonEvent;                             // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortButton>                ButtonClass;                                       // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortButtonGroup">();
	}
	static class UFortButtonGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortButtonGroup>();
	}
};
static_assert(alignof(UFortButtonGroup) == 0x000004, "Wrong alignment on UFortButtonGroup");
static_assert(sizeof(UFortButtonGroup) == 0x00012C, "Wrong size on UFortButtonGroup");
static_assert(offsetof(UFortButtonGroup, OnGenerateButtonEvent) == 0x000118, "Member 'UFortButtonGroup::OnGenerateButtonEvent' has a wrong offset!");
static_assert(offsetof(UFortButtonGroup, ButtonClass) == 0x000128, "Member 'UFortButtonGroup::ButtonClass' has a wrong offset!");

// Class FortniteUI.FortTabButtonGroup
// 0x0014 (0x012C - 0x0118)
class UFortTabButtonGroup final : public UFortAbstractButtonGroup
{
public:
	TDelegate<void()>                             OnGenerateButtonEvent;                             // 0x0118(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortTabButton>             ButtonClass;                                       // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UFortTabButton* GetTabButton(int32 INDEX);
	void SetInitialButtonSelection(int32 INDEX);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTabButtonGroup">();
	}
	static class UFortTabButtonGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTabButtonGroup>();
	}
};
static_assert(alignof(UFortTabButtonGroup) == 0x000004, "Wrong alignment on UFortTabButtonGroup");
static_assert(sizeof(UFortTabButtonGroup) == 0x00012C, "Wrong size on UFortTabButtonGroup");
static_assert(offsetof(UFortTabButtonGroup, OnGenerateButtonEvent) == 0x000118, "Member 'UFortTabButtonGroup::OnGenerateButtonEvent' has a wrong offset!");
static_assert(offsetof(UFortTabButtonGroup, ButtonClass) == 0x000128, "Member 'UFortTabButtonGroup::ButtonClass' has a wrong offset!");

// Class FortniteUI.FortActorCanvas
// 0x0008 (0x00E8 - 0x00E0)
class UFortActorCanvas final : public UPanelWidget
{
public:
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortActorCanvasSlot* AddActorIndicator(class UFortActorIndicatorWidget* Indicator);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActorCanvas">();
	}
	static class UFortActorCanvas* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActorCanvas>();
	}
};
static_assert(alignof(UFortActorCanvas) == 0x000004, "Wrong alignment on UFortActorCanvas");
static_assert(sizeof(UFortActorCanvas) == 0x0000E8, "Wrong size on UFortActorCanvas");

// Class FortniteUI.FortActorCanvasSlot
// 0x0008 (0x002C - 0x0024)
class UFortActorCanvasSlot final : public UPanelSlot
{
public:
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAutoRemove;                                    // 0x0026(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x5];                                       // 0x0027(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCanAutoRemove(bool bAllowAutoRemove);
	void SetHorizontalAlignment(EHorizontalAlignment InHorizontalAlignment);
	void SetVerticalAlignment(EVerticalAlignment InVerticalAlignment);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActorCanvasSlot">();
	}
	static class UFortActorCanvasSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActorCanvasSlot>();
	}
};
static_assert(alignof(UFortActorCanvasSlot) == 0x000004, "Wrong alignment on UFortActorCanvasSlot");
static_assert(sizeof(UFortActorCanvasSlot) == 0x00002C, "Wrong size on UFortActorCanvasSlot");
static_assert(offsetof(UFortActorCanvasSlot, HorizontalAlignment) == 0x000024, "Member 'UFortActorCanvasSlot::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UFortActorCanvasSlot, VerticalAlignment) == 0x000025, "Member 'UFortActorCanvasSlot::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UFortActorCanvasSlot, bCanAutoRemove) == 0x000026, "Member 'UFortActorCanvasSlot::bCanAutoRemove' has a wrong offset!");

// Class FortniteUI.FortAsyncAction_SetUIState
// 0x0014 (0x0030 - 0x001C)
class UFortAsyncAction_SetUIState final : public UBlueprintAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnStateEntered;                                    // 0x001C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFortAsyncAction_SetUIState* SetUIState(class UObject* InWorldContextObject, EFortUIState DesiredState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAsyncAction_SetUIState">();
	}
	static class UFortAsyncAction_SetUIState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAsyncAction_SetUIState>();
	}
};
static_assert(alignof(UFortAsyncAction_SetUIState) == 0x000004, "Wrong alignment on UFortAsyncAction_SetUIState");
static_assert(sizeof(UFortAsyncAction_SetUIState) == 0x000030, "Wrong size on UFortAsyncAction_SetUIState");
static_assert(offsetof(UFortAsyncAction_SetUIState, OnStateEntered) == 0x00001C, "Member 'UFortAsyncAction_SetUIState::OnStateEntered' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_SetUIState, WorldContextObject) == 0x000028, "Member 'UFortAsyncAction_SetUIState::WorldContextObject' has a wrong offset!");

// Class FortniteUI.FortAsyncAction_ShowConfirmation
// 0x0078 (0x0094 - 0x001C)
class UFortAsyncAction_ShowConfirmation final : public UBlueprintAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnConfirmed;                                       // 0x001C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDeclined;                                        // 0x0028(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTimedOut;                                        // 0x0034(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0040(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortDialogDescription                 Description;                                       // 0x0044(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class UFortAsyncAction_ShowConfirmation* ShowConfirmationDialog(class UObject* InWorldContextObject, const class FText& Title, const class FText& Message, const class FText& ConfirmButtonText, const class FText& DeclineButtonText, class UFortUserWidget* InAdditionalContent, float InDisplayTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAsyncAction_ShowConfirmation">();
	}
	static class UFortAsyncAction_ShowConfirmation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAsyncAction_ShowConfirmation>();
	}
};
static_assert(alignof(UFortAsyncAction_ShowConfirmation) == 0x000004, "Wrong alignment on UFortAsyncAction_ShowConfirmation");
static_assert(sizeof(UFortAsyncAction_ShowConfirmation) == 0x000094, "Wrong size on UFortAsyncAction_ShowConfirmation");
static_assert(offsetof(UFortAsyncAction_ShowConfirmation, OnConfirmed) == 0x00001C, "Member 'UFortAsyncAction_ShowConfirmation::OnConfirmed' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_ShowConfirmation, OnDeclined) == 0x000028, "Member 'UFortAsyncAction_ShowConfirmation::OnDeclined' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_ShowConfirmation, OnTimedOut) == 0x000034, "Member 'UFortAsyncAction_ShowConfirmation::OnTimedOut' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_ShowConfirmation, WorldContextObject) == 0x000040, "Member 'UFortAsyncAction_ShowConfirmation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UFortAsyncAction_ShowConfirmation, Description) == 0x000044, "Member 'UFortAsyncAction_ShowConfirmation::Description' has a wrong offset!");

// Class FortniteUI.FortBangWrapper
// 0x0030 (0x0110 - 0x00E0)
class UFortBangWrapper final : public UContentWidget
{
public:
	uint8                                         Pad_E0[0x4];                                       // 0x00E0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EFortBangSize                                 Size;                                              // 0x00E4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Offset;                                            // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortBangType                                 BangType;                                          // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TutorialNameID;                                    // 0x00F4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortTutorialGlowType                         TutorialGlowType;                                  // 0x00FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x13];                                      // 0x00FD(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBangVisibility(bool InVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBangWrapper">();
	}
	static class UFortBangWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBangWrapper>();
	}
};
static_assert(alignof(UFortBangWrapper) == 0x000004, "Wrong alignment on UFortBangWrapper");
static_assert(sizeof(UFortBangWrapper) == 0x000110, "Wrong size on UFortBangWrapper");
static_assert(offsetof(UFortBangWrapper, Size) == 0x0000E4, "Member 'UFortBangWrapper::Size' has a wrong offset!");
static_assert(offsetof(UFortBangWrapper, Offset) == 0x0000E8, "Member 'UFortBangWrapper::Offset' has a wrong offset!");
static_assert(offsetof(UFortBangWrapper, BangType) == 0x0000F0, "Member 'UFortBangWrapper::BangType' has a wrong offset!");
static_assert(offsetof(UFortBangWrapper, TutorialNameID) == 0x0000F4, "Member 'UFortBangWrapper::TutorialNameID' has a wrong offset!");
static_assert(offsetof(UFortBangWrapper, TutorialGlowType) == 0x0000FC, "Member 'UFortBangWrapper::TutorialGlowType' has a wrong offset!");

// Class FortniteUI.FortButtonInternalWidget
// 0x000C (0x0384 - 0x0378)
class UFortButtonInternalWidget final : public UButton
{
public:
	bool                                          IsClickable;                                       // 0x0378(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_379[0xB];                                      // 0x0379(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortButtonInternalWidget">();
	}
	static class UFortButtonInternalWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortButtonInternalWidget>();
	}
};
static_assert(alignof(UFortButtonInternalWidget) == 0x000004, "Wrong alignment on UFortButtonInternalWidget");
static_assert(sizeof(UFortButtonInternalWidget) == 0x000384, "Wrong size on UFortButtonInternalWidget");
static_assert(offsetof(UFortButtonInternalWidget, IsClickable) == 0x000378, "Member 'UFortButtonInternalWidget::IsClickable' has a wrong offset!");

// Class FortniteUI.FortUserWidget
// 0x008C (0x0244 - 0x01B8)
class UFortUserWidget : public UUserWidget
{
public:
	uint8                                         Pad_1B8[0x4];                                      // 0x01B8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bConsumePointerInput;                              // 0x01BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BD[0x87];                                     // 0x01BD(0x0087)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void _BPInvalidate(class FName Type);
	void DispatchEvent(class FName EventName);
	void PreConstruct(bool IsDesignTime);
	void RegisterForEvent(class FName EventName, TDelegate<void(class UFortUserWidget* InWidget)> InCallback);
	void RegisterForInvalidation(class FName InvalidationType, TDelegate<void()> Callback);
	void UnregisterForEvent(class FName EventName, TDelegate<void(class UFortUserWidget* InWidget)> InCallback);

	bool IsInvalid(class FName Type) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUserWidget">();
	}
	static class UFortUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUserWidget>();
	}
};
static_assert(alignof(UFortUserWidget) == 0x000004, "Wrong alignment on UFortUserWidget");
static_assert(sizeof(UFortUserWidget) == 0x000244, "Wrong size on UFortUserWidget");
static_assert(offsetof(UFortUserWidget, bConsumePointerInput) == 0x0001BC, "Member 'UFortUserWidget::bConsumePointerInput' has a wrong offset!");

// Class FortniteUI.FortButtonStyle
// 0x15C0 (0x15DC - 0x001C)
class UFortButtonStyle : public UObject
{
public:
	struct FFortStateStyle                        NormalBase;                                        // 0x001C(0x02D8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortStateStyle                        NormalHovered;                                     // 0x02F4(0x02D8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortStateStyle                        NormalPressed;                                     // 0x05CC(0x02D8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortStateStyle                        SelectedBase;                                      // 0x08A4(0x02D8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortStateStyle                        SelectedHovered;                                   // 0x0B7C(0x02D8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortStateStyle                        SelectedPressed;                                   // 0x0E54(0x02D8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortStateStyle                        Disabled;                                          // 0x112C(0x02D8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortMultiSizeMargin                   ButtonPadding;                                     // 0x1404(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortMultiSizeFont                     Font;                                              // 0x1464(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FFortMultiSizeMargin                   CustomPadding;                                     // 0x1554(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateSound                            PressedSlateSound;                                 // 0x15B4(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateSound                            HoveredSlateSound;                                 // 0x15C8(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static const struct FSlateBrush GetBrushBySizeFromMultiSizeBrush(const struct FFortMultiSizeBrush& MultiSizeBrush, EFortBrushSize Size);
	static const struct FSlateFontInfo GetFontBySizeFromMultiSizeFont(const struct FFortMultiSizeFont& MultiSizeFont, EFortBrushSize Size);
	static const struct FMargin GetMarginBySizeFromMultiSizeMargin(const struct FFortMultiSizeMargin& MultiSizeMargin, EFortBrushSize Size);

	const struct FMargin GetButtonPaddingBySize(EFortBrushSize Size) const;
	const struct FMargin GetCustomPaddingBySize(EFortBrushSize Size) const;
	const struct FSlateFontInfo GetFontBySize(EFortBrushSize Size) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortButtonStyle">();
	}
	static class UFortButtonStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortButtonStyle>();
	}
};
static_assert(alignof(UFortButtonStyle) == 0x000004, "Wrong alignment on UFortButtonStyle");
static_assert(sizeof(UFortButtonStyle) == 0x0015DC, "Wrong size on UFortButtonStyle");
static_assert(offsetof(UFortButtonStyle, NormalBase) == 0x00001C, "Member 'UFortButtonStyle::NormalBase' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, NormalHovered) == 0x0002F4, "Member 'UFortButtonStyle::NormalHovered' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, NormalPressed) == 0x0005CC, "Member 'UFortButtonStyle::NormalPressed' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, SelectedBase) == 0x0008A4, "Member 'UFortButtonStyle::SelectedBase' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, SelectedHovered) == 0x000B7C, "Member 'UFortButtonStyle::SelectedHovered' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, SelectedPressed) == 0x000E54, "Member 'UFortButtonStyle::SelectedPressed' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, Disabled) == 0x00112C, "Member 'UFortButtonStyle::Disabled' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, ButtonPadding) == 0x001404, "Member 'UFortButtonStyle::ButtonPadding' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, Font) == 0x001464, "Member 'UFortButtonStyle::Font' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, CustomPadding) == 0x001554, "Member 'UFortButtonStyle::CustomPadding' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, PressedSlateSound) == 0x0015B4, "Member 'UFortButtonStyle::PressedSlateSound' has a wrong offset!");
static_assert(offsetof(UFortButtonStyle, HoveredSlateSound) == 0x0015C8, "Member 'UFortButtonStyle::HoveredSlateSound' has a wrong offset!");

// Class FortniteUI.FortBaseButton
// 0x04F8 (0x073C - 0x0244)
class UFortBaseButton : public UFortUserWidget
{
public:
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   EnabledChanged;                                    // 0x0248(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   SelectedChanged;                                   // 0x0254(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   ButtonClicked;                                     // 0x0260(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EFortBangSize                                 BangSize;                                          // 0x026C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              BangOffset;                                        // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	EFortBangType                                 BangType;                                          // 0x0278(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TutorialNameID;                                    // 0x027C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortTutorialGlowType                         TutorialGlowType;                                  // 0x0284(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortButtonStyle>           Style;                                             // 0x0288(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortBrushSize                                BrushSize;                                         // 0x028C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateSound                            PressedSlateSoundOverride;                         // 0x0290(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateSound                            HoveredSlateSoundOverride;                         // 0x02A4(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bSelectable;                                       // 0x02B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SelectionGroup;                                    // 0x02BC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bToggleable;                                       // 0x02C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	bool                                          bClickable;                                        // 0x02C5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, NativeAccessSpecifierProtected)
	EButtonClickMethod                            ClickMethod;                                       // 0x02C6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C7[0x475];                                    // 0x02C7(0x0475)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceClick();
	int32 GetSelectionGroupIndex();
	void OnButtonClicked();
	void SetBangVisibility(bool bVisible);
	void SetBrushSize(EFortBrushSize InSize);
	void SetClickable(bool InClickable);
	void SetClickMethod(EButtonClickMethod InClickMethod);
	void SetHovered(bool InHovered);
	void SetSelected(bool InSelected);
	void SetSelectionGroup(class FName InSelectionGroup);
	void SetStyle(TSubclassOf<class UFortButtonStyle> InStyle);

	const struct FMargin GetCurrentButtonPadding() const;
	const struct FMargin GetCurrentCustomPadding() const;
	const struct FSlateFontInfo GetCurrentFont() const;
	const struct FFortStateStyle GetCurrentStateStyle() const;
	bool GetSelected() const;
	class UFortButtonStyle* GetStyle() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBaseButton">();
	}
	static class UFortBaseButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBaseButton>();
	}
};
static_assert(alignof(UFortBaseButton) == 0x000004, "Wrong alignment on UFortBaseButton");
static_assert(sizeof(UFortBaseButton) == 0x00073C, "Wrong size on UFortBaseButton");
static_assert(offsetof(UFortBaseButton, EnabledChanged) == 0x000248, "Member 'UFortBaseButton::EnabledChanged' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, SelectedChanged) == 0x000254, "Member 'UFortBaseButton::SelectedChanged' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, ButtonClicked) == 0x000260, "Member 'UFortBaseButton::ButtonClicked' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, BangSize) == 0x00026C, "Member 'UFortBaseButton::BangSize' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, BangOffset) == 0x000270, "Member 'UFortBaseButton::BangOffset' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, BangType) == 0x000278, "Member 'UFortBaseButton::BangType' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, TutorialNameID) == 0x00027C, "Member 'UFortBaseButton::TutorialNameID' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, TutorialGlowType) == 0x000284, "Member 'UFortBaseButton::TutorialGlowType' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, Style) == 0x000288, "Member 'UFortBaseButton::Style' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, BrushSize) == 0x00028C, "Member 'UFortBaseButton::BrushSize' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, PressedSlateSoundOverride) == 0x000290, "Member 'UFortBaseButton::PressedSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, HoveredSlateSoundOverride) == 0x0002A4, "Member 'UFortBaseButton::HoveredSlateSoundOverride' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, bSelectable) == 0x0002B8, "Member 'UFortBaseButton::bSelectable' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, SelectionGroup) == 0x0002BC, "Member 'UFortBaseButton::SelectionGroup' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, bToggleable) == 0x0002C4, "Member 'UFortBaseButton::bToggleable' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, bClickable) == 0x0002C5, "Member 'UFortBaseButton::bClickable' has a wrong offset!");
static_assert(offsetof(UFortBaseButton, ClickMethod) == 0x0002C6, "Member 'UFortBaseButton::ClickMethod' has a wrong offset!");

// Class FortniteUI.FortFrontEndContext
// 0x0118 (0x0134 - 0x001C)
class UFortFrontEndContext final : public UBlueprintContextBase
{
public:
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnFrontEndCameraChanged;                           // 0x0020(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnTheaterSelected;                                 // 0x002C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTheaterDataChanged;                              // 0x0038(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTheaterTileClicked;                              // 0x0044(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTheaterTileUnselected;                           // 0x0050(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnRecruitHero;                                     // 0x005C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlayerLoggedIn;                                  // 0x0068(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlayerLoggedOut;                                 // 0x0074(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnOutpostViewLoaded;                               // 0x0080(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FFortFrontEndFeatureStruct             Features[0x9];                                     // 0x008C(0x0010)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FFortSavedModeLoadout                  CachedModeLoadout;                                 // 0x011C(0x0018)(Transient, NativeAccessSpecifierPrivate)

public:
	void BindToFeatureStateAndInitialize(EFortFrontEndFeature Feature, TDelegate<void(EFortFrontEndFeature ChangedFeature, EFortFrontEndFeatureState NewState)> Delegate);
	void ClearNativeWidget(class UNativeWidgetHost* InNativeWidgetHost);
	void ClearSelectedTheater();
	void ForceSetFeatureState(EFortFrontEndFeature Feature, EFortFrontEndFeatureState State);
	class FText GetAttributeDescription(const struct FFortAttributeInfo& InAttribute, const struct FGameplayTagContainer& InRequiredTags);
	class FText GetAttributeDisplayName(const struct FFortAttributeInfo& InAttribute, const struct FGameplayTagContainer& InRequiredTags);
	struct FFortMultiSizeBrush GetAttributeIcon(const struct FFortAttributeInfo& InAttribute, const struct FGameplayTagContainer& InRequiredTags);
	class AFortPlayerPawn* GetHeroPlayerPawnByIndex(int32 PartyMemberIndex);
	class UFortPersistentResourceItemDefinition* GetPersistentResourceItemDefinition(EFortPersistentResources ResourceType);
	void GetSelectableGadgets(TArray<class UFortWorldItem*>* SelectableGadgets, TArray<class UFortWorldItem*>* LastSelectedGadgets);
	bool IsActiveTileMissionValid();
	bool LoadOutpostView(int32 TheaterSlot);
	void MarkSeenItemsInVault();
	void NotifyCreateBuildingClosed(class UHomeBaseBuilding* Building);
	void RunBenchmarkAndApplyBestSettings();
	void SelectDefaultTheaterTile();
	void SelectGadgetForSlot(int32 Slot, class UFortItemDefinition* GadgetDefinition);
	void SetFrontEndCamera(EFrontEndCamera NewState);
	void SetHeroChoice(int32 PartyMemberIndex, class UFortHero* Hero);
	void SetPersonalHeroChoice(class UFortHero* Hero);
	void SetSelectedTheater(int32 TheaterIndex);
	void SkipInitialBenchmark();
	void ViewVaultItem(class UFortItem* ItemToView);

	void CreateKeepMenu(class UNativeWidgetHost* InNativeWidgetHost, class UHomeBaseBuilding* Building) const;
	void GetAccountLevelUpRewards(TArray<struct FFortItemQuantityPair>* Rewards, int32 AccountLevel) const;
	class AFortTheaterMapTile* GetActiveTile() const;
	bool GetActiveTileMissionDetails(struct FFortMissionDetails* MissionDetails) const;
	bool GetAllTheaterData(TArray<struct FFortTheaterMapData>* OutAllTheaterData) const;
	TArray<struct FGameDifficultyInfo> GetAvailibleDifficulties() const;
	class FText GetCurrentTheaterName() const;
	EFrontEndCamera GetDesiredPlayButtonCamera() const;
	int32 GetFabricatorDisintegrationSecondsRemaining(int32 TheaterSlot) const;
	int32 GetFabricatorIncomingGooAmount(int32 TheaterSlot) const;
	int32 GetFabricatorMaxCapacity(int32 TheaterSlot) const;
	int32 GetFabricatorStoredGooAmount(int32 TheaterSlot) const;
	EFortFrontEndFeatureState GetFeatureState(EFortFrontEndFeature Feature) const;
	EFrontEndCamera GetFrontEndCamera() const;
	class UFortWorldItemDefinition* GetHarvestingToolForLevel(int32 TheaterSlot, int32 InHarvestingOptimizerLevel) const;
	class UFortItemDefinition* GetItemFromItemQuantityPair(const struct FFortItemQuantityPair& InPair) const;
	int32 GetMaxNumberOfItemsInStorageVault(int32 TheaterSlot) const;
	int32 GetNumberOfItemsInStorageVault(int32 TheaterSlot) const;
	int32 GetOutpostStructureLevel(int32 TheaterSlot, class UFortOutpostItemDefinition* OutpostStructure) const;
	int32 GetOutpostStructureMaxLevel(int32 TheaterSlot, class UFortOutpostItemDefinition* OutpostStructure) const;
	void GetOutpostStructureUpgradeCost(int32 TheaterSlot, int32 UpgradeLevel, class UFortOutpostItemDefinition* OutpostStructure, TArray<struct FFortItemQuantityPair>* OutWorldItems, TArray<struct FFortItemQuantityPair>* OutAccountItems) const;
	class UFortPersistentResourceItemDefinition* GetPersonnelResourceItemDefinition() const;
	struct FSlateBrush GetPersonnelXpResourceBrush() const;
	class FText GetRequirementText(const struct FFortRequirementsInfo& InRequirements) const;
	class UFortPersistentResourceItemDefinition* GetSchematicResourceItemDefinition() const;
	struct FSlateBrush GetSchematicXpResourceBrush() const;
	bool GetSelectedTheaterData(struct FFortTheaterMapData* OutTheaterData) const;
	int32 GetSelectedTheaterIndex() const;
	bool GetTheaterData(int32 TheaterIndex, struct FFortTheaterMapData* OutTheaterData) const;
	class FText GetTheaterDifficultyText(int32 TheaterIndex) const;
	class FText GetTheaterName(int32 TheaterIndex) const;
	int32 GetTheaterRegionCount(int32 TheaterIndex) const;
	EFortTheaterType GetTheaterType(int32 TheaterIndex) const;
	bool GetTileMissionDetails(const class AFortTheaterMapTile* Tile, struct FFortMissionDetails* MissionDetails) const;
	bool IsFabricatorDisintegrating(int32 TheaterSlot) const;
	bool ShouldRunInitialBenchmark() const;
	void TriggerUIFeedbackEvent(class FName EventName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortFrontEndContext">();
	}
	static class UFortFrontEndContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortFrontEndContext>();
	}
};
static_assert(alignof(UFortFrontEndContext) == 0x000004, "Wrong alignment on UFortFrontEndContext");
static_assert(sizeof(UFortFrontEndContext) == 0x000134, "Wrong size on UFortFrontEndContext");
static_assert(offsetof(UFortFrontEndContext, OnFrontEndCameraChanged) == 0x000020, "Member 'UFortFrontEndContext::OnFrontEndCameraChanged' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnTheaterSelected) == 0x00002C, "Member 'UFortFrontEndContext::OnTheaterSelected' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnTheaterDataChanged) == 0x000038, "Member 'UFortFrontEndContext::OnTheaterDataChanged' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnTheaterTileClicked) == 0x000044, "Member 'UFortFrontEndContext::OnTheaterTileClicked' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnTheaterTileUnselected) == 0x000050, "Member 'UFortFrontEndContext::OnTheaterTileUnselected' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnRecruitHero) == 0x00005C, "Member 'UFortFrontEndContext::OnRecruitHero' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnPlayerLoggedIn) == 0x000068, "Member 'UFortFrontEndContext::OnPlayerLoggedIn' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnPlayerLoggedOut) == 0x000074, "Member 'UFortFrontEndContext::OnPlayerLoggedOut' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, OnOutpostViewLoaded) == 0x000080, "Member 'UFortFrontEndContext::OnOutpostViewLoaded' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, Features) == 0x00008C, "Member 'UFortFrontEndContext::Features' has a wrong offset!");
static_assert(offsetof(UFortFrontEndContext, CachedModeLoadout) == 0x00011C, "Member 'UFortFrontEndContext::CachedModeLoadout' has a wrong offset!");

// Class FortniteUI.FortGlobalUIContext
// 0x014C (0x0168 - 0x001C)
class UFortGlobalUIContext final : public UBlueprintContextBase
{
public:
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnKeybindsChanged;                                 // 0x0020(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTeamPowerChanged;                                // 0x002C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   DragAndDropStartedDelegate;                        // 0x0038(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   DragAndDropEndedDelegate;                          // 0x0044(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnNetworkError;                                    // 0x0050(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnQueryFortBackendVersionComplete;                 // 0x005C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x18];                                      // 0x0068(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UFortUIMessageManager*> MessageManagersByName;                             // 0x0080(0x003C)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	struct FFortUIFeatureStruct                   Features[0x3];                                     // 0x00BC(0x0010)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EC[0x78];                                      // 0x00EC(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsUIVisible;                                      // 0x0164(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void CheckFlag(const class FString& FlagName, EFlagStatus* OutStatus);

	void BindToFeatureStateAndInitialize(EFortUIFeature Feature, TDelegate<void(EFortUIFeature ChangedFeature, EFortUIFeatureState NewState)> Delegate);
	void CheckNetworkError();
	void ClearSelectionGroup(class FName SelectionGroup);
	void DisplayStateContent(bool bDisplay);
	class FString GetBackendName();
	struct FFortBackendVersion GetGameBackendVersion();
	class UFortUIMessageManager* GetMessageManager(class FName ManagerName, bool* bCreatedNew);
	bool GetNextNotification(struct FFortDialogDescription* NotifcationDescription);
	class FString GetWatermark();
	void HideBang(EFortBangType Type);
	bool IsBluGloEnabled();
	bool IsHUDVisible();
	void Logout();
	void ProcessNotificationResult(EFortDialogResult InResult, const struct FFortDialogDescription& NotificationDescription);
	void QueryGameBackendVersion();
	void QuitGame();
	void RegisterScriptedAction(TSubclassOf<class AFortScriptedAction> ScriptedAction);
	void RegisterScriptedActions(const TArray<TSubclassOf<class AFortScriptedAction>>& ScriptedActions);
	void RegisterToReceiveNotifications(TDelegate<void()> InOnNotifcationAvailable);
	void RemoveNotification(const struct FFortDialogDescription& NotificationDescription);
	void SendExperienceRatingAnalytic(const class FString& RatingType, const int32& StarCount, const class FString& GameSessionID, const class FString& Comment);
	void SendLeaveZoneAnalytic();
	void SendUINavigationAnalytic(const class FString& Destination, bool bUserInitiated);
	void ShowBang(EFortBangType Type);
	void TakeScreenshot(TDelegate<void(int32 Width, int32 Height, const TArray<struct FColor>& Colors)> Callback);
	void UnregisterScriptedAction(TSubclassOf<class AFortScriptedAction> ScriptedAction);
	void UnregisterToReceiveNotifications();

	void ClearLastGameSummaryInfo() const;
	EFortInputPreset GetActiveKeybindSet() const;
	EFortUIFeatureState GetFeatureState(EFortUIFeature Feature) const;
	struct FKey GetKeyForAction(class FName Action) const;
	class FText GetKeyTextForAction(class FName Action) const;
	struct FGameSummaryInfo GetLastGameSummaryInfo() const;
	class UFortQuestManager* GetQuestManager() const;
	void GetTeamPower(int32* TeamPower, int32* PersonalPower) const;
	bool IsInOutpostZone() const;
	bool IsInZone() const;
	bool IsUIVisible() const;
	bool ShouldCloseMenuOnEscape() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGlobalUIContext">();
	}
	static class UFortGlobalUIContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGlobalUIContext>();
	}
};
static_assert(alignof(UFortGlobalUIContext) == 0x000004, "Wrong alignment on UFortGlobalUIContext");
static_assert(sizeof(UFortGlobalUIContext) == 0x000168, "Wrong size on UFortGlobalUIContext");
static_assert(offsetof(UFortGlobalUIContext, OnKeybindsChanged) == 0x000020, "Member 'UFortGlobalUIContext::OnKeybindsChanged' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnTeamPowerChanged) == 0x00002C, "Member 'UFortGlobalUIContext::OnTeamPowerChanged' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, DragAndDropStartedDelegate) == 0x000038, "Member 'UFortGlobalUIContext::DragAndDropStartedDelegate' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, DragAndDropEndedDelegate) == 0x000044, "Member 'UFortGlobalUIContext::DragAndDropEndedDelegate' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnNetworkError) == 0x000050, "Member 'UFortGlobalUIContext::OnNetworkError' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, OnQueryFortBackendVersionComplete) == 0x00005C, "Member 'UFortGlobalUIContext::OnQueryFortBackendVersionComplete' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, MessageManagersByName) == 0x000080, "Member 'UFortGlobalUIContext::MessageManagersByName' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, Features) == 0x0000BC, "Member 'UFortGlobalUIContext::Features' has a wrong offset!");
static_assert(offsetof(UFortGlobalUIContext, bIsUIVisible) == 0x000164, "Member 'UFortGlobalUIContext::bIsUIVisible' has a wrong offset!");

// Class FortniteUI.FortGridPickerTile
// 0x0008 (0x024C - 0x0244)
class UFortGridPickerTile : public UFortUserWidget
{
public:
	class UObject*                                Data;                                              // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFortGridWidgetBase*                    Owner;                                             // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ForwardClicked();
	void OnClicked();
	void OnMouseEnter();
	void OnMouseLeave();
	void SetData(class UObject* InData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGridPickerTile">();
	}
	static class UFortGridPickerTile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGridPickerTile>();
	}
};
static_assert(alignof(UFortGridPickerTile) == 0x000004, "Wrong alignment on UFortGridPickerTile");
static_assert(sizeof(UFortGridPickerTile) == 0x00024C, "Wrong size on UFortGridPickerTile");
static_assert(offsetof(UFortGridPickerTile, Data) == 0x000244, "Member 'UFortGridPickerTile::Data' has a wrong offset!");
static_assert(offsetof(UFortGridPickerTile, Owner) == 0x000248, "Member 'UFortGridPickerTile::Owner' has a wrong offset!");

// Class FortniteUI.FortGridWidgetBase
// 0x010C (0x01EC - 0x00E0)
class UFortGridWidgetBase : public UContentWidget
{
public:
	TSubclassOf<class UFortGridPickerTile>        ClearWidgetType;                                   // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TileWidth;                                         // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TileHeight;                                        // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TilesAcross;                                       // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TilesDown;                                         // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShrinkToFit;                                      // 0x00F4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PeekOverflowTilePercentage;                        // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                TilePadding;                                       // 0x00FC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            GridBackground;                                    // 0x010C(0x0074)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                GridBackgroundPadding;                             // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<class UObject*>                        DataProvider;                                      // 0x0190(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	UMulticastDelegateProperty_                   OnTileGenerated;                                   // 0x019C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnTileClicked;                                     // 0x01A8(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMouseEnterTile;                                  // 0x01B4(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMouseLeaveTile;                                  // 0x01C0(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortGridPickerTile>        TileWidgetType;                                    // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGridSortKind                                 SortKind;                                          // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReversed;                                         // 0x01D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2[0x2];                                      // 0x01D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Data)>          GetSortKeyFor;                                     // 0x01D4(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x8];                                      // 0x01E4(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetClearWidgetType(TSubclassOf<class UFortGridPickerTile> InClearWidgetType);
	void SetDataProvider(const TArray<class UObject*>& Data);
	void SetPeekOverflowTilePercentage(float Percent);
	void SetTileHeight(float Height);
	void SetTilePadding(const struct FMargin& Padding);
	void SetTilesAcross(int32 Across);
	void SetTilesDown(int32 Down);
	void SetTileWidth(float Width);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGridWidgetBase">();
	}
	static class UFortGridWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGridWidgetBase>();
	}
};
static_assert(alignof(UFortGridWidgetBase) == 0x000004, "Wrong alignment on UFortGridWidgetBase");
static_assert(sizeof(UFortGridWidgetBase) == 0x0001EC, "Wrong size on UFortGridWidgetBase");
static_assert(offsetof(UFortGridWidgetBase, ClearWidgetType) == 0x0000E0, "Member 'UFortGridWidgetBase::ClearWidgetType' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, TileWidth) == 0x0000E4, "Member 'UFortGridWidgetBase::TileWidth' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, TileHeight) == 0x0000E8, "Member 'UFortGridWidgetBase::TileHeight' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, TilesAcross) == 0x0000EC, "Member 'UFortGridWidgetBase::TilesAcross' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, TilesDown) == 0x0000F0, "Member 'UFortGridWidgetBase::TilesDown' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, bShrinkToFit) == 0x0000F4, "Member 'UFortGridWidgetBase::bShrinkToFit' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, PeekOverflowTilePercentage) == 0x0000F8, "Member 'UFortGridWidgetBase::PeekOverflowTilePercentage' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, TilePadding) == 0x0000FC, "Member 'UFortGridWidgetBase::TilePadding' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, GridBackground) == 0x00010C, "Member 'UFortGridWidgetBase::GridBackground' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, GridBackgroundPadding) == 0x000180, "Member 'UFortGridWidgetBase::GridBackgroundPadding' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, DataProvider) == 0x000190, "Member 'UFortGridWidgetBase::DataProvider' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, OnTileGenerated) == 0x00019C, "Member 'UFortGridWidgetBase::OnTileGenerated' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, OnTileClicked) == 0x0001A8, "Member 'UFortGridWidgetBase::OnTileClicked' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, OnMouseEnterTile) == 0x0001B4, "Member 'UFortGridWidgetBase::OnMouseEnterTile' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, OnMouseLeaveTile) == 0x0001C0, "Member 'UFortGridWidgetBase::OnMouseLeaveTile' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, TileWidgetType) == 0x0001CC, "Member 'UFortGridWidgetBase::TileWidgetType' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, SortKind) == 0x0001D0, "Member 'UFortGridWidgetBase::SortKind' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, bReversed) == 0x0001D1, "Member 'UFortGridWidgetBase::bReversed' has a wrong offset!");
static_assert(offsetof(UFortGridWidgetBase, GetSortKeyFor) == 0x0001D4, "Member 'UFortGridWidgetBase::GetSortKeyFor' has a wrong offset!");

// Class FortniteUI.FortGridPickerGrid
// 0x0000 (0x0244 - 0x0244)
class UFortGridPickerGrid final : public UFortUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGridPickerGrid">();
	}
	static class UFortGridPickerGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGridPickerGrid>();
	}
};
static_assert(alignof(UFortGridPickerGrid) == 0x000004, "Wrong alignment on UFortGridPickerGrid");
static_assert(sizeof(UFortGridPickerGrid) == 0x000244, "Wrong size on UFortGridPickerGrid");

// Class FortniteUI.FortGridPickerButton
// 0x0030 (0x021C - 0x01EC)
class UFortGridPickerButton final : public UFortGridWidgetBase
{
public:
	EMenuPlacement                                GridPlacement;                                     // 0x01EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortGridPickerGrid*                    GridWidget;                                        // 0x01F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseOnTileClicked;                               // 0x01F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F5[0x3];                                      // 0x01F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             GridWidgetDelegate;                                // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnGridPickerOpenChanged;                           // 0x0208(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_214[0x8];                                      // 0x0214(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonClicked();
	void SetIsOpen(const bool ShouldBeOpen);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGridPickerButton">();
	}
	static class UFortGridPickerButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGridPickerButton>();
	}
};
static_assert(alignof(UFortGridPickerButton) == 0x000004, "Wrong alignment on UFortGridPickerButton");
static_assert(sizeof(UFortGridPickerButton) == 0x00021C, "Wrong size on UFortGridPickerButton");
static_assert(offsetof(UFortGridPickerButton, GridPlacement) == 0x0001EC, "Member 'UFortGridPickerButton::GridPlacement' has a wrong offset!");
static_assert(offsetof(UFortGridPickerButton, GridWidget) == 0x0001F0, "Member 'UFortGridPickerButton::GridWidget' has a wrong offset!");
static_assert(offsetof(UFortGridPickerButton, bCloseOnTileClicked) == 0x0001F4, "Member 'UFortGridPickerButton::bCloseOnTileClicked' has a wrong offset!");
static_assert(offsetof(UFortGridPickerButton, GridWidgetDelegate) == 0x0001F8, "Member 'UFortGridPickerButton::GridWidgetDelegate' has a wrong offset!");
static_assert(offsetof(UFortGridPickerButton, OnGridPickerOpenChanged) == 0x000208, "Member 'UFortGridPickerButton::OnGridPickerOpenChanged' has a wrong offset!");

// Class FortniteUI.FortGridWidget
// 0x0008 (0x01F4 - 0x01EC)
class UFortGridWidget final : public UFortGridWidgetBase
{
public:
	uint8                                         Pad_1EC[0x8];                                      // 0x01EC(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGridWidget">();
	}
	static class UFortGridWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGridWidget>();
	}
};
static_assert(alignof(UFortGridWidget) == 0x000004, "Wrong alignment on UFortGridWidget");
static_assert(sizeof(UFortGridWidget) == 0x0001F4, "Wrong size on UFortGridWidget");

// Class FortniteUI.FortHeroManagementContext
// 0x00FC (0x0118 - 0x001C)
class UFortHeroManagementContext final : public UBlueprintContextBase
{
public:
	UMulticastDelegateProperty_                   OnPlayerDataUpdated;                               // 0x001C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMcpHeroDeleteResponse;                           // 0x0028(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMcpHeroCreateResponse;                           // 0x0034(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnAvailableHeroesChanged;                          // 0x0040(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCurrentHeroChanged;                              // 0x004C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMcpAbilityChangeRequestResponse;                 // 0x0058(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMcpAbilityChangeRequestSent;                     // 0x0064(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnAbilitySelectionRolledBack;                      // 0x0070(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnAvailableAbilityPointsChanged;                   // 0x007C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnHeroStatsChanged;                                // 0x0088(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UFortHero*                              CurrentHero;                                       // 0x0094(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UFortHeroType*>                  AllHeroTypes;                                      // 0x0098(0x000C)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortHero*                              HeroBeingDeleted;                                  // 0x00A8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0x6C];                                      // 0x00AC(0x006C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanAffordAbility(int32 TraitIdx, int32 TraitDepth);
	bool CanAffordAbilityFromID(const class FString& HeroId, int32 TraitIdx, int32 TraitDepth);
	bool CanAffordNextAbility(int32 TraitIdx);
	bool CanAffordNextAbilityFromID(const class FString& HeroId, int32 TraitIdx);
	bool GetCurrentHeroID(class FString* HeroId);
	void GetDisplayStats(TArray<struct FFortGameplayEffectModifierDescription>* Stats);
	TArray<struct FEmptyHeroSlot> GetEmptyHeroSlots();
	bool GetHeroData(struct FHeroUIData* HeroData);
	struct FHeroUIData GetHeroDataFromID(const class FString& HeroId);
	bool PurchaseNextAbility(int32 TraitIdx);
	bool PurchaseNextAbilityFromID(const class FString& HeroId, int32 TraitIdx);
	bool RedeemAllAbilities();
	void RedeemAllAbilitiesFromID(const class FString& HeroId);
	bool RedeemPrevAbility(int32 TraitIdx);
	bool RedeemPrevAbilityFromID(const class FString& HeroId, int32 TraitIdx);
	bool RequestCreateHero(const class UFortHeroType* HeroType, const class FString& Name_0, EFortCustomGender Gender);
	bool RequestDeleteHero(const class FString& HeroId);
	bool RequestSetTraitDepth(int32 TraitIdx, int32 Depth);
	bool RequestSetTraitDepthFromID(const class FString& HeroId, int32 TraitIdx, int32 Depth);
	bool SetCurrentHero(const class FString& HeroId);
	bool SetHeroName(const class FString& NewName);
	bool SetHeroNameFromID(const class FString& HeroId, const class FString& NewName);
	void SetShowingStatsScreen(bool bIsShowingStats);

	bool CanModifyTraitDepth(int32 TraitIdx) const;
	bool CanModifyTraitDepthFromID(const class FString& HeroId, int32 TraitIdx) const;
	bool CanRedeemAllAbilities() const;
	ENameStatus CheckHeroNameValidity(const class FString& Name_0) const;
	void GenerateRandomHeroName(const class UDataTable* NameTable, class FString* Name_0) const;
	int32 GetAbilityCost(int32 TraitIdx, int32 TraitDepth) const;
	int32 GetAbilityCostFromID(const class FString& HeroId, int32 TraitIdx, int32 TraitDepth) const;
	TArray<class FString> GetAllHeroIDs() const;
	float GetAttributeValue(const struct FGameplayAttribute& Attribute) const;
	float GetAttributeValueFromID(const class FString& HeroId, const struct FGameplayAttribute& Attribute) const;
	bool GetAttributeValuesArray(const TArray<struct FGameplayAttribute>& Attributes, TArray<float>* Values) const;
	bool GetAttributeValuesArrayFromID(const class FString& HeroId, const TArray<struct FGameplayAttribute>& Attributes, TArray<float>* Values) const;
	TArray<class UFortAbilityKit*> GetCoreAbilities() const;
	TArray<class UFortAbilityKit*> GetCoreAbilitiesFromID(const class FString& HeroId) const;
	int32 GetMaxNameLength() const;
	int32 GetNextAbilityCost(int32 TraitIdx) const;
	int32 GetNextAbilityCostFromID(const class FString& HeroId, int32 TraitIdx) const;
	int32 GetNumHeroTraits() const;
	bool GetNumUnspentAbilityPoints(int32* NumAbilityPoints) const;
	int32 GetNumUnspentAbilityPointsFromID(const class FString& HeroId) const;
	class UFortTrait* GetTrait(int32 TraitIdx) const;
	bool GetTraitDepth(int32 TraitIdx, int32* Depth) const;
	int32 GetTraitDepthFromID(const class FString& HeroId, int32 TraitIdx) const;
	class UFortTrait* GetTraitFromID(const class FString& HeroId, int32 TraitIdx) const;
	bool IsCreateHeroEnabled() const;
	bool IsDeleteHeroEnabled() const;
	bool IsShowingStatsScreen() const;
	bool IsSkillTreeUnlocked() const;
	bool IsSkillTreeUnlockedFromID(const class FString& HeroId) const;
	int32 NumHeroSlots() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHeroManagementContext">();
	}
	static class UFortHeroManagementContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHeroManagementContext>();
	}
};
static_assert(alignof(UFortHeroManagementContext) == 0x000004, "Wrong alignment on UFortHeroManagementContext");
static_assert(sizeof(UFortHeroManagementContext) == 0x000118, "Wrong size on UFortHeroManagementContext");
static_assert(offsetof(UFortHeroManagementContext, OnPlayerDataUpdated) == 0x00001C, "Member 'UFortHeroManagementContext::OnPlayerDataUpdated' has a wrong offset!");
static_assert(offsetof(UFortHeroManagementContext, OnMcpHeroDeleteResponse) == 0x000028, "Member 'UFortHeroManagementContext::OnMcpHeroDeleteResponse' has a wrong offset!");
static_assert(offsetof(UFortHeroManagementContext, OnMcpHeroCreateResponse) == 0x000034, "Member 'UFortHeroManagementContext::OnMcpHeroCreateResponse' has a wrong offset!");
static_assert(offsetof(UFortHeroManagementContext, OnAvailableHeroesChanged) == 0x000040, "Member 'UFortHeroManagementContext::OnAvailableHeroesChanged' has a wrong offset!");
static_assert(offsetof(UFortHeroManagementContext, OnCurrentHeroChanged) == 0x00004C, "Member 'UFortHeroManagementContext::OnCurrentHeroChanged' has a wrong offset!");
static_assert(offsetof(UFortHeroManagementContext, OnMcpAbilityChangeRequestResponse) == 0x000058, "Member 'UFortHeroManagementContext::OnMcpAbilityChangeRequestResponse' has a wrong offset!");
static_assert(offsetof(UFortHeroManagementContext, OnMcpAbilityChangeRequestSent) == 0x000064, "Member 'UFortHeroManagementContext::OnMcpAbilityChangeRequestSent' has a wrong offset!");
static_assert(offsetof(UFortHeroManagementContext, OnAbilitySelectionRolledBack) == 0x000070, "Member 'UFortHeroManagementContext::OnAbilitySelectionRolledBack' has a wrong offset!");
static_assert(offsetof(UFortHeroManagementContext, OnAvailableAbilityPointsChanged) == 0x00007C, "Member 'UFortHeroManagementContext::OnAvailableAbilityPointsChanged' has a wrong offset!");
static_assert(offsetof(UFortHeroManagementContext, OnHeroStatsChanged) == 0x000088, "Member 'UFortHeroManagementContext::OnHeroStatsChanged' has a wrong offset!");
static_assert(offsetof(UFortHeroManagementContext, CurrentHero) == 0x000094, "Member 'UFortHeroManagementContext::CurrentHero' has a wrong offset!");
static_assert(offsetof(UFortHeroManagementContext, AllHeroTypes) == 0x000098, "Member 'UFortHeroManagementContext::AllHeroTypes' has a wrong offset!");
static_assert(offsetof(UFortHeroManagementContext, HeroBeingDeleted) == 0x0000A8, "Member 'UFortHeroManagementContext::HeroBeingDeleted' has a wrong offset!");

// Class FortniteUI.FortHUDContext
// 0x01E0 (0x01FC - 0x001C)
class UFortHUDContext final : public UBlueprintContextBase
{
public:
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnCursorModeChanged;                               // 0x0020(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnIndicatorModeChanged;                            // 0x002C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnBuildingFocused;                                 // 0x0038(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFocusedBuildingStateChanged;                     // 0x0044(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFocusedBuildingHealthChanged;                    // 0x0050(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFocusedBuildingRepairCostChanged;                // 0x005C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFocusedBuildingAttachedTrapDurabilityChanged;    // 0x0068(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlayerTargetingChanged;                          // 0x0074(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnActorUnderReticleChanged;                        // 0x0080(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnScoreChanged;                                    // 0x008C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnScoreStatChanged;                                // 0x0098(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnZoneCompleted;                                   // 0x00A4(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPawnSet;                                         // 0x00B0(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnDamageReceived;                                  // 0x00BC(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnAbilityFailed;                                   // 0x00C8(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerMaxHealthChanged;                     // 0x00D4(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerHealthChanged;                        // 0x00E0(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerDied;                                 // 0x00EC(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerMaxShieldChanged;                     // 0x00F8(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerShieldChanged;                        // 0x0104(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerMaxStaminaChanged;                    // 0x0110(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnLocalPlayerStaminaChanged;                       // 0x011C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnWeaponEquippedDelegate;                          // 0x0128(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnAbilityDecisionWindowStackUpdated;               // 0x0134(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemCollectorChanged;                            // 0x0140(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bPendingAttachToHUD;                               // 0x014C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerState*                       OwningPlayerState;                                 // 0x0150(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ABuildingActor*                         CurFocusedBuilding;                                // 0x0154(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_158[0xA4];                                     // 0x0158(0x00A4)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnterCameraMode();
	void EnterCursorMode(class FName ActionName, class UUserWidget* CursorModeWidget);
	void ForwardOnAbilityDecisionWindowStackUpdated();
	void ForwardOnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	struct FFortKillerVisualInfo GetKillerVisualInfoFromDeathReport(const struct FFortPlayerDeathReport& DeathReport);
	void HandleLocalPawnDied(const struct FFortPlayerDeathReport& DeathReport);
	void SetIndicatorsAllowed(bool bIndicatorsAllowed);

	bool AreIndicatorsEnabled() const;
	class UFortHero* GetCurrentHero() const;
	bool GetFocusedBuildingInfo(struct FFortFocusedBuildingInfo* OutBuildingInfo) const;
	class AFortGameStateZone* GetGameStateZone() const;
	class UFortAbilitySystemComponent* GetPlayerAbilitySystemComponent() const;
	class AFortPlayerStateZone* GetPlayerStateZone() const;
	float GetScoreDisplayFactor() const;
	class AFortPvPBaseCornerstone* GetTeamCornerstone(EFortTeam Team) const;
	bool IsInCursorMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortHUDContext">();
	}
	static class UFortHUDContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortHUDContext>();
	}
};
static_assert(alignof(UFortHUDContext) == 0x000004, "Wrong alignment on UFortHUDContext");
static_assert(sizeof(UFortHUDContext) == 0x0001FC, "Wrong size on UFortHUDContext");
static_assert(offsetof(UFortHUDContext, OnCursorModeChanged) == 0x000020, "Member 'UFortHUDContext::OnCursorModeChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnIndicatorModeChanged) == 0x00002C, "Member 'UFortHUDContext::OnIndicatorModeChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnBuildingFocused) == 0x000038, "Member 'UFortHUDContext::OnBuildingFocused' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnFocusedBuildingStateChanged) == 0x000044, "Member 'UFortHUDContext::OnFocusedBuildingStateChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnFocusedBuildingHealthChanged) == 0x000050, "Member 'UFortHUDContext::OnFocusedBuildingHealthChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnFocusedBuildingRepairCostChanged) == 0x00005C, "Member 'UFortHUDContext::OnFocusedBuildingRepairCostChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnFocusedBuildingAttachedTrapDurabilityChanged) == 0x000068, "Member 'UFortHUDContext::OnFocusedBuildingAttachedTrapDurabilityChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnPlayerTargetingChanged) == 0x000074, "Member 'UFortHUDContext::OnPlayerTargetingChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnActorUnderReticleChanged) == 0x000080, "Member 'UFortHUDContext::OnActorUnderReticleChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnScoreChanged) == 0x00008C, "Member 'UFortHUDContext::OnScoreChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnScoreStatChanged) == 0x000098, "Member 'UFortHUDContext::OnScoreStatChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnZoneCompleted) == 0x0000A4, "Member 'UFortHUDContext::OnZoneCompleted' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnPawnSet) == 0x0000B0, "Member 'UFortHUDContext::OnPawnSet' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnDamageReceived) == 0x0000BC, "Member 'UFortHUDContext::OnDamageReceived' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnAbilityFailed) == 0x0000C8, "Member 'UFortHUDContext::OnAbilityFailed' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerMaxHealthChanged) == 0x0000D4, "Member 'UFortHUDContext::OnLocalPlayerMaxHealthChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerHealthChanged) == 0x0000E0, "Member 'UFortHUDContext::OnLocalPlayerHealthChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerDied) == 0x0000EC, "Member 'UFortHUDContext::OnLocalPlayerDied' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerMaxShieldChanged) == 0x0000F8, "Member 'UFortHUDContext::OnLocalPlayerMaxShieldChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerShieldChanged) == 0x000104, "Member 'UFortHUDContext::OnLocalPlayerShieldChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerMaxStaminaChanged) == 0x000110, "Member 'UFortHUDContext::OnLocalPlayerMaxStaminaChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnLocalPlayerStaminaChanged) == 0x00011C, "Member 'UFortHUDContext::OnLocalPlayerStaminaChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnWeaponEquippedDelegate) == 0x000128, "Member 'UFortHUDContext::OnWeaponEquippedDelegate' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnAbilityDecisionWindowStackUpdated) == 0x000134, "Member 'UFortHUDContext::OnAbilityDecisionWindowStackUpdated' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OnItemCollectorChanged) == 0x000140, "Member 'UFortHUDContext::OnItemCollectorChanged' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, bPendingAttachToHUD) == 0x00014C, "Member 'UFortHUDContext::bPendingAttachToHUD' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, OwningPlayerState) == 0x000150, "Member 'UFortHUDContext::OwningPlayerState' has a wrong offset!");
static_assert(offsetof(UFortHUDContext, CurFocusedBuilding) == 0x000154, "Member 'UFortHUDContext::CurFocusedBuilding' has a wrong offset!");

// Class FortniteUI.FortInventoryContext
// 0x00B4 (0x00D0 - 0x001C)
class UFortInventoryContext final : public UBlueprintContextBase
{
public:
	UMulticastDelegateProperty_                   OnWorldItemListChanged;                            // 0x001C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemPickedUp;                                    // 0x0028(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnQuickbarContentsChanged;                         // 0x0034(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnQuickbarSlotFocusChanged;                        // 0x0040(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnQuickbarForceFullUpdate;                         // 0x004C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnWorldItemsChanged;                               // 0x0058(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPinnedSchematicsChanged;                         // 0x0064(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSchematicsLockedChanged;                         // 0x0070(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnSchematicUnlocked;                               // 0x007C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCraftItemStarted;                                // 0x0088(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<class UFortSchematicItemDefinition*, bool> SchematicLockedStates;                             // 0x0094(0x003C)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	bool ActivateItem(class UFortItem* Item);
	bool CraftSchematic(class UFortSchematicItem* SchematicItem, EFortCraftFailCause* FailCause);
	bool DisassembleItem(class UFortWorldItem* Item);
	void DropItemOnPlayerOrWorld(const class UFortWorldItem* ItemBeingDropped, class AFortPlayerState* InDestinationPlayer, class UWidget* OwnerWidget, const struct FPointerEvent& PointerEvent, const struct FGeometry& InGeometry);
	bool DropItemOnQuickBar(class UFortItem* Item, EFortQuickBars TargetQuickbar, int32 TargetSlot);
	void LockAllSchematics();
	bool RemoveItemFromQuickBar(class UFortItem* Item);
	bool SetSchematicPinned(class UFortSchematicItem* Schematic, bool bEnabled);
	void UnlockAllSchematics();
	void UnlockSchematic(class UFortSchematicItemDefinition* SchematicDefinition);

	bool CanCraftSchematic(class UFortSchematicItem* SchematicItem, EFortCraftFailCause* FailCause) const;
	bool CanDisassembleItem(class UFortWorldItem* Item) const;
	bool CanPinSchematic(class UFortSchematicItem* Schematic) const;
	bool DoesItemMatchFilter(class UFortItem* Item, const struct FFortItemListFilter& FilterSettings) const;
	void GetBackpackItemCounts(int32* ItemsCount, int32* MaxItemsCount, int32* OverflowItemsCount) const;
	class UTexture2D* GetCurrentAmmoIcon() const;
	class UFortWorldItemDefinition* GetCurrentAmmoItemDefinition() const;
	int32 GetCurrentResourceCount() const;
	class UTexture2D* GetCurrentResourceIcon() const;
	class UFortResourceItemDefinition* GetCurrentResourceItemDefinition() const;
	class AFortWeapon* GetEquippedWeapon() const;
	int32 GetNumInInventory(class UFortWorldItemDefinition* ItemDefinition, bool bIncludeReserved) const;
	void GetPinnedSchematicList(TArray<class UFortSchematicItem*>* PinnedItems) const;
	void GetQuickbarFocus(EFortQuickBars* OutQuickBar, int32* OutSlot) const;
	class UFortItem* GetQuickBarSlottedItem(EFortQuickBars InQuickBar, int32 Slot) const;
	int32 GetResourceCount(EFortResourceType ResourceType) const;
	class UTexture2D* GetResourceIcon(EFortResourceType ResourceType) const;
	class UFortResourceItemDefinition* GetResourceItemDefinition(EFortResourceType ResourceType) const;
	void GetSchematicItemList(TArray<class UFortSchematicItem*>* Items, const struct FFortItemListFilter& FilterSettings) const;
	void GetWorldItemList(TArray<class UFortWorldItem*>* Items, const struct FFortItemListFilter& FilterSettings) const;
	bool IsSchematicPinned(class UFortSchematicItem* Schematic) const;
	bool WillQuickBarAcceptItem(class UFortItem* Item, EFortQuickBars InQuickBar, int32 Slot) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortInventoryContext">();
	}
	static class UFortInventoryContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortInventoryContext>();
	}
};
static_assert(alignof(UFortInventoryContext) == 0x000004, "Wrong alignment on UFortInventoryContext");
static_assert(sizeof(UFortInventoryContext) == 0x0000D0, "Wrong size on UFortInventoryContext");
static_assert(offsetof(UFortInventoryContext, OnWorldItemListChanged) == 0x00001C, "Member 'UFortInventoryContext::OnWorldItemListChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnItemPickedUp) == 0x000028, "Member 'UFortInventoryContext::OnItemPickedUp' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnQuickbarContentsChanged) == 0x000034, "Member 'UFortInventoryContext::OnQuickbarContentsChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnQuickbarSlotFocusChanged) == 0x000040, "Member 'UFortInventoryContext::OnQuickbarSlotFocusChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnQuickbarForceFullUpdate) == 0x00004C, "Member 'UFortInventoryContext::OnQuickbarForceFullUpdate' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnWorldItemsChanged) == 0x000058, "Member 'UFortInventoryContext::OnWorldItemsChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnPinnedSchematicsChanged) == 0x000064, "Member 'UFortInventoryContext::OnPinnedSchematicsChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnSchematicsLockedChanged) == 0x000070, "Member 'UFortInventoryContext::OnSchematicsLockedChanged' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnSchematicUnlocked) == 0x00007C, "Member 'UFortInventoryContext::OnSchematicUnlocked' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, OnCraftItemStarted) == 0x000088, "Member 'UFortInventoryContext::OnCraftItemStarted' has a wrong offset!");
static_assert(offsetof(UFortInventoryContext, SchematicLockedStates) == 0x000094, "Member 'UFortInventoryContext::SchematicLockedStates' has a wrong offset!");

// Class FortniteUI.FortLegacySlateBridgeWidget
// 0x0024 (0x00FC - 0x00D8)
class UFortLegacySlateBridgeWidget final : public UNativeWidgetHost
{
public:
	EFortLegacySlateWidget                        ContainedWidgetType;                               // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DPIScaleFactor;                                    // 0x00DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void()>                             OnClose;                                           // 0x00E0(0x0010)(ZeroConstructor, Transient, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0[0xC];                                       // 0x00F0(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetOnCloseHandler(const TDelegate<void()>& OnCloseHandler);
	void UpdateSlateWidget(EFortLegacySlateWidget SlateWidgetType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLegacySlateBridgeWidget">();
	}
	static class UFortLegacySlateBridgeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLegacySlateBridgeWidget>();
	}
};
static_assert(alignof(UFortLegacySlateBridgeWidget) == 0x000004, "Wrong alignment on UFortLegacySlateBridgeWidget");
static_assert(sizeof(UFortLegacySlateBridgeWidget) == 0x0000FC, "Wrong size on UFortLegacySlateBridgeWidget");
static_assert(offsetof(UFortLegacySlateBridgeWidget, ContainedWidgetType) == 0x0000D8, "Member 'UFortLegacySlateBridgeWidget::ContainedWidgetType' has a wrong offset!");
static_assert(offsetof(UFortLegacySlateBridgeWidget, DPIScaleFactor) == 0x0000DC, "Member 'UFortLegacySlateBridgeWidget::DPIScaleFactor' has a wrong offset!");
static_assert(offsetof(UFortLegacySlateBridgeWidget, OnClose) == 0x0000E0, "Member 'UFortLegacySlateBridgeWidget::OnClose' has a wrong offset!");

// Class FortniteUI.FortListView
// 0x0048 (0x0118 - 0x00D0)
class UFortListView final : public UTableViewBase
{
public:
	UMulticastDelegateProperty_                   OnItemClicked;                                     // 0x00D0(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnItemSelected;                                    // 0x00DC(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* Item)>          OnGenerateRowEvent;                                // 0x00E8(0x0010)(Edit, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ItemHeight;                                        // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UObject*>                        DataProvider;                                      // 0x00FC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	ESelectionMode                                SelectionMode;                                     // 0x0108(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EConsumeMouseWheel                            ConsumeMouseWheel;                                 // 0x0109(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortListItem>              ListItemClass;                                     // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddItem(class UObject* NewItem);
	void Clear();
	void ClearSelection();
	void RemoveItemAt(int32 INDEX);
	void SetDataProvider(const TArray<class UObject*>& NewData);
	bool SetIndexSelected(int32 INDEX);
	bool SetItemSelected(class UObject* Item);

	int32 GetIndexForItem(class UObject* Item) const;
	class UObject* GetItemAt(int32 INDEX) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortListView">();
	}
	static class UFortListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortListView>();
	}
};
static_assert(alignof(UFortListView) == 0x000004, "Wrong alignment on UFortListView");
static_assert(sizeof(UFortListView) == 0x000118, "Wrong size on UFortListView");
static_assert(offsetof(UFortListView, OnItemClicked) == 0x0000D0, "Member 'UFortListView::OnItemClicked' has a wrong offset!");
static_assert(offsetof(UFortListView, OnItemSelected) == 0x0000DC, "Member 'UFortListView::OnItemSelected' has a wrong offset!");
static_assert(offsetof(UFortListView, OnGenerateRowEvent) == 0x0000E8, "Member 'UFortListView::OnGenerateRowEvent' has a wrong offset!");
static_assert(offsetof(UFortListView, ItemHeight) == 0x0000F8, "Member 'UFortListView::ItemHeight' has a wrong offset!");
static_assert(offsetof(UFortListView, DataProvider) == 0x0000FC, "Member 'UFortListView::DataProvider' has a wrong offset!");
static_assert(offsetof(UFortListView, SelectionMode) == 0x000108, "Member 'UFortListView::SelectionMode' has a wrong offset!");
static_assert(offsetof(UFortListView, ConsumeMouseWheel) == 0x000109, "Member 'UFortListView::ConsumeMouseWheel' has a wrong offset!");
static_assert(offsetof(UFortListView, ListItemClass) == 0x00010C, "Member 'UFortListView::ListItemClass' has a wrong offset!");

// Class FortniteUI.FortModalContainerData
// 0x000C (0x0028 - 0x001C)
class UFortModalContainerData final : public UDataAsset
{
public:
	TArray<struct FFortModalContainerSizeEntry>   Entries;                                           // 0x001C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortModalContainerData">();
	}
	static class UFortModalContainerData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortModalContainerData>();
	}
};
static_assert(alignof(UFortModalContainerData) == 0x000004, "Wrong alignment on UFortModalContainerData");
static_assert(sizeof(UFortModalContainerData) == 0x000028, "Wrong size on UFortModalContainerData");
static_assert(offsetof(UFortModalContainerData, Entries) == 0x00001C, "Member 'UFortModalContainerData::Entries' has a wrong offset!");

// Class FortniteUI.FortModalContainerWidget
// 0x0030 (0x0100 - 0x00D0)
class UFortModalContainerWidget final : public UWidget
{
public:
	uint8                                         Pad_D0[0x4];                                       // 0x00D0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EModalContainerSize                           SizeConstraint;                                    // 0x00D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortModalContainerSizeEntry>   DefaultSizeEntries;                                // 0x00D8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UFortModalContainerData*                OverrideSizeEntries;                               // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                TopContent;                                        // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                MiddleContent;                                     // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                BottomContent;                                     // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidget*                                BackgroudContent;                                  // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortModalContainerWidget">();
	}
	static class UFortModalContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortModalContainerWidget>();
	}
};
static_assert(alignof(UFortModalContainerWidget) == 0x000004, "Wrong alignment on UFortModalContainerWidget");
static_assert(sizeof(UFortModalContainerWidget) == 0x000100, "Wrong size on UFortModalContainerWidget");
static_assert(offsetof(UFortModalContainerWidget, SizeConstraint) == 0x0000D4, "Member 'UFortModalContainerWidget::SizeConstraint' has a wrong offset!");
static_assert(offsetof(UFortModalContainerWidget, DefaultSizeEntries) == 0x0000D8, "Member 'UFortModalContainerWidget::DefaultSizeEntries' has a wrong offset!");
static_assert(offsetof(UFortModalContainerWidget, OverrideSizeEntries) == 0x0000E4, "Member 'UFortModalContainerWidget::OverrideSizeEntries' has a wrong offset!");
static_assert(offsetof(UFortModalContainerWidget, TopContent) == 0x0000E8, "Member 'UFortModalContainerWidget::TopContent' has a wrong offset!");
static_assert(offsetof(UFortModalContainerWidget, MiddleContent) == 0x0000EC, "Member 'UFortModalContainerWidget::MiddleContent' has a wrong offset!");
static_assert(offsetof(UFortModalContainerWidget, BottomContent) == 0x0000F0, "Member 'UFortModalContainerWidget::BottomContent' has a wrong offset!");
static_assert(offsetof(UFortModalContainerWidget, BackgroudContent) == 0x0000F4, "Member 'UFortModalContainerWidget::BackgroudContent' has a wrong offset!");

// Class FortniteUI.FortSocialListView
// 0x05F0 (0x06C0 - 0x00D0)
class UFortSocialListView final : public UWidget
{
public:
	TDelegate<void(class UFortSocialItem* SocialItem)> GenerateItemEvent;                                 // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortSocialItemWidget>      SocialItemWidgetType;                              // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTableRowStyle                         ListRowStyle;                                      // 0x00E4(0x05AC)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_690[0x30];                                     // 0x0690(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetList(const TArray<class UFortSocialItem*>& InList);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialListView">();
	}
	static class UFortSocialListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialListView>();
	}
};
static_assert(alignof(UFortSocialListView) == 0x000004, "Wrong alignment on UFortSocialListView");
static_assert(sizeof(UFortSocialListView) == 0x0006C0, "Wrong size on UFortSocialListView");
static_assert(offsetof(UFortSocialListView, GenerateItemEvent) == 0x0000D0, "Member 'UFortSocialListView::GenerateItemEvent' has a wrong offset!");
static_assert(offsetof(UFortSocialListView, SocialItemWidgetType) == 0x0000E0, "Member 'UFortSocialListView::SocialItemWidgetType' has a wrong offset!");
static_assert(offsetof(UFortSocialListView, ListRowStyle) == 0x0000E4, "Member 'UFortSocialListView::ListRowStyle' has a wrong offset!");

// Class FortniteUI.FortStoreContext
// 0x0050 (0x006C - 0x001C)
class UFortStoreContext final : public UBlueprintContextBase
{
public:
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnCardPackOffersChanged;                           // 0x0020(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnStoreStateChange;                                // 0x002C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FCardPackOffer>                 Offers;                                            // 0x0038(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              NextStoreRefresh;                                  // 0x0044(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCard>                          CardList;                                          // 0x004C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CardIndex;                                         // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOpenedCardPack                        OpenedCardPack;                                    // 0x005C(0x0008)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EFortRarity                                   LastCardRarity;                                    // 0x0064(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x7];                                       // 0x0065(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CardAddedToSummaryComplete();
	bool CardBackRevealComplete();
	bool CardEntryComplete();
	bool CardExitComplete();
	bool CardFlipComplete();
	bool CardFrontRevealComplete();
	bool CardPackDestroyComplete();
	bool CardPackOpeningComplete();
	void DismissError();
	bool EnterCardPackStore();
	bool EnterCurrencyStore(const class FString& AttemptedPurchaseCardPackId);
	bool ErrorOccurred(const class FString& ErrorAnalytics);
	bool ExitCardPackStore();
	bool ExitCurrencyStore();
	bool ExitSummary();
	bool ExitWebPayment();
	void FreshenCache();
	void GetAccountItems(const TArray<class UFortAccountItemDefinition*>& AccountItemDefinitions, TArray<class UFortAccountItem*>* AccountItems);
	struct FLinearColor GetRarityColor(EFortRarity Rarity);
	struct FTimespan GetTimeUntilDailyLimitReset();
	struct FTimespan GetTimeUntilMarketplaceRefresh();
	ECardPackPurchaseError MakePurchase(const struct FCardPackOffer& Offer, int32 Quantity);
	bool OpenWebPayment(const class FString& AttemptedMTXOfferId);

	void FireInteractionAnalyticsEvent(const class FString& Interaction, const class FString& Details) const;
	bool GetCard(int32 CardIdx, struct FCard* ResultOut) const;
	int32 GetNumUnopenedCardPacksRemaining(const class UFortCardPackItemDefinition* PackType) const;
	EFortStoreState GetPreviousState() const;
	EFortStoreState GetStoreState() const;
	bool IsCatalogAvailable() const;
	bool IsNewStoreEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortStoreContext">();
	}
	static class UFortStoreContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortStoreContext>();
	}
};
static_assert(alignof(UFortStoreContext) == 0x000004, "Wrong alignment on UFortStoreContext");
static_assert(sizeof(UFortStoreContext) == 0x00006C, "Wrong size on UFortStoreContext");
static_assert(offsetof(UFortStoreContext, OnCardPackOffersChanged) == 0x000020, "Member 'UFortStoreContext::OnCardPackOffersChanged' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, OnStoreStateChange) == 0x00002C, "Member 'UFortStoreContext::OnStoreStateChange' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, Offers) == 0x000038, "Member 'UFortStoreContext::Offers' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, NextStoreRefresh) == 0x000044, "Member 'UFortStoreContext::NextStoreRefresh' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, CardList) == 0x00004C, "Member 'UFortStoreContext::CardList' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, CardIndex) == 0x000058, "Member 'UFortStoreContext::CardIndex' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, OpenedCardPack) == 0x00005C, "Member 'UFortStoreContext::OpenedCardPack' has a wrong offset!");
static_assert(offsetof(UFortStoreContext, LastCardRarity) == 0x000064, "Member 'UFortStoreContext::LastCardRarity' has a wrong offset!");

// Class FortniteUI.FortUIMessageManager
// 0x0024 (0x0040 - 0x001C)
class UFortUIMessageManager final : public UObject
{
public:
	UMulticastDelegateProperty_                   OnMessageAvailable;                                // 0x001C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UFortUIMessageItemWidget*>       MessageQueue;                                      // 0x0028(0x000C)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UFortUIMessageItemWidget*>       CurrentlyDisplayedMessages;                        // 0x0034(0x000C)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void AddMessageItem(class UFortUIMessageItemWidget* MessageItem);
	class UFortUIMessageItemWidget* GetNextMessageInQueue();
	void HandleMessageDisplayed(class UFortUIMessageItemWidget* MessageItem);
	void HandleMessageRemoved(class UFortUIMessageItemWidget* MessageItem);

	int32 GetNumDisplayedItems() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIMessageManager">();
	}
	static class UFortUIMessageManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIMessageManager>();
	}
};
static_assert(alignof(UFortUIMessageManager) == 0x000004, "Wrong alignment on UFortUIMessageManager");
static_assert(sizeof(UFortUIMessageManager) == 0x000040, "Wrong size on UFortUIMessageManager");
static_assert(offsetof(UFortUIMessageManager, OnMessageAvailable) == 0x00001C, "Member 'UFortUIMessageManager::OnMessageAvailable' has a wrong offset!");
static_assert(offsetof(UFortUIMessageManager, MessageQueue) == 0x000028, "Member 'UFortUIMessageManager::MessageQueue' has a wrong offset!");
static_assert(offsetof(UFortUIMessageManager, CurrentlyDisplayedMessages) == 0x000034, "Member 'UFortUIMessageManager::CurrentlyDisplayedMessages' has a wrong offset!");

// Class FortniteUI.FortUIStateTrigger
// 0x0004 (0x0020 - 0x001C)
class UFortUIStateTrigger : public UObject
{
public:
	EFortUIState                                  UIState;                                           // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool EvalBP() const;
	bool IsLoggedIn() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStateTrigger">();
	}
	static class UFortUIStateTrigger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStateTrigger>();
	}
};
static_assert(alignof(UFortUIStateTrigger) == 0x000004, "Wrong alignment on UFortUIStateTrigger");
static_assert(sizeof(UFortUIStateTrigger) == 0x000020, "Wrong size on UFortUIStateTrigger");
static_assert(offsetof(UFortUIStateTrigger, UIState) == 0x00001C, "Member 'UFortUIStateTrigger::UIState' has a wrong offset!");

// Class FortniteUI.FortUIStateTrigger_InGame
// 0x0000 (0x0020 - 0x0020)
class UFortUIStateTrigger_InGame final : public UFortUIStateTrigger
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStateTrigger_InGame">();
	}
	static class UFortUIStateTrigger_InGame* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStateTrigger_InGame>();
	}
};
static_assert(alignof(UFortUIStateTrigger_InGame) == 0x000004, "Wrong alignment on UFortUIStateTrigger_InGame");
static_assert(sizeof(UFortUIStateTrigger_InGame) == 0x000020, "Wrong size on UFortUIStateTrigger_InGame");

// Class FortniteUI.FortUIStateTrigger_Login
// 0x0000 (0x0020 - 0x0020)
class UFortUIStateTrigger_Login final : public UFortUIStateTrigger
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStateTrigger_Login">();
	}
	static class UFortUIStateTrigger_Login* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStateTrigger_Login>();
	}
};
static_assert(alignof(UFortUIStateTrigger_Login) == 0x000004, "Wrong alignment on UFortUIStateTrigger_Login");
static_assert(sizeof(UFortUIStateTrigger_Login) == 0x000020, "Wrong size on UFortUIStateTrigger_Login");

// Class FortniteUI.FortActionHandlerPanel
// 0x0024 (0x0268 - 0x0244)
class UFortActionHandlerPanel : public UFortUserWidget
{
public:
	bool                                          bAutoActivate;                                     // 0x0244(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x0245(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_246[0x2];                                      // 0x0246(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             OnPanelActivated;                                  // 0x0248(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate)
	TDelegate<void()>                             OnPanelDeactivated;                                // 0x0258(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPrivate)

public:
	void ActivateActionHandler();
	void DeactivateActionHandler();
	void OnHandleAction(struct FEventReply* Result, bool* bPassThrough);
	void RemoveOnPanelActivated(class UObject* BoundObject);
	void RemoveOnPanelDeactivated(class UObject* BoundObject);
	void SetOnPanelActivated(const TDelegate<void()>& OnActivatedHandler);
	void SetOnPanelDeactivated(const TDelegate<void()>& OnDeactivatedHandler);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActionHandlerPanel">();
	}
	static class UFortActionHandlerPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActionHandlerPanel>();
	}
};
static_assert(alignof(UFortActionHandlerPanel) == 0x000004, "Wrong alignment on UFortActionHandlerPanel");
static_assert(sizeof(UFortActionHandlerPanel) == 0x000268, "Wrong size on UFortActionHandlerPanel");
static_assert(offsetof(UFortActionHandlerPanel, bAutoActivate) == 0x000244, "Member 'UFortActionHandlerPanel::bAutoActivate' has a wrong offset!");
static_assert(offsetof(UFortActionHandlerPanel, bIsActive) == 0x000245, "Member 'UFortActionHandlerPanel::bIsActive' has a wrong offset!");
static_assert(offsetof(UFortActionHandlerPanel, OnPanelActivated) == 0x000248, "Member 'UFortActionHandlerPanel::OnPanelActivated' has a wrong offset!");
static_assert(offsetof(UFortActionHandlerPanel, OnPanelDeactivated) == 0x000258, "Member 'UFortActionHandlerPanel::OnPanelDeactivated' has a wrong offset!");

// Class FortniteUI.FortConfirmationWindow
// 0x0050 (0x02B8 - 0x0268)
class UFortConfirmationWindow : public UFortActionHandlerPanel
{
public:
	struct FFortDialogDescription                 CurrentDescription;                                // 0x0268(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPrivate)

public:
	void KillConfirmation();
	void OnKill();
	void OnShow();
	void ProcessResult(EFortDialogResult DialogResult);
	void ShowConfirmation(const struct FFortDialogDescription& Description);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortConfirmationWindow">();
	}
	static class UFortConfirmationWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortConfirmationWindow>();
	}
};
static_assert(alignof(UFortConfirmationWindow) == 0x000004, "Wrong alignment on UFortConfirmationWindow");
static_assert(sizeof(UFortConfirmationWindow) == 0x0002B8, "Wrong size on UFortConfirmationWindow");
static_assert(offsetof(UFortConfirmationWindow, CurrentDescription) == 0x000268, "Member 'UFortConfirmationWindow::CurrentDescription' has a wrong offset!");

// Class FortniteUI.FortErrorDialog
// 0x000C (0x0274 - 0x0268)
class UFortErrorDialog : public UFortActionHandlerPanel
{
public:
	TArray<struct FFortErrorInfo>                 ErrorInfo;                                         // 0x0268(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void DisplayError(const struct FFortErrorInfo& ErrorInfo_0);
	void DisplaySimpleError(const class FText& ErrorMessage);
	void OnRebuildDialog(int32 NewIndex);
	void ResetErrorInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortErrorDialog">();
	}
	static class UFortErrorDialog* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortErrorDialog>();
	}
};
static_assert(alignof(UFortErrorDialog) == 0x000004, "Wrong alignment on UFortErrorDialog");
static_assert(sizeof(UFortErrorDialog) == 0x000274, "Wrong size on UFortErrorDialog");
static_assert(offsetof(UFortErrorDialog, ErrorInfo) == 0x000268, "Member 'UFortErrorDialog::ErrorInfo' has a wrong offset!");

// Class FortniteUI.FortUIStateWidget
// 0x0000 (0x0268 - 0x0268)
class UFortUIStateWidget : public UFortActionHandlerPanel
{
public:
	void OnEnterState(EFortUIState PreviousUIState);
	void OnExitState(EFortUIState NextUIState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIStateWidget">();
	}
	static class UFortUIStateWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIStateWidget>();
	}
};
static_assert(alignof(UFortUIStateWidget) == 0x000004, "Wrong alignment on UFortUIStateWidget");
static_assert(sizeof(UFortUIStateWidget) == 0x000268, "Wrong size on UFortUIStateWidget");

// Class FortniteUI.FortVerticalRibbon
// 0x000C (0x0274 - 0x0268)
class UFortVerticalRibbon final : public UFortActionHandlerPanel
{
public:
	TArray<class UWidget*>                        WidgetStack;                                       // 0x0268(0x000C)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void _BPOnStackDepthChanged(int32 NewDepth);
	void PopContent();
	void PushContent(class UWidget* NewContent);

	class UWidget* GetTop() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVerticalRibbon">();
	}
	static class UFortVerticalRibbon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVerticalRibbon>();
	}
};
static_assert(alignof(UFortVerticalRibbon) == 0x000004, "Wrong alignment on UFortVerticalRibbon");
static_assert(sizeof(UFortVerticalRibbon) == 0x000274, "Wrong size on UFortVerticalRibbon");
static_assert(offsetof(UFortVerticalRibbon, WidgetStack) == 0x000268, "Member 'UFortVerticalRibbon::WidgetStack' has a wrong offset!");

// Class FortniteUI.FortActorIndicatorWidget
// 0x0028 (0x026C - 0x0244)
class UFortActorIndicatorWidget final : public UFortUserWidget
{
public:
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 IndicatedActor;                                    // 0x0248(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RelativeLocation;                                  // 0x024C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         MinScale;                                          // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxScale;                                          // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxDistance;                                       // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxScaleDistance;                                  // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClampOnScreen;                                    // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnIndicatedActorSet();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActorIndicatorWidget">();
	}
	static class UFortActorIndicatorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActorIndicatorWidget>();
	}
};
static_assert(alignof(UFortActorIndicatorWidget) == 0x000004, "Wrong alignment on UFortActorIndicatorWidget");
static_assert(sizeof(UFortActorIndicatorWidget) == 0x00026C, "Wrong size on UFortActorIndicatorWidget");
static_assert(offsetof(UFortActorIndicatorWidget, IndicatedActor) == 0x000248, "Member 'UFortActorIndicatorWidget::IndicatedActor' has a wrong offset!");
static_assert(offsetof(UFortActorIndicatorWidget, RelativeLocation) == 0x00024C, "Member 'UFortActorIndicatorWidget::RelativeLocation' has a wrong offset!");
static_assert(offsetof(UFortActorIndicatorWidget, MinScale) == 0x000258, "Member 'UFortActorIndicatorWidget::MinScale' has a wrong offset!");
static_assert(offsetof(UFortActorIndicatorWidget, MaxScale) == 0x00025C, "Member 'UFortActorIndicatorWidget::MaxScale' has a wrong offset!");
static_assert(offsetof(UFortActorIndicatorWidget, MaxDistance) == 0x000260, "Member 'UFortActorIndicatorWidget::MaxDistance' has a wrong offset!");
static_assert(offsetof(UFortActorIndicatorWidget, MaxScaleDistance) == 0x000264, "Member 'UFortActorIndicatorWidget::MaxScaleDistance' has a wrong offset!");
static_assert(offsetof(UFortActorIndicatorWidget, bClampOnScreen) == 0x000268, "Member 'UFortActorIndicatorWidget::bClampOnScreen' has a wrong offset!");

// Class FortniteUI.FortItemWidget
// 0x001C (0x0758 - 0x073C)
class UFortItemWidget : public UFortBaseButton
{
public:
	TDelegate<void(class UFortItem** ItemToCompare)> OnGetItemToCompareDelegate;                        // 0x073C(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_74C[0x8];                                      // 0x074C(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuantityOverride;                                  // 0x0754(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BPOnItemChanged();
	void BPOnItemSet(class UFortItem* NewItem);
	class UFortItem* GetItemToCompare();
	void OnFortItemDestroyed();
	void OnFortItemInvalidated();
	void OnFortItemUpdated(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);
	void SetItem(const class UFortItem* InItem, int32 QuantityOverride_0);
	void SetOnGetItemToCompareDelegate(TDelegate<void(class UFortItem** ItemToCompare)> InDelegate);

	int32 GetAmmoCount() const;
	class FText GetDescription() const;
	class FText GetDisplayName() const;
	float GetDurability() const;
	float GetIconScale() const;
	class UTexture* GetIconTexture(EFortBrushSize InBrushSize) const;
	class UFortItem* GetItem() const;
	int32 GetLevel() const;
	float GetPulse() const;
	EFortRarity GetRarity() const;
	struct FSlateBrush GetSecondaryCategoryTexture(EFortBrushSize InBrushSize) const;
	int32 GetStackCount() const;
	struct FSlateBrush GetTertiaryCategoryTexture(EFortBrushSize InBrushSize) const;
	float GetType() const;
	bool HasDurability() const;
	bool HasLevel() const;
	bool HasSecondaryCategory() const;
	bool HasTertiaryCategory() const;
	bool IsEquipped() const;
	bool IsInBackpackOverflow() const;
	bool IsItemValid() const;
	bool IsSchematic() const;
	bool IsSlotted() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemWidget">();
	}
	static class UFortItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemWidget>();
	}
};
static_assert(alignof(UFortItemWidget) == 0x000004, "Wrong alignment on UFortItemWidget");
static_assert(sizeof(UFortItemWidget) == 0x000758, "Wrong size on UFortItemWidget");
static_assert(offsetof(UFortItemWidget, OnGetItemToCompareDelegate) == 0x00073C, "Member 'UFortItemWidget::OnGetItemToCompareDelegate' has a wrong offset!");
static_assert(offsetof(UFortItemWidget, QuantityOverride) == 0x000754, "Member 'UFortItemWidget::QuantityOverride' has a wrong offset!");

// Class FortniteUI.FortBluGloCounter
// 0x0004 (0x0248 - 0x0244)
class UFortBluGloCounter final : public UFortUserWidget
{
public:
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBluGloQuantityChanged(int32 Quantity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortBluGloCounter">();
	}
	static class UFortBluGloCounter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortBluGloCounter>();
	}
};
static_assert(alignof(UFortBluGloCounter) == 0x000004, "Wrong alignment on UFortBluGloCounter");
static_assert(sizeof(UFortBluGloCounter) == 0x000248, "Wrong size on UFortBluGloCounter");

// Class FortniteUI.FortButton
// 0x0024 (0x0268 - 0x0244)
class UFortButton : public UFortUserWidget
{
public:
	UMulticastDelegateProperty_                   ButtonClickedEvent;                                // 0x0244(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bDisabled;                                         // 0x0250(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayText;                                       // 0x0254(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	int32                                         INDEX;                                             // 0x0260(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EFortButtonState                              PendingState;                                      // 0x0264(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFortButtonState                              CurrentState;                                      // 0x0265(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFortButtonState                              LastState;                                         // 0x0266(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_267[0x1];                                      // 0x0267(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCurrentState(EFortButtonState NewState);
	void SetDisabled(bool InDisable);
	void SetIndex(int32 InIndex);
	void SetText(const class FText& InText);

	EFortButtonState GetCurrentState() const;
	bool GetDisabled() const;
	int32 GetIndex() const;
	EFortButtonState GetPendingState() const;
	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortButton">();
	}
	static class UFortButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortButton>();
	}
};
static_assert(alignof(UFortButton) == 0x000004, "Wrong alignment on UFortButton");
static_assert(sizeof(UFortButton) == 0x000268, "Wrong size on UFortButton");
static_assert(offsetof(UFortButton, ButtonClickedEvent) == 0x000244, "Member 'UFortButton::ButtonClickedEvent' has a wrong offset!");
static_assert(offsetof(UFortButton, bDisabled) == 0x000250, "Member 'UFortButton::bDisabled' has a wrong offset!");
static_assert(offsetof(UFortButton, DisplayText) == 0x000254, "Member 'UFortButton::DisplayText' has a wrong offset!");
static_assert(offsetof(UFortButton, INDEX) == 0x000260, "Member 'UFortButton::INDEX' has a wrong offset!");
static_assert(offsetof(UFortButton, PendingState) == 0x000264, "Member 'UFortButton::PendingState' has a wrong offset!");
static_assert(offsetof(UFortButton, CurrentState) == 0x000265, "Member 'UFortButton::CurrentState' has a wrong offset!");
static_assert(offsetof(UFortButton, LastState) == 0x000266, "Member 'UFortButton::LastState' has a wrong offset!");

// Class FortniteUI.FortTabButton
// 0x0004 (0x026C - 0x0268)
class UFortTabButton final : public UFortButton
{
public:
	uint8                                         Pad_268[0x4];                                      // 0x0268(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void _BPOnSelectedChanged();
	void ClearSelection();
	void SetSelection(bool InSelected);

	bool IsSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTabButton">();
	}
	static class UFortTabButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTabButton>();
	}
};
static_assert(alignof(UFortTabButton) == 0x000004, "Wrong alignment on UFortTabButton");
static_assert(sizeof(UFortTabButton) == 0x00026C, "Wrong size on UFortTabButton");

// Class FortniteUI.FortCapturePointWidget
// 0x0010 (0x0254 - 0x0244)
class UFortCapturePointWidget final : public UFortUserWidget
{
public:
	uint8                                         Pad_244[0x10];                                     // 0x0244(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCapturePointDataChanged(bool bActivated, bool bLocked, float CapturePercentage, ECaptureState CaptureState, EFortTeam ControllingTeam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCapturePointWidget">();
	}
	static class UFortCapturePointWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCapturePointWidget>();
	}
};
static_assert(alignof(UFortCapturePointWidget) == 0x000004, "Wrong alignment on UFortCapturePointWidget");
static_assert(sizeof(UFortCapturePointWidget) == 0x000254, "Wrong size on UFortCapturePointWidget");

// Class FortniteUI.FortChatContainer
// 0x0008 (0x024C - 0x0244)
class UFortChatContainer final : public UFortUserWidget
{
public:
	uint8                                         Pad_244[0x8];                                      // 0x0244(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AttachChatWindowToNativeWidget();
	void SetNativeWidgetHost(class UNativeWidgetHost* InNativeWidgetHost);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortChatContainer">();
	}
	static class UFortChatContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortChatContainer>();
	}
};
static_assert(alignof(UFortChatContainer) == 0x000004, "Wrong alignment on UFortChatContainer");
static_assert(sizeof(UFortChatContainer) == 0x00024C, "Wrong size on UFortChatContainer");

// Class FortniteUI.FortItemCollectorWidget
// 0x0008 (0x024C - 0x0244)
class UFortItemCollectorWidget final : public UFortUserWidget
{
public:
	class ABuildingItemCollectorActor*            ItemCollector;                                     // 0x0244(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_248[0x4];                                      // 0x0248(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnItemCollectorChanged(class ABuildingItemCollectorActor* OutItemCollector);
	void OnItemCollectorStateChanged(EFortItemCollectorState ItemCollectorState);
	void OnItemCollectorValuesChanged(TArray<int32>& DepositAmounts, TArray<int32>& DepositGoals);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemCollectorWidget">();
	}
	static class UFortItemCollectorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemCollectorWidget>();
	}
};
static_assert(alignof(UFortItemCollectorWidget) == 0x000004, "Wrong alignment on UFortItemCollectorWidget");
static_assert(sizeof(UFortItemCollectorWidget) == 0x00024C, "Wrong size on UFortItemCollectorWidget");
static_assert(offsetof(UFortItemCollectorWidget, ItemCollector) == 0x000244, "Member 'UFortItemCollectorWidget::ItemCollector' has a wrong offset!");

// Class FortniteUI.FortListItem
// 0x0000 (0x0244 - 0x0244)
class UFortListItem : public UFortUserWidget
{
public:
	void Private_OnExpanderArrowShiftClicked();
	void SetData(class UObject* InData);
	void SetIndexInList(int32 InIndexInList);
	void SetSelected(bool bSelected);
	void ToggleExpansion();

	int32 DoesItemHaveChildren() const;
	int32 GetIndentLevel() const;
	ESelectionMode GetSelectionMode() const;
	bool IsItemExpanded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortListItem">();
	}
	static class UFortListItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortListItem>();
	}
};
static_assert(alignof(UFortListItem) == 0x000004, "Wrong alignment on UFortListItem");
static_assert(sizeof(UFortListItem) == 0x000244, "Wrong size on UFortListItem");

// Class FortniteUI.FortLoginRewardItem
// 0x000C (0x0250 - 0x0244)
class UFortLoginRewardItem final : public UFortUserWidget
{
public:
	class UFortItem*                              FortItem;                                          // 0x0244(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LoginRewardDay;                                    // 0x0248(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlayClaimAnimation;                               // 0x024C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bHighValueItem;                                    // 0x024D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bUnclaimedItem;                                    // 0x024E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_24F[0x1];                                      // 0x024F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateItemTooltip();
	void SetFortItem(class UFortItem* InFortItem);
	void SetHighValueItem(bool bInHighValueItem);
	void SetLoginRewardDay(int32 InLoginRewardDay);
	void SetPlayClaimAnimation(bool bInPlayClaimAnimation);
	void SetUnclaimedItem(bool bInUnclaimedItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLoginRewardItem">();
	}
	static class UFortLoginRewardItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLoginRewardItem>();
	}
};
static_assert(alignof(UFortLoginRewardItem) == 0x000004, "Wrong alignment on UFortLoginRewardItem");
static_assert(sizeof(UFortLoginRewardItem) == 0x000250, "Wrong size on UFortLoginRewardItem");
static_assert(offsetof(UFortLoginRewardItem, FortItem) == 0x000244, "Member 'UFortLoginRewardItem::FortItem' has a wrong offset!");
static_assert(offsetof(UFortLoginRewardItem, LoginRewardDay) == 0x000248, "Member 'UFortLoginRewardItem::LoginRewardDay' has a wrong offset!");
static_assert(offsetof(UFortLoginRewardItem, bPlayClaimAnimation) == 0x00024C, "Member 'UFortLoginRewardItem::bPlayClaimAnimation' has a wrong offset!");
static_assert(offsetof(UFortLoginRewardItem, bHighValueItem) == 0x00024D, "Member 'UFortLoginRewardItem::bHighValueItem' has a wrong offset!");
static_assert(offsetof(UFortLoginRewardItem, bUnclaimedItem) == 0x00024E, "Member 'UFortLoginRewardItem::bUnclaimedItem' has a wrong offset!");

// Class FortniteUI.FortLoginRewards
// 0x0038 (0x027C - 0x0244)
class UFortLoginRewards final : public UFortUserWidget
{
public:
	int32                                         PageSize;                                          // 0x0244(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumRows;                                           // 0x0248(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumColumns;                                        // 0x024C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentPage;                                       // 0x0250(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortItem*                              RewardClaimed;                                     // 0x0254(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MinutesUntilNextReward;                            // 0x0258(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPageWrap;                                         // 0x025C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFortLoginRewardItem>       RewardItemWidgetType;                              // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortMcpProfileAccount*                 LocalMcpProfile;                                   // 0x0264(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_268[0x14];                                     // 0x0268(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFortLoginRewardItem* CreateLoginRewardWidget();
	void DisablePaging(EPageDirection Direction);
	void EnablePaging(EPageDirection Direction);
	void HandlePageLeft();
	void HandlePageRight();
	void SetGridPanel(class UUniformGridPanel* InGridPanel);

	int32 GetCurrentLoginDays() const;
	int32 GetCurrentPage() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLoginRewards">();
	}
	static class UFortLoginRewards* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLoginRewards>();
	}
};
static_assert(alignof(UFortLoginRewards) == 0x000004, "Wrong alignment on UFortLoginRewards");
static_assert(sizeof(UFortLoginRewards) == 0x00027C, "Wrong size on UFortLoginRewards");
static_assert(offsetof(UFortLoginRewards, PageSize) == 0x000244, "Member 'UFortLoginRewards::PageSize' has a wrong offset!");
static_assert(offsetof(UFortLoginRewards, NumRows) == 0x000248, "Member 'UFortLoginRewards::NumRows' has a wrong offset!");
static_assert(offsetof(UFortLoginRewards, NumColumns) == 0x00024C, "Member 'UFortLoginRewards::NumColumns' has a wrong offset!");
static_assert(offsetof(UFortLoginRewards, CurrentPage) == 0x000250, "Member 'UFortLoginRewards::CurrentPage' has a wrong offset!");
static_assert(offsetof(UFortLoginRewards, RewardClaimed) == 0x000254, "Member 'UFortLoginRewards::RewardClaimed' has a wrong offset!");
static_assert(offsetof(UFortLoginRewards, MinutesUntilNextReward) == 0x000258, "Member 'UFortLoginRewards::MinutesUntilNextReward' has a wrong offset!");
static_assert(offsetof(UFortLoginRewards, bPageWrap) == 0x00025C, "Member 'UFortLoginRewards::bPageWrap' has a wrong offset!");
static_assert(offsetof(UFortLoginRewards, RewardItemWidgetType) == 0x000260, "Member 'UFortLoginRewards::RewardItemWidgetType' has a wrong offset!");
static_assert(offsetof(UFortLoginRewards, LocalMcpProfile) == 0x000264, "Member 'UFortLoginRewards::LocalMcpProfile' has a wrong offset!");

// Class FortniteUI.FortLoginWindow
// 0x0028 (0x026C - 0x0244)
class UFortLoginWindow : public UFortUserWidget
{
public:
	uint8                                         Pad_244[0x24];                                     // 0x0244(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bRememberMe;                                       // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Login(const class FString& InEmail, const class FString& InPassword, bool bRemember);
	void OnLoginStatusChanged(EUILoginStatus NewStatus, const class FText& InMessage);

	class FString GetDefaultEmail() const;
	class FText GetLoginStatusText() const;
	bool IsRememberMeChecked() const;
	bool ShouldShowLoginButton(const class FString& InEmail, const class FString& InPassword) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortLoginWindow">();
	}
	static class UFortLoginWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortLoginWindow>();
	}
};
static_assert(alignof(UFortLoginWindow) == 0x000004, "Wrong alignment on UFortLoginWindow");
static_assert(sizeof(UFortLoginWindow) == 0x00026C, "Wrong size on UFortLoginWindow");
static_assert(offsetof(UFortLoginWindow, bRememberMe) == 0x000268, "Member 'UFortLoginWindow::bRememberMe' has a wrong offset!");

// Class FortniteUI.FortMovieWidget
// 0x0004 (0x0248 - 0x0244)
class UFortMovieWidget : public UFortUserWidget
{
public:
	class UMediaPlayer*                           MediaPlayer;                                       // 0x0244(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void RequestPlayMovie();
	void RequestStopMovie();
	void SetMediaPlayer(class UMediaPlayer* NewMediaPlayer);

	class UMediaPlayer* GetMediaPlayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMovieWidget">();
	}
	static class UFortMovieWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMovieWidget>();
	}
};
static_assert(alignof(UFortMovieWidget) == 0x000004, "Wrong alignment on UFortMovieWidget");
static_assert(sizeof(UFortMovieWidget) == 0x000248, "Wrong size on UFortMovieWidget");
static_assert(offsetof(UFortMovieWidget, MediaPlayer) == 0x000244, "Member 'UFortMovieWidget::MediaPlayer' has a wrong offset!");

// Class FortniteUI.FortPvPMinimapWidget
// 0x0010 (0x0254 - 0x0244)
class UFortPvPMinimapWidget final : public UFortUserWidget
{
public:
	uint8                                         Pad_244[0x10];                                     // 0x0244(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortPvPMinimapWidget">();
	}
	static class UFortPvPMinimapWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortPvPMinimapWidget>();
	}
};
static_assert(alignof(UFortPvPMinimapWidget) == 0x000004, "Wrong alignment on UFortPvPMinimapWidget");
static_assert(sizeof(UFortPvPMinimapWidget) == 0x000254, "Wrong size on UFortPvPMinimapWidget");

// Class FortniteUI.FortSocialItemWidget
// 0x0000 (0x0244 - 0x0244)
class UFortSocialItemWidget final : public UFortUserWidget
{
public:
	void SetSocialItem(class UFortSocialItem* InSocialItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortSocialItemWidget">();
	}
	static class UFortSocialItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortSocialItemWidget>();
	}
};
static_assert(alignof(UFortSocialItemWidget) == 0x000004, "Wrong alignment on UFortSocialItemWidget");
static_assert(sizeof(UFortSocialItemWidget) == 0x000244, "Wrong size on UFortSocialItemWidget");

// Class FortniteUI.FortStorefront
// 0x0000 (0x0244 - 0x0244)
class UFortStorefront final : public UFortUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortStorefront">();
	}
	static class UFortStorefront* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortStorefront>();
	}
};
static_assert(alignof(UFortStorefront) == 0x000004, "Wrong alignment on UFortStorefront");
static_assert(sizeof(UFortStorefront) == 0x000244, "Wrong size on UFortStorefront");

// Class FortniteUI.FortTutorialOverlay
// 0x0010 (0x0254 - 0x0244)
class UFortTutorialOverlay : public UFortUserWidget
{
public:
	uint8                                         Pad_244[0x10];                                     // 0x0244(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OpenBannerMenu();
	void SetTutorialNotificationActive(bool bActive);
	void SetupNativeWidgets(class UNamedSlot* NativeSlot);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTutorialOverlay">();
	}
	static class UFortTutorialOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTutorialOverlay>();
	}
};
static_assert(alignof(UFortTutorialOverlay) == 0x000004, "Wrong alignment on UFortTutorialOverlay");
static_assert(sizeof(UFortTutorialOverlay) == 0x000254, "Wrong size on UFortTutorialOverlay");

// Class FortniteUI.FortTutorialScreen
// 0x0000 (0x0244 - 0x0244)
class UFortTutorialScreen : public UFortUserWidget
{
public:
	void OnHideTutorialScreen();
	void OnShowTutorialScreen(class UTexture2D* Image);
	void PlayerFinished();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortTutorialScreen">();
	}
	static class UFortTutorialScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortTutorialScreen>();
	}
};
static_assert(alignof(UFortTutorialScreen) == 0x000004, "Wrong alignment on UFortTutorialScreen");
static_assert(sizeof(UFortTutorialScreen) == 0x000244, "Wrong size on UFortTutorialScreen");

// Class FortniteUI.FortUIManagerWidget
// 0x010C (0x0350 - 0x0244)
class UFortUIManagerWidget : public UFortUserWidget
{
public:
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnBeginSpokenDialog;                               // 0x0248(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnEndSpokenDialog;                                 // 0x0254(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   StateWidgets[0x8];                                 // 0x0260(0x0018)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFortUIState                                  CurrentState;                                      // 0x0320(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFortUIState                                  PendingState;                                      // 0x0321(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_322[0x2];                                      // 0x0322(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortUIStateWidget*                     CurrentStateWidget;                                // 0x0324(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UFortUIStateWidget>         PendingStateWidgetClass;                           // 0x0328(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UFortUIStateTrigger*>            StateTriggers;                                     // 0x032C(0x000C)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UFortActionHandlerPanel*>        ActionHandlerPanels;                               // 0x0338(0x000C)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortNotificationQueue*                 UINotificationQueue;                               // 0x0348(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsStateContentDisplayed;                          // 0x034C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34D[0x3];                                      // 0x034D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFortUIStateTrigger* CreateUIStateTrigger(TSubclassOf<class UFortUIStateTrigger> Class_0, class UObject* WorldContextObject);
	static class UFortUIManagerWidget* GetUIManagerWidget(class UObject* WorldContextObject);
	static void KillConfirmationDialog(class UObject* WorldContextObject);
	static void ShowErrorDialog(class UObject* WorldContextObject, const class FText& OperationDesc, const class FText& DisplayMessage, const class FString& ErrorCode);

	void DisplayErrorDialog(const struct FFortErrorInfo& Info);
	void DisplayStateContent(bool bDisplay);
	void OnShowConfirmation(const struct FFortDialogDescription& Description);
	void OnStateStarted();
	void RegisterStateTrigger(class UFortUIStateTrigger* StateTrigger);
	void SetStateContentDisplayed(bool bDisplay);
	void UnregisterStateTrigger(class UFortUIStateTrigger* TriggerToRemove);
	void UpdateStateWidgetContent(class UFortUIStateWidget* StateWidget);

	EFortUIState _BPGetCurrentUIState() const;
	class UFortUIStateWidget* GetCurrentUIStateWidget() const;
	bool IsStateContentDisplayed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIManagerWidget">();
	}
	static class UFortUIManagerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIManagerWidget>();
	}
};
static_assert(alignof(UFortUIManagerWidget) == 0x000004, "Wrong alignment on UFortUIManagerWidget");
static_assert(sizeof(UFortUIManagerWidget) == 0x000350, "Wrong size on UFortUIManagerWidget");
static_assert(offsetof(UFortUIManagerWidget, OnBeginSpokenDialog) == 0x000248, "Member 'UFortUIManagerWidget::OnBeginSpokenDialog' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget, OnEndSpokenDialog) == 0x000254, "Member 'UFortUIManagerWidget::OnEndSpokenDialog' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget, StateWidgets) == 0x000260, "Member 'UFortUIManagerWidget::StateWidgets' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget, CurrentState) == 0x000320, "Member 'UFortUIManagerWidget::CurrentState' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget, PendingState) == 0x000321, "Member 'UFortUIManagerWidget::PendingState' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget, CurrentStateWidget) == 0x000324, "Member 'UFortUIManagerWidget::CurrentStateWidget' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget, PendingStateWidgetClass) == 0x000328, "Member 'UFortUIManagerWidget::PendingStateWidgetClass' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget, StateTriggers) == 0x00032C, "Member 'UFortUIManagerWidget::StateTriggers' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget, ActionHandlerPanels) == 0x000338, "Member 'UFortUIManagerWidget::ActionHandlerPanels' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget, UINotificationQueue) == 0x000348, "Member 'UFortUIManagerWidget::UINotificationQueue' has a wrong offset!");
static_assert(offsetof(UFortUIManagerWidget, bIsStateContentDisplayed) == 0x00034C, "Member 'UFortUIManagerWidget::bIsStateContentDisplayed' has a wrong offset!");

// Class FortniteUI.FortUIMessageItemWidget
// 0x0028 (0x026C - 0x0244)
class UFortUIMessageItemWidget final : public UFortUserWidget
{
public:
	UMulticastDelegateProperty_                   OnMessageDisplayed;                                // 0x0244(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMessageRemoved;                                  // 0x0250(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FName                                   MessageID;                                         // 0x025C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleDisplayTime;                                   // 0x0264(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoved;                                          // 0x0268(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRemoveRequested();
	void RequestRemove();
	void StackItem(class UFortUIMessageItemWidget* StackedItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortUIMessageItemWidget">();
	}
	static class UFortUIMessageItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortUIMessageItemWidget>();
	}
};
static_assert(alignof(UFortUIMessageItemWidget) == 0x000004, "Wrong alignment on UFortUIMessageItemWidget");
static_assert(sizeof(UFortUIMessageItemWidget) == 0x00026C, "Wrong size on UFortUIMessageItemWidget");
static_assert(offsetof(UFortUIMessageItemWidget, OnMessageDisplayed) == 0x000244, "Member 'UFortUIMessageItemWidget::OnMessageDisplayed' has a wrong offset!");
static_assert(offsetof(UFortUIMessageItemWidget, OnMessageRemoved) == 0x000250, "Member 'UFortUIMessageItemWidget::OnMessageRemoved' has a wrong offset!");
static_assert(offsetof(UFortUIMessageItemWidget, MessageID) == 0x00025C, "Member 'UFortUIMessageItemWidget::MessageID' has a wrong offset!");
static_assert(offsetof(UFortUIMessageItemWidget, IdleDisplayTime) == 0x000264, "Member 'UFortUIMessageItemWidget::IdleDisplayTime' has a wrong offset!");
static_assert(offsetof(UFortUIMessageItemWidget, bRemoved) == 0x000268, "Member 'UFortUIMessageItemWidget::bRemoved' has a wrong offset!");

// Class FortniteUI.FortVaultDetailsWidget
// 0x0010 (0x0254 - 0x0244)
class UFortVaultDetailsWidget final : public UFortUserWidget
{
public:
	uint8                                         Pad_244[0x10];                                     // 0x0244(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void _BPOnNewItemSet();
	struct FVaultDetailsInfo GetInfo();
	class UFortItem* GetItem();
	struct FVaultPropertyInfo GetLevelProperty();
	struct FVaultPropertyInfo GetMaxLevelProperty();
	void GetProperties(TArray<struct FVaultPropertyInfo>* Properties, bool bWithUpgradeData);
	bool HasPendingCustomization();
	bool HasPendingUpgrade();
	void SetItem(const class UFortItem* InItem, bool bForce);
	void SetItemForCommand(const class UFortItem* InItem, EVaultCommandType InCommand, bool bForce);

	void GetAlterationSlots(TArray<struct FVaultAlterationInfo>* Slots) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVaultDetailsWidget">();
	}
	static class UFortVaultDetailsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVaultDetailsWidget>();
	}
};
static_assert(alignof(UFortVaultDetailsWidget) == 0x000004, "Wrong alignment on UFortVaultDetailsWidget");
static_assert(sizeof(UFortVaultDetailsWidget) == 0x000254, "Wrong size on UFortVaultDetailsWidget");

// Class FortniteUI.FortVaultWidget
// 0x0000 (0x0244 - 0x0244)
class UFortVaultWidget final : public UFortUserWidget
{
public:
	void _BPOnContentUpdated();

	void GetItemList(TArray<class UFortAccountItem*>* OutItemList, EVaultContentType InContentType, const struct FVaultContentDetails& Details) const;
	bool IsSupportedSortType(EVaultContentSortType InSortType, EVaultContentType InContentType, EFortInventoryFilter InContentSubType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortVaultWidget">();
	}
	static class UFortVaultWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortVaultWidget>();
	}
};
static_assert(alignof(UFortVaultWidget) == 0x000004, "Wrong alignment on UFortVaultWidget");
static_assert(sizeof(UFortVaultWidget) == 0x000244, "Wrong size on UFortVaultWidget");

// Class FortniteUI.SocialStyle
// 0x4E70 (0x4E8C - 0x001C)
class USocialStyle final : public UDataAsset
{
public:
	struct FFriendsAndChatStyle                   Style;                                             // 0x001C(0x4E70)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SocialStyle">();
	}
	static class USocialStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<USocialStyle>();
	}
};
static_assert(alignof(USocialStyle) == 0x000004, "Wrong alignment on USocialStyle");
static_assert(sizeof(USocialStyle) == 0x004E8C, "Wrong size on USocialStyle");
static_assert(offsetof(USocialStyle, Style) == 0x00001C, "Member 'USocialStyle::Style' has a wrong offset!");

}

#pragma pack(pop)
