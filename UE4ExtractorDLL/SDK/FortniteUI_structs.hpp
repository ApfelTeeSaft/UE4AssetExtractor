#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortniteUI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Enum FortniteUI.EFortFrontEndFeatureState
// NumValues: 0x0006
enum class EFortFrontEndFeatureState : uint8
{
	Enabled                                  = 0,
	NoHeroes                                 = 1,
	NoRecruitableHeroes                      = 2,
	DisabledByTutorial                       = 3,
	Invalid                                  = 4,
	EFortFrontEndFeatureState_MAX            = 5,
};

// Enum FortniteUI.EFortFrontEndFeature
// NumValues: 0x000B
enum class EFortFrontEndFeature : uint8
{
	ShowHomeBase                             = 0,
	ShowHeroList                             = 1,
	ShowVault                                = 2,
	ShowStore                                = 3,
	PlayZone                                 = 4,
	ShowDailyRewards                         = 5,
	ShowHeroSelect                           = 6,
	RecruitHero                              = 7,
	ShowHomeBaseOverview                     = 8,
	MAX_None                                 = 9,
	EFortFrontEndFeature_MAX                 = 10,
};

// Enum FortniteUI.EFortUIFeatureState
// NumValues: 0x0004
enum class EFortUIFeatureState : uint8
{
	Enabled                                  = 0,
	DisabledByTutorial                       = 1,
	Invalid                                  = 2,
	EFortUIFeatureState_MAX                  = 3,
};

// Enum FortniteUI.EFortUIFeature
// NumValues: 0x0005
enum class EFortUIFeature : uint8
{
	ShowPartyBar                             = 0,
	ShowChatWindow                           = 1,
	ShowFriendsMenu                          = 2,
	MAX_None                                 = 3,
	EFortUIFeature_MAX                       = 4,
};

// Enum FortniteUI.EFlagStatus
// NumValues: 0x0003
enum class EFlagStatus : uint8
{
	FlagPresent                              = 0,
	FlagNotPresent                           = 1,
	EFlagStatus_MAX                          = 2,
};

// Enum FortniteUI.EFortDialogFeedbackType
// NumValues: 0x0005
enum class EFortDialogFeedbackType : uint8
{
	FriendRequestSent                        = 0,
	FriendRequestReceived                    = 1,
	FriendRequestAccepted                    = 2,
	Default                                  = 3,
	EFortDialogFeedbackType_MAX              = 4,
};

// Enum FortniteUI.EFortDialogResult
// NumValues: 0x0007
enum class EFortDialogResult : uint8
{
	Confirmed                                = 0,
	Declined                                 = 1,
	Ignored                                  = 2,
	Killed                                   = 3,
	TimedOut                                 = 4,
	Unknown                                  = 5,
	EFortDialogResult_MAX                    = 6,
};

// Enum FortniteUI.EFortHitPointModificationReason
// NumValues: 0x0007
enum class EFortHitPointModificationReason : uint8
{
	Invalid                                  = 0,
	InitalSet                                = 1,
	AutoRegen                                = 2,
	ItemRegen                                = 3,
	DamageOverTime                           = 4,
	DamageReceived                           = 5,
	EFortHitPointModificationReason_MAX      = 6,
};

// Enum FortniteUI.EFortBuildingInteraction
// NumValues: 0x0008
enum class EFortBuildingInteraction : uint8
{
	None                                     = 0,
	Build                                    = 1,
	Repair                                   = 2,
	Upgrade                                  = 3,
	Edit                                     = 4,
	BeingModified                            = 5,
	ConfirmEdit                              = 6,
	EFortBuildingInteraction_MAX             = 7,
};

// Enum FortniteUI.EFortBuildingHealthDisplayRule
// NumValues: 0x0004
enum class EFortBuildingHealthDisplayRule : uint8
{
	Never                                    = 0,
	Allowed                                  = 1,
	Always                                   = 2,
	EFortBuildingHealthDisplayRule_MAX       = 3,
};

// Enum FortniteUI.EFortStoreState
// NumValues: 0x0011
enum class EFortStoreState : uint8
{
	Error                                    = 0,
	WaitingForResponse                       = 1,
	Closed                                   = 2,
	CardPackStore                            = 3,
	CurrencyStore                            = 4,
	WebPayment                               = 5,
	PackOpen                                 = 6,
	CardEnter                                = 7,
	CardBackReveal                           = 8,
	CardFlip                                 = 9,
	CardFrontReveal                          = 10,
	CardExit                                 = 11,
	SummaryAdd                               = 12,
	PackDestroy                              = 13,
	Summary                                  = 14,
	MAX_None                                 = 15,
	EFortStoreState_MAX                      = 16,
};

// Enum FortniteUI.EFortTutorialGlowType
// NumValues: 0x0004
enum class EFortTutorialGlowType : uint8
{
	None                                     = 0,
	Look                                     = 1,
	Click                                    = 2,
	EFortTutorialGlowType_MAX                = 3,
};

// Enum FortniteUI.EFortBangSize
// NumValues: 0x0007
enum class EFortBangSize : uint8
{
	XXS                                      = 0,
	XS                                       = 1,
	S                                        = 2,
	M                                        = 3,
	L                                        = 4,
	XL                                       = 5,
	EFortBangSize_MAX                        = 6,
};

// Enum FortniteUI.EFortUIState
// NumValues: 0x000A
enum class EFortUIState : uint8
{
	Invalid                                  = 0,
	Login                                    = 1,
	JoinServer                               = 2,
	FrontEnd                                 = 3,
	PvE_PostGame                             = 4,
	PvP_PostGame                             = 5,
	InGame                                   = 6,
	Cinematic                                = 7,
	MAX                                      = 8,
	EFortUIState_MAX                         = 9,
};

// Enum FortniteUI.EGridSortKind
// NumValues: 0x0006
enum class EGridSortKind : uint8
{
	None                                     = 0,
	ByNumber                                 = 1,
	ByString                                 = 2,
	ByNumberThenString                       = 3,
	ByStringThenNumber                       = 4,
	EGridSortKind_MAX                        = 5,
};

// Enum FortniteUI.EButtonGroupDirection
// NumValues: 0x0003
enum class EButtonGroupDirection : uint8
{
	Horizontal                               = 0,
	Vertical                                 = 1,
	EButtonGroupDirection_MAX                = 2,
};

// Enum FortniteUI.EFortSocialPanelTab
// NumValues: 0x0005
enum class EFortSocialPanelTab : uint8
{
	PartyInvitations                         = 0,
	Friends                                  = 1,
	RecentPlayers                            = 2,
	Max                                      = 3,
	EFortSocialPanelTab_MAX                  = 4,
};

// Enum FortniteUI.EFortSocialPanelType
// NumValues: 0x0004
enum class EFortSocialPanelType : uint8
{
	Join                                     = 0,
	Invite                                   = 1,
	Max                                      = 2,
	EFortSocialPanelType_MAX                 = 3,
};

// Enum FortniteUI.EModalContainerSize
// NumValues: 0x0006
enum class EModalContainerSize : uint8
{
	ExtraSmall                               = 0,
	Small                                    = 1,
	Medium                                   = 2,
	Large                                    = 3,
	Max                                      = 4,
	EModalContainerSize_MAX                  = 5,
};

// Enum FortniteUI.ENotificationType
// NumValues: 0x0003
enum class ENotificationType : uint8
{
	Basic                                    = 0,
	Friends                                  = 1,
	ENotificationType_MAX                    = 2,
};

// Enum FortniteUI.ENotificationResult
// NumValues: 0x0004
enum class ENotificationResult : uint8
{
	Confirmed                                = 0,
	Declined                                 = 1,
	Unknown                                  = 2,
	ENotificationResult_MAX                  = 3,
};

// Enum FortniteUI.EFortInventoryContext
// NumValues: 0x0005
enum class EFortInventoryContext : uint8
{
	Game                                     = 0,
	Lobby                                    = 1,
	FrontEnd                                 = 2,
	Pickup                                   = 3,
	EFortInventoryContext_MAX                = 4,
};

// Enum FortniteUI.ENameStatus
// NumValues: 0x0005
enum class ENameStatus : uint8
{
	Valid                                    = 0,
	TooShort                                 = 1,
	TooLong                                  = 2,
	ContainsInvalidCharacter                 = 3,
	ENameStatus_MAX                          = 4,
};

// Enum FortniteUI.EFortLegacySlateWidget
// NumValues: 0x0010
enum class EFortLegacySlateWidget : uint8
{
	None                                     = 0,
	Options                                  = 1,
	FriendsList                              = 2,
	Feedback                                 = 3,
	Minimap                                  = 4,
	DefaultObjective                         = 5,
	Mission                                  = 6,
	Chat                                     = 7,
	HUDContextInfo                           = 8,
	CenterPopupMessage                       = 9,
	PinnedSchematics                         = 10,
	Results                                  = 11,
	CraftingInfo                             = 12,
	ClientNotification                       = 13,
	MAX                                      = 14,
	EFortLegacySlateWidget_MAX               = 15,
};

// Enum FortniteUI.EModalContainerSlot
// NumValues: 0x0006
enum class EModalContainerSlot : uint8
{
	Top                                      = 0,
	Middle                                   = 1,
	Bottom                                   = 2,
	Background                               = 3,
	Max                                      = 4,
	EModalContainerSlot_MAX                  = 5,
};

// Enum FortniteUI.EPauseType
// NumValues: 0x0005
enum class EPauseType : uint8
{
	NoPause                                  = 0,
	Rare                                     = 1,
	New                                      = 2,
	NewAndRare                               = 3,
	EPauseType_MAX                           = 4,
};

// Enum FortniteUI.ECardPackPurchaseError
// NumValues: 0x0006
enum class ECardPackPurchaseError : uint8
{
	PendingServerConfirmation                = 0,
	NotEnoughMtx                             = 1,
	NoneLeft                                 = 2,
	PurchaseAlreadyPending                   = 3,
	NoConnection                             = 4,
	ECardPackPurchaseError_MAX               = 5,
};

// Enum FortniteUI.EFortStoreTransition
// NumValues: 0x0002
enum class EFortStoreTransition : uint8
{
	X                                        = 0,
	EFortStoreTransition_MAX                 = 1,
};

// Enum FortniteUI.EFortButtonState
// NumValues: 0x000A
enum class EFortButtonState : uint8
{
	Up                                       = 0,
	Over                                     = 1,
	Down                                     = 2,
	Release                                  = 3,
	Out                                      = 4,
	Disabled                                 = 5,
	KB_Down                                  = 6,
	KB_Release                               = 7,
	Max                                      = 8,
	EFortButtonState_MAX                     = 9,
};

// Enum FortniteUI.EPageDirection
// NumValues: 0x0003
enum class EPageDirection : uint8
{
	Page_Left                                = 0,
	Page_Right                               = 1,
	Page_MAX                                 = 2,
};

// Enum FortniteUI.EUILoginStatus
// NumValues: 0x0006
enum class EUILoginStatus : uint8
{
	Invalid                                  = 0,
	LoggedOut                                = 1,
	LoggingIn                                = 2,
	LoginFailed                              = 3,
	LoginSuccess                             = 4,
	EUILoginStatus_MAX                       = 5,
};

// Enum FortniteUI.EVaultCommandType
// NumValues: 0x0006
enum class EVaultCommandType : uint8
{
	Upgrade                                  = 0,
	Customize                                = 1,
	Recycle                                  = 2,
	Retire                                   = 3,
	Boost                                    = 4,
	EVaultCommandType_MAX                    = 5,
};

// Enum FortniteUI.EVaultContentSortType
// NumValues: 0x000A
enum class EVaultContentSortType : uint8
{
	ByName                                   = 0,
	ByCraftingTier                           = 1,
	ByLevel                                  = 2,
	ByCategory                               = 3,
	ByRarity                                 = 4,
	ByType                                   = 5,
	ByLocation                               = 6,
	ByPersonality                            = 7,
	ByBonus                                  = 8,
	EVaultContentSortType_MAX                = 9,
};

// Enum FortniteUI.EVaultContentType
// NumValues: 0x0005
enum class EVaultContentType : uint8
{
	Heroes                                   = 0,
	Schematics                               = 1,
	Personnel                                = 2,
	Misc                                     = 3,
	EVaultContentType_MAX                    = 4,
};

// ScriptStruct FortniteUI.FortFrontEndFeatureStruct
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FFortFrontEndFeatureStruct final
{
public:
	EFortFrontEndFeatureState                     CurrentState;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortFrontEndFeatureState                     ForcedState;                                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   ChangeDelegate;                                    // 0x0004(0x000C)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFrontEndFeatureStruct) == 0x000004, "Wrong alignment on FFortFrontEndFeatureStruct");
static_assert(sizeof(FFortFrontEndFeatureStruct) == 0x000010, "Wrong size on FFortFrontEndFeatureStruct");
static_assert(offsetof(FFortFrontEndFeatureStruct, CurrentState) == 0x000000, "Member 'FFortFrontEndFeatureStruct::CurrentState' has a wrong offset!");
static_assert(offsetof(FFortFrontEndFeatureStruct, ForcedState) == 0x000001, "Member 'FFortFrontEndFeatureStruct::ForcedState' has a wrong offset!");
static_assert(offsetof(FFortFrontEndFeatureStruct, ChangeDelegate) == 0x000004, "Member 'FFortFrontEndFeatureStruct::ChangeDelegate' has a wrong offset!");

// ScriptStruct FortniteUI.AttributeRequirement
// 0x0014 (0x0014 - 0x0000)
struct FAttributeRequirement final
{
public:
	class FText                                   Name;                                              // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequirementsMet;                                  // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttributeRequirement) == 0x000004, "Wrong alignment on FAttributeRequirement");
static_assert(sizeof(FAttributeRequirement) == 0x000014, "Wrong size on FAttributeRequirement");
static_assert(offsetof(FAttributeRequirement, Name) == 0x000000, "Member 'FAttributeRequirement::Name' has a wrong offset!");
static_assert(offsetof(FAttributeRequirement, Level) == 0x00000C, "Member 'FAttributeRequirement::Level' has a wrong offset!");
static_assert(offsetof(FAttributeRequirement, bRequirementsMet) == 0x000010, "Member 'FAttributeRequirement::bRequirementsMet' has a wrong offset!");

// ScriptStruct FortniteUI.BuildingRequirements
// 0x0024 (0x0024 - 0x0000)
struct FBuildingRequirements final
{
public:
	int32                                         RequiredAccountLevel;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentAccountLevel;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAttributeRequirement>          AttributeRequirements;                             // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RequiredPower;                                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentPower;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredManufacturing;                             // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentManufacturing;                              // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingRequirements) == 0x000004, "Wrong alignment on FBuildingRequirements");
static_assert(sizeof(FBuildingRequirements) == 0x000024, "Wrong size on FBuildingRequirements");
static_assert(offsetof(FBuildingRequirements, RequiredAccountLevel) == 0x000000, "Member 'FBuildingRequirements::RequiredAccountLevel' has a wrong offset!");
static_assert(offsetof(FBuildingRequirements, CurrentAccountLevel) == 0x000004, "Member 'FBuildingRequirements::CurrentAccountLevel' has a wrong offset!");
static_assert(offsetof(FBuildingRequirements, AttributeRequirements) == 0x000008, "Member 'FBuildingRequirements::AttributeRequirements' has a wrong offset!");
static_assert(offsetof(FBuildingRequirements, RequiredPower) == 0x000014, "Member 'FBuildingRequirements::RequiredPower' has a wrong offset!");
static_assert(offsetof(FBuildingRequirements, CurrentPower) == 0x000018, "Member 'FBuildingRequirements::CurrentPower' has a wrong offset!");
static_assert(offsetof(FBuildingRequirements, RequiredManufacturing) == 0x00001C, "Member 'FBuildingRequirements::RequiredManufacturing' has a wrong offset!");
static_assert(offsetof(FBuildingRequirements, CurrentManufacturing) == 0x000020, "Member 'FBuildingRequirements::CurrentManufacturing' has a wrong offset!");

// ScriptStruct FortniteUI.FortBackendVersion
// 0x0070 (0x0070 - 0x0000)
struct FFortBackendVersion final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 App;                                               // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ModuleName;                                        // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Branch;                                            // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildDate;                                         // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerDate;                                        // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Build;                                             // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Changelist;                                        // 0x004C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OverridePropertiesVersion;                         // 0x0058(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0064(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortBackendVersion) == 0x000004, "Wrong alignment on FFortBackendVersion");
static_assert(sizeof(FFortBackendVersion) == 0x000070, "Wrong size on FFortBackendVersion");
static_assert(offsetof(FFortBackendVersion, bIsValid) == 0x000000, "Member 'FFortBackendVersion::bIsValid' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, App) == 0x000004, "Member 'FFortBackendVersion::App' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, ModuleName) == 0x000010, "Member 'FFortBackendVersion::ModuleName' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, Branch) == 0x00001C, "Member 'FFortBackendVersion::Branch' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, BuildDate) == 0x000028, "Member 'FFortBackendVersion::BuildDate' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, ServerDate) == 0x000034, "Member 'FFortBackendVersion::ServerDate' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, Build) == 0x000040, "Member 'FFortBackendVersion::Build' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, Changelist) == 0x00004C, "Member 'FFortBackendVersion::Changelist' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, OverridePropertiesVersion) == 0x000058, "Member 'FFortBackendVersion::OverridePropertiesVersion' has a wrong offset!");
static_assert(offsetof(FFortBackendVersion, Version) == 0x000064, "Member 'FFortBackendVersion::Version' has a wrong offset!");

// ScriptStruct FortniteUI.FortDialogDescription
// 0x0050 (0x0050 - 0x0000)
struct FFortDialogDescription final
{
public:
	class FText                                   MessageHeader;                                     // 0x0000(0x000C)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   MessageBody;                                       // 0x000C(0x000C)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   AcceptButtonText;                                  // 0x0018(0x000C)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   IgnoreButtonText;                                  // 0x0024(0x000C)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   DismissButtonText;                                 // 0x0030(0x000C)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortUserWidget*                        AdditionalContent;                                 // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortDialogFeedbackType                       FeedBackType;                                      // 0x0044(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0xB];                                       // 0x0045(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortDialogDescription) == 0x000004, "Wrong alignment on FFortDialogDescription");
static_assert(sizeof(FFortDialogDescription) == 0x000050, "Wrong size on FFortDialogDescription");
static_assert(offsetof(FFortDialogDescription, MessageHeader) == 0x000000, "Member 'FFortDialogDescription::MessageHeader' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, MessageBody) == 0x00000C, "Member 'FFortDialogDescription::MessageBody' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, AcceptButtonText) == 0x000018, "Member 'FFortDialogDescription::AcceptButtonText' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, IgnoreButtonText) == 0x000024, "Member 'FFortDialogDescription::IgnoreButtonText' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, DismissButtonText) == 0x000030, "Member 'FFortDialogDescription::DismissButtonText' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, DisplayTime) == 0x00003C, "Member 'FFortDialogDescription::DisplayTime' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, AdditionalContent) == 0x000040, "Member 'FFortDialogDescription::AdditionalContent' has a wrong offset!");
static_assert(offsetof(FFortDialogDescription, FeedBackType) == 0x000044, "Member 'FFortDialogDescription::FeedBackType' has a wrong offset!");

// ScriptStruct FortniteUI.FortErrorInfo
// 0x002C (0x002C - 0x0000)
struct FFortErrorInfo final
{
public:
	class FText                                   Operation;                                         // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ErrorMessage;                                      // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 ErrorCode;                                         // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x8];                                       // 0x0024(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortErrorInfo) == 0x000004, "Wrong alignment on FFortErrorInfo");
static_assert(sizeof(FFortErrorInfo) == 0x00002C, "Wrong size on FFortErrorInfo");
static_assert(offsetof(FFortErrorInfo, Operation) == 0x000000, "Member 'FFortErrorInfo::Operation' has a wrong offset!");
static_assert(offsetof(FFortErrorInfo, ErrorMessage) == 0x00000C, "Member 'FFortErrorInfo::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FFortErrorInfo, ErrorCode) == 0x000018, "Member 'FFortErrorInfo::ErrorCode' has a wrong offset!");

// ScriptStruct FortniteUI.Card
// 0x000C (0x000C - 0x0000)
struct FCard final
{
public:
	int32                                         QuantityReceived;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortItem*                              Item;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPauseType                                    PauseType;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCard) == 0x000004, "Wrong alignment on FCard");
static_assert(sizeof(FCard) == 0x00000C, "Wrong size on FCard");
static_assert(offsetof(FCard, QuantityReceived) == 0x000000, "Member 'FCard::QuantityReceived' has a wrong offset!");
static_assert(offsetof(FCard, Item) == 0x000004, "Member 'FCard::Item' has a wrong offset!");
static_assert(offsetof(FCard, PauseType) == 0x000008, "Member 'FCard::PauseType' has a wrong offset!");

// ScriptStruct FortniteUI.FortUIFeatureStruct
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FFortUIFeatureStruct final
{
public:
	EFortUIFeatureState                           CurrentState;                                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   ChangeDelegate;                                    // 0x0004(0x000C)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortUIFeatureStruct) == 0x000004, "Wrong alignment on FFortUIFeatureStruct");
static_assert(sizeof(FFortUIFeatureStruct) == 0x000010, "Wrong size on FFortUIFeatureStruct");
static_assert(offsetof(FFortUIFeatureStruct, CurrentState) == 0x000000, "Member 'FFortUIFeatureStruct::CurrentState' has a wrong offset!");
static_assert(offsetof(FFortUIFeatureStruct, ChangeDelegate) == 0x000004, "Member 'FFortUIFeatureStruct::ChangeDelegate' has a wrong offset!");

// ScriptStruct FortniteUI.FortMissionRewardInfo
// 0x0084 (0x0084 - 0x0000)
struct FFortMissionRewardInfo final
{
public:
	struct FSlateBrush                            Icon;                                              // 0x0000(0x0074)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0074(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UFortItem*                              Item;                                              // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionRewardInfo) == 0x000004, "Wrong alignment on FFortMissionRewardInfo");
static_assert(sizeof(FFortMissionRewardInfo) == 0x000084, "Wrong size on FFortMissionRewardInfo");
static_assert(offsetof(FFortMissionRewardInfo, Icon) == 0x000000, "Member 'FFortMissionRewardInfo::Icon' has a wrong offset!");
static_assert(offsetof(FFortMissionRewardInfo, DisplayName) == 0x000074, "Member 'FFortMissionRewardInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FFortMissionRewardInfo, Item) == 0x000080, "Member 'FFortMissionRewardInfo::Item' has a wrong offset!");

// ScriptStruct FortniteUI.GridSortKey
// 0x0010 (0x0010 - 0x0000)
struct FGridSortKey final
{
public:
	float                                         Number;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0004(0x000C)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGridSortKey) == 0x000004, "Wrong alignment on FGridSortKey");
static_assert(sizeof(FGridSortKey) == 0x000010, "Wrong size on FGridSortKey");
static_assert(offsetof(FGridSortKey, Number) == 0x000000, "Member 'FGridSortKey::Number' has a wrong offset!");
static_assert(offsetof(FGridSortKey, String) == 0x000004, "Member 'FGridSortKey::String' has a wrong offset!");

// ScriptStruct FortniteUI.FortFocusedBuildingInfo
// 0x0040 (0x0040 - 0x0000)
struct FFortFocusedBuildingInfo final
{
public:
	bool                                          bIsInteractable;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                IndicatorRelativeLocation;                         // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EFortBuildingHealthDisplayRule                HealthDisplayRule;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHealth;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTrapAttached;                                   // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttachedTrapMaxDurability;                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortBuildingInteraction                      InteractionType;                                   // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InteractionCost;                                   // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpgradeBonus;                                      // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortResourceType                             BuildingMaterial;                                  // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHostile;                                        // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ContextualText;                                    // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortFocusedBuildingInfo) == 0x000004, "Wrong alignment on FFortFocusedBuildingInfo");
static_assert(sizeof(FFortFocusedBuildingInfo) == 0x000040, "Wrong size on FFortFocusedBuildingInfo");
static_assert(offsetof(FFortFocusedBuildingInfo, bIsInteractable) == 0x000000, "Member 'FFortFocusedBuildingInfo::bIsInteractable' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, IndicatorRelativeLocation) == 0x000004, "Member 'FFortFocusedBuildingInfo::IndicatorRelativeLocation' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, HealthDisplayRule) == 0x000010, "Member 'FFortFocusedBuildingInfo::HealthDisplayRule' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, MaxHealth) == 0x000014, "Member 'FFortFocusedBuildingInfo::MaxHealth' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, bIsTrapAttached) == 0x000018, "Member 'FFortFocusedBuildingInfo::bIsTrapAttached' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, AttachedTrapMaxDurability) == 0x00001C, "Member 'FFortFocusedBuildingInfo::AttachedTrapMaxDurability' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, CurrentLevel) == 0x000020, "Member 'FFortFocusedBuildingInfo::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, InteractionType) == 0x000024, "Member 'FFortFocusedBuildingInfo::InteractionType' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, InteractionCost) == 0x000028, "Member 'FFortFocusedBuildingInfo::InteractionCost' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, UpgradeBonus) == 0x00002C, "Member 'FFortFocusedBuildingInfo::UpgradeBonus' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, BuildingMaterial) == 0x000030, "Member 'FFortFocusedBuildingInfo::BuildingMaterial' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, bIsHostile) == 0x000031, "Member 'FFortFocusedBuildingInfo::bIsHostile' has a wrong offset!");
static_assert(offsetof(FFortFocusedBuildingInfo, ContextualText) == 0x000034, "Member 'FFortFocusedBuildingInfo::ContextualText' has a wrong offset!");

// ScriptStruct FortniteUI.FortStateStyle
// 0x02D8 (0x02D8 - 0x0000)
struct FFortStateStyle final
{
public:
	struct FFortMultiSizeBrush                    Brush;                                             // 0x0000(0x02B8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           PrimaryColor;                                      // 0x02B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryColor;                                    // 0x02C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortStateStyle) == 0x000004, "Wrong alignment on FFortStateStyle");
static_assert(sizeof(FFortStateStyle) == 0x0002D8, "Wrong size on FFortStateStyle");
static_assert(offsetof(FFortStateStyle, Brush) == 0x000000, "Member 'FFortStateStyle::Brush' has a wrong offset!");
static_assert(offsetof(FFortStateStyle, PrimaryColor) == 0x0002B8, "Member 'FFortStateStyle::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FFortStateStyle, SecondaryColor) == 0x0002C8, "Member 'FFortStateStyle::SecondaryColor' has a wrong offset!");

// ScriptStruct FortniteUI.OpenedCardPack
// 0x0008 (0x0008 - 0x0000)
struct FOpenedCardPack final
{
public:
	class UFortCardPackItemDefinition*            CardPackDefinition;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayLevel;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOpenedCardPack) == 0x000004, "Wrong alignment on FOpenedCardPack");
static_assert(sizeof(FOpenedCardPack) == 0x000008, "Wrong size on FOpenedCardPack");
static_assert(offsetof(FOpenedCardPack, CardPackDefinition) == 0x000000, "Member 'FOpenedCardPack::CardPackDefinition' has a wrong offset!");
static_assert(offsetof(FOpenedCardPack, DisplayLevel) == 0x000004, "Member 'FOpenedCardPack::DisplayLevel' has a wrong offset!");

// ScriptStruct FortniteUI.FortMissionDetails
// 0x0090 (0x0090 - 0x0000)
struct FFortMissionDetails final
{
public:
	EFortTheaterMapTileType                       TileType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TheaterDisplayName;                                // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   MissionName;                                       // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   MissionDescription;                                // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UFortMissionGenerator*                  MissionDefinition;                                 // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ZoneName;                                          // 0x002C(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ZoneDescription;                                   // 0x0038(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RegionThemeName;                                   // 0x0044(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USlateBrushAsset>        RegionThemeIcon;                                   // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DifficultyName;                                    // 0x0068(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FFortMissionRewardInfo>         MissionRewards;                                    // 0x0074(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimespan                              AvailableTime;                                     // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RequiredBaseRating;                                // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecommendedBaseRating;                             // 0x008C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortMissionDetails) == 0x000004, "Wrong alignment on FFortMissionDetails");
static_assert(sizeof(FFortMissionDetails) == 0x000090, "Wrong size on FFortMissionDetails");
static_assert(offsetof(FFortMissionDetails, TileType) == 0x000000, "Member 'FFortMissionDetails::TileType' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, TheaterDisplayName) == 0x000004, "Member 'FFortMissionDetails::TheaterDisplayName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, MissionName) == 0x000010, "Member 'FFortMissionDetails::MissionName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, MissionDescription) == 0x00001C, "Member 'FFortMissionDetails::MissionDescription' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, MissionDefinition) == 0x000028, "Member 'FFortMissionDetails::MissionDefinition' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, ZoneName) == 0x00002C, "Member 'FFortMissionDetails::ZoneName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, ZoneDescription) == 0x000038, "Member 'FFortMissionDetails::ZoneDescription' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, RegionThemeName) == 0x000044, "Member 'FFortMissionDetails::RegionThemeName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, RegionThemeIcon) == 0x000050, "Member 'FFortMissionDetails::RegionThemeIcon' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, DifficultyName) == 0x000068, "Member 'FFortMissionDetails::DifficultyName' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, MissionRewards) == 0x000074, "Member 'FFortMissionDetails::MissionRewards' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, AvailableTime) == 0x000080, "Member 'FFortMissionDetails::AvailableTime' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, RequiredBaseRating) == 0x000088, "Member 'FFortMissionDetails::RequiredBaseRating' has a wrong offset!");
static_assert(offsetof(FFortMissionDetails, RecommendedBaseRating) == 0x00008C, "Member 'FFortMissionDetails::RecommendedBaseRating' has a wrong offset!");

// ScriptStruct FortniteUI.VaultPropertyInfo
// 0x0028 (0x0028 - 0x0000)
struct FVaultPropertyInfo final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ValueText;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bPendingChange;                                    // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsPositiveChange;                                 // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ChangedValueText;                                  // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVaultPropertyInfo) == 0x000004, "Wrong alignment on FVaultPropertyInfo");
static_assert(sizeof(FVaultPropertyInfo) == 0x000028, "Wrong size on FVaultPropertyInfo");
static_assert(offsetof(FVaultPropertyInfo, DisplayName) == 0x000000, "Member 'FVaultPropertyInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FVaultPropertyInfo, ValueText) == 0x00000C, "Member 'FVaultPropertyInfo::ValueText' has a wrong offset!");
static_assert(offsetof(FVaultPropertyInfo, bPendingChange) == 0x000018, "Member 'FVaultPropertyInfo::bPendingChange' has a wrong offset!");
static_assert(offsetof(FVaultPropertyInfo, bIsPositiveChange) == 0x000019, "Member 'FVaultPropertyInfo::bIsPositiveChange' has a wrong offset!");
static_assert(offsetof(FVaultPropertyInfo, ChangedValueText) == 0x00001C, "Member 'FVaultPropertyInfo::ChangedValueText' has a wrong offset!");

// ScriptStruct FortniteUI.HeroStat
// 0x0014 (0x0014 - 0x0000)
struct FHeroStat final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCategory;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroStat) == 0x000004, "Wrong alignment on FHeroStat");
static_assert(sizeof(FHeroStat) == 0x000014, "Wrong size on FHeroStat");
static_assert(offsetof(FHeroStat, DisplayName) == 0x000000, "Member 'FHeroStat::DisplayName' has a wrong offset!");
static_assert(offsetof(FHeroStat, Value) == 0x00000C, "Member 'FHeroStat::Value' has a wrong offset!");
static_assert(offsetof(FHeroStat, bIsCategory) == 0x000010, "Member 'FHeroStat::bIsCategory' has a wrong offset!");

// ScriptStruct FortniteUI.EmptyHeroSlot
// 0x000C (0x000C - 0x0000)
struct FEmptyHeroSlot final
{
public:
	class UFortHeroType*                          Type;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumAvailable;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasMale;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasFemale;                                        // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEmptyHeroSlot) == 0x000004, "Wrong alignment on FEmptyHeroSlot");
static_assert(sizeof(FEmptyHeroSlot) == 0x00000C, "Wrong size on FEmptyHeroSlot");
static_assert(offsetof(FEmptyHeroSlot, Type) == 0x000000, "Member 'FEmptyHeroSlot::Type' has a wrong offset!");
static_assert(offsetof(FEmptyHeroSlot, NumAvailable) == 0x000004, "Member 'FEmptyHeroSlot::NumAvailable' has a wrong offset!");
static_assert(offsetof(FEmptyHeroSlot, bHasMale) == 0x000008, "Member 'FEmptyHeroSlot::bHasMale' has a wrong offset!");
static_assert(offsetof(FEmptyHeroSlot, bHasFemale) == 0x000009, "Member 'FEmptyHeroSlot::bHasFemale' has a wrong offset!");

// ScriptStruct FortniteUI.HeroUIData
// 0x0018 (0x0018 - 0x0000)
struct FHeroUIData final
{
public:
	class UFortHero*                              Hero;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelected;                                       // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         XPRequirementForCurrentLevel;                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XPRequirementForNextLevel;                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredXPToLevelUp;                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMaxHeroLevel;                                   // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroUIData) == 0x000004, "Wrong alignment on FHeroUIData");
static_assert(sizeof(FHeroUIData) == 0x000018, "Wrong size on FHeroUIData");
static_assert(offsetof(FHeroUIData, Hero) == 0x000000, "Member 'FHeroUIData::Hero' has a wrong offset!");
static_assert(offsetof(FHeroUIData, bIsSelected) == 0x000004, "Member 'FHeroUIData::bIsSelected' has a wrong offset!");
static_assert(offsetof(FHeroUIData, XPRequirementForCurrentLevel) == 0x000008, "Member 'FHeroUIData::XPRequirementForCurrentLevel' has a wrong offset!");
static_assert(offsetof(FHeroUIData, XPRequirementForNextLevel) == 0x00000C, "Member 'FHeroUIData::XPRequirementForNextLevel' has a wrong offset!");
static_assert(offsetof(FHeroUIData, RequiredXPToLevelUp) == 0x000010, "Member 'FHeroUIData::RequiredXPToLevelUp' has a wrong offset!");
static_assert(offsetof(FHeroUIData, bIsMaxHeroLevel) == 0x000014, "Member 'FHeroUIData::bIsMaxHeroLevel' has a wrong offset!");

// ScriptStruct FortniteUI.FortKillerVisualInfo
// 0x0080 (0x0080 - 0x0000)
struct FFortKillerVisualInfo final
{
public:
	struct FSlateBrush                            KillerBrush;                                       // 0x0000(0x0074)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   KillerName;                                        // 0x0074(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortKillerVisualInfo) == 0x000004, "Wrong alignment on FFortKillerVisualInfo");
static_assert(sizeof(FFortKillerVisualInfo) == 0x000080, "Wrong size on FFortKillerVisualInfo");
static_assert(offsetof(FFortKillerVisualInfo, KillerBrush) == 0x000000, "Member 'FFortKillerVisualInfo::KillerBrush' has a wrong offset!");
static_assert(offsetof(FFortKillerVisualInfo, KillerName) == 0x000074, "Member 'FFortKillerVisualInfo::KillerName' has a wrong offset!");

// ScriptStruct FortniteUI.FortItemListFilter
// 0x0010 (0x0010 - 0x0000)
struct FFortItemListFilter final
{
public:
	class FString                                 SearchText;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          FilterType;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInStorageVault;                                   // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFortItemListFilter) == 0x000004, "Wrong alignment on FFortItemListFilter");
static_assert(sizeof(FFortItemListFilter) == 0x000010, "Wrong size on FFortItemListFilter");
static_assert(offsetof(FFortItemListFilter, SearchText) == 0x000000, "Member 'FFortItemListFilter::SearchText' has a wrong offset!");
static_assert(offsetof(FFortItemListFilter, FilterType) == 0x00000C, "Member 'FFortItemListFilter::FilterType' has a wrong offset!");
static_assert(offsetof(FFortItemListFilter, bInStorageVault) == 0x00000D, "Member 'FFortItemListFilter::bInStorageVault' has a wrong offset!");

// ScriptStruct FortniteUI.FortModalContainerSizeEntry
// 0x001C (0x001C - 0x0000)
struct FFortModalContainerSizeEntry final
{
public:
	float                                         AbsoluteWidth;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopPercent;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MiddlePercent;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BottomPercent;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalPadding;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalPadding;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContentPadding;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortModalContainerSizeEntry) == 0x000004, "Wrong alignment on FFortModalContainerSizeEntry");
static_assert(sizeof(FFortModalContainerSizeEntry) == 0x00001C, "Wrong size on FFortModalContainerSizeEntry");
static_assert(offsetof(FFortModalContainerSizeEntry, AbsoluteWidth) == 0x000000, "Member 'FFortModalContainerSizeEntry::AbsoluteWidth' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, TopPercent) == 0x000004, "Member 'FFortModalContainerSizeEntry::TopPercent' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, MiddlePercent) == 0x000008, "Member 'FFortModalContainerSizeEntry::MiddlePercent' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, BottomPercent) == 0x00000C, "Member 'FFortModalContainerSizeEntry::BottomPercent' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, VerticalPadding) == 0x000010, "Member 'FFortModalContainerSizeEntry::VerticalPadding' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, HorizontalPadding) == 0x000014, "Member 'FFortModalContainerSizeEntry::HorizontalPadding' has a wrong offset!");
static_assert(offsetof(FFortModalContainerSizeEntry, ContentPadding) == 0x000018, "Member 'FFortModalContainerSizeEntry::ContentPadding' has a wrong offset!");

// ScriptStruct FortniteUI.CardPackOffer
// 0x003C (0x003C - 0x0000)
struct FCardPackOffer final
{
public:
	class FText                                   Title;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         MtxPrice;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantityRemaining;                                 // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTimedOffer;                                       // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortCatalogMeta                       OfferMetaData;                                     // 0x0024(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x8];                                       // 0x0034(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCardPackOffer) == 0x000004, "Wrong alignment on FCardPackOffer");
static_assert(sizeof(FCardPackOffer) == 0x00003C, "Wrong size on FCardPackOffer");
static_assert(offsetof(FCardPackOffer, Title) == 0x000000, "Member 'FCardPackOffer::Title' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, Description) == 0x00000C, "Member 'FCardPackOffer::Description' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, MtxPrice) == 0x000018, "Member 'FCardPackOffer::MtxPrice' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, QuantityRemaining) == 0x00001C, "Member 'FCardPackOffer::QuantityRemaining' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, bTimedOffer) == 0x000020, "Member 'FCardPackOffer::bTimedOffer' has a wrong offset!");
static_assert(offsetof(FCardPackOffer, OfferMetaData) == 0x000024, "Member 'FCardPackOffer::OfferMetaData' has a wrong offset!");

// ScriptStruct FortniteUI.VaultButtonInfo
// 0x0090 (0x0090 - 0x0000)
struct FVaultButtonInfo final
{
public:
	EVaultCommandType                             CommandType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CommandText;                                       // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bHasCost;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cost;                                              // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ResourceIcon;                                      // 0x0018(0x0074)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x008C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVaultButtonInfo) == 0x000004, "Wrong alignment on FVaultButtonInfo");
static_assert(sizeof(FVaultButtonInfo) == 0x000090, "Wrong size on FVaultButtonInfo");
static_assert(offsetof(FVaultButtonInfo, CommandType) == 0x000000, "Member 'FVaultButtonInfo::CommandType' has a wrong offset!");
static_assert(offsetof(FVaultButtonInfo, CommandText) == 0x000004, "Member 'FVaultButtonInfo::CommandText' has a wrong offset!");
static_assert(offsetof(FVaultButtonInfo, bHasCost) == 0x000010, "Member 'FVaultButtonInfo::bHasCost' has a wrong offset!");
static_assert(offsetof(FVaultButtonInfo, Cost) == 0x000014, "Member 'FVaultButtonInfo::Cost' has a wrong offset!");
static_assert(offsetof(FVaultButtonInfo, ResourceIcon) == 0x000018, "Member 'FVaultButtonInfo::ResourceIcon' has a wrong offset!");
static_assert(offsetof(FVaultButtonInfo, bEnabled) == 0x00008C, "Member 'FVaultButtonInfo::bEnabled' has a wrong offset!");

// ScriptStruct FortniteUI.VaultIngredientInfo
// 0x0090 (0x0090 - 0x0000)
struct FVaultIngredientInfo final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Image;                                             // 0x001C(0x0074)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVaultIngredientInfo) == 0x000004, "Wrong alignment on FVaultIngredientInfo");
static_assert(sizeof(FVaultIngredientInfo) == 0x000090, "Wrong size on FVaultIngredientInfo");
static_assert(offsetof(FVaultIngredientInfo, Count) == 0x000000, "Member 'FVaultIngredientInfo::Count' has a wrong offset!");
static_assert(offsetof(FVaultIngredientInfo, DisplayName) == 0x000004, "Member 'FVaultIngredientInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FVaultIngredientInfo, Description) == 0x000010, "Member 'FVaultIngredientInfo::Description' has a wrong offset!");
static_assert(offsetof(FVaultIngredientInfo, Image) == 0x00001C, "Member 'FVaultIngredientInfo::Image' has a wrong offset!");

// ScriptStruct FortniteUI.VaultDetailsInfo
// 0x0620 (0x0620 - 0x0000)
struct FVaultDetailsInfo final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            RarityColor;                                       // 0x0004(0x001C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSlateColor                            RaritySecondaryColor;                              // 0x0020(0x001C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   MainHeader;                                        // 0x003C(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SubHeader1;                                        // 0x0048(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SubHeader2;                                        // 0x0054(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLevel;                                          // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SubInfoText1;                                      // 0x0068(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    SubInfoImage1;                                     // 0x0074(0x02B8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   SubInfoText2;                                      // 0x032C(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FFortMultiSizeBrush                    SubInfoImage2;                                     // 0x0338(0x02B8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x05F0(0x000C)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FVaultPropertyInfo>             Properties;                                        // 0x05FC(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVaultIngredientInfo>           Ingredients;                                       // 0x0608(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVaultButtonInfo>               Buttons;                                           // 0x0614(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVaultDetailsInfo) == 0x000004, "Wrong alignment on FVaultDetailsInfo");
static_assert(sizeof(FVaultDetailsInfo) == 0x000620, "Wrong size on FVaultDetailsInfo");
static_assert(offsetof(FVaultDetailsInfo, bIsValid) == 0x000000, "Member 'FVaultDetailsInfo::bIsValid' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, RarityColor) == 0x000004, "Member 'FVaultDetailsInfo::RarityColor' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, RaritySecondaryColor) == 0x000020, "Member 'FVaultDetailsInfo::RaritySecondaryColor' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, MainHeader) == 0x00003C, "Member 'FVaultDetailsInfo::MainHeader' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, SubHeader1) == 0x000048, "Member 'FVaultDetailsInfo::SubHeader1' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, SubHeader2) == 0x000054, "Member 'FVaultDetailsInfo::SubHeader2' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, Level) == 0x000060, "Member 'FVaultDetailsInfo::Level' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, MaxLevel) == 0x000064, "Member 'FVaultDetailsInfo::MaxLevel' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, SubInfoText1) == 0x000068, "Member 'FVaultDetailsInfo::SubInfoText1' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, SubInfoImage1) == 0x000074, "Member 'FVaultDetailsInfo::SubInfoImage1' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, SubInfoText2) == 0x00032C, "Member 'FVaultDetailsInfo::SubInfoText2' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, SubInfoImage2) == 0x000338, "Member 'FVaultDetailsInfo::SubInfoImage2' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, Description) == 0x0005F0, "Member 'FVaultDetailsInfo::Description' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, Properties) == 0x0005FC, "Member 'FVaultDetailsInfo::Properties' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, Ingredients) == 0x000608, "Member 'FVaultDetailsInfo::Ingredients' has a wrong offset!");
static_assert(offsetof(FVaultDetailsInfo, Buttons) == 0x000614, "Member 'FVaultDetailsInfo::Buttons' has a wrong offset!");

// ScriptStruct FortniteUI.VaultAlterationInfo
// 0x0008 (0x0008 - 0x0000)
struct FVaultAlterationInfo final
{
public:
	EFortAlteration                               SlotType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAlterationItemDefinition*          SlottedAlteration;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVaultAlterationInfo) == 0x000004, "Wrong alignment on FVaultAlterationInfo");
static_assert(sizeof(FVaultAlterationInfo) == 0x000008, "Wrong size on FVaultAlterationInfo");
static_assert(offsetof(FVaultAlterationInfo, SlotType) == 0x000000, "Member 'FVaultAlterationInfo::SlotType' has a wrong offset!");
static_assert(offsetof(FVaultAlterationInfo, SlottedAlteration) == 0x000004, "Member 'FVaultAlterationInfo::SlottedAlteration' has a wrong offset!");

// ScriptStruct FortniteUI.VaultContentDetails
// 0x0010 (0x0010 - 0x0000)
struct FVaultContentDetails final
{
public:
	class FString                                 SearchText;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVaultContentSortType                         SortType;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortInventoryFilter                          SubType;                                           // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVaultContentDetails) == 0x000004, "Wrong alignment on FVaultContentDetails");
static_assert(sizeof(FVaultContentDetails) == 0x000010, "Wrong size on FVaultContentDetails");
static_assert(offsetof(FVaultContentDetails, SearchText) == 0x000000, "Member 'FVaultContentDetails::SearchText' has a wrong offset!");
static_assert(offsetof(FVaultContentDetails, SortType) == 0x00000C, "Member 'FVaultContentDetails::SortType' has a wrong offset!");
static_assert(offsetof(FVaultContentDetails, SubType) == 0x00000D, "Member 'FVaultContentDetails::SubType' has a wrong offset!");

// ScriptStruct FortniteUI.FortHeroNamesData
// 0x0024 (0x0024 - 0x0000)
struct FFortHeroNamesData final : public FTableRowBase
{
public:
	class FString                                 FirstName;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NickName;                                          // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastName;                                          // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortHeroNamesData) == 0x000004, "Wrong alignment on FFortHeroNamesData");
static_assert(sizeof(FFortHeroNamesData) == 0x000024, "Wrong size on FFortHeroNamesData");
static_assert(offsetof(FFortHeroNamesData, FirstName) == 0x000000, "Member 'FFortHeroNamesData::FirstName' has a wrong offset!");
static_assert(offsetof(FFortHeroNamesData, NickName) == 0x00000C, "Member 'FFortHeroNamesData::NickName' has a wrong offset!");
static_assert(offsetof(FFortHeroNamesData, LastName) == 0x000018, "Member 'FFortHeroNamesData::LastName' has a wrong offset!");

}

#pragma pack(pop)
