#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GAB_ATLASZap

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function GAB_ATLASZap.GAB_ATLASZap_C.ExecuteUbergraph_GAB_ATLASZap
// 0x008C (0x008C - 0x0000)
struct GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_Event_EventData;                            // 0x0008(0x0058)(ConstParm)
	struct FGameplayAbilityTargetDataHandle       CallFunc_AbilityTargetDataFromActor_ReturnValue;   // 0x0060(0x0014)()
	class AFortAIPawn*                            K2Node_DynamicCast_AsFort_AIPawn;                  // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveGameplayEffectHandle>    CallFunc_ApplyGameplayEffectContainer_ReturnValue; // 0x007C(0x000C)(ConstParm, ZeroConstructor, ReferenceParm)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap) == 0x000004, "Wrong alignment on GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap");
static_assert(sizeof(GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap) == 0x00008C, "Wrong size on GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap");
static_assert(offsetof(GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap, EntryPoint) == 0x000000, "Member 'GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap::EntryPoint' has a wrong offset!");
static_assert(offsetof(GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap, CallFunc_K2_CommitAbility_ReturnValue) == 0x000004, "Member 'GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap::CallFunc_K2_CommitAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap, K2Node_Event_EventData) == 0x000008, "Member 'GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap::K2Node_Event_EventData' has a wrong offset!");
static_assert(offsetof(GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap, CallFunc_AbilityTargetDataFromActor_ReturnValue) == 0x000060, "Member 'GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap::CallFunc_AbilityTargetDataFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap, K2Node_DynamicCast_AsFort_AIPawn) == 0x000074, "Member 'GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap::K2Node_DynamicCast_AsFort_AIPawn' has a wrong offset!");
static_assert(offsetof(GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap, CallFunc_ApplyGameplayEffectContainer_ReturnValue) == 0x00007C, "Member 'GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap::CallFunc_ApplyGameplayEffectContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap, CallFunc_GetController_ReturnValue) == 0x000088, "Member 'GAB_ATLASZap_C_ExecuteUbergraph_GAB_ATLASZap::CallFunc_GetController_ReturnValue' has a wrong offset!");

// Function GAB_ATLASZap.GAB_ATLASZap_C.K2_ActivateAbilityFromEvent
// 0x0058 (0x0058 - 0x0000)
struct GAB_ATLASZap_C_K2_ActivateAbilityFromEvent final
{
public:
	struct FGameplayEventData                     EventData;                                         // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GAB_ATLASZap_C_K2_ActivateAbilityFromEvent) == 0x000004, "Wrong alignment on GAB_ATLASZap_C_K2_ActivateAbilityFromEvent");
static_assert(sizeof(GAB_ATLASZap_C_K2_ActivateAbilityFromEvent) == 0x000058, "Wrong size on GAB_ATLASZap_C_K2_ActivateAbilityFromEvent");
static_assert(offsetof(GAB_ATLASZap_C_K2_ActivateAbilityFromEvent, EventData) == 0x000000, "Member 'GAB_ATLASZap_C_K2_ActivateAbilityFromEvent::EventData' has a wrong offset!");

}

#pragma pack(pop)
