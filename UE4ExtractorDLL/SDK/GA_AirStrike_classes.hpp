#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_AirStrike

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// GameplayAbilityBlueprintGeneratedClass GA_AirStrike.GA_AirStrike_C
// 0x0184 (0x0860 - 0x06DC)
class UGA_AirStrike_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06DC(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EventComplete;                                     // 0x06E4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventActivation;                                   // 0x06EC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayEventData                     EventData;                                         // 0x06F4(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AbilityMultiplier;                                 // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                BombInitLocation;                                  // 0x0750(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Prj_Spawn_Direction;                               // 0x075C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Bomb_Delay;                                        // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 Prj_Bomb;                                          // 0x076C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EC_Explode;                                        // 0x0770(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFortGameplayEffectContainerSpec       EC_Explode_Return;                                 // 0x0778(0x0064)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Prj_Gravity;                                       // 0x07DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             Bomb_Init_Transform;                               // 0x07E0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         ForLoopCounter;                                    // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FVector>                        Current_Unprocessed_Positions_Array;               // 0x0814(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class AFortAbilityDecoTool*                   DecoTool;                                          // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Explosion_Radius;                                  // 0x0824(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         BombHeightOffset;                                  // 0x0828(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82C[0x4];                                      // 0x082C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NewVar;                                            // 0x0830(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_GA_AirStrike(int32 EntryPoint);
	void K2_ActivateAbility();
	void OnCommitted_FD8DF5D249A3F015BFB1F0A559B298F9();
	void OnFailed_FD8DF5D249A3F015BFB1F0A559B298F9();
	void GetAttributeValue();

	struct FTransform GetCustomAbilitySourceTransform() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_AirStrike_C">();
	}
	static class UGA_AirStrike_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_AirStrike_C>();
	}
};
static_assert(alignof(UGA_AirStrike_C) == 0x000010, "Wrong alignment on UGA_AirStrike_C");
static_assert(sizeof(UGA_AirStrike_C) == 0x000860, "Wrong size on UGA_AirStrike_C");
static_assert(offsetof(UGA_AirStrike_C, UberGraphFrame) == 0x0006DC, "Member 'UGA_AirStrike_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, PlayerPawn) == 0x0006E0, "Member 'UGA_AirStrike_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, EventComplete) == 0x0006E4, "Member 'UGA_AirStrike_C::EventComplete' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, EventActivation) == 0x0006EC, "Member 'UGA_AirStrike_C::EventActivation' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, EventData) == 0x0006F4, "Member 'UGA_AirStrike_C::EventData' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, AbilityMultiplier) == 0x00074C, "Member 'UGA_AirStrike_C::AbilityMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, BombInitLocation) == 0x000750, "Member 'UGA_AirStrike_C::BombInitLocation' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, Prj_Spawn_Direction) == 0x00075C, "Member 'UGA_AirStrike_C::Prj_Spawn_Direction' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, Bomb_Delay) == 0x000768, "Member 'UGA_AirStrike_C::Bomb_Delay' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, Prj_Bomb) == 0x00076C, "Member 'UGA_AirStrike_C::Prj_Bomb' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, EC_Explode) == 0x000770, "Member 'UGA_AirStrike_C::EC_Explode' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, EC_Explode_Return) == 0x000778, "Member 'UGA_AirStrike_C::EC_Explode_Return' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, Prj_Gravity) == 0x0007DC, "Member 'UGA_AirStrike_C::Prj_Gravity' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, Bomb_Init_Transform) == 0x0007E0, "Member 'UGA_AirStrike_C::Bomb_Init_Transform' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, ForLoopCounter) == 0x000810, "Member 'UGA_AirStrike_C::ForLoopCounter' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, Current_Unprocessed_Positions_Array) == 0x000814, "Member 'UGA_AirStrike_C::Current_Unprocessed_Positions_Array' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, DecoTool) == 0x000820, "Member 'UGA_AirStrike_C::DecoTool' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, Explosion_Radius) == 0x000824, "Member 'UGA_AirStrike_C::Explosion_Radius' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, BombHeightOffset) == 0x000828, "Member 'UGA_AirStrike_C::BombHeightOffset' has a wrong offset!");
static_assert(offsetof(UGA_AirStrike_C, NewVar) == 0x000830, "Member 'UGA_AirStrike_C::NewVar' has a wrong offset!");

}

#pragma pack(pop)
