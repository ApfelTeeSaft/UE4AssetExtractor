#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Commando_FragGrenade

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass GA_Commando_FragGrenade.GA_Commando_FragGrenade_C
// 0x01A4 (0x0880 - 0x06DC)
class UGA_Commando_FragGrenade_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06DC(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayEventData                     EventData;                                         // 0x06E0(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APlayerPawn_Commando_C*                 Commando_Pawn;                                     // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EventActivation;                                   // 0x073C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventComplete;                                     // 0x0744(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 Prj_Grenade;                                       // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         GrenadeSpeed;                                      // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Gravity;                                           // 0x0754(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             GrenadeSound;                                      // 0x0758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 GE_GrenadeDamage;                                  // 0x075C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_ClusterBombs;                                   // 0x0760(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         MaxClusterGrenades;                                // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 Prj_Cluster;                                       // 0x077C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ClusterSpeedMax;                                   // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_BiggerIsBetter;                                 // 0x0784(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EC_DefaultExplosion;                               // 0x079C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EC_IncreasedRadius;                                // 0x07A4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFortGameplayEffectContainerSpec       EC_ReturnedEffect;                                 // 0x07AC(0x0064)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ExplosionRadius;                                   // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_PerfectEngineering;                             // 0x0814(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventApplyDebilitatingShots;                       // 0x082C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Verticle_Throw;                                    // 0x0834(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ClusterMinPitch;                                   // 0x0838(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ClusterMaxPitch;                                   // 0x083C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EC_ClusterExplosion;                               // 0x0840(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ClusterSpeedMin;                                   // 0x0848(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FFortFeedbackHandle                    GrenadeDialogFeedback;                             // 0x084C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_KeepOut;                                        // 0x085C(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EC_BurningGround;                                  // 0x0874(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 AOE_KeepOut;                                       // 0x087C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_GA_Commando_FragGrenade(int32 EntryPoint);
	void K2_ActivateAbility();
	void OnFinish_978FA3324D06E995EB838282AB600A46();
	void Triggered_DE7AD8FA464F26E37AC20281DAD7839E(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_DE7AD8FA464F26E37AC20281DAD7839E(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_DE7AD8FA464F26E37AC20281DAD7839E(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Created_A0715E3447A5D46682E46A89960E35AA(const struct FProjectileEventData& ProjectileData);
	void Touched_A0715E3447A5D46682E46A89960E35AA(const struct FProjectileEventData& ProjectileData);
	void Bounced_A0715E3447A5D46682E46A89960E35AA(const struct FProjectileEventData& ProjectileData);
	void Stopped_A0715E3447A5D46682E46A89960E35AA(const struct FProjectileEventData& ProjectileData);
	void Exploded_A0715E3447A5D46682E46A89960E35AA(const struct FProjectileEventData& ProjectileData);
	void Destroyed_A0715E3447A5D46682E46A89960E35AA(const struct FProjectileEventData& ProjectileData);
	void ThrowGrenade(class UAbilitySystemComponent* AbilitySystemComponent, class UClass** Base_Grenade, struct FVector* Spawn_Location, struct FRotator* Spawn_Rotation, float* Projectile_Speed, float* Projectile_Gravity, struct FFortGameplayEffectContainerSpec* Explosion_Gameplay_Spec);
	void ActivateClusterBombs(const struct FProjectileEventData& Projectile_Data);
	void PerfectEngineering(const struct FProjectileEventData& Projectile_Data);
	void KeepOut(const struct FProjectileEventData& Projectile_Data);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Commando_FragGrenade_C">();
	}
	static class UGA_Commando_FragGrenade_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Commando_FragGrenade_C>();
	}
};
static_assert(alignof(UGA_Commando_FragGrenade_C) == 0x000004, "Wrong alignment on UGA_Commando_FragGrenade_C");
static_assert(sizeof(UGA_Commando_FragGrenade_C) == 0x000880, "Wrong size on UGA_Commando_FragGrenade_C");
static_assert(offsetof(UGA_Commando_FragGrenade_C, UberGraphFrame) == 0x0006DC, "Member 'UGA_Commando_FragGrenade_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, EventData) == 0x0006E0, "Member 'UGA_Commando_FragGrenade_C::EventData' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, Commando_Pawn) == 0x000738, "Member 'UGA_Commando_FragGrenade_C::Commando_Pawn' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, EventActivation) == 0x00073C, "Member 'UGA_Commando_FragGrenade_C::EventActivation' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, EventComplete) == 0x000744, "Member 'UGA_Commando_FragGrenade_C::EventComplete' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, Prj_Grenade) == 0x00074C, "Member 'UGA_Commando_FragGrenade_C::Prj_Grenade' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, GrenadeSpeed) == 0x000750, "Member 'UGA_Commando_FragGrenade_C::GrenadeSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, Gravity) == 0x000754, "Member 'UGA_Commando_FragGrenade_C::Gravity' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, GrenadeSound) == 0x000758, "Member 'UGA_Commando_FragGrenade_C::GrenadeSound' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, GE_GrenadeDamage) == 0x00075C, "Member 'UGA_Commando_FragGrenade_C::GE_GrenadeDamage' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, TC_ClusterBombs) == 0x000760, "Member 'UGA_Commando_FragGrenade_C::TC_ClusterBombs' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, MaxClusterGrenades) == 0x000778, "Member 'UGA_Commando_FragGrenade_C::MaxClusterGrenades' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, Prj_Cluster) == 0x00077C, "Member 'UGA_Commando_FragGrenade_C::Prj_Cluster' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, ClusterSpeedMax) == 0x000780, "Member 'UGA_Commando_FragGrenade_C::ClusterSpeedMax' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, TC_BiggerIsBetter) == 0x000784, "Member 'UGA_Commando_FragGrenade_C::TC_BiggerIsBetter' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, EC_DefaultExplosion) == 0x00079C, "Member 'UGA_Commando_FragGrenade_C::EC_DefaultExplosion' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, EC_IncreasedRadius) == 0x0007A4, "Member 'UGA_Commando_FragGrenade_C::EC_IncreasedRadius' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, EC_ReturnedEffect) == 0x0007AC, "Member 'UGA_Commando_FragGrenade_C::EC_ReturnedEffect' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, ExplosionRadius) == 0x000810, "Member 'UGA_Commando_FragGrenade_C::ExplosionRadius' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, TC_PerfectEngineering) == 0x000814, "Member 'UGA_Commando_FragGrenade_C::TC_PerfectEngineering' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, EventApplyDebilitatingShots) == 0x00082C, "Member 'UGA_Commando_FragGrenade_C::EventApplyDebilitatingShots' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, Verticle_Throw) == 0x000834, "Member 'UGA_Commando_FragGrenade_C::Verticle_Throw' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, ClusterMinPitch) == 0x000838, "Member 'UGA_Commando_FragGrenade_C::ClusterMinPitch' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, ClusterMaxPitch) == 0x00083C, "Member 'UGA_Commando_FragGrenade_C::ClusterMaxPitch' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, EC_ClusterExplosion) == 0x000840, "Member 'UGA_Commando_FragGrenade_C::EC_ClusterExplosion' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, ClusterSpeedMin) == 0x000848, "Member 'UGA_Commando_FragGrenade_C::ClusterSpeedMin' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, GrenadeDialogFeedback) == 0x00084C, "Member 'UGA_Commando_FragGrenade_C::GrenadeDialogFeedback' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, TC_KeepOut) == 0x00085C, "Member 'UGA_Commando_FragGrenade_C::TC_KeepOut' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, EC_BurningGround) == 0x000874, "Member 'UGA_Commando_FragGrenade_C::EC_BurningGround' has a wrong offset!");
static_assert(offsetof(UGA_Commando_FragGrenade_C, AOE_KeepOut) == 0x00087C, "Member 'UGA_Commando_FragGrenade_C::AOE_KeepOut' has a wrong offset!");

}

#pragma pack(pop)
