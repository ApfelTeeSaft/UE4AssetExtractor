#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Commando_LuckyBreak

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function GA_Commando_LuckyBreak.GA_Commando_LuckyBreak_C.ExecuteUbergraph_GA_Commando_LuckyBreak
// 0x0060 (0x0060 - 0x0000)
struct GA_Commando_LuckyBreak_C_ExecuteUbergraph_GA_Commando_LuckyBreak final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGameplayEventData                     K2Node_Event_EventData;                            // 0x0004(0x0058)(ConstParm)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x005C(0x0004)()
};
static_assert(alignof(GA_Commando_LuckyBreak_C_ExecuteUbergraph_GA_Commando_LuckyBreak) == 0x000004, "Wrong alignment on GA_Commando_LuckyBreak_C_ExecuteUbergraph_GA_Commando_LuckyBreak");
static_assert(sizeof(GA_Commando_LuckyBreak_C_ExecuteUbergraph_GA_Commando_LuckyBreak) == 0x000060, "Wrong size on GA_Commando_LuckyBreak_C_ExecuteUbergraph_GA_Commando_LuckyBreak");
static_assert(offsetof(GA_Commando_LuckyBreak_C_ExecuteUbergraph_GA_Commando_LuckyBreak, EntryPoint) == 0x000000, "Member 'GA_Commando_LuckyBreak_C_ExecuteUbergraph_GA_Commando_LuckyBreak::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_ExecuteUbergraph_GA_Commando_LuckyBreak, K2Node_Event_EventData) == 0x000004, "Member 'GA_Commando_LuckyBreak_C_ExecuteUbergraph_GA_Commando_LuckyBreak::K2Node_Event_EventData' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_ExecuteUbergraph_GA_Commando_LuckyBreak, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x00005C, "Member 'GA_Commando_LuckyBreak_C_ExecuteUbergraph_GA_Commando_LuckyBreak::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");

// Function GA_Commando_LuckyBreak.GA_Commando_LuckyBreak_C.K2_ActivateAbilityFromEvent
// 0x0058 (0x0058 - 0x0000)
struct GA_Commando_LuckyBreak_C_K2_ActivateAbilityFromEvent final
{
public:
	struct FGameplayEventData                     EventData;                                         // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_Commando_LuckyBreak_C_K2_ActivateAbilityFromEvent) == 0x000004, "Wrong alignment on GA_Commando_LuckyBreak_C_K2_ActivateAbilityFromEvent");
static_assert(sizeof(GA_Commando_LuckyBreak_C_K2_ActivateAbilityFromEvent) == 0x000058, "Wrong size on GA_Commando_LuckyBreak_C_K2_ActivateAbilityFromEvent");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ActivateAbilityFromEvent, EventData) == 0x000000, "Member 'GA_Commando_LuckyBreak_C_K2_ActivateAbilityFromEvent::EventData' has a wrong offset!");

// Function GA_Commando_LuckyBreak.GA_Commando_LuckyBreak_C.K2_ShouldAbilityRespondToEvent
// 0x017C (0x017C - 0x0000)
struct GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0034)(Parm, ContainsInstancedReference)
	struct FGameplayEventData                     Payload;                                           // 0x0034(0x0058)(Parm)
	bool                                          ReturnValue;                                       // 0x008C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_EffectContextGetHitResult_ReturnValue;    // 0x0090(0x0080)(ContainsInstancedReference)
	bool                                          CallFunc_IsCriticalHit_ReturnValue;                // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_113[0x1];                                      // 0x0113(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0154(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent) == 0x000004, "Wrong alignment on GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent");
static_assert(sizeof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent) == 0x00017C, "Wrong size on GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, ActorInfo) == 0x000000, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::ActorInfo' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, Payload) == 0x000034, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::Payload' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, ReturnValue) == 0x00008C, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_EffectContextGetHitResult_ReturnValue) == 0x000090, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_EffectContextGetHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_IsCriticalHit_ReturnValue) == 0x000110, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_IsCriticalHit_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BreakHitResult_bBlockingHit) == 0x000111, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BreakHitResult_bInitialOverlap) == 0x000112, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BreakHitResult_Time) == 0x000114, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BreakHitResult_Location) == 0x000118, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BreakHitResult_ImpactPoint) == 0x000124, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BreakHitResult_Normal) == 0x000130, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BreakHitResult_ImpactNormal) == 0x00013C, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BreakHitResult_PhysMat) == 0x000148, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BreakHitResult_HitActor) == 0x00014C, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BreakHitResult_HitComponent) == 0x000150, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BreakHitResult_HitBoneName) == 0x000154, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BreakHitResult_HitItem) == 0x00015C, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BreakHitResult_TraceStart) == 0x000160, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BreakHitResult_TraceEnd) == 0x00016C, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000178, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent, CallFunc_BooleanAND_ReturnValue) == 0x000179, "Member 'GA_Commando_LuckyBreak_C_K2_ShouldAbilityRespondToEvent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

#pragma pack(pop)
