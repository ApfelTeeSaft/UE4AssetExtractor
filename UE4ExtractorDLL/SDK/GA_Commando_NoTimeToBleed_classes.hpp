#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Commando_NoTimeToBleed

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass GA_Commando_NoTimeToBleed.GA_Commando_NoTimeToBleed_C
// 0x0094 (0x0770 - 0x06DC)
class UGA_Commando_NoTimeToBleed_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06DC(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayEventData                     EventData;                                         // 0x06E0(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APlayerPawn_Commando_C*                 CommandoPawn;                                      // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EventActivation;                                   // 0x073C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_NoTimeToBleed;                                  // 0x0744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EventComplete;                                     // 0x0748(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MaxHealth_;                                        // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_ExtraHeal;                                      // 0x0754(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         UpgradeHealth_;                                    // 0x076C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_GA_Commando_NoTimeToBleed(int32 EntryPoint);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData_0);
	void ApplyHeal(class APlayerPawn_Commando_C* CommandoPawn_0, const class AActor* Actor);

	bool K2_ShouldAbilityRespondToEvent(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayEventData& Payload) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Commando_NoTimeToBleed_C">();
	}
	static class UGA_Commando_NoTimeToBleed_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Commando_NoTimeToBleed_C>();
	}
};
static_assert(alignof(UGA_Commando_NoTimeToBleed_C) == 0x000004, "Wrong alignment on UGA_Commando_NoTimeToBleed_C");
static_assert(sizeof(UGA_Commando_NoTimeToBleed_C) == 0x000770, "Wrong size on UGA_Commando_NoTimeToBleed_C");
static_assert(offsetof(UGA_Commando_NoTimeToBleed_C, UberGraphFrame) == 0x0006DC, "Member 'UGA_Commando_NoTimeToBleed_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Commando_NoTimeToBleed_C, EventData) == 0x0006E0, "Member 'UGA_Commando_NoTimeToBleed_C::EventData' has a wrong offset!");
static_assert(offsetof(UGA_Commando_NoTimeToBleed_C, CommandoPawn) == 0x000738, "Member 'UGA_Commando_NoTimeToBleed_C::CommandoPawn' has a wrong offset!");
static_assert(offsetof(UGA_Commando_NoTimeToBleed_C, EventActivation) == 0x00073C, "Member 'UGA_Commando_NoTimeToBleed_C::EventActivation' has a wrong offset!");
static_assert(offsetof(UGA_Commando_NoTimeToBleed_C, GE_NoTimeToBleed) == 0x000744, "Member 'UGA_Commando_NoTimeToBleed_C::GE_NoTimeToBleed' has a wrong offset!");
static_assert(offsetof(UGA_Commando_NoTimeToBleed_C, EventComplete) == 0x000748, "Member 'UGA_Commando_NoTimeToBleed_C::EventComplete' has a wrong offset!");
static_assert(offsetof(UGA_Commando_NoTimeToBleed_C, MaxHealth_) == 0x000750, "Member 'UGA_Commando_NoTimeToBleed_C::MaxHealth_' has a wrong offset!");
static_assert(offsetof(UGA_Commando_NoTimeToBleed_C, TC_ExtraHeal) == 0x000754, "Member 'UGA_Commando_NoTimeToBleed_C::TC_ExtraHeal' has a wrong offset!");
static_assert(offsetof(UGA_Commando_NoTimeToBleed_C, UpgradeHealth_) == 0x00076C, "Member 'UGA_Commando_NoTimeToBleed_C::UpgradeHealth_' has a wrong offset!");

}

#pragma pack(pop)
