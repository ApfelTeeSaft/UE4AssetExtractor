#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Commando_NoTimeToBleed

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function GA_Commando_NoTimeToBleed.GA_Commando_NoTimeToBleed_C.ExecuteUbergraph_GA_Commando_NoTimeToBleed
// 0x0114 (0x0114 - 0x0000)
struct GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0004(0x0034)(ContainsInstancedReference)
	class APlayerPawn_Commando_C*                 K2Node_DynamicCast_AsPlayer_Pawn_Commando;         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     K2Node_MakeStruct_GameplayEventData;               // 0x0040(0x0058)()
	struct FGameplayAbilityTargetDataHandle       CallFunc_AbilityTargetDataFromActor_ReturnValue;   // 0x0098(0x0014)()
	TArray<struct FActiveGameplayEffectHandle>    CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue; // 0x00AC(0x000C)(ZeroConstructor, ReferenceParm)
	struct FGameplayEventData                     K2Node_Event_EventData;                            // 0x00B8(0x0058)(ConstParm)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue;             // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed) == 0x000004, "Wrong alignment on GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed");
static_assert(sizeof(GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed) == 0x000114, "Wrong size on GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed, EntryPoint) == 0x000000, "Member 'GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed, CallFunc_GetActorInfo_ReturnValue) == 0x000004, "Member 'GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed, K2Node_DynamicCast_AsPlayer_Pawn_Commando) == 0x000038, "Member 'GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed::K2Node_DynamicCast_AsPlayer_Pawn_Commando' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed, K2Node_DynamicCast_bSuccess) == 0x00003C, "Member 'GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed, K2Node_MakeStruct_GameplayEventData) == 0x000040, "Member 'GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed::K2Node_MakeStruct_GameplayEventData' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed, CallFunc_AbilityTargetDataFromActor_ReturnValue) == 0x000098, "Member 'GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed::CallFunc_AbilityTargetDataFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed, CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue) == 0x0000AC, "Member 'GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed::CallFunc_BP_ApplyGameplayEffectToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed, K2Node_Event_EventData) == 0x0000B8, "Member 'GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed::K2Node_Event_EventData' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed, CallFunc_K2_CommitAbility_ReturnValue) == 0x000110, "Member 'GA_Commando_NoTimeToBleed_C_ExecuteUbergraph_GA_Commando_NoTimeToBleed::CallFunc_K2_CommitAbility_ReturnValue' has a wrong offset!");

// Function GA_Commando_NoTimeToBleed.GA_Commando_NoTimeToBleed_C.K2_ActivateAbilityFromEvent
// 0x0058 (0x0058 - 0x0000)
struct GA_Commando_NoTimeToBleed_C_K2_ActivateAbilityFromEvent final
{
public:
	struct FGameplayEventData                     EventData_0;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_Commando_NoTimeToBleed_C_K2_ActivateAbilityFromEvent) == 0x000004, "Wrong alignment on GA_Commando_NoTimeToBleed_C_K2_ActivateAbilityFromEvent");
static_assert(sizeof(GA_Commando_NoTimeToBleed_C_K2_ActivateAbilityFromEvent) == 0x000058, "Wrong size on GA_Commando_NoTimeToBleed_C_K2_ActivateAbilityFromEvent");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_K2_ActivateAbilityFromEvent, EventData_0) == 0x000000, "Member 'GA_Commando_NoTimeToBleed_C_K2_ActivateAbilityFromEvent::EventData_0' has a wrong offset!");

// Function GA_Commando_NoTimeToBleed.GA_Commando_NoTimeToBleed_C.ApplyHeal
// 0x003C (0x003C - 0x0000)
struct GA_Commando_NoTimeToBleed_C_ApplyHeal final
{
public:
	class APlayerPawn_Commando_C*                 CommandoPawn_0;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	const class AActor*                           Actor;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetFloatAttribute_bSuccessfullyFoundAttribute; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatAttribute_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMaxHealth_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingGameplayEffectSpec_ReturnValue; // 0x0020(0x000C)()
	struct FGameplayEffectSpecHandle              CallFunc_AssignSetByCallerMagnitude_ReturnValue;   // 0x002C(0x000C)()
	struct FActiveGameplayEffectHandle            CallFunc_K2_ApplyGameplayEffectSpecToOwner_ReturnValue; // 0x0038(0x0004)()
};
static_assert(alignof(GA_Commando_NoTimeToBleed_C_ApplyHeal) == 0x000004, "Wrong alignment on GA_Commando_NoTimeToBleed_C_ApplyHeal");
static_assert(sizeof(GA_Commando_NoTimeToBleed_C_ApplyHeal) == 0x00003C, "Wrong size on GA_Commando_NoTimeToBleed_C_ApplyHeal");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ApplyHeal, CommandoPawn_0) == 0x000000, "Member 'GA_Commando_NoTimeToBleed_C_ApplyHeal::CommandoPawn_0' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ApplyHeal, Actor) == 0x000004, "Member 'GA_Commando_NoTimeToBleed_C_ApplyHeal::Actor' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ApplyHeal, CallFunc_GetFloatAttribute_bSuccessfullyFoundAttribute) == 0x000008, "Member 'GA_Commando_NoTimeToBleed_C_ApplyHeal::CallFunc_GetFloatAttribute_bSuccessfullyFoundAttribute' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ApplyHeal, CallFunc_GetFloatAttribute_ReturnValue) == 0x00000C, "Member 'GA_Commando_NoTimeToBleed_C_ApplyHeal::CallFunc_GetFloatAttribute_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ApplyHeal, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'GA_Commando_NoTimeToBleed_C_ApplyHeal::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ApplyHeal, CallFunc_GetMaxHealth_ReturnValue) == 0x000014, "Member 'GA_Commando_NoTimeToBleed_C_ApplyHeal::CallFunc_GetMaxHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ApplyHeal, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'GA_Commando_NoTimeToBleed_C_ApplyHeal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ApplyHeal, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'GA_Commando_NoTimeToBleed_C_ApplyHeal::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ApplyHeal, CallFunc_MakeOutgoingGameplayEffectSpec_ReturnValue) == 0x000020, "Member 'GA_Commando_NoTimeToBleed_C_ApplyHeal::CallFunc_MakeOutgoingGameplayEffectSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ApplyHeal, CallFunc_AssignSetByCallerMagnitude_ReturnValue) == 0x00002C, "Member 'GA_Commando_NoTimeToBleed_C_ApplyHeal::CallFunc_AssignSetByCallerMagnitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_ApplyHeal, CallFunc_K2_ApplyGameplayEffectSpecToOwner_ReturnValue) == 0x000038, "Member 'GA_Commando_NoTimeToBleed_C_ApplyHeal::CallFunc_K2_ApplyGameplayEffectSpecToOwner_ReturnValue' has a wrong offset!");

// Function GA_Commando_NoTimeToBleed.GA_Commando_NoTimeToBleed_C.K2_ShouldAbilityRespondToEvent
// 0x0098 (0x0098 - 0x0000)
struct GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0034)(Parm, ContainsInstancedReference)
	struct FGameplayEventData                     Payload;                                           // 0x0034(0x0058)(Parm)
	bool                                          ReturnValue;                                       // 0x008C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              K2Node_DynamicCast_AsFort_Pawn;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsPawn;                                            // 0x0095(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent) == 0x000004, "Wrong alignment on GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent");
static_assert(sizeof(GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent) == 0x000098, "Wrong size on GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent, ActorInfo) == 0x000000, "Member 'GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent::ActorInfo' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent, Payload) == 0x000034, "Member 'GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent::Payload' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent, ReturnValue) == 0x00008C, "Member 'GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent, K2Node_DynamicCast_AsFort_Pawn) == 0x000090, "Member 'GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent::K2Node_DynamicCast_AsFort_Pawn' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent, K2Node_DynamicCast_bSuccess) == 0x000094, "Member 'GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent, IsPawn) == 0x000095, "Member 'GA_Commando_NoTimeToBleed_C_K2_ShouldAbilityRespondToEvent::IsPawn' has a wrong offset!");

}

#pragma pack(pop)
