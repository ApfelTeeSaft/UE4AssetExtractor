#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Constructor_PlasmaPulse

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass GA_Constructor_PlasmaPulse.GA_Constructor_PlasmaPulse_C
// 0x0144 (0x0820 - 0x06DC)
class UGA_Constructor_PlasmaPulse_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06DC(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Overdrive_Duration;                                // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Default_Duration;                                  // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Pulse_Duration;                                    // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayEventData                     EventData;                                         // 0x06EC(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APlayerPawn_Constructor_C*              ConstructorPawn;                                   // 0x0744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_PowerPulse;                                     // 0x0748(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 Prj_PlasmaPulse;                                   // 0x0760(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PlasmaSpeed;                                       // 0x0764(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PlasmaGravity;                                     // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EventActivation;                                   // 0x076C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventComplete;                                     // 0x0774(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundBase*                             MiniPulseCue;                                      // 0x077C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 Prj_MiniPulse;                                     // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Rotation_Direction;                                // 0x0784(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MiniPulseSpeed;                                    // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MiniPulseGravity;                                  // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EC_PlasmaPulse;                                    // 0x0798(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EC_MiniPulse;                                      // 0x07A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           M_ThrowDown;                                       // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MinSpawnFloat;                                     // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MaxSpawnFloat;                                     // 0x07B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SpeedMultiplier;                                   // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DefaultMinSpawn;                                   // 0x07B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DefaultMaxSpawn;                                   // 0x07BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_IFFCoding;                                      // 0x07C0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IFFCoding;                                         // 0x07D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D9[0x3];                                      // 0x07D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_IFFCoding;                                      // 0x07DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_PlasmaOverdrive;                                // 0x07E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         PlasmaOverdriveSpeedMult;                          // 0x07F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_BiometricResonence;                             // 0x07FC(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          BiometricResonence;                                // 0x0814(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_815[0x3];                                      // 0x0815(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_BiometricResonence;                             // 0x0818(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         IFFCodePercent;                                    // 0x081C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_GA_Constructor_PlasmaPulse(int32 EntryPoint);
	void K2_ActivateAbility();
	void Triggered_6AC3F9A4491B91FDE0457DAC0E8B468B(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_6AC3F9A4491B91FDE0457DAC0E8B468B(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_6AC3F9A4491B91FDE0457DAC0E8B468B(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Created_76104D9B4F6C3F61303653918697EC35(const struct FProjectileEventData& ProjectileData);
	void Touched_76104D9B4F6C3F61303653918697EC35(const struct FProjectileEventData& ProjectileData);
	void Bounced_76104D9B4F6C3F61303653918697EC35(const struct FProjectileEventData& ProjectileData);
	void Stopped_76104D9B4F6C3F61303653918697EC35(const struct FProjectileEventData& ProjectileData);
	void Exploded_76104D9B4F6C3F61303653918697EC35(const struct FProjectileEventData& ProjectileData);
	void Destroyed_76104D9B4F6C3F61303653918697EC35(const struct FProjectileEventData& ProjectileData);
	void SetupPlasmaPulse(class UAbilitySystemComponent* Ability_System_Component, struct FVector* Spawn_Location, struct FRotator* Spawn_Rotation, struct FFortGameplayEffectContainerSpec* Plasma_Explosion, struct FFortGameplayEffectContainerSpec* Mini_Explosion);
	void SpawnMiniPulses(const struct FVector& HitLocation, const struct FFortGameplayEffectContainerSpec& EffectContainerSpec, class AActor* ParentPulse);
	void DarkHackyMath(float* SetByCallerValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Constructor_PlasmaPulse_C">();
	}
	static class UGA_Constructor_PlasmaPulse_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Constructor_PlasmaPulse_C>();
	}
};
static_assert(alignof(UGA_Constructor_PlasmaPulse_C) == 0x000004, "Wrong alignment on UGA_Constructor_PlasmaPulse_C");
static_assert(sizeof(UGA_Constructor_PlasmaPulse_C) == 0x000820, "Wrong size on UGA_Constructor_PlasmaPulse_C");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, UberGraphFrame) == 0x0006DC, "Member 'UGA_Constructor_PlasmaPulse_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, Overdrive_Duration) == 0x0006E0, "Member 'UGA_Constructor_PlasmaPulse_C::Overdrive_Duration' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, Default_Duration) == 0x0006E4, "Member 'UGA_Constructor_PlasmaPulse_C::Default_Duration' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, Pulse_Duration) == 0x0006E8, "Member 'UGA_Constructor_PlasmaPulse_C::Pulse_Duration' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, EventData) == 0x0006EC, "Member 'UGA_Constructor_PlasmaPulse_C::EventData' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, ConstructorPawn) == 0x000744, "Member 'UGA_Constructor_PlasmaPulse_C::ConstructorPawn' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, TC_PowerPulse) == 0x000748, "Member 'UGA_Constructor_PlasmaPulse_C::TC_PowerPulse' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, Prj_PlasmaPulse) == 0x000760, "Member 'UGA_Constructor_PlasmaPulse_C::Prj_PlasmaPulse' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, PlasmaSpeed) == 0x000764, "Member 'UGA_Constructor_PlasmaPulse_C::PlasmaSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, PlasmaGravity) == 0x000768, "Member 'UGA_Constructor_PlasmaPulse_C::PlasmaGravity' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, EventActivation) == 0x00076C, "Member 'UGA_Constructor_PlasmaPulse_C::EventActivation' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, EventComplete) == 0x000774, "Member 'UGA_Constructor_PlasmaPulse_C::EventComplete' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, MiniPulseCue) == 0x00077C, "Member 'UGA_Constructor_PlasmaPulse_C::MiniPulseCue' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, Prj_MiniPulse) == 0x000780, "Member 'UGA_Constructor_PlasmaPulse_C::Prj_MiniPulse' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, Rotation_Direction) == 0x000784, "Member 'UGA_Constructor_PlasmaPulse_C::Rotation_Direction' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, MiniPulseSpeed) == 0x000790, "Member 'UGA_Constructor_PlasmaPulse_C::MiniPulseSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, MiniPulseGravity) == 0x000794, "Member 'UGA_Constructor_PlasmaPulse_C::MiniPulseGravity' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, EC_PlasmaPulse) == 0x000798, "Member 'UGA_Constructor_PlasmaPulse_C::EC_PlasmaPulse' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, EC_MiniPulse) == 0x0007A0, "Member 'UGA_Constructor_PlasmaPulse_C::EC_MiniPulse' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, M_ThrowDown) == 0x0007A8, "Member 'UGA_Constructor_PlasmaPulse_C::M_ThrowDown' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, MinSpawnFloat) == 0x0007AC, "Member 'UGA_Constructor_PlasmaPulse_C::MinSpawnFloat' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, MaxSpawnFloat) == 0x0007B0, "Member 'UGA_Constructor_PlasmaPulse_C::MaxSpawnFloat' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, SpeedMultiplier) == 0x0007B4, "Member 'UGA_Constructor_PlasmaPulse_C::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, DefaultMinSpawn) == 0x0007B8, "Member 'UGA_Constructor_PlasmaPulse_C::DefaultMinSpawn' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, DefaultMaxSpawn) == 0x0007BC, "Member 'UGA_Constructor_PlasmaPulse_C::DefaultMaxSpawn' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, TC_IFFCoding) == 0x0007C0, "Member 'UGA_Constructor_PlasmaPulse_C::TC_IFFCoding' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, IFFCoding) == 0x0007D8, "Member 'UGA_Constructor_PlasmaPulse_C::IFFCoding' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, GE_IFFCoding) == 0x0007DC, "Member 'UGA_Constructor_PlasmaPulse_C::GE_IFFCoding' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, TC_PlasmaOverdrive) == 0x0007E0, "Member 'UGA_Constructor_PlasmaPulse_C::TC_PlasmaOverdrive' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, PlasmaOverdriveSpeedMult) == 0x0007F8, "Member 'UGA_Constructor_PlasmaPulse_C::PlasmaOverdriveSpeedMult' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, TC_BiometricResonence) == 0x0007FC, "Member 'UGA_Constructor_PlasmaPulse_C::TC_BiometricResonence' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, BiometricResonence) == 0x000814, "Member 'UGA_Constructor_PlasmaPulse_C::BiometricResonence' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, GE_BiometricResonence) == 0x000818, "Member 'UGA_Constructor_PlasmaPulse_C::GE_BiometricResonence' has a wrong offset!");
static_assert(offsetof(UGA_Constructor_PlasmaPulse_C, IFFCodePercent) == 0x00081C, "Member 'UGA_Constructor_PlasmaPulse_C::IFFCodePercent' has a wrong offset!");

}

#pragma pack(pop)
