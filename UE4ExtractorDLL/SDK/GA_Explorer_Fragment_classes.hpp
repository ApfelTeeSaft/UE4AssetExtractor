#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Explorer_Fragment

#include "Basic.hpp"

#include "E_ExplorerClassList_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "E_ExplorerFragmentTypes_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SlateCore_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass GA_Explorer_Fragment.GA_Explorer_Fragment_C
// 0x0624 (0x0D00 - 0x06DC)
class UGA_Explorer_Fragment_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06DC(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTagContainer                  TC_HasBuff;                                        // 0x06E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_OffensiveBuff;                                  // 0x06F8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_DefensiveBuff;                                  // 0x0710(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_SpecialityBuff;                                 // 0x0728(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           SpecialtyColor1;                                   // 0x0740(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           SpecialtyColor2;                                   // 0x0750(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Core_Index_0;                                      // 0x0760(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Core_Index_2;                                      // 0x0764(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Diamond_Index3;                                    // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Diamond_Index4;                                    // 0x076C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Diamond_Index6;                                    // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Smoke_Index7;                                      // 0x0774(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Sparkles_Index8;                                   // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           DefensiveColor2;                                   // 0x077C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           DefensiveColor1;                                   // 0x078C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           OffensiveColor1;                                   // 0x079C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           OffensiveColor2;                                   // 0x07AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_ExplorerFragmentTypes                       FragType;                                          // 0x07BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7BD[0x3];                                      // 0x07BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DummyContainer;                                    // 0x07C0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               Diamond_Index5;                                    // 0x07D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Core_Index_1;                                      // 0x07DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Sparkles_Index9;                                   // 0x07E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Execute_Offence;                                   // 0x07E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E5[0x3];                                      // 0x07E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     EventData;                                         // 0x07E8(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventActivation;                                   // 0x0840(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0848(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AFortPlayerPawn*                        ClassPawn;                                         // 0x084C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_ExplorerClassList                           ClassType;                                         // 0x0850(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_851[0x3];                                      // 0x0851(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EventOffense;                                      // 0x0854(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventDefense;                                      // 0x085C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventSpecialty;                                    // 0x0864(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           ActivatedEvent;                                    // 0x086C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventComplete;                                     // 0x0874(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFortFeedbackHandle                    Feedback_Offensive;                                // 0x087C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 AOE_OffensiveFragment;                             // 0x088C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                SpawnLocation;                                     // 0x0890(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               SpawnRotation;                                     // 0x089C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 GE_DefensiveFragment;                              // 0x08A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           GCN_ActivateFragment;                              // 0x08AC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFortFeedbackHandle                    Feedback_Defensive;                                // 0x08B4(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           Target_OffensiveFragment;                          // 0x08C4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           Target_DefensiveFragment;                          // 0x08CC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_HasFragment;                                    // 0x08D4(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 Prop_SpecialtyFragment;                            // 0x08EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FFortFeedbackHandle                    Feedback_Outlander_Specialty;                      // 0x08F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HasDiamonds;                                       // 0x0900(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_901[0x3];                                      // 0x0901(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_DiamondsInTheRough;                             // 0x0904(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_OffensiveDamage;                                // 0x091C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 GE_AntiMaterialResist;                             // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           Target_Defensive_Diamonds;                         // 0x0924(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateBrush                            OffensiveBuffIcon;                                 // 0x092C(0x0074)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateBrush                            DefensiveBuffIcon;                                 // 0x09A0(0x0074)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateBrush                            SpecialtyBuffIcon;                                 // 0x0A14(0x0074)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFortGameplayAbilityMontageInfo        SpecialtyMontage;                                  // 0x0A88(0x0044)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           M_GrenadeThrow;                                    // 0x0ACC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 OrbProjectile;                                     // 0x0AD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD4[0xC];                                      // 0x0AD4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0AE0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AFortAbilityDecoTool*                   DecoTool;                                          // 0x0B10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FAbilityToolSpawnParameters            SpawnParameters;                                   // 0x0B14(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 BearFragment;                                      // 0x0B34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_DefensiveFragmentDeco;                          // 0x0B38(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bShouldUseDecoWeapon;                              // 0x0B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B51[0x3];                                      // 0x0B51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Spawn_Direction;                                   // 0x0B54(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_PhaseShift;                                     // 0x0B60(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateBrush                            Phase_Shift_Icon;                                  // 0x0B78(0x0074)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventTriggerPhaseShift;                            // 0x0BEC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_PhaseShiftCooldown;                             // 0x0BF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DefensivePurge;                                    // 0x0BF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BF9[0x3];                                      // 0x0BF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_DefensivePurge;                                 // 0x0BFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_ImpossibilityMatrix;                            // 0x0C00(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_ImpossibleOffense;                              // 0x0C18(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_EffectCounter;                                  // 0x0C30(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_ActivatedFragment;                              // 0x0C48(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_EffectCount;                                    // 0x0C60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ImpossibilityMatrix;                               // 0x0C64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C65[0x3];                                      // 0x0C65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_StoredFragment;                                 // 0x0C68(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_ImpossibleDefense;                              // 0x0C80(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_ImpossibleSpecialty;                            // 0x0C98(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  ErrorNotEnoughStamina;                             // 0x0CB0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ShieldPercent;                                     // 0x0CC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 NewVar_0;                                          // 0x0CCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DiamondsShield;                                    // 0x0CD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_Bearricade;                                     // 0x0CD4(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_DiamondsBear;                                   // 0x0CEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 GE_StatBuff;                                       // 0x0CF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_GA_Explorer_Fragment(int32 EntryPoint);
	void K2_ActivateAbility();
	void Created_56D0E8B74E6D3560ABB4BF82A5A31928(const struct FProjectileEventData& ProjectileData);
	void Touched_56D0E8B74E6D3560ABB4BF82A5A31928(const struct FProjectileEventData& ProjectileData);
	void Bounced_56D0E8B74E6D3560ABB4BF82A5A31928(const struct FProjectileEventData& ProjectileData);
	void Stopped_56D0E8B74E6D3560ABB4BF82A5A31928(const struct FProjectileEventData& ProjectileData);
	void Exploded_56D0E8B74E6D3560ABB4BF82A5A31928(const struct FProjectileEventData& ProjectileData);
	void Destroyed_56D0E8B74E6D3560ABB4BF82A5A31928(const struct FProjectileEventData& ProjectileData);
	void OnComplete_AEBC8CA9454DB4A76A8336BD4EE30254();
	void OnInterrupted_AEBC8CA9454DB4A76A8336BD4EE30254();
	void OnCancelled_AEBC8CA9454DB4A76A8336BD4EE30254();
	void Targeted_D9A99A8E430AA4101B325597D2C21C37(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_D9A99A8E430AA4101B325597D2C21C37(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Targeted_0DCC89D649F1683B5F78AC9AEEA4CBBB(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_0DCC89D649F1683B5F78AC9AEEA4CBBB(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Targeted_AB9C57344D21682887FAA6B895FA1C6D(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_AB9C57344D21682887FAA6B895FA1C6D(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void OffensiveFragment(E_ExplorerClassList ClassType_0, const struct FGameplayAbilityTargetDataHandle& TargetData);
	void ActivateFragment(E_ExplorerFragmentTypes* FragmentType, E_ExplorerClassList* ClassType_0, struct FGameplayTag* ActivateEvent, bool* EndAbility);
	void ClassSelection(class AFortPlayerPawn* PlayerPawn_0, class AFortPlayerPawn** ClassPawn_0, E_ExplorerClassList* SelectedClass, bool* EndAbility);
	void DefensiveFragment(E_ExplorerClassList ClassType_0, const struct FGameplayAbilityTargetDataHandle& Target_Data, const struct FGameplayTag& Application_Tag);
	void SpecialtyFragment(E_ExplorerClassList ClassType_0);
	void K2_GetIconOverride();
	bool SetupIconOverride();
	void DarkHackyMath(class AFortPlayerPawn* HitTarget, float* SetByCallerValue);
	void ApplyStatScaling(class AB_BGA_Explorer_OutlanderFragmentBear_C* BearReference);

	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, struct FGameplayTagContainer* RelevantTags) const;
	bool K2_ShouldUseDecoTool(const struct FGameplayAbilityActorInfo& ActorInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Explorer_Fragment_C">();
	}
	static class UGA_Explorer_Fragment_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Explorer_Fragment_C>();
	}
};
static_assert(alignof(UGA_Explorer_Fragment_C) == 0x000010, "Wrong alignment on UGA_Explorer_Fragment_C");
static_assert(sizeof(UGA_Explorer_Fragment_C) == 0x000D00, "Wrong size on UGA_Explorer_Fragment_C");
static_assert(offsetof(UGA_Explorer_Fragment_C, UberGraphFrame) == 0x0006DC, "Member 'UGA_Explorer_Fragment_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_HasBuff) == 0x0006E0, "Member 'UGA_Explorer_Fragment_C::TC_HasBuff' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_OffensiveBuff) == 0x0006F8, "Member 'UGA_Explorer_Fragment_C::TC_OffensiveBuff' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_DefensiveBuff) == 0x000710, "Member 'UGA_Explorer_Fragment_C::TC_DefensiveBuff' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_SpecialityBuff) == 0x000728, "Member 'UGA_Explorer_Fragment_C::TC_SpecialityBuff' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, SpecialtyColor1) == 0x000740, "Member 'UGA_Explorer_Fragment_C::SpecialtyColor1' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, SpecialtyColor2) == 0x000750, "Member 'UGA_Explorer_Fragment_C::SpecialtyColor2' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Core_Index_0) == 0x000760, "Member 'UGA_Explorer_Fragment_C::Core_Index_0' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Core_Index_2) == 0x000764, "Member 'UGA_Explorer_Fragment_C::Core_Index_2' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Diamond_Index3) == 0x000768, "Member 'UGA_Explorer_Fragment_C::Diamond_Index3' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Diamond_Index4) == 0x00076C, "Member 'UGA_Explorer_Fragment_C::Diamond_Index4' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Diamond_Index6) == 0x000770, "Member 'UGA_Explorer_Fragment_C::Diamond_Index6' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Smoke_Index7) == 0x000774, "Member 'UGA_Explorer_Fragment_C::Smoke_Index7' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Sparkles_Index8) == 0x000778, "Member 'UGA_Explorer_Fragment_C::Sparkles_Index8' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, DefensiveColor2) == 0x00077C, "Member 'UGA_Explorer_Fragment_C::DefensiveColor2' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, DefensiveColor1) == 0x00078C, "Member 'UGA_Explorer_Fragment_C::DefensiveColor1' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, OffensiveColor1) == 0x00079C, "Member 'UGA_Explorer_Fragment_C::OffensiveColor1' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, OffensiveColor2) == 0x0007AC, "Member 'UGA_Explorer_Fragment_C::OffensiveColor2' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, FragType) == 0x0007BC, "Member 'UGA_Explorer_Fragment_C::FragType' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, DummyContainer) == 0x0007C0, "Member 'UGA_Explorer_Fragment_C::DummyContainer' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Diamond_Index5) == 0x0007D8, "Member 'UGA_Explorer_Fragment_C::Diamond_Index5' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Core_Index_1) == 0x0007DC, "Member 'UGA_Explorer_Fragment_C::Core_Index_1' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Sparkles_Index9) == 0x0007E0, "Member 'UGA_Explorer_Fragment_C::Sparkles_Index9' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Execute_Offence) == 0x0007E4, "Member 'UGA_Explorer_Fragment_C::Execute_Offence' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, EventData) == 0x0007E8, "Member 'UGA_Explorer_Fragment_C::EventData' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, EventActivation) == 0x000840, "Member 'UGA_Explorer_Fragment_C::EventActivation' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, PlayerPawn) == 0x000848, "Member 'UGA_Explorer_Fragment_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, ClassPawn) == 0x00084C, "Member 'UGA_Explorer_Fragment_C::ClassPawn' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, ClassType) == 0x000850, "Member 'UGA_Explorer_Fragment_C::ClassType' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, EventOffense) == 0x000854, "Member 'UGA_Explorer_Fragment_C::EventOffense' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, EventDefense) == 0x00085C, "Member 'UGA_Explorer_Fragment_C::EventDefense' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, EventSpecialty) == 0x000864, "Member 'UGA_Explorer_Fragment_C::EventSpecialty' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, ActivatedEvent) == 0x00086C, "Member 'UGA_Explorer_Fragment_C::ActivatedEvent' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, EventComplete) == 0x000874, "Member 'UGA_Explorer_Fragment_C::EventComplete' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Feedback_Offensive) == 0x00087C, "Member 'UGA_Explorer_Fragment_C::Feedback_Offensive' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, AOE_OffensiveFragment) == 0x00088C, "Member 'UGA_Explorer_Fragment_C::AOE_OffensiveFragment' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, SpawnLocation) == 0x000890, "Member 'UGA_Explorer_Fragment_C::SpawnLocation' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, SpawnRotation) == 0x00089C, "Member 'UGA_Explorer_Fragment_C::SpawnRotation' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, GE_DefensiveFragment) == 0x0008A8, "Member 'UGA_Explorer_Fragment_C::GE_DefensiveFragment' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, GCN_ActivateFragment) == 0x0008AC, "Member 'UGA_Explorer_Fragment_C::GCN_ActivateFragment' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Feedback_Defensive) == 0x0008B4, "Member 'UGA_Explorer_Fragment_C::Feedback_Defensive' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Target_OffensiveFragment) == 0x0008C4, "Member 'UGA_Explorer_Fragment_C::Target_OffensiveFragment' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Target_DefensiveFragment) == 0x0008CC, "Member 'UGA_Explorer_Fragment_C::Target_DefensiveFragment' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_HasFragment) == 0x0008D4, "Member 'UGA_Explorer_Fragment_C::TC_HasFragment' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Prop_SpecialtyFragment) == 0x0008EC, "Member 'UGA_Explorer_Fragment_C::Prop_SpecialtyFragment' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Feedback_Outlander_Specialty) == 0x0008F0, "Member 'UGA_Explorer_Fragment_C::Feedback_Outlander_Specialty' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, HasDiamonds) == 0x000900, "Member 'UGA_Explorer_Fragment_C::HasDiamonds' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_DiamondsInTheRough) == 0x000904, "Member 'UGA_Explorer_Fragment_C::TC_DiamondsInTheRough' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, GE_OffensiveDamage) == 0x00091C, "Member 'UGA_Explorer_Fragment_C::GE_OffensiveDamage' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, GE_AntiMaterialResist) == 0x000920, "Member 'UGA_Explorer_Fragment_C::GE_AntiMaterialResist' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Target_Defensive_Diamonds) == 0x000924, "Member 'UGA_Explorer_Fragment_C::Target_Defensive_Diamonds' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, OffensiveBuffIcon) == 0x00092C, "Member 'UGA_Explorer_Fragment_C::OffensiveBuffIcon' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, DefensiveBuffIcon) == 0x0009A0, "Member 'UGA_Explorer_Fragment_C::DefensiveBuffIcon' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, SpecialtyBuffIcon) == 0x000A14, "Member 'UGA_Explorer_Fragment_C::SpecialtyBuffIcon' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, SpecialtyMontage) == 0x000A88, "Member 'UGA_Explorer_Fragment_C::SpecialtyMontage' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, M_GrenadeThrow) == 0x000ACC, "Member 'UGA_Explorer_Fragment_C::M_GrenadeThrow' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, OrbProjectile) == 0x000AD0, "Member 'UGA_Explorer_Fragment_C::OrbProjectile' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, SpawnTransform) == 0x000AE0, "Member 'UGA_Explorer_Fragment_C::SpawnTransform' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, DecoTool) == 0x000B10, "Member 'UGA_Explorer_Fragment_C::DecoTool' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, SpawnParameters) == 0x000B14, "Member 'UGA_Explorer_Fragment_C::SpawnParameters' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, BearFragment) == 0x000B34, "Member 'UGA_Explorer_Fragment_C::BearFragment' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_DefensiveFragmentDeco) == 0x000B38, "Member 'UGA_Explorer_Fragment_C::TC_DefensiveFragmentDeco' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, bShouldUseDecoWeapon) == 0x000B50, "Member 'UGA_Explorer_Fragment_C::bShouldUseDecoWeapon' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Spawn_Direction) == 0x000B54, "Member 'UGA_Explorer_Fragment_C::Spawn_Direction' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_PhaseShift) == 0x000B60, "Member 'UGA_Explorer_Fragment_C::TC_PhaseShift' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, Phase_Shift_Icon) == 0x000B78, "Member 'UGA_Explorer_Fragment_C::Phase_Shift_Icon' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, EventTriggerPhaseShift) == 0x000BEC, "Member 'UGA_Explorer_Fragment_C::EventTriggerPhaseShift' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, GE_PhaseShiftCooldown) == 0x000BF4, "Member 'UGA_Explorer_Fragment_C::GE_PhaseShiftCooldown' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, DefensivePurge) == 0x000BF8, "Member 'UGA_Explorer_Fragment_C::DefensivePurge' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, GE_DefensivePurge) == 0x000BFC, "Member 'UGA_Explorer_Fragment_C::GE_DefensivePurge' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_ImpossibilityMatrix) == 0x000C00, "Member 'UGA_Explorer_Fragment_C::TC_ImpossibilityMatrix' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_ImpossibleOffense) == 0x000C18, "Member 'UGA_Explorer_Fragment_C::TC_ImpossibleOffense' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_EffectCounter) == 0x000C30, "Member 'UGA_Explorer_Fragment_C::TC_EffectCounter' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_ActivatedFragment) == 0x000C48, "Member 'UGA_Explorer_Fragment_C::TC_ActivatedFragment' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, GE_EffectCount) == 0x000C60, "Member 'UGA_Explorer_Fragment_C::GE_EffectCount' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, ImpossibilityMatrix) == 0x000C64, "Member 'UGA_Explorer_Fragment_C::ImpossibilityMatrix' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_StoredFragment) == 0x000C68, "Member 'UGA_Explorer_Fragment_C::TC_StoredFragment' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_ImpossibleDefense) == 0x000C80, "Member 'UGA_Explorer_Fragment_C::TC_ImpossibleDefense' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_ImpossibleSpecialty) == 0x000C98, "Member 'UGA_Explorer_Fragment_C::TC_ImpossibleSpecialty' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, ErrorNotEnoughStamina) == 0x000CB0, "Member 'UGA_Explorer_Fragment_C::ErrorNotEnoughStamina' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, ShieldPercent) == 0x000CC8, "Member 'UGA_Explorer_Fragment_C::ShieldPercent' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, NewVar_0) == 0x000CCC, "Member 'UGA_Explorer_Fragment_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, DiamondsShield) == 0x000CD0, "Member 'UGA_Explorer_Fragment_C::DiamondsShield' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, TC_Bearricade) == 0x000CD4, "Member 'UGA_Explorer_Fragment_C::TC_Bearricade' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, GE_DiamondsBear) == 0x000CEC, "Member 'UGA_Explorer_Fragment_C::GE_DiamondsBear' has a wrong offset!");
static_assert(offsetof(UGA_Explorer_Fragment_C, GE_StatBuff) == 0x000CF0, "Member 'UGA_Explorer_Fragment_C::GE_StatBuff' has a wrong offset!");

}

#pragma pack(pop)
