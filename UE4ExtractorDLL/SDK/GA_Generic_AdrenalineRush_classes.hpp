#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Generic_AdrenalineRush

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "E_AdrenalineRushAOE_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "E_AdrenalineRushDuration_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass GA_Generic_AdrenalineRush.GA_Generic_AdrenalineRush_C
// 0x0134 (0x0810 - 0x06DC)
class UGA_Generic_AdrenalineRush_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06DC(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayEventData                     EventData;                                         // 0x06E0(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPlayerPawn*                        Fort_Player_Pawn;                                  // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EventActivate;                                     // 0x073C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFortGameplayAbilityMontageInfo        Montage_Info;                                      // 0x0744(0x0044)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 AdrenalineRushInsta;                               // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         HealthPercentInstant;                              // 0x078C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class AActor*>                         HitActors;                                         // 0x0790(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsAOE;                                             // 0x079C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHOT;                                             // 0x079D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPurge;                                           // 0x079E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_AdrenalineRushAOE                           AOEValue;                                          // 0x079F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_AdrenalineRushDuration                      DurationValue;                                     // 0x07A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A1[0x3];                                      // 0x07A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TargetRule;                                        // 0x07A4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         HOTDuration;                                       // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           Target_AOE1;                                       // 0x07B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           Target_AOE2;                                       // 0x07B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           Target_AOE3;                                       // 0x07C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayAttribute                     HospitalSubBuilding3;                              // 0x07C8(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         BasicHOTDuration;                                  // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Upgrade1HOTDuration;                               // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Upgrade2HOTDuration;                               // 0x07D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         InstaHealthUpgrade1;                               // 0x07D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         InstaHealthUpgrade2;                               // 0x07DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         InstaHealthUpgrade3;                               // 0x07E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 AdrenalineRushHOT;                                 // 0x07E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_GameplayNegative;                               // 0x07E8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Upgrade_Level;                                     // 0x0800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 AdrenalineRushProjectile;                          // 0x0804(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         InstantHealAmount;                                 // 0x0808(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         HOTHealAmount;                                     // 0x080C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_GA_Generic_AdrenalineRush(int32 EntryPoint);
	void K2_ActivateAbility();
	void Targeted_96CD2D2546A5DCD7B7C14BBA26232864(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_96CD2D2546A5DCD7B7C14BBA26232864(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void SetupVariable_Upgrades();
	void ApplyGadgetEffects(const struct FGameplayAbilityTargetDataHandle& TargetData);
	void SpawnVisuals();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Generic_AdrenalineRush_C">();
	}
	static class UGA_Generic_AdrenalineRush_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Generic_AdrenalineRush_C>();
	}
};
static_assert(alignof(UGA_Generic_AdrenalineRush_C) == 0x000004, "Wrong alignment on UGA_Generic_AdrenalineRush_C");
static_assert(sizeof(UGA_Generic_AdrenalineRush_C) == 0x000810, "Wrong size on UGA_Generic_AdrenalineRush_C");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, UberGraphFrame) == 0x0006DC, "Member 'UGA_Generic_AdrenalineRush_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, EventData) == 0x0006E0, "Member 'UGA_Generic_AdrenalineRush_C::EventData' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Fort_Player_Pawn) == 0x000738, "Member 'UGA_Generic_AdrenalineRush_C::Fort_Player_Pawn' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, EventActivate) == 0x00073C, "Member 'UGA_Generic_AdrenalineRush_C::EventActivate' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Montage_Info) == 0x000744, "Member 'UGA_Generic_AdrenalineRush_C::Montage_Info' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, AdrenalineRushInsta) == 0x000788, "Member 'UGA_Generic_AdrenalineRush_C::AdrenalineRushInsta' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, HealthPercentInstant) == 0x00078C, "Member 'UGA_Generic_AdrenalineRush_C::HealthPercentInstant' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, HitActors) == 0x000790, "Member 'UGA_Generic_AdrenalineRush_C::HitActors' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, IsAOE) == 0x00079C, "Member 'UGA_Generic_AdrenalineRush_C::IsAOE' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, IsHOT) == 0x00079D, "Member 'UGA_Generic_AdrenalineRush_C::IsHOT' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, IsPurge) == 0x00079E, "Member 'UGA_Generic_AdrenalineRush_C::IsPurge' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, AOEValue) == 0x00079F, "Member 'UGA_Generic_AdrenalineRush_C::AOEValue' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, DurationValue) == 0x0007A0, "Member 'UGA_Generic_AdrenalineRush_C::DurationValue' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, TargetRule) == 0x0007A4, "Member 'UGA_Generic_AdrenalineRush_C::TargetRule' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, HOTDuration) == 0x0007AC, "Member 'UGA_Generic_AdrenalineRush_C::HOTDuration' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Target_AOE1) == 0x0007B0, "Member 'UGA_Generic_AdrenalineRush_C::Target_AOE1' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Target_AOE2) == 0x0007B8, "Member 'UGA_Generic_AdrenalineRush_C::Target_AOE2' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Target_AOE3) == 0x0007C0, "Member 'UGA_Generic_AdrenalineRush_C::Target_AOE3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, HospitalSubBuilding3) == 0x0007C8, "Member 'UGA_Generic_AdrenalineRush_C::HospitalSubBuilding3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, BasicHOTDuration) == 0x0007CC, "Member 'UGA_Generic_AdrenalineRush_C::BasicHOTDuration' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Upgrade1HOTDuration) == 0x0007D0, "Member 'UGA_Generic_AdrenalineRush_C::Upgrade1HOTDuration' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Upgrade2HOTDuration) == 0x0007D4, "Member 'UGA_Generic_AdrenalineRush_C::Upgrade2HOTDuration' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, InstaHealthUpgrade1) == 0x0007D8, "Member 'UGA_Generic_AdrenalineRush_C::InstaHealthUpgrade1' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, InstaHealthUpgrade2) == 0x0007DC, "Member 'UGA_Generic_AdrenalineRush_C::InstaHealthUpgrade2' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, InstaHealthUpgrade3) == 0x0007E0, "Member 'UGA_Generic_AdrenalineRush_C::InstaHealthUpgrade3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, AdrenalineRushHOT) == 0x0007E4, "Member 'UGA_Generic_AdrenalineRush_C::AdrenalineRushHOT' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, TC_GameplayNegative) == 0x0007E8, "Member 'UGA_Generic_AdrenalineRush_C::TC_GameplayNegative' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, Upgrade_Level) == 0x000800, "Member 'UGA_Generic_AdrenalineRush_C::Upgrade_Level' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, AdrenalineRushProjectile) == 0x000804, "Member 'UGA_Generic_AdrenalineRush_C::AdrenalineRushProjectile' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, InstantHealAmount) == 0x000808, "Member 'UGA_Generic_AdrenalineRush_C::InstantHealAmount' has a wrong offset!");
static_assert(offsetof(UGA_Generic_AdrenalineRush_C, HOTHealAmount) == 0x00080C, "Member 'UGA_Generic_AdrenalineRush_C::HOTHealAmount' has a wrong offset!");

}

#pragma pack(pop)
