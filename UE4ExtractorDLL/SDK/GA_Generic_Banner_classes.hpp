#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Generic_Banner

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass GA_Generic_Banner.GA_Generic_Banner_C
// 0x017C (0x0858 - 0x06DC)
class UGA_Generic_Banner_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06DC(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayEventData                     EventData;                                         // 0x06E0(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPlayerPawn*                        FortPlayerPawn;                                    // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EventActivation;                                   // 0x073C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventComplete;                                     // 0x0744(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                BannerLocation;                                    // 0x074C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           Event_BuildingSelect;                              // 0x0758(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFortGameplayAbilityMontageInfo        Montage;                                           // 0x0760(0x0044)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         RepairRadius;                                      // 0x07A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RepairWaveIncrement;                               // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         RepairWaveCounter;                                 // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class ABuildingActor*>                 BuildingsToRepair;                                 // 0x07B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	struct FGameplayAttribute                     EngineeringSchoolSubBuilding3;                     // 0x07BC(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           AOETarget2;                                        // 0x07C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           AOETarget3;                                        // 0x07C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AActor*>                         HitActors;                                         // 0x07D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         RepairRadius_Lv1;                                  // 0x07DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RepairRadius_Lv2;                                  // 0x07E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RepairRadius_Lv3;                                  // 0x07E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RepairRadius_Lv4;                                  // 0x07E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RepairRadius_Lv5;                                  // 0x07EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Shockwave;                                         // 0x07F0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Shockwave_Lv1;                                     // 0x07F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Shockwave_Lv2;                                     // 0x07F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Shockwave_Lv3;                                     // 0x07F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Shockwave_Lv4;                                     // 0x07F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Shockwave_Lv5;                                     // 0x07F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F6[0x2];                                      // 0x07F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BuildingUpgradeTier;                               // 0x07F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         BuildingUpgradeTier_Lv1;                           // 0x07FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         BuildingUpgradeTier_Lv2;                           // 0x0800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         BuildingUpgradeTier_Lv3;                           // 0x0804(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         BuildingUpgradeTier_Lv4;                           // 0x0808(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         BuildingUpgradeTier_Lv5;                           // 0x080C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RepairWaveDelay;                                   // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RepairWaveDelay_Lv1;                               // 0x0814(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RepairWaveDelay_Lv2;                               // 0x0818(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RepairWaveDelay_Lv3;                               // 0x081C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RepairWaveDelay_Lv4;                               // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RepairWaveDelay_Lv5;                               // 0x0824(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           AOE_ShockWave;                                     // 0x0828(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           AOE_ShockWave_Lv1;                                 // 0x0830(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           AOE_ShockWave_Lv2;                                 // 0x0838(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           AOE_ShockWave_Lv3;                                 // 0x0840(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           AOE_ShockWave_Lv4;                                 // 0x0848(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           AOE_ShockWave_Lv5;                                 // 0x0850(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_GA_Generic_Banner(int32 EntryPoint);
	void DoBuildingRepair();
	void K2_ActivateAbility();
	void Targeted_3D9DDD20491DEED5A55268A060EC3B66(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_3D9DDD20491DEED5A55268A060EC3B66(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Triggered_B223ACB541DAF6B70FE5BCB12C3C66E1(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_B223ACB541DAF6B70FE5BCB12C3C66E1(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_B223ACB541DAF6B70FE5BCB12C3C66E1(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void BuildingRepairWave(float RepairWaveRadius);
	void SetupLevelVars();
	void Initialize();
	void SetupLevelVarsInternal(class UAbilitySystemComponent* AbilitySystemComponent);

	struct FTransform GetCustomAbilitySourceTransform() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Generic_Banner_C">();
	}
	static class UGA_Generic_Banner_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Generic_Banner_C>();
	}
};
static_assert(alignof(UGA_Generic_Banner_C) == 0x000004, "Wrong alignment on UGA_Generic_Banner_C");
static_assert(sizeof(UGA_Generic_Banner_C) == 0x000858, "Wrong size on UGA_Generic_Banner_C");
static_assert(offsetof(UGA_Generic_Banner_C, UberGraphFrame) == 0x0006DC, "Member 'UGA_Generic_Banner_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, EventData) == 0x0006E0, "Member 'UGA_Generic_Banner_C::EventData' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, FortPlayerPawn) == 0x000738, "Member 'UGA_Generic_Banner_C::FortPlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, EventActivation) == 0x00073C, "Member 'UGA_Generic_Banner_C::EventActivation' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, EventComplete) == 0x000744, "Member 'UGA_Generic_Banner_C::EventComplete' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, BannerLocation) == 0x00074C, "Member 'UGA_Generic_Banner_C::BannerLocation' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, Event_BuildingSelect) == 0x000758, "Member 'UGA_Generic_Banner_C::Event_BuildingSelect' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, Montage) == 0x000760, "Member 'UGA_Generic_Banner_C::Montage' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, RepairRadius) == 0x0007A4, "Member 'UGA_Generic_Banner_C::RepairRadius' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, RepairWaveIncrement) == 0x0007A8, "Member 'UGA_Generic_Banner_C::RepairWaveIncrement' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, RepairWaveCounter) == 0x0007AC, "Member 'UGA_Generic_Banner_C::RepairWaveCounter' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, BuildingsToRepair) == 0x0007B0, "Member 'UGA_Generic_Banner_C::BuildingsToRepair' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, EngineeringSchoolSubBuilding3) == 0x0007BC, "Member 'UGA_Generic_Banner_C::EngineeringSchoolSubBuilding3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, AOETarget2) == 0x0007C0, "Member 'UGA_Generic_Banner_C::AOETarget2' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, AOETarget3) == 0x0007C8, "Member 'UGA_Generic_Banner_C::AOETarget3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, HitActors) == 0x0007D0, "Member 'UGA_Generic_Banner_C::HitActors' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, RepairRadius_Lv1) == 0x0007DC, "Member 'UGA_Generic_Banner_C::RepairRadius_Lv1' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, RepairRadius_Lv2) == 0x0007E0, "Member 'UGA_Generic_Banner_C::RepairRadius_Lv2' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, RepairRadius_Lv3) == 0x0007E4, "Member 'UGA_Generic_Banner_C::RepairRadius_Lv3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, RepairRadius_Lv4) == 0x0007E8, "Member 'UGA_Generic_Banner_C::RepairRadius_Lv4' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, RepairRadius_Lv5) == 0x0007EC, "Member 'UGA_Generic_Banner_C::RepairRadius_Lv5' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, Shockwave) == 0x0007F0, "Member 'UGA_Generic_Banner_C::Shockwave' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, Shockwave_Lv1) == 0x0007F1, "Member 'UGA_Generic_Banner_C::Shockwave_Lv1' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, Shockwave_Lv2) == 0x0007F2, "Member 'UGA_Generic_Banner_C::Shockwave_Lv2' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, Shockwave_Lv3) == 0x0007F3, "Member 'UGA_Generic_Banner_C::Shockwave_Lv3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, Shockwave_Lv4) == 0x0007F4, "Member 'UGA_Generic_Banner_C::Shockwave_Lv4' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, Shockwave_Lv5) == 0x0007F5, "Member 'UGA_Generic_Banner_C::Shockwave_Lv5' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, BuildingUpgradeTier) == 0x0007F8, "Member 'UGA_Generic_Banner_C::BuildingUpgradeTier' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, BuildingUpgradeTier_Lv1) == 0x0007FC, "Member 'UGA_Generic_Banner_C::BuildingUpgradeTier_Lv1' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, BuildingUpgradeTier_Lv2) == 0x000800, "Member 'UGA_Generic_Banner_C::BuildingUpgradeTier_Lv2' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, BuildingUpgradeTier_Lv3) == 0x000804, "Member 'UGA_Generic_Banner_C::BuildingUpgradeTier_Lv3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, BuildingUpgradeTier_Lv4) == 0x000808, "Member 'UGA_Generic_Banner_C::BuildingUpgradeTier_Lv4' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, BuildingUpgradeTier_Lv5) == 0x00080C, "Member 'UGA_Generic_Banner_C::BuildingUpgradeTier_Lv5' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, RepairWaveDelay) == 0x000810, "Member 'UGA_Generic_Banner_C::RepairWaveDelay' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, RepairWaveDelay_Lv1) == 0x000814, "Member 'UGA_Generic_Banner_C::RepairWaveDelay_Lv1' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, RepairWaveDelay_Lv2) == 0x000818, "Member 'UGA_Generic_Banner_C::RepairWaveDelay_Lv2' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, RepairWaveDelay_Lv3) == 0x00081C, "Member 'UGA_Generic_Banner_C::RepairWaveDelay_Lv3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, RepairWaveDelay_Lv4) == 0x000820, "Member 'UGA_Generic_Banner_C::RepairWaveDelay_Lv4' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, RepairWaveDelay_Lv5) == 0x000824, "Member 'UGA_Generic_Banner_C::RepairWaveDelay_Lv5' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, AOE_ShockWave) == 0x000828, "Member 'UGA_Generic_Banner_C::AOE_ShockWave' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, AOE_ShockWave_Lv1) == 0x000830, "Member 'UGA_Generic_Banner_C::AOE_ShockWave_Lv1' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, AOE_ShockWave_Lv2) == 0x000838, "Member 'UGA_Generic_Banner_C::AOE_ShockWave_Lv2' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, AOE_ShockWave_Lv3) == 0x000840, "Member 'UGA_Generic_Banner_C::AOE_ShockWave_Lv3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, AOE_ShockWave_Lv4) == 0x000848, "Member 'UGA_Generic_Banner_C::AOE_ShockWave_Lv4' has a wrong offset!");
static_assert(offsetof(UGA_Generic_Banner_C, AOE_ShockWave_Lv5) == 0x000850, "Member 'UGA_Generic_Banner_C::AOE_ShockWave_Lv5' has a wrong offset!");

}

#pragma pack(pop)
