#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Generic_BotTurret

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GAT_GenericActiveAbility_classes.hpp"
#include "GameplayAbilities_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass GA_Generic_BotTurret.GA_Generic_BotTurret_C
// 0x00EC (0x082C - 0x0740)
class UGA_Generic_BotTurret_C final : public UGAT_GenericActiveAbility_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_Generic_BotTurret_C;             // 0x0740(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTag                           EventActivate;                                     // 0x0744(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventDeactivate;                                   // 0x074C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFortGameplayAbilityMontageInfo        Montage_Info;                                      // 0x0754(0x0044)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 BGA_BotTurret;                                     // 0x0798(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 EnergyDamage;                                      // 0x079C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TurretDuration;                                    // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                SpawnTurretLoc;                                    // 0x07A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               SpawnTurretRot;                                    // 0x07B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AActor*                                 ActiveTurret;                                      // 0x07BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldBounce;                                      // 0x07C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C1[0x3];                                      // 0x07C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     DroneSubBuilding3;                                 // 0x07C4(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABuildingGameplayActor*                 Bot_Reference;                                     // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Turret_Duration_Lv1;                               // 0x07CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Turret_Duration_Lv2;                               // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Turret_Duration_Lv3;                               // 0x07D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Turret_Duration_Lv4;                               // 0x07D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Turret_Duration_Lv5;                               // 0x07DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FireRate;                                          // 0x07E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Fire_Rate_Lv1;                                     // 0x07E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Fire_Rate_Lv2;                                     // 0x07E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Fire_Rate_Lv3;                                     // 0x07EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Fire_Rate_Lv4;                                     // 0x07F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Fire_Rate_Lv5;                                     // 0x07F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Range;                                             // 0x07F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Range_Lv1;                                         // 0x07FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Range_Lv2;                                         // 0x0800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Range_Lv3;                                         // 0x0804(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Range_Lv4;                                         // 0x0808(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Range_Lv5;                                         // 0x080C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         WarmUpDelay;                                       // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         WarmUpDelay_Lv1;                                   // 0x0814(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         WarmUpDelay_Lv2;                                   // 0x0818(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         WarmUpDelay_Lv3;                                   // 0x081C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         WarmUpDelay_Lv4;                                   // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         WarmUpDelay_Lv5;                                   // 0x0824(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                 GE_BGABuff;                                        // 0x0828(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_GA_Generic_BotTurret(int32 EntryPoint);
	void K2_ActivateAbility();
	void Triggered_3A74E5BE4F4D85991B8887A89A2350CB(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_3A74E5BE4F4D85991B8887A89A2350CB(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_3A74E5BE4F4D85991B8887A89A2350CB(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void SetUpBot(class AFortPlayerPawn** PlayerPawn, struct FVector* SpawnLocation, struct FRotator* SpawnRotation, class UClass** BGATurret);
	void SetLevelUpgrades();
	void ApplyStatScaling(class AB_BGA_BotTurret_C* BotReference);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Generic_BotTurret_C">();
	}
	static class UGA_Generic_BotTurret_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Generic_BotTurret_C>();
	}
};
static_assert(alignof(UGA_Generic_BotTurret_C) == 0x000004, "Wrong alignment on UGA_Generic_BotTurret_C");
static_assert(sizeof(UGA_Generic_BotTurret_C) == 0x00082C, "Wrong size on UGA_Generic_BotTurret_C");
static_assert(offsetof(UGA_Generic_BotTurret_C, UberGraphFrame_GA_Generic_BotTurret_C) == 0x000740, "Member 'UGA_Generic_BotTurret_C::UberGraphFrame_GA_Generic_BotTurret_C' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, EventActivate) == 0x000744, "Member 'UGA_Generic_BotTurret_C::EventActivate' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, EventDeactivate) == 0x00074C, "Member 'UGA_Generic_BotTurret_C::EventDeactivate' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Montage_Info) == 0x000754, "Member 'UGA_Generic_BotTurret_C::Montage_Info' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, BGA_BotTurret) == 0x000798, "Member 'UGA_Generic_BotTurret_C::BGA_BotTurret' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, EnergyDamage) == 0x00079C, "Member 'UGA_Generic_BotTurret_C::EnergyDamage' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, TurretDuration) == 0x0007A0, "Member 'UGA_Generic_BotTurret_C::TurretDuration' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, SpawnTurretLoc) == 0x0007A4, "Member 'UGA_Generic_BotTurret_C::SpawnTurretLoc' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, SpawnTurretRot) == 0x0007B0, "Member 'UGA_Generic_BotTurret_C::SpawnTurretRot' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, ActiveTurret) == 0x0007BC, "Member 'UGA_Generic_BotTurret_C::ActiveTurret' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, ShouldBounce) == 0x0007C0, "Member 'UGA_Generic_BotTurret_C::ShouldBounce' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, DroneSubBuilding3) == 0x0007C4, "Member 'UGA_Generic_BotTurret_C::DroneSubBuilding3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Bot_Reference) == 0x0007C8, "Member 'UGA_Generic_BotTurret_C::Bot_Reference' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Turret_Duration_Lv1) == 0x0007CC, "Member 'UGA_Generic_BotTurret_C::Turret_Duration_Lv1' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Turret_Duration_Lv2) == 0x0007D0, "Member 'UGA_Generic_BotTurret_C::Turret_Duration_Lv2' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Turret_Duration_Lv3) == 0x0007D4, "Member 'UGA_Generic_BotTurret_C::Turret_Duration_Lv3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Turret_Duration_Lv4) == 0x0007D8, "Member 'UGA_Generic_BotTurret_C::Turret_Duration_Lv4' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Turret_Duration_Lv5) == 0x0007DC, "Member 'UGA_Generic_BotTurret_C::Turret_Duration_Lv5' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, FireRate) == 0x0007E0, "Member 'UGA_Generic_BotTurret_C::FireRate' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Fire_Rate_Lv1) == 0x0007E4, "Member 'UGA_Generic_BotTurret_C::Fire_Rate_Lv1' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Fire_Rate_Lv2) == 0x0007E8, "Member 'UGA_Generic_BotTurret_C::Fire_Rate_Lv2' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Fire_Rate_Lv3) == 0x0007EC, "Member 'UGA_Generic_BotTurret_C::Fire_Rate_Lv3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Fire_Rate_Lv4) == 0x0007F0, "Member 'UGA_Generic_BotTurret_C::Fire_Rate_Lv4' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Fire_Rate_Lv5) == 0x0007F4, "Member 'UGA_Generic_BotTurret_C::Fire_Rate_Lv5' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Range) == 0x0007F8, "Member 'UGA_Generic_BotTurret_C::Range' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Range_Lv1) == 0x0007FC, "Member 'UGA_Generic_BotTurret_C::Range_Lv1' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Range_Lv2) == 0x000800, "Member 'UGA_Generic_BotTurret_C::Range_Lv2' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Range_Lv3) == 0x000804, "Member 'UGA_Generic_BotTurret_C::Range_Lv3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Range_Lv4) == 0x000808, "Member 'UGA_Generic_BotTurret_C::Range_Lv4' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, Range_Lv5) == 0x00080C, "Member 'UGA_Generic_BotTurret_C::Range_Lv5' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, WarmUpDelay) == 0x000810, "Member 'UGA_Generic_BotTurret_C::WarmUpDelay' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, WarmUpDelay_Lv1) == 0x000814, "Member 'UGA_Generic_BotTurret_C::WarmUpDelay_Lv1' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, WarmUpDelay_Lv2) == 0x000818, "Member 'UGA_Generic_BotTurret_C::WarmUpDelay_Lv2' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, WarmUpDelay_Lv3) == 0x00081C, "Member 'UGA_Generic_BotTurret_C::WarmUpDelay_Lv3' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, WarmUpDelay_Lv4) == 0x000820, "Member 'UGA_Generic_BotTurret_C::WarmUpDelay_Lv4' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, WarmUpDelay_Lv5) == 0x000824, "Member 'UGA_Generic_BotTurret_C::WarmUpDelay_Lv5' has a wrong offset!");
static_assert(offsetof(UGA_Generic_BotTurret_C, GE_BGABuff) == 0x000828, "Member 'UGA_Generic_BotTurret_C::GE_BGABuff' has a wrong offset!");

}

#pragma pack(pop)
