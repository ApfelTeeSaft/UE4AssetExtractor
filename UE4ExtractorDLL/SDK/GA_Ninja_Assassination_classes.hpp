#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Ninja_Assassination

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass GA_Ninja_Assassination.GA_Ninja_Assassination_C
// 0x00DC (0x07B8 - 0x06DC)
class UGA_Ninja_Assassination_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06DC(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTagContainer                  TC_EdgedWeapons;                                   // 0x06E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayEventData                     EventData;                                         // 0x06F8(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventActivation;                                   // 0x0750(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventComplete;                                     // 0x0758(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APlayerPawn_Ninja_C*                    NinjaPawn;                                         // 0x0760(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 GE_Assassination;                                  // 0x0764(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 GE_WindAndStorm;                                   // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_WindAndStorm;                                   // 0x076C(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_PainMastery;                                    // 0x0784(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_PainMastery;                                    // 0x079C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_NinjaAbility;                                   // 0x07A0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_GA_Ninja_Assassination(int32 EntryPoint);
	void K2_ActivateAbility();
	bool K2_ShouldAbilityRespondToEvent(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayEventData& Payload);
	void ApplyStack(class APlayerPawn_Ninja_C* NinjaPawn_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Ninja_Assassination_C">();
	}
	static class UGA_Ninja_Assassination_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Ninja_Assassination_C>();
	}
};
static_assert(alignof(UGA_Ninja_Assassination_C) == 0x000004, "Wrong alignment on UGA_Ninja_Assassination_C");
static_assert(sizeof(UGA_Ninja_Assassination_C) == 0x0007B8, "Wrong size on UGA_Ninja_Assassination_C");
static_assert(offsetof(UGA_Ninja_Assassination_C, UberGraphFrame) == 0x0006DC, "Member 'UGA_Ninja_Assassination_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, TC_EdgedWeapons) == 0x0006E0, "Member 'UGA_Ninja_Assassination_C::TC_EdgedWeapons' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, EventData) == 0x0006F8, "Member 'UGA_Ninja_Assassination_C::EventData' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, EventActivation) == 0x000750, "Member 'UGA_Ninja_Assassination_C::EventActivation' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, EventComplete) == 0x000758, "Member 'UGA_Ninja_Assassination_C::EventComplete' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, NinjaPawn) == 0x000760, "Member 'UGA_Ninja_Assassination_C::NinjaPawn' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, GE_Assassination) == 0x000764, "Member 'UGA_Ninja_Assassination_C::GE_Assassination' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, GE_WindAndStorm) == 0x000768, "Member 'UGA_Ninja_Assassination_C::GE_WindAndStorm' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, TC_WindAndStorm) == 0x00076C, "Member 'UGA_Ninja_Assassination_C::TC_WindAndStorm' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, TC_PainMastery) == 0x000784, "Member 'UGA_Ninja_Assassination_C::TC_PainMastery' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, GE_PainMastery) == 0x00079C, "Member 'UGA_Ninja_Assassination_C::GE_PainMastery' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_Assassination_C, TC_NinjaAbility) == 0x0007A0, "Member 'UGA_Ninja_Assassination_C::TC_NinjaAbility' has a wrong offset!");

}

#pragma pack(pop)
