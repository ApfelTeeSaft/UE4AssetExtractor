#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Ninja_MantisLeap

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass GA_Ninja_MantisLeap.GA_Ninja_MantisLeap_C
// 0x0158 (0x0834 - 0x06DC)
class UGA_Ninja_MantisLeap_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06DC(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class AActor*                                 Instigator;                                        // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Jump_Multiple;                                     // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Basic_Jump_Z_Adjust;                               // 0x06E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_CanExecute;                                     // 0x06F4(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          CanExecute;                                        // 0x070C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_70D[0x3];                                      // 0x070D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PrayingMantisJumpZAdjust;                          // 0x0710(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 GE_RemoveMantisLeap;                               // 0x071C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_PrayingMantis;                                  // 0x0720(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                FinalJumpHeight;                                   // 0x0738(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayEventData                     EventData;                                         // 0x0744(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APlayerPawn_Ninja_C*                    NinjaPawn;                                         // 0x079C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EventActivation;                                   // 0x07A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventComplete;                                     // 0x07A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   Effects_Location_Bone1;                            // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   Effects_Location_Bone2;                            // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        P_LeapEffects;                                     // 0x07C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             MantisLeapCue;                                     // 0x07C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EC_MantisStrike;                                   // 0x07C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         RefractionRingHeight;                              // 0x07D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        P_Shockwave;                                       // 0x07D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EventTriggerSmokeBomb;                             // 0x07D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_Hack;                                           // 0x07E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        P_ImpactEffects;                                   // 0x07E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Cue_ImpactSound;                                   // 0x07E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           EventEnterShadowStance;                            // 0x07EC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_MantisStrike;                                   // 0x07F4(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          PrayingMantis;                                     // 0x080C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MantisStrike;                                      // 0x080D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_80E[0x2];                                      // 0x080E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_ShadowStanceActive;                             // 0x0810(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ShadowStanceActive;                                // 0x0828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HackAlreadyExecuted;                               // 0x0829(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82A[0x2];                                      // 0x082A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           MantisStrikeGCN;                                   // 0x082C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_GA_Ninja_MantisLeap(int32 EntryPoint);
	void OnPawnLanded_Event_0(const struct FHitResult& Hit);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData_0);
	void Targeted_023C704A4687994EABB842B14222FB9B(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_023C704A4687994EABB842B14222FB9B(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	bool K2_ShouldAbilityRespondToEvent(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayEventData& Payload);
	void SetJumpHeight(class APlayerPawn_Ninja_C* Ninja_Pawn, class AFortPlayerPawn** Ninja_Pawn_Out, struct FVector* Jump_Height);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Ninja_MantisLeap_C">();
	}
	static class UGA_Ninja_MantisLeap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Ninja_MantisLeap_C>();
	}
};
static_assert(alignof(UGA_Ninja_MantisLeap_C) == 0x000004, "Wrong alignment on UGA_Ninja_MantisLeap_C");
static_assert(sizeof(UGA_Ninja_MantisLeap_C) == 0x000834, "Wrong size on UGA_Ninja_MantisLeap_C");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, UberGraphFrame) == 0x0006DC, "Member 'UGA_Ninja_MantisLeap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, Instigator) == 0x0006E0, "Member 'UGA_Ninja_MantisLeap_C::Instigator' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, Jump_Multiple) == 0x0006E4, "Member 'UGA_Ninja_MantisLeap_C::Jump_Multiple' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, Basic_Jump_Z_Adjust) == 0x0006E8, "Member 'UGA_Ninja_MantisLeap_C::Basic_Jump_Z_Adjust' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, TC_CanExecute) == 0x0006F4, "Member 'UGA_Ninja_MantisLeap_C::TC_CanExecute' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, CanExecute) == 0x00070C, "Member 'UGA_Ninja_MantisLeap_C::CanExecute' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, PrayingMantisJumpZAdjust) == 0x000710, "Member 'UGA_Ninja_MantisLeap_C::PrayingMantisJumpZAdjust' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, GE_RemoveMantisLeap) == 0x00071C, "Member 'UGA_Ninja_MantisLeap_C::GE_RemoveMantisLeap' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, TC_PrayingMantis) == 0x000720, "Member 'UGA_Ninja_MantisLeap_C::TC_PrayingMantis' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, FinalJumpHeight) == 0x000738, "Member 'UGA_Ninja_MantisLeap_C::FinalJumpHeight' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, EventData) == 0x000744, "Member 'UGA_Ninja_MantisLeap_C::EventData' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, NinjaPawn) == 0x00079C, "Member 'UGA_Ninja_MantisLeap_C::NinjaPawn' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, EventActivation) == 0x0007A0, "Member 'UGA_Ninja_MantisLeap_C::EventActivation' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, EventComplete) == 0x0007A8, "Member 'UGA_Ninja_MantisLeap_C::EventComplete' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, Effects_Location_Bone1) == 0x0007B0, "Member 'UGA_Ninja_MantisLeap_C::Effects_Location_Bone1' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, Effects_Location_Bone2) == 0x0007B8, "Member 'UGA_Ninja_MantisLeap_C::Effects_Location_Bone2' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, P_LeapEffects) == 0x0007C0, "Member 'UGA_Ninja_MantisLeap_C::P_LeapEffects' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, MantisLeapCue) == 0x0007C4, "Member 'UGA_Ninja_MantisLeap_C::MantisLeapCue' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, EC_MantisStrike) == 0x0007C8, "Member 'UGA_Ninja_MantisLeap_C::EC_MantisStrike' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, RefractionRingHeight) == 0x0007D0, "Member 'UGA_Ninja_MantisLeap_C::RefractionRingHeight' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, P_Shockwave) == 0x0007D4, "Member 'UGA_Ninja_MantisLeap_C::P_Shockwave' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, EventTriggerSmokeBomb) == 0x0007D8, "Member 'UGA_Ninja_MantisLeap_C::EventTriggerSmokeBomb' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, GE_Hack) == 0x0007E0, "Member 'UGA_Ninja_MantisLeap_C::GE_Hack' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, P_ImpactEffects) == 0x0007E4, "Member 'UGA_Ninja_MantisLeap_C::P_ImpactEffects' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, Cue_ImpactSound) == 0x0007E8, "Member 'UGA_Ninja_MantisLeap_C::Cue_ImpactSound' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, EventEnterShadowStance) == 0x0007EC, "Member 'UGA_Ninja_MantisLeap_C::EventEnterShadowStance' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, TC_MantisStrike) == 0x0007F4, "Member 'UGA_Ninja_MantisLeap_C::TC_MantisStrike' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, PrayingMantis) == 0x00080C, "Member 'UGA_Ninja_MantisLeap_C::PrayingMantis' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, MantisStrike) == 0x00080D, "Member 'UGA_Ninja_MantisLeap_C::MantisStrike' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, TC_ShadowStanceActive) == 0x000810, "Member 'UGA_Ninja_MantisLeap_C::TC_ShadowStanceActive' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, ShadowStanceActive) == 0x000828, "Member 'UGA_Ninja_MantisLeap_C::ShadowStanceActive' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, HackAlreadyExecuted) == 0x000829, "Member 'UGA_Ninja_MantisLeap_C::HackAlreadyExecuted' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_MantisLeap_C, MantisStrikeGCN) == 0x00082C, "Member 'UGA_Ninja_MantisLeap_C::MantisStrikeGCN' has a wrong offset!");

}

#pragma pack(pop)
