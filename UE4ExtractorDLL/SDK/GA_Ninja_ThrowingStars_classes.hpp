#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Ninja_ThrowingStars

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass GA_Ninja_ThrowingStars.GA_Ninja_ThrowingStars_C
// 0x0204 (0x08E0 - 0x06DC)
class UGA_Ninja_ThrowingStars_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06DC(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UAnimMontage*                           AN_ThrowStars;                                     // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 Prj_ThrowingStar;                                  // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AFortPawn*                              Ref_Instigator;                                    // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                TransformOffsetA1;                                 // 0x06EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                TransformOffsetB1;                                 // 0x06F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         NegHorizontalSpread1;                              // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PosHorizontalSpread1;                              // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                StartLocation;                                     // 0x070C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         InitialSpeed;                                      // 0x0718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ThrowingStarGravity;                               // 0x071C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               StartRotation;                                     // 0x0720(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                TransformOffsetC1;                                 // 0x072C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         NegHorizontalSpread2;                              // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                TransformOffsetD1;                                 // 0x073C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PosHorizontalSpread2;                              // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                TransformOffsetE1;                                 // 0x074C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         NegHorizontalSpread3;                              // 0x0758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                TransformOffsetF1;                                 // 0x075C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PosHorizontalSpread3;                              // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_StarsUpgrade1;                                  // 0x076C(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_StarsUpgrade2;                                  // 0x0784(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventComplete;                                     // 0x079C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventActivation;                                   // 0x07A4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFortAbilityTargetSelection            T_Explosion;                                       // 0x07AC(0x004C)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundBase*                             ActivationSound;                                   // 0x07F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayEventData                     EventData;                                         // 0x07FC(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayAttribute                     Att_TargetDummiesLevel;                            // 0x0854(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 HomingTarget;                                      // 0x0858(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldHome;                                        // 0x085C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Cascade;                                           // 0x085D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85E[0x2];                                      // 0x085E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EC_StarDamage;                                     // 0x0860(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_NinjaTraining2;                                 // 0x0868(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EC_AfflictionStar;                                 // 0x0880(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_RainOfDeath;                                    // 0x0888(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          RainOfDeath;                                       // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A1[0x3];                                      // 0x08A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ThrowNumber;                                       // 0x08A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAuthority;                                       // 0x08A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A9[0x3];                                      // 0x08A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_Extra2Stars;                                    // 0x08AC(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ThrowLeftStar;                                     // 0x08C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ThrowRightStar;                                    // 0x08C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8C6[0x2];                                      // 0x08C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_Cascade;                                        // 0x08C8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_GA_Ninja_ThrowingStars(int32 EntryPoint);
	void K2_ActivateAbility();
	void Triggered_6FEC3EAA4C7675A1295702BBAE17678C(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_6FEC3EAA4C7675A1295702BBAE17678C(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_6FEC3EAA4C7675A1295702BBAE17678C(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Targeted_F7576E764ABBFFFBF1A6BE95A742E0A6(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_F7576E764ABBFFFBF1A6BE95A742E0A6(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void SpawnThrowingStar(const struct FVector& Transform_Offset, float Horizontal_Spread, class AActor* Homing_Target);
	void ThrowBasicStars();
	void Thow_Lv2_Stars();
	void Throw_Lv3_Stars();
	void ThrowAdditionalStars();
	void ThrowCascade();
	void SetupVariables();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Ninja_ThrowingStars_C">();
	}
	static class UGA_Ninja_ThrowingStars_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Ninja_ThrowingStars_C>();
	}
};
static_assert(alignof(UGA_Ninja_ThrowingStars_C) == 0x000004, "Wrong alignment on UGA_Ninja_ThrowingStars_C");
static_assert(sizeof(UGA_Ninja_ThrowingStars_C) == 0x0008E0, "Wrong size on UGA_Ninja_ThrowingStars_C");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, UberGraphFrame) == 0x0006DC, "Member 'UGA_Ninja_ThrowingStars_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, AN_ThrowStars) == 0x0006E0, "Member 'UGA_Ninja_ThrowingStars_C::AN_ThrowStars' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, Prj_ThrowingStar) == 0x0006E4, "Member 'UGA_Ninja_ThrowingStars_C::Prj_ThrowingStar' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, Ref_Instigator) == 0x0006E8, "Member 'UGA_Ninja_ThrowingStars_C::Ref_Instigator' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, TransformOffsetA1) == 0x0006EC, "Member 'UGA_Ninja_ThrowingStars_C::TransformOffsetA1' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, TransformOffsetB1) == 0x0006F8, "Member 'UGA_Ninja_ThrowingStars_C::TransformOffsetB1' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, NegHorizontalSpread1) == 0x000704, "Member 'UGA_Ninja_ThrowingStars_C::NegHorizontalSpread1' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, PosHorizontalSpread1) == 0x000708, "Member 'UGA_Ninja_ThrowingStars_C::PosHorizontalSpread1' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, StartLocation) == 0x00070C, "Member 'UGA_Ninja_ThrowingStars_C::StartLocation' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, InitialSpeed) == 0x000718, "Member 'UGA_Ninja_ThrowingStars_C::InitialSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, ThrowingStarGravity) == 0x00071C, "Member 'UGA_Ninja_ThrowingStars_C::ThrowingStarGravity' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, StartRotation) == 0x000720, "Member 'UGA_Ninja_ThrowingStars_C::StartRotation' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, TransformOffsetC1) == 0x00072C, "Member 'UGA_Ninja_ThrowingStars_C::TransformOffsetC1' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, NegHorizontalSpread2) == 0x000738, "Member 'UGA_Ninja_ThrowingStars_C::NegHorizontalSpread2' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, TransformOffsetD1) == 0x00073C, "Member 'UGA_Ninja_ThrowingStars_C::TransformOffsetD1' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, PosHorizontalSpread2) == 0x000748, "Member 'UGA_Ninja_ThrowingStars_C::PosHorizontalSpread2' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, TransformOffsetE1) == 0x00074C, "Member 'UGA_Ninja_ThrowingStars_C::TransformOffsetE1' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, NegHorizontalSpread3) == 0x000758, "Member 'UGA_Ninja_ThrowingStars_C::NegHorizontalSpread3' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, TransformOffsetF1) == 0x00075C, "Member 'UGA_Ninja_ThrowingStars_C::TransformOffsetF1' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, PosHorizontalSpread3) == 0x000768, "Member 'UGA_Ninja_ThrowingStars_C::PosHorizontalSpread3' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, TC_StarsUpgrade1) == 0x00076C, "Member 'UGA_Ninja_ThrowingStars_C::TC_StarsUpgrade1' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, TC_StarsUpgrade2) == 0x000784, "Member 'UGA_Ninja_ThrowingStars_C::TC_StarsUpgrade2' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, EventComplete) == 0x00079C, "Member 'UGA_Ninja_ThrowingStars_C::EventComplete' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, EventActivation) == 0x0007A4, "Member 'UGA_Ninja_ThrowingStars_C::EventActivation' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, T_Explosion) == 0x0007AC, "Member 'UGA_Ninja_ThrowingStars_C::T_Explosion' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, ActivationSound) == 0x0007F8, "Member 'UGA_Ninja_ThrowingStars_C::ActivationSound' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, EventData) == 0x0007FC, "Member 'UGA_Ninja_ThrowingStars_C::EventData' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, Att_TargetDummiesLevel) == 0x000854, "Member 'UGA_Ninja_ThrowingStars_C::Att_TargetDummiesLevel' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, HomingTarget) == 0x000858, "Member 'UGA_Ninja_ThrowingStars_C::HomingTarget' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, ShouldHome) == 0x00085C, "Member 'UGA_Ninja_ThrowingStars_C::ShouldHome' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, Cascade) == 0x00085D, "Member 'UGA_Ninja_ThrowingStars_C::Cascade' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, EC_StarDamage) == 0x000860, "Member 'UGA_Ninja_ThrowingStars_C::EC_StarDamage' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, TC_NinjaTraining2) == 0x000868, "Member 'UGA_Ninja_ThrowingStars_C::TC_NinjaTraining2' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, EC_AfflictionStar) == 0x000880, "Member 'UGA_Ninja_ThrowingStars_C::EC_AfflictionStar' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, TC_RainOfDeath) == 0x000888, "Member 'UGA_Ninja_ThrowingStars_C::TC_RainOfDeath' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, RainOfDeath) == 0x0008A0, "Member 'UGA_Ninja_ThrowingStars_C::RainOfDeath' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, ThrowNumber) == 0x0008A4, "Member 'UGA_Ninja_ThrowingStars_C::ThrowNumber' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, IsAuthority) == 0x0008A8, "Member 'UGA_Ninja_ThrowingStars_C::IsAuthority' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, TC_Extra2Stars) == 0x0008AC, "Member 'UGA_Ninja_ThrowingStars_C::TC_Extra2Stars' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, ThrowLeftStar) == 0x0008C4, "Member 'UGA_Ninja_ThrowingStars_C::ThrowLeftStar' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, ThrowRightStar) == 0x0008C5, "Member 'UGA_Ninja_ThrowingStars_C::ThrowRightStar' has a wrong offset!");
static_assert(offsetof(UGA_Ninja_ThrowingStars_C, TC_Cascade) == 0x0008C8, "Member 'UGA_Ninja_ThrowingStars_C::TC_Cascade' has a wrong offset!");

}

#pragma pack(pop)
