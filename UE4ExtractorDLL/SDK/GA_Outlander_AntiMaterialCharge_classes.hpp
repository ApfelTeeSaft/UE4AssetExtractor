#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Outlander_AntiMaterialCharge

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "E_AntiMaterialCharge_State_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GAT_OutlanderActiveAbility_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass GA_Outlander_AntiMaterialCharge.GA_Outlander_AntiMaterialCharge_C
// 0x00E4 (0x0824 - 0x0740)
class UGA_Outlander_AntiMaterialCharge_C final : public UGAT_OutlanderActiveAbility_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_Outlander_AntiMaterialCharge_C;  // 0x0740(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTag                           EventActivation;                                   // 0x0744(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EventComplete;                                     // 0x074C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFortFeedbackHandle                    AntiMaterialDialogFeedback;                        // 0x0754(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EC_TargetBuildings;                                // 0x0764(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           EC_TargetPawns;                                    // 0x076C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           M_AntiMaterialCharge;                              // 0x0774(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MinTravelTime;                                     // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MaxTravelTime;                                     // 0x077C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayAttribute                     OutlanderSubBuilding1;                             // 0x0780(0x0004)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         UpgradeDistance;                                   // 0x0784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MinChargeUpTime;                                   // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*               P_DustKickup_Active;                               // 0x078C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MaxChargeUpTime;                                   // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ChargeUpTimeout;                                   // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ChargeUpStartTime;                                 // 0x0798(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ChargeFraction;                                    // 0x079C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAudioComponent*                        ChargeUpAudioComp;                                 // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             ChargeUpSoundCue;                                  // 0x07A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ChargeUpAnimDuration;                              // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_ChargedFist;                                    // 0x07AC(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_TravelTime;                                     // 0x07C4(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_AntiMaterialCharge_State                    AntiMaterialChargeState;                           // 0x07DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7DD[0x3];                                      // 0x07DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FollowThruTimeout;                                 // 0x07E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          KeyReleased;                                       // 0x07E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E5[0x3];                                      // 0x07E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PitchInputScale;                                   // 0x07E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         YawInputScale;                                     // 0x07EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FFortCharacterPartMontageInfo>  CharacterPartMontages;                             // 0x07F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         ChargePawnDamageMax;                               // 0x07FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ChargeBuildingDamageMax;                           // 0x0800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WasCharged;                                        // 0x0804(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_805[0x3];                                      // 0x0805(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_OutlanderChargeDamageBoost;                     // 0x0808(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  ImpactCueTags;                                     // 0x080C(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_GA_Outlander_AntiMaterialCharge(int32 EntryPoint);
	void FollowThruState();
	void PunchMovementState();
	void ChargeUpState();
	void OnAbilityInputReleased();
	void K2_OnEndAbility();
	void OverlapEvent(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void K2_ActivateAbility();
	void Triggered_BC1210B54390EF35DEFD88AE8F47FDE8(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_BC1210B54390EF35DEFD88AE8F47FDE8(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_BC1210B54390EF35DEFD88AE8F47FDE8(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Triggered_29EA705847CDF7F1457FB4B125B9704F(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_29EA705847CDF7F1457FB4B125B9704F(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_29EA705847CDF7F1457FB4B125B9704F(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Triggered_46A106FC46EA4689B0713182261BE9A8(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_46A106FC46EA4689B0713182261BE9A8(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_46A106FC46EA4689B0713182261BE9A8(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Targeted_63C876A84981C19273666E9674DB57B0(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_63C876A84981C19273666E9674DB57B0(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Targeted_FE8A18834C65F680DC37488D7FC06BC5(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_FE8A18834C65F680DC37488D7FC06BC5(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void CheckOverlappingActors(class AActor* Actor, bool* ShouldContinue);
	void SetVariables();
	void ToggleSteeringReduction(bool EnableSteeringReduction);
	void AddChargeDamage();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Outlander_AntiMaterialCharge_C">();
	}
	static class UGA_Outlander_AntiMaterialCharge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Outlander_AntiMaterialCharge_C>();
	}
};
static_assert(alignof(UGA_Outlander_AntiMaterialCharge_C) == 0x000004, "Wrong alignment on UGA_Outlander_AntiMaterialCharge_C");
static_assert(sizeof(UGA_Outlander_AntiMaterialCharge_C) == 0x000824, "Wrong size on UGA_Outlander_AntiMaterialCharge_C");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, UberGraphFrame_GA_Outlander_AntiMaterialCharge_C) == 0x000740, "Member 'UGA_Outlander_AntiMaterialCharge_C::UberGraphFrame_GA_Outlander_AntiMaterialCharge_C' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, EventActivation) == 0x000744, "Member 'UGA_Outlander_AntiMaterialCharge_C::EventActivation' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, EventComplete) == 0x00074C, "Member 'UGA_Outlander_AntiMaterialCharge_C::EventComplete' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, AntiMaterialDialogFeedback) == 0x000754, "Member 'UGA_Outlander_AntiMaterialCharge_C::AntiMaterialDialogFeedback' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, EC_TargetBuildings) == 0x000764, "Member 'UGA_Outlander_AntiMaterialCharge_C::EC_TargetBuildings' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, EC_TargetPawns) == 0x00076C, "Member 'UGA_Outlander_AntiMaterialCharge_C::EC_TargetPawns' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, M_AntiMaterialCharge) == 0x000774, "Member 'UGA_Outlander_AntiMaterialCharge_C::M_AntiMaterialCharge' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, MinTravelTime) == 0x000778, "Member 'UGA_Outlander_AntiMaterialCharge_C::MinTravelTime' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, MaxTravelTime) == 0x00077C, "Member 'UGA_Outlander_AntiMaterialCharge_C::MaxTravelTime' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, OutlanderSubBuilding1) == 0x000780, "Member 'UGA_Outlander_AntiMaterialCharge_C::OutlanderSubBuilding1' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, UpgradeDistance) == 0x000784, "Member 'UGA_Outlander_AntiMaterialCharge_C::UpgradeDistance' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, MinChargeUpTime) == 0x000788, "Member 'UGA_Outlander_AntiMaterialCharge_C::MinChargeUpTime' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, P_DustKickup_Active) == 0x00078C, "Member 'UGA_Outlander_AntiMaterialCharge_C::P_DustKickup_Active' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, MaxChargeUpTime) == 0x000790, "Member 'UGA_Outlander_AntiMaterialCharge_C::MaxChargeUpTime' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, ChargeUpTimeout) == 0x000794, "Member 'UGA_Outlander_AntiMaterialCharge_C::ChargeUpTimeout' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, ChargeUpStartTime) == 0x000798, "Member 'UGA_Outlander_AntiMaterialCharge_C::ChargeUpStartTime' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, ChargeFraction) == 0x00079C, "Member 'UGA_Outlander_AntiMaterialCharge_C::ChargeFraction' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, ChargeUpAudioComp) == 0x0007A0, "Member 'UGA_Outlander_AntiMaterialCharge_C::ChargeUpAudioComp' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, ChargeUpSoundCue) == 0x0007A4, "Member 'UGA_Outlander_AntiMaterialCharge_C::ChargeUpSoundCue' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, ChargeUpAnimDuration) == 0x0007A8, "Member 'UGA_Outlander_AntiMaterialCharge_C::ChargeUpAnimDuration' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, TC_ChargedFist) == 0x0007AC, "Member 'UGA_Outlander_AntiMaterialCharge_C::TC_ChargedFist' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, TC_TravelTime) == 0x0007C4, "Member 'UGA_Outlander_AntiMaterialCharge_C::TC_TravelTime' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, AntiMaterialChargeState) == 0x0007DC, "Member 'UGA_Outlander_AntiMaterialCharge_C::AntiMaterialChargeState' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, FollowThruTimeout) == 0x0007E0, "Member 'UGA_Outlander_AntiMaterialCharge_C::FollowThruTimeout' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, KeyReleased) == 0x0007E4, "Member 'UGA_Outlander_AntiMaterialCharge_C::KeyReleased' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, PitchInputScale) == 0x0007E8, "Member 'UGA_Outlander_AntiMaterialCharge_C::PitchInputScale' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, YawInputScale) == 0x0007EC, "Member 'UGA_Outlander_AntiMaterialCharge_C::YawInputScale' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, CharacterPartMontages) == 0x0007F0, "Member 'UGA_Outlander_AntiMaterialCharge_C::CharacterPartMontages' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, ChargePawnDamageMax) == 0x0007FC, "Member 'UGA_Outlander_AntiMaterialCharge_C::ChargePawnDamageMax' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, ChargeBuildingDamageMax) == 0x000800, "Member 'UGA_Outlander_AntiMaterialCharge_C::ChargeBuildingDamageMax' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, WasCharged) == 0x000804, "Member 'UGA_Outlander_AntiMaterialCharge_C::WasCharged' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, GE_OutlanderChargeDamageBoost) == 0x000808, "Member 'UGA_Outlander_AntiMaterialCharge_C::GE_OutlanderChargeDamageBoost' has a wrong offset!");
static_assert(offsetof(UGA_Outlander_AntiMaterialCharge_C, ImpactCueTags) == 0x00080C, "Member 'UGA_Outlander_AntiMaterialCharge_C::ImpactCueTags' has a wrong offset!");

}

#pragma pack(pop)
