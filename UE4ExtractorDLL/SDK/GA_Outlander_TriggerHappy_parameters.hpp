#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Outlander_TriggerHappy

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function GA_Outlander_TriggerHappy.GA_Outlander_TriggerHappy_C.ExecuteUbergraph_GA_Outlander_TriggerHappy
// 0x006C (0x006C - 0x0000)
struct GA_Outlander_TriggerHappy_C_ExecuteUbergraph_GA_Outlander_TriggerHappy final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGameplayEventData                     K2Node_Event_EventData;                            // 0x0004(0x0058)(ConstParm)
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingGameplayEffectSpec_ReturnValue; // 0x005C(0x000C)()
	struct FActiveGameplayEffectHandle            CallFunc_K2_ApplyGameplayEffectSpecToOwner_ReturnValue; // 0x0068(0x0004)()
};
static_assert(alignof(GA_Outlander_TriggerHappy_C_ExecuteUbergraph_GA_Outlander_TriggerHappy) == 0x000004, "Wrong alignment on GA_Outlander_TriggerHappy_C_ExecuteUbergraph_GA_Outlander_TriggerHappy");
static_assert(sizeof(GA_Outlander_TriggerHappy_C_ExecuteUbergraph_GA_Outlander_TriggerHappy) == 0x00006C, "Wrong size on GA_Outlander_TriggerHappy_C_ExecuteUbergraph_GA_Outlander_TriggerHappy");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_ExecuteUbergraph_GA_Outlander_TriggerHappy, EntryPoint) == 0x000000, "Member 'GA_Outlander_TriggerHappy_C_ExecuteUbergraph_GA_Outlander_TriggerHappy::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_ExecuteUbergraph_GA_Outlander_TriggerHappy, K2Node_Event_EventData) == 0x000004, "Member 'GA_Outlander_TriggerHappy_C_ExecuteUbergraph_GA_Outlander_TriggerHappy::K2Node_Event_EventData' has a wrong offset!");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_ExecuteUbergraph_GA_Outlander_TriggerHappy, CallFunc_MakeOutgoingGameplayEffectSpec_ReturnValue) == 0x00005C, "Member 'GA_Outlander_TriggerHappy_C_ExecuteUbergraph_GA_Outlander_TriggerHappy::CallFunc_MakeOutgoingGameplayEffectSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_ExecuteUbergraph_GA_Outlander_TriggerHappy, CallFunc_K2_ApplyGameplayEffectSpecToOwner_ReturnValue) == 0x000068, "Member 'GA_Outlander_TriggerHappy_C_ExecuteUbergraph_GA_Outlander_TriggerHappy::CallFunc_K2_ApplyGameplayEffectSpecToOwner_ReturnValue' has a wrong offset!");

// Function GA_Outlander_TriggerHappy.GA_Outlander_TriggerHappy_C.K2_ActivateAbilityFromEvent
// 0x0058 (0x0058 - 0x0000)
struct GA_Outlander_TriggerHappy_C_K2_ActivateAbilityFromEvent final
{
public:
	struct FGameplayEventData                     EventData_0;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_Outlander_TriggerHappy_C_K2_ActivateAbilityFromEvent) == 0x000004, "Wrong alignment on GA_Outlander_TriggerHappy_C_K2_ActivateAbilityFromEvent");
static_assert(sizeof(GA_Outlander_TriggerHappy_C_K2_ActivateAbilityFromEvent) == 0x000058, "Wrong size on GA_Outlander_TriggerHappy_C_K2_ActivateAbilityFromEvent");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_K2_ActivateAbilityFromEvent, EventData_0) == 0x000000, "Member 'GA_Outlander_TriggerHappy_C_K2_ActivateAbilityFromEvent::EventData_0' has a wrong offset!");

// Function GA_Outlander_TriggerHappy.GA_Outlander_TriggerHappy_C.K2_ShouldAbilityRespondToEvent
// 0x009C (0x009C - 0x0000)
struct GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0034)(Parm, ContainsInstancedReference)
	struct FGameplayEventData                     Payload;                                           // 0x0034(0x0058)(Parm)
	bool                                          ReturnValue;                                       // 0x008C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              K2Node_DynamicCast_AsFort_Pawn;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesContainerMatchAllTagsInContainer_ReturnValue; // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesContainerMatchAllTagsInContainer_ReturnValue2; // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsPawn;                                           // 0x0099(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent) == 0x000004, "Wrong alignment on GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent");
static_assert(sizeof(GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent) == 0x00009C, "Wrong size on GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent, ActorInfo) == 0x000000, "Member 'GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent::ActorInfo' has a wrong offset!");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent, Payload) == 0x000034, "Member 'GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent::Payload' has a wrong offset!");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent, ReturnValue) == 0x00008C, "Member 'GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent, K2Node_DynamicCast_AsFort_Pawn) == 0x000090, "Member 'GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent::K2Node_DynamicCast_AsFort_Pawn' has a wrong offset!");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent, K2Node_DynamicCast_bSuccess) == 0x000094, "Member 'GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent, CallFunc_DoesContainerMatchAllTagsInContainer_ReturnValue) == 0x000095, "Member 'GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent::CallFunc_DoesContainerMatchAllTagsInContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent, CallFunc_DoesContainerMatchAllTagsInContainer_ReturnValue2) == 0x000096, "Member 'GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent::CallFunc_DoesContainerMatchAllTagsInContainer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent, CallFunc_BooleanAND_ReturnValue) == 0x000097, "Member 'GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent, CallFunc_BooleanAND_ReturnValue2) == 0x000098, "Member 'GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent, bIsPawn) == 0x000099, "Member 'GA_Outlander_TriggerHappy_C_K2_ShouldAbilityRespondToEvent::bIsPawn' has a wrong offset!");

}

#pragma pack(pop)
