#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameSubCatalog

#include "Basic.hpp"

#include "McpProfileSys_structs.hpp"
#include "JsonUtilities_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Enum GameSubCatalog.EAppStore
// NumValues: 0x000A
enum class EAppStore : uint8
{
	DebugStore                               = 0,
	EpicPurchasingService                    = 1,
	IOSAppStore                              = 2,
	WeChatAppStore                           = 3,
	GooglePlayAppStore                       = 4,
	KindleStore                              = 5,
	PlayStationStore                         = 6,
	XboxLiveStore                            = 7,
	MAX                                      = 8,
	EAppStore_MAX                            = 9,
};

// Enum GameSubCatalog.EStoreCurrencyType
// NumValues: 0x0006
enum class EStoreCurrencyType : uint8
{
	RealMoney                                = 0,
	MtxCurrency                              = 1,
	GameItem                                 = 2,
	Other                                    = 3,
	MAX                                      = 4,
	EStoreCurrencyType_MAX                   = 5,
};

// ScriptStruct GameSubCatalog.CatalogKeyValue
// 0x0018 (0x0018 - 0x0000)
struct FCatalogKeyValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x000C)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x000C(0x000C)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCatalogKeyValue) == 0x000004, "Wrong alignment on FCatalogKeyValue");
static_assert(sizeof(FCatalogKeyValue) == 0x000018, "Wrong size on FCatalogKeyValue");
static_assert(offsetof(FCatalogKeyValue, Key) == 0x000000, "Member 'FCatalogKeyValue::Key' has a wrong offset!");
static_assert(offsetof(FCatalogKeyValue, Value) == 0x00000C, "Member 'FCatalogKeyValue::Value' has a wrong offset!");

// ScriptStruct GameSubCatalog.CatalogItemPrice
// 0x0014 (0x0014 - 0x0000)
struct FCatalogItemPrice final
{
public:
	EStoreCurrencyType                            CurrencyType;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencySubType;                                   // 0x0004(0x000C)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BasePrice;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCatalogItemPrice) == 0x000004, "Wrong alignment on FCatalogItemPrice");
static_assert(sizeof(FCatalogItemPrice) == 0x000014, "Wrong size on FCatalogItemPrice");
static_assert(offsetof(FCatalogItemPrice, CurrencyType) == 0x000000, "Member 'FCatalogItemPrice::CurrencyType' has a wrong offset!");
static_assert(offsetof(FCatalogItemPrice, CurrencySubType) == 0x000004, "Member 'FCatalogItemPrice::CurrencySubType' has a wrong offset!");
static_assert(offsetof(FCatalogItemPrice, BasePrice) == 0x000010, "Member 'FCatalogItemPrice::BasePrice' has a wrong offset!");

// ScriptStruct GameSubCatalog.CatalogMetaAssetInfo
// 0x0014 (0x0014 - 0x0000)
struct FCatalogMetaAssetInfo final
{
public:
	class FString                                 StructName;                                        // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FJsonObjectWrapper                     Payload;                                           // 0x000C(0x0008)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCatalogMetaAssetInfo) == 0x000004, "Wrong alignment on FCatalogMetaAssetInfo");
static_assert(sizeof(FCatalogMetaAssetInfo) == 0x000014, "Wrong size on FCatalogMetaAssetInfo");
static_assert(offsetof(FCatalogMetaAssetInfo, StructName) == 0x000000, "Member 'FCatalogMetaAssetInfo::StructName' has a wrong offset!");
static_assert(offsetof(FCatalogMetaAssetInfo, Payload) == 0x00000C, "Member 'FCatalogMetaAssetInfo::Payload' has a wrong offset!");

// ScriptStruct GameSubCatalog.CatalogOffer
// 0x00FC (0x00FC - 0x0000)
struct FCatalogOffer final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x000C)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCatalogKeyValue>               MetaInfo;                                          // 0x000C(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCatalogItemPrice>              Prices;                                            // 0x0018(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DailyLimit;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SinglePurchaseOnly;                                // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Categories;                                        // 0x002C(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CatalogGroup;                                      // 0x0038(0x000C)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CatalogGroupPriority;                              // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortPriority;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x004C(0x000C)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0058(0x000C)(Edit, NativeAccessSpecifierPublic)
	class FString                                 AppStoreId[0x8];                                   // 0x0064(0x000C)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCatalogMetaAssetInfo                  MetaAssetInfo;                                     // 0x00C4(0x0014)(NativeAccessSpecifierPublic)
	class FString                                 DisplayAssetPath;                                  // 0x00D8(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FulfillmentId;                                     // 0x00E4(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         RequiredFulfillmentIds;                            // 0x00F0(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCatalogOffer) == 0x000004, "Wrong alignment on FCatalogOffer");
static_assert(sizeof(FCatalogOffer) == 0x0000FC, "Wrong size on FCatalogOffer");
static_assert(offsetof(FCatalogOffer, OfferId) == 0x000000, "Member 'FCatalogOffer::OfferId' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, MetaInfo) == 0x00000C, "Member 'FCatalogOffer::MetaInfo' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, Prices) == 0x000018, "Member 'FCatalogOffer::Prices' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, DailyLimit) == 0x000024, "Member 'FCatalogOffer::DailyLimit' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, SinglePurchaseOnly) == 0x000028, "Member 'FCatalogOffer::SinglePurchaseOnly' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, Categories) == 0x00002C, "Member 'FCatalogOffer::Categories' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, CatalogGroup) == 0x000038, "Member 'FCatalogOffer::CatalogGroup' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, CatalogGroupPriority) == 0x000044, "Member 'FCatalogOffer::CatalogGroupPriority' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, SortPriority) == 0x000048, "Member 'FCatalogOffer::SortPriority' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, Title) == 0x00004C, "Member 'FCatalogOffer::Title' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, Description) == 0x000058, "Member 'FCatalogOffer::Description' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, AppStoreId) == 0x000064, "Member 'FCatalogOffer::AppStoreId' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, MetaAssetInfo) == 0x0000C4, "Member 'FCatalogOffer::MetaAssetInfo' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, DisplayAssetPath) == 0x0000D8, "Member 'FCatalogOffer::DisplayAssetPath' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, FulfillmentId) == 0x0000E4, "Member 'FCatalogOffer::FulfillmentId' has a wrong offset!");
static_assert(offsetof(FCatalogOffer, RequiredFulfillmentIds) == 0x0000F0, "Member 'FCatalogOffer::RequiredFulfillmentIds' has a wrong offset!");

// ScriptStruct GameSubCatalog.CatalogPurchaseNotification
// 0x0024 (0x0024 - 0x0000)
struct FCatalogPurchaseNotification final
{
public:
	struct FMcpLootResult                         LootResult;                                        // 0x0000(0x0024)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCatalogPurchaseNotification) == 0x000004, "Wrong alignment on FCatalogPurchaseNotification");
static_assert(sizeof(FCatalogPurchaseNotification) == 0x000024, "Wrong size on FCatalogPurchaseNotification");
static_assert(offsetof(FCatalogPurchaseNotification, LootResult) == 0x000000, "Member 'FCatalogPurchaseNotification::LootResult' has a wrong offset!");

// ScriptStruct GameSubCatalog.ServicePrice
// 0x0020 (0x0020 - 0x0000)
struct FServicePrice final
{
public:
	class FString                                 ServiceName;                                       // 0x0000(0x000C)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCatalogItemPrice                      Price;                                             // 0x000C(0x0014)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServicePrice) == 0x000004, "Wrong alignment on FServicePrice");
static_assert(sizeof(FServicePrice) == 0x000020, "Wrong size on FServicePrice");
static_assert(offsetof(FServicePrice, ServiceName) == 0x000000, "Member 'FServicePrice::ServiceName' has a wrong offset!");
static_assert(offsetof(FServicePrice, Price) == 0x00000C, "Member 'FServicePrice::Price' has a wrong offset!");

// ScriptStruct GameSubCatalog.Storefront
// 0x0018 (0x0018 - 0x0000)
struct FStorefront final
{
public:
	class FString                                 Name;                                              // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCatalogOffer>                  CatalogEntries;                                    // 0x000C(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStorefront) == 0x000004, "Wrong alignment on FStorefront");
static_assert(sizeof(FStorefront) == 0x000018, "Wrong size on FStorefront");
static_assert(offsetof(FStorefront, Name) == 0x000000, "Member 'FStorefront::Name' has a wrong offset!");
static_assert(offsetof(FStorefront, CatalogEntries) == 0x00000C, "Member 'FStorefront::CatalogEntries' has a wrong offset!");

// ScriptStruct GameSubCatalog.CatalogDownload
// 0x001C (0x001C - 0x0000)
struct FCatalogDownload final
{
public:
	int32                                         RefreshIntervalHrs;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FServicePrice>                  ServicePricing;                                    // 0x0004(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStorefront>                    Storefronts;                                       // 0x0010(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCatalogDownload) == 0x000004, "Wrong alignment on FCatalogDownload");
static_assert(sizeof(FCatalogDownload) == 0x00001C, "Wrong size on FCatalogDownload");
static_assert(offsetof(FCatalogDownload, RefreshIntervalHrs) == 0x000000, "Member 'FCatalogDownload::RefreshIntervalHrs' has a wrong offset!");
static_assert(offsetof(FCatalogDownload, ServicePricing) == 0x000004, "Member 'FCatalogDownload::ServicePricing' has a wrong offset!");
static_assert(offsetof(FCatalogDownload, Storefronts) == 0x000010, "Member 'FCatalogDownload::Storefronts' has a wrong offset!");

// ScriptStruct GameSubCatalog.CatalogPurchaseInfo
// 0x0024 (0x0024 - 0x0000)
struct FCatalogPurchaseInfo final
{
public:
	class FString                                 OfferId;                                           // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseQuantity;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStoreCurrencyType                            Currency;                                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencySubType;                                   // 0x0014(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpectedPrice;                                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCatalogPurchaseInfo) == 0x000004, "Wrong alignment on FCatalogPurchaseInfo");
static_assert(sizeof(FCatalogPurchaseInfo) == 0x000024, "Wrong size on FCatalogPurchaseInfo");
static_assert(offsetof(FCatalogPurchaseInfo, OfferId) == 0x000000, "Member 'FCatalogPurchaseInfo::OfferId' has a wrong offset!");
static_assert(offsetof(FCatalogPurchaseInfo, PurchaseQuantity) == 0x00000C, "Member 'FCatalogPurchaseInfo::PurchaseQuantity' has a wrong offset!");
static_assert(offsetof(FCatalogPurchaseInfo, Currency) == 0x000010, "Member 'FCatalogPurchaseInfo::Currency' has a wrong offset!");
static_assert(offsetof(FCatalogPurchaseInfo, CurrencySubType) == 0x000014, "Member 'FCatalogPurchaseInfo::CurrencySubType' has a wrong offset!");
static_assert(offsetof(FCatalogPurchaseInfo, ExpectedPrice) == 0x000020, "Member 'FCatalogPurchaseInfo::ExpectedPrice' has a wrong offset!");

// ScriptStruct GameSubCatalog.CatalogReceiptInfo
// 0x0028 (0x0028 - 0x0000)
struct FCatalogReceiptInfo final
{
public:
	EAppStore                                     AppStore;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AppStoreId;                                        // 0x0004(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiptId;                                         // 0x0010(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiptInfo;                                       // 0x001C(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCatalogReceiptInfo) == 0x000004, "Wrong alignment on FCatalogReceiptInfo");
static_assert(sizeof(FCatalogReceiptInfo) == 0x000028, "Wrong size on FCatalogReceiptInfo");
static_assert(offsetof(FCatalogReceiptInfo, AppStore) == 0x000000, "Member 'FCatalogReceiptInfo::AppStore' has a wrong offset!");
static_assert(offsetof(FCatalogReceiptInfo, AppStoreId) == 0x000004, "Member 'FCatalogReceiptInfo::AppStoreId' has a wrong offset!");
static_assert(offsetof(FCatalogReceiptInfo, ReceiptId) == 0x000010, "Member 'FCatalogReceiptInfo::ReceiptId' has a wrong offset!");
static_assert(offsetof(FCatalogReceiptInfo, ReceiptInfo) == 0x00001C, "Member 'FCatalogReceiptInfo::ReceiptInfo' has a wrong offset!");

}

#pragma pack(pop)
