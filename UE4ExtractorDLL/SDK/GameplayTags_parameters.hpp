#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayTags

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function GameplayTags.GameplayTagAssetInterface.GetOwnedGameplayTags
// 0x0018 (0x0018 - 0x0000)
struct GameplayTagAssetInterface_GetOwnedGameplayTags final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTagAssetInterface_GetOwnedGameplayTags) == 0x000004, "Wrong alignment on GameplayTagAssetInterface_GetOwnedGameplayTags");
static_assert(sizeof(GameplayTagAssetInterface_GetOwnedGameplayTags) == 0x000018, "Wrong size on GameplayTagAssetInterface_GetOwnedGameplayTags");
static_assert(offsetof(GameplayTagAssetInterface_GetOwnedGameplayTags, TagContainer) == 0x000000, "Member 'GameplayTagAssetInterface_GetOwnedGameplayTags::TagContainer' has a wrong offset!");

// Function GameplayTags.GameplayTagAssetInterface.HasAllMatchingGameplayTags
// 0x001C (0x001C - 0x0000)
struct GameplayTagAssetInterface_HasAllMatchingGameplayTags final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCountEmptyAsMatch;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayTagAssetInterface_HasAllMatchingGameplayTags) == 0x000004, "Wrong alignment on GameplayTagAssetInterface_HasAllMatchingGameplayTags");
static_assert(sizeof(GameplayTagAssetInterface_HasAllMatchingGameplayTags) == 0x00001C, "Wrong size on GameplayTagAssetInterface_HasAllMatchingGameplayTags");
static_assert(offsetof(GameplayTagAssetInterface_HasAllMatchingGameplayTags, TagContainer) == 0x000000, "Member 'GameplayTagAssetInterface_HasAllMatchingGameplayTags::TagContainer' has a wrong offset!");
static_assert(offsetof(GameplayTagAssetInterface_HasAllMatchingGameplayTags, bCountEmptyAsMatch) == 0x000018, "Member 'GameplayTagAssetInterface_HasAllMatchingGameplayTags::bCountEmptyAsMatch' has a wrong offset!");
static_assert(offsetof(GameplayTagAssetInterface_HasAllMatchingGameplayTags, ReturnValue) == 0x000019, "Member 'GameplayTagAssetInterface_HasAllMatchingGameplayTags::ReturnValue' has a wrong offset!");

// Function GameplayTags.GameplayTagAssetInterface.HasAnyMatchingGameplayTags
// 0x001C (0x001C - 0x0000)
struct GameplayTagAssetInterface_HasAnyMatchingGameplayTags final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCountEmptyAsMatch;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayTagAssetInterface_HasAnyMatchingGameplayTags) == 0x000004, "Wrong alignment on GameplayTagAssetInterface_HasAnyMatchingGameplayTags");
static_assert(sizeof(GameplayTagAssetInterface_HasAnyMatchingGameplayTags) == 0x00001C, "Wrong size on GameplayTagAssetInterface_HasAnyMatchingGameplayTags");
static_assert(offsetof(GameplayTagAssetInterface_HasAnyMatchingGameplayTags, TagContainer) == 0x000000, "Member 'GameplayTagAssetInterface_HasAnyMatchingGameplayTags::TagContainer' has a wrong offset!");
static_assert(offsetof(GameplayTagAssetInterface_HasAnyMatchingGameplayTags, bCountEmptyAsMatch) == 0x000018, "Member 'GameplayTagAssetInterface_HasAnyMatchingGameplayTags::bCountEmptyAsMatch' has a wrong offset!");
static_assert(offsetof(GameplayTagAssetInterface_HasAnyMatchingGameplayTags, ReturnValue) == 0x000019, "Member 'GameplayTagAssetInterface_HasAnyMatchingGameplayTags::ReturnValue' has a wrong offset!");

// Function GameplayTags.GameplayTagAssetInterface.HasMatchingGameplayTag
// 0x000C (0x000C - 0x0000)
struct GameplayTagAssetInterface_HasMatchingGameplayTag final
{
public:
	struct FGameplayTag                           TagToCheck;                                        // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayTagAssetInterface_HasMatchingGameplayTag) == 0x000004, "Wrong alignment on GameplayTagAssetInterface_HasMatchingGameplayTag");
static_assert(sizeof(GameplayTagAssetInterface_HasMatchingGameplayTag) == 0x00000C, "Wrong size on GameplayTagAssetInterface_HasMatchingGameplayTag");
static_assert(offsetof(GameplayTagAssetInterface_HasMatchingGameplayTag, TagToCheck) == 0x000000, "Member 'GameplayTagAssetInterface_HasMatchingGameplayTag::TagToCheck' has a wrong offset!");
static_assert(offsetof(GameplayTagAssetInterface_HasMatchingGameplayTag, ReturnValue) == 0x000008, "Member 'GameplayTagAssetInterface_HasMatchingGameplayTag::ReturnValue' has a wrong offset!");

// Function GameplayTags.BlueprintGameplayTagLibrary.AppendGameplayTagContainers
// 0x0034 (0x0034 - 0x0000)
struct BlueprintGameplayTagLibrary_AppendGameplayTagContainers final
{
public:
	struct FGameplayTagContainer                  InTagContainer;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InOutTagContainer;                                 // 0x0018(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintGameplayTagLibrary_AppendGameplayTagContainers) == 0x000004, "Wrong alignment on BlueprintGameplayTagLibrary_AppendGameplayTagContainers");
static_assert(sizeof(BlueprintGameplayTagLibrary_AppendGameplayTagContainers) == 0x000034, "Wrong size on BlueprintGameplayTagLibrary_AppendGameplayTagContainers");
static_assert(offsetof(BlueprintGameplayTagLibrary_AppendGameplayTagContainers, InTagContainer) == 0x000000, "Member 'BlueprintGameplayTagLibrary_AppendGameplayTagContainers::InTagContainer' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_AppendGameplayTagContainers, InOutTagContainer) == 0x000018, "Member 'BlueprintGameplayTagLibrary_AppendGameplayTagContainers::InOutTagContainer' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_AppendGameplayTagContainers, ReturnValue) == 0x000030, "Member 'BlueprintGameplayTagLibrary_AppendGameplayTagContainers::ReturnValue' has a wrong offset!");

// Function GameplayTags.BlueprintGameplayTagLibrary.DoesContainerHaveTag
// 0x0028 (0x0028 - 0x0000)
struct BlueprintGameplayTagLibrary_DoesContainerHaveTag final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGameplayTagMatchType                         ContainerTagsMatchType;                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Tag;                                               // 0x001C(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGameplayTagMatchType                         TagMatchType;                                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintGameplayTagLibrary_DoesContainerHaveTag) == 0x000004, "Wrong alignment on BlueprintGameplayTagLibrary_DoesContainerHaveTag");
static_assert(sizeof(BlueprintGameplayTagLibrary_DoesContainerHaveTag) == 0x000028, "Wrong size on BlueprintGameplayTagLibrary_DoesContainerHaveTag");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerHaveTag, TagContainer) == 0x000000, "Member 'BlueprintGameplayTagLibrary_DoesContainerHaveTag::TagContainer' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerHaveTag, ContainerTagsMatchType) == 0x000018, "Member 'BlueprintGameplayTagLibrary_DoesContainerHaveTag::ContainerTagsMatchType' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerHaveTag, Tag) == 0x00001C, "Member 'BlueprintGameplayTagLibrary_DoesContainerHaveTag::Tag' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerHaveTag, TagMatchType) == 0x000024, "Member 'BlueprintGameplayTagLibrary_DoesContainerHaveTag::TagMatchType' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerHaveTag, ReturnValue) == 0x000025, "Member 'BlueprintGameplayTagLibrary_DoesContainerHaveTag::ReturnValue' has a wrong offset!");

// Function GameplayTags.BlueprintGameplayTagLibrary.DoesContainerMatchAllTagsInContainer
// 0x0034 (0x0034 - 0x0000)
struct BlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  OtherContainer;                                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCountEmptyAsMatch;                                // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer) == 0x000004, "Wrong alignment on BlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer");
static_assert(sizeof(BlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer) == 0x000034, "Wrong size on BlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer, TagContainer) == 0x000000, "Member 'BlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer::TagContainer' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer, OtherContainer) == 0x000018, "Member 'BlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer::OtherContainer' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer, bCountEmptyAsMatch) == 0x000030, "Member 'BlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer::bCountEmptyAsMatch' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer, ReturnValue) == 0x000031, "Member 'BlueprintGameplayTagLibrary_DoesContainerMatchAllTagsInContainer::ReturnValue' has a wrong offset!");

// Function GameplayTags.BlueprintGameplayTagLibrary.DoesContainerMatchAnyTagsInContainer
// 0x0034 (0x0034 - 0x0000)
struct BlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  OtherContainer;                                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCountEmptyAsMatch;                                // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer) == 0x000004, "Wrong alignment on BlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer");
static_assert(sizeof(BlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer) == 0x000034, "Wrong size on BlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer, TagContainer) == 0x000000, "Member 'BlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer::TagContainer' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer, OtherContainer) == 0x000018, "Member 'BlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer::OtherContainer' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer, bCountEmptyAsMatch) == 0x000030, "Member 'BlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer::bCountEmptyAsMatch' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer, ReturnValue) == 0x000031, "Member 'BlueprintGameplayTagLibrary_DoesContainerMatchAnyTagsInContainer::ReturnValue' has a wrong offset!");

// Function GameplayTags.BlueprintGameplayTagLibrary.DoesContainerMatchTagQuery
// 0x0050 (0x0050 - 0x0000)
struct BlueprintGameplayTagLibrary_DoesContainerMatchTagQuery final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0018(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintGameplayTagLibrary_DoesContainerMatchTagQuery) == 0x000004, "Wrong alignment on BlueprintGameplayTagLibrary_DoesContainerMatchTagQuery");
static_assert(sizeof(BlueprintGameplayTagLibrary_DoesContainerMatchTagQuery) == 0x000050, "Wrong size on BlueprintGameplayTagLibrary_DoesContainerMatchTagQuery");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerMatchTagQuery, TagContainer) == 0x000000, "Member 'BlueprintGameplayTagLibrary_DoesContainerMatchTagQuery::TagContainer' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerMatchTagQuery, TagQuery) == 0x000018, "Member 'BlueprintGameplayTagLibrary_DoesContainerMatchTagQuery::TagQuery' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesContainerMatchTagQuery, ReturnValue) == 0x00004C, "Member 'BlueprintGameplayTagLibrary_DoesContainerMatchTagQuery::ReturnValue' has a wrong offset!");

// Function GameplayTags.BlueprintGameplayTagLibrary.DoesTagAssetInterfaceHaveTag
// 0x0018 (0x0018 - 0x0000)
struct BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag final
{
public:
	TScriptInterface<class IGameplayTagAssetInterface> TagContainerInterface;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	EGameplayTagMatchType                         ContainerTagsMatchType;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Tag;                                               // 0x000C(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGameplayTagMatchType                         TagMatchType;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag) == 0x000004, "Wrong alignment on BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag");
static_assert(sizeof(BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag) == 0x000018, "Wrong size on BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag, TagContainerInterface) == 0x000000, "Member 'BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag::TagContainerInterface' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag, ContainerTagsMatchType) == 0x000008, "Member 'BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag::ContainerTagsMatchType' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag, Tag) == 0x00000C, "Member 'BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag::Tag' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag, TagMatchType) == 0x000014, "Member 'BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag::TagMatchType' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag, ReturnValue) == 0x000015, "Member 'BlueprintGameplayTagLibrary_DoesTagAssetInterfaceHaveTag::ReturnValue' has a wrong offset!");

// Function GameplayTags.BlueprintGameplayTagLibrary.DoGameplayTagsMatch
// 0x0014 (0x0014 - 0x0000)
struct BlueprintGameplayTagLibrary_DoGameplayTagsMatch final
{
public:
	struct FGameplayTag                           TagOne;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagTwo;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGameplayTagMatchType                         TagOneMatchType;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayTagMatchType                         TagTwoMatchType;                                   // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintGameplayTagLibrary_DoGameplayTagsMatch) == 0x000004, "Wrong alignment on BlueprintGameplayTagLibrary_DoGameplayTagsMatch");
static_assert(sizeof(BlueprintGameplayTagLibrary_DoGameplayTagsMatch) == 0x000014, "Wrong size on BlueprintGameplayTagLibrary_DoGameplayTagsMatch");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoGameplayTagsMatch, TagOne) == 0x000000, "Member 'BlueprintGameplayTagLibrary_DoGameplayTagsMatch::TagOne' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoGameplayTagsMatch, TagTwo) == 0x000008, "Member 'BlueprintGameplayTagLibrary_DoGameplayTagsMatch::TagTwo' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoGameplayTagsMatch, TagOneMatchType) == 0x000010, "Member 'BlueprintGameplayTagLibrary_DoGameplayTagsMatch::TagOneMatchType' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoGameplayTagsMatch, TagTwoMatchType) == 0x000011, "Member 'BlueprintGameplayTagLibrary_DoGameplayTagsMatch::TagTwoMatchType' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_DoGameplayTagsMatch, ReturnValue) == 0x000012, "Member 'BlueprintGameplayTagLibrary_DoGameplayTagsMatch::ReturnValue' has a wrong offset!");

// Function GameplayTags.BlueprintGameplayTagLibrary.GetDebugStringFromGameplayTagContainer
// 0x0024 (0x0024 - 0x0000)
struct BlueprintGameplayTagLibrary_GetDebugStringFromGameplayTagContainer final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintGameplayTagLibrary_GetDebugStringFromGameplayTagContainer) == 0x000004, "Wrong alignment on BlueprintGameplayTagLibrary_GetDebugStringFromGameplayTagContainer");
static_assert(sizeof(BlueprintGameplayTagLibrary_GetDebugStringFromGameplayTagContainer) == 0x000024, "Wrong size on BlueprintGameplayTagLibrary_GetDebugStringFromGameplayTagContainer");
static_assert(offsetof(BlueprintGameplayTagLibrary_GetDebugStringFromGameplayTagContainer, TagContainer) == 0x000000, "Member 'BlueprintGameplayTagLibrary_GetDebugStringFromGameplayTagContainer::TagContainer' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_GetDebugStringFromGameplayTagContainer, ReturnValue) == 0x000018, "Member 'BlueprintGameplayTagLibrary_GetDebugStringFromGameplayTagContainer::ReturnValue' has a wrong offset!");

// Function GameplayTags.BlueprintGameplayTagLibrary.GetNumGameplayTagsInContainer
// 0x001C (0x001C - 0x0000)
struct BlueprintGameplayTagLibrary_GetNumGameplayTagsInContainer final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintGameplayTagLibrary_GetNumGameplayTagsInContainer) == 0x000004, "Wrong alignment on BlueprintGameplayTagLibrary_GetNumGameplayTagsInContainer");
static_assert(sizeof(BlueprintGameplayTagLibrary_GetNumGameplayTagsInContainer) == 0x00001C, "Wrong size on BlueprintGameplayTagLibrary_GetNumGameplayTagsInContainer");
static_assert(offsetof(BlueprintGameplayTagLibrary_GetNumGameplayTagsInContainer, TagContainer) == 0x000000, "Member 'BlueprintGameplayTagLibrary_GetNumGameplayTagsInContainer::TagContainer' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_GetNumGameplayTagsInContainer, ReturnValue) == 0x000018, "Member 'BlueprintGameplayTagLibrary_GetNumGameplayTagsInContainer::ReturnValue' has a wrong offset!");

// Function GameplayTags.BlueprintGameplayTagLibrary.HasAllMatchingGameplayTags
// 0x0024 (0x0024 - 0x0000)
struct BlueprintGameplayTagLibrary_HasAllMatchingGameplayTags final
{
public:
	TScriptInterface<class IGameplayTagAssetInterface> TagContainerInterface;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  OtherContainer;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCountEmptyAsMatch;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintGameplayTagLibrary_HasAllMatchingGameplayTags) == 0x000004, "Wrong alignment on BlueprintGameplayTagLibrary_HasAllMatchingGameplayTags");
static_assert(sizeof(BlueprintGameplayTagLibrary_HasAllMatchingGameplayTags) == 0x000024, "Wrong size on BlueprintGameplayTagLibrary_HasAllMatchingGameplayTags");
static_assert(offsetof(BlueprintGameplayTagLibrary_HasAllMatchingGameplayTags, TagContainerInterface) == 0x000000, "Member 'BlueprintGameplayTagLibrary_HasAllMatchingGameplayTags::TagContainerInterface' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_HasAllMatchingGameplayTags, OtherContainer) == 0x000008, "Member 'BlueprintGameplayTagLibrary_HasAllMatchingGameplayTags::OtherContainer' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_HasAllMatchingGameplayTags, bCountEmptyAsMatch) == 0x000020, "Member 'BlueprintGameplayTagLibrary_HasAllMatchingGameplayTags::bCountEmptyAsMatch' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_HasAllMatchingGameplayTags, ReturnValue) == 0x000021, "Member 'BlueprintGameplayTagLibrary_HasAllMatchingGameplayTags::ReturnValue' has a wrong offset!");

// Function GameplayTags.BlueprintGameplayTagLibrary.MakeGameplayTagQuery
// 0x0068 (0x0068 - 0x0000)
struct BlueprintGameplayTagLibrary_MakeGameplayTagQuery final
{
public:
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0000(0x0034)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      ReturnValue;                                       // 0x0034(0x0034)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintGameplayTagLibrary_MakeGameplayTagQuery) == 0x000004, "Wrong alignment on BlueprintGameplayTagLibrary_MakeGameplayTagQuery");
static_assert(sizeof(BlueprintGameplayTagLibrary_MakeGameplayTagQuery) == 0x000068, "Wrong size on BlueprintGameplayTagLibrary_MakeGameplayTagQuery");
static_assert(offsetof(BlueprintGameplayTagLibrary_MakeGameplayTagQuery, TagQuery) == 0x000000, "Member 'BlueprintGameplayTagLibrary_MakeGameplayTagQuery::TagQuery' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_MakeGameplayTagQuery, ReturnValue) == 0x000034, "Member 'BlueprintGameplayTagLibrary_MakeGameplayTagQuery::ReturnValue' has a wrong offset!");

// Function GameplayTags.BlueprintGameplayTagLibrary.MakeLiteralGameplayTag
// 0x0010 (0x0010 - 0x0000)
struct BlueprintGameplayTagLibrary_MakeLiteralGameplayTag final
{
public:
	struct FGameplayTag                           Value;                                             // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintGameplayTagLibrary_MakeLiteralGameplayTag) == 0x000004, "Wrong alignment on BlueprintGameplayTagLibrary_MakeLiteralGameplayTag");
static_assert(sizeof(BlueprintGameplayTagLibrary_MakeLiteralGameplayTag) == 0x000010, "Wrong size on BlueprintGameplayTagLibrary_MakeLiteralGameplayTag");
static_assert(offsetof(BlueprintGameplayTagLibrary_MakeLiteralGameplayTag, Value) == 0x000000, "Member 'BlueprintGameplayTagLibrary_MakeLiteralGameplayTag::Value' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_MakeLiteralGameplayTag, ReturnValue) == 0x000008, "Member 'BlueprintGameplayTagLibrary_MakeLiteralGameplayTag::ReturnValue' has a wrong offset!");

// Function GameplayTags.BlueprintGameplayTagLibrary.NotEqual_TagContainerTagContainer
// 0x0028 (0x0028 - 0x0000)
struct BlueprintGameplayTagLibrary_NotEqual_TagContainerTagContainer final
{
public:
	struct FGameplayTagContainer                  A;                                                 // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0018(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintGameplayTagLibrary_NotEqual_TagContainerTagContainer) == 0x000004, "Wrong alignment on BlueprintGameplayTagLibrary_NotEqual_TagContainerTagContainer");
static_assert(sizeof(BlueprintGameplayTagLibrary_NotEqual_TagContainerTagContainer) == 0x000028, "Wrong size on BlueprintGameplayTagLibrary_NotEqual_TagContainerTagContainer");
static_assert(offsetof(BlueprintGameplayTagLibrary_NotEqual_TagContainerTagContainer, A) == 0x000000, "Member 'BlueprintGameplayTagLibrary_NotEqual_TagContainerTagContainer::A' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_NotEqual_TagContainerTagContainer, B) == 0x000018, "Member 'BlueprintGameplayTagLibrary_NotEqual_TagContainerTagContainer::B' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_NotEqual_TagContainerTagContainer, ReturnValue) == 0x000024, "Member 'BlueprintGameplayTagLibrary_NotEqual_TagContainerTagContainer::ReturnValue' has a wrong offset!");

// Function GameplayTags.BlueprintGameplayTagLibrary.NotEqual_TagTag
// 0x0018 (0x0018 - 0x0000)
struct BlueprintGameplayTagLibrary_NotEqual_TagTag final
{
public:
	struct FGameplayTag                           A;                                                 // 0x0000(0x0008)(Parm, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0008(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintGameplayTagLibrary_NotEqual_TagTag) == 0x000004, "Wrong alignment on BlueprintGameplayTagLibrary_NotEqual_TagTag");
static_assert(sizeof(BlueprintGameplayTagLibrary_NotEqual_TagTag) == 0x000018, "Wrong size on BlueprintGameplayTagLibrary_NotEqual_TagTag");
static_assert(offsetof(BlueprintGameplayTagLibrary_NotEqual_TagTag, A) == 0x000000, "Member 'BlueprintGameplayTagLibrary_NotEqual_TagTag::A' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_NotEqual_TagTag, B) == 0x000008, "Member 'BlueprintGameplayTagLibrary_NotEqual_TagTag::B' has a wrong offset!");
static_assert(offsetof(BlueprintGameplayTagLibrary_NotEqual_TagTag, ReturnValue) == 0x000014, "Member 'BlueprintGameplayTagLibrary_NotEqual_TagTag::ReturnValue' has a wrong offset!");

// Function GameplayTags.GameplayTagsManager.RequestGameplayTag
// 0x0014 (0x0014 - 0x0000)
struct GameplayTagsManager_RequestGameplayTag final
{
public:
	class FName                                   TagName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorIfNotFound;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTagsManager_RequestGameplayTag) == 0x000004, "Wrong alignment on GameplayTagsManager_RequestGameplayTag");
static_assert(sizeof(GameplayTagsManager_RequestGameplayTag) == 0x000014, "Wrong size on GameplayTagsManager_RequestGameplayTag");
static_assert(offsetof(GameplayTagsManager_RequestGameplayTag, TagName) == 0x000000, "Member 'GameplayTagsManager_RequestGameplayTag::TagName' has a wrong offset!");
static_assert(offsetof(GameplayTagsManager_RequestGameplayTag, ErrorIfNotFound) == 0x000008, "Member 'GameplayTagsManager_RequestGameplayTag::ErrorIfNotFound' has a wrong offset!");
static_assert(offsetof(GameplayTagsManager_RequestGameplayTag, ReturnValue) == 0x00000C, "Member 'GameplayTagsManager_RequestGameplayTag::ReturnValue' has a wrong offset!");

}

#pragma pack(pop)
