#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HeroAbility_Widget

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function HeroAbility_Widget.HeroAbility_Widget_C.ExecuteUbergraph_HeroAbility_Widget
// 0x0008 (0x0008 - 0x0000)
struct HeroAbility_Widget_C_ExecuteUbergraph_HeroAbility_Widget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HeroAbility_Widget_C_ExecuteUbergraph_HeroAbility_Widget) == 0x000004, "Wrong alignment on HeroAbility_Widget_C_ExecuteUbergraph_HeroAbility_Widget");
static_assert(sizeof(HeroAbility_Widget_C_ExecuteUbergraph_HeroAbility_Widget) == 0x000008, "Wrong size on HeroAbility_Widget_C_ExecuteUbergraph_HeroAbility_Widget");
static_assert(offsetof(HeroAbility_Widget_C_ExecuteUbergraph_HeroAbility_Widget, EntryPoint) == 0x000000, "Member 'HeroAbility_Widget_C_ExecuteUbergraph_HeroAbility_Widget::EntryPoint' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_ExecuteUbergraph_HeroAbility_Widget, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'HeroAbility_Widget_C_ExecuteUbergraph_HeroAbility_Widget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HeroAbility_Widget.HeroAbility_Widget_C.Get Ability Kit Tooltip
// 0x0020 (0x0020 - 0x0000)
struct HeroAbility_Widget_C_Get_Ability_Kit_Tooltip final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_Create_Basic_Tooltip_Output;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class FText>                           CallFunc_GetDescription_ReturnValue;               // 0x0010(0x000C)(ZeroConstructor, ReferenceParm)
	class UUserWidget*                            CallFunc_Create_Basic_Multi_Line_Tooltip_Output;   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HeroAbility_Widget_C_Get_Ability_Kit_Tooltip) == 0x000004, "Wrong alignment on HeroAbility_Widget_C_Get_Ability_Kit_Tooltip");
static_assert(sizeof(HeroAbility_Widget_C_Get_Ability_Kit_Tooltip) == 0x000020, "Wrong size on HeroAbility_Widget_C_Get_Ability_Kit_Tooltip");
static_assert(offsetof(HeroAbility_Widget_C_Get_Ability_Kit_Tooltip, ReturnValue) == 0x000000, "Member 'HeroAbility_Widget_C_Get_Ability_Kit_Tooltip::ReturnValue' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_Get_Ability_Kit_Tooltip, CallFunc_GetOwningPlayer_ReturnValue) == 0x000004, "Member 'HeroAbility_Widget_C_Get_Ability_Kit_Tooltip::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_Get_Ability_Kit_Tooltip, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'HeroAbility_Widget_C_Get_Ability_Kit_Tooltip::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_Get_Ability_Kit_Tooltip, CallFunc_Create_Basic_Tooltip_Output) == 0x00000C, "Member 'HeroAbility_Widget_C_Get_Ability_Kit_Tooltip::CallFunc_Create_Basic_Tooltip_Output' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_Get_Ability_Kit_Tooltip, CallFunc_GetDescription_ReturnValue) == 0x000010, "Member 'HeroAbility_Widget_C_Get_Ability_Kit_Tooltip::CallFunc_GetDescription_ReturnValue' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_Get_Ability_Kit_Tooltip, CallFunc_Create_Basic_Multi_Line_Tooltip_Output) == 0x00001C, "Member 'HeroAbility_Widget_C_Get_Ability_Kit_Tooltip::CallFunc_Create_Basic_Multi_Line_Tooltip_Output' has a wrong offset!");

// Function HeroAbility_Widget.HeroAbility_Widget_C.Update
// 0x00C4 (0x00C4 - 0x0000)
struct HeroAbility_Widget_C_Update final
{
public:
	class UFortAbilityKit*                        Ability_Kit;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Cost_0;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_Active_0;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x000C(0x0074)()
	TDelegate<void(class UFortBaseButton* Button, bool SELECTED)> K2Node_CreateDelegate_OutputDelegate;              // 0x0080(0x0010)(ZeroConstructor, NoDestructor)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Temp_struct_Variable2;                             // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HeroAbility_Widget_C_Update) == 0x000004, "Wrong alignment on HeroAbility_Widget_C_Update");
static_assert(sizeof(HeroAbility_Widget_C_Update) == 0x0000C4, "Wrong size on HeroAbility_Widget_C_Update");
static_assert(offsetof(HeroAbility_Widget_C_Update, Ability_Kit) == 0x000000, "Member 'HeroAbility_Widget_C_Update::Ability_Kit' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_Update, Cost_0) == 0x000004, "Member 'HeroAbility_Widget_C_Update::Cost_0' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_Update, Is_Active_0) == 0x000008, "Member 'HeroAbility_Widget_C_Update::Is_Active_0' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_Update, K2Node_MakeStruct_SlateBrush) == 0x00000C, "Member 'HeroAbility_Widget_C_Update::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_Update, K2Node_CreateDelegate_OutputDelegate) == 0x000080, "Member 'HeroAbility_Widget_C_Update::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_Update, Temp_struct_Variable) == 0x000090, "Member 'HeroAbility_Widget_C_Update::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_Update, Temp_struct_Variable2) == 0x0000A0, "Member 'HeroAbility_Widget_C_Update::Temp_struct_Variable2' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_Update, Temp_bool_Variable) == 0x0000B0, "Member 'HeroAbility_Widget_C_Update::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_Update, K2Node_Select_Default) == 0x0000B4, "Member 'HeroAbility_Widget_C_Update::K2Node_Select_Default' has a wrong offset!");

// Function HeroAbility_Widget.HeroAbility_Widget_C.On Ability Selected
// 0x0008 (0x0008 - 0x0000)
struct HeroAbility_Widget_C_On_Ability_Selected final
{
public:
	class UFortBaseButton*                        Ability_Button;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SELECTED;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HeroAbility_Widget_C_On_Ability_Selected) == 0x000004, "Wrong alignment on HeroAbility_Widget_C_On_Ability_Selected");
static_assert(sizeof(HeroAbility_Widget_C_On_Ability_Selected) == 0x000008, "Wrong size on HeroAbility_Widget_C_On_Ability_Selected");
static_assert(offsetof(HeroAbility_Widget_C_On_Ability_Selected, Ability_Button) == 0x000000, "Member 'HeroAbility_Widget_C_On_Ability_Selected::Ability_Button' has a wrong offset!");
static_assert(offsetof(HeroAbility_Widget_C_On_Ability_Selected, SELECTED) == 0x000004, "Member 'HeroAbility_Widget_C_On_Ability_Selected::SELECTED' has a wrong offset!");

}

#pragma pack(pop)
