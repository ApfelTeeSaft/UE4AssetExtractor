#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HeroCoreAbility_Widget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function HeroCoreAbility_Widget.HeroCoreAbility_Widget_C.ExecuteUbergraph_HeroCoreAbility_Widget
// 0x0008 (0x0008 - 0x0000)
struct HeroCoreAbility_Widget_C_ExecuteUbergraph_HeroCoreAbility_Widget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HeroCoreAbility_Widget_C_ExecuteUbergraph_HeroCoreAbility_Widget) == 0x000004, "Wrong alignment on HeroCoreAbility_Widget_C_ExecuteUbergraph_HeroCoreAbility_Widget");
static_assert(sizeof(HeroCoreAbility_Widget_C_ExecuteUbergraph_HeroCoreAbility_Widget) == 0x000008, "Wrong size on HeroCoreAbility_Widget_C_ExecuteUbergraph_HeroCoreAbility_Widget");
static_assert(offsetof(HeroCoreAbility_Widget_C_ExecuteUbergraph_HeroCoreAbility_Widget, EntryPoint) == 0x000000, "Member 'HeroCoreAbility_Widget_C_ExecuteUbergraph_HeroCoreAbility_Widget::EntryPoint' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_ExecuteUbergraph_HeroCoreAbility_Widget, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'HeroCoreAbility_Widget_C_ExecuteUbergraph_HeroCoreAbility_Widget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function HeroCoreAbility_Widget.HeroCoreAbility_Widget_C.Get Ability Kit Tooltip
// 0x0020 (0x0020 - 0x0000)
struct HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_Create_Basic_Tooltip_Output;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class FText>                           CallFunc_GetDescription_ReturnValue;               // 0x0010(0x000C)(ZeroConstructor, ReferenceParm)
	class UUserWidget*                            CallFunc_Create_Basic_Multi_Line_Tooltip_Output;   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip) == 0x000004, "Wrong alignment on HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip");
static_assert(sizeof(HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip) == 0x000020, "Wrong size on HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip");
static_assert(offsetof(HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip, ReturnValue) == 0x000000, "Member 'HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip::ReturnValue' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip, CallFunc_GetOwningPlayer_ReturnValue) == 0x000004, "Member 'HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip, CallFunc_Create_Basic_Tooltip_Output) == 0x00000C, "Member 'HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip::CallFunc_Create_Basic_Tooltip_Output' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip, CallFunc_GetDescription_ReturnValue) == 0x000010, "Member 'HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip::CallFunc_GetDescription_ReturnValue' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip, CallFunc_Create_Basic_Multi_Line_Tooltip_Output) == 0x00001C, "Member 'HeroCoreAbility_Widget_C_Get_Ability_Kit_Tooltip::CallFunc_Create_Basic_Multi_Line_Tooltip_Output' has a wrong offset!");

// Function HeroCoreAbility_Widget.HeroCoreAbility_Widget_C.Update
// 0x006C (0x006C - 0x0000)
struct HeroCoreAbility_Widget_C_Update final
{
public:
	class UFortAbilityKit*                        Ability_Kit;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_Unlocked_0;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Temp_struct_Variable2;                             // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable3;                             // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Temp_struct_Variable4;                             // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           K2Node_Select2_Default;                            // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(HeroCoreAbility_Widget_C_Update) == 0x000004, "Wrong alignment on HeroCoreAbility_Widget_C_Update");
static_assert(sizeof(HeroCoreAbility_Widget_C_Update) == 0x00006C, "Wrong size on HeroCoreAbility_Widget_C_Update");
static_assert(offsetof(HeroCoreAbility_Widget_C_Update, Ability_Kit) == 0x000000, "Member 'HeroCoreAbility_Widget_C_Update::Ability_Kit' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_Update, Is_Unlocked_0) == 0x000004, "Member 'HeroCoreAbility_Widget_C_Update::Is_Unlocked_0' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_Update, Temp_bool_Variable) == 0x000005, "Member 'HeroCoreAbility_Widget_C_Update::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_Update, Temp_struct_Variable) == 0x000008, "Member 'HeroCoreAbility_Widget_C_Update::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_Update, Temp_struct_Variable2) == 0x000018, "Member 'HeroCoreAbility_Widget_C_Update::Temp_struct_Variable2' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_Update, Temp_bool_Variable2) == 0x000028, "Member 'HeroCoreAbility_Widget_C_Update::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_Update, Temp_struct_Variable3) == 0x00002C, "Member 'HeroCoreAbility_Widget_C_Update::Temp_struct_Variable3' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_Update, Temp_struct_Variable4) == 0x00003C, "Member 'HeroCoreAbility_Widget_C_Update::Temp_struct_Variable4' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_Update, K2Node_Select_Default) == 0x00004C, "Member 'HeroCoreAbility_Widget_C_Update::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(HeroCoreAbility_Widget_C_Update, K2Node_Select2_Default) == 0x00005C, "Member 'HeroCoreAbility_Widget_C_Update::K2Node_Select2_Default' has a wrong offset!");

}

#pragma pack(pop)
