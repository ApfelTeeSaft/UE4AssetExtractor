#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hero_Management

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "WeaponTooltipStatType_structs.hpp"
#include "UMG_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// WidgetBlueprintGeneratedClass Hero_Management.Hero_Management_C
// 0x0094 (0x02D8 - 0x0244)
class UHero_Management_C final : public UFortUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0244(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                _Border__Stats_Panel;                              // 0x0248(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UButtonIconText_C*                      _Button__Close_Stats;                              // 0x024C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UButtonIconText_C*                      _Button__Delete;                                   // 0x0250(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UButtonIconText_C*                      _Button__Respec;                                   // 0x0254(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UHorizontalBox*                         _Horizontal_Box__Core_Abilities;                   // 0x0258(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 _Image__CrossoverArrow;                            // 0x025C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 _Image__Husklock;                                  // 0x0260(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 _Image__Slot_Pointer;                              // 0x0264(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UOverlay*                               _Overlay__Hero_Info;                               // 0x0268(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UWidgetSwitcher*                        Lock;                                              // 0x026C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UButtonIconText_C*                      _Tab__Stats;                                       // 0x0270(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             _Text__Ability_Point_Count;                        // 0x0274(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             _Text__Ability_Tree_Label;                         // 0x0278(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             _Text__Primary_Header;                             // 0x027C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           _Vertical_Box__Skill_Tree;                         // 0x0280(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           _Vertical_Box__Stats;                              // 0x0284(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UHeroInfoWidget_C*                      HeroInfoWidget;                                    // 0x0288(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           VerticalBoxHeroSlots;                              // 0x028C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UHeroListWidget_C*                      WidgetHeroList;                                    // 0x0290(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	TArray<class UHeroListItemWidget_C*>          HeroWidgetArray;                                   // 0x0294(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class FString                                 CurrentHero;                                       // 0x02A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UFortAbilityKit*                        ThisAbilityKitGoesToEleven;                        // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UHeroTrait_Widget_C*>            HeroTraitWidgetArray;                              // 0x02B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class FText                                   StatValue;                                         // 0x02BC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance)
	EWeaponTooltipStatType                        StatType;                                          // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCategory;                                        // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CA[0x2];                                      // 0x02CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringMagnitude;                                   // 0x02CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_Hero_Management(int32 EntryPoint);
	void BndEvt___Button__Delete_K2Node_ComponentBoundEvent_827_FortBaseButtonClicked__DelegateSignature(class UFortBaseButton* Button);
	void BndEvt___Button__Respec_K2Node_ComponentBoundEvent_693_FortBaseButtonClicked__DelegateSignature(class UFortBaseButton* Button);
	void BndEvt___Button__Close_Stats_K2Node_ComponentBoundEvent_606_FortBaseButtonClicked__DelegateSignature(class UFortBaseButton* Button);
	void BndEvt___Tab__Stats_K2Node_ComponentBoundEvent_532_FortSelectedStateChanged__DelegateSignature(class UFortBaseButton* Button, bool SELECTED);
	void Construct();
	void OnConfirmed_2CEB7D4940ED5B5499AC7991F91F4019();
	void OnDeclined_2CEB7D4940ED5B5499AC7991F91F4019();
	void OnTimedOut_2CEB7D4940ED5B5499AC7991F91F4019();
	void On_Hero_Selected();
	void Rebuild_Hero_List();
	void Rebuild_Main_Panel();
	void Rebuild_Core_Abilities();
	void Rebuild_Skill_Tree();
	void Rebuild_Stats_Panel();
	void Hide_Stats_Panel(bool Show_Panel);
	void Rebuild_All();
	void On_Hero_Created(bool Success);
	void On_Hero_Deleted(bool Success);
	void On_Ability_Points_Assigned(bool Success);
	void Rebuild_Hero_Slots();
	void Refresh_Delete_Permission();
	void Set_Main_Panel_Visibility(bool Is_Visible);
	void On_Hero_Stats_Changed();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Hero_Management_C">();
	}
	static class UHero_Management_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHero_Management_C>();
	}
};
static_assert(alignof(UHero_Management_C) == 0x000004, "Wrong alignment on UHero_Management_C");
static_assert(sizeof(UHero_Management_C) == 0x0002D8, "Wrong size on UHero_Management_C");
static_assert(offsetof(UHero_Management_C, UberGraphFrame) == 0x000244, "Member 'UHero_Management_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Border__Stats_Panel) == 0x000248, "Member 'UHero_Management_C::_Border__Stats_Panel' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Button__Close_Stats) == 0x00024C, "Member 'UHero_Management_C::_Button__Close_Stats' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Button__Delete) == 0x000250, "Member 'UHero_Management_C::_Button__Delete' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Button__Respec) == 0x000254, "Member 'UHero_Management_C::_Button__Respec' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Horizontal_Box__Core_Abilities) == 0x000258, "Member 'UHero_Management_C::_Horizontal_Box__Core_Abilities' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Image__CrossoverArrow) == 0x00025C, "Member 'UHero_Management_C::_Image__CrossoverArrow' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Image__Husklock) == 0x000260, "Member 'UHero_Management_C::_Image__Husklock' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Image__Slot_Pointer) == 0x000264, "Member 'UHero_Management_C::_Image__Slot_Pointer' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Overlay__Hero_Info) == 0x000268, "Member 'UHero_Management_C::_Overlay__Hero_Info' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, Lock) == 0x00026C, "Member 'UHero_Management_C::Lock' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Tab__Stats) == 0x000270, "Member 'UHero_Management_C::_Tab__Stats' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Text__Ability_Point_Count) == 0x000274, "Member 'UHero_Management_C::_Text__Ability_Point_Count' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Text__Ability_Tree_Label) == 0x000278, "Member 'UHero_Management_C::_Text__Ability_Tree_Label' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Text__Primary_Header) == 0x00027C, "Member 'UHero_Management_C::_Text__Primary_Header' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Vertical_Box__Skill_Tree) == 0x000280, "Member 'UHero_Management_C::_Vertical_Box__Skill_Tree' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, _Vertical_Box__Stats) == 0x000284, "Member 'UHero_Management_C::_Vertical_Box__Stats' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, HeroInfoWidget) == 0x000288, "Member 'UHero_Management_C::HeroInfoWidget' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, VerticalBoxHeroSlots) == 0x00028C, "Member 'UHero_Management_C::VerticalBoxHeroSlots' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, WidgetHeroList) == 0x000290, "Member 'UHero_Management_C::WidgetHeroList' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, HeroWidgetArray) == 0x000294, "Member 'UHero_Management_C::HeroWidgetArray' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, CurrentHero) == 0x0002A0, "Member 'UHero_Management_C::CurrentHero' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, ThisAbilityKitGoesToEleven) == 0x0002AC, "Member 'UHero_Management_C::ThisAbilityKitGoesToEleven' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, HeroTraitWidgetArray) == 0x0002B0, "Member 'UHero_Management_C::HeroTraitWidgetArray' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, StatValue) == 0x0002BC, "Member 'UHero_Management_C::StatValue' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, StatType) == 0x0002C8, "Member 'UHero_Management_C::StatType' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, IsCategory) == 0x0002C9, "Member 'UHero_Management_C::IsCategory' has a wrong offset!");
static_assert(offsetof(UHero_Management_C, StringMagnitude) == 0x0002CC, "Member 'UHero_Management_C::StringMagnitude' has a wrong offset!");

}

#pragma pack(pop)
