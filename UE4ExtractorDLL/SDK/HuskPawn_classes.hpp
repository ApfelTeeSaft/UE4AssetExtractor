#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HuskPawn

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ElementalEnum_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass HuskPawn.HuskPawn_C
// 0x0230 (0x1080 - 0x0E50)
#pragma pack(push, 0x1)
class alignas(0x10) AHuskPawn_C : public AFortAIPawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0E50(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Elemental_Layer_Audio_Loop;                        // 0x0E54(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Effect_Sleep_WakeUP;                               // 0x0E58(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Effect_Sleep;                                      // 0x0E5C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Effect_Stun;                                       // 0x0E60(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         Timeline_1_ColorFadeOutTrack_6F447E9B4C4E47B267D3DF9D65CF1BF8; // 0x0E64(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_1_FadeInTrack_6F447E9B4C4E47B267D3DF9D65CF1BF8; // 0x0E68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_1__Direction_6F447E9B4C4E47B267D3DF9D65CF1BF8; // 0x0E6C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E6D[0x3];                                      // 0x0E6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0E70(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Dissolve_Dissolve_433BF66B4CF1B472082D00AA8D70E5CB; // 0x0E74(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Dissolve__Direction_433BF66B4CF1B472082D00AA8D70E5CB; // 0x0E78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E79[0x3];                                      // 0x0E79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Dissolve;                                          // 0x0E7C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            HieghtDistributionCurve;                           // 0x0E80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PseudoRandomNetworkedFloat;                        // 0x0E84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FLinearColor>                   MaleHuskHairColors;                                // 0x0E88(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FLinearColor>                   MaleHuskSkinColors;                                // 0x0E94(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FLinearColor>                   MaleHuskPantColors;                                // 0x0EA0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FRandomStream                          RandomStream_0;                                    // 0x0EAC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FLinearColor>                   MaleHuskShirtColors;                               // 0x0EB4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         HitCount;                                          // 0x0EC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         LastTakeHitTime;                                   // 0x0EC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PushFromFlingerSpawn;                              // 0x0EC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UsePOCScaleAndMaterials;                           // 0x0EC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          POCShouldOverrideMaterial;                         // 0x0ECA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          POCShouldOverrideMaterialValues;                   // 0x0ECB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                     POCOverrideMaterial;                               // 0x0ECC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           POCMaterialSkinColor;                              // 0x0ED0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           POCMaterialHairColor;                              // 0x0EE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           POCMaterialPantColor;                              // 0x0EF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           POCMaterialShirtColor;                             // 0x0F00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Mantling;                                          // 0x0F10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F11[0x3];                                      // 0x0F11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              FlingerThatSpawnedMe;                              // 0x0F14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
	struct FVector                                FlingerThatSpawnedMeLocation;                      // 0x0F18(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Stunned;                                           // 0x0F24(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Sleeping;                                          // 0x0F25(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F26[0x2];                                      // 0x0F26(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_HitReactionAdditiveSingleOneShot;               // 0x0F28(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_HitReactionAdditiveLoop;                        // 0x0F40(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_HitReactionFullBody;                            // 0x0F58(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_HitReactionBlockAll;                            // 0x0F70(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_HitReactionBlockMelee;                          // 0x0F88(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  TC_HitReactionBlockRanged;                         // 0x0FA0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HitReactForMelee;                                  // 0x0FB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseRandomColorVariation;                           // 0x0FB9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HuskIsInFlingersHand;                              // 0x0FBA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HuskIsAirborne;                                    // 0x0FBB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                HuskFlingerHandOffset;                             // 0x0FBC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               HuskFlingerHandRotation;                           // 0x0FC8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                HuskFlingerProjectileOffset;                       // 0x0FD4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               HuskFlingerProjectileRotation;                     // 0x0FE0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ElementalEnum                                 ElementalType;                                     // 0x0FEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_FED[0x3];                                      // 0x0FED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Default_Material;                                  // 0x0FF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                     Fire_Material;                                     // 0x0FF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                     Ice_Material;                                      // 0x0FF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                     Electrical_Mat;                                    // 0x0FFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Particle_Fire_Ambient;                             // 0x1000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Particle_Ice_Ambient;                              // 0x1004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Particle_Electrical_Ambient;                       // 0x1008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_Disable_Elemental_Effects;                    // 0x100C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_100D[0x3];                                     // 0x100D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_MeleeWeapon;                                    // 0x1010(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsMeleeHit;                                        // 0x1028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1029[0x3];                                     // 0x1029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Elemental_Audio_Layer_Sound;                       // 0x102C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RandomizeMeshScale;                                // 0x1030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1031[0x3];                                     // 0x1031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ImpactParticles_Default;                           // 0x1034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        ImpactParticles_HumanFlesh;                        // 0x1038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        ImpactParticles_Wood;                              // 0x103C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        ImpactParticles_Stone;                             // 0x1040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        ImpactParticles_Metal;                             // 0x1044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MeleeImpact_UseSocketTransforms;                   // 0x1048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1049[0x3];                                     // 0x1049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Impact_MeleeSocket;                                // 0x104C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               HuskDefaultRotationRate;                           // 0x1054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHeadshot_HideHead;                               // 0x1060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1061[0x3];                                     // 0x1061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Damage_Red_Laser;                                  // 0x1064(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         PreviousLargestDeathRadius;                        // 0x106C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*               Death_Effects;                                     // 0x1070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Death_Normal_Sound;                                // 0x1074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             Death_RedLaser_Sound;                              // 0x1078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_HuskPawn(int32 EntryPoint);
	void GameplayCue_Impact_Physical_Creature(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void ReceiveBeginPlay();
	void OnForceSpawnEffectCompletion();
	void OnSpawnedFromRift();
	void ReceiveTick(float DeltaSeconds);
	void AdditiveHitReactDelay();
	void PlayHuskAdditiveHitReacts(const struct FVector& HitDirection);
	void MantleEnd();
	void MantleStart(const struct FVector& StartPos, const struct FVector& MidPos, const struct FVector& EndPos, bool LowWall, bool MidWall, bool FullWall, bool WindowWall);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnLanded(const struct FHitResult& Hit);
	void OnEndSleepEffects();
	void OnBeginSleepEffects();
	void PawnUniqueIDSet();
	void OnStunnedEffectEnd();
	void OnStunnedEffectBegin();
	void PortalCollision(bool Collide_);
	void PortalFX();
	void PortalGet(class ABuildingActor* BuildingActor, TArray<class ABuildingActor*>& BuildingActorList, class AActor* BT);
	void TakerSoulSuckInterrupted();
	void PortalClear();
	void PortalAdd(class ABuildingActor* BuildingActor, TArray<class ABuildingActor*>& BuildingActorList);
	void TakerSoulSuckSoundEnd();
	void TakerSoulSuckSoundBegin(bool Success);
	void TakerAttackFSM(bool SuccessfulHit);
	void IsTakerWallPortalAvailable(bool Portal_Available_);
	void TakerWallPortalBehavior(class AActor* BuildingPart, class UBTTask_BlueprintBase* Task, const struct FVector& DesiredMoveLocation, bool Debug);
	void EndTakerSwoopAttack();
	void BeginTakerSwoopAttack();
	void ResetTakerSpecialAttackTimer(bool Swoop, bool SoulSuckMelee, bool Portal);
	void VerifyTakerAttack(bool SpecialAttack, bool Swoop, bool Soul_Suck, bool Portal);
	void HuskEvadeStart();
	void FlingerEnemyDied(class APawn* PawnThatDied);
	void AlertEnemySpawnedByFlinger(const struct FVector& PushMomentum_0, float PushDuration, class APawn* OwningFlinger);
	void FlingerEnemyFailedToSpawn(class AFortProjectileBase* FailedProjectile);
	void FlingerThrewAProjectileContainingAnEnemy(class AFortProjectileBase* Projectile);
	void FlingerCan_tSpawnAnEnemy();
	void FlingerCanSpawnAnEnemy();
	void CanFlingerSpawnAnEnemy(class AActor* ActorWhoAsked);
	void FlingerSpawnedAnEnemy(class AFortAIPawn* EnemySpawned, class AFortProjectileBase* ProjectileThatSpawnedThisEnemy);
	void Timeline_1__Spawn__EventFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Dissolve__UpdateFunc();
	void Dissolve__FinishedFunc();
	void UserConstructionScript();
	void PickColorFromAnArrayOfColors(TArray<struct FLinearColor>& ArrayOfColors, struct FLinearColor* Color);
	void PlayAdditiveHitReacts(const struct FVector& HitDirection);
	void ResetHuskRotationRateToDefault();
	void SetHuskRotationRate(float YawRate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HuskPawn_C">();
	}
	static class AHuskPawn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHuskPawn_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AHuskPawn_C) == 0x000010, "Wrong alignment on AHuskPawn_C");
static_assert(sizeof(AHuskPawn_C) == 0x001080, "Wrong size on AHuskPawn_C");
static_assert(offsetof(AHuskPawn_C, UberGraphFrame) == 0x000E50, "Member 'AHuskPawn_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Elemental_Layer_Audio_Loop) == 0x000E54, "Member 'AHuskPawn_C::Elemental_Layer_Audio_Loop' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Effect_Sleep_WakeUP) == 0x000E58, "Member 'AHuskPawn_C::Effect_Sleep_WakeUP' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Effect_Sleep) == 0x000E5C, "Member 'AHuskPawn_C::Effect_Sleep' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Effect_Stun) == 0x000E60, "Member 'AHuskPawn_C::Effect_Stun' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Timeline_1_ColorFadeOutTrack_6F447E9B4C4E47B267D3DF9D65CF1BF8) == 0x000E64, "Member 'AHuskPawn_C::Timeline_1_ColorFadeOutTrack_6F447E9B4C4E47B267D3DF9D65CF1BF8' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Timeline_1_FadeInTrack_6F447E9B4C4E47B267D3DF9D65CF1BF8) == 0x000E68, "Member 'AHuskPawn_C::Timeline_1_FadeInTrack_6F447E9B4C4E47B267D3DF9D65CF1BF8' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Timeline_1__Direction_6F447E9B4C4E47B267D3DF9D65CF1BF8) == 0x000E6C, "Member 'AHuskPawn_C::Timeline_1__Direction_6F447E9B4C4E47B267D3DF9D65CF1BF8' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Timeline_1) == 0x000E70, "Member 'AHuskPawn_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Dissolve_Dissolve_433BF66B4CF1B472082D00AA8D70E5CB) == 0x000E74, "Member 'AHuskPawn_C::Dissolve_Dissolve_433BF66B4CF1B472082D00AA8D70E5CB' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Dissolve__Direction_433BF66B4CF1B472082D00AA8D70E5CB) == 0x000E78, "Member 'AHuskPawn_C::Dissolve__Direction_433BF66B4CF1B472082D00AA8D70E5CB' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Dissolve) == 0x000E7C, "Member 'AHuskPawn_C::Dissolve' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, HieghtDistributionCurve) == 0x000E80, "Member 'AHuskPawn_C::HieghtDistributionCurve' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, PseudoRandomNetworkedFloat) == 0x000E84, "Member 'AHuskPawn_C::PseudoRandomNetworkedFloat' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, MaleHuskHairColors) == 0x000E88, "Member 'AHuskPawn_C::MaleHuskHairColors' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, MaleHuskSkinColors) == 0x000E94, "Member 'AHuskPawn_C::MaleHuskSkinColors' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, MaleHuskPantColors) == 0x000EA0, "Member 'AHuskPawn_C::MaleHuskPantColors' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, RandomStream_0) == 0x000EAC, "Member 'AHuskPawn_C::RandomStream_0' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, MaleHuskShirtColors) == 0x000EB4, "Member 'AHuskPawn_C::MaleHuskShirtColors' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, HitCount) == 0x000EC0, "Member 'AHuskPawn_C::HitCount' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, LastTakeHitTime) == 0x000EC4, "Member 'AHuskPawn_C::LastTakeHitTime' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, PushFromFlingerSpawn) == 0x000EC8, "Member 'AHuskPawn_C::PushFromFlingerSpawn' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, UsePOCScaleAndMaterials) == 0x000EC9, "Member 'AHuskPawn_C::UsePOCScaleAndMaterials' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, POCShouldOverrideMaterial) == 0x000ECA, "Member 'AHuskPawn_C::POCShouldOverrideMaterial' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, POCShouldOverrideMaterialValues) == 0x000ECB, "Member 'AHuskPawn_C::POCShouldOverrideMaterialValues' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, POCOverrideMaterial) == 0x000ECC, "Member 'AHuskPawn_C::POCOverrideMaterial' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, POCMaterialSkinColor) == 0x000ED0, "Member 'AHuskPawn_C::POCMaterialSkinColor' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, POCMaterialHairColor) == 0x000EE0, "Member 'AHuskPawn_C::POCMaterialHairColor' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, POCMaterialPantColor) == 0x000EF0, "Member 'AHuskPawn_C::POCMaterialPantColor' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, POCMaterialShirtColor) == 0x000F00, "Member 'AHuskPawn_C::POCMaterialShirtColor' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Mantling) == 0x000F10, "Member 'AHuskPawn_C::Mantling' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, FlingerThatSpawnedMe) == 0x000F14, "Member 'AHuskPawn_C::FlingerThatSpawnedMe' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, FlingerThatSpawnedMeLocation) == 0x000F18, "Member 'AHuskPawn_C::FlingerThatSpawnedMeLocation' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Stunned) == 0x000F24, "Member 'AHuskPawn_C::Stunned' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Sleeping) == 0x000F25, "Member 'AHuskPawn_C::Sleeping' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, TC_HitReactionAdditiveSingleOneShot) == 0x000F28, "Member 'AHuskPawn_C::TC_HitReactionAdditiveSingleOneShot' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, TC_HitReactionAdditiveLoop) == 0x000F40, "Member 'AHuskPawn_C::TC_HitReactionAdditiveLoop' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, TC_HitReactionFullBody) == 0x000F58, "Member 'AHuskPawn_C::TC_HitReactionFullBody' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, TC_HitReactionBlockAll) == 0x000F70, "Member 'AHuskPawn_C::TC_HitReactionBlockAll' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, TC_HitReactionBlockMelee) == 0x000F88, "Member 'AHuskPawn_C::TC_HitReactionBlockMelee' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, TC_HitReactionBlockRanged) == 0x000FA0, "Member 'AHuskPawn_C::TC_HitReactionBlockRanged' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, HitReactForMelee) == 0x000FB8, "Member 'AHuskPawn_C::HitReactForMelee' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, UseRandomColorVariation) == 0x000FB9, "Member 'AHuskPawn_C::UseRandomColorVariation' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, HuskIsInFlingersHand) == 0x000FBA, "Member 'AHuskPawn_C::HuskIsInFlingersHand' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, HuskIsAirborne) == 0x000FBB, "Member 'AHuskPawn_C::HuskIsAirborne' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, HuskFlingerHandOffset) == 0x000FBC, "Member 'AHuskPawn_C::HuskFlingerHandOffset' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, HuskFlingerHandRotation) == 0x000FC8, "Member 'AHuskPawn_C::HuskFlingerHandRotation' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, HuskFlingerProjectileOffset) == 0x000FD4, "Member 'AHuskPawn_C::HuskFlingerProjectileOffset' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, HuskFlingerProjectileRotation) == 0x000FE0, "Member 'AHuskPawn_C::HuskFlingerProjectileRotation' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, ElementalType) == 0x000FEC, "Member 'AHuskPawn_C::ElementalType' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Default_Material) == 0x000FF0, "Member 'AHuskPawn_C::Default_Material' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Fire_Material) == 0x000FF4, "Member 'AHuskPawn_C::Fire_Material' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Ice_Material) == 0x000FF8, "Member 'AHuskPawn_C::Ice_Material' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Electrical_Mat) == 0x000FFC, "Member 'AHuskPawn_C::Electrical_Mat' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Particle_Fire_Ambient) == 0x001000, "Member 'AHuskPawn_C::Particle_Fire_Ambient' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Particle_Ice_Ambient) == 0x001004, "Member 'AHuskPawn_C::Particle_Ice_Ambient' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Particle_Electrical_Ambient) == 0x001008, "Member 'AHuskPawn_C::Particle_Electrical_Ambient' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Temp_Disable_Elemental_Effects) == 0x00100C, "Member 'AHuskPawn_C::Temp_Disable_Elemental_Effects' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, TC_MeleeWeapon) == 0x001010, "Member 'AHuskPawn_C::TC_MeleeWeapon' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, IsMeleeHit) == 0x001028, "Member 'AHuskPawn_C::IsMeleeHit' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Elemental_Audio_Layer_Sound) == 0x00102C, "Member 'AHuskPawn_C::Elemental_Audio_Layer_Sound' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, RandomizeMeshScale) == 0x001030, "Member 'AHuskPawn_C::RandomizeMeshScale' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, ImpactParticles_Default) == 0x001034, "Member 'AHuskPawn_C::ImpactParticles_Default' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, ImpactParticles_HumanFlesh) == 0x001038, "Member 'AHuskPawn_C::ImpactParticles_HumanFlesh' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, ImpactParticles_Wood) == 0x00103C, "Member 'AHuskPawn_C::ImpactParticles_Wood' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, ImpactParticles_Stone) == 0x001040, "Member 'AHuskPawn_C::ImpactParticles_Stone' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, ImpactParticles_Metal) == 0x001044, "Member 'AHuskPawn_C::ImpactParticles_Metal' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, MeleeImpact_UseSocketTransforms) == 0x001048, "Member 'AHuskPawn_C::MeleeImpact_UseSocketTransforms' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Impact_MeleeSocket) == 0x00104C, "Member 'AHuskPawn_C::Impact_MeleeSocket' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, HuskDefaultRotationRate) == 0x001054, "Member 'AHuskPawn_C::HuskDefaultRotationRate' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, IsHeadshot_HideHead) == 0x001060, "Member 'AHuskPawn_C::IsHeadshot_HideHead' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Damage_Red_Laser) == 0x001064, "Member 'AHuskPawn_C::Damage_Red_Laser' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, PreviousLargestDeathRadius) == 0x00106C, "Member 'AHuskPawn_C::PreviousLargestDeathRadius' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Death_Effects) == 0x001070, "Member 'AHuskPawn_C::Death_Effects' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Death_Normal_Sound) == 0x001074, "Member 'AHuskPawn_C::Death_Normal_Sound' has a wrong offset!");
static_assert(offsetof(AHuskPawn_C, Death_RedLaser_Sound) == 0x001078, "Member 'AHuskPawn_C::Death_RedLaser_Sound' has a wrong offset!");

}

#pragma pack(pop)
