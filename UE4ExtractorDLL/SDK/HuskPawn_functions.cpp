#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HuskPawn

#include "Basic.hpp"

#include "HuskPawn_classes.hpp"
#include "HuskPawn_parameters.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Function HuskPawn.HuskPawn_C.ExecuteUbergraph_HuskPawn
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::ExecuteUbergraph_HuskPawn(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "ExecuteUbergraph_HuskPawn");

	Params::HuskPawn_C_ExecuteUbergraph_HuskPawn Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.GameplayCue.Impact.Physical.Creature
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameplayCueEvent                       EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FGameplayCueParameters&    Parameters                                             (Parm)

void AHuskPawn_C::GameplayCue_Impact_Physical_Creature(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "GameplayCue.Impact.Physical.Creature");

	Params::HuskPawn_C_GameplayCue_Impact_Physical_Creature Parms{};

	Parms.EventType = EventType;
	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.OnDamagePlayEffects
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FGameplayTagContainer&     DamageTags                                             (ConstParm, Parm, OutParm, ReferenceParm)
// const struct FVector&                   Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                HitInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class AFortPawn*                        InstigatedBy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FGameplayEffectContextHandle&EffectContext                                          (Parm)

void AHuskPawn_C::OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "OnDamagePlayEffects");

	Params::HuskPawn_C_OnDamagePlayEffects Parms{};

	Parms.Damage = Damage;
	Parms.DamageTags = std::move(DamageTags);
	Parms.Momentum = std::move(Momentum);
	Parms.HitInfo = std::move(HitInfo);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.EffectContext = std::move(EffectContext);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void AHuskPawn_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.OnForceSpawnEffectCompletion
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AHuskPawn_C::OnForceSpawnEffectCompletion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "OnForceSpawnEffectCompletion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.OnSpawnedFromRift
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AHuskPawn_C::OnSpawnedFromRift()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "OnSpawnedFromRift");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "ReceiveTick");

	Params::HuskPawn_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.AdditiveHitReactDelay
// (BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::AdditiveHitReactDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "AdditiveHitReactDelay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.PlayHuskAdditiveHitReacts
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   HitDirection                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::PlayHuskAdditiveHitReacts(const struct FVector& HitDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "PlayHuskAdditiveHitReacts");

	Params::HuskPawn_C_PlayHuskAdditiveHitReacts Parms{};

	Parms.HitDirection = std::move(HitDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.MantleEnd
// (Public, BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::MantleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "MantleEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.MantleStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   StartPos                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   MidPos                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   EndPos                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    LowWall                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MidWall                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    FullWall                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    WindowWall                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::MantleStart(const struct FVector& StartPos, const struct FVector& MidPos, const struct FVector& EndPos, bool LowWall, bool MidWall, bool FullWall, bool WindowWall)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "MantleStart");

	Params::HuskPawn_C_MantleStart Parms{};

	Parms.StartPos = std::move(StartPos);
	Parms.MidPos = std::move(MidPos);
	Parms.EndPos = std::move(EndPos);
	Parms.LowWall = LowWall;
	Parms.MidWall = MidWall;
	Parms.FullWall = FullWall;
	Parms.WindowWall = WindowWall;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.OnDeathPlayEffects
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FGameplayTagContainer&     DamageTags                                             (ConstParm, Parm, OutParm, ReferenceParm)
// const struct FVector&                   Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                HitInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class AFortPawn*                        InstigatedBy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FGameplayEffectContextHandle&EffectContext                                          (Parm)

void AHuskPawn_C::OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "OnDeathPlayEffects");

	Params::HuskPawn_C_OnDeathPlayEffects Parms{};

	Parms.Damage = Damage;
	Parms.DamageTags = std::move(DamageTags);
	Parms.Momentum = std::move(Momentum);
	Parms.HitInfo = std::move(HitInfo);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.EffectContext = std::move(EffectContext);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.OnLanded
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void AHuskPawn_C::OnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "OnLanded");

	Params::HuskPawn_C_OnLanded Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.OnEndSleepEffects
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AHuskPawn_C::OnEndSleepEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "OnEndSleepEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.OnBeginSleepEffects
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void AHuskPawn_C::OnBeginSleepEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "OnBeginSleepEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.PawnUniqueIDSet
// (Event, Public, BlueprintEvent)

void AHuskPawn_C::PawnUniqueIDSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "PawnUniqueIDSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.OnStunnedEffectEnd
// (BlueprintCosmetic, Event, Public, BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::OnStunnedEffectEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "OnStunnedEffectEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.OnStunnedEffectBegin
// (BlueprintCosmetic, Event, Public, BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::OnStunnedEffectBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "OnStunnedEffectBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.PortalCollision
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Collide_                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::PortalCollision(bool Collide_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "PortalCollision");

	Params::HuskPawn_C_PortalCollision Parms{};

	Parms.Collide_ = Collide_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.PortalFX
// (Public, BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::PortalFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "PortalFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.PortalGet
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABuildingActor*                   BuildingActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class ABuildingActor*>&          BuildingActorList                                      (Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AActor*                           BT                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::PortalGet(class ABuildingActor* BuildingActor, TArray<class ABuildingActor*>& BuildingActorList, class AActor* BT)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "PortalGet");

	Params::HuskPawn_C_PortalGet Parms{};

	Parms.BuildingActor = BuildingActor;
	Parms.BuildingActorList = std::move(BuildingActorList);
	Parms.BT = BT;

	UObject::ProcessEvent(Func, &Parms);

	BuildingActorList = std::move(Parms.BuildingActorList);
}


// Function HuskPawn.HuskPawn_C.TakerSoulSuckInterrupted
// (Public, BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::TakerSoulSuckInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "TakerSoulSuckInterrupted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.PortalClear
// (Public, BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::PortalClear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "PortalClear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.PortalAdd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABuildingActor*                   BuildingActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class ABuildingActor*>&          BuildingActorList                                      (Parm, OutParm, ZeroConstructor, ReferenceParm)

void AHuskPawn_C::PortalAdd(class ABuildingActor* BuildingActor, TArray<class ABuildingActor*>& BuildingActorList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "PortalAdd");

	Params::HuskPawn_C_PortalAdd Parms{};

	Parms.BuildingActor = BuildingActor;
	Parms.BuildingActorList = std::move(BuildingActorList);

	UObject::ProcessEvent(Func, &Parms);

	BuildingActorList = std::move(Parms.BuildingActorList);
}


// Function HuskPawn.HuskPawn_C.TakerSoulSuckSoundEnd
// (Public, BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::TakerSoulSuckSoundEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "TakerSoulSuckSoundEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.TakerSoulSuckSoundBegin
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::TakerSoulSuckSoundBegin(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "TakerSoulSuckSoundBegin");

	Params::HuskPawn_C_TakerSoulSuckSoundBegin Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.TakerAttackFSM
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SuccessfulHit                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::TakerAttackFSM(bool SuccessfulHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "TakerAttackFSM");

	Params::HuskPawn_C_TakerAttackFSM Parms{};

	Parms.SuccessfulHit = SuccessfulHit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.IsTakerWallPortalAvailable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Portal_Available_                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::IsTakerWallPortalAvailable(bool Portal_Available_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "IsTakerWallPortalAvailable");

	Params::HuskPawn_C_IsTakerWallPortalAvailable Parms{};

	Parms.Portal_Available_ = Portal_Available_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.TakerWallPortalBehavior
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BuildingPart                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UBTTask_BlueprintBase*            Task                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   DesiredMoveLocation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Debug                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::TakerWallPortalBehavior(class AActor* BuildingPart, class UBTTask_BlueprintBase* Task, const struct FVector& DesiredMoveLocation, bool Debug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "TakerWallPortalBehavior");

	Params::HuskPawn_C_TakerWallPortalBehavior Parms{};

	Parms.BuildingPart = BuildingPart;
	Parms.Task = Task;
	Parms.DesiredMoveLocation = std::move(DesiredMoveLocation);
	Parms.Debug = Debug;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.EndTakerSwoopAttack
// (Public, BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::EndTakerSwoopAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "EndTakerSwoopAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.BeginTakerSwoopAttack
// (Public, BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::BeginTakerSwoopAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "BeginTakerSwoopAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.ResetTakerSpecialAttackTimer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Swoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    SoulSuckMelee                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Portal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::ResetTakerSpecialAttackTimer(bool Swoop, bool SoulSuckMelee, bool Portal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "ResetTakerSpecialAttackTimer");

	Params::HuskPawn_C_ResetTakerSpecialAttackTimer Parms{};

	Parms.Swoop = Swoop;
	Parms.SoulSuckMelee = SoulSuckMelee;
	Parms.Portal = Portal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.VerifyTakerAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SpecialAttack                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Swoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Soul_Suck                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Portal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::VerifyTakerAttack(bool SpecialAttack, bool Swoop, bool Soul_Suck, bool Portal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "VerifyTakerAttack");

	Params::HuskPawn_C_VerifyTakerAttack Parms{};

	Parms.SpecialAttack = SpecialAttack;
	Parms.Swoop = Swoop;
	Parms.Soul_Suck = Soul_Suck;
	Parms.Portal = Portal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.HuskEvadeStart
// (Public, BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::HuskEvadeStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "HuskEvadeStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.FlingerEnemyDied
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            PawnThatDied                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::FlingerEnemyDied(class APawn* PawnThatDied)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "FlingerEnemyDied");

	Params::HuskPawn_C_FlingerEnemyDied Parms{};

	Parms.PawnThatDied = PawnThatDied;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.AlertEnemySpawnedByFlinger
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   PushMomentum_0                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   PushDuration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class APawn*                            OwningFlinger                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::AlertEnemySpawnedByFlinger(const struct FVector& PushMomentum_0, float PushDuration, class APawn* OwningFlinger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "AlertEnemySpawnedByFlinger");

	Params::HuskPawn_C_AlertEnemySpawnedByFlinger Parms{};

	Parms.PushMomentum_0 = std::move(PushMomentum_0);
	Parms.PushDuration = PushDuration;
	Parms.OwningFlinger = OwningFlinger;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.FlingerEnemyFailedToSpawn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortProjectileBase*              FailedProjectile                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::FlingerEnemyFailedToSpawn(class AFortProjectileBase* FailedProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "FlingerEnemyFailedToSpawn");

	Params::HuskPawn_C_FlingerEnemyFailedToSpawn Parms{};

	Parms.FailedProjectile = FailedProjectile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.FlingerThrewAProjectileContainingAnEnemy
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortProjectileBase*              Projectile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::FlingerThrewAProjectileContainingAnEnemy(class AFortProjectileBase* Projectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "FlingerThrewAProjectileContainingAnEnemy");

	Params::HuskPawn_C_FlingerThrewAProjectileContainingAnEnemy Parms{};

	Parms.Projectile = Projectile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.FlingerCan'tSpawnAnEnemy
// (Public, BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::FlingerCan_tSpawnAnEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "FlingerCan'tSpawnAnEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.FlingerCanSpawnAnEnemy
// (Public, BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::FlingerCanSpawnAnEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "FlingerCanSpawnAnEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.CanFlingerSpawnAnEnemy
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ActorWhoAsked                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::CanFlingerSpawnAnEnemy(class AActor* ActorWhoAsked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "CanFlingerSpawnAnEnemy");

	Params::HuskPawn_C_CanFlingerSpawnAnEnemy Parms{};

	Parms.ActorWhoAsked = ActorWhoAsked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.FlingerSpawnedAnEnemy
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFortAIPawn*                      EnemySpawned                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AFortProjectileBase*              ProjectileThatSpawnedThisEnemy                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::FlingerSpawnedAnEnemy(class AFortAIPawn* EnemySpawned, class AFortProjectileBase* ProjectileThatSpawnedThisEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "FlingerSpawnedAnEnemy");

	Params::HuskPawn_C_FlingerSpawnedAnEnemy Parms{};

	Parms.EnemySpawned = EnemySpawned;
	Parms.ProjectileThatSpawnedThisEnemy = ProjectileThatSpawnedThisEnemy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.Timeline_1__Spawn__EventFunc
// (BlueprintEvent)

void AHuskPawn_C::Timeline_1__Spawn__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "Timeline_1__Spawn__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.Timeline_1__UpdateFunc
// (BlueprintEvent)

void AHuskPawn_C::Timeline_1__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "Timeline_1__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.Timeline_1__FinishedFunc
// (BlueprintEvent)

void AHuskPawn_C::Timeline_1__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "Timeline_1__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.Dissolve__UpdateFunc
// (BlueprintEvent)

void AHuskPawn_C::Dissolve__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "Dissolve__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.Dissolve__FinishedFunc
// (BlueprintEvent)

void AHuskPawn_C::Dissolve__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "Dissolve__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.PickColorFromAnArrayOfColors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FLinearColor>&            ArrayOfColors                                          (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FLinearColor*                    Color                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::PickColorFromAnArrayOfColors(TArray<struct FLinearColor>& ArrayOfColors, struct FLinearColor* Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "PickColorFromAnArrayOfColors");

	Params::HuskPawn_C_PickColorFromAnArrayOfColors Parms{};

	Parms.ArrayOfColors = std::move(ArrayOfColors);

	UObject::ProcessEvent(Func, &Parms);

	ArrayOfColors = std::move(Parms.ArrayOfColors);

	if (Color != nullptr)
		*Color = std::move(Parms.Color);
}


// Function HuskPawn.HuskPawn_C.PlayAdditiveHitReacts
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   HitDirection                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::PlayAdditiveHitReacts(const struct FVector& HitDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "PlayAdditiveHitReacts");

	Params::HuskPawn_C_PlayAdditiveHitReacts Parms{};

	Parms.HitDirection = std::move(HitDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function HuskPawn.HuskPawn_C.ResetHuskRotationRateToDefault
// (Public, BlueprintCallable, BlueprintEvent)

void AHuskPawn_C::ResetHuskRotationRateToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "ResetHuskRotationRateToDefault");

	UObject::ProcessEvent(Func, nullptr);
}


// Function HuskPawn.HuskPawn_C.SetHuskRotationRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   YawRate                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AHuskPawn_C::SetHuskRotationRate(float YawRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HuskPawn_C", "SetHuskRotationRate");

	Params::HuskPawn_C_SetHuskRotationRate Parms{};

	Parms.YawRate = YawRate;

	UObject::ProcessEvent(Func, &Parms);
}

}

#pragma pack(pop)
