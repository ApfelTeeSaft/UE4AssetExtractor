#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemBadge

#include "Basic.hpp"

#include "ItemDisplayStyle_structs.hpp"
#include "SlateCore_structs.hpp"
#include "ItemDisplayMode_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteGame_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function ItemBadge.ItemBadge_C.Update
// 0x052C (0x052C - 0x0000)
struct ItemBadge_C_Update final
{
public:
	EFortBrushSize                                Brush_Size_0;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Display_Style;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayMode                              Display_Mode;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortRarityItemData                    RarityData;                                        // 0x0004(0x0070)(Parm)
	class UFortItem*                              Item_Data;                                         // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFortItemDefinition*                    CallFunc_GetItemDefinitionBP_ReturnValue;          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetMaxLevel_ReturnValue;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFortWorkerType*                        K2Node_DynamicCast_AsFort_Worker_Type;             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetLevel_ReturnValue;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortItemTier                                 CallFunc_GetTier_ReturnValue;                      // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F[0x1];                                       // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBoxSlot*                       CallFunc_SlotAsVerticalBoxSlot_ReturnValue;        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue; // 0x0094(0x0074)(ConstParm)
	struct FMargin                                CallFunc_GetMarginBySizeFromMultiSizeMargin_ReturnValue; // 0x0108(0x0010)(ConstParm)
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue2; // 0x0118(0x0074)(ConstParm)
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue3; // 0x018C(0x0074)(ConstParm)
	struct FSlateBrush                            CallFunc_Get_Item_Tier_Icon_Tier_Brush;            // 0x0200(0x0074)()
	struct FFortMultiSizeBrush                    Icon_Brush;                                        // 0x0274(0x02B8)(Edit)
};
static_assert(alignof(ItemBadge_C_Update) == 0x000004, "Wrong alignment on ItemBadge_C_Update");
static_assert(sizeof(ItemBadge_C_Update) == 0x00052C, "Wrong size on ItemBadge_C_Update");
static_assert(offsetof(ItemBadge_C_Update, Brush_Size_0) == 0x000000, "Member 'ItemBadge_C_Update::Brush_Size_0' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, Display_Style) == 0x000001, "Member 'ItemBadge_C_Update::Display_Style' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, Display_Mode) == 0x000002, "Member 'ItemBadge_C_Update::Display_Mode' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, RarityData) == 0x000004, "Member 'ItemBadge_C_Update::RarityData' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, Item_Data) == 0x000074, "Member 'ItemBadge_C_Update::Item_Data' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, CallFunc_GetItemDefinitionBP_ReturnValue) == 0x000078, "Member 'ItemBadge_C_Update::CallFunc_GetItemDefinitionBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, CallFunc_GetMaxLevel_ReturnValue) == 0x00007C, "Member 'ItemBadge_C_Update::CallFunc_GetMaxLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, K2Node_DynamicCast_AsFort_Worker_Type) == 0x000080, "Member 'ItemBadge_C_Update::K2Node_DynamicCast_AsFort_Worker_Type' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, K2Node_DynamicCast_bSuccess) == 0x000084, "Member 'ItemBadge_C_Update::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, CallFunc_GetLevel_ReturnValue) == 0x000088, "Member 'ItemBadge_C_Update::CallFunc_GetLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, CallFunc_GetTier_ReturnValue) == 0x00008C, "Member 'ItemBadge_C_Update::CallFunc_GetTier_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, CallFunc_IsValid_ReturnValue) == 0x00008D, "Member 'ItemBadge_C_Update::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00008E, "Member 'ItemBadge_C_Update::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, CallFunc_SlotAsVerticalBoxSlot_ReturnValue) == 0x000090, "Member 'ItemBadge_C_Update::CallFunc_SlotAsVerticalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue) == 0x000094, "Member 'ItemBadge_C_Update::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, CallFunc_GetMarginBySizeFromMultiSizeMargin_ReturnValue) == 0x000108, "Member 'ItemBadge_C_Update::CallFunc_GetMarginBySizeFromMultiSizeMargin_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue2) == 0x000118, "Member 'ItemBadge_C_Update::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue2' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue3) == 0x00018C, "Member 'ItemBadge_C_Update::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue3' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, CallFunc_Get_Item_Tier_Icon_Tier_Brush) == 0x000200, "Member 'ItemBadge_C_Update::CallFunc_Get_Item_Tier_Icon_Tier_Brush' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Update, Icon_Brush) == 0x000274, "Member 'ItemBadge_C_Update::Icon_Brush' has a wrong offset!");

// Function ItemBadge.ItemBadge_C.Refresh
// 0x0028 (0x0028 - 0x0000)
struct ItemBadge_C_Refresh final
{
public:
	class UFortItem*                              Item_Data;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Display_Style;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayMode                              Display_Mode;                                      // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetLevel_ReturnValue;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetMaxLevel_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortItemTier                                 CallFunc_GetTier_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue2;           // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable3;                               // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable4;                               // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable5;                               // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable6;                               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable7;                               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select2_Default;                            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ItemBadge_C_Refresh) == 0x000004, "Wrong alignment on ItemBadge_C_Refresh");
static_assert(sizeof(ItemBadge_C_Refresh) == 0x000028, "Wrong size on ItemBadge_C_Refresh");
static_assert(offsetof(ItemBadge_C_Refresh, Item_Data) == 0x000000, "Member 'ItemBadge_C_Refresh::Item_Data' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, Display_Style) == 0x000004, "Member 'ItemBadge_C_Refresh::Display_Style' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, Display_Mode) == 0x000005, "Member 'ItemBadge_C_Refresh::Display_Mode' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, Temp_bool_Variable) == 0x000006, "Member 'ItemBadge_C_Refresh::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000007, "Member 'ItemBadge_C_Refresh::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000008, "Member 'ItemBadge_C_Refresh::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, CallFunc_GetLevel_ReturnValue) == 0x00000C, "Member 'ItemBadge_C_Refresh::CallFunc_GetLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, CallFunc_GetMaxLevel_ReturnValue) == 0x000010, "Member 'ItemBadge_C_Refresh::CallFunc_GetMaxLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, CallFunc_GetTier_ReturnValue) == 0x000014, "Member 'ItemBadge_C_Refresh::CallFunc_GetTier_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, CallFunc_IsValid_ReturnValue) == 0x000015, "Member 'ItemBadge_C_Refresh::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, CallFunc_NotEqual_ByteByte_ReturnValue2) == 0x000016, "Member 'ItemBadge_C_Refresh::CallFunc_NotEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, CallFunc_BooleanOR_ReturnValue) == 0x000017, "Member 'ItemBadge_C_Refresh::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, Temp_byte_Variable) == 0x000018, "Member 'ItemBadge_C_Refresh::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, CallFunc_BooleanAND_ReturnValue) == 0x000019, "Member 'ItemBadge_C_Refresh::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, Temp_byte_Variable2) == 0x00001A, "Member 'ItemBadge_C_Refresh::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, Temp_byte_Variable3) == 0x00001B, "Member 'ItemBadge_C_Refresh::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, Temp_bool_Variable2) == 0x00001C, "Member 'ItemBadge_C_Refresh::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, Temp_bool_Variable3) == 0x00001D, "Member 'ItemBadge_C_Refresh::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, Temp_bool_Variable4) == 0x00001E, "Member 'ItemBadge_C_Refresh::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, Temp_bool_Variable5) == 0x00001F, "Member 'ItemBadge_C_Refresh::Temp_bool_Variable5' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, Temp_bool_Variable6) == 0x000020, "Member 'ItemBadge_C_Refresh::Temp_bool_Variable6' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, Temp_bool_Variable7) == 0x000021, "Member 'ItemBadge_C_Refresh::Temp_bool_Variable7' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, K2Node_Select_Default) == 0x000022, "Member 'ItemBadge_C_Refresh::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, CallFunc_BooleanAND_ReturnValue2) == 0x000023, "Member 'ItemBadge_C_Refresh::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(ItemBadge_C_Refresh, K2Node_Select2_Default) == 0x000024, "Member 'ItemBadge_C_Refresh::K2Node_Select2_Default' has a wrong offset!");

}

#pragma pack(pop)
