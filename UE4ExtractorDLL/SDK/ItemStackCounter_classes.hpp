#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemStackCounter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteUI_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// WidgetBlueprintGeneratedClass ItemStackCounter.ItemStackCounter_C
// 0x0424 (0x0668 - 0x0244)
class UItemStackCounter_C final : public UFortUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0244(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                _Border__Base;                                     // 0x0248(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USizeBox*                               _SizeBox_;                                         // 0x024C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             _Text__Counter;                                    // 0x0250(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	struct FFortMultiSizeBrush                    MultiSizeBase;                                     // 0x0254(0x02B8)(Edit, BlueprintVisible)
	struct FFortMultiSizeFont                     MultiSizeFont;                                     // 0x050C(0x00F0)(Edit, BlueprintVisible)
	struct FFortMultiSizeMargin                   MultiSizeMargin;                                   // 0x05FC(0x0060)(Edit, BlueprintVisible)
	EFortBrushSize                                Brush_Size;                                        // 0x065C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65D[0x3];                                      // 0x065D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x0660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          AlwaysVisible;                                     // 0x0664(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ItemStackCounter(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void Update(EFortBrushSize Brush_Size_0, int32 Count_0);
	void Set_Stack_Count(int32 Count_0);
	void Refresh_Visibility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ItemStackCounter_C">();
	}
	static class UItemStackCounter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemStackCounter_C>();
	}
};
static_assert(alignof(UItemStackCounter_C) == 0x000004, "Wrong alignment on UItemStackCounter_C");
static_assert(sizeof(UItemStackCounter_C) == 0x000668, "Wrong size on UItemStackCounter_C");
static_assert(offsetof(UItemStackCounter_C, UberGraphFrame) == 0x000244, "Member 'UItemStackCounter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UItemStackCounter_C, _Border__Base) == 0x000248, "Member 'UItemStackCounter_C::_Border__Base' has a wrong offset!");
static_assert(offsetof(UItemStackCounter_C, _SizeBox_) == 0x00024C, "Member 'UItemStackCounter_C::_SizeBox_' has a wrong offset!");
static_assert(offsetof(UItemStackCounter_C, _Text__Counter) == 0x000250, "Member 'UItemStackCounter_C::_Text__Counter' has a wrong offset!");
static_assert(offsetof(UItemStackCounter_C, MultiSizeBase) == 0x000254, "Member 'UItemStackCounter_C::MultiSizeBase' has a wrong offset!");
static_assert(offsetof(UItemStackCounter_C, MultiSizeFont) == 0x00050C, "Member 'UItemStackCounter_C::MultiSizeFont' has a wrong offset!");
static_assert(offsetof(UItemStackCounter_C, MultiSizeMargin) == 0x0005FC, "Member 'UItemStackCounter_C::MultiSizeMargin' has a wrong offset!");
static_assert(offsetof(UItemStackCounter_C, Brush_Size) == 0x00065C, "Member 'UItemStackCounter_C::Brush_Size' has a wrong offset!");
static_assert(offsetof(UItemStackCounter_C, Count) == 0x000660, "Member 'UItemStackCounter_C::Count' has a wrong offset!");
static_assert(offsetof(UItemStackCounter_C, AlwaysVisible) == 0x000664, "Member 'UItemStackCounter_C::AlwaysVisible' has a wrong offset!");

}

#pragma pack(pop)
