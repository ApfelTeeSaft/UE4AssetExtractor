#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Item

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "ItemDisplayMode_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "ItemDisplayStyle_structs.hpp"
#include "ItemTextureSet_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ItemTextureStylesheet_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// WidgetBlueprintGeneratedClass Item.Item_C
// 0x1528 (0x1C80 - 0x0758)
class UItem_C final : public UFortItemWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0758(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                _Border__Secondary_Icon_Fill;                      // 0x075C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBorder*                                _Border__Secondary_Icon_Frame;                     // 0x0760(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBorder*                                _Border__Tertiary_Icon_Fill;                       // 0x0764(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UBorder*                                _Border__Tertiary_Icon_Frame;                      // 0x0768(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UHorizontalBox*                         _Horizontal_Box__Subtype_Icons;                    // 0x076C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Shade;                                             // 0x0770(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 _Image__Background;                                // 0x0774(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 _Image__Bevel_Bottom;                              // 0x0778(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 _Image__Bevel_Side;                                // 0x077C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 _Image__Bevel_Top;                                 // 0x0780(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 _Image__Item_Icon;                                 // 0x0784(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 _Image__Secondary_Icon;                            // 0x0788(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 _Image__Tertiary_Icon;                             // 0x078C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             _Text__Ammo_Counter;                               // 0x0790(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             _Text__Ammo_Counter_Alternate;                     // 0x0794(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           _Vertical_Box__Subtype_Icons___Ammo_Count;         // 0x0798(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UItemBadge_C*                           ItemBadge;                                         // 0x079C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UItemCooldownMeter_C*                   ItemCooldownMeter;                                 // 0x07A0(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UItemDurabilityMeter_C*                 ItemDurabilityMeter;                               // 0x07A4(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UItemStackCounter_C*                    ItemStackCounter;                                  // 0x07A8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class USizeBox*                               SizeBox;                                           // 0x07AC(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	struct FFortRarityItemData                    RarityData;                                        // 0x07B0(0x0070)(Edit, BlueprintVisible)
	bool                                          CanBeDragged;                                      // 0x0820(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_821[0x3];                                      // 0x0821(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DragTagString;                                     // 0x0824(0x000C)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn)
	class UFortItem*                              ItemData;                                          // 0x0830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EItemDisplayMode                              DisplayMode;                                       // 0x0834(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             DisplayStyle;                                      // 0x0835(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_836[0x2];                                      // 0x0836(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemTextureSet                        Item_Textures;                                     // 0x0838(0x0D9C)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FItemTextureStylesheet                 Item_Texture_Stylesheet;                           // 0x15D4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFortMultiSizeBrush                    Subtype_Icon_Frame;                                // 0x15E0(0x02B8)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFortMultiSizeFont                     AmmoMultiFont;                                     // 0x1898(0x00F0)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   TooltipHeaderText;                                 // 0x1988(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USlateBrushAsset*                       TooltipHeaderIcon;                                 // 0x1994(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InfiniteAmmo;                                      // 0x1998(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1999[0x3];                                     // 0x1999(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemDefinition*                    DemoItemData;                                      // 0x199C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FFortMultiSizeBrush                    Subtype_Icon_Fill;                                 // 0x19A0(0x02B8)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           Subtype_Fill_Color;                                // 0x1C58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Subtype_Frame_Color;                               // 0x1C68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OverrideSecondaryTypeIconColor;                    // 0x1C78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShowSecondaryTypeIcon;                             // 0x1C79(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShowTertiaryTypeIcon;                              // 0x1C7A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OverrideTertiaryTypeIconColor;                     // 0x1C7B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OverrideItemIconVisibility;                        // 0x1C7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShowStackCounter;                                  // 0x1C7D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          OverrideDisplayStyle;                              // 0x1C7E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Item(int32 EntryPoint);
	void OnCursorModeChanged(bool bCursorModeEnabled, class FName ActionName, class UUserWidget* CursorModeContentWidget);
	void BPOnItemSet(class UFortItem* NewItem);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void BPOnItemChanged();
	void Update_Base();
	void Set_Item_Data(class UFortItem* Item_Data);
	void Update_Stack_Counter();
	void Update_All();
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	void Update_Size_Box();
	void Update_Background();
	void Get_Item_Texture_Set(EItemDisplayStyle Display_Style, struct FItemTextureSet* Texture_Set);
	void Update_Item_Icon();
	void Level_Badge();
	void Get_Display_Style(EFortItemType Item_Type, EItemDisplayStyle* Style_0);
	void Update_Masked_Gradient(class UImage* Image, class UTexture* Texture_Mask, const struct FLinearColor& Color_A, const struct FLinearColor& Color_B);
	void Update_Bottom_Bevel();
	void Update_Top_Bevel();
	void Update_Side_Bevel();
	void Shade_0();
	void Update_Subtype_Icons___Ammo();
	void Set_Ammo_Count(int32 Count);
	void Set_Display_Mode(EFortUIState Current_UI_State, bool Cursor_Mode);
	class UWidget* Get_Item_Tooltip();
	void Set_Tooltip_Header(const class FText& Header_Text, class USlateBrushAsset* Icon_Brush);
	void Update_Durability_Meter();
	void Update_Cooldown_Meter();
	void Set_Durability(float Durability);
	void Set_Cooldown(const struct FTimespan& Time_Left, float Percentage, bool Show_Disabled_Without_Cooldown);
	void Set_Stack_Count(int32 Count);
	void Refresh();
	void Resize(EFortBrushSize Brush_Size);
	struct FEventReply OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	void Set_Subtype_Icons___Ammo_Color(bool Override_Secondary_Icon_Color, const struct FLinearColor& Secondary_Icon_Override_Color, bool Override_Tertiary_Icon_Color, const struct FLinearColor& Tertiary_Icon_Override_Color);
	void Set_Item_Icon_Visibility(bool Override_Icon_Visibility, ESlateVisibility Item_Icon_Visibility);
	void Hide_Subtype_Icons();
	void Set_Display_Style(bool Override_Display_Style, EItemDisplayStyle DisplayStyle_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Item_C">();
	}
	static class UItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItem_C>();
	}
};
static_assert(alignof(UItem_C) == 0x000004, "Wrong alignment on UItem_C");
static_assert(sizeof(UItem_C) == 0x001C80, "Wrong size on UItem_C");
static_assert(offsetof(UItem_C, UberGraphFrame) == 0x000758, "Member 'UItem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UItem_C, _Border__Secondary_Icon_Fill) == 0x00075C, "Member 'UItem_C::_Border__Secondary_Icon_Fill' has a wrong offset!");
static_assert(offsetof(UItem_C, _Border__Secondary_Icon_Frame) == 0x000760, "Member 'UItem_C::_Border__Secondary_Icon_Frame' has a wrong offset!");
static_assert(offsetof(UItem_C, _Border__Tertiary_Icon_Fill) == 0x000764, "Member 'UItem_C::_Border__Tertiary_Icon_Fill' has a wrong offset!");
static_assert(offsetof(UItem_C, _Border__Tertiary_Icon_Frame) == 0x000768, "Member 'UItem_C::_Border__Tertiary_Icon_Frame' has a wrong offset!");
static_assert(offsetof(UItem_C, _Horizontal_Box__Subtype_Icons) == 0x00076C, "Member 'UItem_C::_Horizontal_Box__Subtype_Icons' has a wrong offset!");
static_assert(offsetof(UItem_C, Shade) == 0x000770, "Member 'UItem_C::Shade' has a wrong offset!");
static_assert(offsetof(UItem_C, _Image__Background) == 0x000774, "Member 'UItem_C::_Image__Background' has a wrong offset!");
static_assert(offsetof(UItem_C, _Image__Bevel_Bottom) == 0x000778, "Member 'UItem_C::_Image__Bevel_Bottom' has a wrong offset!");
static_assert(offsetof(UItem_C, _Image__Bevel_Side) == 0x00077C, "Member 'UItem_C::_Image__Bevel_Side' has a wrong offset!");
static_assert(offsetof(UItem_C, _Image__Bevel_Top) == 0x000780, "Member 'UItem_C::_Image__Bevel_Top' has a wrong offset!");
static_assert(offsetof(UItem_C, _Image__Item_Icon) == 0x000784, "Member 'UItem_C::_Image__Item_Icon' has a wrong offset!");
static_assert(offsetof(UItem_C, _Image__Secondary_Icon) == 0x000788, "Member 'UItem_C::_Image__Secondary_Icon' has a wrong offset!");
static_assert(offsetof(UItem_C, _Image__Tertiary_Icon) == 0x00078C, "Member 'UItem_C::_Image__Tertiary_Icon' has a wrong offset!");
static_assert(offsetof(UItem_C, _Text__Ammo_Counter) == 0x000790, "Member 'UItem_C::_Text__Ammo_Counter' has a wrong offset!");
static_assert(offsetof(UItem_C, _Text__Ammo_Counter_Alternate) == 0x000794, "Member 'UItem_C::_Text__Ammo_Counter_Alternate' has a wrong offset!");
static_assert(offsetof(UItem_C, _Vertical_Box__Subtype_Icons___Ammo_Count) == 0x000798, "Member 'UItem_C::_Vertical_Box__Subtype_Icons___Ammo_Count' has a wrong offset!");
static_assert(offsetof(UItem_C, ItemBadge) == 0x00079C, "Member 'UItem_C::ItemBadge' has a wrong offset!");
static_assert(offsetof(UItem_C, ItemCooldownMeter) == 0x0007A0, "Member 'UItem_C::ItemCooldownMeter' has a wrong offset!");
static_assert(offsetof(UItem_C, ItemDurabilityMeter) == 0x0007A4, "Member 'UItem_C::ItemDurabilityMeter' has a wrong offset!");
static_assert(offsetof(UItem_C, ItemStackCounter) == 0x0007A8, "Member 'UItem_C::ItemStackCounter' has a wrong offset!");
static_assert(offsetof(UItem_C, SizeBox) == 0x0007AC, "Member 'UItem_C::SizeBox' has a wrong offset!");
static_assert(offsetof(UItem_C, RarityData) == 0x0007B0, "Member 'UItem_C::RarityData' has a wrong offset!");
static_assert(offsetof(UItem_C, CanBeDragged) == 0x000820, "Member 'UItem_C::CanBeDragged' has a wrong offset!");
static_assert(offsetof(UItem_C, DragTagString) == 0x000824, "Member 'UItem_C::DragTagString' has a wrong offset!");
static_assert(offsetof(UItem_C, ItemData) == 0x000830, "Member 'UItem_C::ItemData' has a wrong offset!");
static_assert(offsetof(UItem_C, DisplayMode) == 0x000834, "Member 'UItem_C::DisplayMode' has a wrong offset!");
static_assert(offsetof(UItem_C, DisplayStyle) == 0x000835, "Member 'UItem_C::DisplayStyle' has a wrong offset!");
static_assert(offsetof(UItem_C, Item_Textures) == 0x000838, "Member 'UItem_C::Item_Textures' has a wrong offset!");
static_assert(offsetof(UItem_C, Item_Texture_Stylesheet) == 0x0015D4, "Member 'UItem_C::Item_Texture_Stylesheet' has a wrong offset!");
static_assert(offsetof(UItem_C, Subtype_Icon_Frame) == 0x0015E0, "Member 'UItem_C::Subtype_Icon_Frame' has a wrong offset!");
static_assert(offsetof(UItem_C, AmmoMultiFont) == 0x001898, "Member 'UItem_C::AmmoMultiFont' has a wrong offset!");
static_assert(offsetof(UItem_C, TooltipHeaderText) == 0x001988, "Member 'UItem_C::TooltipHeaderText' has a wrong offset!");
static_assert(offsetof(UItem_C, TooltipHeaderIcon) == 0x001994, "Member 'UItem_C::TooltipHeaderIcon' has a wrong offset!");
static_assert(offsetof(UItem_C, InfiniteAmmo) == 0x001998, "Member 'UItem_C::InfiniteAmmo' has a wrong offset!");
static_assert(offsetof(UItem_C, DemoItemData) == 0x00199C, "Member 'UItem_C::DemoItemData' has a wrong offset!");
static_assert(offsetof(UItem_C, Subtype_Icon_Fill) == 0x0019A0, "Member 'UItem_C::Subtype_Icon_Fill' has a wrong offset!");
static_assert(offsetof(UItem_C, Subtype_Fill_Color) == 0x001C58, "Member 'UItem_C::Subtype_Fill_Color' has a wrong offset!");
static_assert(offsetof(UItem_C, Subtype_Frame_Color) == 0x001C68, "Member 'UItem_C::Subtype_Frame_Color' has a wrong offset!");
static_assert(offsetof(UItem_C, OverrideSecondaryTypeIconColor) == 0x001C78, "Member 'UItem_C::OverrideSecondaryTypeIconColor' has a wrong offset!");
static_assert(offsetof(UItem_C, ShowSecondaryTypeIcon) == 0x001C79, "Member 'UItem_C::ShowSecondaryTypeIcon' has a wrong offset!");
static_assert(offsetof(UItem_C, ShowTertiaryTypeIcon) == 0x001C7A, "Member 'UItem_C::ShowTertiaryTypeIcon' has a wrong offset!");
static_assert(offsetof(UItem_C, OverrideTertiaryTypeIconColor) == 0x001C7B, "Member 'UItem_C::OverrideTertiaryTypeIconColor' has a wrong offset!");
static_assert(offsetof(UItem_C, OverrideItemIconVisibility) == 0x001C7C, "Member 'UItem_C::OverrideItemIconVisibility' has a wrong offset!");
static_assert(offsetof(UItem_C, ShowStackCounter) == 0x001C7D, "Member 'UItem_C::ShowStackCounter' has a wrong offset!");
static_assert(offsetof(UItem_C, OverrideDisplayStyle) == 0x001C7E, "Member 'UItem_C::OverrideDisplayStyle' has a wrong offset!");

}

#pragma pack(pop)
