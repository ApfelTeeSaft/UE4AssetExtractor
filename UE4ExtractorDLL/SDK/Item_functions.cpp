#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Item

#include "Basic.hpp"

#include "Item_classes.hpp"
#include "Item_parameters.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Function Item.Item_C.ExecuteUbergraph_Item
// ()
// Parameters:
// int32                                   EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::ExecuteUbergraph_Item(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "ExecuteUbergraph_Item");

	Params::Item_C_ExecuteUbergraph_Item Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.OnCursorModeChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCursorModeEnabled                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UUserWidget*                      CursorModeContentWidget                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::OnCursorModeChanged(bool bCursorModeEnabled, class FName ActionName, class UUserWidget* CursorModeContentWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "OnCursorModeChanged");

	Params::Item_C_OnCursorModeChanged Parms{};

	Parms.bCursorModeEnabled = bCursorModeEnabled;
	Parms.ActionName = ActionName;
	Parms.CursorModeContentWidget = CursorModeContentWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.BPOnItemSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UFortItem*                        NewItem                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::BPOnItemSet(class UFortItem* NewItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "BPOnItemSet");

	Params::Item_C_BPOnItemSet Parms{};

	Parms.NewItem = NewItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "PreConstruct");

	Params::Item_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UItem_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.BPOnItemChanged
// (Event, Protected, BlueprintEvent)

void UItem_C::BPOnItemChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "BPOnItemChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Update Base
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UItem_C::Update_Base()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Update Base");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Set Item Data
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFortItem*                        Item_Data                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::Set_Item_Data(class UFortItem* Item_Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Set Item Data");

	Params::Item_C_Set_Item_Data Parms{};

	Parms.Item_Data = Item_Data;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.Update Stack Counter
// (Protected, BlueprintCallable, BlueprintEvent)

void UItem_C::Update_Stack_Counter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Update Stack Counter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Update All
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UItem_C::Update_All()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Update All");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UItem_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "OnMouseButtonDown");

	Params::Item_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Item.Item_C.OnDragDetected
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             PointerEvent                                           (ConstParm, Parm, OutParm, ReferenceParm)
// class UDragDropOperation**              Operation                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "OnDragDetected");

	Params::Item_C_OnDragDetected Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);

	UObject::ProcessEvent(Func, &Parms);

	if (Operation != nullptr)
		*Operation = Parms.Operation;
}


// Function Item.Item_C.Update Size Box
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UItem_C::Update_Size_Box()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Update Size Box");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Update Background
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UItem_C::Update_Background()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Update Background");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Get Item Texture Set
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EItemDisplayStyle                       Display_Style                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FItemTextureSet*                 Texture_Set                                            (Parm, OutParm)

void UItem_C::Get_Item_Texture_Set(EItemDisplayStyle Display_Style, struct FItemTextureSet* Texture_Set)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Get Item Texture Set");

	Params::Item_C_Get_Item_Texture_Set Parms{};

	Parms.Display_Style = Display_Style;

	UObject::ProcessEvent(Func, &Parms);

	if (Texture_Set != nullptr)
		*Texture_Set = std::move(Parms.Texture_Set);
}


// Function Item.Item_C.Update Item Icon
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UItem_C::Update_Item_Icon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Update Item Icon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Level Badge
// (Protected, BlueprintCallable, BlueprintEvent)

void UItem_C::Level_Badge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Level Badge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Get Display Style
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFortItemType                           Item_Type                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EItemDisplayStyle*                      Style_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::Get_Display_Style(EFortItemType Item_Type, EItemDisplayStyle* Style_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Get Display Style");

	Params::Item_C_Get_Display_Style Parms{};

	Parms.Item_Type = Item_Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Style_0 != nullptr)
		*Style_0 = Parms.Style_0;
}


// Function Item.Item_C.Update Masked Gradient
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UImage*                           Image                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UTexture*                         Texture_Mask                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FLinearColor&              Color_A                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FLinearColor&              Color_B                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::Update_Masked_Gradient(class UImage* Image, class UTexture* Texture_Mask, const struct FLinearColor& Color_A, const struct FLinearColor& Color_B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Update Masked Gradient");

	Params::Item_C_Update_Masked_Gradient Parms{};

	Parms.Image = Image;
	Parms.Texture_Mask = Texture_Mask;
	Parms.Color_A = std::move(Color_A);
	Parms.Color_B = std::move(Color_B);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.Update Bottom Bevel
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UItem_C::Update_Bottom_Bevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Update Bottom Bevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Update Top Bevel
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UItem_C::Update_Top_Bevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Update Top Bevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Update Side Bevel
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UItem_C::Update_Side_Bevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Update Side Bevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Shade
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UItem_C::Shade_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Shade");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Update Subtype Icons & Ammo
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UItem_C::Update_Subtype_Icons___Ammo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Update Subtype Icons & Ammo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Set Ammo Count
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::Set_Ammo_Count(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Set Ammo Count");

	Params::Item_C_Set_Ammo_Count Parms{};

	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.Set Display Mode
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFortUIState                            Current_UI_State                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Cursor_Mode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::Set_Display_Mode(EFortUIState Current_UI_State, bool Cursor_Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Set Display Mode");

	Params::Item_C_Set_Display_Mode Parms{};

	Parms.Current_UI_State = Current_UI_State;
	Parms.Cursor_Mode = Cursor_Mode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.Get Item Tooltip
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

class UWidget* UItem_C::Get_Item_Tooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Get Item Tooltip");

	Params::Item_C_Get_Item_Tooltip Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Item.Item_C.Set Tooltip Header
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Header_Text                                            (Parm)
// class USlateBrushAsset*                 Icon_Brush                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::Set_Tooltip_Header(const class FText& Header_Text, class USlateBrushAsset* Icon_Brush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Set Tooltip Header");

	Params::Item_C_Set_Tooltip_Header Parms{};

	Parms.Header_Text = std::move(Header_Text);
	Parms.Icon_Brush = Icon_Brush;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.Update Durability Meter
// (Protected, BlueprintCallable, BlueprintEvent)

void UItem_C::Update_Durability_Meter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Update Durability Meter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Update Cooldown Meter
// (Protected, BlueprintCallable, BlueprintEvent)

void UItem_C::Update_Cooldown_Meter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Update Cooldown Meter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Set Durability
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Durability                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::Set_Durability(float Durability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Set Durability");

	Params::Item_C_Set_Durability Parms{};

	Parms.Durability = Durability;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.Set Cooldown
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTimespan&                 Time_Left                                              (Parm, ZeroConstructor)
// float                                   Percentage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Show_Disabled_Without_Cooldown                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::Set_Cooldown(const struct FTimespan& Time_Left, float Percentage, bool Show_Disabled_Without_Cooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Set Cooldown");

	Params::Item_C_Set_Cooldown Parms{};

	Parms.Time_Left = std::move(Time_Left);
	Parms.Percentage = Percentage;
	Parms.Show_Disabled_Without_Cooldown = Show_Disabled_Without_Cooldown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.Set Stack Count
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::Set_Stack_Count(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Set Stack Count");

	Params::Item_C_Set_Stack_Count Parms{};

	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.Refresh
// (Public, BlueprintCallable, BlueprintEvent)

void UItem_C::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Refresh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Resize
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFortBrushSize                          Brush_Size                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::Resize(EFortBrushSize Brush_Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Resize");

	Params::Item_C_Resize Parms{};

	Parms.Brush_Size = Brush_Size;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.OnMouseButtonDoubleClick
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 InMyGeometry                                           (Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             InMouseEvent                                           (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UItem_C::OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "OnMouseButtonDoubleClick");

	Params::Item_C_OnMouseButtonDoubleClick Parms{};

	Parms.InMyGeometry = std::move(InMyGeometry);
	Parms.InMouseEvent = std::move(InMouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Item.Item_C.Set Subtype Icons & Ammo Color
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Override_Secondary_Icon_Color                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FLinearColor&              Secondary_Icon_Override_Color                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Override_Tertiary_Icon_Color                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FLinearColor&              Tertiary_Icon_Override_Color                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::Set_Subtype_Icons___Ammo_Color(bool Override_Secondary_Icon_Color, const struct FLinearColor& Secondary_Icon_Override_Color, bool Override_Tertiary_Icon_Color, const struct FLinearColor& Tertiary_Icon_Override_Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Set Subtype Icons & Ammo Color");

	Params::Item_C_Set_Subtype_Icons___Ammo_Color Parms{};

	Parms.Override_Secondary_Icon_Color = Override_Secondary_Icon_Color;
	Parms.Secondary_Icon_Override_Color = std::move(Secondary_Icon_Override_Color);
	Parms.Override_Tertiary_Icon_Color = Override_Tertiary_Icon_Color;
	Parms.Tertiary_Icon_Override_Color = std::move(Tertiary_Icon_Override_Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.Set Item Icon Visibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Override_Icon_Visibility                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// ESlateVisibility                        Item_Icon_Visibility                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::Set_Item_Icon_Visibility(bool Override_Icon_Visibility, ESlateVisibility Item_Icon_Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Set Item Icon Visibility");

	Params::Item_C_Set_Item_Icon_Visibility Parms{};

	Parms.Override_Icon_Visibility = Override_Icon_Visibility;
	Parms.Item_Icon_Visibility = Item_Icon_Visibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Item.Item_C.Hide Subtype Icons
// (Public, BlueprintCallable, BlueprintEvent)

void UItem_C::Hide_Subtype_Icons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Hide Subtype Icons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Item.Item_C.Set Display Style
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Override_Display_Style                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EItemDisplayStyle                       DisplayStyle_0                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UItem_C::Set_Display_Style(bool Override_Display_Style, EItemDisplayStyle DisplayStyle_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Item_C", "Set Display Style");

	Params::Item_C_Set_Display_Style Parms{};

	Parms.Override_Display_Style = Override_Display_Style;
	Parms.DisplayStyle_0 = DisplayStyle_0;

	UObject::ProcessEvent(Func, &Parms);
}

}

#pragma pack(pop)
