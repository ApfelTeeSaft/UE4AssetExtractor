#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Item

#include "Basic.hpp"

#include "FortniteUI_structs.hpp"
#include "ItemDisplayStyle_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ItemDisplayMode_structs.hpp"
#include "SlateCore_structs.hpp"
#include "ItemTextureSet_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function Item.Item_C.ExecuteUbergraph_Item
// 0x0048 (0x0048 - 0x0000)
struct Item_C_ExecuteUbergraph_Item final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UWidget*                                CallFunc_Get_Item_Tooltip_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFortUIManagerWidget*                   CallFunc_GetUIManagerWidget_ReturnValue;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFortUIManagerWidget*                   CallFunc_GetUIManagerWidget_ReturnValue2;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortUIState                                  CallFunc__BPGetCurrentUIState_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortUIState                                  CallFunc__BPGetCurrentUIState_ReturnValue2;        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortHUDContext*                        CallFunc_GetContext_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInCursorMode_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              K2Node_Event_NewItem;                              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFortItem*                              CallFunc_CreateTemporaryItemInstanceBP_ReturnValue; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bCursorModeEnabled;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_ActionName;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UUserWidget*                            K2Node_CustomEvent_CursorModeContentWidget;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(bool bCursorModeEnabled, class FName ActionName, class UUserWidget* CursorModeContentWidget)> K2Node_CreateDelegate_OutputDelegate;              // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	class UWidget*                                CallFunc_Get_Item_Tooltip_ReturnValue2;            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_ExecuteUbergraph_Item) == 0x000004, "Wrong alignment on Item_C_ExecuteUbergraph_Item");
static_assert(sizeof(Item_C_ExecuteUbergraph_Item) == 0x000048, "Wrong size on Item_C_ExecuteUbergraph_Item");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, EntryPoint) == 0x000000, "Member 'Item_C_ExecuteUbergraph_Item::EntryPoint' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, CallFunc_Get_Item_Tooltip_ReturnValue) == 0x000004, "Member 'Item_C_ExecuteUbergraph_Item::CallFunc_Get_Item_Tooltip_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, CallFunc_GetUIManagerWidget_ReturnValue) == 0x000008, "Member 'Item_C_ExecuteUbergraph_Item::CallFunc_GetUIManagerWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, CallFunc_GetUIManagerWidget_ReturnValue2) == 0x00000C, "Member 'Item_C_ExecuteUbergraph_Item::CallFunc_GetUIManagerWidget_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, CallFunc__BPGetCurrentUIState_ReturnValue) == 0x000010, "Member 'Item_C_ExecuteUbergraph_Item::CallFunc__BPGetCurrentUIState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, CallFunc__BPGetCurrentUIState_ReturnValue2) == 0x000011, "Member 'Item_C_ExecuteUbergraph_Item::CallFunc__BPGetCurrentUIState_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, CallFunc_GetContext_ReturnValue) == 0x000014, "Member 'Item_C_ExecuteUbergraph_Item::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, CallFunc_IsInCursorMode_ReturnValue) == 0x000018, "Member 'Item_C_ExecuteUbergraph_Item::CallFunc_IsInCursorMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, K2Node_Event_IsDesignTime) == 0x000019, "Member 'Item_C_ExecuteUbergraph_Item::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, K2Node_Event_NewItem) == 0x00001C, "Member 'Item_C_ExecuteUbergraph_Item::K2Node_Event_NewItem' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, CallFunc_CreateTemporaryItemInstanceBP_ReturnValue) == 0x000020, "Member 'Item_C_ExecuteUbergraph_Item::CallFunc_CreateTemporaryItemInstanceBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, K2Node_CustomEvent_bCursorModeEnabled) == 0x000024, "Member 'Item_C_ExecuteUbergraph_Item::K2Node_CustomEvent_bCursorModeEnabled' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, K2Node_CustomEvent_ActionName) == 0x000028, "Member 'Item_C_ExecuteUbergraph_Item::K2Node_CustomEvent_ActionName' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, K2Node_CustomEvent_CursorModeContentWidget) == 0x000030, "Member 'Item_C_ExecuteUbergraph_Item::K2Node_CustomEvent_CursorModeContentWidget' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, K2Node_CreateDelegate_OutputDelegate) == 0x000034, "Member 'Item_C_ExecuteUbergraph_Item::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Item_C_ExecuteUbergraph_Item, CallFunc_Get_Item_Tooltip_ReturnValue2) == 0x000044, "Member 'Item_C_ExecuteUbergraph_Item::CallFunc_Get_Item_Tooltip_ReturnValue2' has a wrong offset!");

// Function Item.Item_C.OnCursorModeChanged
// 0x0010 (0x0010 - 0x0000)
struct Item_C_OnCursorModeChanged final
{
public:
	bool                                          bCursorModeEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ActionName;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UUserWidget*                            CursorModeContentWidget;                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_OnCursorModeChanged) == 0x000004, "Wrong alignment on Item_C_OnCursorModeChanged");
static_assert(sizeof(Item_C_OnCursorModeChanged) == 0x000010, "Wrong size on Item_C_OnCursorModeChanged");
static_assert(offsetof(Item_C_OnCursorModeChanged, bCursorModeEnabled) == 0x000000, "Member 'Item_C_OnCursorModeChanged::bCursorModeEnabled' has a wrong offset!");
static_assert(offsetof(Item_C_OnCursorModeChanged, ActionName) == 0x000004, "Member 'Item_C_OnCursorModeChanged::ActionName' has a wrong offset!");
static_assert(offsetof(Item_C_OnCursorModeChanged, CursorModeContentWidget) == 0x00000C, "Member 'Item_C_OnCursorModeChanged::CursorModeContentWidget' has a wrong offset!");

// Function Item.Item_C.BPOnItemSet
// 0x0004 (0x0004 - 0x0000)
struct Item_C_BPOnItemSet final
{
public:
	class UFortItem*                              NewItem;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_BPOnItemSet) == 0x000004, "Wrong alignment on Item_C_BPOnItemSet");
static_assert(sizeof(Item_C_BPOnItemSet) == 0x000004, "Wrong size on Item_C_BPOnItemSet");
static_assert(offsetof(Item_C_BPOnItemSet, NewItem) == 0x000000, "Member 'Item_C_BPOnItemSet::NewItem' has a wrong offset!");

// Function Item.Item_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct Item_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_PreConstruct) == 0x000001, "Wrong alignment on Item_C_PreConstruct");
static_assert(sizeof(Item_C_PreConstruct) == 0x000001, "Wrong size on Item_C_PreConstruct");
static_assert(offsetof(Item_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'Item_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function Item.Item_C.Update Base
// 0x01D0 (0x01D0 - 0x0000)
struct Item_C_Update_Base final
{
public:
	struct FSlateBrush                            Accent_Brush;                                      // 0x0000(0x0074)(Edit)
	struct FSlateBrush                            Bevel_Top_Brush;                                   // 0x0074(0x0074)(Edit)
	struct FSlateBrush                            Bevel_Side_Brush;                                  // 0x00E8(0x0074)(Edit)
	struct FSlateBrush                            Bevel_Bottom_Brush;                                // 0x015C(0x0074)(Edit)
};
static_assert(alignof(Item_C_Update_Base) == 0x000004, "Wrong alignment on Item_C_Update_Base");
static_assert(sizeof(Item_C_Update_Base) == 0x0001D0, "Wrong size on Item_C_Update_Base");
static_assert(offsetof(Item_C_Update_Base, Accent_Brush) == 0x000000, "Member 'Item_C_Update_Base::Accent_Brush' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Base, Bevel_Top_Brush) == 0x000074, "Member 'Item_C_Update_Base::Bevel_Top_Brush' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Base, Bevel_Side_Brush) == 0x0000E8, "Member 'Item_C_Update_Base::Bevel_Side_Brush' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Base, Bevel_Bottom_Brush) == 0x00015C, "Member 'Item_C_Update_Base::Bevel_Bottom_Brush' has a wrong offset!");

// Function Item.Item_C.Set Item Data
// 0x007C (0x007C - 0x0000)
struct Item_C_Set_Item_Data final
{
public:
	class UFortItem*                              Item_Data;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortRarity                                   CallFunc_GetRarity_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortRarityItemData                    CallFunc_BPGetRarityData_ReturnValue;              // 0x0008(0x0070)()
	EFortItemType                                 CallFunc_GetType_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             CallFunc_Get_Display_Style_Style;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Set_Item_Data) == 0x000004, "Wrong alignment on Item_C_Set_Item_Data");
static_assert(sizeof(Item_C_Set_Item_Data) == 0x00007C, "Wrong size on Item_C_Set_Item_Data");
static_assert(offsetof(Item_C_Set_Item_Data, Item_Data) == 0x000000, "Member 'Item_C_Set_Item_Data::Item_Data' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Data, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'Item_C_Set_Item_Data::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Data, CallFunc_GetRarity_ReturnValue) == 0x000005, "Member 'Item_C_Set_Item_Data::CallFunc_GetRarity_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Data, CallFunc_BPGetRarityData_ReturnValue) == 0x000008, "Member 'Item_C_Set_Item_Data::CallFunc_BPGetRarityData_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Data, CallFunc_GetType_ReturnValue) == 0x000078, "Member 'Item_C_Set_Item_Data::CallFunc_GetType_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Data, CallFunc_Get_Display_Style_Style) == 0x000079, "Member 'Item_C_Set_Item_Data::CallFunc_Get_Display_Style_Style' has a wrong offset!");

// Function Item.Item_C.Update Stack Counter
// 0x0004 (0x0004 - 0x0000)
struct Item_C_Update_Stack_Counter final
{
public:
	int32                                         CallFunc_GetNumInStack_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Update_Stack_Counter) == 0x000004, "Wrong alignment on Item_C_Update_Stack_Counter");
static_assert(sizeof(Item_C_Update_Stack_Counter) == 0x000004, "Wrong size on Item_C_Update_Stack_Counter");
static_assert(offsetof(Item_C_Update_Stack_Counter, CallFunc_GetNumInStack_ReturnValue) == 0x000000, "Member 'Item_C_Update_Stack_Counter::CallFunc_GetNumInStack_ReturnValue' has a wrong offset!");

// Function Item.Item_C.Update All
// 0x0DA0 (0x0DA0 - 0x0000)
struct Item_C_Update_All final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemTextureSet                        CallFunc_Get_Item_Texture_Set_Texture_Set;         // 0x0004(0x0D9C)()
};
static_assert(alignof(Item_C_Update_All) == 0x000004, "Wrong alignment on Item_C_Update_All");
static_assert(sizeof(Item_C_Update_All) == 0x000DA0, "Wrong size on Item_C_Update_All");
static_assert(offsetof(Item_C_Update_All, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Item_C_Update_All::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_All, CallFunc_Get_Item_Texture_Set_Texture_Set) == 0x000004, "Member 'Item_C_Update_All::CallFunc_Get_Item_Texture_Set_Texture_Set' has a wrong offset!");

// Function Item.Item_C.OnMouseButtonDown
// 0x0214 (0x0214 - 0x0000)
struct Item_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0034)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0034(0x0060)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x0094(0x0060)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_DetectDragIfPressed_ReturnValue;          // 0x00F4(0x0060)()
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0154(0x0060)()
	struct FEventReply                            Result;                                            // 0x01B4(0x0060)(Edit)
};
static_assert(alignof(Item_C_OnMouseButtonDown) == 0x000004, "Wrong alignment on Item_C_OnMouseButtonDown");
static_assert(sizeof(Item_C_OnMouseButtonDown) == 0x000214, "Wrong size on Item_C_OnMouseButtonDown");
static_assert(offsetof(Item_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'Item_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(Item_C_OnMouseButtonDown, MouseEvent) == 0x000034, "Member 'Item_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(Item_C_OnMouseButtonDown, ReturnValue) == 0x000094, "Member 'Item_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_OnMouseButtonDown, CallFunc_DetectDragIfPressed_ReturnValue) == 0x0000F4, "Member 'Item_C_OnMouseButtonDown::CallFunc_DetectDragIfPressed_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_OnMouseButtonDown, CallFunc_Unhandled_ReturnValue) == 0x000154, "Member 'Item_C_OnMouseButtonDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_OnMouseButtonDown, Result) == 0x0001B4, "Member 'Item_C_OnMouseButtonDown::Result' has a wrong offset!");

// Function Item.Item_C.OnDragDetected
// 0x0128 (0x0128 - 0x0000)
struct Item_C_OnDragDetected final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0034)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0034(0x0060)(ConstParm, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x0094(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UDragDropOperation*                     CallFunc_CreateDragDropOperation_ReturnValue;      // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_GetIconBrush_IconBrush;                   // 0x00A0(0x0074)()
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UItemDragIcon_C*                        CallFunc_Create_ReturnValue;                       // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Drag_Icon_Texture;                                 // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_OnDragDetected) == 0x000004, "Wrong alignment on Item_C_OnDragDetected");
static_assert(sizeof(Item_C_OnDragDetected) == 0x000128, "Wrong size on Item_C_OnDragDetected");
static_assert(offsetof(Item_C_OnDragDetected, MyGeometry) == 0x000000, "Member 'Item_C_OnDragDetected::MyGeometry' has a wrong offset!");
static_assert(offsetof(Item_C_OnDragDetected, PointerEvent) == 0x000034, "Member 'Item_C_OnDragDetected::PointerEvent' has a wrong offset!");
static_assert(offsetof(Item_C_OnDragDetected, Operation) == 0x000094, "Member 'Item_C_OnDragDetected::Operation' has a wrong offset!");
static_assert(offsetof(Item_C_OnDragDetected, CallFunc_CreateDragDropOperation_ReturnValue) == 0x000098, "Member 'Item_C_OnDragDetected::CallFunc_CreateDragDropOperation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_OnDragDetected, CallFunc_IsValid_ReturnValue) == 0x00009C, "Member 'Item_C_OnDragDetected::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_OnDragDetected, CallFunc_GetIconBrush_IconBrush) == 0x0000A0, "Member 'Item_C_OnDragDetected::CallFunc_GetIconBrush_IconBrush' has a wrong offset!");
static_assert(offsetof(Item_C_OnDragDetected, CallFunc_GetOwningPlayer_ReturnValue) == 0x000114, "Member 'Item_C_OnDragDetected::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_OnDragDetected, CallFunc_Create_ReturnValue) == 0x000118, "Member 'Item_C_OnDragDetected::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_OnDragDetected, K2Node_DynamicCast_AsTexture_2D) == 0x00011C, "Member 'Item_C_OnDragDetected::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(Item_C_OnDragDetected, K2Node_DynamicCast_bSuccess) == 0x000120, "Member 'Item_C_OnDragDetected::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Item_C_OnDragDetected, Drag_Icon_Texture) == 0x000124, "Member 'Item_C_OnDragDetected::Drag_Icon_Texture' has a wrong offset!");

// Function Item.Item_C.Update Size Box
// 0x0354 (0x0354 - 0x0000)
struct Item_C_Update_Size_Box final
{
public:
	struct FFortStateStyle                        CallFunc_GetCurrentStateStyle_ReturnValue;         // 0x0000(0x02D8)(ConstParm)
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue; // 0x02D8(0x0074)(ConstParm)
	float                                         CallFunc_BreakVector2D_X;                          // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Update_Size_Box) == 0x000004, "Wrong alignment on Item_C_Update_Size_Box");
static_assert(sizeof(Item_C_Update_Size_Box) == 0x000354, "Wrong size on Item_C_Update_Size_Box");
static_assert(offsetof(Item_C_Update_Size_Box, CallFunc_GetCurrentStateStyle_ReturnValue) == 0x000000, "Member 'Item_C_Update_Size_Box::CallFunc_GetCurrentStateStyle_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Size_Box, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue) == 0x0002D8, "Member 'Item_C_Update_Size_Box::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Size_Box, CallFunc_BreakVector2D_X) == 0x00034C, "Member 'Item_C_Update_Size_Box::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Size_Box, CallFunc_BreakVector2D_Y) == 0x000350, "Member 'Item_C_Update_Size_Box::CallFunc_BreakVector2D_Y' has a wrong offset!");

// Function Item.Item_C.Update Background
// 0x00C8 (0x00C8 - 0x0000)
struct Item_C_Update_Background final
{
public:
	float                                         Temp_float_Variable;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable2;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable3;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayMode                              Temp_byte_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable4;                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable5;                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable6;                              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue; // 0x001C(0x0074)(ConstParm)
	float                                         K2Node_Select_Default;                             // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayMode                              Temp_byte_Variable2;                               // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select2_Default;                            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x00A4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor2;                    // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                     Background_Material;                               // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Update_Background) == 0x000004, "Wrong alignment on Item_C_Update_Background");
static_assert(sizeof(Item_C_Update_Background) == 0x0000C8, "Wrong size on Item_C_Update_Background");
static_assert(offsetof(Item_C_Update_Background, Temp_float_Variable) == 0x000000, "Member 'Item_C_Update_Background::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, Temp_float_Variable2) == 0x000004, "Member 'Item_C_Update_Background::Temp_float_Variable2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, Temp_float_Variable3) == 0x000008, "Member 'Item_C_Update_Background::Temp_float_Variable3' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, Temp_byte_Variable) == 0x00000C, "Member 'Item_C_Update_Background::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, Temp_float_Variable4) == 0x000010, "Member 'Item_C_Update_Background::Temp_float_Variable4' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, Temp_float_Variable5) == 0x000014, "Member 'Item_C_Update_Background::Temp_float_Variable5' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, Temp_float_Variable6) == 0x000018, "Member 'Item_C_Update_Background::Temp_float_Variable6' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue) == 0x00001C, "Member 'Item_C_Update_Background::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, K2Node_Select_Default) == 0x000090, "Member 'Item_C_Update_Background::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, Temp_byte_Variable2) == 0x000094, "Member 'Item_C_Update_Background::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, K2Node_DynamicCast_AsTexture_2D) == 0x000098, "Member 'Item_C_Update_Background::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, K2Node_DynamicCast_bSuccess) == 0x00009C, "Member 'Item_C_Update_Background::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, K2Node_Select2_Default) == 0x0000A0, "Member 'Item_C_Update_Background::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, K2Node_MakeStruct_LinearColor) == 0x0000A4, "Member 'Item_C_Update_Background::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, K2Node_MakeStruct_LinearColor2) == 0x0000B4, "Member 'Item_C_Update_Background::K2Node_MakeStruct_LinearColor2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Background, Background_Material) == 0x0000C4, "Member 'Item_C_Update_Background::Background_Material' has a wrong offset!");

// Function Item.Item_C.Get Item Texture Set
// 0x28FC (0x28FC - 0x0000)
struct Item_C_Get_Item_Texture_Set final
{
public:
	EItemDisplayStyle                             Display_Style;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemTextureSet                        Texture_Set;                                       // 0x0004(0x0D9C)(Parm, OutParm)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0DA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA1[0x3];                                      // 0x0DA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0DA4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0DA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA9[0x3];                                      // 0x0DA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0DAC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0DB0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0DB4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DB5[0x3];                                      // 0x0DB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0DB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0DBC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DBD[0x3];                                      // 0x0DBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemTextureSet                        CallFunc_Array_Get_Item;                           // 0x0DC0(0x0D9C)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x1B5C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B5D[0x3];                                     // 0x1B5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemTextureSet                        Item_Texture_Set;                                  // 0x1B60(0x0D9C)(Edit)
};
static_assert(alignof(Item_C_Get_Item_Texture_Set) == 0x000004, "Wrong alignment on Item_C_Get_Item_Texture_Set");
static_assert(sizeof(Item_C_Get_Item_Texture_Set) == 0x0028FC, "Wrong size on Item_C_Get_Item_Texture_Set");
static_assert(offsetof(Item_C_Get_Item_Texture_Set, Display_Style) == 0x000000, "Member 'Item_C_Get_Item_Texture_Set::Display_Style' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Texture_Set, Texture_Set) == 0x000004, "Member 'Item_C_Get_Item_Texture_Set::Texture_Set' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Texture_Set, Temp_bool_True_if_break_was_hit_Variable) == 0x000DA0, "Member 'Item_C_Get_Item_Texture_Set::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Texture_Set, Temp_int_Array_Index_Variable) == 0x000DA4, "Member 'Item_C_Get_Item_Texture_Set::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Texture_Set, CallFunc_Not_PreBool_ReturnValue) == 0x000DA8, "Member 'Item_C_Get_Item_Texture_Set::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Texture_Set, Temp_int_Loop_Counter_Variable) == 0x000DAC, "Member 'Item_C_Get_Item_Texture_Set::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Texture_Set, CallFunc_Array_Length_ReturnValue) == 0x000DB0, "Member 'Item_C_Get_Item_Texture_Set::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Texture_Set, CallFunc_Less_IntInt_ReturnValue) == 0x000DB4, "Member 'Item_C_Get_Item_Texture_Set::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Texture_Set, CallFunc_Add_IntInt_ReturnValue) == 0x000DB8, "Member 'Item_C_Get_Item_Texture_Set::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Texture_Set, CallFunc_BooleanAND_ReturnValue) == 0x000DBC, "Member 'Item_C_Get_Item_Texture_Set::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Texture_Set, CallFunc_Array_Get_Item) == 0x000DC0, "Member 'Item_C_Get_Item_Texture_Set::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Texture_Set, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x001B5C, "Member 'Item_C_Get_Item_Texture_Set::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Texture_Set, Item_Texture_Set) == 0x001B60, "Member 'Item_C_Get_Item_Texture_Set::Item_Texture_Set' has a wrong offset!");

// Function Item.Item_C.Update Item Icon
// 0x00FC (0x00FC - 0x0000)
struct Item_C_Update_Item_Icon final
{
public:
	EFortBrushSize                                Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable2;                               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable3;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable4;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable5;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Get_Item_Icon_Size_Icon_Size;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable6;                               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable7;                               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                K2Node_Select_Default;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSlateBrush                            CallFunc_GetIconBrush_IconBrush;                   // 0x0014(0x0074)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0088(0x0074)()
};
static_assert(alignof(Item_C_Update_Item_Icon) == 0x000004, "Wrong alignment on Item_C_Update_Item_Icon");
static_assert(sizeof(Item_C_Update_Item_Icon) == 0x0000FC, "Wrong size on Item_C_Update_Item_Icon");
static_assert(offsetof(Item_C_Update_Item_Icon, Temp_byte_Variable) == 0x000000, "Member 'Item_C_Update_Item_Icon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Item_Icon, Temp_byte_Variable2) == 0x000001, "Member 'Item_C_Update_Item_Icon::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Item_Icon, Temp_byte_Variable3) == 0x000002, "Member 'Item_C_Update_Item_Icon::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Item_Icon, Temp_byte_Variable4) == 0x000003, "Member 'Item_C_Update_Item_Icon::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Item_Icon, Temp_byte_Variable5) == 0x000004, "Member 'Item_C_Update_Item_Icon::Temp_byte_Variable5' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Item_Icon, CallFunc_Get_Item_Icon_Size_Icon_Size) == 0x000008, "Member 'Item_C_Update_Item_Icon::CallFunc_Get_Item_Icon_Size_Icon_Size' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Item_Icon, Temp_byte_Variable6) == 0x000010, "Member 'Item_C_Update_Item_Icon::Temp_byte_Variable6' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Item_Icon, Temp_byte_Variable7) == 0x000011, "Member 'Item_C_Update_Item_Icon::Temp_byte_Variable7' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Item_Icon, K2Node_Select_Default) == 0x000012, "Member 'Item_C_Update_Item_Icon::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Item_Icon, CallFunc_GetVisibility_ReturnValue) == 0x000013, "Member 'Item_C_Update_Item_Icon::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Item_Icon, CallFunc_GetIconBrush_IconBrush) == 0x000014, "Member 'Item_C_Update_Item_Icon::CallFunc_GetIconBrush_IconBrush' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Item_Icon, K2Node_MakeStruct_SlateBrush) == 0x000088, "Member 'Item_C_Update_Item_Icon::K2Node_MakeStruct_SlateBrush' has a wrong offset!");

// Function Item.Item_C.Level Badge
// 0x0007 (0x0007 - 0x0000)
struct Item_C_Level_Badge final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue2;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Level_Badge) == 0x000001, "Wrong alignment on Item_C_Level_Badge");
static_assert(sizeof(Item_C_Level_Badge) == 0x000007, "Wrong size on Item_C_Level_Badge");
static_assert(offsetof(Item_C_Level_Badge, Temp_byte_Variable) == 0x000000, "Member 'Item_C_Level_Badge::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Level_Badge, Temp_byte_Variable2) == 0x000001, "Member 'Item_C_Level_Badge::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(Item_C_Level_Badge, Temp_bool_Variable) == 0x000002, "Member 'Item_C_Level_Badge::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Level_Badge, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000003, "Member 'Item_C_Level_Badge::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Level_Badge, CallFunc_NotEqual_ByteByte_ReturnValue2) == 0x000004, "Member 'Item_C_Level_Badge::CallFunc_NotEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Item_C_Level_Badge, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'Item_C_Level_Badge::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Level_Badge, K2Node_Select_Default) == 0x000006, "Member 'Item_C_Level_Badge::K2Node_Select_Default' has a wrong offset!");

// Function Item.Item_C.Get Display Style
// 0x002B (0x002B - 0x0000)
struct Item_C_Get_Display_Style final
{
public:
	EFortItemType                                 Item_Type;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Style_0;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortItemType                                 Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable2;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable3;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable4;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable5;                               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable6;                               // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable7;                               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable8;                               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable9;                               // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable10;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable11;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable12;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable13;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable14;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable15;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable16;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable17;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable18;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable19;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable20;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable21;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable22;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable23;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable24;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable25;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable26;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable27;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable28;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable29;                              // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable30;                              // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable31;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable32;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable33;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable34;                              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable35;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable36;                              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable37;                              // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable38;                              // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable39;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable40;                              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             K2Node_Select_Default;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Get_Display_Style) == 0x000001, "Wrong alignment on Item_C_Get_Display_Style");
static_assert(sizeof(Item_C_Get_Display_Style) == 0x00002B, "Wrong size on Item_C_Get_Display_Style");
static_assert(offsetof(Item_C_Get_Display_Style, Item_Type) == 0x000000, "Member 'Item_C_Get_Display_Style::Item_Type' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Style_0) == 0x000001, "Member 'Item_C_Get_Display_Style::Style_0' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable) == 0x000002, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable2) == 0x000003, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable3) == 0x000004, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable4) == 0x000005, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable5) == 0x000006, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable5' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable6) == 0x000007, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable6' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable7) == 0x000008, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable7' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable8) == 0x000009, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable8' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable9) == 0x00000A, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable9' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable10) == 0x00000B, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable10' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable11) == 0x00000C, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable11' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable12) == 0x00000D, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable12' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable13) == 0x00000E, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable13' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable14) == 0x00000F, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable14' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable15) == 0x000010, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable15' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable16) == 0x000011, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable16' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable17) == 0x000012, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable17' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable18) == 0x000013, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable18' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable19) == 0x000014, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable19' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable20) == 0x000015, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable20' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable21) == 0x000016, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable21' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable22) == 0x000017, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable22' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable23) == 0x000018, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable23' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable24) == 0x000019, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable24' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable25) == 0x00001A, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable25' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable26) == 0x00001B, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable26' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable27) == 0x00001C, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable27' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable28) == 0x00001D, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable28' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable29) == 0x00001E, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable29' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable30) == 0x00001F, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable30' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable31) == 0x000020, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable31' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable32) == 0x000021, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable32' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable33) == 0x000022, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable33' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable34) == 0x000023, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable34' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable35) == 0x000024, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable35' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable36) == 0x000025, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable36' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable37) == 0x000026, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable37' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable38) == 0x000027, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable38' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable39) == 0x000028, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable39' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, Temp_byte_Variable40) == 0x000029, "Member 'Item_C_Get_Display_Style::Temp_byte_Variable40' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Display_Style, K2Node_Select_Default) == 0x00002A, "Member 'Item_C_Get_Display_Style::K2Node_Select_Default' has a wrong offset!");

// Function Item.Item_C.Update Masked Gradient
// 0x002C (0x002C - 0x0000)
struct Item_C_Update_Masked_Gradient final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UTexture*                               Texture_Mask;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Color_A;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Color_B;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Update_Masked_Gradient) == 0x000004, "Wrong alignment on Item_C_Update_Masked_Gradient");
static_assert(sizeof(Item_C_Update_Masked_Gradient) == 0x00002C, "Wrong size on Item_C_Update_Masked_Gradient");
static_assert(offsetof(Item_C_Update_Masked_Gradient, Image) == 0x000000, "Member 'Item_C_Update_Masked_Gradient::Image' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Masked_Gradient, Texture_Mask) == 0x000004, "Member 'Item_C_Update_Masked_Gradient::Texture_Mask' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Masked_Gradient, Color_A) == 0x000008, "Member 'Item_C_Update_Masked_Gradient::Color_A' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Masked_Gradient, Color_B) == 0x000018, "Member 'Item_C_Update_Masked_Gradient::Color_B' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Masked_Gradient, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000028, "Member 'Item_C_Update_Masked_Gradient::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function Item.Item_C.Update Bottom Bevel
// 0x0074 (0x0074 - 0x0000)
struct Item_C_Update_Bottom_Bevel final
{
public:
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue; // 0x0000(0x0074)(ConstParm)
};
static_assert(alignof(Item_C_Update_Bottom_Bevel) == 0x000004, "Wrong alignment on Item_C_Update_Bottom_Bevel");
static_assert(sizeof(Item_C_Update_Bottom_Bevel) == 0x000074, "Wrong size on Item_C_Update_Bottom_Bevel");
static_assert(offsetof(Item_C_Update_Bottom_Bevel, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue) == 0x000000, "Member 'Item_C_Update_Bottom_Bevel::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue' has a wrong offset!");

// Function Item.Item_C.Update Top Bevel
// 0x007C (0x007C - 0x0000)
struct Item_C_Update_Top_Bevel final
{
public:
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue; // 0x0000(0x0074)(ConstParm)
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Update_Top_Bevel) == 0x000004, "Wrong alignment on Item_C_Update_Top_Bevel");
static_assert(sizeof(Item_C_Update_Top_Bevel) == 0x00007C, "Wrong size on Item_C_Update_Top_Bevel");
static_assert(offsetof(Item_C_Update_Top_Bevel, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue) == 0x000000, "Member 'Item_C_Update_Top_Bevel::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Top_Bevel, K2Node_DynamicCast_AsTexture_2D) == 0x000074, "Member 'Item_C_Update_Top_Bevel::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Top_Bevel, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'Item_C_Update_Top_Bevel::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function Item.Item_C.Update Side Bevel
// 0x0074 (0x0074 - 0x0000)
struct Item_C_Update_Side_Bevel final
{
public:
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue; // 0x0000(0x0074)(ConstParm)
};
static_assert(alignof(Item_C_Update_Side_Bevel) == 0x000004, "Wrong alignment on Item_C_Update_Side_Bevel");
static_assert(sizeof(Item_C_Update_Side_Bevel) == 0x000074, "Wrong size on Item_C_Update_Side_Bevel");
static_assert(offsetof(Item_C_Update_Side_Bevel, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue) == 0x000000, "Member 'Item_C_Update_Side_Bevel::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue' has a wrong offset!");

// Function Item.Item_C.Shade
// 0x0074 (0x0074 - 0x0000)
struct Item_C_Shade_0 final
{
public:
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue; // 0x0000(0x0074)(ConstParm)
};
static_assert(alignof(Item_C_Shade_0) == 0x000004, "Wrong alignment on Item_C_Shade_0");
static_assert(sizeof(Item_C_Shade_0) == 0x000074, "Wrong size on Item_C_Shade_0");
static_assert(offsetof(Item_C_Shade_0, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue) == 0x000000, "Member 'Item_C_Shade_0::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue' has a wrong offset!");

// Function Item.Item_C.Update Subtype Icons & Ammo
// 0x0588 (0x0588 - 0x0000)
struct Item_C_Update_Subtype_Icons___Ammo final
{
public:
	EFortBrushSize                                Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable2;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable3;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable4;                               // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable5;                               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable6;                               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue; // 0x000C(0x0074)(ConstParm)
	EFortBrushSize                                Temp_byte_Variable7;                               // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable8;                               // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable9;                               // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EVerticalAlignment                            Temp_byte_Variable10;                              // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EVerticalAlignment                            Temp_byte_Variable11;                              // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EVerticalAlignment                            Temp_byte_Variable12;                              // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EVerticalAlignment                            Temp_byte_Variable13;                              // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EVerticalAlignment                            Temp_byte_Variable14;                              // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EVerticalAlignment                            Temp_byte_Variable15;                              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue2; // 0x0094(0x0074)(ConstParm)
	EFortBrushSize                                Temp_byte_Variable16;                              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          Temp_byte_Variable17;                              // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          Temp_byte_Variable18;                              // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          Temp_byte_Variable19;                              // 0x010B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          Temp_byte_Variable20;                              // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          Temp_byte_Variable21;                              // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          Temp_byte_Variable22;                              // 0x010E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable23;                              // 0x010F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable24;                              // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue3; // 0x0114(0x0074)(ConstParm)
	ESlateVisibility                              Temp_byte_Variable25;                              // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18A[0x2];                                      // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable2;                              // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable3;                              // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UVerticalBoxSlot*                       CallFunc_SlotAsVerticalBoxSlot_ReturnValue;        // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable4;                              // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable5;                              // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable6;                              // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AA[0x2];                                      // 0x01AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x01AC(0x0010)()
	struct FMargin                                K2Node_MakeStruct_Margin2;                         // 0x01BC(0x0010)()
	EFortBrushSize                                Temp_byte_Variable26;                              // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CD[0x3];                                      // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable7;                              // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UVerticalBoxSlot*                       CallFunc_SlotAsVerticalBoxSlot_ReturnValue2;       // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable8;                              // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable9;                              // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable10;                             // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin3;                         // 0x01E8(0x0010)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable4;                               // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FA[0x2];                                      // 0x01FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select2_Default;                            // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable27;                              // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable28;                              // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin4;                         // 0x0214(0x0010)()
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable5;                               // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue4; // 0x022C(0x0074)(ConstParm)
	bool                                          Temp_bool_Variable6;                               // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable7;                               // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A2[0x2];                                      // 0x02A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_Select3_Default;                            // 0x02A4(0x0010)()
	bool                                          Temp_bool_Variable8;                               // 0x02B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable9;                               // 0x02B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable10;                              // 0x02B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable11;                              // 0x02B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable12;                              // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable29;                              // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue3;         // 0x02BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BB[0x1];                                      // 0x02BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetSecondaryCategory_ItemCategoryText;    // 0x02BC(0x000C)()
	struct FSlateBrush                            CallFunc_GetSecondaryCategory_ItemCategoryBrush;   // 0x02C8(0x0074)()
	bool                                          CallFunc_GetSecondaryCategory_ReturnValue;         // 0x033C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x033D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x033E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33F[0x1];                                      // 0x033F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItemDefinition*                    CallFunc_GetItemDefinitionBP_ReturnValue;          // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFortWeaponRangedItemDefinition*        K2Node_DynamicCast_AsFort_Weapon_Ranged_Item_Definition; // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetRemainingAmmo_ReturnValue;             // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0351(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0352(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue4;                  // 0x0353(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FText                                   CallFunc_GetTertiaryCategory_ItemCategoryText;     // 0x0354(0x000C)()
	struct FSlateBrush                            CallFunc_GetTertiaryCategory_ItemCategoryBrush;    // 0x0360(0x0074)()
	bool                                          CallFunc_GetTertiaryCategory_ReturnValue;          // 0x03D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select4_Default;                            // 0x03D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D6[0x2];                                      // 0x03D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetSecondaryCategory_ItemCategoryText2;   // 0x03D8(0x000C)()
	struct FSlateBrush                            CallFunc_GetSecondaryCategory_ItemCategoryBrush2;  // 0x03E4(0x0074)()
	bool                                          CallFunc_GetSecondaryCategory_ReturnValue2;        // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select5_Default;                            // 0x0459(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45A[0x2];                                      // 0x045A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         CallFunc_GetFontBySizeFromMultiSizeFont_ReturnValue; // 0x045C(0x0028)(ConstParm)
	bool                                          K2Node_Select6_Default;                            // 0x0484(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0485(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0486(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue5;                  // 0x0487(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select7_Default;                            // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select8_Default;                            // 0x048C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                K2Node_Select9_Default;                            // 0x048D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          K2Node_Select10_Default;                           // 0x048E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EVerticalAlignment                            K2Node_Select11_Default;                           // 0x048F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSlateBrush                            Fill_Brush;                                        // 0x0490(0x0074)(Edit)
	bool                                          ShowTertiaryIcon;                                  // 0x0504(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowSecondaryIcon;                                 // 0x0505(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UsingAltAmmoCounter;                               // 0x0506(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_507[0x1];                                      // 0x0507(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             AmmoCounter;                                       // 0x0508(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSlateBrush                            Frame_Brush;                                       // 0x050C(0x0074)(Edit)
	EFortBrushSize                                IconBrushSize;                                     // 0x0580(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          HAlign;                                            // 0x0581(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	EVerticalAlignment                            VAlign;                                            // 0x0582(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_583[0x1];                                      // 0x0583(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnitPadding;                                       // 0x0584(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Update_Subtype_Icons___Ammo) == 0x000004, "Wrong alignment on Item_C_Update_Subtype_Icons___Ammo");
static_assert(sizeof(Item_C_Update_Subtype_Icons___Ammo) == 0x000588, "Wrong size on Item_C_Update_Subtype_Icons___Ammo");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable) == 0x000000, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_IsVisible_ReturnValue) == 0x000001, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable2) == 0x000002, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable3) == 0x000005, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_Not_PreBool_ReturnValue2) == 0x000006, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable4) == 0x000007, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable5) == 0x000008, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable5' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable6) == 0x000009, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable6' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue) == 0x00000C, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable7) == 0x000080, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable7' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000084, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable8) == 0x000088, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable8' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable9) == 0x000089, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable9' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_bool_Variable) == 0x00008A, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable10) == 0x00008B, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable10' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable11) == 0x00008C, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable11' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable12) == 0x00008D, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable12' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable13) == 0x00008E, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable13' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable14) == 0x00008F, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable14' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable15) == 0x000090, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable15' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue2) == 0x000094, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable16) == 0x000108, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable16' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable17) == 0x000109, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable17' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable18) == 0x00010A, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable18' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable19) == 0x00010B, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable19' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable20) == 0x00010C, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable20' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable21) == 0x00010D, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable21' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable22) == 0x00010E, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable22' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable23) == 0x00010F, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable23' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable24) == 0x000110, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable24' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue3) == 0x000114, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue3' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable25) == 0x000188, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable25' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_bool_Variable2) == 0x000189, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_float_Variable) == 0x00018C, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_float_Variable2) == 0x000190, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_float_Variable2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_float_Variable3) == 0x000194, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_float_Variable3' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_SlotAsVerticalBoxSlot_ReturnValue) == 0x000198, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_SlotAsVerticalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_float_Variable4) == 0x00019C, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_float_Variable4' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_float_Variable5) == 0x0001A0, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_float_Variable5' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_float_Variable6) == 0x0001A4, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_float_Variable6' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001A8, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0001A9, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_MakeStruct_Margin) == 0x0001AC, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_MakeStruct_Margin2) == 0x0001BC, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_MakeStruct_Margin2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable26) == 0x0001CC, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable26' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_float_Variable7) == 0x0001D0, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_float_Variable7' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_SlotAsVerticalBoxSlot_ReturnValue2) == 0x0001D4, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_SlotAsVerticalBoxSlot_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_float_Variable8) == 0x0001D8, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_float_Variable8' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_bool_Variable3) == 0x0001DC, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_float_Variable9) == 0x0001E0, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_float_Variable9' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_float_Variable10) == 0x0001E4, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_float_Variable10' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_MakeStruct_Margin3) == 0x0001E8, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_MakeStruct_Margin3' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x0001F8, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_bool_Variable4) == 0x0001F9, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_Select_Default) == 0x0001FC, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_Select2_Default) == 0x000200, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable27) == 0x000204, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable27' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000208, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x00020C, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable28) == 0x000210, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable28' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_MakeStruct_Margin4) == 0x000214, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_MakeStruct_Margin4' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000224, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_bool_Variable5) == 0x000228, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_bool_Variable5' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue4) == 0x00022C, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue4' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_bool_Variable6) == 0x0002A0, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_bool_Variable6' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_bool_Variable7) == 0x0002A1, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_bool_Variable7' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_Select3_Default) == 0x0002A4, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_bool_Variable8) == 0x0002B4, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_bool_Variable8' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_bool_Variable9) == 0x0002B5, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_bool_Variable9' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_bool_Variable10) == 0x0002B6, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_bool_Variable10' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_bool_Variable11) == 0x0002B7, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_bool_Variable11' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_bool_Variable12) == 0x0002B8, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_bool_Variable12' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Temp_byte_Variable29) == 0x0002B9, "Member 'Item_C_Update_Subtype_Icons___Ammo::Temp_byte_Variable29' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_EqualEqual_ByteByte_ReturnValue3) == 0x0002BA, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_EqualEqual_ByteByte_ReturnValue3' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetSecondaryCategory_ItemCategoryText) == 0x0002BC, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetSecondaryCategory_ItemCategoryText' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetSecondaryCategory_ItemCategoryBrush) == 0x0002C8, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetSecondaryCategory_ItemCategoryBrush' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetSecondaryCategory_ReturnValue) == 0x00033C, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetSecondaryCategory_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_BooleanAND_ReturnValue2) == 0x00033D, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_BooleanAND_ReturnValue3) == 0x00033E, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetItemDefinitionBP_ReturnValue) == 0x000340, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetItemDefinitionBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_DynamicCast_AsFort_Weapon_Ranged_Item_Definition) == 0x000344, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_DynamicCast_AsFort_Weapon_Ranged_Item_Definition' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_DynamicCast_bSuccess) == 0x000348, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetRemainingAmmo_ReturnValue) == 0x00034C, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetRemainingAmmo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_IsValid_ReturnValue) == 0x000350, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000351, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000352, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_BooleanAND_ReturnValue4) == 0x000353, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_BooleanAND_ReturnValue4' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetTertiaryCategory_ItemCategoryText) == 0x000354, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetTertiaryCategory_ItemCategoryText' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetTertiaryCategory_ItemCategoryBrush) == 0x000360, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetTertiaryCategory_ItemCategoryBrush' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetTertiaryCategory_ReturnValue) == 0x0003D4, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetTertiaryCategory_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_Select4_Default) == 0x0003D5, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetSecondaryCategory_ItemCategoryText2) == 0x0003D8, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetSecondaryCategory_ItemCategoryText2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetSecondaryCategory_ItemCategoryBrush2) == 0x0003E4, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetSecondaryCategory_ItemCategoryBrush2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetSecondaryCategory_ReturnValue2) == 0x000458, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetSecondaryCategory_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_Select5_Default) == 0x000459, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_Select5_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_GetFontBySizeFromMultiSizeFont_ReturnValue) == 0x00045C, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_GetFontBySizeFromMultiSizeFont_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_Select6_Default) == 0x000484, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_Select6_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_BooleanOR_ReturnValue) == 0x000485, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_SwitchEnum_CmpSuccess) == 0x000486, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, CallFunc_BooleanAND_ReturnValue5) == 0x000487, "Member 'Item_C_Update_Subtype_Icons___Ammo::CallFunc_BooleanAND_ReturnValue5' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_Select7_Default) == 0x000488, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_Select7_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_Select8_Default) == 0x00048C, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_Select8_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_Select9_Default) == 0x00048D, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_Select9_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_Select10_Default) == 0x00048E, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_Select10_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, K2Node_Select11_Default) == 0x00048F, "Member 'Item_C_Update_Subtype_Icons___Ammo::K2Node_Select11_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Fill_Brush) == 0x000490, "Member 'Item_C_Update_Subtype_Icons___Ammo::Fill_Brush' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, ShowTertiaryIcon) == 0x000504, "Member 'Item_C_Update_Subtype_Icons___Ammo::ShowTertiaryIcon' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, ShowSecondaryIcon) == 0x000505, "Member 'Item_C_Update_Subtype_Icons___Ammo::ShowSecondaryIcon' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, UsingAltAmmoCounter) == 0x000506, "Member 'Item_C_Update_Subtype_Icons___Ammo::UsingAltAmmoCounter' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, AmmoCounter) == 0x000508, "Member 'Item_C_Update_Subtype_Icons___Ammo::AmmoCounter' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, Frame_Brush) == 0x00050C, "Member 'Item_C_Update_Subtype_Icons___Ammo::Frame_Brush' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, IconBrushSize) == 0x000580, "Member 'Item_C_Update_Subtype_Icons___Ammo::IconBrushSize' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, HAlign) == 0x000581, "Member 'Item_C_Update_Subtype_Icons___Ammo::HAlign' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, VAlign) == 0x000582, "Member 'Item_C_Update_Subtype_Icons___Ammo::VAlign' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Subtype_Icons___Ammo, UnitPadding) == 0x000584, "Member 'Item_C_Update_Subtype_Icons___Ammo::UnitPadding' has a wrong offset!");

// Function Item.Item_C.Set Ammo Count
// 0x002C (0x002C - 0x0000)
struct Item_C_Set_Ammo_Count final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x000C)()
	class FText                                   Temp_text_Variable;                                // 0x0014(0x000C)()
	class FText                                   K2Node_Select_Default;                             // 0x0020(0x000C)()
};
static_assert(alignof(Item_C_Set_Ammo_Count) == 0x000004, "Wrong alignment on Item_C_Set_Ammo_Count");
static_assert(sizeof(Item_C_Set_Ammo_Count) == 0x00002C, "Wrong size on Item_C_Set_Ammo_Count");
static_assert(offsetof(Item_C_Set_Ammo_Count, Count) == 0x000000, "Member 'Item_C_Set_Ammo_Count::Count' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Ammo_Count, Temp_bool_Variable) == 0x000004, "Member 'Item_C_Set_Ammo_Count::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Ammo_Count, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'Item_C_Set_Ammo_Count::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Ammo_Count, Temp_text_Variable) == 0x000014, "Member 'Item_C_Set_Ammo_Count::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Ammo_Count, K2Node_Select_Default) == 0x000020, "Member 'Item_C_Set_Ammo_Count::K2Node_Select_Default' has a wrong offset!");

// Function Item.Item_C.Set Display Mode
// 0x0007 (0x0007 - 0x0000)
struct Item_C_Set_Display_Mode final
{
public:
	EFortUIState                                  Current_UI_State;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Cursor_Mode;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayMode                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayMode                              Temp_byte_Variable2;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayMode                              K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Set_Display_Mode) == 0x000001, "Wrong alignment on Item_C_Set_Display_Mode");
static_assert(sizeof(Item_C_Set_Display_Mode) == 0x000007, "Wrong size on Item_C_Set_Display_Mode");
static_assert(offsetof(Item_C_Set_Display_Mode, Current_UI_State) == 0x000000, "Member 'Item_C_Set_Display_Mode::Current_UI_State' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Display_Mode, Cursor_Mode) == 0x000001, "Member 'Item_C_Set_Display_Mode::Cursor_Mode' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Display_Mode, Temp_byte_Variable) == 0x000002, "Member 'Item_C_Set_Display_Mode::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Display_Mode, K2Node_SwitchEnum_CmpSuccess) == 0x000003, "Member 'Item_C_Set_Display_Mode::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Display_Mode, Temp_byte_Variable2) == 0x000004, "Member 'Item_C_Set_Display_Mode::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Display_Mode, Temp_bool_Variable) == 0x000005, "Member 'Item_C_Set_Display_Mode::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Display_Mode, K2Node_Select_Default) == 0x000006, "Member 'Item_C_Set_Display_Mode::K2Node_Select_Default' has a wrong offset!");

// Function Item.Item_C.Get Item Tooltip
// 0x0020 (0x0020 - 0x0000)
struct Item_C_Get_Item_Tooltip final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UWidget*                                CallFunc_Create_Compare_Item_Tooltip_Return_Value; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              CallFunc_GetItemToCompare_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue2;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UWidget*                                CallFunc_Create_Item_Tooltip_Return_Value;         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFortItem*                              ComparedItem;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Get_Item_Tooltip) == 0x000004, "Wrong alignment on Item_C_Get_Item_Tooltip");
static_assert(sizeof(Item_C_Get_Item_Tooltip) == 0x000020, "Wrong size on Item_C_Get_Item_Tooltip");
static_assert(offsetof(Item_C_Get_Item_Tooltip, ReturnValue) == 0x000000, "Member 'Item_C_Get_Item_Tooltip::ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Tooltip, CallFunc_GetOwningPlayer_ReturnValue) == 0x000004, "Member 'Item_C_Get_Item_Tooltip::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Tooltip, CallFunc_Create_Compare_Item_Tooltip_Return_Value) == 0x000008, "Member 'Item_C_Get_Item_Tooltip::CallFunc_Create_Compare_Item_Tooltip_Return_Value' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Tooltip, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'Item_C_Get_Item_Tooltip::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Tooltip, CallFunc_GetItemToCompare_ReturnValue) == 0x000010, "Member 'Item_C_Get_Item_Tooltip::CallFunc_GetItemToCompare_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Tooltip, CallFunc_GetOwningPlayer_ReturnValue2) == 0x000014, "Member 'Item_C_Get_Item_Tooltip::CallFunc_GetOwningPlayer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Tooltip, CallFunc_Create_Item_Tooltip_Return_Value) == 0x000018, "Member 'Item_C_Get_Item_Tooltip::CallFunc_Create_Item_Tooltip_Return_Value' has a wrong offset!");
static_assert(offsetof(Item_C_Get_Item_Tooltip, ComparedItem) == 0x00001C, "Member 'Item_C_Get_Item_Tooltip::ComparedItem' has a wrong offset!");

// Function Item.Item_C.Set Tooltip Header
// 0x0010 (0x0010 - 0x0000)
struct Item_C_Set_Tooltip_Header final
{
public:
	class FText                                   Header_Text;                                       // 0x0000(0x000C)(Parm)
	class USlateBrushAsset*                       Icon_Brush;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Set_Tooltip_Header) == 0x000004, "Wrong alignment on Item_C_Set_Tooltip_Header");
static_assert(sizeof(Item_C_Set_Tooltip_Header) == 0x000010, "Wrong size on Item_C_Set_Tooltip_Header");
static_assert(offsetof(Item_C_Set_Tooltip_Header, Header_Text) == 0x000000, "Member 'Item_C_Set_Tooltip_Header::Header_Text' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Tooltip_Header, Icon_Brush) == 0x00000C, "Member 'Item_C_Set_Tooltip_Header::Icon_Brush' has a wrong offset!");

// Function Item.Item_C.Update Durability Meter
// 0x002C (0x002C - 0x0000)
struct Item_C_Update_Durability_Meter final
{
public:
	struct FVector2D                              CallFunc_Get_Item_Icon_Size_Icon_Size;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetNormalizedDurability_ReturnValue;      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         DurabilityBarHeight;                               // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Update_Durability_Meter) == 0x000004, "Wrong alignment on Item_C_Update_Durability_Meter");
static_assert(sizeof(Item_C_Update_Durability_Meter) == 0x00002C, "Wrong size on Item_C_Update_Durability_Meter");
static_assert(offsetof(Item_C_Update_Durability_Meter, CallFunc_Get_Item_Icon_Size_Icon_Size) == 0x000000, "Member 'Item_C_Update_Durability_Meter::CallFunc_Get_Item_Icon_Size_Icon_Size' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Durability_Meter, CallFunc_GetNormalizedDurability_ReturnValue) == 0x000008, "Member 'Item_C_Update_Durability_Meter::CallFunc_GetNormalizedDurability_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Durability_Meter, CallFunc_BreakVector2D_X) == 0x00000C, "Member 'Item_C_Update_Durability_Meter::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Durability_Meter, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'Item_C_Update_Durability_Meter::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Durability_Meter, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'Item_C_Update_Durability_Meter::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Durability_Meter, CallFunc_FCeil_ReturnValue) == 0x000018, "Member 'Item_C_Update_Durability_Meter::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Durability_Meter, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00001C, "Member 'Item_C_Update_Durability_Meter::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Durability_Meter, CallFunc_MakeVector2D_ReturnValue) == 0x000020, "Member 'Item_C_Update_Durability_Meter::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Durability_Meter, DurabilityBarHeight) == 0x000028, "Member 'Item_C_Update_Durability_Meter::DurabilityBarHeight' has a wrong offset!");

// Function Item.Item_C.Update Cooldown Meter
// 0x0020 (0x0020 - 0x0000)
struct Item_C_Update_Cooldown_Meter final
{
public:
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AFortPlayerController*                  K2Node_DynamicCast_AsFort_Player_Controller;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCoolDownTimeRemaining_CooldownDuration; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetCooldownTimeRemaining_ReturnValue;     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetCoolDownPercentageRemaining_ReturnValue; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTimespan                              CallFunc_FromSeconds_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor)
};
static_assert(alignof(Item_C_Update_Cooldown_Meter) == 0x000004, "Wrong alignment on Item_C_Update_Cooldown_Meter");
static_assert(sizeof(Item_C_Update_Cooldown_Meter) == 0x000020, "Wrong size on Item_C_Update_Cooldown_Meter");
static_assert(offsetof(Item_C_Update_Cooldown_Meter, CallFunc_GetOwningPlayer_ReturnValue) == 0x000000, "Member 'Item_C_Update_Cooldown_Meter::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Cooldown_Meter, K2Node_DynamicCast_AsFort_Player_Controller) == 0x000004, "Member 'Item_C_Update_Cooldown_Meter::K2Node_DynamicCast_AsFort_Player_Controller' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Cooldown_Meter, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'Item_C_Update_Cooldown_Meter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Cooldown_Meter, CallFunc_GetCoolDownTimeRemaining_CooldownDuration) == 0x00000C, "Member 'Item_C_Update_Cooldown_Meter::CallFunc_GetCoolDownTimeRemaining_CooldownDuration' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Cooldown_Meter, CallFunc_GetCooldownTimeRemaining_ReturnValue) == 0x000010, "Member 'Item_C_Update_Cooldown_Meter::CallFunc_GetCooldownTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Cooldown_Meter, CallFunc_GetCoolDownPercentageRemaining_ReturnValue) == 0x000014, "Member 'Item_C_Update_Cooldown_Meter::CallFunc_GetCoolDownPercentageRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Update_Cooldown_Meter, CallFunc_FromSeconds_ReturnValue) == 0x000018, "Member 'Item_C_Update_Cooldown_Meter::CallFunc_FromSeconds_ReturnValue' has a wrong offset!");

// Function Item.Item_C.Set Durability
// 0x0004 (0x0004 - 0x0000)
struct Item_C_Set_Durability final
{
public:
	float                                         Durability;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Set_Durability) == 0x000004, "Wrong alignment on Item_C_Set_Durability");
static_assert(sizeof(Item_C_Set_Durability) == 0x000004, "Wrong size on Item_C_Set_Durability");
static_assert(offsetof(Item_C_Set_Durability, Durability) == 0x000000, "Member 'Item_C_Set_Durability::Durability' has a wrong offset!");

// Function Item.Item_C.Set Cooldown
// 0x0020 (0x0020 - 0x0000)
struct Item_C_Set_Cooldown final
{
public:
	struct FTimespan                              Time_Left;                                         // 0x0000(0x0008)(Parm, ZeroConstructor)
	float                                         Percentage;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Show_Disabled_Without_Cooldown;                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable2;                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Set_Cooldown) == 0x000004, "Wrong alignment on Item_C_Set_Cooldown");
static_assert(sizeof(Item_C_Set_Cooldown) == 0x000020, "Wrong size on Item_C_Set_Cooldown");
static_assert(offsetof(Item_C_Set_Cooldown, Time_Left) == 0x000000, "Member 'Item_C_Set_Cooldown::Time_Left' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Cooldown, Percentage) == 0x000008, "Member 'Item_C_Set_Cooldown::Percentage' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Cooldown, Show_Disabled_Without_Cooldown) == 0x00000C, "Member 'Item_C_Set_Cooldown::Show_Disabled_Without_Cooldown' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Cooldown, Temp_bool_Variable) == 0x00000D, "Member 'Item_C_Set_Cooldown::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Cooldown, Temp_float_Variable) == 0x000010, "Member 'Item_C_Set_Cooldown::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Cooldown, Temp_float_Variable2) == 0x000014, "Member 'Item_C_Set_Cooldown::Temp_float_Variable2' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Cooldown, CallFunc_IsVisible_ReturnValue) == 0x000018, "Member 'Item_C_Set_Cooldown::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Cooldown, CallFunc_BooleanOR_ReturnValue) == 0x000019, "Member 'Item_C_Set_Cooldown::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Cooldown, K2Node_Select_Default) == 0x00001C, "Member 'Item_C_Set_Cooldown::K2Node_Select_Default' has a wrong offset!");

// Function Item.Item_C.Set Stack Count
// 0x0004 (0x0004 - 0x0000)
struct Item_C_Set_Stack_Count final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Set_Stack_Count) == 0x000004, "Wrong alignment on Item_C_Set_Stack_Count");
static_assert(sizeof(Item_C_Set_Stack_Count) == 0x000004, "Wrong size on Item_C_Set_Stack_Count");
static_assert(offsetof(Item_C_Set_Stack_Count, Count) == 0x000000, "Member 'Item_C_Set_Stack_Count::Count' has a wrong offset!");

// Function Item.Item_C.Refresh
// 0x003C (0x003C - 0x0000)
struct Item_C_Refresh final
{
public:
	int32                                         CallFunc_GetStackCount_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetRemainingAmmo_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetNormalizedDurability_ReturnValue;      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AFortPlayerController*                  K2Node_DynamicCast_AsFort_Player_Controller;       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCoolDownPercentageRemaining_ReturnValue; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActivatable_ReturnValue;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCoolDownTimeRemaining_CooldownDuration; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetCooldownTimeRemaining_ReturnValue;     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue2;        // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_FromSeconds_ReturnValue;                  // 0x0030(0x0008)(ZeroConstructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Refresh) == 0x000004, "Wrong alignment on Item_C_Refresh");
static_assert(sizeof(Item_C_Refresh) == 0x00003C, "Wrong size on Item_C_Refresh");
static_assert(offsetof(Item_C_Refresh, CallFunc_GetStackCount_ReturnValue) == 0x000000, "Member 'Item_C_Refresh::CallFunc_GetStackCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, CallFunc_GetRemainingAmmo_ReturnValue) == 0x000004, "Member 'Item_C_Refresh::CallFunc_GetRemainingAmmo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, CallFunc_GetNormalizedDurability_ReturnValue) == 0x000008, "Member 'Item_C_Refresh::CallFunc_GetNormalizedDurability_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'Item_C_Refresh::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'Item_C_Refresh::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, K2Node_DynamicCast_AsFort_Player_Controller) == 0x000014, "Member 'Item_C_Refresh::K2Node_DynamicCast_AsFort_Player_Controller' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'Item_C_Refresh::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, CallFunc_GetCoolDownPercentageRemaining_ReturnValue) == 0x00001C, "Member 'Item_C_Refresh::CallFunc_GetCoolDownPercentageRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, CallFunc_IsActivatable_ReturnValue) == 0x000020, "Member 'Item_C_Refresh::CallFunc_IsActivatable_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000021, "Member 'Item_C_Refresh::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'Item_C_Refresh::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, CallFunc_GetCoolDownTimeRemaining_CooldownDuration) == 0x000024, "Member 'Item_C_Refresh::CallFunc_GetCoolDownTimeRemaining_CooldownDuration' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, CallFunc_GetCooldownTimeRemaining_ReturnValue) == 0x000028, "Member 'Item_C_Refresh::CallFunc_GetCooldownTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, CallFunc_LessEqual_FloatFloat_ReturnValue2) == 0x00002C, "Member 'Item_C_Refresh::CallFunc_LessEqual_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, CallFunc_FromSeconds_ReturnValue) == 0x000030, "Member 'Item_C_Refresh::CallFunc_FromSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, CallFunc_BooleanAND_ReturnValue) == 0x000038, "Member 'Item_C_Refresh::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Refresh, CallFunc_BooleanAND_ReturnValue2) == 0x000039, "Member 'Item_C_Refresh::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");

// Function Item.Item_C.Resize
// 0x0002 (0x0002 - 0x0000)
struct Item_C_Resize final
{
public:
	EFortBrushSize                                Brush_Size;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Resize) == 0x000001, "Wrong alignment on Item_C_Resize");
static_assert(sizeof(Item_C_Resize) == 0x000002, "Wrong size on Item_C_Resize");
static_assert(offsetof(Item_C_Resize, Brush_Size) == 0x000000, "Member 'Item_C_Resize::Brush_Size' has a wrong offset!");
static_assert(offsetof(Item_C_Resize, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'Item_C_Resize::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function Item.Item_C.OnMouseButtonDoubleClick
// 0x01C4 (0x01C4 - 0x0000)
struct Item_C_OnMouseButtonDoubleClick final
{
public:
	struct FGeometry                              InMyGeometry;                                      // 0x0000(0x0034)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          InMouseEvent;                                      // 0x0034(0x0060)(ConstParm, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x0094(0x0060)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00F4(0x0060)()
	class UFortInventoryContext*                  CallFunc_GetContext_ReturnValue;                   // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0158(0x0060)()
	class UFortItem*                              CallFunc_GetItem_ReturnValue;                      // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFortWorldItem*                         K2Node_DynamicCast_AsFort_World_Item;              // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ActivateItem_ReturnValue;                 // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_OnMouseButtonDoubleClick) == 0x000004, "Wrong alignment on Item_C_OnMouseButtonDoubleClick");
static_assert(sizeof(Item_C_OnMouseButtonDoubleClick) == 0x0001C4, "Wrong size on Item_C_OnMouseButtonDoubleClick");
static_assert(offsetof(Item_C_OnMouseButtonDoubleClick, InMyGeometry) == 0x000000, "Member 'Item_C_OnMouseButtonDoubleClick::InMyGeometry' has a wrong offset!");
static_assert(offsetof(Item_C_OnMouseButtonDoubleClick, InMouseEvent) == 0x000034, "Member 'Item_C_OnMouseButtonDoubleClick::InMouseEvent' has a wrong offset!");
static_assert(offsetof(Item_C_OnMouseButtonDoubleClick, ReturnValue) == 0x000094, "Member 'Item_C_OnMouseButtonDoubleClick::ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_OnMouseButtonDoubleClick, CallFunc_Handled_ReturnValue) == 0x0000F4, "Member 'Item_C_OnMouseButtonDoubleClick::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_OnMouseButtonDoubleClick, CallFunc_GetContext_ReturnValue) == 0x000154, "Member 'Item_C_OnMouseButtonDoubleClick::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_OnMouseButtonDoubleClick, CallFunc_Unhandled_ReturnValue) == 0x000158, "Member 'Item_C_OnMouseButtonDoubleClick::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_OnMouseButtonDoubleClick, CallFunc_GetItem_ReturnValue) == 0x0001B8, "Member 'Item_C_OnMouseButtonDoubleClick::CallFunc_GetItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_OnMouseButtonDoubleClick, K2Node_DynamicCast_AsFort_World_Item) == 0x0001BC, "Member 'Item_C_OnMouseButtonDoubleClick::K2Node_DynamicCast_AsFort_World_Item' has a wrong offset!");
static_assert(offsetof(Item_C_OnMouseButtonDoubleClick, K2Node_DynamicCast_bSuccess) == 0x0001C0, "Member 'Item_C_OnMouseButtonDoubleClick::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Item_C_OnMouseButtonDoubleClick, CallFunc_ActivateItem_ReturnValue) == 0x0001C1, "Member 'Item_C_OnMouseButtonDoubleClick::CallFunc_ActivateItem_ReturnValue' has a wrong offset!");

// Function Item.Item_C.Set Subtype Icons & Ammo Color
// 0x0078 (0x0078 - 0x0000)
struct Item_C_Set_Subtype_Icons___Ammo_Color final
{
public:
	bool                                          Override_Secondary_Icon_Color;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Secondary_Icon_Override_Color;                     // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Override_Tertiary_Icon_Color;                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Tertiary_Icon_Override_Color;                      // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           K2Node_Select2_Default;                            // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x004C(0x001C)()
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Set_Subtype_Icons___Ammo_Color) == 0x000004, "Wrong alignment on Item_C_Set_Subtype_Icons___Ammo_Color");
static_assert(sizeof(Item_C_Set_Subtype_Icons___Ammo_Color) == 0x000078, "Wrong size on Item_C_Set_Subtype_Icons___Ammo_Color");
static_assert(offsetof(Item_C_Set_Subtype_Icons___Ammo_Color, Override_Secondary_Icon_Color) == 0x000000, "Member 'Item_C_Set_Subtype_Icons___Ammo_Color::Override_Secondary_Icon_Color' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Subtype_Icons___Ammo_Color, Secondary_Icon_Override_Color) == 0x000004, "Member 'Item_C_Set_Subtype_Icons___Ammo_Color::Secondary_Icon_Override_Color' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Subtype_Icons___Ammo_Color, Override_Tertiary_Icon_Color) == 0x000014, "Member 'Item_C_Set_Subtype_Icons___Ammo_Color::Override_Tertiary_Icon_Color' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Subtype_Icons___Ammo_Color, Tertiary_Icon_Override_Color) == 0x000018, "Member 'Item_C_Set_Subtype_Icons___Ammo_Color::Tertiary_Icon_Override_Color' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Subtype_Icons___Ammo_Color, Temp_bool_Variable) == 0x000028, "Member 'Item_C_Set_Subtype_Icons___Ammo_Color::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Subtype_Icons___Ammo_Color, Temp_bool_Variable2) == 0x000029, "Member 'Item_C_Set_Subtype_Icons___Ammo_Color::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Subtype_Icons___Ammo_Color, K2Node_SwitchEnum_CmpSuccess) == 0x00002A, "Member 'Item_C_Set_Subtype_Icons___Ammo_Color::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Subtype_Icons___Ammo_Color, K2Node_Select_Default) == 0x00002C, "Member 'Item_C_Set_Subtype_Icons___Ammo_Color::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Subtype_Icons___Ammo_Color, K2Node_Select2_Default) == 0x00003C, "Member 'Item_C_Set_Subtype_Icons___Ammo_Color::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Subtype_Icons___Ammo_Color, K2Node_MakeStruct_SlateColor) == 0x00004C, "Member 'Item_C_Set_Subtype_Icons___Ammo_Color::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Subtype_Icons___Ammo_Color, K2Node_MakeStruct_LinearColor) == 0x000068, "Member 'Item_C_Set_Subtype_Icons___Ammo_Color::K2Node_MakeStruct_LinearColor' has a wrong offset!");

// Function Item.Item_C.Set Item Icon Visibility
// 0x0021 (0x0021 - 0x0000)
struct Item_C_Set_Item_Icon_Visibility final
{
public:
	bool                                          Override_Icon_Visibility;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Item_Icon_Visibility;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable4;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             Temp_byte_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable5;                               // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable6;                               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable7;                               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable8;                               // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable9;                               // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable10;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable11;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable12;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable3;                               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable13;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortItemType                                 CallFunc_GetType_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable14;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable15;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortBrushSize                                Temp_byte_Variable4;                               // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select2_Default;                            // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue2;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select3_Default;                            // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select4_Default;                            // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Set_Item_Icon_Visibility) == 0x000001, "Wrong alignment on Item_C_Set_Item_Icon_Visibility");
static_assert(sizeof(Item_C_Set_Item_Icon_Visibility) == 0x000021, "Wrong size on Item_C_Set_Item_Icon_Visibility");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Override_Icon_Visibility) == 0x000000, "Member 'Item_C_Set_Item_Icon_Visibility::Override_Icon_Visibility' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Item_Icon_Visibility) == 0x000001, "Member 'Item_C_Set_Item_Icon_Visibility::Item_Icon_Visibility' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable) == 0x000002, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable2) == 0x000003, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable3) == 0x000004, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable4) == 0x000005, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_byte_Variable) == 0x000006, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable5) == 0x000007, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable5' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable6) == 0x000008, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable6' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable7) == 0x000009, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable7' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable8) == 0x00000A, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable8' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable9) == 0x00000B, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable9' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable10) == 0x00000C, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable10' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable11) == 0x00000D, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable11' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable12) == 0x00000E, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable12' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_byte_Variable2) == 0x00000F, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_byte_Variable3) == 0x000010, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable13) == 0x000011, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable13' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, CallFunc_GetType_ReturnValue) == 0x000012, "Member 'Item_C_Set_Item_Icon_Visibility::CallFunc_GetType_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000013, "Member 'Item_C_Set_Item_Icon_Visibility::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable14) == 0x000014, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable14' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_bool_Variable15) == 0x000015, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_bool_Variable15' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, Temp_byte_Variable4) == 0x000016, "Member 'Item_C_Set_Item_Icon_Visibility::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, CallFunc_Not_PreBool_ReturnValue) == 0x000017, "Member 'Item_C_Set_Item_Icon_Visibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, K2Node_Select_Default) == 0x000018, "Member 'Item_C_Set_Item_Icon_Visibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, CallFunc_BooleanAND_ReturnValue) == 0x000019, "Member 'Item_C_Set_Item_Icon_Visibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, K2Node_Select2_Default) == 0x00001A, "Member 'Item_C_Set_Item_Icon_Visibility::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, CallFunc_BooleanOR_ReturnValue) == 0x00001B, "Member 'Item_C_Set_Item_Icon_Visibility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, CallFunc_BooleanOR_ReturnValue2) == 0x00001C, "Member 'Item_C_Set_Item_Icon_Visibility::CallFunc_BooleanOR_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, K2Node_Select3_Default) == 0x00001D, "Member 'Item_C_Set_Item_Icon_Visibility::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, K2Node_Select4_Default) == 0x00001E, "Member 'Item_C_Set_Item_Icon_Visibility::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x00001F, "Member 'Item_C_Set_Item_Icon_Visibility::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Item_Icon_Visibility, CallFunc_BooleanAND_ReturnValue2) == 0x000020, "Member 'Item_C_Set_Item_Icon_Visibility::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");

// Function Item.Item_C.Set Display Style
// 0x0002 (0x0002 - 0x0000)
struct Item_C_Set_Display_Style final
{
public:
	bool                                          Override_Display_Style;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EItemDisplayStyle                             DisplayStyle_0;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Item_C_Set_Display_Style) == 0x000001, "Wrong alignment on Item_C_Set_Display_Style");
static_assert(sizeof(Item_C_Set_Display_Style) == 0x000002, "Wrong size on Item_C_Set_Display_Style");
static_assert(offsetof(Item_C_Set_Display_Style, Override_Display_Style) == 0x000000, "Member 'Item_C_Set_Display_Style::Override_Display_Style' has a wrong offset!");
static_assert(offsetof(Item_C_Set_Display_Style, DisplayStyle_0) == 0x000001, "Member 'Item_C_Set_Display_Style::DisplayStyle_0' has a wrong offset!");

}

#pragma pack(pop)
