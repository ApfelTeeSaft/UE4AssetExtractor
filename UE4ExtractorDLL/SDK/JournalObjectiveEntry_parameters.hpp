#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JournalObjectiveEntry

#include "Basic.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function JournalObjectiveEntry.JournalObjectiveEntry_C.ExecuteUbergraph_JournalObjectiveEntry
// 0x0010 (0x0010 - 0x0000)
struct JournalObjectiveEntry_C_ExecuteUbergraph_JournalObjectiveEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UObject*                                K2Node_Event_InData;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFortQuestObjectiveInfo*                K2Node_DynamicCast_AsFort_Quest_Objective_Info;    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(JournalObjectiveEntry_C_ExecuteUbergraph_JournalObjectiveEntry) == 0x000004, "Wrong alignment on JournalObjectiveEntry_C_ExecuteUbergraph_JournalObjectiveEntry");
static_assert(sizeof(JournalObjectiveEntry_C_ExecuteUbergraph_JournalObjectiveEntry) == 0x000010, "Wrong size on JournalObjectiveEntry_C_ExecuteUbergraph_JournalObjectiveEntry");
static_assert(offsetof(JournalObjectiveEntry_C_ExecuteUbergraph_JournalObjectiveEntry, EntryPoint) == 0x000000, "Member 'JournalObjectiveEntry_C_ExecuteUbergraph_JournalObjectiveEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(JournalObjectiveEntry_C_ExecuteUbergraph_JournalObjectiveEntry, K2Node_Event_InData) == 0x000004, "Member 'JournalObjectiveEntry_C_ExecuteUbergraph_JournalObjectiveEntry::K2Node_Event_InData' has a wrong offset!");
static_assert(offsetof(JournalObjectiveEntry_C_ExecuteUbergraph_JournalObjectiveEntry, K2Node_DynamicCast_AsFort_Quest_Objective_Info) == 0x000008, "Member 'JournalObjectiveEntry_C_ExecuteUbergraph_JournalObjectiveEntry::K2Node_DynamicCast_AsFort_Quest_Objective_Info' has a wrong offset!");
static_assert(offsetof(JournalObjectiveEntry_C_ExecuteUbergraph_JournalObjectiveEntry, K2Node_DynamicCast_bSuccess) == 0x00000C, "Member 'JournalObjectiveEntry_C_ExecuteUbergraph_JournalObjectiveEntry::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function JournalObjectiveEntry.JournalObjectiveEntry_C.SetData
// 0x0004 (0x0004 - 0x0000)
struct JournalObjectiveEntry_C_SetData final
{
public:
	class UObject*                                InData;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(JournalObjectiveEntry_C_SetData) == 0x000004, "Wrong alignment on JournalObjectiveEntry_C_SetData");
static_assert(sizeof(JournalObjectiveEntry_C_SetData) == 0x000004, "Wrong size on JournalObjectiveEntry_C_SetData");
static_assert(offsetof(JournalObjectiveEntry_C_SetData, InData) == 0x000000, "Member 'JournalObjectiveEntry_C_SetData::InData' has a wrong offset!");

// Function JournalObjectiveEntry.JournalObjectiveEntry_C.UpdateProgress
// 0x0004 (0x0004 - 0x0000)
struct JournalObjectiveEntry_C_UpdateProgress final
{
public:
	class UFortQuestObjectiveInfo*                Objective;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(JournalObjectiveEntry_C_UpdateProgress) == 0x000004, "Wrong alignment on JournalObjectiveEntry_C_UpdateProgress");
static_assert(sizeof(JournalObjectiveEntry_C_UpdateProgress) == 0x000004, "Wrong size on JournalObjectiveEntry_C_UpdateProgress");
static_assert(offsetof(JournalObjectiveEntry_C_UpdateProgress, Objective) == 0x000000, "Member 'JournalObjectiveEntry_C_UpdateProgress::Objective' has a wrong offset!");

// Function JournalObjectiveEntry.JournalObjectiveEntry_C.Update
// 0x0004 (0x0004 - 0x0000)
struct JournalObjectiveEntry_C_Update final
{
public:
	class UFortQuestObjectiveInfo*                Objective;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(JournalObjectiveEntry_C_Update) == 0x000004, "Wrong alignment on JournalObjectiveEntry_C_Update");
static_assert(sizeof(JournalObjectiveEntry_C_Update) == 0x000004, "Wrong size on JournalObjectiveEntry_C_Update");
static_assert(offsetof(JournalObjectiveEntry_C_Update, Objective) == 0x000000, "Member 'JournalObjectiveEntry_C_Update::Objective' has a wrong offset!");

}

#pragma pack(pop)
