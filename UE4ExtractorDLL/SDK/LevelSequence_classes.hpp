#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelSequence

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "LevelSequence_structs.hpp"
#include "MovieScene_classes.hpp"
#include "Engine_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Class LevelSequence.LevelSequence
// 0x007C (0x0098 - 0x001C)
class ULevelSequence final : public UMovieSceneSequence
{
public:
	class UMovieScene*                            MovieScene;                                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLevelSequenceObjectReferenceMap       ObjectReferences;                                  // 0x0020(0x003C)(NativeAccessSpecifierPrivate)
	TMap<class FString, struct FLevelSequenceObject> PossessedObjects;                                  // 0x005C(0x003C)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequence">();
	}
	static class ULevelSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequence>();
	}
};
static_assert(alignof(ULevelSequence) == 0x000004, "Wrong alignment on ULevelSequence");
static_assert(sizeof(ULevelSequence) == 0x000098, "Wrong size on ULevelSequence");
static_assert(offsetof(ULevelSequence, MovieScene) == 0x00001C, "Member 'ULevelSequence::MovieScene' has a wrong offset!");
static_assert(offsetof(ULevelSequence, ObjectReferences) == 0x000020, "Member 'ULevelSequence::ObjectReferences' has a wrong offset!");
static_assert(offsetof(ULevelSequence, PossessedObjects) == 0x00005C, "Member 'ULevelSequence::PossessedObjects' has a wrong offset!");

// Class LevelSequence.LevelSequencePlayer
// 0x004C (0x0068 - 0x001C)
class ULevelSequencePlayer final : public UObject
{
public:
	uint8                                         Pad_1C[0x10];                                      // 0x001C(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         LevelSequence;                                     // 0x002C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsPlaying;                                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeCursorPosition;                                // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelSequencePlaybackSettings         PlaybackSettings;                                  // 0x0040(0x0008)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x20];                                      // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULevelSequencePlayer* CreateLevelSequencePlayer(class UObject* WorldContextObject, class ULevelSequence* LevelSequence_0, const struct FLevelSequencePlaybackSettings& Settings);

	void Pause();
	void Play();
	void PlayLooping(int32 NumLoops);
	void SetPlaybackPosition(float NewPlaybackPosition);
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);
	void SetPlayRate(float PlayRate);
	void Stop();

	float GetLength() const;
	float GetPlaybackPosition() const;
	float GetPlayRate() const;
	bool IsPlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequencePlayer">();
	}
	static class ULevelSequencePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequencePlayer>();
	}
};
static_assert(alignof(ULevelSequencePlayer) == 0x000004, "Wrong alignment on ULevelSequencePlayer");
static_assert(sizeof(ULevelSequencePlayer) == 0x000068, "Wrong size on ULevelSequencePlayer");
static_assert(offsetof(ULevelSequencePlayer, LevelSequence) == 0x00002C, "Member 'ULevelSequencePlayer::LevelSequence' has a wrong offset!");
static_assert(offsetof(ULevelSequencePlayer, bIsPlaying) == 0x000030, "Member 'ULevelSequencePlayer::bIsPlaying' has a wrong offset!");
static_assert(offsetof(ULevelSequencePlayer, TimeCursorPosition) == 0x000034, "Member 'ULevelSequencePlayer::TimeCursorPosition' has a wrong offset!");
static_assert(offsetof(ULevelSequencePlayer, PlaybackSettings) == 0x000040, "Member 'ULevelSequencePlayer::PlaybackSettings' has a wrong offset!");

// Class LevelSequence.LevelSequenceActor
// 0x001C (0x025C - 0x0240)
class ALevelSequenceActor final : public AActor
{
public:
	bool                                          bAutoPlay;                                         // 0x0240(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelSequencePlaybackSettings         PlaybackSettings;                                  // 0x0244(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class ULevelSequencePlayer*                   SequencePlayer;                                    // 0x024C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                  LevelSequence;                                     // 0x0250(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void SetSequence(class ULevelSequence* InSequence);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceActor">();
	}
	static class ALevelSequenceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelSequenceActor>();
	}
};
static_assert(alignof(ALevelSequenceActor) == 0x000004, "Wrong alignment on ALevelSequenceActor");
static_assert(sizeof(ALevelSequenceActor) == 0x00025C, "Wrong size on ALevelSequenceActor");
static_assert(offsetof(ALevelSequenceActor, bAutoPlay) == 0x000240, "Member 'ALevelSequenceActor::bAutoPlay' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, PlaybackSettings) == 0x000244, "Member 'ALevelSequenceActor::PlaybackSettings' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, SequencePlayer) == 0x00024C, "Member 'ALevelSequenceActor::SequencePlayer' has a wrong offset!");
static_assert(offsetof(ALevelSequenceActor, LevelSequence) == 0x000250, "Member 'ALevelSequenceActor::LevelSequence' has a wrong offset!");

}

#pragma pack(pop)
