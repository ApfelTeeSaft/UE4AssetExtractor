#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MaterialShaderQualitySettings

#include "Basic.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// ScriptStruct MaterialShaderQualitySettings.MaterialQualityOverrides
// 0x0005 (0x0005 - 0x0000)
struct FMaterialQualityOverrides final
{
public:
	bool                                          bEnableOverride;                                   // 0x0000(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForceFullyRough;                                  // 0x0001(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForceNonMetal;                                    // 0x0002(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForceDisableLMDirectionality;                     // 0x0003(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForceLQReflections;                               // 0x0004(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialQualityOverrides) == 0x000001, "Wrong alignment on FMaterialQualityOverrides");
static_assert(sizeof(FMaterialQualityOverrides) == 0x000005, "Wrong size on FMaterialQualityOverrides");
static_assert(offsetof(FMaterialQualityOverrides, bEnableOverride) == 0x000000, "Member 'FMaterialQualityOverrides::bEnableOverride' has a wrong offset!");
static_assert(offsetof(FMaterialQualityOverrides, bForceFullyRough) == 0x000001, "Member 'FMaterialQualityOverrides::bForceFullyRough' has a wrong offset!");
static_assert(offsetof(FMaterialQualityOverrides, bForceNonMetal) == 0x000002, "Member 'FMaterialQualityOverrides::bForceNonMetal' has a wrong offset!");
static_assert(offsetof(FMaterialQualityOverrides, bForceDisableLMDirectionality) == 0x000003, "Member 'FMaterialQualityOverrides::bForceDisableLMDirectionality' has a wrong offset!");
static_assert(offsetof(FMaterialQualityOverrides, bForceLQReflections) == 0x000004, "Member 'FMaterialQualityOverrides::bForceLQReflections' has a wrong offset!");

// ScriptStruct MaterialShaderQualitySettings.ShaderQualityOverridesListItem
// 0x0014 (0x0014 - 0x0000)
struct FShaderQualityOverridesListItem final
{
public:
	class FString                                 RangeName;                                         // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoolProperty*                          QualityProperty;                                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UShaderPlatformQualitySettings*         SettingContainer;                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShaderQualityOverridesListItem) == 0x000004, "Wrong alignment on FShaderQualityOverridesListItem");
static_assert(sizeof(FShaderQualityOverridesListItem) == 0x000014, "Wrong size on FShaderQualityOverridesListItem");
static_assert(offsetof(FShaderQualityOverridesListItem, RangeName) == 0x000000, "Member 'FShaderQualityOverridesListItem::RangeName' has a wrong offset!");
static_assert(offsetof(FShaderQualityOverridesListItem, QualityProperty) == 0x00000C, "Member 'FShaderQualityOverridesListItem::QualityProperty' has a wrong offset!");
static_assert(offsetof(FShaderQualityOverridesListItem, SettingContainer) == 0x000010, "Member 'FShaderQualityOverridesListItem::SettingContainer' has a wrong offset!");

}

#pragma pack(pop)
