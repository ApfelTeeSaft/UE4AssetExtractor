#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MediaAssets

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Class MediaAssets.MediaPlayer
// 0x00A4 (0x00C0 - 0x001C)
class UMediaPlayer final : public UObject
{
public:
	UMulticastDelegateProperty_                   OnEndReached;                                      // 0x001C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMediaClosed;                                     // 0x0028(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMediaOpened;                                     // 0x0034(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnMediaOpenFailed;                                 // 0x0040(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlaybackResumed;                                 // 0x004C(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnPlaybackSuspended;                               // 0x0058(0x000C)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Looping : 1;                                       // 0x0064(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, NativeAccessSpecifierProtected))
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 URL;                                               // 0x0068(0x000C)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_74[0x4C];                                      // 0x0074(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Close();
	bool OpenUrl(const class FString& NewUrl);
	bool Pause();
	bool Play();
	bool Rewind();
	bool Seek(const struct FTimespan& InTime);
	bool SetLooping(bool InLooping);
	bool SetRate(float Rate);

	bool CanPause() const;
	bool CanPlay() const;
	struct FTimespan GetDuration() const;
	float GetRate() const;
	struct FTimespan GetTime() const;
	class FString GetUrl() const;
	bool IsLooping() const;
	bool IsPaused() const;
	bool IsPlaying() const;
	bool IsReady() const;
	bool SupportsRate(float Rate, bool Unthinned) const;
	bool SupportsScrubbing() const;
	bool SupportsSeeking() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaPlayer">();
	}
	static class UMediaPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediaPlayer>();
	}
};
static_assert(alignof(UMediaPlayer) == 0x000004, "Wrong alignment on UMediaPlayer");
static_assert(sizeof(UMediaPlayer) == 0x0000C0, "Wrong size on UMediaPlayer");
static_assert(offsetof(UMediaPlayer, OnEndReached) == 0x00001C, "Member 'UMediaPlayer::OnEndReached' has a wrong offset!");
static_assert(offsetof(UMediaPlayer, OnMediaClosed) == 0x000028, "Member 'UMediaPlayer::OnMediaClosed' has a wrong offset!");
static_assert(offsetof(UMediaPlayer, OnMediaOpened) == 0x000034, "Member 'UMediaPlayer::OnMediaOpened' has a wrong offset!");
static_assert(offsetof(UMediaPlayer, OnMediaOpenFailed) == 0x000040, "Member 'UMediaPlayer::OnMediaOpenFailed' has a wrong offset!");
static_assert(offsetof(UMediaPlayer, OnPlaybackResumed) == 0x00004C, "Member 'UMediaPlayer::OnPlaybackResumed' has a wrong offset!");
static_assert(offsetof(UMediaPlayer, OnPlaybackSuspended) == 0x000058, "Member 'UMediaPlayer::OnPlaybackSuspended' has a wrong offset!");
static_assert(offsetof(UMediaPlayer, URL) == 0x000068, "Member 'UMediaPlayer::URL' has a wrong offset!");

// Class MediaAssets.MediaSoundWave
// 0x0030 (0x01D0 - 0x01A0)
class UMediaSoundWave final : public USoundWave
{
public:
	int32                                         AudioTrackIndex;                                   // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaPlayer*                           MediaPlayer;                                       // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8[0x10];                                     // 0x01A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UMediaPlayer>            CurrentMediaPlayer;                                // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C0[0x10];                                     // 0x01C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetMediaPlayer(class UMediaPlayer* InMediaPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaSoundWave">();
	}
	static class UMediaSoundWave* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediaSoundWave>();
	}
};
static_assert(alignof(UMediaSoundWave) == 0x000004, "Wrong alignment on UMediaSoundWave");
static_assert(sizeof(UMediaSoundWave) == 0x0001D0, "Wrong size on UMediaSoundWave");
static_assert(offsetof(UMediaSoundWave, AudioTrackIndex) == 0x0001A0, "Member 'UMediaSoundWave::AudioTrackIndex' has a wrong offset!");
static_assert(offsetof(UMediaSoundWave, MediaPlayer) == 0x0001A4, "Member 'UMediaSoundWave::MediaPlayer' has a wrong offset!");
static_assert(offsetof(UMediaSoundWave, CurrentMediaPlayer) == 0x0001B8, "Member 'UMediaSoundWave::CurrentMediaPlayer' has a wrong offset!");

// Class MediaAssets.MediaTexture
// 0x0044 (0x00A8 - 0x0064)
class UMediaTexture final : public UTexture
{
public:
	ETextureAddress                               AddressX;                                          // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressY;                                          // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ClearColor;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         VideoTrackIndex;                                   // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMediaPlayer*                           MediaPlayer;                                       // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UMediaPlayer>            CurrentMediaPlayer;                                // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_90[0x18];                                      // 0x0090(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetMediaPlayer(class UMediaPlayer* InMediaPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediaTexture">();
	}
	static class UMediaTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediaTexture>();
	}
};
static_assert(alignof(UMediaTexture) == 0x000004, "Wrong alignment on UMediaTexture");
static_assert(sizeof(UMediaTexture) == 0x0000A8, "Wrong size on UMediaTexture");
static_assert(offsetof(UMediaTexture, AddressX) == 0x000064, "Member 'UMediaTexture::AddressX' has a wrong offset!");
static_assert(offsetof(UMediaTexture, AddressY) == 0x000065, "Member 'UMediaTexture::AddressY' has a wrong offset!");
static_assert(offsetof(UMediaTexture, ClearColor) == 0x000068, "Member 'UMediaTexture::ClearColor' has a wrong offset!");
static_assert(offsetof(UMediaTexture, VideoTrackIndex) == 0x000078, "Member 'UMediaTexture::VideoTrackIndex' has a wrong offset!");
static_assert(offsetof(UMediaTexture, MediaPlayer) == 0x00007C, "Member 'UMediaTexture::MediaPlayer' has a wrong offset!");
static_assert(offsetof(UMediaTexture, CurrentMediaPlayer) == 0x000088, "Member 'UMediaTexture::CurrentMediaPlayer' has a wrong offset!");

}

#pragma pack(pop)
