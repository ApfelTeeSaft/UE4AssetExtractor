#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MediaAssets

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function MediaAssets.MediaPlayer.OpenUrl
// 0x0010 (0x0010 - 0x0000)
struct MediaPlayer_OpenUrl final
{
public:
	class FString                                 NewUrl;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_OpenUrl) == 0x000004, "Wrong alignment on MediaPlayer_OpenUrl");
static_assert(sizeof(MediaPlayer_OpenUrl) == 0x000010, "Wrong size on MediaPlayer_OpenUrl");
static_assert(offsetof(MediaPlayer_OpenUrl, NewUrl) == 0x000000, "Member 'MediaPlayer_OpenUrl::NewUrl' has a wrong offset!");
static_assert(offsetof(MediaPlayer_OpenUrl, ReturnValue) == 0x00000C, "Member 'MediaPlayer_OpenUrl::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.Pause
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_Pause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_Pause) == 0x000001, "Wrong alignment on MediaPlayer_Pause");
static_assert(sizeof(MediaPlayer_Pause) == 0x000001, "Wrong size on MediaPlayer_Pause");
static_assert(offsetof(MediaPlayer_Pause, ReturnValue) == 0x000000, "Member 'MediaPlayer_Pause::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.Play
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_Play final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_Play) == 0x000001, "Wrong alignment on MediaPlayer_Play");
static_assert(sizeof(MediaPlayer_Play) == 0x000001, "Wrong size on MediaPlayer_Play");
static_assert(offsetof(MediaPlayer_Play, ReturnValue) == 0x000000, "Member 'MediaPlayer_Play::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.Rewind
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_Rewind final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_Rewind) == 0x000001, "Wrong alignment on MediaPlayer_Rewind");
static_assert(sizeof(MediaPlayer_Rewind) == 0x000001, "Wrong size on MediaPlayer_Rewind");
static_assert(offsetof(MediaPlayer_Rewind, ReturnValue) == 0x000000, "Member 'MediaPlayer_Rewind::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.Seek
// 0x000C (0x000C - 0x0000)
struct MediaPlayer_Seek final
{
public:
	struct FTimespan                              InTime;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_Seek) == 0x000004, "Wrong alignment on MediaPlayer_Seek");
static_assert(sizeof(MediaPlayer_Seek) == 0x00000C, "Wrong size on MediaPlayer_Seek");
static_assert(offsetof(MediaPlayer_Seek, InTime) == 0x000000, "Member 'MediaPlayer_Seek::InTime' has a wrong offset!");
static_assert(offsetof(MediaPlayer_Seek, ReturnValue) == 0x000008, "Member 'MediaPlayer_Seek::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SetLooping
// 0x0002 (0x0002 - 0x0000)
struct MediaPlayer_SetLooping final
{
public:
	bool                                          InLooping;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_SetLooping) == 0x000001, "Wrong alignment on MediaPlayer_SetLooping");
static_assert(sizeof(MediaPlayer_SetLooping) == 0x000002, "Wrong size on MediaPlayer_SetLooping");
static_assert(offsetof(MediaPlayer_SetLooping, InLooping) == 0x000000, "Member 'MediaPlayer_SetLooping::InLooping' has a wrong offset!");
static_assert(offsetof(MediaPlayer_SetLooping, ReturnValue) == 0x000001, "Member 'MediaPlayer_SetLooping::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SetRate
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_SetRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_SetRate) == 0x000004, "Wrong alignment on MediaPlayer_SetRate");
static_assert(sizeof(MediaPlayer_SetRate) == 0x000008, "Wrong size on MediaPlayer_SetRate");
static_assert(offsetof(MediaPlayer_SetRate, Rate) == 0x000000, "Member 'MediaPlayer_SetRate::Rate' has a wrong offset!");
static_assert(offsetof(MediaPlayer_SetRate, ReturnValue) == 0x000004, "Member 'MediaPlayer_SetRate::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.CanPause
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_CanPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_CanPause) == 0x000001, "Wrong alignment on MediaPlayer_CanPause");
static_assert(sizeof(MediaPlayer_CanPause) == 0x000001, "Wrong size on MediaPlayer_CanPause");
static_assert(offsetof(MediaPlayer_CanPause, ReturnValue) == 0x000000, "Member 'MediaPlayer_CanPause::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.CanPlay
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_CanPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_CanPlay) == 0x000001, "Wrong alignment on MediaPlayer_CanPlay");
static_assert(sizeof(MediaPlayer_CanPlay) == 0x000001, "Wrong size on MediaPlayer_CanPlay");
static_assert(offsetof(MediaPlayer_CanPlay, ReturnValue) == 0x000000, "Member 'MediaPlayer_CanPlay::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetDuration
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_GetDuration final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetDuration) == 0x000004, "Wrong alignment on MediaPlayer_GetDuration");
static_assert(sizeof(MediaPlayer_GetDuration) == 0x000008, "Wrong size on MediaPlayer_GetDuration");
static_assert(offsetof(MediaPlayer_GetDuration, ReturnValue) == 0x000000, "Member 'MediaPlayer_GetDuration::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetRate
// 0x0004 (0x0004 - 0x0000)
struct MediaPlayer_GetRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetRate) == 0x000004, "Wrong alignment on MediaPlayer_GetRate");
static_assert(sizeof(MediaPlayer_GetRate) == 0x000004, "Wrong size on MediaPlayer_GetRate");
static_assert(offsetof(MediaPlayer_GetRate, ReturnValue) == 0x000000, "Member 'MediaPlayer_GetRate::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetTime
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_GetTime final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetTime) == 0x000004, "Wrong alignment on MediaPlayer_GetTime");
static_assert(sizeof(MediaPlayer_GetTime) == 0x000008, "Wrong size on MediaPlayer_GetTime");
static_assert(offsetof(MediaPlayer_GetTime, ReturnValue) == 0x000000, "Member 'MediaPlayer_GetTime::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.GetUrl
// 0x000C (0x000C - 0x0000)
struct MediaPlayer_GetUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_GetUrl) == 0x000004, "Wrong alignment on MediaPlayer_GetUrl");
static_assert(sizeof(MediaPlayer_GetUrl) == 0x00000C, "Wrong size on MediaPlayer_GetUrl");
static_assert(offsetof(MediaPlayer_GetUrl, ReturnValue) == 0x000000, "Member 'MediaPlayer_GetUrl::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.IsLooping
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_IsLooping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_IsLooping) == 0x000001, "Wrong alignment on MediaPlayer_IsLooping");
static_assert(sizeof(MediaPlayer_IsLooping) == 0x000001, "Wrong size on MediaPlayer_IsLooping");
static_assert(offsetof(MediaPlayer_IsLooping, ReturnValue) == 0x000000, "Member 'MediaPlayer_IsLooping::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_IsPaused) == 0x000001, "Wrong alignment on MediaPlayer_IsPaused");
static_assert(sizeof(MediaPlayer_IsPaused) == 0x000001, "Wrong size on MediaPlayer_IsPaused");
static_assert(offsetof(MediaPlayer_IsPaused, ReturnValue) == 0x000000, "Member 'MediaPlayer_IsPaused::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_IsPlaying) == 0x000001, "Wrong alignment on MediaPlayer_IsPlaying");
static_assert(sizeof(MediaPlayer_IsPlaying) == 0x000001, "Wrong size on MediaPlayer_IsPlaying");
static_assert(offsetof(MediaPlayer_IsPlaying, ReturnValue) == 0x000000, "Member 'MediaPlayer_IsPlaying::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.IsReady
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_IsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_IsReady) == 0x000001, "Wrong alignment on MediaPlayer_IsReady");
static_assert(sizeof(MediaPlayer_IsReady) == 0x000001, "Wrong size on MediaPlayer_IsReady");
static_assert(offsetof(MediaPlayer_IsReady, ReturnValue) == 0x000000, "Member 'MediaPlayer_IsReady::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SupportsRate
// 0x0008 (0x0008 - 0x0000)
struct MediaPlayer_SupportsRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Unthinned;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MediaPlayer_SupportsRate) == 0x000004, "Wrong alignment on MediaPlayer_SupportsRate");
static_assert(sizeof(MediaPlayer_SupportsRate) == 0x000008, "Wrong size on MediaPlayer_SupportsRate");
static_assert(offsetof(MediaPlayer_SupportsRate, Rate) == 0x000000, "Member 'MediaPlayer_SupportsRate::Rate' has a wrong offset!");
static_assert(offsetof(MediaPlayer_SupportsRate, Unthinned) == 0x000004, "Member 'MediaPlayer_SupportsRate::Unthinned' has a wrong offset!");
static_assert(offsetof(MediaPlayer_SupportsRate, ReturnValue) == 0x000005, "Member 'MediaPlayer_SupportsRate::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SupportsScrubbing
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_SupportsScrubbing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_SupportsScrubbing) == 0x000001, "Wrong alignment on MediaPlayer_SupportsScrubbing");
static_assert(sizeof(MediaPlayer_SupportsScrubbing) == 0x000001, "Wrong size on MediaPlayer_SupportsScrubbing");
static_assert(offsetof(MediaPlayer_SupportsScrubbing, ReturnValue) == 0x000000, "Member 'MediaPlayer_SupportsScrubbing::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaPlayer.SupportsSeeking
// 0x0001 (0x0001 - 0x0000)
struct MediaPlayer_SupportsSeeking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaPlayer_SupportsSeeking) == 0x000001, "Wrong alignment on MediaPlayer_SupportsSeeking");
static_assert(sizeof(MediaPlayer_SupportsSeeking) == 0x000001, "Wrong size on MediaPlayer_SupportsSeeking");
static_assert(offsetof(MediaPlayer_SupportsSeeking, ReturnValue) == 0x000000, "Member 'MediaPlayer_SupportsSeeking::ReturnValue' has a wrong offset!");

// Function MediaAssets.MediaSoundWave.SetMediaPlayer
// 0x0004 (0x0004 - 0x0000)
struct MediaSoundWave_SetMediaPlayer final
{
public:
	class UMediaPlayer*                           InMediaPlayer;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaSoundWave_SetMediaPlayer) == 0x000004, "Wrong alignment on MediaSoundWave_SetMediaPlayer");
static_assert(sizeof(MediaSoundWave_SetMediaPlayer) == 0x000004, "Wrong size on MediaSoundWave_SetMediaPlayer");
static_assert(offsetof(MediaSoundWave_SetMediaPlayer, InMediaPlayer) == 0x000000, "Member 'MediaSoundWave_SetMediaPlayer::InMediaPlayer' has a wrong offset!");

// Function MediaAssets.MediaTexture.SetMediaPlayer
// 0x0004 (0x0004 - 0x0000)
struct MediaTexture_SetMediaPlayer final
{
public:
	class UMediaPlayer*                           InMediaPlayer;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MediaTexture_SetMediaPlayer) == 0x000004, "Wrong alignment on MediaTexture_SetMediaPlayer");
static_assert(sizeof(MediaTexture_SetMediaPlayer) == 0x000004, "Wrong size on MediaTexture_SetMediaPlayer");
static_assert(offsetof(MediaTexture_SetMediaPlayer, InMediaPlayer) == 0x000000, "Member 'MediaTexture_SetMediaPlayer::InMediaPlayer' has a wrong offset!");

}

#pragma pack(pop)
