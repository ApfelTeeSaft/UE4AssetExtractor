#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MissionTooltip

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "UMG_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// WidgetBlueprintGeneratedClass MissionTooltip.MissionTooltip_C
// 0x0034 (0x01EC - 0x01B8)
class UMissionTooltip_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01B8(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UHorizontalBox*                         Biome_Info;                                        // 0x01BC(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             Biome_Name;                                        // 0x01C0(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UHorizontalBox*                         Difficulty_Info;                                   // 0x01C4(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             Difficulty_Name;                                   // 0x01C8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UTextBlock*                             Mission_Name;                                      // 0x01CC(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UImage*                                 Mission_Type_Icon;                                 // 0x01D0(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UPowerRequirement_C*                    PowerRequirement;                                  // 0x01D4(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           RewardsContent;                                    // 0x01D8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	class UVerticalBox*                           VerticalBox;                                       // 0x01DC(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor)
	TArray<struct FFortMissionRewardInfo>         MissionRewards;                                    // 0x01E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_MissionTooltip(int32 EntryPoint);
	void Construct();
	void UpdateMissionInfo(class ABP_Hex_PARENT_C* Mission_Details);
	void HandleMissionRewards();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MissionTooltip_C">();
	}
	static class UMissionTooltip_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMissionTooltip_C>();
	}
};
static_assert(alignof(UMissionTooltip_C) == 0x000004, "Wrong alignment on UMissionTooltip_C");
static_assert(sizeof(UMissionTooltip_C) == 0x0001EC, "Wrong size on UMissionTooltip_C");
static_assert(offsetof(UMissionTooltip_C, UberGraphFrame) == 0x0001B8, "Member 'UMissionTooltip_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMissionTooltip_C, Biome_Info) == 0x0001BC, "Member 'UMissionTooltip_C::Biome_Info' has a wrong offset!");
static_assert(offsetof(UMissionTooltip_C, Biome_Name) == 0x0001C0, "Member 'UMissionTooltip_C::Biome_Name' has a wrong offset!");
static_assert(offsetof(UMissionTooltip_C, Difficulty_Info) == 0x0001C4, "Member 'UMissionTooltip_C::Difficulty_Info' has a wrong offset!");
static_assert(offsetof(UMissionTooltip_C, Difficulty_Name) == 0x0001C8, "Member 'UMissionTooltip_C::Difficulty_Name' has a wrong offset!");
static_assert(offsetof(UMissionTooltip_C, Mission_Name) == 0x0001CC, "Member 'UMissionTooltip_C::Mission_Name' has a wrong offset!");
static_assert(offsetof(UMissionTooltip_C, Mission_Type_Icon) == 0x0001D0, "Member 'UMissionTooltip_C::Mission_Type_Icon' has a wrong offset!");
static_assert(offsetof(UMissionTooltip_C, PowerRequirement) == 0x0001D4, "Member 'UMissionTooltip_C::PowerRequirement' has a wrong offset!");
static_assert(offsetof(UMissionTooltip_C, RewardsContent) == 0x0001D8, "Member 'UMissionTooltip_C::RewardsContent' has a wrong offset!");
static_assert(offsetof(UMissionTooltip_C, VerticalBox) == 0x0001DC, "Member 'UMissionTooltip_C::VerticalBox' has a wrong offset!");
static_assert(offsetof(UMissionTooltip_C, MissionRewards) == 0x0001E0, "Member 'UMissionTooltip_C::MissionRewards' has a wrong offset!");

}

#pragma pack(pop)
