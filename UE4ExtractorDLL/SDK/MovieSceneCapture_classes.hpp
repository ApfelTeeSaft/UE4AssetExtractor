#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieSceneCapture

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "MovieSceneCapture_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Class MovieSceneCapture.CompositionGraphCaptureSettings
// 0x001C (0x0038 - 0x001C)
class UCompositionGraphCaptureSettings final : public UObject
{
public:
	struct FCompositionGraphCapturePasses         IncludeRenderPasses;                               // 0x001C(0x000C)(Edit, Config, NativeAccessSpecifierPublic)
	bool                                          bCaptureFramesInHDR;                               // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStringAssetReference                  PostProcessingMaterial;                            // 0x002C(0x000C)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CompositionGraphCaptureSettings">();
	}
	static class UCompositionGraphCaptureSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCompositionGraphCaptureSettings>();
	}
};
static_assert(alignof(UCompositionGraphCaptureSettings) == 0x000004, "Wrong alignment on UCompositionGraphCaptureSettings");
static_assert(sizeof(UCompositionGraphCaptureSettings) == 0x000038, "Wrong size on UCompositionGraphCaptureSettings");
static_assert(offsetof(UCompositionGraphCaptureSettings, IncludeRenderPasses) == 0x00001C, "Member 'UCompositionGraphCaptureSettings::IncludeRenderPasses' has a wrong offset!");
static_assert(offsetof(UCompositionGraphCaptureSettings, bCaptureFramesInHDR) == 0x000028, "Member 'UCompositionGraphCaptureSettings::bCaptureFramesInHDR' has a wrong offset!");
static_assert(offsetof(UCompositionGraphCaptureSettings, PostProcessingMaterial) == 0x00002C, "Member 'UCompositionGraphCaptureSettings::PostProcessingMaterial' has a wrong offset!");

// Class MovieSceneCapture.FrameGrabberProtocolSettings
// 0x0008 (0x0024 - 0x001C)
class UFrameGrabberProtocolSettings : public UObject
{
public:
	uint8                                         Pad_1C[0x8];                                       // 0x001C(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FrameGrabberProtocolSettings">();
	}
	static class UFrameGrabberProtocolSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFrameGrabberProtocolSettings>();
	}
};
static_assert(alignof(UFrameGrabberProtocolSettings) == 0x000004, "Wrong alignment on UFrameGrabberProtocolSettings");
static_assert(sizeof(UFrameGrabberProtocolSettings) == 0x000024, "Wrong size on UFrameGrabberProtocolSettings");

// Class MovieSceneCapture.ImageCaptureSettings
// 0x0004 (0x0028 - 0x0024)
class UImageCaptureSettings final : public UFrameGrabberProtocolSettings
{
public:
	int32                                         CompressionQuality;                                // 0x0024(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ImageCaptureSettings">();
	}
	static class UImageCaptureSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImageCaptureSettings>();
	}
};
static_assert(alignof(UImageCaptureSettings) == 0x000004, "Wrong alignment on UImageCaptureSettings");
static_assert(sizeof(UImageCaptureSettings) == 0x000028, "Wrong size on UImageCaptureSettings");
static_assert(offsetof(UImageCaptureSettings, CompressionQuality) == 0x000024, "Member 'UImageCaptureSettings::CompressionQuality' has a wrong offset!");

// Class MovieSceneCapture.VideoCaptureSettings
// 0x0014 (0x0038 - 0x0024)
class UVideoCaptureSettings final : public UFrameGrabberProtocolSettings
{
public:
	bool                                          bUseCompression;                                   // 0x0024(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CompressionQuality;                                // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoCodec;                                        // 0x002C(0x000C)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VideoCaptureSettings">();
	}
	static class UVideoCaptureSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVideoCaptureSettings>();
	}
};
static_assert(alignof(UVideoCaptureSettings) == 0x000004, "Wrong alignment on UVideoCaptureSettings");
static_assert(sizeof(UVideoCaptureSettings) == 0x000038, "Wrong size on UVideoCaptureSettings");
static_assert(offsetof(UVideoCaptureSettings, bUseCompression) == 0x000024, "Member 'UVideoCaptureSettings::bUseCompression' has a wrong offset!");
static_assert(offsetof(UVideoCaptureSettings, CompressionQuality) == 0x000028, "Member 'UVideoCaptureSettings::CompressionQuality' has a wrong offset!");
static_assert(offsetof(UVideoCaptureSettings, VideoCodec) == 0x00002C, "Member 'UVideoCaptureSettings::VideoCodec' has a wrong offset!");

// Class MovieSceneCapture.MovieSceneCaptureInterface
// 0x0000 (0x001C - 0x001C)
class IMovieSceneCaptureInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCaptureInterface">();
	}
	static class IMovieSceneCaptureInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMovieSceneCaptureInterface>();
	}
};
static_assert(alignof(IMovieSceneCaptureInterface) == 0x000004, "Wrong alignment on IMovieSceneCaptureInterface");
static_assert(sizeof(IMovieSceneCaptureInterface) == 0x00001C, "Wrong size on IMovieSceneCaptureInterface");

// Class MovieSceneCapture.MovieSceneCapture
// 0x010C (0x0128 - 0x001C)
class UMovieSceneCapture : public UObject
{
public:
	uint8                                         Pad_1C[0x8];                                       // 0x001C(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCaptureProtocolID                     CaptureType;                                       // 0x0024(0x0008)(Edit, Config, NativeAccessSpecifierPublic)
	class UObject*                                ProtocolSettings;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneCaptureSettings             Settings;                                          // 0x0030(0x0038)(Edit, Config, NativeAccessSpecifierPublic)
	bool                                          bUseSeparateProcess;                               // 0x0068(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdditionalCommandLineArguments;                    // 0x006C(0x000C)(Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InheritedCommandLineArguments;                     // 0x0078(0x000C)(Edit, ZeroConstructor, Transient, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0xA4];                                      // 0x0084(0x00A4)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCapture">();
	}
	static class UMovieSceneCapture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCapture>();
	}
};
static_assert(alignof(UMovieSceneCapture) == 0x000004, "Wrong alignment on UMovieSceneCapture");
static_assert(sizeof(UMovieSceneCapture) == 0x000128, "Wrong size on UMovieSceneCapture");
static_assert(offsetof(UMovieSceneCapture, CaptureType) == 0x000024, "Member 'UMovieSceneCapture::CaptureType' has a wrong offset!");
static_assert(offsetof(UMovieSceneCapture, ProtocolSettings) == 0x00002C, "Member 'UMovieSceneCapture::ProtocolSettings' has a wrong offset!");
static_assert(offsetof(UMovieSceneCapture, Settings) == 0x000030, "Member 'UMovieSceneCapture::Settings' has a wrong offset!");
static_assert(offsetof(UMovieSceneCapture, bUseSeparateProcess) == 0x000068, "Member 'UMovieSceneCapture::bUseSeparateProcess' has a wrong offset!");
static_assert(offsetof(UMovieSceneCapture, AdditionalCommandLineArguments) == 0x00006C, "Member 'UMovieSceneCapture::AdditionalCommandLineArguments' has a wrong offset!");
static_assert(offsetof(UMovieSceneCapture, InheritedCommandLineArguments) == 0x000078, "Member 'UMovieSceneCapture::InheritedCommandLineArguments' has a wrong offset!");

// Class MovieSceneCapture.AutomatedLevelSequenceCapture
// 0x0000 (0x0128 - 0x0128)
class UAutomatedLevelSequenceCapture final : public UMovieSceneCapture
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutomatedLevelSequenceCapture">();
	}
	static class UAutomatedLevelSequenceCapture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutomatedLevelSequenceCapture>();
	}
};
static_assert(alignof(UAutomatedLevelSequenceCapture) == 0x000004, "Wrong alignment on UAutomatedLevelSequenceCapture");
static_assert(sizeof(UAutomatedLevelSequenceCapture) == 0x000128, "Wrong size on UAutomatedLevelSequenceCapture");

// Class MovieSceneCapture.LevelCapture
// 0x0020 (0x0148 - 0x0128)
class ULevelCapture final : public UMovieSceneCapture
{
public:
	bool                                          bAutoStartCapture;                                 // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0xB];                                      // 0x0129(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PrerequisiteActorId;                               // 0x0134(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelCapture">();
	}
	static class ULevelCapture* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelCapture>();
	}
};
static_assert(alignof(ULevelCapture) == 0x000004, "Wrong alignment on ULevelCapture");
static_assert(sizeof(ULevelCapture) == 0x000148, "Wrong size on ULevelCapture");
static_assert(offsetof(ULevelCapture, bAutoStartCapture) == 0x000128, "Member 'ULevelCapture::bAutoStartCapture' has a wrong offset!");
static_assert(offsetof(ULevelCapture, PrerequisiteActorId) == 0x000134, "Member 'ULevelCapture::PrerequisiteActorId' has a wrong offset!");

// Class MovieSceneCapture.MovieSceneCaptureEnvironment
// 0x0000 (0x001C - 0x001C)
class UMovieSceneCaptureEnvironment final : public UObject
{
public:
	static float GetCaptureElapsedTime();
	static int32 GetCaptureFrameNumber();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneCaptureEnvironment">();
	}
	static class UMovieSceneCaptureEnvironment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneCaptureEnvironment>();
	}
};
static_assert(alignof(UMovieSceneCaptureEnvironment) == 0x000004, "Wrong alignment on UMovieSceneCaptureEnvironment");
static_assert(sizeof(UMovieSceneCaptureEnvironment) == 0x00001C, "Wrong size on UMovieSceneCaptureEnvironment");

}

#pragma pack(pop)
