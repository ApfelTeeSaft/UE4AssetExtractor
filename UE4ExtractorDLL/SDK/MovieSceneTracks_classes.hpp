#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieSceneTracks

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MovieScene_classes.hpp"
#include "Engine_structs.hpp"
#include "MovieSceneTracks_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Class MovieSceneTracks.MovieScene3DConstraintSection
// 0x0010 (0x0040 - 0x0030)
class UMovieScene3DConstraintSection : public UMovieSceneSection
{
public:
	struct FGuid                                  ConstraintId;                                      // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DConstraintSection">();
	}
	static class UMovieScene3DConstraintSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DConstraintSection>();
	}
};
static_assert(alignof(UMovieScene3DConstraintSection) == 0x000004, "Wrong alignment on UMovieScene3DConstraintSection");
static_assert(sizeof(UMovieScene3DConstraintSection) == 0x000040, "Wrong size on UMovieScene3DConstraintSection");
static_assert(offsetof(UMovieScene3DConstraintSection, ConstraintId) == 0x000030, "Member 'UMovieScene3DConstraintSection::ConstraintId' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DAttachSection
// 0x000C (0x004C - 0x0040)
class UMovieScene3DAttachSection final : public UMovieScene3DConstraintSection
{
public:
	class FName                                   AttachSocketName;                                  // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bConstrainTx : 1;                                  // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bConstrainTy : 1;                                  // 0x0048(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bConstrainTz : 1;                                  // 0x0048(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bConstrainRx : 1;                                  // 0x0048(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bConstrainRy : 1;                                  // 0x0048(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         bConstrainRz : 1;                                  // 0x0048(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DAttachSection">();
	}
	static class UMovieScene3DAttachSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DAttachSection>();
	}
};
static_assert(alignof(UMovieScene3DAttachSection) == 0x000004, "Wrong alignment on UMovieScene3DAttachSection");
static_assert(sizeof(UMovieScene3DAttachSection) == 0x00004C, "Wrong size on UMovieScene3DAttachSection");
static_assert(offsetof(UMovieScene3DAttachSection, AttachSocketName) == 0x000040, "Member 'UMovieScene3DAttachSection::AttachSocketName' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DPathSection
// 0x005C (0x009C - 0x0040)
class UMovieScene3DPathSection final : public UMovieScene3DConstraintSection
{
public:
	struct FRichCurve                             TimingCurve;                                       // 0x0040(0x0054)(Edit, NativeAccessSpecifierPrivate)
	EMovieScene3DPathSection_Axis                 FrontAxisEnum;                                     // 0x0094(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMovieScene3DPathSection_Axis                 UpAxisEnum;                                        // 0x0095(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bFollow : 1;                                       // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPrivate))
	uint8                                         bReverse : 1;                                      // 0x0098(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPrivate))
	uint8                                         bForceUpright : 1;                                 // 0x0098(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPrivate))
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DPathSection">();
	}
	static class UMovieScene3DPathSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DPathSection>();
	}
};
static_assert(alignof(UMovieScene3DPathSection) == 0x000004, "Wrong alignment on UMovieScene3DPathSection");
static_assert(sizeof(UMovieScene3DPathSection) == 0x00009C, "Wrong size on UMovieScene3DPathSection");
static_assert(offsetof(UMovieScene3DPathSection, TimingCurve) == 0x000040, "Member 'UMovieScene3DPathSection::TimingCurve' has a wrong offset!");
static_assert(offsetof(UMovieScene3DPathSection, FrontAxisEnum) == 0x000094, "Member 'UMovieScene3DPathSection::FrontAxisEnum' has a wrong offset!");
static_assert(offsetof(UMovieScene3DPathSection, UpAxisEnum) == 0x000095, "Member 'UMovieScene3DPathSection::UpAxisEnum' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DConstraintTrack
// 0x000C (0x0028 - 0x001C)
class UMovieScene3DConstraintTrack : public UMovieSceneTrack
{
public:
	TArray<class UMovieSceneSection*>             ConstraintSections;                                // 0x001C(0x000C)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DConstraintTrack">();
	}
	static class UMovieScene3DConstraintTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DConstraintTrack>();
	}
};
static_assert(alignof(UMovieScene3DConstraintTrack) == 0x000004, "Wrong alignment on UMovieScene3DConstraintTrack");
static_assert(sizeof(UMovieScene3DConstraintTrack) == 0x000028, "Wrong size on UMovieScene3DConstraintTrack");
static_assert(offsetof(UMovieScene3DConstraintTrack, ConstraintSections) == 0x00001C, "Member 'UMovieScene3DConstraintTrack::ConstraintSections' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DAttachTrack
// 0x0000 (0x0028 - 0x0028)
class UMovieScene3DAttachTrack final : public UMovieScene3DConstraintTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DAttachTrack">();
	}
	static class UMovieScene3DAttachTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DAttachTrack>();
	}
};
static_assert(alignof(UMovieScene3DAttachTrack) == 0x000004, "Wrong alignment on UMovieScene3DAttachTrack");
static_assert(sizeof(UMovieScene3DAttachTrack) == 0x000028, "Wrong size on UMovieScene3DAttachTrack");

// Class MovieSceneTracks.MovieScene3DPathTrack
// 0x0000 (0x0028 - 0x0028)
class UMovieScene3DPathTrack final : public UMovieScene3DConstraintTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DPathTrack">();
	}
	static class UMovieScene3DPathTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DPathTrack>();
	}
};
static_assert(alignof(UMovieScene3DPathTrack) == 0x000004, "Wrong alignment on UMovieScene3DPathTrack");
static_assert(sizeof(UMovieScene3DPathTrack) == 0x000028, "Wrong size on UMovieScene3DPathTrack");

// Class MovieSceneTracks.MovieScene3DTransformSection
// 0x02F8 (0x0328 - 0x0030)
class UMovieScene3DTransformSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_30[0x4];                                       // 0x0030(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             Translation[0x3];                                  // 0x0034(0x0054)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             Rotation[0x3];                                     // 0x0130(0x0054)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             Scale[0x3];                                        // 0x022C(0x0054)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DTransformSection">();
	}
	static class UMovieScene3DTransformSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DTransformSection>();
	}
};
static_assert(alignof(UMovieScene3DTransformSection) == 0x000004, "Wrong alignment on UMovieScene3DTransformSection");
static_assert(sizeof(UMovieScene3DTransformSection) == 0x000328, "Wrong size on UMovieScene3DTransformSection");
static_assert(offsetof(UMovieScene3DTransformSection, Translation) == 0x000034, "Member 'UMovieScene3DTransformSection::Translation' has a wrong offset!");
static_assert(offsetof(UMovieScene3DTransformSection, Rotation) == 0x000130, "Member 'UMovieScene3DTransformSection::Rotation' has a wrong offset!");
static_assert(offsetof(UMovieScene3DTransformSection, Scale) == 0x00022C, "Member 'UMovieScene3DTransformSection::Scale' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneAudioSection
// 0x000C (0x003C - 0x0030)
class UMovieSceneAudioSection final : public UMovieSceneSection
{
public:
	class USoundBase*                             Sound;                                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AudioStartTime;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AudioDilationFactor;                               // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAudioSection">();
	}
	static class UMovieSceneAudioSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAudioSection>();
	}
};
static_assert(alignof(UMovieSceneAudioSection) == 0x000004, "Wrong alignment on UMovieSceneAudioSection");
static_assert(sizeof(UMovieSceneAudioSection) == 0x00003C, "Wrong size on UMovieSceneAudioSection");
static_assert(offsetof(UMovieSceneAudioSection, Sound) == 0x000030, "Member 'UMovieSceneAudioSection::Sound' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, AudioStartTime) == 0x000034, "Member 'UMovieSceneAudioSection::AudioStartTime' has a wrong offset!");
static_assert(offsetof(UMovieSceneAudioSection, AudioDilationFactor) == 0x000038, "Member 'UMovieSceneAudioSection::AudioDilationFactor' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneAudioTrack
// 0x000C (0x0028 - 0x001C)
class UMovieSceneAudioTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             AudioSections;                                     // 0x001C(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneAudioTrack">();
	}
	static class UMovieSceneAudioTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneAudioTrack>();
	}
};
static_assert(alignof(UMovieSceneAudioTrack) == 0x000004, "Wrong alignment on UMovieSceneAudioTrack");
static_assert(sizeof(UMovieSceneAudioTrack) == 0x000028, "Wrong size on UMovieSceneAudioTrack");
static_assert(offsetof(UMovieSceneAudioTrack, AudioSections) == 0x00001C, "Member 'UMovieSceneAudioTrack::AudioSections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneBoolSection
// 0x005C (0x008C - 0x0030)
class UMovieSceneBoolSection : public UMovieSceneSection
{
public:
	uint8                                         Pad_30[0x4];                                       // 0x0030(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DefaultValue;                                      // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntegralCurve                         BoolCurve;                                         // 0x0038(0x0054)(Edit, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneBoolSection">();
	}
	static class UMovieSceneBoolSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneBoolSection>();
	}
};
static_assert(alignof(UMovieSceneBoolSection) == 0x000004, "Wrong alignment on UMovieSceneBoolSection");
static_assert(sizeof(UMovieSceneBoolSection) == 0x00008C, "Wrong size on UMovieSceneBoolSection");
static_assert(offsetof(UMovieSceneBoolSection, DefaultValue) == 0x000034, "Member 'UMovieSceneBoolSection::DefaultValue' has a wrong offset!");
static_assert(offsetof(UMovieSceneBoolSection, BoolCurve) == 0x000038, "Member 'UMovieSceneBoolSection::BoolCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneVisibilitySection
// 0x0000 (0x008C - 0x008C)
class UMovieSceneVisibilitySection final : public UMovieSceneBoolSection
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneVisibilitySection">();
	}
	static class UMovieSceneVisibilitySection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneVisibilitySection>();
	}
};
static_assert(alignof(UMovieSceneVisibilitySection) == 0x000004, "Wrong alignment on UMovieSceneVisibilitySection");
static_assert(sizeof(UMovieSceneVisibilitySection) == 0x00008C, "Wrong size on UMovieSceneVisibilitySection");

// Class MovieSceneTracks.MovieSceneByteSection
// 0x0058 (0x0088 - 0x0030)
class UMovieSceneByteSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_30[0x4];                                       // 0x0030(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntegralCurve                         ByteCurve;                                         // 0x0034(0x0054)(Edit, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneByteSection">();
	}
	static class UMovieSceneByteSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneByteSection>();
	}
};
static_assert(alignof(UMovieSceneByteSection) == 0x000004, "Wrong alignment on UMovieSceneByteSection");
static_assert(sizeof(UMovieSceneByteSection) == 0x000088, "Wrong size on UMovieSceneByteSection");
static_assert(offsetof(UMovieSceneByteSection, ByteCurve) == 0x000034, "Member 'UMovieSceneByteSection::ByteCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneColorSection
// 0x0154 (0x0184 - 0x0030)
class UMovieSceneColorSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_30[0x4];                                       // 0x0030(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             RedCurve;                                          // 0x0034(0x0054)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             GreenCurve;                                        // 0x0088(0x0054)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             BlueCurve;                                         // 0x00DC(0x0054)(NativeAccessSpecifierPrivate)
	struct FRichCurve                             AlphaCurve;                                        // 0x0130(0x0054)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneColorSection">();
	}
	static class UMovieSceneColorSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneColorSection>();
	}
};
static_assert(alignof(UMovieSceneColorSection) == 0x000004, "Wrong alignment on UMovieSceneColorSection");
static_assert(sizeof(UMovieSceneColorSection) == 0x000184, "Wrong size on UMovieSceneColorSection");
static_assert(offsetof(UMovieSceneColorSection, RedCurve) == 0x000034, "Member 'UMovieSceneColorSection::RedCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneColorSection, GreenCurve) == 0x000088, "Member 'UMovieSceneColorSection::GreenCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneColorSection, BlueCurve) == 0x0000DC, "Member 'UMovieSceneColorSection::BlueCurve' has a wrong offset!");
static_assert(offsetof(UMovieSceneColorSection, AlphaCurve) == 0x000130, "Member 'UMovieSceneColorSection::AlphaCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneEventSection
// 0x004C (0x007C - 0x0030)
class UMovieSceneEventSection final : public UMovieSceneSection
{
public:
	struct FNameCurve                             Events;                                            // 0x0030(0x004C)(Edit, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEventSection">();
	}
	static class UMovieSceneEventSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEventSection>();
	}
};
static_assert(alignof(UMovieSceneEventSection) == 0x000004, "Wrong alignment on UMovieSceneEventSection");
static_assert(sizeof(UMovieSceneEventSection) == 0x00007C, "Wrong size on UMovieSceneEventSection");
static_assert(offsetof(UMovieSceneEventSection, Events) == 0x000030, "Member 'UMovieSceneEventSection::Events' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneEventTrack
// 0x0010 (0x002C - 0x001C)
class UMovieSceneEventTrack final : public UMovieSceneNameableTrack
{
public:
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPrivate))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x001C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPrivate))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0020(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEventTrack">();
	}
	static class UMovieSceneEventTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEventTrack>();
	}
};
static_assert(alignof(UMovieSceneEventTrack) == 0x000004, "Wrong alignment on UMovieSceneEventTrack");
static_assert(sizeof(UMovieSceneEventTrack) == 0x00002C, "Wrong size on UMovieSceneEventTrack");
static_assert(offsetof(UMovieSceneEventTrack, Sections) == 0x000020, "Member 'UMovieSceneEventTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneFloatSection
// 0x0058 (0x0088 - 0x0030)
class UMovieSceneFloatSection : public UMovieSceneSection
{
public:
	uint8                                         Pad_30[0x4];                                       // 0x0030(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             FloatCurve;                                        // 0x0034(0x0054)(Edit, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFloatSection">();
	}
	static class UMovieSceneFloatSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFloatSection>();
	}
};
static_assert(alignof(UMovieSceneFloatSection) == 0x000004, "Wrong alignment on UMovieSceneFloatSection");
static_assert(sizeof(UMovieSceneFloatSection) == 0x000088, "Wrong size on UMovieSceneFloatSection");
static_assert(offsetof(UMovieSceneFloatSection, FloatCurve) == 0x000034, "Member 'UMovieSceneFloatSection::FloatCurve' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneFadeSection
// 0x0014 (0x009C - 0x0088)
class UMovieSceneFadeSection final : public UMovieSceneFloatSection
{
public:
	struct FLinearColor                           FadeColor;                                         // 0x0088(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bFadeAudio : 1;                                    // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPublic))
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFadeSection">();
	}
	static class UMovieSceneFadeSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFadeSection>();
	}
};
static_assert(alignof(UMovieSceneFadeSection) == 0x000004, "Wrong alignment on UMovieSceneFadeSection");
static_assert(sizeof(UMovieSceneFadeSection) == 0x00009C, "Wrong size on UMovieSceneFadeSection");
static_assert(offsetof(UMovieSceneFadeSection, FadeColor) == 0x000088, "Member 'UMovieSceneFadeSection::FadeColor' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSlomoSection
// 0x0000 (0x0088 - 0x0088)
class UMovieSceneSlomoSection final : public UMovieSceneFloatSection
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSlomoSection">();
	}
	static class UMovieSceneSlomoSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSlomoSection>();
	}
};
static_assert(alignof(UMovieSceneSlomoSection) == 0x000004, "Wrong alignment on UMovieSceneSlomoSection");
static_assert(sizeof(UMovieSceneSlomoSection) == 0x000088, "Wrong size on UMovieSceneSlomoSection");

// Class MovieSceneTracks.MovieSceneParameterSection
// 0x0024 (0x0054 - 0x0030)
class UMovieSceneParameterSection final : public UMovieSceneSection
{
public:
	TArray<struct FScalarParameterNameAndCurve>   ScalarParameterNamesAndCurves;                     // 0x0030(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FVectorParameterNameAndCurves>  VectorParameterNamesAndCurves;                     // 0x003C(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FColorParameterNameAndCurves>   ColorParameterNamesAndCurves;                      // 0x0048(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneParameterSection">();
	}
	static class UMovieSceneParameterSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneParameterSection>();
	}
};
static_assert(alignof(UMovieSceneParameterSection) == 0x000004, "Wrong alignment on UMovieSceneParameterSection");
static_assert(sizeof(UMovieSceneParameterSection) == 0x000054, "Wrong size on UMovieSceneParameterSection");
static_assert(offsetof(UMovieSceneParameterSection, ScalarParameterNamesAndCurves) == 0x000030, "Member 'UMovieSceneParameterSection::ScalarParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UMovieSceneParameterSection, VectorParameterNamesAndCurves) == 0x00003C, "Member 'UMovieSceneParameterSection::VectorParameterNamesAndCurves' has a wrong offset!");
static_assert(offsetof(UMovieSceneParameterSection, ColorParameterNamesAndCurves) == 0x000048, "Member 'UMovieSceneParameterSection::ColorParameterNamesAndCurves' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneMaterialTrack
// 0x000C (0x0028 - 0x001C)
class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x001C(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneMaterialTrack">();
	}
	static class UMovieSceneMaterialTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMaterialTrack>();
	}
};
static_assert(alignof(UMovieSceneMaterialTrack) == 0x000004, "Wrong alignment on UMovieSceneMaterialTrack");
static_assert(sizeof(UMovieSceneMaterialTrack) == 0x000028, "Wrong size on UMovieSceneMaterialTrack");
static_assert(offsetof(UMovieSceneMaterialTrack, Sections) == 0x00001C, "Member 'UMovieSceneMaterialTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneComponentMaterialTrack
// 0x0004 (0x002C - 0x0028)
class UMovieSceneComponentMaterialTrack final : public UMovieSceneMaterialTrack
{
public:
	int32                                         MaterialIndex;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneComponentMaterialTrack">();
	}
	static class UMovieSceneComponentMaterialTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneComponentMaterialTrack>();
	}
};
static_assert(alignof(UMovieSceneComponentMaterialTrack) == 0x000004, "Wrong alignment on UMovieSceneComponentMaterialTrack");
static_assert(sizeof(UMovieSceneComponentMaterialTrack) == 0x00002C, "Wrong size on UMovieSceneComponentMaterialTrack");
static_assert(offsetof(UMovieSceneComponentMaterialTrack, MaterialIndex) == 0x000028, "Member 'UMovieSceneComponentMaterialTrack::MaterialIndex' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneParticleParameterTrack
// 0x000C (0x0028 - 0x001C)
class UMovieSceneParticleParameterTrack final : public UMovieSceneTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x001C(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneParticleParameterTrack">();
	}
	static class UMovieSceneParticleParameterTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneParticleParameterTrack>();
	}
};
static_assert(alignof(UMovieSceneParticleParameterTrack) == 0x000004, "Wrong alignment on UMovieSceneParticleParameterTrack");
static_assert(sizeof(UMovieSceneParticleParameterTrack) == 0x000028, "Wrong size on UMovieSceneParticleParameterTrack");
static_assert(offsetof(UMovieSceneParticleParameterTrack, Sections) == 0x00001C, "Member 'UMovieSceneParticleParameterTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneParticleSection
// 0x0054 (0x0084 - 0x0030)
class UMovieSceneParticleSection final : public UMovieSceneSection
{
public:
	struct FIntegralCurve                         ParticleKeys;                                      // 0x0030(0x0054)(Edit, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneParticleSection">();
	}
	static class UMovieSceneParticleSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneParticleSection>();
	}
};
static_assert(alignof(UMovieSceneParticleSection) == 0x000004, "Wrong alignment on UMovieSceneParticleSection");
static_assert(sizeof(UMovieSceneParticleSection) == 0x000084, "Wrong size on UMovieSceneParticleSection");
static_assert(offsetof(UMovieSceneParticleSection, ParticleKeys) == 0x000030, "Member 'UMovieSceneParticleSection::ParticleKeys' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneParticleTrack
// 0x000C (0x0028 - 0x001C)
class UMovieSceneParticleTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             ParticleSections;                                  // 0x001C(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneParticleTrack">();
	}
	static class UMovieSceneParticleTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneParticleTrack>();
	}
};
static_assert(alignof(UMovieSceneParticleTrack) == 0x000004, "Wrong alignment on UMovieSceneParticleTrack");
static_assert(sizeof(UMovieSceneParticleTrack) == 0x000028, "Wrong size on UMovieSceneParticleTrack");
static_assert(offsetof(UMovieSceneParticleTrack, ParticleSections) == 0x00001C, "Member 'UMovieSceneParticleTrack::ParticleSections' has a wrong offset!");

// Class MovieSceneTracks.MovieScenePropertyTrack
// 0x0020 (0x003C - 0x001C)
class UMovieScenePropertyTrack : public UMovieSceneTrack
{
public:
	class FName                                   PropertyName;                                      // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 PropertyPath;                                      // 0x0024(0x000C)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x0030(0x000C)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePropertyTrack">();
	}
	static class UMovieScenePropertyTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePropertyTrack>();
	}
};
static_assert(alignof(UMovieScenePropertyTrack) == 0x000004, "Wrong alignment on UMovieScenePropertyTrack");
static_assert(sizeof(UMovieScenePropertyTrack) == 0x00003C, "Wrong size on UMovieScenePropertyTrack");
static_assert(offsetof(UMovieScenePropertyTrack, PropertyName) == 0x00001C, "Member 'UMovieScenePropertyTrack::PropertyName' has a wrong offset!");
static_assert(offsetof(UMovieScenePropertyTrack, PropertyPath) == 0x000024, "Member 'UMovieScenePropertyTrack::PropertyPath' has a wrong offset!");
static_assert(offsetof(UMovieScenePropertyTrack, Sections) == 0x000030, "Member 'UMovieScenePropertyTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieScene3DTransformTrack
// 0x0000 (0x003C - 0x003C)
class UMovieScene3DTransformTrack final : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScene3DTransformTrack">();
	}
	static class UMovieScene3DTransformTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScene3DTransformTrack>();
	}
};
static_assert(alignof(UMovieScene3DTransformTrack) == 0x000004, "Wrong alignment on UMovieScene3DTransformTrack");
static_assert(sizeof(UMovieScene3DTransformTrack) == 0x00003C, "Wrong size on UMovieScene3DTransformTrack");

// Class MovieSceneTracks.MovieSceneBoolTrack
// 0x0000 (0x003C - 0x003C)
class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneBoolTrack">();
	}
	static class UMovieSceneBoolTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneBoolTrack>();
	}
};
static_assert(alignof(UMovieSceneBoolTrack) == 0x000004, "Wrong alignment on UMovieSceneBoolTrack");
static_assert(sizeof(UMovieSceneBoolTrack) == 0x00003C, "Wrong size on UMovieSceneBoolTrack");

// Class MovieSceneTracks.MovieSceneVisibilityTrack
// 0x0000 (0x003C - 0x003C)
class UMovieSceneVisibilityTrack final : public UMovieSceneBoolTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneVisibilityTrack">();
	}
	static class UMovieSceneVisibilityTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneVisibilityTrack>();
	}
};
static_assert(alignof(UMovieSceneVisibilityTrack) == 0x000004, "Wrong alignment on UMovieSceneVisibilityTrack");
static_assert(sizeof(UMovieSceneVisibilityTrack) == 0x00003C, "Wrong size on UMovieSceneVisibilityTrack");

// Class MovieSceneTracks.MovieSceneByteTrack
// 0x0004 (0x0040 - 0x003C)
class UMovieSceneByteTrack final : public UMovieScenePropertyTrack
{
public:
	class UEnum*                                  Enum;                                              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneByteTrack">();
	}
	static class UMovieSceneByteTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneByteTrack>();
	}
};
static_assert(alignof(UMovieSceneByteTrack) == 0x000004, "Wrong alignment on UMovieSceneByteTrack");
static_assert(sizeof(UMovieSceneByteTrack) == 0x000040, "Wrong size on UMovieSceneByteTrack");
static_assert(offsetof(UMovieSceneByteTrack, Enum) == 0x00003C, "Member 'UMovieSceneByteTrack::Enum' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneColorTrack
// 0x0004 (0x0040 - 0x003C)
class UMovieSceneColorTrack final : public UMovieScenePropertyTrack
{
public:
	bool                                          bIsSlateColor;                                     // 0x003C(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneColorTrack">();
	}
	static class UMovieSceneColorTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneColorTrack>();
	}
};
static_assert(alignof(UMovieSceneColorTrack) == 0x000004, "Wrong alignment on UMovieSceneColorTrack");
static_assert(sizeof(UMovieSceneColorTrack) == 0x000040, "Wrong size on UMovieSceneColorTrack");
static_assert(offsetof(UMovieSceneColorTrack, bIsSlateColor) == 0x00003C, "Member 'UMovieSceneColorTrack::bIsSlateColor' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneFloatTrack
// 0x0000 (0x003C - 0x003C)
class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFloatTrack">();
	}
	static class UMovieSceneFloatTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFloatTrack>();
	}
};
static_assert(alignof(UMovieSceneFloatTrack) == 0x000004, "Wrong alignment on UMovieSceneFloatTrack");
static_assert(sizeof(UMovieSceneFloatTrack) == 0x00003C, "Wrong size on UMovieSceneFloatTrack");

// Class MovieSceneTracks.MovieSceneFadeTrack
// 0x0000 (0x003C - 0x003C)
class UMovieSceneFadeTrack final : public UMovieSceneFloatTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFadeTrack">();
	}
	static class UMovieSceneFadeTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFadeTrack>();
	}
};
static_assert(alignof(UMovieSceneFadeTrack) == 0x000004, "Wrong alignment on UMovieSceneFadeTrack");
static_assert(sizeof(UMovieSceneFadeTrack) == 0x00003C, "Wrong size on UMovieSceneFadeTrack");

// Class MovieSceneTracks.MovieSceneSlomoTrack
// 0x0000 (0x003C - 0x003C)
class UMovieSceneSlomoTrack final : public UMovieSceneFloatTrack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSlomoTrack">();
	}
	static class UMovieSceneSlomoTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSlomoTrack>();
	}
};
static_assert(alignof(UMovieSceneSlomoTrack) == 0x000004, "Wrong alignment on UMovieSceneSlomoTrack");
static_assert(sizeof(UMovieSceneSlomoTrack) == 0x00003C, "Wrong size on UMovieSceneSlomoTrack");

// Class MovieSceneTracks.MovieSceneVectorTrack
// 0x0004 (0x0040 - 0x003C)
class UMovieSceneVectorTrack final : public UMovieScenePropertyTrack
{
public:
	int32                                         NumChannelsUsed;                                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneVectorTrack">();
	}
	static class UMovieSceneVectorTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneVectorTrack>();
	}
};
static_assert(alignof(UMovieSceneVectorTrack) == 0x000004, "Wrong alignment on UMovieSceneVectorTrack");
static_assert(sizeof(UMovieSceneVectorTrack) == 0x000040, "Wrong size on UMovieSceneVectorTrack");
static_assert(offsetof(UMovieSceneVectorTrack, NumChannelsUsed) == 0x00003C, "Member 'UMovieSceneVectorTrack::NumChannelsUsed' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneShotSection
// 0x0020 (0x0050 - 0x0030)
class UMovieSceneShotSection final : public UMovieSceneSection
{
public:
	struct FGuid                                  CameraGuid;                                        // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	class FText                                   DisplayName;                                       // 0x0040(0x000C)(NativeAccessSpecifierPrivate)
	int32                                         ShotNumber;                                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneShotSection">();
	}
	static class UMovieSceneShotSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneShotSection>();
	}
};
static_assert(alignof(UMovieSceneShotSection) == 0x000004, "Wrong alignment on UMovieSceneShotSection");
static_assert(sizeof(UMovieSceneShotSection) == 0x000050, "Wrong size on UMovieSceneShotSection");
static_assert(offsetof(UMovieSceneShotSection, CameraGuid) == 0x000030, "Member 'UMovieSceneShotSection::CameraGuid' has a wrong offset!");
static_assert(offsetof(UMovieSceneShotSection, DisplayName) == 0x000040, "Member 'UMovieSceneShotSection::DisplayName' has a wrong offset!");
static_assert(offsetof(UMovieSceneShotSection, ShotNumber) == 0x00004C, "Member 'UMovieSceneShotSection::ShotNumber' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSubTrack
// 0x000C (0x0028 - 0x001C)
class UMovieSceneSubTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x001C(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSubTrack">();
	}
	static class UMovieSceneSubTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSubTrack>();
	}
};
static_assert(alignof(UMovieSceneSubTrack) == 0x000004, "Wrong alignment on UMovieSceneSubTrack");
static_assert(sizeof(UMovieSceneSubTrack) == 0x000028, "Wrong size on UMovieSceneSubTrack");
static_assert(offsetof(UMovieSceneSubTrack, Sections) == 0x00001C, "Member 'UMovieSceneSubTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneShotTrack
// 0x000C (0x0028 - 0x001C)
class UMovieSceneShotTrack final : public UMovieSceneTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x001C(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneShotTrack">();
	}
	static class UMovieSceneShotTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneShotTrack>();
	}
};
static_assert(alignof(UMovieSceneShotTrack) == 0x000004, "Wrong alignment on UMovieSceneShotTrack");
static_assert(sizeof(UMovieSceneShotTrack) == 0x000028, "Wrong size on UMovieSceneShotTrack");
static_assert(offsetof(UMovieSceneShotTrack, Sections) == 0x00001C, "Member 'UMovieSceneShotTrack::Sections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSkeletalAnimationSection
// 0x001C (0x004C - 0x0030)
class UMovieSceneSkeletalAnimationSection final : public UMovieSceneSection
{
public:
	class UAnimSequence*                          AnimSequence;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         StartOffset;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         EndOffset;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayRate;                                          // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bReverse : 1;                                      // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, NativeAccessSpecifierPrivate))
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SlotName;                                          // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSkeletalAnimationSection">();
	}
	static class UMovieSceneSkeletalAnimationSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSkeletalAnimationSection>();
	}
};
static_assert(alignof(UMovieSceneSkeletalAnimationSection) == 0x000004, "Wrong alignment on UMovieSceneSkeletalAnimationSection");
static_assert(sizeof(UMovieSceneSkeletalAnimationSection) == 0x00004C, "Wrong size on UMovieSceneSkeletalAnimationSection");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, AnimSequence) == 0x000030, "Member 'UMovieSceneSkeletalAnimationSection::AnimSequence' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, StartOffset) == 0x000034, "Member 'UMovieSceneSkeletalAnimationSection::StartOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, EndOffset) == 0x000038, "Member 'UMovieSceneSkeletalAnimationSection::EndOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, PlayRate) == 0x00003C, "Member 'UMovieSceneSkeletalAnimationSection::PlayRate' has a wrong offset!");
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, SlotName) == 0x000044, "Member 'UMovieSceneSkeletalAnimationSection::SlotName' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSkeletalAnimationTrack
// 0x000C (0x0028 - 0x001C)
class UMovieSceneSkeletalAnimationTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             AnimationSections;                                 // 0x001C(0x000C)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSkeletalAnimationTrack">();
	}
	static class UMovieSceneSkeletalAnimationTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSkeletalAnimationTrack>();
	}
};
static_assert(alignof(UMovieSceneSkeletalAnimationTrack) == 0x000004, "Wrong alignment on UMovieSceneSkeletalAnimationTrack");
static_assert(sizeof(UMovieSceneSkeletalAnimationTrack) == 0x000028, "Wrong size on UMovieSceneSkeletalAnimationTrack");
static_assert(offsetof(UMovieSceneSkeletalAnimationTrack, AnimationSections) == 0x00001C, "Member 'UMovieSceneSkeletalAnimationTrack::AnimationSections' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSpawnTrack
// 0x001C (0x0038 - 0x001C)
class UMovieSceneSpawnTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x001C(0x000C)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FGuid                                  ObjectGuid;                                        // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSpawnTrack">();
	}
	static class UMovieSceneSpawnTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSpawnTrack>();
	}
};
static_assert(alignof(UMovieSceneSpawnTrack) == 0x000004, "Wrong alignment on UMovieSceneSpawnTrack");
static_assert(sizeof(UMovieSceneSpawnTrack) == 0x000038, "Wrong size on UMovieSceneSpawnTrack");
static_assert(offsetof(UMovieSceneSpawnTrack, Sections) == 0x00001C, "Member 'UMovieSceneSpawnTrack::Sections' has a wrong offset!");
static_assert(offsetof(UMovieSceneSpawnTrack, ObjectGuid) == 0x000028, "Member 'UMovieSceneSpawnTrack::ObjectGuid' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneSubSection
// 0x000C (0x003C - 0x0030)
class UMovieSceneSubSection final : public UMovieSceneSection
{
public:
	float                                         StartOffset;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScale;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneSequence*                    SubSequence;                                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSubSection">();
	}
	static class UMovieSceneSubSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSubSection>();
	}
};
static_assert(alignof(UMovieSceneSubSection) == 0x000004, "Wrong alignment on UMovieSceneSubSection");
static_assert(sizeof(UMovieSceneSubSection) == 0x00003C, "Wrong size on UMovieSceneSubSection");
static_assert(offsetof(UMovieSceneSubSection, StartOffset) == 0x000030, "Member 'UMovieSceneSubSection::StartOffset' has a wrong offset!");
static_assert(offsetof(UMovieSceneSubSection, TimeScale) == 0x000034, "Member 'UMovieSceneSubSection::TimeScale' has a wrong offset!");
static_assert(offsetof(UMovieSceneSubSection, SubSequence) == 0x000038, "Member 'UMovieSceneSubSection::SubSequence' has a wrong offset!");

// Class MovieSceneTracks.MovieSceneVectorSection
// 0x0158 (0x0188 - 0x0030)
class UMovieSceneVectorSection final : public UMovieSceneSection
{
public:
	uint8                                         Pad_30[0x4];                                       // 0x0030(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             Curves[0x4];                                       // 0x0034(0x0054)(NativeAccessSpecifierPrivate)
	int32                                         ChannelsUsed;                                      // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneVectorSection">();
	}
	static class UMovieSceneVectorSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneVectorSection>();
	}
};
static_assert(alignof(UMovieSceneVectorSection) == 0x000004, "Wrong alignment on UMovieSceneVectorSection");
static_assert(sizeof(UMovieSceneVectorSection) == 0x000188, "Wrong size on UMovieSceneVectorSection");
static_assert(offsetof(UMovieSceneVectorSection, Curves) == 0x000034, "Member 'UMovieSceneVectorSection::Curves' has a wrong offset!");
static_assert(offsetof(UMovieSceneVectorSection, ChannelsUsed) == 0x000184, "Member 'UMovieSceneVectorSection::ChannelsUsed' has a wrong offset!");

}

#pragma pack(pop)
