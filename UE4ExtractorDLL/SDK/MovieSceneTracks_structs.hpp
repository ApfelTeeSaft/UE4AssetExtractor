#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MovieSceneTracks

#include "Basic.hpp"

#include "Engine_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Enum MovieSceneTracks.MovieScene3DPathSection_Axis
// NumValues: 0x0007
enum class EMovieScene3DPathSection_Axis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	NEG_X                                    = 3,
	NEG_Y                                    = 4,
	NEG_Z                                    = 5,
	MovieScene3DPathSection_MAX              = 6,
};

// Enum MovieSceneTracks.EParticleKey
// NumValues: 0x0004
enum class EParticleKey : uint8
{
	Activate                                 = 0,
	Deactivate                               = 1,
	Trigger                                  = 2,
	EParticleKey_MAX                         = 3,
};

// ScriptStruct MovieSceneTracks.MovieSceneEventSectionKey
// 0x0010 (0x0010 - 0x0000)
struct FMovieSceneEventSectionKey final
{
public:
	TArray<class FName>                           EventNames;                                        // 0x0000(0x000C)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEventSectionKey) == 0x000004, "Wrong alignment on FMovieSceneEventSectionKey");
static_assert(sizeof(FMovieSceneEventSectionKey) == 0x000010, "Wrong size on FMovieSceneEventSectionKey");
static_assert(offsetof(FMovieSceneEventSectionKey, EventNames) == 0x000000, "Member 'FMovieSceneEventSectionKey::EventNames' has a wrong offset!");
static_assert(offsetof(FMovieSceneEventSectionKey, Time) == 0x00000C, "Member 'FMovieSceneEventSectionKey::Time' has a wrong offset!");

// ScriptStruct MovieSceneTracks.ScalarParameterNameAndCurve
// 0x0060 (0x0060 - 0x0000)
struct FScalarParameterNameAndCurve final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRichCurve                             ParameterCurve;                                    // 0x000C(0x0054)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FScalarParameterNameAndCurve) == 0x000004, "Wrong alignment on FScalarParameterNameAndCurve");
static_assert(sizeof(FScalarParameterNameAndCurve) == 0x000060, "Wrong size on FScalarParameterNameAndCurve");
static_assert(offsetof(FScalarParameterNameAndCurve, ParameterName) == 0x000000, "Member 'FScalarParameterNameAndCurve::ParameterName' has a wrong offset!");
static_assert(offsetof(FScalarParameterNameAndCurve, INDEX) == 0x000008, "Member 'FScalarParameterNameAndCurve::INDEX' has a wrong offset!");
static_assert(offsetof(FScalarParameterNameAndCurve, ParameterCurve) == 0x00000C, "Member 'FScalarParameterNameAndCurve::ParameterCurve' has a wrong offset!");

// ScriptStruct MovieSceneTracks.ColorParameterNameAndCurves
// 0x015C (0x015C - 0x0000)
struct FColorParameterNameAndCurves final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRichCurve                             RedCurve;                                          // 0x000C(0x0054)(NativeAccessSpecifierPublic)
	struct FRichCurve                             GreenCurve;                                        // 0x0060(0x0054)(NativeAccessSpecifierPublic)
	struct FRichCurve                             BlueCurve;                                         // 0x00B4(0x0054)(NativeAccessSpecifierPublic)
	struct FRichCurve                             AlphaCurve;                                        // 0x0108(0x0054)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FColorParameterNameAndCurves) == 0x000004, "Wrong alignment on FColorParameterNameAndCurves");
static_assert(sizeof(FColorParameterNameAndCurves) == 0x00015C, "Wrong size on FColorParameterNameAndCurves");
static_assert(offsetof(FColorParameterNameAndCurves, ParameterName) == 0x000000, "Member 'FColorParameterNameAndCurves::ParameterName' has a wrong offset!");
static_assert(offsetof(FColorParameterNameAndCurves, INDEX) == 0x000008, "Member 'FColorParameterNameAndCurves::INDEX' has a wrong offset!");
static_assert(offsetof(FColorParameterNameAndCurves, RedCurve) == 0x00000C, "Member 'FColorParameterNameAndCurves::RedCurve' has a wrong offset!");
static_assert(offsetof(FColorParameterNameAndCurves, GreenCurve) == 0x000060, "Member 'FColorParameterNameAndCurves::GreenCurve' has a wrong offset!");
static_assert(offsetof(FColorParameterNameAndCurves, BlueCurve) == 0x0000B4, "Member 'FColorParameterNameAndCurves::BlueCurve' has a wrong offset!");
static_assert(offsetof(FColorParameterNameAndCurves, AlphaCurve) == 0x000108, "Member 'FColorParameterNameAndCurves::AlphaCurve' has a wrong offset!");

// ScriptStruct MovieSceneTracks.VectorParameterNameAndCurves
// 0x0108 (0x0108 - 0x0000)
struct FVectorParameterNameAndCurves final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         INDEX;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRichCurve                             XCurve;                                            // 0x000C(0x0054)(NativeAccessSpecifierPublic)
	struct FRichCurve                             YCurve;                                            // 0x0060(0x0054)(NativeAccessSpecifierPublic)
	struct FRichCurve                             ZCurve;                                            // 0x00B4(0x0054)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FVectorParameterNameAndCurves) == 0x000004, "Wrong alignment on FVectorParameterNameAndCurves");
static_assert(sizeof(FVectorParameterNameAndCurves) == 0x000108, "Wrong size on FVectorParameterNameAndCurves");
static_assert(offsetof(FVectorParameterNameAndCurves, ParameterName) == 0x000000, "Member 'FVectorParameterNameAndCurves::ParameterName' has a wrong offset!");
static_assert(offsetof(FVectorParameterNameAndCurves, INDEX) == 0x000008, "Member 'FVectorParameterNameAndCurves::INDEX' has a wrong offset!");
static_assert(offsetof(FVectorParameterNameAndCurves, XCurve) == 0x00000C, "Member 'FVectorParameterNameAndCurves::XCurve' has a wrong offset!");
static_assert(offsetof(FVectorParameterNameAndCurves, YCurve) == 0x000060, "Member 'FVectorParameterNameAndCurves::YCurve' has a wrong offset!");
static_assert(offsetof(FVectorParameterNameAndCurves, ZCurve) == 0x0000B4, "Member 'FVectorParameterNameAndCurves::ZCurve' has a wrong offset!");

}

#pragma pack(pop)
