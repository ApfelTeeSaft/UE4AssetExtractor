#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MusicManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass MusicManager.MusicManager_C
// 0x0068 (0x02CC - 0x0264)
class AMusicManager_C final : public AFortMusicManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0264(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class USoundBase*                             Music_Frontend;                                    // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             Music_Lobby;                                       // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             MusicDay;                                          // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             MusicEvening;                                      // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             MusicNight;                                        // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             MusicMorning;                                      // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             StingerMorning;                                    // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             StingerEvening;                                    // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             StingerNight;                                      // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortDayPhase                                 CurrentDayPhase;                                   // 0x028C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Smasher_Music;                                     // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             Smasher_Stinger;                                   // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             Husk_Music;                                        // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             Husk_Stinger;                                      // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             Husk_Low_Music;                                    // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             Husk_Low_Stinger;                                  // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsPlayingDefaultMusic;                            // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsPlayingHuskMusic;                               // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsPlayingSmasherMusic;                            // 0x02AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsPlayingTakerMusic;                              // 0x02AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   CurrentGameMode;                                   // 0x02AC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   GameMode_Lobby;                                    // 0x02B4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   GameMode_Frontend;                                 // 0x02BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FName                                   GameMode_InGame;                                   // 0x02C4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_MusicManager(int32 EntryPoint);
	void ReceiveBeginPlay();
	void PlayDefaultMusic();
	void OnUpdateMusic();
	void OnDayPhaseChanged(EFortDayPhase CurrentDayPhase_0, EFortDayPhase PreviousDayPhase, bool bAtCreation);
	void UserConstructionScript();
	void ResetMusicBools();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MusicManager_C">();
	}
	static class AMusicManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMusicManager_C>();
	}
};
static_assert(alignof(AMusicManager_C) == 0x000004, "Wrong alignment on AMusicManager_C");
static_assert(sizeof(AMusicManager_C) == 0x0002CC, "Wrong size on AMusicManager_C");
static_assert(offsetof(AMusicManager_C, UberGraphFrame) == 0x000264, "Member 'AMusicManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Music_Frontend) == 0x000268, "Member 'AMusicManager_C::Music_Frontend' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Music_Lobby) == 0x00026C, "Member 'AMusicManager_C::Music_Lobby' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MusicDay) == 0x000270, "Member 'AMusicManager_C::MusicDay' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MusicEvening) == 0x000274, "Member 'AMusicManager_C::MusicEvening' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MusicNight) == 0x000278, "Member 'AMusicManager_C::MusicNight' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, MusicMorning) == 0x00027C, "Member 'AMusicManager_C::MusicMorning' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, StingerMorning) == 0x000280, "Member 'AMusicManager_C::StingerMorning' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, StingerEvening) == 0x000284, "Member 'AMusicManager_C::StingerEvening' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, StingerNight) == 0x000288, "Member 'AMusicManager_C::StingerNight' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, CurrentDayPhase) == 0x00028C, "Member 'AMusicManager_C::CurrentDayPhase' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Smasher_Music) == 0x000290, "Member 'AMusicManager_C::Smasher_Music' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Smasher_Stinger) == 0x000294, "Member 'AMusicManager_C::Smasher_Stinger' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Husk_Music) == 0x000298, "Member 'AMusicManager_C::Husk_Music' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Husk_Stinger) == 0x00029C, "Member 'AMusicManager_C::Husk_Stinger' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Husk_Low_Music) == 0x0002A0, "Member 'AMusicManager_C::Husk_Low_Music' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, Husk_Low_Stinger) == 0x0002A4, "Member 'AMusicManager_C::Husk_Low_Stinger' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, bIsPlayingDefaultMusic) == 0x0002A8, "Member 'AMusicManager_C::bIsPlayingDefaultMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, bIsPlayingHuskMusic) == 0x0002A9, "Member 'AMusicManager_C::bIsPlayingHuskMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, bIsPlayingSmasherMusic) == 0x0002AA, "Member 'AMusicManager_C::bIsPlayingSmasherMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, bIsPlayingTakerMusic) == 0x0002AB, "Member 'AMusicManager_C::bIsPlayingTakerMusic' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, CurrentGameMode) == 0x0002AC, "Member 'AMusicManager_C::CurrentGameMode' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, GameMode_Lobby) == 0x0002B4, "Member 'AMusicManager_C::GameMode_Lobby' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, GameMode_Frontend) == 0x0002BC, "Member 'AMusicManager_C::GameMode_Frontend' has a wrong offset!");
static_assert(offsetof(AMusicManager_C, GameMode_InGame) == 0x0002C4, "Member 'AMusicManager_C::GameMode_InGame' has a wrong offset!");

}

#pragma pack(pop)
