#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MyFort_Manager

#include "Basic.hpp"

#include "MyFort_Manager_classes.hpp"
#include "MyFort_Manager_parameters.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Function MyFort_Manager.MyFort_Manager_C.ExecuteUbergraph_MyFort_Manager
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMyFort_Manager_C::ExecuteUbergraph_MyFort_Manager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "ExecuteUbergraph_MyFort_Manager");

	Params::MyFort_Manager_C_ExecuteUbergraph_MyFort_Manager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MyFort_Manager.MyFort_Manager_C.BannerColors
// (BlueprintCallable, BlueprintEvent)

void AMyFort_Manager_C::BannerColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "BannerColors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyFort_Manager.MyFort_Manager_C.PositioningActors
// (BlueprintCallable, BlueprintEvent)

void AMyFort_Manager_C::PositioningActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "PositioningActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyFort_Manager.MyFort_Manager_C.FindNumberofBuildings
// (BlueprintCallable, BlueprintEvent)

void AMyFort_Manager_C::FindNumberofBuildings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "FindNumberofBuildings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyFort_Manager.MyFort_Manager_C.SpawnBuildings
// (BlueprintCallable, BlueprintEvent)

void AMyFort_Manager_C::SpawnBuildings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "SpawnBuildings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyFort_Manager.MyFort_Manager_C.OnMyTownBannerColorChanged_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMyFort_Manager_C::OnMyTownBannerColorChanged_Event(const struct FLinearColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "OnMyTownBannerColorChanged_Event");

	Params::MyFort_Manager_C_OnMyTownBannerColorChanged_Event Parms{};

	Parms.NewColor = std::move(NewColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MyFort_Manager.MyFort_Manager_C.OnMyTownInitialized_Event
// (BlueprintCallable, BlueprintEvent)

void AMyFort_Manager_C::OnMyTownInitialized_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "OnMyTownInitialized_Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyFort_Manager.MyFort_Manager_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void AMyFort_Manager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyFort_Manager.MyFort_Manager_C.HandleClientEvent_OnboardingInitializeVisuals
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          EventSource                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          EventFocus                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FFortClientEvent&          ClientEvent                                            (ConstParm, Parm, OutParm, ReferenceParm)

void AMyFort_Manager_C::HandleClientEvent_OnboardingInitializeVisuals(class UObject* EventSource, class UObject* EventFocus, const struct FFortClientEvent& ClientEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "HandleClientEvent_OnboardingInitializeVisuals");

	Params::MyFort_Manager_C_HandleClientEvent_OnboardingInitializeVisuals Parms{};

	Parms.EventSource = EventSource;
	Parms.EventFocus = EventFocus;
	Parms.ClientEvent = std::move(ClientEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MyFort_Manager.MyFort_Manager_C.ChangeWorker
// (BlueprintCallable, BlueprintEvent)

void AMyFort_Manager_C::ChangeWorker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "ChangeWorker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyFort_Manager.MyFort_Manager_C.OnMyTownBuildingWorkersChanged_Event_0_Copy
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    BuildingTemplateId                                     (Parm, ZeroConstructor)

void AMyFort_Manager_C::OnMyTownBuildingWorkersChanged_Event_0_Copy(const class FString& BuildingTemplateId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "OnMyTownBuildingWorkersChanged_Event_0_Copy");

	Params::MyFort_Manager_C_OnMyTownBuildingWorkersChanged_Event_0_Copy Parms{};

	Parms.BuildingTemplateId = std::move(BuildingTemplateId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MyFort_Manager.MyFort_Manager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AMyFort_Manager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyFort_Manager.MyFort_Manager_C.Initialize Array
// (Public, BlueprintCallable, BlueprintEvent)

void AMyFort_Manager_C::Initialize_Array()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "Initialize Array");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyFort_Manager.MyFort_Manager_C.SaveBuildingPosition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMyFort_Manager_C::SaveBuildingPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "SaveBuildingPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyFort_Manager.MyFort_Manager_C.UpdateRoads
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMyFort_Manager_C::UpdateRoads()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "UpdateRoads");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MyFort_Manager.MyFort_Manager_C.SmallWorldCollision
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InitialBuildingLocation                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   CameraLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USphereComponent*                 Collision                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DistanceOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMyFort_Manager_C::SmallWorldCollision(const struct FVector& InitialBuildingLocation, const struct FVector& CameraLocation, class USphereComponent* Collision, float DistanceOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "SmallWorldCollision");

	Params::MyFort_Manager_C_SmallWorldCollision Parms{};

	Parms.InitialBuildingLocation = std::move(InitialBuildingLocation);
	Parms.CameraLocation = std::move(CameraLocation);
	Parms.Collision = Collision;
	Parms.DistanceOffset = DistanceOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MyFort_Manager.MyFort_Manager_C.FindBuildingID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    A                                                      (Parm, ZeroConstructor)
// class AMyTownBuildingActor**            Item                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AMyFort_Manager_C::FindBuildingID(const class FString& A, class AMyTownBuildingActor** Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "FindBuildingID");

	Params::MyFort_Manager_C_FindBuildingID Parms{};

	Parms.A = std::move(A);

	UObject::ProcessEvent(Func, &Parms);

	if (Item != nullptr)
		*Item = Parms.Item;

	return Parms.ReturnValue;
}


// Function MyFort_Manager.MyFort_Manager_C.MouseOverBuildingState
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Building_ID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AMyTownBuildingActor**            Building                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USphereComponent**                CollisionComponent                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UStaticMeshComponent**            Building_Mesh                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMyFort_Manager_C::MouseOverBuildingState(int32 Building_ID, class AMyTownBuildingActor** Building, class USphereComponent** CollisionComponent, class UStaticMeshComponent** Building_Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "MouseOverBuildingState");

	Params::MyFort_Manager_C_MouseOverBuildingState Parms{};

	Parms.Building_ID = Building_ID;

	UObject::ProcessEvent(Func, &Parms);

	if (Building != nullptr)
		*Building = Parms.Building;

	if (CollisionComponent != nullptr)
		*CollisionComponent = Parms.CollisionComponent;

	if (Building_Mesh != nullptr)
		*Building_Mesh = Parms.Building_Mesh;
}


// Function MyFort_Manager.MyFort_Manager_C.ShouldCreateBuilding
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMyTownBuildingDefinitionData*    Building_Definition                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   Allow_Create                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AMyFort_Manager_C::ShouldCreateBuilding(class UMyTownBuildingDefinitionData* Building_Definition, bool* Allow_Create)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MyFort_Manager_C", "ShouldCreateBuilding");

	Params::MyFort_Manager_C_ShouldCreateBuilding Parms{};

	Parms.Building_Definition = Building_Definition;

	UObject::ProcessEvent(Func, &Parms);

	if (Allow_Create != nullptr)
		*Allow_Create = Parms.Allow_Create;
}

}

#pragma pack(pop)
