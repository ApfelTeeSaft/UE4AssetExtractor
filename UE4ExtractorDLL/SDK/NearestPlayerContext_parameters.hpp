#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NearestPlayerContext

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function NearestPlayerContext.NearestPlayerContext_C.ProvideSingleLocation
// 0x0040 (0x0040 - 0x0000)
struct NearestPlayerContext_C_ProvideSingleLocation final
{
public:
	class UObject*                                QuerierObject;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 QuerierActor;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ResultingLocation;                                 // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AFortPlayerPawn*                        CallFunc_GetClosestFortPlayerPawn_ReturnValue;     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue2;         // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Location;                                          // 0x0034(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NearestPlayerContext_C_ProvideSingleLocation) == 0x000004, "Wrong alignment on NearestPlayerContext_C_ProvideSingleLocation");
static_assert(sizeof(NearestPlayerContext_C_ProvideSingleLocation) == 0x000040, "Wrong size on NearestPlayerContext_C_ProvideSingleLocation");
static_assert(offsetof(NearestPlayerContext_C_ProvideSingleLocation, QuerierObject) == 0x000000, "Member 'NearestPlayerContext_C_ProvideSingleLocation::QuerierObject' has a wrong offset!");
static_assert(offsetof(NearestPlayerContext_C_ProvideSingleLocation, QuerierActor) == 0x000004, "Member 'NearestPlayerContext_C_ProvideSingleLocation::QuerierActor' has a wrong offset!");
static_assert(offsetof(NearestPlayerContext_C_ProvideSingleLocation, ResultingLocation) == 0x000008, "Member 'NearestPlayerContext_C_ProvideSingleLocation::ResultingLocation' has a wrong offset!");
static_assert(offsetof(NearestPlayerContext_C_ProvideSingleLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000014, "Member 'NearestPlayerContext_C_ProvideSingleLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(NearestPlayerContext_C_ProvideSingleLocation, CallFunc_GetClosestFortPlayerPawn_ReturnValue) == 0x000020, "Member 'NearestPlayerContext_C_ProvideSingleLocation::CallFunc_GetClosestFortPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(NearestPlayerContext_C_ProvideSingleLocation, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'NearestPlayerContext_C_ProvideSingleLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(NearestPlayerContext_C_ProvideSingleLocation, CallFunc_K2_GetActorLocation_ReturnValue2) == 0x000028, "Member 'NearestPlayerContext_C_ProvideSingleLocation::CallFunc_K2_GetActorLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(NearestPlayerContext_C_ProvideSingleLocation, Location) == 0x000034, "Member 'NearestPlayerContext_C_ProvideSingleLocation::Location' has a wrong offset!");

}

#pragma pack(pop)
