#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NotificationBox

#include "Basic.hpp"

#include "NotificationBox_classes.hpp"
#include "NotificationBox_parameters.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Function NotificationBox.NotificationBox_C.ExecuteUbergraph_NotificationBox
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UNotificationBox_C::ExecuteUbergraph_NotificationBox(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "ExecuteUbergraph_NotificationBox");

	Params::NotificationBox_C_ExecuteUbergraph_NotificationBox Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationBox.NotificationBox_C.HandleOutroComplete
// (BlueprintCallable, BlueprintEvent)

void UNotificationBox_C::HandleOutroComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "HandleOutroComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationBox.NotificationBox_C.HandleIntroComplete
// (BlueprintCallable, BlueprintEvent)

void UNotificationBox_C::HandleIntroComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "HandleIntroComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationBox.NotificationBox_C.BndEvt__Button-2_K2Node_ComponentBoundEvent_501_FortBaseButtonClicked__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UFortBaseButton*                  Button                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UNotificationBox_C::BndEvt__Button_2_K2Node_ComponentBoundEvent_501_FortBaseButtonClicked__DelegateSignature(class UFortBaseButton* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "BndEvt__Button-2_K2Node_ComponentBoundEvent_501_FortBaseButtonClicked__DelegateSignature");

	Params::NotificationBox_C_BndEvt__Button_2_K2Node_ComponentBoundEvent_501_FortBaseButtonClicked__DelegateSignature Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationBox.NotificationBox_C.BndEvt__Button-1_K2Node_ComponentBoundEvent_490_FortBaseButtonClicked__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UFortBaseButton*                  Button                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UNotificationBox_C::BndEvt__Button_1_K2Node_ComponentBoundEvent_490_FortBaseButtonClicked__DelegateSignature(class UFortBaseButton* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "BndEvt__Button-1_K2Node_ComponentBoundEvent_490_FortBaseButtonClicked__DelegateSignature");

	Params::NotificationBox_C_BndEvt__Button_1_K2Node_ComponentBoundEvent_490_FortBaseButtonClicked__DelegateSignature Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationBox.NotificationBox_C.OnMouseLeave
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)

void UNotificationBox_C::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "OnMouseLeave");

	Params::NotificationBox_C_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationBox.NotificationBox_C.OnMouseEnter
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, Parm, OutParm, ReferenceParm)

void UNotificationBox_C::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "OnMouseEnter");

	Params::NotificationBox_C_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationBox.NotificationBox_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UNotificationBox_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationBox.NotificationBox_C.ShowMessage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Message                                                (Parm)

void UNotificationBox_C::ShowMessage(const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "ShowMessage");

	Params::NotificationBox_C_ShowMessage Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationBox.NotificationBox_C.ShowAcceptButton
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      ButtonName                                             (Parm)

void UNotificationBox_C::ShowAcceptButton(const class FText& ButtonName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "ShowAcceptButton");

	Params::NotificationBox_C_ShowAcceptButton Parms{};

	Parms.ButtonName = std::move(ButtonName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationBox.NotificationBox_C.ShowIgnoreButton
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      ButtonName                                             (Parm)

void UNotificationBox_C::ShowIgnoreButton(const class FText& ButtonName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "ShowIgnoreButton");

	Params::NotificationBox_C_ShowIgnoreButton Parms{};

	Parms.ButtonName = std::move(ButtonName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationBox.NotificationBox_C.HideAcceptButton
// (Public, BlueprintCallable, BlueprintEvent)

void UNotificationBox_C::HideAcceptButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "HideAcceptButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationBox.NotificationBox_C.HideIgnoreButton
// (Public, BlueprintCallable, BlueprintEvent)

void UNotificationBox_C::HideIgnoreButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "HideIgnoreButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationBox.NotificationBox_C.Intro
// (Public, BlueprintCallable, BlueprintEvent)

void UNotificationBox_C::Intro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "Intro");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationBox.NotificationBox_C.Outro
// (Public, BlueprintCallable, BlueprintEvent)

void UNotificationBox_C::Outro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "Outro");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationBox.NotificationBox_C.SetTitle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Title                                                  (Parm)

void UNotificationBox_C::SetTitle(const class FText& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "SetTitle");

	Params::NotificationBox_C_SetTitle Parms{};

	Parms.Title = std::move(Title);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationBox.NotificationBox_C.SetIcon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSlateBrush&               Icon_Brush                                             (Parm)

void UNotificationBox_C::SetIcon(const struct FSlateBrush& Icon_Brush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "SetIcon");

	Params::NotificationBox_C_SetIcon Parms{};

	Parms.Icon_Brush = std::move(Icon_Brush);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationBox.NotificationBox_C.ShowTitle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Title                                                  (Parm)

void UNotificationBox_C::ShowTitle(const class FText& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "ShowTitle");

	Params::NotificationBox_C_ShowTitle Parms{};

	Parms.Title = std::move(Title);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationBox.NotificationBox_C.HideTitle
// (Public, BlueprintCallable, BlueprintEvent)

void UNotificationBox_C::HideTitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "HideTitle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationBox.NotificationBox_C.HideMessage
// (Public, BlueprintCallable, BlueprintEvent)

void UNotificationBox_C::HideMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationBox_C", "HideMessage");

	UObject::ProcessEvent(Func, nullptr);
}

}

#pragma pack(pop)
