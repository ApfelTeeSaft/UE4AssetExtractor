#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NotificationBox

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function NotificationBox.NotificationBox_C.ExecuteUbergraph_NotificationBox
// 0x0120 (0x0120 - 0x0000)
struct NotificationBox_C_ExecuteUbergraph_NotificationBox final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate2;             // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0024(0x0034)(IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_Event_MouseEvent2;                          // 0x0058(0x0060)(ConstParm)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x00B8(0x0060)(ConstParm)
	class UFortBaseButton*                        K2Node_ComponentBoundEvent_Button2;                // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFortBaseButton*                        K2Node_ComponentBoundEvent_Button;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NotificationBox_C_ExecuteUbergraph_NotificationBox) == 0x000004, "Wrong alignment on NotificationBox_C_ExecuteUbergraph_NotificationBox");
static_assert(sizeof(NotificationBox_C_ExecuteUbergraph_NotificationBox) == 0x000120, "Wrong size on NotificationBox_C_ExecuteUbergraph_NotificationBox");
static_assert(offsetof(NotificationBox_C_ExecuteUbergraph_NotificationBox, EntryPoint) == 0x000000, "Member 'NotificationBox_C_ExecuteUbergraph_NotificationBox::EntryPoint' has a wrong offset!");
static_assert(offsetof(NotificationBox_C_ExecuteUbergraph_NotificationBox, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'NotificationBox_C_ExecuteUbergraph_NotificationBox::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(NotificationBox_C_ExecuteUbergraph_NotificationBox, K2Node_CreateDelegate_OutputDelegate2) == 0x000014, "Member 'NotificationBox_C_ExecuteUbergraph_NotificationBox::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(NotificationBox_C_ExecuteUbergraph_NotificationBox, K2Node_Event_MyGeometry) == 0x000024, "Member 'NotificationBox_C_ExecuteUbergraph_NotificationBox::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(NotificationBox_C_ExecuteUbergraph_NotificationBox, K2Node_Event_MouseEvent2) == 0x000058, "Member 'NotificationBox_C_ExecuteUbergraph_NotificationBox::K2Node_Event_MouseEvent2' has a wrong offset!");
static_assert(offsetof(NotificationBox_C_ExecuteUbergraph_NotificationBox, K2Node_Event_MouseEvent) == 0x0000B8, "Member 'NotificationBox_C_ExecuteUbergraph_NotificationBox::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(NotificationBox_C_ExecuteUbergraph_NotificationBox, K2Node_ComponentBoundEvent_Button2) == 0x000118, "Member 'NotificationBox_C_ExecuteUbergraph_NotificationBox::K2Node_ComponentBoundEvent_Button2' has a wrong offset!");
static_assert(offsetof(NotificationBox_C_ExecuteUbergraph_NotificationBox, K2Node_ComponentBoundEvent_Button) == 0x00011C, "Member 'NotificationBox_C_ExecuteUbergraph_NotificationBox::K2Node_ComponentBoundEvent_Button' has a wrong offset!");

// Function NotificationBox.NotificationBox_C.BndEvt__Button-2_K2Node_ComponentBoundEvent_501_FortBaseButtonClicked__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct NotificationBox_C_BndEvt__Button_2_K2Node_ComponentBoundEvent_501_FortBaseButtonClicked__DelegateSignature final
{
public:
	class UFortBaseButton*                        Button;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NotificationBox_C_BndEvt__Button_2_K2Node_ComponentBoundEvent_501_FortBaseButtonClicked__DelegateSignature) == 0x000004, "Wrong alignment on NotificationBox_C_BndEvt__Button_2_K2Node_ComponentBoundEvent_501_FortBaseButtonClicked__DelegateSignature");
static_assert(sizeof(NotificationBox_C_BndEvt__Button_2_K2Node_ComponentBoundEvent_501_FortBaseButtonClicked__DelegateSignature) == 0x000004, "Wrong size on NotificationBox_C_BndEvt__Button_2_K2Node_ComponentBoundEvent_501_FortBaseButtonClicked__DelegateSignature");
static_assert(offsetof(NotificationBox_C_BndEvt__Button_2_K2Node_ComponentBoundEvent_501_FortBaseButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'NotificationBox_C_BndEvt__Button_2_K2Node_ComponentBoundEvent_501_FortBaseButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function NotificationBox.NotificationBox_C.BndEvt__Button-1_K2Node_ComponentBoundEvent_490_FortBaseButtonClicked__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct NotificationBox_C_BndEvt__Button_1_K2Node_ComponentBoundEvent_490_FortBaseButtonClicked__DelegateSignature final
{
public:
	class UFortBaseButton*                        Button;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(NotificationBox_C_BndEvt__Button_1_K2Node_ComponentBoundEvent_490_FortBaseButtonClicked__DelegateSignature) == 0x000004, "Wrong alignment on NotificationBox_C_BndEvt__Button_1_K2Node_ComponentBoundEvent_490_FortBaseButtonClicked__DelegateSignature");
static_assert(sizeof(NotificationBox_C_BndEvt__Button_1_K2Node_ComponentBoundEvent_490_FortBaseButtonClicked__DelegateSignature) == 0x000004, "Wrong size on NotificationBox_C_BndEvt__Button_1_K2Node_ComponentBoundEvent_490_FortBaseButtonClicked__DelegateSignature");
static_assert(offsetof(NotificationBox_C_BndEvt__Button_1_K2Node_ComponentBoundEvent_490_FortBaseButtonClicked__DelegateSignature, Button) == 0x000000, "Member 'NotificationBox_C_BndEvt__Button_1_K2Node_ComponentBoundEvent_490_FortBaseButtonClicked__DelegateSignature::Button' has a wrong offset!");

// Function NotificationBox.NotificationBox_C.OnMouseLeave
// 0x0060 (0x0060 - 0x0000)
struct NotificationBox_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(NotificationBox_C_OnMouseLeave) == 0x000004, "Wrong alignment on NotificationBox_C_OnMouseLeave");
static_assert(sizeof(NotificationBox_C_OnMouseLeave) == 0x000060, "Wrong size on NotificationBox_C_OnMouseLeave");
static_assert(offsetof(NotificationBox_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'NotificationBox_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function NotificationBox.NotificationBox_C.OnMouseEnter
// 0x0094 (0x0094 - 0x0000)
struct NotificationBox_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0034)(Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0034(0x0060)(ConstParm, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(NotificationBox_C_OnMouseEnter) == 0x000004, "Wrong alignment on NotificationBox_C_OnMouseEnter");
static_assert(sizeof(NotificationBox_C_OnMouseEnter) == 0x000094, "Wrong size on NotificationBox_C_OnMouseEnter");
static_assert(offsetof(NotificationBox_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'NotificationBox_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(NotificationBox_C_OnMouseEnter, MouseEvent) == 0x000034, "Member 'NotificationBox_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function NotificationBox.NotificationBox_C.ShowMessage
// 0x000C (0x000C - 0x0000)
struct NotificationBox_C_ShowMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x000C)(Parm)
};
static_assert(alignof(NotificationBox_C_ShowMessage) == 0x000004, "Wrong alignment on NotificationBox_C_ShowMessage");
static_assert(sizeof(NotificationBox_C_ShowMessage) == 0x00000C, "Wrong size on NotificationBox_C_ShowMessage");
static_assert(offsetof(NotificationBox_C_ShowMessage, Message) == 0x000000, "Member 'NotificationBox_C_ShowMessage::Message' has a wrong offset!");

// Function NotificationBox.NotificationBox_C.ShowAcceptButton
// 0x000C (0x000C - 0x0000)
struct NotificationBox_C_ShowAcceptButton final
{
public:
	class FText                                   ButtonName;                                        // 0x0000(0x000C)(Parm)
};
static_assert(alignof(NotificationBox_C_ShowAcceptButton) == 0x000004, "Wrong alignment on NotificationBox_C_ShowAcceptButton");
static_assert(sizeof(NotificationBox_C_ShowAcceptButton) == 0x00000C, "Wrong size on NotificationBox_C_ShowAcceptButton");
static_assert(offsetof(NotificationBox_C_ShowAcceptButton, ButtonName) == 0x000000, "Member 'NotificationBox_C_ShowAcceptButton::ButtonName' has a wrong offset!");

// Function NotificationBox.NotificationBox_C.ShowIgnoreButton
// 0x000C (0x000C - 0x0000)
struct NotificationBox_C_ShowIgnoreButton final
{
public:
	class FText                                   ButtonName;                                        // 0x0000(0x000C)(Parm)
};
static_assert(alignof(NotificationBox_C_ShowIgnoreButton) == 0x000004, "Wrong alignment on NotificationBox_C_ShowIgnoreButton");
static_assert(sizeof(NotificationBox_C_ShowIgnoreButton) == 0x00000C, "Wrong size on NotificationBox_C_ShowIgnoreButton");
static_assert(offsetof(NotificationBox_C_ShowIgnoreButton, ButtonName) == 0x000000, "Member 'NotificationBox_C_ShowIgnoreButton::ButtonName' has a wrong offset!");

// Function NotificationBox.NotificationBox_C.SetTitle
// 0x000C (0x000C - 0x0000)
struct NotificationBox_C_SetTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x000C)(Parm)
};
static_assert(alignof(NotificationBox_C_SetTitle) == 0x000004, "Wrong alignment on NotificationBox_C_SetTitle");
static_assert(sizeof(NotificationBox_C_SetTitle) == 0x00000C, "Wrong size on NotificationBox_C_SetTitle");
static_assert(offsetof(NotificationBox_C_SetTitle, Title) == 0x000000, "Member 'NotificationBox_C_SetTitle::Title' has a wrong offset!");

// Function NotificationBox.NotificationBox_C.SetIcon
// 0x0074 (0x0074 - 0x0000)
struct NotificationBox_C_SetIcon final
{
public:
	struct FSlateBrush                            Icon_Brush;                                        // 0x0000(0x0074)(Parm)
};
static_assert(alignof(NotificationBox_C_SetIcon) == 0x000004, "Wrong alignment on NotificationBox_C_SetIcon");
static_assert(sizeof(NotificationBox_C_SetIcon) == 0x000074, "Wrong size on NotificationBox_C_SetIcon");
static_assert(offsetof(NotificationBox_C_SetIcon, Icon_Brush) == 0x000000, "Member 'NotificationBox_C_SetIcon::Icon_Brush' has a wrong offset!");

// Function NotificationBox.NotificationBox_C.ShowTitle
// 0x000C (0x000C - 0x0000)
struct NotificationBox_C_ShowTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x000C)(Parm)
};
static_assert(alignof(NotificationBox_C_ShowTitle) == 0x000004, "Wrong alignment on NotificationBox_C_ShowTitle");
static_assert(sizeof(NotificationBox_C_ShowTitle) == 0x00000C, "Wrong size on NotificationBox_C_ShowTitle");
static_assert(offsetof(NotificationBox_C_ShowTitle, Title) == 0x000000, "Member 'NotificationBox_C_ShowTitle::Title' has a wrong offset!");

}

#pragma pack(pop)
