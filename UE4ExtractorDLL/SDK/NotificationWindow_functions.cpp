#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NotificationWindow

#include "Basic.hpp"

#include "NotificationWindow_classes.hpp"
#include "NotificationWindow_parameters.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Function NotificationWindow.NotificationWindow_C.ExecuteUbergraph_NotificationWindow
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UNotificationWindow_C::ExecuteUbergraph_NotificationWindow(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "ExecuteUbergraph_NotificationWindow");

	Params::NotificationWindow_C_ExecuteUbergraph_NotificationWindow Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationWindow.NotificationWindow_C.BndEvt__NotificationBox_K2Node_ComponentBoundEvent_558_OnIgnored__DelegateSignature
// (BlueprintEvent)

void UNotificationWindow_C::BndEvt__NotificationBox_K2Node_ComponentBoundEvent_558_OnIgnored__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "BndEvt__NotificationBox_K2Node_ComponentBoundEvent_558_OnIgnored__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationWindow.NotificationWindow_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UNotificationWindow_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationWindow.NotificationWindow_C.HandleNotificationAvailable
// (BlueprintCallable, BlueprintEvent)

void UNotificationWindow_C::HandleNotificationAvailable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "HandleNotificationAvailable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationWindow.NotificationWindow_C.BndEvt__NotificationBox_K2Node_ComponentBoundEvent_694_OnOutroComplete__DelegateSignature
// (BlueprintEvent)

void UNotificationWindow_C::BndEvt__NotificationBox_K2Node_ComponentBoundEvent_694_OnOutroComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "BndEvt__NotificationBox_K2Node_ComponentBoundEvent_694_OnOutroComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationWindow.NotificationWindow_C.BndEvt__NotificationBox_K2Node_ComponentBoundEvent_685_OnIntroComplete__DelegateSignature
// (BlueprintEvent)

void UNotificationWindow_C::BndEvt__NotificationBox_K2Node_ComponentBoundEvent_685_OnIntroComplete__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "BndEvt__NotificationBox_K2Node_ComponentBoundEvent_685_OnIntroComplete__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationWindow.NotificationWindow_C.BndEvt__NotificationBox_K2Node_ComponentBoundEvent_141_OnMouseLeft__DelegateSignature
// (BlueprintEvent)

void UNotificationWindow_C::BndEvt__NotificationBox_K2Node_ComponentBoundEvent_141_OnMouseLeft__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "BndEvt__NotificationBox_K2Node_ComponentBoundEvent_141_OnMouseLeft__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationWindow.NotificationWindow_C.BndEvt__NotificationBox_K2Node_ComponentBoundEvent_116_OnMouseEntered__DelegateSignature
// (BlueprintEvent)

void UNotificationWindow_C::BndEvt__NotificationBox_K2Node_ComponentBoundEvent_116_OnMouseEntered__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "BndEvt__NotificationBox_K2Node_ComponentBoundEvent_116_OnMouseEntered__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationWindow.NotificationWindow_C.NextAnimation
// (BlueprintCallable, BlueprintEvent)

void UNotificationWindow_C::NextAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "NextAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationWindow.NotificationWindow_C.BndEvt__NotificationBox_K2Node_ComponentBoundEvent_55_OnConfirmed__DelegateSignature
// (BlueprintEvent)

void UNotificationWindow_C::BndEvt__NotificationBox_K2Node_ComponentBoundEvent_55_OnConfirmed__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "BndEvt__NotificationBox_K2Node_ComponentBoundEvent_55_OnConfirmed__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationWindow.NotificationWindow_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UNotificationWindow_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationWindow.NotificationWindow_C.StartNotification
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FFortDialogDescription&    NotificationDescription                                (Parm)

void UNotificationWindow_C::StartNotification(const struct FFortDialogDescription& NotificationDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "StartNotification");

	Params::NotificationWindow_C_StartNotification Parms{};

	Parms.NotificationDescription = std::move(NotificationDescription);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NotificationWindow.NotificationWindow_C.RegisterNotificationHandler
// (Public, BlueprintCallable, BlueprintEvent)

void UNotificationWindow_C::RegisterNotificationHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "RegisterNotificationHandler");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationWindow.NotificationWindow_C.SetTitle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText&                            InText                                                 (Parm, OutParm, ReferenceParm)

void UNotificationWindow_C::SetTitle(class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "SetTitle");

	Params::NotificationWindow_C_SetTitle Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);

	InText = std::move(Parms.InText);
}


// Function NotificationWindow.NotificationWindow_C.SetMessage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText&                            InText                                                 (Parm, OutParm, ReferenceParm)

void UNotificationWindow_C::SetMessage(class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "SetMessage");

	Params::NotificationWindow_C_SetMessage Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);

	InText = std::move(Parms.InText);
}


// Function NotificationWindow.NotificationWindow_C.SetAcceptButton
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText&                            InText                                                 (Parm, OutParm, ReferenceParm)

void UNotificationWindow_C::SetAcceptButton(class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "SetAcceptButton");

	Params::NotificationWindow_C_SetAcceptButton Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);

	InText = std::move(Parms.InText);
}


// Function NotificationWindow.NotificationWindow_C.SetIgnoreButton
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText&                            InText                                                 (Parm, OutParm, ReferenceParm)

void UNotificationWindow_C::SetIgnoreButton(class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "SetIgnoreButton");

	Params::NotificationWindow_C_SetIgnoreButton Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);

	InText = std::move(Parms.InText);
}


// Function NotificationWindow.NotificationWindow_C.FinishHandlingNotification
// (Public, BlueprintCallable, BlueprintEvent)

void UNotificationWindow_C::FinishHandlingNotification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "FinishHandlingNotification");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationWindow.NotificationWindow_C.TryConsumeNextNotification
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UNotificationWindow_C::TryConsumeNextNotification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "TryConsumeNextNotification");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NotificationWindow.NotificationWindow_C.PlayFeedback
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFortDialogFeedbackType                 FeedBackType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UNotificationWindow_C::PlayFeedback(EFortDialogFeedbackType FeedBackType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NotificationWindow_C", "PlayFeedback");

	Params::NotificationWindow_C_PlayFeedback Parms{};

	Parms.FeedBackType = FeedBackType;

	UObject::ProcessEvent(Func, &Parms);
}

}

#pragma pack(pop)
