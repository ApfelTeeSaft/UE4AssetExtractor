#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OculusLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Class OculusLibrary.OculusFunctionLibrary
// 0x0000 (0x001C - 0x001C)
class UOculusFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void EnablePlayerCameraManagerFollowHmd(bool bFollowHmdOrientation, bool bFollowHmdPosition);
	static void EnablePlayerControllerFollowHmd(bool bEnable);
	static void GetBaseRotationAndBaseOffsetInMeters(struct FRotator* OutRotation, struct FVector* OutBaseOffsetInMeters);
	static void GetBaseRotationAndPositionOffset(struct FRotator* OutRot, struct FVector* OutPosOffset);
	static void GetPlayerCameraManagerFollowHmd(bool* bFollowHmdOrientation, bool* bFollowHmdPosition);
	static void GetPose(struct FRotator* DeviceRotation, struct FVector* DevicePosition, struct FVector* NeckPosition, bool bUseOrienationForPlayerCamera, bool bUsePositionForPlayerCamera, const struct FVector& PositionScale);
	static void GetRawSensorData(struct FVector* Accelerometer, struct FVector* Gyro, struct FVector* Magnetometer, float* Temperature, float* TimeInSeconds);
	static bool GetUserProfile(struct FHmdUserProfile* Profile);
	static bool IsPlayerControllerFollowHmdEnabled();
	static void SetBaseRotationAndBaseOffsetInMeters(const struct FRotator& Rotation, const struct FVector& BaseOffsetInMeters, EOrientPositionSelector Options);
	static void SetBaseRotationAndPositionOffset(const struct FRotator& BaseRot, const struct FVector& PosOffset, EOrientPositionSelector Options);
	static void SetPositionScale3D(const struct FVector& PosScale3D);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OculusFunctionLibrary">();
	}
	static class UOculusFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOculusFunctionLibrary>();
	}
};
static_assert(alignof(UOculusFunctionLibrary) == 0x000004, "Wrong alignment on UOculusFunctionLibrary");
static_assert(sizeof(UOculusFunctionLibrary) == 0x00001C, "Wrong size on UOculusFunctionLibrary");

}

#pragma pack(pop)
