#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OculusLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "OculusLibrary_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function OculusLibrary.OculusFunctionLibrary.EnablePlayerCameraManagerFollowHmd
// 0x0002 (0x0002 - 0x0000)
struct OculusFunctionLibrary_EnablePlayerCameraManagerFollowHmd final
{
public:
	bool                                          bFollowHmdOrientation;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFollowHmdPosition;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_EnablePlayerCameraManagerFollowHmd) == 0x000001, "Wrong alignment on OculusFunctionLibrary_EnablePlayerCameraManagerFollowHmd");
static_assert(sizeof(OculusFunctionLibrary_EnablePlayerCameraManagerFollowHmd) == 0x000002, "Wrong size on OculusFunctionLibrary_EnablePlayerCameraManagerFollowHmd");
static_assert(offsetof(OculusFunctionLibrary_EnablePlayerCameraManagerFollowHmd, bFollowHmdOrientation) == 0x000000, "Member 'OculusFunctionLibrary_EnablePlayerCameraManagerFollowHmd::bFollowHmdOrientation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_EnablePlayerCameraManagerFollowHmd, bFollowHmdPosition) == 0x000001, "Member 'OculusFunctionLibrary_EnablePlayerCameraManagerFollowHmd::bFollowHmdPosition' has a wrong offset!");

// Function OculusLibrary.OculusFunctionLibrary.EnablePlayerControllerFollowHmd
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_EnablePlayerControllerFollowHmd final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_EnablePlayerControllerFollowHmd) == 0x000001, "Wrong alignment on OculusFunctionLibrary_EnablePlayerControllerFollowHmd");
static_assert(sizeof(OculusFunctionLibrary_EnablePlayerControllerFollowHmd) == 0x000001, "Wrong size on OculusFunctionLibrary_EnablePlayerControllerFollowHmd");
static_assert(offsetof(OculusFunctionLibrary_EnablePlayerControllerFollowHmd, bEnable) == 0x000000, "Member 'OculusFunctionLibrary_EnablePlayerControllerFollowHmd::bEnable' has a wrong offset!");

// Function OculusLibrary.OculusFunctionLibrary.GetBaseRotationAndBaseOffsetInMeters
// 0x0018 (0x0018 - 0x0000)
struct OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters final
{
public:
	struct FRotator                               OutRotation;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutBaseOffsetInMeters;                             // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters");
static_assert(sizeof(OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters) == 0x000018, "Wrong size on OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters");
static_assert(offsetof(OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters, OutRotation) == 0x000000, "Member 'OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters::OutRotation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters, OutBaseOffsetInMeters) == 0x00000C, "Member 'OculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters::OutBaseOffsetInMeters' has a wrong offset!");

// Function OculusLibrary.OculusFunctionLibrary.GetBaseRotationAndPositionOffset
// 0x0018 (0x0018 - 0x0000)
struct OculusFunctionLibrary_GetBaseRotationAndPositionOffset final
{
public:
	struct FRotator                               OutRot;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutPosOffset;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetBaseRotationAndPositionOffset) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetBaseRotationAndPositionOffset");
static_assert(sizeof(OculusFunctionLibrary_GetBaseRotationAndPositionOffset) == 0x000018, "Wrong size on OculusFunctionLibrary_GetBaseRotationAndPositionOffset");
static_assert(offsetof(OculusFunctionLibrary_GetBaseRotationAndPositionOffset, OutRot) == 0x000000, "Member 'OculusFunctionLibrary_GetBaseRotationAndPositionOffset::OutRot' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetBaseRotationAndPositionOffset, OutPosOffset) == 0x00000C, "Member 'OculusFunctionLibrary_GetBaseRotationAndPositionOffset::OutPosOffset' has a wrong offset!");

// Function OculusLibrary.OculusFunctionLibrary.GetPlayerCameraManagerFollowHmd
// 0x0002 (0x0002 - 0x0000)
struct OculusFunctionLibrary_GetPlayerCameraManagerFollowHmd final
{
public:
	bool                                          bFollowHmdOrientation;                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFollowHmdPosition;                                // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetPlayerCameraManagerFollowHmd) == 0x000001, "Wrong alignment on OculusFunctionLibrary_GetPlayerCameraManagerFollowHmd");
static_assert(sizeof(OculusFunctionLibrary_GetPlayerCameraManagerFollowHmd) == 0x000002, "Wrong size on OculusFunctionLibrary_GetPlayerCameraManagerFollowHmd");
static_assert(offsetof(OculusFunctionLibrary_GetPlayerCameraManagerFollowHmd, bFollowHmdOrientation) == 0x000000, "Member 'OculusFunctionLibrary_GetPlayerCameraManagerFollowHmd::bFollowHmdOrientation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPlayerCameraManagerFollowHmd, bFollowHmdPosition) == 0x000001, "Member 'OculusFunctionLibrary_GetPlayerCameraManagerFollowHmd::bFollowHmdPosition' has a wrong offset!");

// Function OculusLibrary.OculusFunctionLibrary.GetPose
// 0x0034 (0x0034 - 0x0000)
struct OculusFunctionLibrary_GetPose final
{
public:
	struct FRotator                               DeviceRotation;                                    // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                DevicePosition;                                    // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                NeckPosition;                                      // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseOrienationForPlayerCamera;                     // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUsePositionForPlayerCamera;                       // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PositionScale;                                     // 0x0028(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetPose) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetPose");
static_assert(sizeof(OculusFunctionLibrary_GetPose) == 0x000034, "Wrong size on OculusFunctionLibrary_GetPose");
static_assert(offsetof(OculusFunctionLibrary_GetPose, DeviceRotation) == 0x000000, "Member 'OculusFunctionLibrary_GetPose::DeviceRotation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, DevicePosition) == 0x00000C, "Member 'OculusFunctionLibrary_GetPose::DevicePosition' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, NeckPosition) == 0x000018, "Member 'OculusFunctionLibrary_GetPose::NeckPosition' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, bUseOrienationForPlayerCamera) == 0x000024, "Member 'OculusFunctionLibrary_GetPose::bUseOrienationForPlayerCamera' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, bUsePositionForPlayerCamera) == 0x000025, "Member 'OculusFunctionLibrary_GetPose::bUsePositionForPlayerCamera' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetPose, PositionScale) == 0x000028, "Member 'OculusFunctionLibrary_GetPose::PositionScale' has a wrong offset!");

// Function OculusLibrary.OculusFunctionLibrary.GetRawSensorData
// 0x002C (0x002C - 0x0000)
struct OculusFunctionLibrary_GetRawSensorData final
{
public:
	struct FVector                                Accelerometer;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Gyro;                                              // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Magnetometer;                                      // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInSeconds;                                     // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_GetRawSensorData) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetRawSensorData");
static_assert(sizeof(OculusFunctionLibrary_GetRawSensorData) == 0x00002C, "Wrong size on OculusFunctionLibrary_GetRawSensorData");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, Accelerometer) == 0x000000, "Member 'OculusFunctionLibrary_GetRawSensorData::Accelerometer' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, Gyro) == 0x00000C, "Member 'OculusFunctionLibrary_GetRawSensorData::Gyro' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, Magnetometer) == 0x000018, "Member 'OculusFunctionLibrary_GetRawSensorData::Magnetometer' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, Temperature) == 0x000024, "Member 'OculusFunctionLibrary_GetRawSensorData::Temperature' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetRawSensorData, TimeInSeconds) == 0x000028, "Member 'OculusFunctionLibrary_GetRawSensorData::TimeInSeconds' has a wrong offset!");

// Function OculusLibrary.OculusFunctionLibrary.GetUserProfile
// 0x003C (0x003C - 0x0000)
struct OculusFunctionLibrary_GetUserProfile final
{
public:
	struct FHmdUserProfile                        Profile;                                           // 0x0000(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_GetUserProfile) == 0x000004, "Wrong alignment on OculusFunctionLibrary_GetUserProfile");
static_assert(sizeof(OculusFunctionLibrary_GetUserProfile) == 0x00003C, "Wrong size on OculusFunctionLibrary_GetUserProfile");
static_assert(offsetof(OculusFunctionLibrary_GetUserProfile, Profile) == 0x000000, "Member 'OculusFunctionLibrary_GetUserProfile::Profile' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_GetUserProfile, ReturnValue) == 0x000038, "Member 'OculusFunctionLibrary_GetUserProfile::ReturnValue' has a wrong offset!");

// Function OculusLibrary.OculusFunctionLibrary.IsPlayerControllerFollowHmdEnabled
// 0x0001 (0x0001 - 0x0000)
struct OculusFunctionLibrary_IsPlayerControllerFollowHmdEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_IsPlayerControllerFollowHmdEnabled) == 0x000001, "Wrong alignment on OculusFunctionLibrary_IsPlayerControllerFollowHmdEnabled");
static_assert(sizeof(OculusFunctionLibrary_IsPlayerControllerFollowHmdEnabled) == 0x000001, "Wrong size on OculusFunctionLibrary_IsPlayerControllerFollowHmdEnabled");
static_assert(offsetof(OculusFunctionLibrary_IsPlayerControllerFollowHmdEnabled, ReturnValue) == 0x000000, "Member 'OculusFunctionLibrary_IsPlayerControllerFollowHmdEnabled::ReturnValue' has a wrong offset!");

// Function OculusLibrary.OculusFunctionLibrary.SetBaseRotationAndBaseOffsetInMeters
// 0x001C (0x001C - 0x0000)
struct OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BaseOffsetInMeters;                                // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EOrientPositionSelector                       Options;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters) == 0x000004, "Wrong alignment on OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters");
static_assert(sizeof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters) == 0x00001C, "Wrong size on OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters, Rotation) == 0x000000, "Member 'OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters::Rotation' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters, BaseOffsetInMeters) == 0x00000C, "Member 'OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters::BaseOffsetInMeters' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters, Options) == 0x000018, "Member 'OculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters::Options' has a wrong offset!");

// Function OculusLibrary.OculusFunctionLibrary.SetBaseRotationAndPositionOffset
// 0x001C (0x001C - 0x0000)
struct OculusFunctionLibrary_SetBaseRotationAndPositionOffset final
{
public:
	struct FRotator                               BaseRot;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PosOffset;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EOrientPositionSelector                       Options;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset) == 0x000004, "Wrong alignment on OculusFunctionLibrary_SetBaseRotationAndPositionOffset");
static_assert(sizeof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset) == 0x00001C, "Wrong size on OculusFunctionLibrary_SetBaseRotationAndPositionOffset");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset, BaseRot) == 0x000000, "Member 'OculusFunctionLibrary_SetBaseRotationAndPositionOffset::BaseRot' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset, PosOffset) == 0x00000C, "Member 'OculusFunctionLibrary_SetBaseRotationAndPositionOffset::PosOffset' has a wrong offset!");
static_assert(offsetof(OculusFunctionLibrary_SetBaseRotationAndPositionOffset, Options) == 0x000018, "Member 'OculusFunctionLibrary_SetBaseRotationAndPositionOffset::Options' has a wrong offset!");

// Function OculusLibrary.OculusFunctionLibrary.SetPositionScale3D
// 0x000C (0x000C - 0x0000)
struct OculusFunctionLibrary_SetPositionScale3D final
{
public:
	struct FVector                                PosScale3D;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OculusFunctionLibrary_SetPositionScale3D) == 0x000004, "Wrong alignment on OculusFunctionLibrary_SetPositionScale3D");
static_assert(sizeof(OculusFunctionLibrary_SetPositionScale3D) == 0x00000C, "Wrong size on OculusFunctionLibrary_SetPositionScale3D");
static_assert(offsetof(OculusFunctionLibrary_SetPositionScale3D, PosScale3D) == 0x000000, "Member 'OculusFunctionLibrary_SetPositionScale3D::PosScale3D' has a wrong offset!");

}

#pragma pack(pop)
