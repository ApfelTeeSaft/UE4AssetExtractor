#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OnlineSubsystemUtils

#include "Basic.hpp"

#include "Engine_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Enum OnlineSubsystemUtils.EBeaconConnectionState
// NumValues: 0x0005
enum class EBeaconConnectionState : uint8
{
	Invalid                                  = 0,
	Closed                                   = 1,
	Pending                                  = 2,
	Open                                     = 3,
	EBeaconConnectionState_MAX               = 4,
};

// Enum OnlineSubsystemUtils.EPartyReservationResult
// NumValues: 0x000F
enum class EPartyReservationResult : uint8
{
	NoResult                                 = 0,
	RequestPending                           = 1,
	GeneralError                             = 2,
	PartyLimitReached                        = 3,
	IncorrectPlayerCount                     = 4,
	RequestTimedOut                          = 5,
	ReservationDuplicate                     = 6,
	ReservationNotFound                      = 7,
	ReservationAccepted                      = 8,
	ReservationDenied                        = 9,
	ReservationDenied_Banned                 = 10,
	ReservationRequestCanceled               = 11,
	ReservationInvalid                       = 12,
	BadSessionId                             = 13,
	EPartyReservationResult_MAX              = 14,
};

// Enum OnlineSubsystemUtils.EClientRequestType
// NumValues: 0x0006
enum class EClientRequestType : uint8
{
	NonePending                              = 0,
	ExistingSessionReservation               = 1,
	ReservationUpdate                        = 2,
	EmptyServerReservation                   = 3,
	Reconnect                                = 4,
	EClientRequestType_MAX                   = 5,
};

// ScriptStruct OnlineSubsystemUtils.BlueprintSessionResult
// 0x0084 (0x0084 - 0x0000)
struct alignas(0x04) FBlueprintSessionResult final
{
public:
	uint8                                         Pad_0[0x84];                                       // 0x0000(0x0084)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlueprintSessionResult) == 0x000004, "Wrong alignment on FBlueprintSessionResult");
static_assert(sizeof(FBlueprintSessionResult) == 0x000084, "Wrong size on FBlueprintSessionResult");

// ScriptStruct OnlineSubsystemUtils.PlayerReservation
// 0x0018 (0x0018 - 0x0000)
struct FPlayerReservation final
{
public:
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0000(0x0008)(Transient, NativeAccessSpecifierPublic)
	class FString                                 ValidationStr;                                     // 0x0008(0x000C)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerReservation) == 0x000004, "Wrong alignment on FPlayerReservation");
static_assert(sizeof(FPlayerReservation) == 0x000018, "Wrong size on FPlayerReservation");
static_assert(offsetof(FPlayerReservation, UniqueId) == 0x000000, "Member 'FPlayerReservation::UniqueId' has a wrong offset!");
static_assert(offsetof(FPlayerReservation, ValidationStr) == 0x000008, "Member 'FPlayerReservation::ValidationStr' has a wrong offset!");
static_assert(offsetof(FPlayerReservation, ElapsedTime) == 0x000014, "Member 'FPlayerReservation::ElapsedTime' has a wrong offset!");

// ScriptStruct OnlineSubsystemUtils.PartyReservation
// 0x0018 (0x0018 - 0x0000)
struct FPartyReservation final
{
public:
	int32                                         TeamNum;                                           // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       PartyLeader;                                       // 0x0004(0x0008)(Transient, NativeAccessSpecifierPublic)
	TArray<struct FPlayerReservation>             PartyMembers;                                      // 0x000C(0x000C)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyReservation) == 0x000004, "Wrong alignment on FPartyReservation");
static_assert(sizeof(FPartyReservation) == 0x000018, "Wrong size on FPartyReservation");
static_assert(offsetof(FPartyReservation, TeamNum) == 0x000000, "Member 'FPartyReservation::TeamNum' has a wrong offset!");
static_assert(offsetof(FPartyReservation, PartyLeader) == 0x000004, "Member 'FPartyReservation::PartyLeader' has a wrong offset!");
static_assert(offsetof(FPartyReservation, PartyMembers) == 0x00000C, "Member 'FPartyReservation::PartyMembers' has a wrong offset!");

// ScriptStruct OnlineSubsystemUtils.PIELoginSettingsInternal
// 0x0030 (0x0030 - 0x0000)
struct FPIELoginSettingsInternal final
{
public:
	class FString                                 ID;                                                // 0x0000(0x000C)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x000C(0x000C)(Edit, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0018(0x000C)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 TokenBytes;                                        // 0x0024(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPIELoginSettingsInternal) == 0x000004, "Wrong alignment on FPIELoginSettingsInternal");
static_assert(sizeof(FPIELoginSettingsInternal) == 0x000030, "Wrong size on FPIELoginSettingsInternal");
static_assert(offsetof(FPIELoginSettingsInternal, ID) == 0x000000, "Member 'FPIELoginSettingsInternal::ID' has a wrong offset!");
static_assert(offsetof(FPIELoginSettingsInternal, Token) == 0x00000C, "Member 'FPIELoginSettingsInternal::Token' has a wrong offset!");
static_assert(offsetof(FPIELoginSettingsInternal, Type) == 0x000018, "Member 'FPIELoginSettingsInternal::Type' has a wrong offset!");
static_assert(offsetof(FPIELoginSettingsInternal, TokenBytes) == 0x000024, "Member 'FPIELoginSettingsInternal::TokenBytes' has a wrong offset!");

}

#pragma pack(pop)
