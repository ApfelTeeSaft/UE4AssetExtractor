#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OnlineSubsystem

#include "Basic.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Enum OnlineSubsystem.EInAppPurchaseState
// NumValues: 0x0008
enum class EInAppPurchaseState : uint8
{
	Success                                  = 0,
	Failed                                   = 1,
	Cancelled                                = 2,
	Invalid                                  = 3,
	NotAllowed                               = 4,
	Restored                                 = 5,
	Unknown                                  = 6,
	EInAppPurchaseState_MAX                  = 7,
};

// Enum OnlineSubsystem.EMPMatchOutcome
// NumValues: 0x000B
enum class EMPMatchOutcome : uint8
{
	None                                     = 0,
	Quit                                     = 1,
	Won                                      = 2,
	Lost                                     = 3,
	Tied                                     = 4,
	TimeExpired                              = 5,
	First                                    = 6,
	Second                                   = 7,
	Third                                    = 8,
	Fourth                                   = 9,
	EMPMatchOutcome_MAX                      = 10,
};

// ScriptStruct OnlineSubsystem.InAppPurchaseProductRequest
// 0x0010 (0x0010 - 0x0000)
struct FInAppPurchaseProductRequest final
{
public:
	class FString                                 ProductIdentifier;                                 // 0x0000(0x000C)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsConsumable;                                     // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInAppPurchaseProductRequest) == 0x000004, "Wrong alignment on FInAppPurchaseProductRequest");
static_assert(sizeof(FInAppPurchaseProductRequest) == 0x000010, "Wrong size on FInAppPurchaseProductRequest");
static_assert(offsetof(FInAppPurchaseProductRequest, ProductIdentifier) == 0x000000, "Member 'FInAppPurchaseProductRequest::ProductIdentifier' has a wrong offset!");
static_assert(offsetof(FInAppPurchaseProductRequest, bIsConsumable) == 0x00000C, "Member 'FInAppPurchaseProductRequest::bIsConsumable' has a wrong offset!");

// ScriptStruct OnlineSubsystem.InAppPurchaseProductInfo
// 0x0078 (0x0078 - 0x0000)
struct FInAppPurchaseProductInfo final
{
public:
	class FString                                 Identifier;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionIdentifier;                             // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayDescription;                                // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayPrice;                                      // 0x0030(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencyCode;                                      // 0x003C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrencySymbol;                                    // 0x0048(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DecimalSeparator;                                  // 0x0054(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupingSeparator;                                 // 0x0060(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiptData;                                       // 0x006C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInAppPurchaseProductInfo) == 0x000004, "Wrong alignment on FInAppPurchaseProductInfo");
static_assert(sizeof(FInAppPurchaseProductInfo) == 0x000078, "Wrong size on FInAppPurchaseProductInfo");
static_assert(offsetof(FInAppPurchaseProductInfo, Identifier) == 0x000000, "Member 'FInAppPurchaseProductInfo::Identifier' has a wrong offset!");
static_assert(offsetof(FInAppPurchaseProductInfo, TransactionIdentifier) == 0x00000C, "Member 'FInAppPurchaseProductInfo::TransactionIdentifier' has a wrong offset!");
static_assert(offsetof(FInAppPurchaseProductInfo, DisplayName) == 0x000018, "Member 'FInAppPurchaseProductInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FInAppPurchaseProductInfo, DisplayDescription) == 0x000024, "Member 'FInAppPurchaseProductInfo::DisplayDescription' has a wrong offset!");
static_assert(offsetof(FInAppPurchaseProductInfo, DisplayPrice) == 0x000030, "Member 'FInAppPurchaseProductInfo::DisplayPrice' has a wrong offset!");
static_assert(offsetof(FInAppPurchaseProductInfo, CurrencyCode) == 0x00003C, "Member 'FInAppPurchaseProductInfo::CurrencyCode' has a wrong offset!");
static_assert(offsetof(FInAppPurchaseProductInfo, CurrencySymbol) == 0x000048, "Member 'FInAppPurchaseProductInfo::CurrencySymbol' has a wrong offset!");
static_assert(offsetof(FInAppPurchaseProductInfo, DecimalSeparator) == 0x000054, "Member 'FInAppPurchaseProductInfo::DecimalSeparator' has a wrong offset!");
static_assert(offsetof(FInAppPurchaseProductInfo, GroupingSeparator) == 0x000060, "Member 'FInAppPurchaseProductInfo::GroupingSeparator' has a wrong offset!");
static_assert(offsetof(FInAppPurchaseProductInfo, ReceiptData) == 0x00006C, "Member 'FInAppPurchaseProductInfo::ReceiptData' has a wrong offset!");

// ScriptStruct OnlineSubsystem.InAppPurchaseRestoreInfo
// 0x0018 (0x0018 - 0x0000)
struct FInAppPurchaseRestoreInfo final
{
public:
	class FString                                 Identifier;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReceiptData;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInAppPurchaseRestoreInfo) == 0x000004, "Wrong alignment on FInAppPurchaseRestoreInfo");
static_assert(sizeof(FInAppPurchaseRestoreInfo) == 0x000018, "Wrong size on FInAppPurchaseRestoreInfo");
static_assert(offsetof(FInAppPurchaseRestoreInfo, Identifier) == 0x000000, "Member 'FInAppPurchaseRestoreInfo::Identifier' has a wrong offset!");
static_assert(offsetof(FInAppPurchaseRestoreInfo, ReceiptData) == 0x00000C, "Member 'FInAppPurchaseRestoreInfo::ReceiptData' has a wrong offset!");

// ScriptStruct OnlineSubsystem.NamedInterfaceDef
// 0x0014 (0x0014 - 0x0000)
struct FNamedInterfaceDef final
{
public:
	class FName                                   InterfaceName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InterfaceClassName;                                // 0x0008(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNamedInterfaceDef) == 0x000004, "Wrong alignment on FNamedInterfaceDef");
static_assert(sizeof(FNamedInterfaceDef) == 0x000014, "Wrong size on FNamedInterfaceDef");
static_assert(offsetof(FNamedInterfaceDef, InterfaceName) == 0x000000, "Member 'FNamedInterfaceDef::InterfaceName' has a wrong offset!");
static_assert(offsetof(FNamedInterfaceDef, InterfaceClassName) == 0x000008, "Member 'FNamedInterfaceDef::InterfaceClassName' has a wrong offset!");

// ScriptStruct OnlineSubsystem.NamedInterface
// 0x000C (0x000C - 0x0000)
struct FNamedInterface final
{
public:
	class FName                                   InterfaceName;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InterfaceObject;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNamedInterface) == 0x000004, "Wrong alignment on FNamedInterface");
static_assert(sizeof(FNamedInterface) == 0x00000C, "Wrong size on FNamedInterface");
static_assert(offsetof(FNamedInterface, InterfaceName) == 0x000000, "Member 'FNamedInterface::InterfaceName' has a wrong offset!");
static_assert(offsetof(FNamedInterface, InterfaceObject) == 0x000008, "Member 'FNamedInterface::InterfaceObject' has a wrong offset!");

// ScriptStruct OnlineSubsystem.JoinabilitySettings
// 0x0014 (0x0014 - 0x0000)
struct FJoinabilitySettings final
{
public:
	class FName                                   SessionName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPublicSearchable;                                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowInvites;                                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bJoinViaPresence;                                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bJoinViaPresenceFriendsOnly;                       // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPartySize;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJoinabilitySettings) == 0x000004, "Wrong alignment on FJoinabilitySettings");
static_assert(sizeof(FJoinabilitySettings) == 0x000014, "Wrong size on FJoinabilitySettings");
static_assert(offsetof(FJoinabilitySettings, SessionName) == 0x000000, "Member 'FJoinabilitySettings::SessionName' has a wrong offset!");
static_assert(offsetof(FJoinabilitySettings, bPublicSearchable) == 0x000008, "Member 'FJoinabilitySettings::bPublicSearchable' has a wrong offset!");
static_assert(offsetof(FJoinabilitySettings, bAllowInvites) == 0x000009, "Member 'FJoinabilitySettings::bAllowInvites' has a wrong offset!");
static_assert(offsetof(FJoinabilitySettings, bJoinViaPresence) == 0x00000A, "Member 'FJoinabilitySettings::bJoinViaPresence' has a wrong offset!");
static_assert(offsetof(FJoinabilitySettings, bJoinViaPresenceFriendsOnly) == 0x00000B, "Member 'FJoinabilitySettings::bJoinViaPresenceFriendsOnly' has a wrong offset!");
static_assert(offsetof(FJoinabilitySettings, MaxPlayers) == 0x00000C, "Member 'FJoinabilitySettings::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FJoinabilitySettings, MaxPartySize) == 0x000010, "Member 'FJoinabilitySettings::MaxPartySize' has a wrong offset!");

}

#pragma pack(pop)
