#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerPawn_Generic

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "PlayerPawn_Generic_Parent_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayAbilities_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass PlayerPawn_Generic.PlayerPawn_Generic_C
// 0x0250 (0x0F40 - 0x0CF0)
class APlayerPawn_Generic_C : public APlayerPawn_Generic_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_PlayerPawn_Generic_C;               // 0x0CE4(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 Adrenaline_Rush_Charm;                             // 0x0CE8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USkeletalMeshComponent*                 Adrenaline_Rush_Head;                              // 0x0CEC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USkeletalMeshComponent*                 Adrenaline_Rush_Body;                              // 0x0CF0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               P_GravitySphere_rightFoot_;                        // 0x0CF4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               P_GravitySphere_leftFoot_;                         // 0x0CF8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USkeletalMeshComponent*                 Shield_CharmSkeletalMesh;                          // 0x0CFC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USkeletalMeshComponent*                 Shield_HeadSkeletalMesh;                           // 0x0D00(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USkeletalMeshComponent*                 Shield_BodySkeletalMesh;                           // 0x0D04(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Effect_Stun;                                       // 0x0D08(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   DistanceMesh;                                      // 0x0D0C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Effect_Player_Walk_FX;                             // 0x0D10(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Effect_Player_Run_FX;                              // 0x0D14(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   PlayerLightVolumetricConeMesh;                     // 0x0D18(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UAudioComponent*                        Sound_Player_Hit;                                  // 0x0D1C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UParticleSystemComponent*               Effect_Player_landed;                              // 0x0D20(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USpotLightComponent*                    PlayerLight;                                       // 0x0D24(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UPointLightComponent*                   PlayerLight1;                                      // 0x0D28(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         Full_Shield_Health_Push_6222ABB047B8F22E3C9FC983BD70CEA6; // 0x0D2C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Full_Shield_Health_Impact_6222ABB047B8F22E3C9FC983BD70CEA6; // 0x0D30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Full_Shield_Health__Direction_6222ABB047B8F22E3C9FC983BD70CEA6; // 0x0D34(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D35[0x3];                                      // 0x0D35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Full_Shield_Health;                                // 0x0D38(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Shield_DamageTimeline_Impact_6DC09F024CD096186AE1389FB8061E30; // 0x0D3C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Shield_DamageTimeline__Direction_6DC09F024CD096186AE1389FB8061E30; // 0x0D40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D41[0x3];                                      // 0x0D41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Shield_DamageTimeline;                             // 0x0D44(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Shield_Regen_Timeline_Opacity_3DC9958C47D4CEFA60E68699D92BA374; // 0x0D48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Shield_Regen_Timeline_Push_3DC9958C47D4CEFA60E68699D92BA374; // 0x0D4C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Shield_Regen_Timeline__Direction_3DC9958C47D4CEFA60E68699D92BA374; // 0x0D50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D51[0x3];                                      // 0x0D51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Shield_Regen_Timeline;                             // 0x0D54(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Shield_ShatterTimeline_Push_F3223F2D4A6B8642F950B0A15F8C6699; // 0x0D58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Shield_ShatterTimeline_Opacity_F3223F2D4A6B8642F950B0A15F8C6699; // 0x0D5C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Shield_ShatterTimeline_HighlightCracks_F3223F2D4A6B8642F950B0A15F8C6699; // 0x0D60(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Shield_ShatterTimeline__Direction_F3223F2D4A6B8642F950B0A15F8C6699; // 0x0D64(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D65[0x3];                                      // 0x0D65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Shield_ShatterTimeline;                            // 0x0D68(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         HealthSweep_SafetyOpacity_2A96303441845D0EAAAB1EB68183F8A8; // 0x0D6C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         HealthSweep_Sweep_2A96303441845D0EAAAB1EB68183F8A8; // 0x0D70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            HealthSweep__Direction_2A96303441845D0EAAAB1EB68183F8A8; // 0x0D74(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D75[0x3];                                      // 0x0D75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HealthSweep;                                       // 0x0D78(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                 ScreenEffect_PlayerHealthDamageDirection;          // 0x0D7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor)
	class UClass*                                 ScreenEffect_PlayerHealthDamage;                   // 0x0D80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 ScreenEffect_PlayerShieldDamageDirection;          // 0x0D84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                 ScreenEffect_PlayerShieldDamage;                   // 0x0D88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                 HitByHuskProjectileClass;                          // 0x0D8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             HitByHuskRangedSound;                              // 0x0D90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundBase*                             HitByHuskMeleeSound;                               // 0x0D94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               PlayerLightVolumetricConeMeshMID;                  // 0x0D98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        P_PlayerHealthDamage;                              // 0x0D9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        P_PlayerShieldDamage;                              // 0x0DA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimMontage*                           SoulSuckVictimMontage;                             // 0x0DA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                     WeaponMaterialOverride;                            // 0x0DA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PlayerSpeed;                                       // 0x0DAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Run_Dust_Activate_Speed;                           // 0x0DB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Walk_Dust_Activate_Speed;                          // 0x0DB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Walk_Dust_Reset_Speed;                             // 0x0DB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                PreviousVelocityVector;                            // 0x0DBC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanSpawnRunKickupFX_;                              // 0x0DC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanSpawnWalkKickupFX_;                             // 0x0DC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanSpawnDustLandFX_;                               // 0x0DCA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DCB[0x1];                                      // 0x0DCB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Effect_Player_WalkSplash;                          // 0x0DCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Effect_Player_RunSplash;                           // 0x0DD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Effect_Player_WalkDust_P;                          // 0x0DD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystem*                        Effect_Player_RunDust_P;                           // 0x0DD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsInWater;                                         // 0x0DDC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DDD[0x3];                                      // 0x0DDD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RunWalkDustRotation;                               // 0x0DE0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsNinjaInShadowStance_;                            // 0x0DEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DED[0x3];                                      // 0x0DED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayTagsForHitByHuskMeleeSound;                // 0x0DF0(0x0018)(Edit, BlueprintVisible)
	class UMaterialInterface*                     Adrenaline_Material;                               // 0x0E08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UMaterialInstanceDynamic*>       AdrenalineRush_HeadAnimatingMIDS;                  // 0x0E0C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       AdrenalineRush_BodyAnimatingMIDS;                  // 0x0E18(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FLinearColor                           Adrenaline_Rush_Color_Outer_Direct;                // 0x0E24(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Adrenaline_Rush_Color_Inner_Direct;                // 0x0E34(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Adrenaline_Rush_Color_Outer_Periodic;              // 0x0E44(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Adrenaline_Rush_Color_Inner_Periodic;              // 0x0E54(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Adrenaline_Rush_WPO_Offset;                        // 0x0E64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*               P_AdrenalineRushSparklesRunning;                   // 0x0E68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInterface*                     Shield_Material;                                   // 0x0E6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UMaterialInstanceDynamic*>       BodyShieldMIDArray;                                // 0x0E70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       HeadShieldMIDArray;                                // 0x0E7C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          Shield_Active;                                     // 0x0E88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E89[0x3];                                      // 0x0E89(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaterCounter;                                      // 0x0E8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DefaultShieldOpacity;                              // 0x0E90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Tick_Delta_Seconds;                                // 0x0E94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Shield_Damage_Wave_Animation;                      // 0x0E98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Overall_Shield_Damage_Wave_Animation_Length;       // 0x0E9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         size;                                              // 0x0EA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Dying;                                             // 0x0EA4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanRippleAgain;                                    // 0x0EA5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA6[0x2];                                      // 0x0EA6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Sound_Shield_Impact;                               // 0x0EA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Sound_Shield_Destroyed;                            // 0x0EAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Sound_Shield_FullyCharged;                         // 0x0EB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundBase*                             Sound_Shield_StartRecharge;                        // 0x0EB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Shield_Shatter_Opacity;                            // 0x0EB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Regen_Opacity;                                     // 0x0EBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Damage_Opacity;                                    // 0x0EC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Default_Shield_opacity;                            // 0x0EC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Shield_PushMinValue;                               // 0x0EC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShieldVisible_Hit;                                 // 0x0ECC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShieldVisible_Recover;                             // 0x0ECD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShieldVisible_Shatter;                             // 0x0ECE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShieldVisible_FullHealth;                          // 0x0ECF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Fully_Regened_Shield_health_Opacity;               // 0x0ED0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTagContainer                  TC_GameplayCueDamageShielded;                      // 0x0ED4(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          LatestDamageIsShieldDamage;                        // 0x0EEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EED[0x3];                                      // 0x0EED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Damage_Taken;                                      // 0x0EF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Last_Shield_Damage_Time;                           // 0x0EF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                 NewVar_0;                                          // 0x0EF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UMaterialInstanceDynamic*>       TempArray;                                         // 0x0EFC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UPoseableMeshComponent*                 NewVar_1;                                          // 0x0F08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USkeletalMesh*                          Pawn__Charm_Skeletal_Mesh;                         // 0x0F0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class UMaterialInstanceDynamic*>       CharmShieldMIDArray;                               // 0x0F10(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          BodyValid;                                         // 0x0F1C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BackpackValid;                                     // 0x0F1D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HatValid;                                          // 0x0F1E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FaceValid;                                         // 0x0F1F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CharmValid;                                        // 0x0F20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HeadValid;                                         // 0x0F21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F22[0x2];                                      // 0x0F22(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       AdrenalineRush_CharmAnimatingMIDS;                 // 0x0F24(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       Adrenaline_Rush_MID_Collection;                    // 0x0F30(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UMaterialInterface*                     NewVar_2;                                          // 0x0F3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_PlayerPawn_Generic(int32 EntryPoint);
	void GameplayCue_Shield_Reapplied(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Shield_FullyCharged(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Shield_Destroyed(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Damage_Shielded(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Generic_AdrenalineRush_DirectHeal(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Generic_AdrenalineRush_PeriodicHeal(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void Test_Adrenaline_Rush();
	void OnLand_CE();
	void InternalSetFirstPersonCamera(bool NewUseFirstPersonCamera);
	void Ninja_Dust_FX();
	void GameplayCue_GravitySphere(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void SetFirstPersonCamera(bool bNewUseFirstPersonCamera);
	void GameplayCue_Abilities_Activation_Generic_HarvestBuff_Tier2(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void GameplayCue_Abilities_Activation_Generic_HarvestBuff_Tier1(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void OnCharacterPartsReinitialized();
	void FootStepRight();
	void FootStepLeft();
	void ReceiveTick(float DeltaSeconds);
	void OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void Distance();
	void OnLanded(const struct FHitResult& Hit);
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void MeleeSwingLeft();
	void MeleeSwingRight();
	void Full_Shield_Health__UpdateFunc();
	void Full_Shield_Health__FinishedFunc();
	void Shield_DamageTimeline__UpdateFunc();
	void Shield_DamageTimeline__FinishedFunc();
	void Shield_ShatterTimeline__UpdateFunc();
	void Shield_ShatterTimeline__FinishedFunc();
	void Shield_Regen_Timeline__UpdateFunc();
	void Shield_Regen_Timeline__FinishedFunc();
	void HealthSweep__UpdateFunc();
	void HealthSweep__FinishedFunc();
	void UserConstructionScript();
	void Create_and_Duplicate_Effect_Skeletal_Meshes_Parent(EFortCustomPartType BodyType, class USkeletalMeshComponent*& DuplicatedSkeletalMeshComponent, class UMaterialInterface* Material_to_Apply, TArray<class UMaterialInstanceDynamic*>& Empty_MID_Array, int32 TranslucentSortPriority);
	void FindShieldOpacity();
	void SetShieldMids(float Highlight_Cracks, bool Set_Highlight_Cracks, float Push, bool Set_Push);
	void SetShieldMids_InternalLoop(float Highlight_Cracks, bool Set_Highlight_Cracks, float Push, bool Set_Push, TArray<class UMaterialInstanceDynamic*>& NewParam1);
	void SlaveAMeshToTheBody(class USkeletalMeshComponent* Mesh_0, class USkeletalMeshComponent* Master);
	void ToggleShieldVisibility();
	void Create_and_Duplicate_Effect_Poseable_Skeletal_Mesh(EFortCustomPartType BodyType, class UMaterialInterface* Material_to_Apply, TArray<class UMaterialInstanceDynamic*>& Empty_MID_Array, int32 TranslucentSortPriority, class UPoseableMeshComponent*& PoseableMesh);
	void Setup_FX_Mesh_Duplicates(class UMaterialInterface*& Material_to_Apply, TArray<class UMaterialInstanceDynamic*>& Charm_MID_Array, class USkeletalMeshComponent*& Charm_Mesh, TArray<class UMaterialInstanceDynamic*>& Head_MID_Array, class USkeletalMeshComponent*& Head_Mesh, TArray<class UMaterialInstanceDynamic*>& Body_MID_Array, class USkeletalMeshComponent*& Body_Mesh, int32 Translucent_Sort_Order);
	void Melee_Effect_Color(struct FVector* Melee_Color_Set);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerPawn_Generic_C">();
	}
	static class APlayerPawn_Generic_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerPawn_Generic_C>();
	}
};
static_assert(alignof(APlayerPawn_Generic_C) == 0x000010, "Wrong alignment on APlayerPawn_Generic_C");
static_assert(sizeof(APlayerPawn_Generic_C) == 0x000F40, "Wrong size on APlayerPawn_Generic_C");
static_assert(offsetof(APlayerPawn_Generic_C, UberGraphFrame_PlayerPawn_Generic_C) == 0x000CE4, "Member 'APlayerPawn_Generic_C::UberGraphFrame_PlayerPawn_Generic_C' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Adrenaline_Rush_Charm) == 0x000CE8, "Member 'APlayerPawn_Generic_C::Adrenaline_Rush_Charm' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Adrenaline_Rush_Head) == 0x000CEC, "Member 'APlayerPawn_Generic_C::Adrenaline_Rush_Head' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Adrenaline_Rush_Body) == 0x000CF0, "Member 'APlayerPawn_Generic_C::Adrenaline_Rush_Body' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, P_GravitySphere_rightFoot_) == 0x000CF4, "Member 'APlayerPawn_Generic_C::P_GravitySphere_rightFoot_' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, P_GravitySphere_leftFoot_) == 0x000CF8, "Member 'APlayerPawn_Generic_C::P_GravitySphere_leftFoot_' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_CharmSkeletalMesh) == 0x000CFC, "Member 'APlayerPawn_Generic_C::Shield_CharmSkeletalMesh' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_HeadSkeletalMesh) == 0x000D00, "Member 'APlayerPawn_Generic_C::Shield_HeadSkeletalMesh' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_BodySkeletalMesh) == 0x000D04, "Member 'APlayerPawn_Generic_C::Shield_BodySkeletalMesh' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Effect_Stun) == 0x000D08, "Member 'APlayerPawn_Generic_C::Effect_Stun' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, DistanceMesh) == 0x000D0C, "Member 'APlayerPawn_Generic_C::DistanceMesh' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Effect_Player_Walk_FX) == 0x000D10, "Member 'APlayerPawn_Generic_C::Effect_Player_Walk_FX' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Effect_Player_Run_FX) == 0x000D14, "Member 'APlayerPawn_Generic_C::Effect_Player_Run_FX' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, PlayerLightVolumetricConeMesh) == 0x000D18, "Member 'APlayerPawn_Generic_C::PlayerLightVolumetricConeMesh' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Sound_Player_Hit) == 0x000D1C, "Member 'APlayerPawn_Generic_C::Sound_Player_Hit' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Effect_Player_landed) == 0x000D20, "Member 'APlayerPawn_Generic_C::Effect_Player_landed' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, PlayerLight) == 0x000D24, "Member 'APlayerPawn_Generic_C::PlayerLight' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, PlayerLight1) == 0x000D28, "Member 'APlayerPawn_Generic_C::PlayerLight1' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Full_Shield_Health_Push_6222ABB047B8F22E3C9FC983BD70CEA6) == 0x000D2C, "Member 'APlayerPawn_Generic_C::Full_Shield_Health_Push_6222ABB047B8F22E3C9FC983BD70CEA6' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Full_Shield_Health_Impact_6222ABB047B8F22E3C9FC983BD70CEA6) == 0x000D30, "Member 'APlayerPawn_Generic_C::Full_Shield_Health_Impact_6222ABB047B8F22E3C9FC983BD70CEA6' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Full_Shield_Health__Direction_6222ABB047B8F22E3C9FC983BD70CEA6) == 0x000D34, "Member 'APlayerPawn_Generic_C::Full_Shield_Health__Direction_6222ABB047B8F22E3C9FC983BD70CEA6' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Full_Shield_Health) == 0x000D38, "Member 'APlayerPawn_Generic_C::Full_Shield_Health' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_DamageTimeline_Impact_6DC09F024CD096186AE1389FB8061E30) == 0x000D3C, "Member 'APlayerPawn_Generic_C::Shield_DamageTimeline_Impact_6DC09F024CD096186AE1389FB8061E30' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_DamageTimeline__Direction_6DC09F024CD096186AE1389FB8061E30) == 0x000D40, "Member 'APlayerPawn_Generic_C::Shield_DamageTimeline__Direction_6DC09F024CD096186AE1389FB8061E30' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_DamageTimeline) == 0x000D44, "Member 'APlayerPawn_Generic_C::Shield_DamageTimeline' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_Regen_Timeline_Opacity_3DC9958C47D4CEFA60E68699D92BA374) == 0x000D48, "Member 'APlayerPawn_Generic_C::Shield_Regen_Timeline_Opacity_3DC9958C47D4CEFA60E68699D92BA374' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_Regen_Timeline_Push_3DC9958C47D4CEFA60E68699D92BA374) == 0x000D4C, "Member 'APlayerPawn_Generic_C::Shield_Regen_Timeline_Push_3DC9958C47D4CEFA60E68699D92BA374' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_Regen_Timeline__Direction_3DC9958C47D4CEFA60E68699D92BA374) == 0x000D50, "Member 'APlayerPawn_Generic_C::Shield_Regen_Timeline__Direction_3DC9958C47D4CEFA60E68699D92BA374' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_Regen_Timeline) == 0x000D54, "Member 'APlayerPawn_Generic_C::Shield_Regen_Timeline' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_ShatterTimeline_Push_F3223F2D4A6B8642F950B0A15F8C6699) == 0x000D58, "Member 'APlayerPawn_Generic_C::Shield_ShatterTimeline_Push_F3223F2D4A6B8642F950B0A15F8C6699' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_ShatterTimeline_Opacity_F3223F2D4A6B8642F950B0A15F8C6699) == 0x000D5C, "Member 'APlayerPawn_Generic_C::Shield_ShatterTimeline_Opacity_F3223F2D4A6B8642F950B0A15F8C6699' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_ShatterTimeline_HighlightCracks_F3223F2D4A6B8642F950B0A15F8C6699) == 0x000D60, "Member 'APlayerPawn_Generic_C::Shield_ShatterTimeline_HighlightCracks_F3223F2D4A6B8642F950B0A15F8C6699' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_ShatterTimeline__Direction_F3223F2D4A6B8642F950B0A15F8C6699) == 0x000D64, "Member 'APlayerPawn_Generic_C::Shield_ShatterTimeline__Direction_F3223F2D4A6B8642F950B0A15F8C6699' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_ShatterTimeline) == 0x000D68, "Member 'APlayerPawn_Generic_C::Shield_ShatterTimeline' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, HealthSweep_SafetyOpacity_2A96303441845D0EAAAB1EB68183F8A8) == 0x000D6C, "Member 'APlayerPawn_Generic_C::HealthSweep_SafetyOpacity_2A96303441845D0EAAAB1EB68183F8A8' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, HealthSweep_Sweep_2A96303441845D0EAAAB1EB68183F8A8) == 0x000D70, "Member 'APlayerPawn_Generic_C::HealthSweep_Sweep_2A96303441845D0EAAAB1EB68183F8A8' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, HealthSweep__Direction_2A96303441845D0EAAAB1EB68183F8A8) == 0x000D74, "Member 'APlayerPawn_Generic_C::HealthSweep__Direction_2A96303441845D0EAAAB1EB68183F8A8' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, HealthSweep) == 0x000D78, "Member 'APlayerPawn_Generic_C::HealthSweep' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, ScreenEffect_PlayerHealthDamageDirection) == 0x000D7C, "Member 'APlayerPawn_Generic_C::ScreenEffect_PlayerHealthDamageDirection' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, ScreenEffect_PlayerHealthDamage) == 0x000D80, "Member 'APlayerPawn_Generic_C::ScreenEffect_PlayerHealthDamage' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, ScreenEffect_PlayerShieldDamageDirection) == 0x000D84, "Member 'APlayerPawn_Generic_C::ScreenEffect_PlayerShieldDamageDirection' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, ScreenEffect_PlayerShieldDamage) == 0x000D88, "Member 'APlayerPawn_Generic_C::ScreenEffect_PlayerShieldDamage' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, HitByHuskProjectileClass) == 0x000D8C, "Member 'APlayerPawn_Generic_C::HitByHuskProjectileClass' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, HitByHuskRangedSound) == 0x000D90, "Member 'APlayerPawn_Generic_C::HitByHuskRangedSound' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, HitByHuskMeleeSound) == 0x000D94, "Member 'APlayerPawn_Generic_C::HitByHuskMeleeSound' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, PlayerLightVolumetricConeMeshMID) == 0x000D98, "Member 'APlayerPawn_Generic_C::PlayerLightVolumetricConeMeshMID' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, P_PlayerHealthDamage) == 0x000D9C, "Member 'APlayerPawn_Generic_C::P_PlayerHealthDamage' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, P_PlayerShieldDamage) == 0x000DA0, "Member 'APlayerPawn_Generic_C::P_PlayerShieldDamage' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, SoulSuckVictimMontage) == 0x000DA4, "Member 'APlayerPawn_Generic_C::SoulSuckVictimMontage' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, WeaponMaterialOverride) == 0x000DA8, "Member 'APlayerPawn_Generic_C::WeaponMaterialOverride' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, PlayerSpeed) == 0x000DAC, "Member 'APlayerPawn_Generic_C::PlayerSpeed' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Run_Dust_Activate_Speed) == 0x000DB0, "Member 'APlayerPawn_Generic_C::Run_Dust_Activate_Speed' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Walk_Dust_Activate_Speed) == 0x000DB4, "Member 'APlayerPawn_Generic_C::Walk_Dust_Activate_Speed' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Walk_Dust_Reset_Speed) == 0x000DB8, "Member 'APlayerPawn_Generic_C::Walk_Dust_Reset_Speed' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, PreviousVelocityVector) == 0x000DBC, "Member 'APlayerPawn_Generic_C::PreviousVelocityVector' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, CanSpawnRunKickupFX_) == 0x000DC8, "Member 'APlayerPawn_Generic_C::CanSpawnRunKickupFX_' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, CanSpawnWalkKickupFX_) == 0x000DC9, "Member 'APlayerPawn_Generic_C::CanSpawnWalkKickupFX_' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, CanSpawnDustLandFX_) == 0x000DCA, "Member 'APlayerPawn_Generic_C::CanSpawnDustLandFX_' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Effect_Player_WalkSplash) == 0x000DCC, "Member 'APlayerPawn_Generic_C::Effect_Player_WalkSplash' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Effect_Player_RunSplash) == 0x000DD0, "Member 'APlayerPawn_Generic_C::Effect_Player_RunSplash' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Effect_Player_WalkDust_P) == 0x000DD4, "Member 'APlayerPawn_Generic_C::Effect_Player_WalkDust_P' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Effect_Player_RunDust_P) == 0x000DD8, "Member 'APlayerPawn_Generic_C::Effect_Player_RunDust_P' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, IsInWater) == 0x000DDC, "Member 'APlayerPawn_Generic_C::IsInWater' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, RunWalkDustRotation) == 0x000DE0, "Member 'APlayerPawn_Generic_C::RunWalkDustRotation' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, IsNinjaInShadowStance_) == 0x000DEC, "Member 'APlayerPawn_Generic_C::IsNinjaInShadowStance_' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, GameplayTagsForHitByHuskMeleeSound) == 0x000DF0, "Member 'APlayerPawn_Generic_C::GameplayTagsForHitByHuskMeleeSound' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Adrenaline_Material) == 0x000E08, "Member 'APlayerPawn_Generic_C::Adrenaline_Material' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, AdrenalineRush_HeadAnimatingMIDS) == 0x000E0C, "Member 'APlayerPawn_Generic_C::AdrenalineRush_HeadAnimatingMIDS' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, AdrenalineRush_BodyAnimatingMIDS) == 0x000E18, "Member 'APlayerPawn_Generic_C::AdrenalineRush_BodyAnimatingMIDS' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Adrenaline_Rush_Color_Outer_Direct) == 0x000E24, "Member 'APlayerPawn_Generic_C::Adrenaline_Rush_Color_Outer_Direct' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Adrenaline_Rush_Color_Inner_Direct) == 0x000E34, "Member 'APlayerPawn_Generic_C::Adrenaline_Rush_Color_Inner_Direct' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Adrenaline_Rush_Color_Outer_Periodic) == 0x000E44, "Member 'APlayerPawn_Generic_C::Adrenaline_Rush_Color_Outer_Periodic' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Adrenaline_Rush_Color_Inner_Periodic) == 0x000E54, "Member 'APlayerPawn_Generic_C::Adrenaline_Rush_Color_Inner_Periodic' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Adrenaline_Rush_WPO_Offset) == 0x000E64, "Member 'APlayerPawn_Generic_C::Adrenaline_Rush_WPO_Offset' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, P_AdrenalineRushSparklesRunning) == 0x000E68, "Member 'APlayerPawn_Generic_C::P_AdrenalineRushSparklesRunning' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_Material) == 0x000E6C, "Member 'APlayerPawn_Generic_C::Shield_Material' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, BodyShieldMIDArray) == 0x000E70, "Member 'APlayerPawn_Generic_C::BodyShieldMIDArray' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, HeadShieldMIDArray) == 0x000E7C, "Member 'APlayerPawn_Generic_C::HeadShieldMIDArray' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_Active) == 0x000E88, "Member 'APlayerPawn_Generic_C::Shield_Active' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, WaterCounter) == 0x000E8C, "Member 'APlayerPawn_Generic_C::WaterCounter' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, DefaultShieldOpacity) == 0x000E90, "Member 'APlayerPawn_Generic_C::DefaultShieldOpacity' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Tick_Delta_Seconds) == 0x000E94, "Member 'APlayerPawn_Generic_C::Tick_Delta_Seconds' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_Damage_Wave_Animation) == 0x000E98, "Member 'APlayerPawn_Generic_C::Shield_Damage_Wave_Animation' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Overall_Shield_Damage_Wave_Animation_Length) == 0x000E9C, "Member 'APlayerPawn_Generic_C::Overall_Shield_Damage_Wave_Animation_Length' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, size) == 0x000EA0, "Member 'APlayerPawn_Generic_C::size' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Dying) == 0x000EA4, "Member 'APlayerPawn_Generic_C::Dying' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, CanRippleAgain) == 0x000EA5, "Member 'APlayerPawn_Generic_C::CanRippleAgain' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Sound_Shield_Impact) == 0x000EA8, "Member 'APlayerPawn_Generic_C::Sound_Shield_Impact' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Sound_Shield_Destroyed) == 0x000EAC, "Member 'APlayerPawn_Generic_C::Sound_Shield_Destroyed' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Sound_Shield_FullyCharged) == 0x000EB0, "Member 'APlayerPawn_Generic_C::Sound_Shield_FullyCharged' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Sound_Shield_StartRecharge) == 0x000EB4, "Member 'APlayerPawn_Generic_C::Sound_Shield_StartRecharge' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_Shatter_Opacity) == 0x000EB8, "Member 'APlayerPawn_Generic_C::Shield_Shatter_Opacity' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Regen_Opacity) == 0x000EBC, "Member 'APlayerPawn_Generic_C::Regen_Opacity' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Damage_Opacity) == 0x000EC0, "Member 'APlayerPawn_Generic_C::Damage_Opacity' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Default_Shield_opacity) == 0x000EC4, "Member 'APlayerPawn_Generic_C::Default_Shield_opacity' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Shield_PushMinValue) == 0x000EC8, "Member 'APlayerPawn_Generic_C::Shield_PushMinValue' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, ShieldVisible_Hit) == 0x000ECC, "Member 'APlayerPawn_Generic_C::ShieldVisible_Hit' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, ShieldVisible_Recover) == 0x000ECD, "Member 'APlayerPawn_Generic_C::ShieldVisible_Recover' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, ShieldVisible_Shatter) == 0x000ECE, "Member 'APlayerPawn_Generic_C::ShieldVisible_Shatter' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, ShieldVisible_FullHealth) == 0x000ECF, "Member 'APlayerPawn_Generic_C::ShieldVisible_FullHealth' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Fully_Regened_Shield_health_Opacity) == 0x000ED0, "Member 'APlayerPawn_Generic_C::Fully_Regened_Shield_health_Opacity' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, TC_GameplayCueDamageShielded) == 0x000ED4, "Member 'APlayerPawn_Generic_C::TC_GameplayCueDamageShielded' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, LatestDamageIsShieldDamage) == 0x000EEC, "Member 'APlayerPawn_Generic_C::LatestDamageIsShieldDamage' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Damage_Taken) == 0x000EF0, "Member 'APlayerPawn_Generic_C::Damage_Taken' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Last_Shield_Damage_Time) == 0x000EF4, "Member 'APlayerPawn_Generic_C::Last_Shield_Damage_Time' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, NewVar_0) == 0x000EF8, "Member 'APlayerPawn_Generic_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, TempArray) == 0x000EFC, "Member 'APlayerPawn_Generic_C::TempArray' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, NewVar_1) == 0x000F08, "Member 'APlayerPawn_Generic_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Pawn__Charm_Skeletal_Mesh) == 0x000F0C, "Member 'APlayerPawn_Generic_C::Pawn__Charm_Skeletal_Mesh' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, CharmShieldMIDArray) == 0x000F10, "Member 'APlayerPawn_Generic_C::CharmShieldMIDArray' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, BodyValid) == 0x000F1C, "Member 'APlayerPawn_Generic_C::BodyValid' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, BackpackValid) == 0x000F1D, "Member 'APlayerPawn_Generic_C::BackpackValid' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, HatValid) == 0x000F1E, "Member 'APlayerPawn_Generic_C::HatValid' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, FaceValid) == 0x000F1F, "Member 'APlayerPawn_Generic_C::FaceValid' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, CharmValid) == 0x000F20, "Member 'APlayerPawn_Generic_C::CharmValid' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, HeadValid) == 0x000F21, "Member 'APlayerPawn_Generic_C::HeadValid' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, AdrenalineRush_CharmAnimatingMIDS) == 0x000F24, "Member 'APlayerPawn_Generic_C::AdrenalineRush_CharmAnimatingMIDS' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, Adrenaline_Rush_MID_Collection) == 0x000F30, "Member 'APlayerPawn_Generic_C::Adrenaline_Rush_MID_Collection' has a wrong offset!");
static_assert(offsetof(APlayerPawn_Generic_C, NewVar_2) == 0x000F3C, "Member 'APlayerPawn_Generic_C::NewVar_2' has a wrong offset!");

}

#pragma pack(pop)
