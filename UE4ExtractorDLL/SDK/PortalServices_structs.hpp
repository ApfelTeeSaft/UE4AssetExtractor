#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PortalServices

#include "Basic.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Enum PortalServices.EEntitlementCacheLevelRetrieved
// NumValues: 0x0004
enum class EEntitlementCacheLevelRetrieved : uint8
{
	None                                     = 0,
	Memory                                   = 1,
	Disk                                     = 2,
	EEntitlementCacheLevelRetrieved_MAX      = 3,
};

// Enum PortalServices.EEntitlementCacheLevelRequest
// NumValues: 0x0003
enum class EEntitlementCacheLevelRequest : uint8
{
	Memory                                   = 1,
	Disk                                     = 2,
	EEntitlementCacheLevelRequest_MAX        = 3,
};

// ScriptStruct PortalServices.PortalUserIsEntitledToItemResult
// 0x0010 (0x0010 - 0x0000)
struct FPortalUserIsEntitledToItemResult final
{
public:
	class FString                                 ItemId;                                            // 0x0000(0x000C)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEntitled;                                        // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EEntitlementCacheLevelRetrieved               RetrievedFromCacheLevel;                           // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPortalUserIsEntitledToItemResult) == 0x000004, "Wrong alignment on FPortalUserIsEntitledToItemResult");
static_assert(sizeof(FPortalUserIsEntitledToItemResult) == 0x000010, "Wrong size on FPortalUserIsEntitledToItemResult");
static_assert(offsetof(FPortalUserIsEntitledToItemResult, ItemId) == 0x000000, "Member 'FPortalUserIsEntitledToItemResult::ItemId' has a wrong offset!");
static_assert(offsetof(FPortalUserIsEntitledToItemResult, IsEntitled) == 0x00000C, "Member 'FPortalUserIsEntitledToItemResult::IsEntitled' has a wrong offset!");
static_assert(offsetof(FPortalUserIsEntitledToItemResult, RetrievedFromCacheLevel) == 0x00000D, "Member 'FPortalUserIsEntitledToItemResult::RetrievedFromCacheLevel' has a wrong offset!");

// ScriptStruct PortalServices.PortalUserDetails
// 0x0028 (0x0028 - 0x0000)
struct FPortalUserDetails final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x000C)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Email;                                             // 0x000C(0x000C)(Edit, NativeAccessSpecifierPublic)
	class FText                                   RealName;                                          // 0x0018(0x000C)(Edit, NativeAccessSpecifierPublic)
	bool                                          IsSignedIn;                                        // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPortalUserDetails) == 0x000004, "Wrong alignment on FPortalUserDetails");
static_assert(sizeof(FPortalUserDetails) == 0x000028, "Wrong size on FPortalUserDetails");
static_assert(offsetof(FPortalUserDetails, DisplayName) == 0x000000, "Member 'FPortalUserDetails::DisplayName' has a wrong offset!");
static_assert(offsetof(FPortalUserDetails, Email) == 0x00000C, "Member 'FPortalUserDetails::Email' has a wrong offset!");
static_assert(offsetof(FPortalUserDetails, RealName) == 0x000018, "Member 'FPortalUserDetails::RealName' has a wrong offset!");
static_assert(offsetof(FPortalUserDetails, IsSignedIn) == 0x000024, "Member 'FPortalUserDetails::IsSignedIn' has a wrong offset!");

}

#pragma pack(pop)
