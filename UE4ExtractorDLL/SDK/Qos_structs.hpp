#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Qos

#include "Basic.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Enum Qos.EQosResponseType
// NumValues: 0x0004
enum class EQosResponseType : uint8
{
	NoResponse                               = 0,
	Success                                  = 1,
	Failure                                  = 2,
	EQosResponseType_MAX                     = 3,
};

// Enum Qos.EQosCompletionResult
// NumValues: 0x0006
enum class EQosCompletionResult : uint8
{
	Invalid                                  = 0,
	Success                                  = 1,
	Cached                                   = 2,
	Failure                                  = 3,
	Canceled                                 = 4,
	EQosCompletionResult_MAX                 = 5,
};

// ScriptStruct Qos.QosSearchPass
// 0x0010 (0x0010 - 0x0000)
struct FQosSearchPass final
{
public:
	int32                                         CurrentSessionIdx;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQosSearchPass) == 0x000004, "Wrong alignment on FQosSearchPass");
static_assert(sizeof(FQosSearchPass) == 0x000010, "Wrong size on FQosSearchPass");
static_assert(offsetof(FQosSearchPass, CurrentSessionIdx) == 0x000000, "Member 'FQosSearchPass::CurrentSessionIdx' has a wrong offset!");

// ScriptStruct Qos.QosSearchState
// 0x0014 (0x0014 - 0x0000)
struct FQosSearchState final
{
public:
	class FString                                 DatacenterId;                                      // 0x0000(0x000C)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LastDatacenterIdTimestamp;                         // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQosSearchState) == 0x000004, "Wrong alignment on FQosSearchState");
static_assert(sizeof(FQosSearchState) == 0x000014, "Wrong size on FQosSearchState");
static_assert(offsetof(FQosSearchState, DatacenterId) == 0x000000, "Member 'FQosSearchState::DatacenterId' has a wrong offset!");
static_assert(offsetof(FQosSearchState, LastDatacenterIdTimestamp) == 0x00000C, "Member 'FQosSearchState::LastDatacenterIdTimestamp' has a wrong offset!");

}

#pragma pack(pop)
