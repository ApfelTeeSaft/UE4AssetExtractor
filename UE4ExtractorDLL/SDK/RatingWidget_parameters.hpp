#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RatingWidget

#include "Basic.hpp"

#include "RatingDisplayStyle_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "SlateCore_structs.hpp"
#include "FortniteUI_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK::Params
{

// Function RatingWidget.RatingWidget_C.ExecuteUbergraph_RatingWidget
// 0x0008 (0x0008 - 0x0000)
struct RatingWidget_C_ExecuteUbergraph_RatingWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RatingWidget_C_ExecuteUbergraph_RatingWidget) == 0x000004, "Wrong alignment on RatingWidget_C_ExecuteUbergraph_RatingWidget");
static_assert(sizeof(RatingWidget_C_ExecuteUbergraph_RatingWidget) == 0x000008, "Wrong size on RatingWidget_C_ExecuteUbergraph_RatingWidget");
static_assert(offsetof(RatingWidget_C_ExecuteUbergraph_RatingWidget, EntryPoint) == 0x000000, "Member 'RatingWidget_C_ExecuteUbergraph_RatingWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_ExecuteUbergraph_RatingWidget, K2Node_Event_IsDesignTime) == 0x000004, "Member 'RatingWidget_C_ExecuteUbergraph_RatingWidget::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function RatingWidget.RatingWidget_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct RatingWidget_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RatingWidget_C_PreConstruct) == 0x000001, "Wrong alignment on RatingWidget_C_PreConstruct");
static_assert(sizeof(RatingWidget_C_PreConstruct) == 0x000001, "Wrong size on RatingWidget_C_PreConstruct");
static_assert(offsetof(RatingWidget_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'RatingWidget_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function RatingWidget.RatingWidget_C.Set Rating Value
// 0x032C (0x032C - 0x0000)
struct RatingWidget_C_Set_Rating_Value final
{
public:
	int32                                         Rating;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0004(0x000C)()
	struct FSlateFontInfo                         CallFunc_GetCurrentFont_ReturnValue;               // 0x0010(0x0028)(ConstParm)
	struct FFortStateStyle                        CallFunc_GetCurrentStateStyle_ReturnValue;         // 0x0038(0x02D8)(ConstParm)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0310(0x001C)()
};
static_assert(alignof(RatingWidget_C_Set_Rating_Value) == 0x000004, "Wrong alignment on RatingWidget_C_Set_Rating_Value");
static_assert(sizeof(RatingWidget_C_Set_Rating_Value) == 0x00032C, "Wrong size on RatingWidget_C_Set_Rating_Value");
static_assert(offsetof(RatingWidget_C_Set_Rating_Value, Rating) == 0x000000, "Member 'RatingWidget_C_Set_Rating_Value::Rating' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Rating_Value, CallFunc_Conv_IntToText_ReturnValue) == 0x000004, "Member 'RatingWidget_C_Set_Rating_Value::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Rating_Value, CallFunc_GetCurrentFont_ReturnValue) == 0x000010, "Member 'RatingWidget_C_Set_Rating_Value::CallFunc_GetCurrentFont_ReturnValue' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Rating_Value, CallFunc_GetCurrentStateStyle_ReturnValue) == 0x000038, "Member 'RatingWidget_C_Set_Rating_Value::CallFunc_GetCurrentStateStyle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Rating_Value, K2Node_MakeStruct_SlateColor) == 0x000310, "Member 'RatingWidget_C_Set_Rating_Value::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function RatingWidget.RatingWidget_C.Set Icon
// 0x032C (0x032C - 0x0000)
struct RatingWidget_C_Set_Icon final
{
public:
	struct FFortMultiSizeBrush                    Icon_Brush;                                        // 0x0000(0x02B8)(Parm)
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue; // 0x02B8(0x0074)(ConstParm)
};
static_assert(alignof(RatingWidget_C_Set_Icon) == 0x000004, "Wrong alignment on RatingWidget_C_Set_Icon");
static_assert(sizeof(RatingWidget_C_Set_Icon) == 0x00032C, "Wrong size on RatingWidget_C_Set_Icon");
static_assert(offsetof(RatingWidget_C_Set_Icon, Icon_Brush) == 0x000000, "Member 'RatingWidget_C_Set_Icon::Icon_Brush' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Icon, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue) == 0x0002B8, "Member 'RatingWidget_C_Set_Icon::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue' has a wrong offset!");

// Function RatingWidget.RatingWidget_C.Set Size Box
// 0x0084 (0x0084 - 0x0000)
struct RatingWidget_C_Set_Size_Box final
{
public:
	class USizeBox*                               Size_Box;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UFortButtonStyle*                       CallFunc_GetStyle_ReturnValue;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSlateBrush                            CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue; // 0x0008(0x0074)(ConstParm)
	float                                         CallFunc_BreakVector2D_X;                          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RatingWidget_C_Set_Size_Box) == 0x000004, "Wrong alignment on RatingWidget_C_Set_Size_Box");
static_assert(sizeof(RatingWidget_C_Set_Size_Box) == 0x000084, "Wrong size on RatingWidget_C_Set_Size_Box");
static_assert(offsetof(RatingWidget_C_Set_Size_Box, Size_Box) == 0x000000, "Member 'RatingWidget_C_Set_Size_Box::Size_Box' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Size_Box, CallFunc_GetStyle_ReturnValue) == 0x000004, "Member 'RatingWidget_C_Set_Size_Box::CallFunc_GetStyle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Size_Box, CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue) == 0x000008, "Member 'RatingWidget_C_Set_Size_Box::CallFunc_GetBrushBySizeFromMultiSizeBrush_ReturnValue' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Size_Box, CallFunc_BreakVector2D_X) == 0x00007C, "Member 'RatingWidget_C_Set_Size_Box::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Size_Box, CallFunc_BreakVector2D_Y) == 0x000080, "Member 'RatingWidget_C_Set_Size_Box::CallFunc_BreakVector2D_Y' has a wrong offset!");

// Function RatingWidget.RatingWidget_C.Set Padding
// 0x0044 (0x0044 - 0x0000)
struct RatingWidget_C_Set_Padding final
{
public:
	class UFortButtonStyle*                       CallFunc_GetStyle_ReturnValue;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                CallFunc_GetMarginBySizeFromMultiSizeMargin_ReturnValue; // 0x0004(0x0010)(ConstParm)
	class USizeBoxSlot*                           K2Node_DynamicCast_AsSize_Box_Slot;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x001C(0x0010)()
	struct FMargin                                K2Node_MakeStruct_Margin2;                         // 0x002C(0x0010)()
	class UHorizontalBoxSlot*                     K2Node_DynamicCast_AsHorizontal_Box_Slot;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RatingWidget_C_Set_Padding) == 0x000004, "Wrong alignment on RatingWidget_C_Set_Padding");
static_assert(sizeof(RatingWidget_C_Set_Padding) == 0x000044, "Wrong size on RatingWidget_C_Set_Padding");
static_assert(offsetof(RatingWidget_C_Set_Padding, CallFunc_GetStyle_ReturnValue) == 0x000000, "Member 'RatingWidget_C_Set_Padding::CallFunc_GetStyle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Padding, CallFunc_GetMarginBySizeFromMultiSizeMargin_ReturnValue) == 0x000004, "Member 'RatingWidget_C_Set_Padding::CallFunc_GetMarginBySizeFromMultiSizeMargin_ReturnValue' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Padding, K2Node_DynamicCast_AsSize_Box_Slot) == 0x000014, "Member 'RatingWidget_C_Set_Padding::K2Node_DynamicCast_AsSize_Box_Slot' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Padding, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RatingWidget_C_Set_Padding::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Padding, K2Node_MakeStruct_Margin) == 0x00001C, "Member 'RatingWidget_C_Set_Padding::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Padding, K2Node_MakeStruct_Margin2) == 0x00002C, "Member 'RatingWidget_C_Set_Padding::K2Node_MakeStruct_Margin2' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Padding, K2Node_DynamicCast_AsHorizontal_Box_Slot) == 0x00003C, "Member 'RatingWidget_C_Set_Padding::K2Node_DynamicCast_AsHorizontal_Box_Slot' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Padding, K2Node_DynamicCast_bSuccess2) == 0x000040, "Member 'RatingWidget_C_Set_Padding::K2Node_DynamicCast_bSuccess2' has a wrong offset!");

// Function RatingWidget.RatingWidget_C.Set Display Style
// 0x0002 (0x0002 - 0x0000)
struct RatingWidget_C_Set_Display_Style final
{
public:
	ERatingDisplayStyle                           New_Style;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RatingWidget_C_Set_Display_Style) == 0x000001, "Wrong alignment on RatingWidget_C_Set_Display_Style");
static_assert(sizeof(RatingWidget_C_Set_Display_Style) == 0x000002, "Wrong size on RatingWidget_C_Set_Display_Style");
static_assert(offsetof(RatingWidget_C_Set_Display_Style, New_Style) == 0x000000, "Member 'RatingWidget_C_Set_Display_Style::New_Style' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Set_Display_Style, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'RatingWidget_C_Set_Display_Style::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RatingWidget.RatingWidget_C.Redraw
// 0x02D0 (0x02D0 - 0x0000)
struct RatingWidget_C_Redraw final
{
public:
	class UClass*                                 Temp_class_Variable;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UClass*                                 Temp_class_Variable2;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERatingDisplayStyle                           Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable3;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERatingDisplayStyle                           Temp_byte_Variable2;                               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FFortMultiSizeBrush                    K2Node_Select2_Default;                            // 0x0018(0x02B8)()
};
static_assert(alignof(RatingWidget_C_Redraw) == 0x000004, "Wrong alignment on RatingWidget_C_Redraw");
static_assert(sizeof(RatingWidget_C_Redraw) == 0x0002D0, "Wrong size on RatingWidget_C_Redraw");
static_assert(offsetof(RatingWidget_C_Redraw, Temp_class_Variable) == 0x000000, "Member 'RatingWidget_C_Redraw::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Redraw, Temp_class_Variable2) == 0x000004, "Member 'RatingWidget_C_Redraw::Temp_class_Variable2' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Redraw, Temp_byte_Variable) == 0x000008, "Member 'RatingWidget_C_Redraw::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Redraw, Temp_class_Variable3) == 0x00000C, "Member 'RatingWidget_C_Redraw::Temp_class_Variable3' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Redraw, Temp_byte_Variable2) == 0x000010, "Member 'RatingWidget_C_Redraw::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Redraw, K2Node_Select_Default) == 0x000014, "Member 'RatingWidget_C_Redraw::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RatingWidget_C_Redraw, K2Node_Select2_Default) == 0x000018, "Member 'RatingWidget_C_Redraw::K2Node_Select2_Default' has a wrong offset!");

}

#pragma pack(pop)
