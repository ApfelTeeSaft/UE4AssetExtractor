#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SlateCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Enum SlateCore.ESlateBrushImageType
// NumValues: 0x0004
enum class ESlateBrushImageType : uint8
{
	NoImage                                  = 0,
	FullColor                                = 1,
	Linear                                   = 2,
	ESlateBrushImageType_MAX                 = 3,
};

// Enum SlateCore.ESlateBrushMirrorType
// NumValues: 0x0005
enum class ESlateBrushMirrorType : uint8
{
	NoMirror                                 = 0,
	Horizontal                               = 1,
	Vertical                                 = 2,
	Both                                     = 3,
	ESlateBrushMirrorType_MAX                = 4,
};

// Enum SlateCore.ESlateBrushTileType
// NumValues: 0x0005
enum class ESlateBrushTileType : uint8
{
	NoTile                                   = 0,
	Horizontal                               = 1,
	Vertical                                 = 2,
	Both                                     = 3,
	ESlateBrushTileType_MAX                  = 4,
};

// Enum SlateCore.ESlateColorStylingMode
// NumValues: 0x0005
enum class ESlateColorStylingMode : uint8
{
	UseColor_Specified                       = 0,
	UseColor_Specified_Link                  = 1,
	UseColor_Foreground                      = 2,
	UseColor_Foreground_Subdued              = 3,
	UseColor_MAX                             = 4,
};

// Enum SlateCore.ESlateBrushDrawType
// NumValues: 0x0005
enum class ESlateBrushDrawType : uint8
{
	NoDrawType                               = 0,
	Box                                      = 1,
	Border                                   = 2,
	Image                                    = 3,
	ESlateBrushDrawType_MAX                  = 4,
};

// Enum SlateCore.EFontHinting
// NumValues: 0x0006
enum class EFontHinting : uint8
{
	Default                                  = 0,
	Auto                                     = 1,
	AutoLight                                = 2,
	Monochrome                               = 3,
	None                                     = 4,
	EFontHinting_MAX                         = 5,
};

// Enum SlateCore.ESelectInfo
// NumValues: 0x0005
enum class ESelectInfo : uint8
{
	OnKeyPress                               = 0,
	OnNavigation                             = 1,
	OnMouseClick                             = 2,
	Direct                                   = 3,
	ESelectInfo_MAX                          = 4,
};

// Enum SlateCore.ETextCommit
// NumValues: 0x0005
enum class ETextCommit : uint8
{
	Default                                  = 0,
	OnEnter                                  = 1,
	OnUserMovedFocus                         = 2,
	OnCleared                                = 3,
	ETextCommit_MAX                          = 4,
};

// Enum SlateCore.EScrollDirection
// NumValues: 0x0003
enum class EScrollDirection : uint8
{
	Scroll_Down                              = 0,
	Scroll_Up                                = 1,
	Scroll_MAX                               = 2,
};

// Enum SlateCore.EOrientation
// NumValues: 0x0003
enum class EOrientation : uint8
{
	Orient_Horizontal                        = 0,
	Orient_Vertical                          = 1,
	Orient_MAX                               = 2,
};

// Enum SlateCore.EMenuPlacement
// NumValues: 0x000C
enum class EMenuPlacement : uint8
{
	MenuPlacement_BelowAnchor                = 0,
	MenuPlacement_CenteredBelowAnchor        = 1,
	MenuPlacement_BelowRightAnchor           = 2,
	MenuPlacement_ComboBox                   = 3,
	MenuPlacement_ComboBoxRight              = 4,
	MenuPlacement_MenuRight                  = 5,
	MenuPlacement_AboveAnchor                = 6,
	MenuPlacement_CenteredAboveAnchor        = 7,
	MenuPlacement_AboveRightAnchor           = 8,
	MenuPlacement_MenuLeft                   = 9,
	MenuPlacement_Center                     = 10,
	MenuPlacement_MAX                        = 11,
};

// Enum SlateCore.EVerticalAlignment
// NumValues: 0x0005
enum class EVerticalAlignment : uint8
{
	VAlign_Fill                              = 0,
	VAlign_Top                               = 1,
	VAlign_Center                            = 2,
	VAlign_Bottom                            = 3,
	VAlign_MAX                               = 4,
};

// Enum SlateCore.EHorizontalAlignment
// NumValues: 0x0005
enum class EHorizontalAlignment : uint8
{
	HAlign_Fill                              = 0,
	HAlign_Left                              = 1,
	HAlign_Center                            = 2,
	HAlign_Right                             = 3,
	HAlign_MAX                               = 4,
};

// Enum SlateCore.EUINavigation
// NumValues: 0x0009
enum class EUINavigation : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	Up                                       = 2,
	Down                                     = 3,
	Next                                     = 4,
	Previous                                 = 5,
	Num                                      = 6,
	Invalid                                  = 7,
	EUINavigation_MAX                        = 8,
};

// Enum SlateCore.EButtonPressMethod
// NumValues: 0x0004
enum class EButtonPressMethod : uint8
{
	DownAndUp                                = 0,
	ButtonPress                              = 1,
	ButtonRelease                            = 2,
	EButtonPressMethod_MAX                   = 3,
};

// Enum SlateCore.EButtonTouchMethod
// NumValues: 0x0003
enum class EButtonTouchMethod : uint8
{
	DownAndUp                                = 0,
	PreciseTap                               = 1,
	EButtonTouchMethod_MAX                   = 2,
};

// Enum SlateCore.EButtonClickMethod
// NumValues: 0x0005
enum class EButtonClickMethod : uint8
{
	DownAndUp                                = 0,
	MouseDown                                = 1,
	MouseUp                                  = 2,
	PreciseClick                             = 3,
	EButtonClickMethod_MAX                   = 4,
};

// Enum SlateCore.EFontFallback
// NumValues: 0x0004
enum class EFontFallback : uint8
{
	FF_NoFallback                            = 0,
	FF_LocalizedFallback                     = 1,
	FF_LastResortFallback                    = 2,
	FF_Max                                   = 3,
};

// Enum SlateCore.ECheckBoxState
// NumValues: 0x0004
enum class ECheckBoxState : uint8
{
	Unchecked                                = 0,
	Checked                                  = 1,
	Undetermined                             = 2,
	ECheckBoxState_MAX                       = 3,
};

// Enum SlateCore.ESlateCheckBoxType
// NumValues: 0x0003
enum class ESlateCheckBoxType : uint8
{
	CheckBox                                 = 0,
	ToggleButton                             = 1,
	ESlateCheckBoxType_MAX                   = 2,
};

// Enum SlateCore.EConsumeMouseWheel
// NumValues: 0x0004
enum class EConsumeMouseWheel : uint8
{
	WhenScrollingPossible                    = 0,
	Always                                   = 1,
	Never                                    = 2,
	EConsumeMouseWheel_MAX                   = 3,
};

// Enum SlateCore.ETextShapingMethod
// NumValues: 0x0004
enum class ETextShapingMethod : uint8
{
	Auto                                     = 0,
	KerningOnly                              = 1,
	FullShaping                              = 2,
	ETextShapingMethod_MAX                   = 3,
};

// Enum SlateCore.EFocusCause
// NumValues: 0x0007
enum class EFocusCause : uint8
{
	Mouse                                    = 0,
	Navigation                               = 1,
	SetDirectly                              = 2,
	Cleared                                  = 3,
	OtherWidgetLostFocus                     = 4,
	WindowActivate                           = 5,
	EFocusCause_MAX                          = 6,
};

// Enum SlateCore.EUINavigationRule
// NumValues: 0x0007
enum class EUINavigationRule : uint8
{
	Escape                                   = 0,
	Explicit                                 = 1,
	Wrap                                     = 2,
	Stop                                     = 3,
	Custom                                   = 4,
	Invalid                                  = 5,
	EUINavigationRule_MAX                    = 6,
};

// ScriptStruct SlateCore.Margin
// 0x0010 (0x0010 - 0x0000)
struct FMargin final
{
public:
	float                                         Left;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Top;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Right;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bottom;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMargin) == 0x000004, "Wrong alignment on FMargin");
static_assert(sizeof(FMargin) == 0x000010, "Wrong size on FMargin");
static_assert(offsetof(FMargin, Left) == 0x000000, "Member 'FMargin::Left' has a wrong offset!");
static_assert(offsetof(FMargin, Top) == 0x000004, "Member 'FMargin::Top' has a wrong offset!");
static_assert(offsetof(FMargin, Right) == 0x000008, "Member 'FMargin::Right' has a wrong offset!");
static_assert(offsetof(FMargin, Bottom) == 0x00000C, "Member 'FMargin::Bottom' has a wrong offset!");

// ScriptStruct SlateCore.SlateColor
// 0x001C (0x001C - 0x0000)
struct FSlateColor final
{
public:
	struct FLinearColor                           SpecifiedColor;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	ESlateColorStylingMode                        ColorUseRule;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11[0xB];                                       // 0x0011(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlateColor) == 0x000004, "Wrong alignment on FSlateColor");
static_assert(sizeof(FSlateColor) == 0x00001C, "Wrong size on FSlateColor");
static_assert(offsetof(FSlateColor, SpecifiedColor) == 0x000000, "Member 'FSlateColor::SpecifiedColor' has a wrong offset!");
static_assert(offsetof(FSlateColor, ColorUseRule) == 0x000010, "Member 'FSlateColor::ColorUseRule' has a wrong offset!");

// ScriptStruct SlateCore.SlateBrush
// 0x0074 (0x0074 - 0x0000)
struct FSlateBrush final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ImageSize;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ESlateBrushDrawType                           DrawAs;                                            // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Margin;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           Tint;                                              // 0x0020(0x0010)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateColor                            TintColor;                                         // 0x0030(0x001C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ESlateBrushTileType                           Tiling;                                            // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateBrushMirrorType                         Mirroring;                                         // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateBrushImageType                          ImageType;                                         // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ResourceObject;                                    // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ResourceName;                                      // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDynamicallyLoaded;                              // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bHasUObject;                                       // 0x005D(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox2D                                 UVRegion;                                          // 0x0060(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSlateBrush) == 0x000004, "Wrong alignment on FSlateBrush");
static_assert(sizeof(FSlateBrush) == 0x000074, "Wrong size on FSlateBrush");
static_assert(offsetof(FSlateBrush, ImageSize) == 0x000004, "Member 'FSlateBrush::ImageSize' has a wrong offset!");
static_assert(offsetof(FSlateBrush, DrawAs) == 0x00000C, "Member 'FSlateBrush::DrawAs' has a wrong offset!");
static_assert(offsetof(FSlateBrush, Margin) == 0x000010, "Member 'FSlateBrush::Margin' has a wrong offset!");
static_assert(offsetof(FSlateBrush, Tint) == 0x000020, "Member 'FSlateBrush::Tint' has a wrong offset!");
static_assert(offsetof(FSlateBrush, TintColor) == 0x000030, "Member 'FSlateBrush::TintColor' has a wrong offset!");
static_assert(offsetof(FSlateBrush, Tiling) == 0x00004C, "Member 'FSlateBrush::Tiling' has a wrong offset!");
static_assert(offsetof(FSlateBrush, Mirroring) == 0x00004D, "Member 'FSlateBrush::Mirroring' has a wrong offset!");
static_assert(offsetof(FSlateBrush, ImageType) == 0x00004E, "Member 'FSlateBrush::ImageType' has a wrong offset!");
static_assert(offsetof(FSlateBrush, ResourceObject) == 0x000050, "Member 'FSlateBrush::ResourceObject' has a wrong offset!");
static_assert(offsetof(FSlateBrush, ResourceName) == 0x000054, "Member 'FSlateBrush::ResourceName' has a wrong offset!");
static_assert(offsetof(FSlateBrush, bIsDynamicallyLoaded) == 0x00005C, "Member 'FSlateBrush::bIsDynamicallyLoaded' has a wrong offset!");
static_assert(offsetof(FSlateBrush, bHasUObject) == 0x00005D, "Member 'FSlateBrush::bHasUObject' has a wrong offset!");
static_assert(offsetof(FSlateBrush, UVRegion) == 0x000060, "Member 'FSlateBrush::UVRegion' has a wrong offset!");

// ScriptStruct SlateCore.SlateWidgetStyle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FSlateWidgetStyle
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlateWidgetStyle) == 0x000004, "Wrong alignment on FSlateWidgetStyle");
static_assert(sizeof(FSlateWidgetStyle) == 0x000004, "Wrong size on FSlateWidgetStyle");

// ScriptStruct SlateCore.TableColumnHeaderStyle
// 0x0414 (0x0418 - 0x0004)
struct FTableColumnHeaderStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            SortPrimaryAscendingImage;                         // 0x0004(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SortPrimaryDescendingImage;                        // 0x0078(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SortSecondaryAscendingImage;                       // 0x00EC(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            SortSecondaryDescendingImage;                      // 0x0160(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalBrush;                                       // 0x01D4(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredBrush;                                      // 0x0248(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MenuDropdownImage;                                 // 0x02BC(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MenuDropdownNormalBorderBrush;                     // 0x0330(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MenuDropdownHoveredBorderBrush;                    // 0x03A4(0x0074)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTableColumnHeaderStyle) == 0x000004, "Wrong alignment on FTableColumnHeaderStyle");
static_assert(sizeof(FTableColumnHeaderStyle) == 0x000418, "Wrong size on FTableColumnHeaderStyle");
static_assert(offsetof(FTableColumnHeaderStyle, SortPrimaryAscendingImage) == 0x000004, "Member 'FTableColumnHeaderStyle::SortPrimaryAscendingImage' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, SortPrimaryDescendingImage) == 0x000078, "Member 'FTableColumnHeaderStyle::SortPrimaryDescendingImage' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, SortSecondaryAscendingImage) == 0x0000EC, "Member 'FTableColumnHeaderStyle::SortSecondaryAscendingImage' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, SortSecondaryDescendingImage) == 0x000160, "Member 'FTableColumnHeaderStyle::SortSecondaryDescendingImage' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, NormalBrush) == 0x0001D4, "Member 'FTableColumnHeaderStyle::NormalBrush' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, HoveredBrush) == 0x000248, "Member 'FTableColumnHeaderStyle::HoveredBrush' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, MenuDropdownImage) == 0x0002BC, "Member 'FTableColumnHeaderStyle::MenuDropdownImage' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush) == 0x000330, "Member 'FTableColumnHeaderStyle::MenuDropdownNormalBorderBrush' has a wrong offset!");
static_assert(offsetof(FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush) == 0x0003A4, "Member 'FTableColumnHeaderStyle::MenuDropdownHoveredBorderBrush' has a wrong offset!");

// ScriptStruct SlateCore.SplitterStyle
// 0x00E8 (0x00EC - 0x0004)
struct FSplitterStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            HandleNormalBrush;                                 // 0x0004(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HandleHighlightBrush;                              // 0x0078(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSplitterStyle) == 0x000004, "Wrong alignment on FSplitterStyle");
static_assert(sizeof(FSplitterStyle) == 0x0000EC, "Wrong size on FSplitterStyle");
static_assert(offsetof(FSplitterStyle, HandleNormalBrush) == 0x000004, "Member 'FSplitterStyle::HandleNormalBrush' has a wrong offset!");
static_assert(offsetof(FSplitterStyle, HandleHighlightBrush) == 0x000078, "Member 'FSplitterStyle::HandleHighlightBrush' has a wrong offset!");

// ScriptStruct SlateCore.HeaderRowStyle
// 0x09AC (0x09B0 - 0x0004)
struct FHeaderRowStyle final : public FSlateWidgetStyle
{
public:
	struct FTableColumnHeaderStyle                ColumnStyle;                                       // 0x0004(0x0418)(Edit, NativeAccessSpecifierPublic)
	struct FTableColumnHeaderStyle                LastColumnStyle;                                   // 0x041C(0x0418)(Edit, NativeAccessSpecifierPublic)
	struct FSplitterStyle                         ColumnSplitterStyle;                               // 0x0834(0x00EC)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0920(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x0994(0x001C)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeaderRowStyle) == 0x000004, "Wrong alignment on FHeaderRowStyle");
static_assert(sizeof(FHeaderRowStyle) == 0x0009B0, "Wrong size on FHeaderRowStyle");
static_assert(offsetof(FHeaderRowStyle, ColumnStyle) == 0x000004, "Member 'FHeaderRowStyle::ColumnStyle' has a wrong offset!");
static_assert(offsetof(FHeaderRowStyle, LastColumnStyle) == 0x00041C, "Member 'FHeaderRowStyle::LastColumnStyle' has a wrong offset!");
static_assert(offsetof(FHeaderRowStyle, ColumnSplitterStyle) == 0x000834, "Member 'FHeaderRowStyle::ColumnSplitterStyle' has a wrong offset!");
static_assert(offsetof(FHeaderRowStyle, BackgroundBrush) == 0x000920, "Member 'FHeaderRowStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FHeaderRowStyle, ForegroundColor) == 0x000994, "Member 'FHeaderRowStyle::ForegroundColor' has a wrong offset!");

// ScriptStruct SlateCore.ScrollBoxStyle
// 0x01D0 (0x01D4 - 0x0004)
struct FScrollBoxStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            TopShadowBrush;                                    // 0x0004(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BottomShadowBrush;                                 // 0x0078(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LeftShadowBrush;                                   // 0x00EC(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            RightShadowBrush;                                  // 0x0160(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScrollBoxStyle) == 0x000004, "Wrong alignment on FScrollBoxStyle");
static_assert(sizeof(FScrollBoxStyle) == 0x0001D4, "Wrong size on FScrollBoxStyle");
static_assert(offsetof(FScrollBoxStyle, TopShadowBrush) == 0x000004, "Member 'FScrollBoxStyle::TopShadowBrush' has a wrong offset!");
static_assert(offsetof(FScrollBoxStyle, BottomShadowBrush) == 0x000078, "Member 'FScrollBoxStyle::BottomShadowBrush' has a wrong offset!");
static_assert(offsetof(FScrollBoxStyle, LeftShadowBrush) == 0x0000EC, "Member 'FScrollBoxStyle::LeftShadowBrush' has a wrong offset!");
static_assert(offsetof(FScrollBoxStyle, RightShadowBrush) == 0x000160, "Member 'FScrollBoxStyle::RightShadowBrush' has a wrong offset!");

// ScriptStruct SlateCore.InputEvent
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FInputEvent
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputEvent) == 0x000004, "Wrong alignment on FInputEvent");
static_assert(sizeof(FInputEvent) == 0x00001C, "Wrong size on FInputEvent");

// ScriptStruct SlateCore.PointerEvent
// 0x0044 (0x0060 - 0x001C)
struct FPointerEvent final : public FInputEvent
{
public:
	uint8                                         Pad_1C[0x44];                                      // 0x001C(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPointerEvent) == 0x000004, "Wrong alignment on FPointerEvent");
static_assert(sizeof(FPointerEvent) == 0x000060, "Wrong size on FPointerEvent");

// ScriptStruct SlateCore.FontData
// 0x0020 (0x0020 - 0x0000)
struct FFontData final
{
public:
	class FString                                 FontFilename;                                      // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFontBulkData*                          BulkDataPtr;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFontHinting                                  Hinting;                                           // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 FontData;                                          // 0x0014(0x000C)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFontData) == 0x000004, "Wrong alignment on FFontData");
static_assert(sizeof(FFontData) == 0x000020, "Wrong size on FFontData");
static_assert(offsetof(FFontData, FontFilename) == 0x000000, "Member 'FFontData::FontFilename' has a wrong offset!");
static_assert(offsetof(FFontData, BulkDataPtr) == 0x00000C, "Member 'FFontData::BulkDataPtr' has a wrong offset!");
static_assert(offsetof(FFontData, Hinting) == 0x000010, "Member 'FFontData::Hinting' has a wrong offset!");
static_assert(offsetof(FFontData, FontData) == 0x000014, "Member 'FFontData::FontData' has a wrong offset!");

// ScriptStruct SlateCore.TypefaceEntry
// 0x0028 (0x0028 - 0x0000)
struct FTypefaceEntry final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFontData                              Font;                                              // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypefaceEntry) == 0x000004, "Wrong alignment on FTypefaceEntry");
static_assert(sizeof(FTypefaceEntry) == 0x000028, "Wrong size on FTypefaceEntry");
static_assert(offsetof(FTypefaceEntry, Name) == 0x000000, "Member 'FTypefaceEntry::Name' has a wrong offset!");
static_assert(offsetof(FTypefaceEntry, Font) == 0x000008, "Member 'FTypefaceEntry::Font' has a wrong offset!");

// ScriptStruct SlateCore.Typeface
// 0x000C (0x000C - 0x0000)
struct FTypeface final
{
public:
	TArray<struct FTypefaceEntry>                 Fonts;                                             // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypeface) == 0x000004, "Wrong alignment on FTypeface");
static_assert(sizeof(FTypeface) == 0x00000C, "Wrong size on FTypeface");
static_assert(offsetof(FTypeface, Fonts) == 0x000000, "Member 'FTypeface::Fonts' has a wrong offset!");

// ScriptStruct SlateCore.KeyEvent
// 0x0018 (0x0034 - 0x001C)
struct FKeyEvent : public FInputEvent
{
public:
	uint8                                         Pad_1C[0x18];                                      // 0x001C(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKeyEvent) == 0x000004, "Wrong alignment on FKeyEvent");
static_assert(sizeof(FKeyEvent) == 0x000034, "Wrong size on FKeyEvent");

// ScriptStruct SlateCore.Geometry
// 0x0034 (0x0034 - 0x0000)
struct alignas(0x04) FGeometry final
{
public:
	uint8                                         Pad_0[0x34];                                       // 0x0000(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeometry) == 0x000004, "Wrong alignment on FGeometry");
static_assert(sizeof(FGeometry) == 0x000034, "Wrong size on FGeometry");

// ScriptStruct SlateCore.SlateSound
// 0x0014 (0x0014 - 0x0000)
struct FSlateSound final
{
public:
	class UObject*                                ResourceObject;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4[0x10];                                       // 0x0004(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlateSound) == 0x000004, "Wrong alignment on FSlateSound");
static_assert(sizeof(FSlateSound) == 0x000014, "Wrong size on FSlateSound");
static_assert(offsetof(FSlateSound, ResourceObject) == 0x000000, "Member 'FSlateSound::ResourceObject' has a wrong offset!");

// ScriptStruct SlateCore.ButtonStyle
// 0x0228 (0x022C - 0x0004)
struct FButtonStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            Normal;                                            // 0x0004(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Hovered;                                           // 0x0078(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Pressed;                                           // 0x00EC(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Disabled;                                          // 0x0160(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                NormalPadding;                                     // 0x01D4(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                PressedPadding;                                    // 0x01E4(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateSound                            PressedSlateSound;                                 // 0x01F4(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateSound                            HoveredSlateSound;                                 // 0x0208(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   PressedSound;                                      // 0x021C(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HoveredSound;                                      // 0x0224(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FButtonStyle) == 0x000004, "Wrong alignment on FButtonStyle");
static_assert(sizeof(FButtonStyle) == 0x00022C, "Wrong size on FButtonStyle");
static_assert(offsetof(FButtonStyle, Normal) == 0x000004, "Member 'FButtonStyle::Normal' has a wrong offset!");
static_assert(offsetof(FButtonStyle, Hovered) == 0x000078, "Member 'FButtonStyle::Hovered' has a wrong offset!");
static_assert(offsetof(FButtonStyle, Pressed) == 0x0000EC, "Member 'FButtonStyle::Pressed' has a wrong offset!");
static_assert(offsetof(FButtonStyle, Disabled) == 0x000160, "Member 'FButtonStyle::Disabled' has a wrong offset!");
static_assert(offsetof(FButtonStyle, NormalPadding) == 0x0001D4, "Member 'FButtonStyle::NormalPadding' has a wrong offset!");
static_assert(offsetof(FButtonStyle, PressedPadding) == 0x0001E4, "Member 'FButtonStyle::PressedPadding' has a wrong offset!");
static_assert(offsetof(FButtonStyle, PressedSlateSound) == 0x0001F4, "Member 'FButtonStyle::PressedSlateSound' has a wrong offset!");
static_assert(offsetof(FButtonStyle, HoveredSlateSound) == 0x000208, "Member 'FButtonStyle::HoveredSlateSound' has a wrong offset!");
static_assert(offsetof(FButtonStyle, PressedSound) == 0x00021C, "Member 'FButtonStyle::PressedSound' has a wrong offset!");
static_assert(offsetof(FButtonStyle, HoveredSound) == 0x000224, "Member 'FButtonStyle::HoveredSound' has a wrong offset!");

// ScriptStruct SlateCore.SlateFontInfo
// 0x0028 (0x0028 - 0x0000)
struct FSlateFontInfo final
{
public:
	class UObject*                                FontObject;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                FontMaterial;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TypefaceFontName;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FontName;                                          // 0x001C(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFontHinting                                  Hinting;                                           // 0x0024(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSlateFontInfo) == 0x000004, "Wrong alignment on FSlateFontInfo");
static_assert(sizeof(FSlateFontInfo) == 0x000028, "Wrong size on FSlateFontInfo");
static_assert(offsetof(FSlateFontInfo, FontObject) == 0x000000, "Member 'FSlateFontInfo::FontObject' has a wrong offset!");
static_assert(offsetof(FSlateFontInfo, FontMaterial) == 0x000004, "Member 'FSlateFontInfo::FontMaterial' has a wrong offset!");
static_assert(offsetof(FSlateFontInfo, TypefaceFontName) == 0x000010, "Member 'FSlateFontInfo::TypefaceFontName' has a wrong offset!");
static_assert(offsetof(FSlateFontInfo, Size) == 0x000018, "Member 'FSlateFontInfo::Size' has a wrong offset!");
static_assert(offsetof(FSlateFontInfo, FontName) == 0x00001C, "Member 'FSlateFontInfo::FontName' has a wrong offset!");
static_assert(offsetof(FSlateFontInfo, Hinting) == 0x000024, "Member 'FSlateFontInfo::Hinting' has a wrong offset!");

// ScriptStruct SlateCore.TextBlockStyle
// 0x00FC (0x0100 - 0x0004)
struct FTextBlockStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0004(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x002C(0x001C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColorAndOpacity;                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateColor                            SelectedBackgroundColor;                           // 0x0060(0x001C)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           HighlightColor;                                    // 0x007C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HighlightShape;                                    // 0x008C(0x0074)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTextBlockStyle) == 0x000004, "Wrong alignment on FTextBlockStyle");
static_assert(sizeof(FTextBlockStyle) == 0x000100, "Wrong size on FTextBlockStyle");
static_assert(offsetof(FTextBlockStyle, Font) == 0x000004, "Member 'FTextBlockStyle::Font' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, ColorAndOpacity) == 0x00002C, "Member 'FTextBlockStyle::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, ShadowOffset) == 0x000048, "Member 'FTextBlockStyle::ShadowOffset' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, ShadowColorAndOpacity) == 0x000050, "Member 'FTextBlockStyle::ShadowColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, SelectedBackgroundColor) == 0x000060, "Member 'FTextBlockStyle::SelectedBackgroundColor' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, HighlightColor) == 0x00007C, "Member 'FTextBlockStyle::HighlightColor' has a wrong offset!");
static_assert(offsetof(FTextBlockStyle, HighlightShape) == 0x00008C, "Member 'FTextBlockStyle::HighlightShape' has a wrong offset!");

// ScriptStruct SlateCore.HyperlinkStyle
// 0x033C (0x0340 - 0x0004)
struct FHyperlinkStyle final : public FSlateWidgetStyle
{
public:
	struct FButtonStyle                           UnderlineStyle;                                    // 0x0004(0x022C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TextStyle;                                         // 0x0230(0x0100)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x0330(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHyperlinkStyle) == 0x000004, "Wrong alignment on FHyperlinkStyle");
static_assert(sizeof(FHyperlinkStyle) == 0x000340, "Wrong size on FHyperlinkStyle");
static_assert(offsetof(FHyperlinkStyle, UnderlineStyle) == 0x000004, "Member 'FHyperlinkStyle::UnderlineStyle' has a wrong offset!");
static_assert(offsetof(FHyperlinkStyle, TextStyle) == 0x000230, "Member 'FHyperlinkStyle::TextStyle' has a wrong offset!");
static_assert(offsetof(FHyperlinkStyle, Padding) == 0x000330, "Member 'FHyperlinkStyle::Padding' has a wrong offset!");

// ScriptStruct SlateCore.ComboButtonStyle
// 0x0324 (0x0328 - 0x0004)
struct FComboButtonStyle final : public FSlateWidgetStyle
{
public:
	struct FButtonStyle                           ButtonStyle;                                       // 0x0004(0x022C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DownArrowImage;                                    // 0x0230(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MenuBorderBrush;                                   // 0x02A4(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                MenuBorderPadding;                                 // 0x0318(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComboButtonStyle) == 0x000004, "Wrong alignment on FComboButtonStyle");
static_assert(sizeof(FComboButtonStyle) == 0x000328, "Wrong size on FComboButtonStyle");
static_assert(offsetof(FComboButtonStyle, ButtonStyle) == 0x000004, "Member 'FComboButtonStyle::ButtonStyle' has a wrong offset!");
static_assert(offsetof(FComboButtonStyle, DownArrowImage) == 0x000230, "Member 'FComboButtonStyle::DownArrowImage' has a wrong offset!");
static_assert(offsetof(FComboButtonStyle, MenuBorderBrush) == 0x0002A4, "Member 'FComboButtonStyle::MenuBorderBrush' has a wrong offset!");
static_assert(offsetof(FComboButtonStyle, MenuBorderPadding) == 0x000318, "Member 'FComboButtonStyle::MenuBorderPadding' has a wrong offset!");

// ScriptStruct SlateCore.ComboBoxStyle
// 0x0360 (0x0364 - 0x0004)
struct FComboBoxStyle final : public FSlateWidgetStyle
{
public:
	struct FComboButtonStyle                      ComboButtonStyle;                                  // 0x0004(0x0328)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateSound                            PressedSlateSound;                                 // 0x032C(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateSound                            SelectionChangeSlateSound;                         // 0x0340(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   PressedSound;                                      // 0x0354(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SelectionChangeSound;                              // 0x035C(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FComboBoxStyle) == 0x000004, "Wrong alignment on FComboBoxStyle");
static_assert(sizeof(FComboBoxStyle) == 0x000364, "Wrong size on FComboBoxStyle");
static_assert(offsetof(FComboBoxStyle, ComboButtonStyle) == 0x000004, "Member 'FComboBoxStyle::ComboButtonStyle' has a wrong offset!");
static_assert(offsetof(FComboBoxStyle, PressedSlateSound) == 0x00032C, "Member 'FComboBoxStyle::PressedSlateSound' has a wrong offset!");
static_assert(offsetof(FComboBoxStyle, SelectionChangeSlateSound) == 0x000340, "Member 'FComboBoxStyle::SelectionChangeSlateSound' has a wrong offset!");
static_assert(offsetof(FComboBoxStyle, PressedSound) == 0x000354, "Member 'FComboBoxStyle::PressedSound' has a wrong offset!");
static_assert(offsetof(FComboBoxStyle, SelectionChangeSound) == 0x00035C, "Member 'FComboBoxStyle::SelectionChangeSound' has a wrong offset!");

// ScriptStruct SlateCore.EditableTextStyle
// 0x01A0 (0x01A4 - 0x0004)
struct FEditableTextStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateFontInfo                         Font;                                              // 0x0004(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorAndOpacity;                                   // 0x002C(0x001C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundImageSelected;                           // 0x0048(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundImageComposing;                          // 0x00BC(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CaretImage;                                        // 0x0130(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEditableTextStyle) == 0x000004, "Wrong alignment on FEditableTextStyle");
static_assert(sizeof(FEditableTextStyle) == 0x0001A4, "Wrong size on FEditableTextStyle");
static_assert(offsetof(FEditableTextStyle, Font) == 0x000004, "Member 'FEditableTextStyle::Font' has a wrong offset!");
static_assert(offsetof(FEditableTextStyle, ColorAndOpacity) == 0x00002C, "Member 'FEditableTextStyle::ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(FEditableTextStyle, BackgroundImageSelected) == 0x000048, "Member 'FEditableTextStyle::BackgroundImageSelected' has a wrong offset!");
static_assert(offsetof(FEditableTextStyle, BackgroundImageComposing) == 0x0000BC, "Member 'FEditableTextStyle::BackgroundImageComposing' has a wrong offset!");
static_assert(offsetof(FEditableTextStyle, CaretImage) == 0x000130, "Member 'FEditableTextStyle::CaretImage' has a wrong offset!");

// ScriptStruct SlateCore.ScrollBarStyle
// 0x0414 (0x0418 - 0x0004)
struct FScrollBarStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            HorizontalBackgroundImage;                         // 0x0004(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            VerticalBackgroundImage;                           // 0x0078(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            VerticalTopSlotImage;                              // 0x00EC(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HorizontalTopSlotImage;                            // 0x0160(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            VerticalBottomSlotImage;                           // 0x01D4(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HorizontalBottomSlotImage;                         // 0x0248(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalThumbImage;                                  // 0x02BC(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredThumbImage;                                 // 0x0330(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DraggedThumbImage;                                 // 0x03A4(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScrollBarStyle) == 0x000004, "Wrong alignment on FScrollBarStyle");
static_assert(sizeof(FScrollBarStyle) == 0x000418, "Wrong size on FScrollBarStyle");
static_assert(offsetof(FScrollBarStyle, HorizontalBackgroundImage) == 0x000004, "Member 'FScrollBarStyle::HorizontalBackgroundImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, VerticalBackgroundImage) == 0x000078, "Member 'FScrollBarStyle::VerticalBackgroundImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, VerticalTopSlotImage) == 0x0000EC, "Member 'FScrollBarStyle::VerticalTopSlotImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, HorizontalTopSlotImage) == 0x000160, "Member 'FScrollBarStyle::HorizontalTopSlotImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, VerticalBottomSlotImage) == 0x0001D4, "Member 'FScrollBarStyle::VerticalBottomSlotImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, HorizontalBottomSlotImage) == 0x000248, "Member 'FScrollBarStyle::HorizontalBottomSlotImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, NormalThumbImage) == 0x0002BC, "Member 'FScrollBarStyle::NormalThumbImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, HoveredThumbImage) == 0x000330, "Member 'FScrollBarStyle::HoveredThumbImage' has a wrong offset!");
static_assert(offsetof(FScrollBarStyle, DraggedThumbImage) == 0x0003A4, "Member 'FScrollBarStyle::DraggedThumbImage' has a wrong offset!");

// ScriptStruct SlateCore.EditableTextBoxStyle
// 0x0694 (0x0698 - 0x0004)
struct FEditableTextBoxStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            BackgroundImageNormal;                             // 0x0004(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundImageHovered;                            // 0x0078(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundImageFocused;                            // 0x00EC(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundImageReadOnly;                           // 0x0160(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x01D4(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x01E4(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x020C(0x001C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            BackgroundColor;                                   // 0x0228(0x001C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            ReadOnlyForegroundColor;                           // 0x0244(0x001C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                HScrollBarPadding;                                 // 0x0260(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                VScrollBarPadding;                                 // 0x0270(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FScrollBarStyle                        ScrollBarStyle;                                    // 0x0280(0x0418)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEditableTextBoxStyle) == 0x000004, "Wrong alignment on FEditableTextBoxStyle");
static_assert(sizeof(FEditableTextBoxStyle) == 0x000698, "Wrong size on FEditableTextBoxStyle");
static_assert(offsetof(FEditableTextBoxStyle, BackgroundImageNormal) == 0x000004, "Member 'FEditableTextBoxStyle::BackgroundImageNormal' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, BackgroundImageHovered) == 0x000078, "Member 'FEditableTextBoxStyle::BackgroundImageHovered' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, BackgroundImageFocused) == 0x0000EC, "Member 'FEditableTextBoxStyle::BackgroundImageFocused' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, BackgroundImageReadOnly) == 0x000160, "Member 'FEditableTextBoxStyle::BackgroundImageReadOnly' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, Padding) == 0x0001D4, "Member 'FEditableTextBoxStyle::Padding' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, Font) == 0x0001E4, "Member 'FEditableTextBoxStyle::Font' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, ForegroundColor) == 0x00020C, "Member 'FEditableTextBoxStyle::ForegroundColor' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, BackgroundColor) == 0x000228, "Member 'FEditableTextBoxStyle::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, ReadOnlyForegroundColor) == 0x000244, "Member 'FEditableTextBoxStyle::ReadOnlyForegroundColor' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, HScrollBarPadding) == 0x000260, "Member 'FEditableTextBoxStyle::HScrollBarPadding' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, VScrollBarPadding) == 0x000270, "Member 'FEditableTextBoxStyle::VScrollBarPadding' has a wrong offset!");
static_assert(offsetof(FEditableTextBoxStyle, ScrollBarStyle) == 0x000280, "Member 'FEditableTextBoxStyle::ScrollBarStyle' has a wrong offset!");

// ScriptStruct SlateCore.SpinBoxStyle
// 0x0270 (0x0274 - 0x0004)
struct FSpinBoxStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0004(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredBackgroundBrush;                            // 0x0078(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ActiveFillBrush;                                   // 0x00EC(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            InactiveFillBrush;                                 // 0x0160(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ArrowsImage;                                       // 0x01D4(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x0248(0x001C)(NativeAccessSpecifierPublic)
	struct FMargin                                TextPadding;                                       // 0x0264(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpinBoxStyle) == 0x000004, "Wrong alignment on FSpinBoxStyle");
static_assert(sizeof(FSpinBoxStyle) == 0x000274, "Wrong size on FSpinBoxStyle");
static_assert(offsetof(FSpinBoxStyle, BackgroundBrush) == 0x000004, "Member 'FSpinBoxStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, HoveredBackgroundBrush) == 0x000078, "Member 'FSpinBoxStyle::HoveredBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, ActiveFillBrush) == 0x0000EC, "Member 'FSpinBoxStyle::ActiveFillBrush' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, InactiveFillBrush) == 0x000160, "Member 'FSpinBoxStyle::InactiveFillBrush' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, ArrowsImage) == 0x0001D4, "Member 'FSpinBoxStyle::ArrowsImage' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, ForegroundColor) == 0x000248, "Member 'FSpinBoxStyle::ForegroundColor' has a wrong offset!");
static_assert(offsetof(FSpinBoxStyle, TextPadding) == 0x000264, "Member 'FSpinBoxStyle::TextPadding' has a wrong offset!");

// ScriptStruct SlateCore.AnalogInputEvent
// 0x0004 (0x0038 - 0x0034)
struct FAnalogInputEvent final : public FKeyEvent
{
public:
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnalogInputEvent) == 0x000004, "Wrong alignment on FAnalogInputEvent");
static_assert(sizeof(FAnalogInputEvent) == 0x000038, "Wrong size on FAnalogInputEvent");

// ScriptStruct SlateCore.ControllerEvent
// 0x0014 (0x0030 - 0x001C)
struct FControllerEvent final : public FInputEvent
{
public:
	uint8                                         Pad_1C[0x14];                                      // 0x001C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FControllerEvent) == 0x000004, "Wrong alignment on FControllerEvent");
static_assert(sizeof(FControllerEvent) == 0x000030, "Wrong size on FControllerEvent");

// ScriptStruct SlateCore.FocusEvent
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FFocusEvent final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFocusEvent) == 0x000004, "Wrong alignment on FFocusEvent");
static_assert(sizeof(FFocusEvent) == 0x000008, "Wrong size on FFocusEvent");

// ScriptStruct SlateCore.CharacterEvent
// 0x0004 (0x0020 - 0x001C)
struct FCharacterEvent final : public FInputEvent
{
public:
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterEvent) == 0x000004, "Wrong alignment on FCharacterEvent");
static_assert(sizeof(FCharacterEvent) == 0x000020, "Wrong size on FCharacterEvent");

// ScriptStruct SlateCore.SliderStyle
// 0x01D0 (0x01D4 - 0x0004)
struct FSliderStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            NormalBarImage;                                    // 0x0004(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DisabledBarImage;                                  // 0x0078(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalThumbImage;                                  // 0x00EC(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DisabledThumbImage;                                // 0x0160(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSliderStyle) == 0x000004, "Wrong alignment on FSliderStyle");
static_assert(sizeof(FSliderStyle) == 0x0001D4, "Wrong size on FSliderStyle");
static_assert(offsetof(FSliderStyle, NormalBarImage) == 0x000004, "Member 'FSliderStyle::NormalBarImage' has a wrong offset!");
static_assert(offsetof(FSliderStyle, DisabledBarImage) == 0x000078, "Member 'FSliderStyle::DisabledBarImage' has a wrong offset!");
static_assert(offsetof(FSliderStyle, NormalThumbImage) == 0x0000EC, "Member 'FSliderStyle::NormalThumbImage' has a wrong offset!");
static_assert(offsetof(FSliderStyle, DisabledThumbImage) == 0x000160, "Member 'FSliderStyle::DisabledThumbImage' has a wrong offset!");

// ScriptStruct SlateCore.ScrollBorderStyle
// 0x00E8 (0x00EC - 0x0004)
struct FScrollBorderStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            TopShadowBrush;                                    // 0x0004(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BottomShadowBrush;                                 // 0x0078(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScrollBorderStyle) == 0x000004, "Wrong alignment on FScrollBorderStyle");
static_assert(sizeof(FScrollBorderStyle) == 0x0000EC, "Wrong size on FScrollBorderStyle");
static_assert(offsetof(FScrollBorderStyle, TopShadowBrush) == 0x000004, "Member 'FScrollBorderStyle::TopShadowBrush' has a wrong offset!");
static_assert(offsetof(FScrollBorderStyle, BottomShadowBrush) == 0x000078, "Member 'FScrollBorderStyle::BottomShadowBrush' has a wrong offset!");

// ScriptStruct SlateCore.MotionEvent
// 0x0030 (0x004C - 0x001C)
struct FMotionEvent final : public FInputEvent
{
public:
	uint8                                         Pad_1C[0x30];                                      // 0x001C(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMotionEvent) == 0x000004, "Wrong alignment on FMotionEvent");
static_assert(sizeof(FMotionEvent) == 0x00004C, "Wrong size on FMotionEvent");

// ScriptStruct SlateCore.CompositeSubFont
// 0x001C (0x001C - 0x0000)
struct FCompositeSubFont final
{
public:
	struct FTypeface                              Typeface;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FInt32Range>                    CharacterRanges;                                   // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ScalingFactor;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompositeSubFont) == 0x000004, "Wrong alignment on FCompositeSubFont");
static_assert(sizeof(FCompositeSubFont) == 0x00001C, "Wrong size on FCompositeSubFont");
static_assert(offsetof(FCompositeSubFont, Typeface) == 0x000000, "Member 'FCompositeSubFont::Typeface' has a wrong offset!");
static_assert(offsetof(FCompositeSubFont, CharacterRanges) == 0x00000C, "Member 'FCompositeSubFont::CharacterRanges' has a wrong offset!");
static_assert(offsetof(FCompositeSubFont, ScalingFactor) == 0x000018, "Member 'FCompositeSubFont::ScalingFactor' has a wrong offset!");

// ScriptStruct SlateCore.CompositeFont
// 0x001C (0x001C - 0x0000)
struct FCompositeFont final
{
public:
	struct FTypeface                              DefaultTypeface;                                   // 0x0000(0x000C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FCompositeSubFont>              SubTypefaces;                                      // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x4];                                       // 0x0018(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCompositeFont) == 0x000004, "Wrong alignment on FCompositeFont");
static_assert(sizeof(FCompositeFont) == 0x00001C, "Wrong size on FCompositeFont");
static_assert(offsetof(FCompositeFont, DefaultTypeface) == 0x000000, "Member 'FCompositeFont::DefaultTypeface' has a wrong offset!");
static_assert(offsetof(FCompositeFont, SubTypefaces) == 0x00000C, "Member 'FCompositeFont::SubTypefaces' has a wrong offset!");

// ScriptStruct SlateCore.WindowStyle
// 0x0CF8 (0x0CFC - 0x0004)
struct FWindowStyle final : public FSlateWidgetStyle
{
public:
	struct FButtonStyle                           MinimizeButtonStyle;                               // 0x0004(0x022C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonStyle                           MaximizeButtonStyle;                               // 0x0230(0x022C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonStyle                           RestoreButtonStyle;                                // 0x045C(0x022C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonStyle                           CloseButtonStyle;                                  // 0x0688(0x022C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TitleTextStyle;                                    // 0x08B4(0x0100)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ActiveTitleBrush;                                  // 0x09B4(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            InactiveTitleBrush;                                // 0x0A28(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            FlashTitleBrush;                                   // 0x0A9C(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            OutlineBrush;                                      // 0x0B10(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            OutlineColor;                                      // 0x0B84(0x001C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BorderBrush;                                       // 0x0BA0(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0C14(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ChildBackgroundBrush;                              // 0x0C88(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindowStyle) == 0x000004, "Wrong alignment on FWindowStyle");
static_assert(sizeof(FWindowStyle) == 0x000CFC, "Wrong size on FWindowStyle");
static_assert(offsetof(FWindowStyle, MinimizeButtonStyle) == 0x000004, "Member 'FWindowStyle::MinimizeButtonStyle' has a wrong offset!");
static_assert(offsetof(FWindowStyle, MaximizeButtonStyle) == 0x000230, "Member 'FWindowStyle::MaximizeButtonStyle' has a wrong offset!");
static_assert(offsetof(FWindowStyle, RestoreButtonStyle) == 0x00045C, "Member 'FWindowStyle::RestoreButtonStyle' has a wrong offset!");
static_assert(offsetof(FWindowStyle, CloseButtonStyle) == 0x000688, "Member 'FWindowStyle::CloseButtonStyle' has a wrong offset!");
static_assert(offsetof(FWindowStyle, TitleTextStyle) == 0x0008B4, "Member 'FWindowStyle::TitleTextStyle' has a wrong offset!");
static_assert(offsetof(FWindowStyle, ActiveTitleBrush) == 0x0009B4, "Member 'FWindowStyle::ActiveTitleBrush' has a wrong offset!");
static_assert(offsetof(FWindowStyle, InactiveTitleBrush) == 0x000A28, "Member 'FWindowStyle::InactiveTitleBrush' has a wrong offset!");
static_assert(offsetof(FWindowStyle, FlashTitleBrush) == 0x000A9C, "Member 'FWindowStyle::FlashTitleBrush' has a wrong offset!");
static_assert(offsetof(FWindowStyle, OutlineBrush) == 0x000B10, "Member 'FWindowStyle::OutlineBrush' has a wrong offset!");
static_assert(offsetof(FWindowStyle, OutlineColor) == 0x000B84, "Member 'FWindowStyle::OutlineColor' has a wrong offset!");
static_assert(offsetof(FWindowStyle, BorderBrush) == 0x000BA0, "Member 'FWindowStyle::BorderBrush' has a wrong offset!");
static_assert(offsetof(FWindowStyle, BackgroundBrush) == 0x000C14, "Member 'FWindowStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FWindowStyle, ChildBackgroundBrush) == 0x000C88, "Member 'FWindowStyle::ChildBackgroundBrush' has a wrong offset!");

// ScriptStruct SlateCore.DockTabStyle
// 0x0588 (0x058C - 0x0004)
struct FDockTabStyle final : public FSlateWidgetStyle
{
public:
	struct FButtonStyle                           CloseButtonStyle;                                  // 0x0004(0x022C)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NormalBrush;                                       // 0x0230(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ActiveBrush;                                       // 0x02A4(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ColorOverlayBrush;                                 // 0x0318(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ForegroundBrush;                                   // 0x038C(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HoveredBrush;                                      // 0x0400(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ContentAreaBrush;                                  // 0x0474(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            TabWellBrush;                                      // 0x04E8(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FMargin                                TabPadding;                                        // 0x055C(0x0010)(Edit, NativeAccessSpecifierPublic)
	float                                         OverlapWidth;                                      // 0x056C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            FlashColor;                                        // 0x0570(0x001C)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDockTabStyle) == 0x000004, "Wrong alignment on FDockTabStyle");
static_assert(sizeof(FDockTabStyle) == 0x00058C, "Wrong size on FDockTabStyle");
static_assert(offsetof(FDockTabStyle, CloseButtonStyle) == 0x000004, "Member 'FDockTabStyle::CloseButtonStyle' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, NormalBrush) == 0x000230, "Member 'FDockTabStyle::NormalBrush' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, ActiveBrush) == 0x0002A4, "Member 'FDockTabStyle::ActiveBrush' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, ColorOverlayBrush) == 0x000318, "Member 'FDockTabStyle::ColorOverlayBrush' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, ForegroundBrush) == 0x00038C, "Member 'FDockTabStyle::ForegroundBrush' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, HoveredBrush) == 0x000400, "Member 'FDockTabStyle::HoveredBrush' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, ContentAreaBrush) == 0x000474, "Member 'FDockTabStyle::ContentAreaBrush' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, TabWellBrush) == 0x0004E8, "Member 'FDockTabStyle::TabWellBrush' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, TabPadding) == 0x00055C, "Member 'FDockTabStyle::TabPadding' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, OverlapWidth) == 0x00056C, "Member 'FDockTabStyle::OverlapWidth' has a wrong offset!");
static_assert(offsetof(FDockTabStyle, FlashColor) == 0x000570, "Member 'FDockTabStyle::FlashColor' has a wrong offset!");

// ScriptStruct SlateCore.CheckBoxStyle
// 0x04B4 (0x04B8 - 0x0004)
struct FCheckBoxStyle final : public FSlateWidgetStyle
{
public:
	ESlateCheckBoxType                            CheckBoxType;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            UncheckedImage;                                    // 0x0008(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UncheckedHoveredImage;                             // 0x007C(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UncheckedPressedImage;                             // 0x00F0(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CheckedImage;                                      // 0x0164(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CheckedHoveredImage;                               // 0x01D8(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CheckedPressedImage;                               // 0x024C(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UndeterminedImage;                                 // 0x02C0(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UndeterminedHoveredImage;                          // 0x0334(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UndeterminedPressedImage;                          // 0x03A8(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x041C(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x042C(0x001C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            BorderBackgroundColor;                             // 0x0448(0x001C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateSound                            CheckedSlateSound;                                 // 0x0464(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateSound                            UncheckedSlateSound;                               // 0x0478(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateSound                            HoveredSlateSound;                                 // 0x048C(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   CheckedSound;                                      // 0x04A0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UncheckedSound;                                    // 0x04A8(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HoveredSound;                                      // 0x04B0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCheckBoxStyle) == 0x000004, "Wrong alignment on FCheckBoxStyle");
static_assert(sizeof(FCheckBoxStyle) == 0x0004B8, "Wrong size on FCheckBoxStyle");
static_assert(offsetof(FCheckBoxStyle, CheckBoxType) == 0x000004, "Member 'FCheckBoxStyle::CheckBoxType' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UncheckedImage) == 0x000008, "Member 'FCheckBoxStyle::UncheckedImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UncheckedHoveredImage) == 0x00007C, "Member 'FCheckBoxStyle::UncheckedHoveredImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UncheckedPressedImage) == 0x0000F0, "Member 'FCheckBoxStyle::UncheckedPressedImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, CheckedImage) == 0x000164, "Member 'FCheckBoxStyle::CheckedImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, CheckedHoveredImage) == 0x0001D8, "Member 'FCheckBoxStyle::CheckedHoveredImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, CheckedPressedImage) == 0x00024C, "Member 'FCheckBoxStyle::CheckedPressedImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UndeterminedImage) == 0x0002C0, "Member 'FCheckBoxStyle::UndeterminedImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UndeterminedHoveredImage) == 0x000334, "Member 'FCheckBoxStyle::UndeterminedHoveredImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UndeterminedPressedImage) == 0x0003A8, "Member 'FCheckBoxStyle::UndeterminedPressedImage' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, Padding) == 0x00041C, "Member 'FCheckBoxStyle::Padding' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, ForegroundColor) == 0x00042C, "Member 'FCheckBoxStyle::ForegroundColor' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, BorderBackgroundColor) == 0x000448, "Member 'FCheckBoxStyle::BorderBackgroundColor' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, CheckedSlateSound) == 0x000464, "Member 'FCheckBoxStyle::CheckedSlateSound' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UncheckedSlateSound) == 0x000478, "Member 'FCheckBoxStyle::UncheckedSlateSound' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, HoveredSlateSound) == 0x00048C, "Member 'FCheckBoxStyle::HoveredSlateSound' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, CheckedSound) == 0x0004A0, "Member 'FCheckBoxStyle::CheckedSound' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, UncheckedSound) == 0x0004A8, "Member 'FCheckBoxStyle::UncheckedSound' has a wrong offset!");
static_assert(offsetof(FCheckBoxStyle, HoveredSound) == 0x0004B0, "Member 'FCheckBoxStyle::HoveredSound' has a wrong offset!");

// ScriptStruct SlateCore.TableRowStyle
// 0x05A8 (0x05AC - 0x0004)
struct FTableRowStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            SelectorFocusedBrush;                              // 0x0004(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ActiveHoveredBrush;                                // 0x0078(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ActiveBrush;                                       // 0x00EC(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            InactiveHoveredBrush;                              // 0x0160(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            InactiveBrush;                                     // 0x01D4(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            EvenRowBackgroundHoveredBrush;                     // 0x0248(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            EvenRowBackgroundBrush;                            // 0x02BC(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            OddRowBackgroundHoveredBrush;                      // 0x0330(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            OddRowBackgroundBrush;                             // 0x03A4(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            TextColor;                                         // 0x0418(0x001C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            SelectedTextColor;                                 // 0x0434(0x001C)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DropIndicator_Above;                               // 0x0450(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DropIndicator_Onto;                                // 0x04C4(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DropIndicator_Below;                               // 0x0538(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTableRowStyle) == 0x000004, "Wrong alignment on FTableRowStyle");
static_assert(sizeof(FTableRowStyle) == 0x0005AC, "Wrong size on FTableRowStyle");
static_assert(offsetof(FTableRowStyle, SelectorFocusedBrush) == 0x000004, "Member 'FTableRowStyle::SelectorFocusedBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, ActiveHoveredBrush) == 0x000078, "Member 'FTableRowStyle::ActiveHoveredBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, ActiveBrush) == 0x0000EC, "Member 'FTableRowStyle::ActiveBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, InactiveHoveredBrush) == 0x000160, "Member 'FTableRowStyle::InactiveHoveredBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, InactiveBrush) == 0x0001D4, "Member 'FTableRowStyle::InactiveBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, EvenRowBackgroundHoveredBrush) == 0x000248, "Member 'FTableRowStyle::EvenRowBackgroundHoveredBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, EvenRowBackgroundBrush) == 0x0002BC, "Member 'FTableRowStyle::EvenRowBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, OddRowBackgroundHoveredBrush) == 0x000330, "Member 'FTableRowStyle::OddRowBackgroundHoveredBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, OddRowBackgroundBrush) == 0x0003A4, "Member 'FTableRowStyle::OddRowBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, TextColor) == 0x000418, "Member 'FTableRowStyle::TextColor' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, SelectedTextColor) == 0x000434, "Member 'FTableRowStyle::SelectedTextColor' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, DropIndicator_Above) == 0x000450, "Member 'FTableRowStyle::DropIndicator_Above' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, DropIndicator_Onto) == 0x0004C4, "Member 'FTableRowStyle::DropIndicator_Onto' has a wrong offset!");
static_assert(offsetof(FTableRowStyle, DropIndicator_Below) == 0x000538, "Member 'FTableRowStyle::DropIndicator_Below' has a wrong offset!");

// ScriptStruct SlateCore.InlineTextImageStyle
// 0x0078 (0x007C - 0x0004)
struct FInlineTextImageStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            Image;                                             // 0x0004(0x0074)(Edit, NativeAccessSpecifierPublic)
	int16                                         Baseline;                                          // 0x0078(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInlineTextImageStyle) == 0x000004, "Wrong alignment on FInlineTextImageStyle");
static_assert(sizeof(FInlineTextImageStyle) == 0x00007C, "Wrong size on FInlineTextImageStyle");
static_assert(offsetof(FInlineTextImageStyle, Image) == 0x000004, "Member 'FInlineTextImageStyle::Image' has a wrong offset!");
static_assert(offsetof(FInlineTextImageStyle, Baseline) == 0x000078, "Member 'FInlineTextImageStyle::Baseline' has a wrong offset!");

// ScriptStruct SlateCore.VolumeControlStyle
// 0x0418 (0x041C - 0x0004)
struct FVolumeControlStyle final : public FSlateWidgetStyle
{
public:
	struct FSliderStyle                           SliderStyle;                                       // 0x0004(0x01D4)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HighVolumeImage;                                   // 0x01D8(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MidVolumeImage;                                    // 0x024C(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LowVolumeImage;                                    // 0x02C0(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            NoVolumeImage;                                     // 0x0334(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MutedImage;                                        // 0x03A8(0x0074)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVolumeControlStyle) == 0x000004, "Wrong alignment on FVolumeControlStyle");
static_assert(sizeof(FVolumeControlStyle) == 0x00041C, "Wrong size on FVolumeControlStyle");
static_assert(offsetof(FVolumeControlStyle, SliderStyle) == 0x000004, "Member 'FVolumeControlStyle::SliderStyle' has a wrong offset!");
static_assert(offsetof(FVolumeControlStyle, HighVolumeImage) == 0x0001D8, "Member 'FVolumeControlStyle::HighVolumeImage' has a wrong offset!");
static_assert(offsetof(FVolumeControlStyle, MidVolumeImage) == 0x00024C, "Member 'FVolumeControlStyle::MidVolumeImage' has a wrong offset!");
static_assert(offsetof(FVolumeControlStyle, LowVolumeImage) == 0x0002C0, "Member 'FVolumeControlStyle::LowVolumeImage' has a wrong offset!");
static_assert(offsetof(FVolumeControlStyle, NoVolumeImage) == 0x000334, "Member 'FVolumeControlStyle::NoVolumeImage' has a wrong offset!");
static_assert(offsetof(FVolumeControlStyle, MutedImage) == 0x0003A8, "Member 'FVolumeControlStyle::MutedImage' has a wrong offset!");

// ScriptStruct SlateCore.SearchBoxStyle
// 0x08A4 (0x08A8 - 0x0004)
struct FSearchBoxStyle final : public FSlateWidgetStyle
{
public:
	struct FEditableTextBoxStyle                  TextBoxStyle;                                      // 0x0004(0x0698)(Edit, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         ActiveFontInfo;                                    // 0x069C(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            UpArrowImage;                                      // 0x06C4(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            DownArrowImage;                                    // 0x0738(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            GlassImage;                                        // 0x07AC(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ClearImage;                                        // 0x0820(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FMargin                                ImagePadding;                                      // 0x0894(0x0010)(Edit, NativeAccessSpecifierPublic)
	bool                                          bLeftAlignButtons;                                 // 0x08A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A5[0x3];                                      // 0x08A5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSearchBoxStyle) == 0x000004, "Wrong alignment on FSearchBoxStyle");
static_assert(sizeof(FSearchBoxStyle) == 0x0008A8, "Wrong size on FSearchBoxStyle");
static_assert(offsetof(FSearchBoxStyle, TextBoxStyle) == 0x000004, "Member 'FSearchBoxStyle::TextBoxStyle' has a wrong offset!");
static_assert(offsetof(FSearchBoxStyle, ActiveFontInfo) == 0x00069C, "Member 'FSearchBoxStyle::ActiveFontInfo' has a wrong offset!");
static_assert(offsetof(FSearchBoxStyle, UpArrowImage) == 0x0006C4, "Member 'FSearchBoxStyle::UpArrowImage' has a wrong offset!");
static_assert(offsetof(FSearchBoxStyle, DownArrowImage) == 0x000738, "Member 'FSearchBoxStyle::DownArrowImage' has a wrong offset!");
static_assert(offsetof(FSearchBoxStyle, GlassImage) == 0x0007AC, "Member 'FSearchBoxStyle::GlassImage' has a wrong offset!");
static_assert(offsetof(FSearchBoxStyle, ClearImage) == 0x000820, "Member 'FSearchBoxStyle::ClearImage' has a wrong offset!");
static_assert(offsetof(FSearchBoxStyle, ImagePadding) == 0x000894, "Member 'FSearchBoxStyle::ImagePadding' has a wrong offset!");
static_assert(offsetof(FSearchBoxStyle, bLeftAlignButtons) == 0x0008A4, "Member 'FSearchBoxStyle::bLeftAlignButtons' has a wrong offset!");

// ScriptStruct SlateCore.ExpandableAreaStyle
// 0x00E8 (0x00EC - 0x0004)
struct FExpandableAreaStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            CollapsedImage;                                    // 0x0004(0x0074)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ExpandedImage;                                     // 0x0078(0x0074)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExpandableAreaStyle) == 0x000004, "Wrong alignment on FExpandableAreaStyle");
static_assert(sizeof(FExpandableAreaStyle) == 0x0000EC, "Wrong size on FExpandableAreaStyle");
static_assert(offsetof(FExpandableAreaStyle, CollapsedImage) == 0x000004, "Member 'FExpandableAreaStyle::CollapsedImage' has a wrong offset!");
static_assert(offsetof(FExpandableAreaStyle, ExpandedImage) == 0x000078, "Member 'FExpandableAreaStyle::ExpandedImage' has a wrong offset!");

// ScriptStruct SlateCore.ProgressBarStyle
// 0x015C (0x0160 - 0x0004)
struct FProgressBarStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            BackgroundImage;                                   // 0x0004(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            FillImage;                                         // 0x0078(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MarqueeImage;                                      // 0x00EC(0x0074)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProgressBarStyle) == 0x000004, "Wrong alignment on FProgressBarStyle");
static_assert(sizeof(FProgressBarStyle) == 0x000160, "Wrong size on FProgressBarStyle");
static_assert(offsetof(FProgressBarStyle, BackgroundImage) == 0x000004, "Member 'FProgressBarStyle::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FProgressBarStyle, FillImage) == 0x000078, "Member 'FProgressBarStyle::FillImage' has a wrong offset!");
static_assert(offsetof(FProgressBarStyle, MarqueeImage) == 0x0000EC, "Member 'FProgressBarStyle::MarqueeImage' has a wrong offset!");

// ScriptStruct SlateCore.InlineEditableTextBlockStyle
// 0x0798 (0x079C - 0x0004)
struct FInlineEditableTextBlockStyle final : public FSlateWidgetStyle
{
public:
	struct FEditableTextBoxStyle                  EditableTextBoxStyle;                              // 0x0004(0x0698)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTextBlockStyle                        TextStyle;                                         // 0x069C(0x0100)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInlineEditableTextBlockStyle) == 0x000004, "Wrong alignment on FInlineEditableTextBlockStyle");
static_assert(sizeof(FInlineEditableTextBlockStyle) == 0x00079C, "Wrong size on FInlineEditableTextBlockStyle");
static_assert(offsetof(FInlineEditableTextBlockStyle, EditableTextBoxStyle) == 0x000004, "Member 'FInlineEditableTextBlockStyle::EditableTextBoxStyle' has a wrong offset!");
static_assert(offsetof(FInlineEditableTextBlockStyle, TextStyle) == 0x00069C, "Member 'FInlineEditableTextBlockStyle::TextStyle' has a wrong offset!");

// ScriptStruct SlateCore.NavigationEvent
// 0x0004 (0x0020 - 0x001C)
struct FNavigationEvent final : public FInputEvent
{
public:
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNavigationEvent) == 0x000004, "Wrong alignment on FNavigationEvent");
static_assert(sizeof(FNavigationEvent) == 0x000020, "Wrong size on FNavigationEvent");

}

#pragma pack(pop)
