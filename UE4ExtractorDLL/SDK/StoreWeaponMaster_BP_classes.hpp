#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StoreWeaponMaster_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass StoreWeaponMaster_BP.StoreWeaponMaster_BP_C
// 0x00FC (0x033C - 0x0240)
class AStoreWeaponMaster_BP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   WeaponHiddenLocation;                              // 0x0244(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USkeletalMeshComponent*                 SKMeleeWeapon;                                     // 0x0248(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   MeleeWeaponDefaultPosition;                        // 0x024C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   WeaponRoot;                                        // 0x0250(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USceneComponent*                        PinataSceneRoot;                                   // 0x0254(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	struct FVector                                MeleeWeaponEquipLoc;                               // 0x0258(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                SKMeleeLocation;                                   // 0x0264(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               SKMeleeRotation;                                   // 0x0270(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                MeleeWeaponDownLoc;                                // 0x027C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               MeleeWeaponEquipRot;                               // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TSoftObjectPtr<class USoundBase>              SoundWeaponReady;                                  // 0x0294(0x0018)(Edit, BlueprintVisible)
	class USoundBase*                             SoundCurrentWeaponReady;                           // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TSoftObjectPtr<class USoundBase>              SoundWeaponSwing;                                  // 0x02B0(0x0018)(Edit, BlueprintVisible)
	class USoundBase*                             SoundCurrentWeaponSwing;                           // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TSoftObjectPtr<class USoundBase>              SoundWeaponImpact;                                 // 0x02CC(0x0018)(Edit, BlueprintVisible)
	class USoundBase*                             SoundCurrentWeaponImpact;                          // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TSoftObjectPtr<class USoundBase>              SoundWeaponGreet;                                  // 0x02E8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundBase*                             SoundCurrentWeaponGreet;                           // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                 WeaponObject;                                      // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TSoftObjectPtr<class USkeletalMesh>           WeaponAssetID;                                     // 0x0308(0x0018)(Edit, BlueprintVisible)
	bool                                          Debug;                                             // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WeaponOffsetLoc;                                   // 0x0324(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               WeaponOffsetRot;                                   // 0x0330(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_StoreWeaponMaster_BP(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"StoreWeaponMaster_BP_C">();
	}
	static class AStoreWeaponMaster_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AStoreWeaponMaster_BP_C>();
	}
};
static_assert(alignof(AStoreWeaponMaster_BP_C) == 0x000004, "Wrong alignment on AStoreWeaponMaster_BP_C");
static_assert(sizeof(AStoreWeaponMaster_BP_C) == 0x00033C, "Wrong size on AStoreWeaponMaster_BP_C");
static_assert(offsetof(AStoreWeaponMaster_BP_C, UberGraphFrame) == 0x000240, "Member 'AStoreWeaponMaster_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, WeaponHiddenLocation) == 0x000244, "Member 'AStoreWeaponMaster_BP_C::WeaponHiddenLocation' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, SKMeleeWeapon) == 0x000248, "Member 'AStoreWeaponMaster_BP_C::SKMeleeWeapon' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, MeleeWeaponDefaultPosition) == 0x00024C, "Member 'AStoreWeaponMaster_BP_C::MeleeWeaponDefaultPosition' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, WeaponRoot) == 0x000250, "Member 'AStoreWeaponMaster_BP_C::WeaponRoot' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, PinataSceneRoot) == 0x000254, "Member 'AStoreWeaponMaster_BP_C::PinataSceneRoot' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, MeleeWeaponEquipLoc) == 0x000258, "Member 'AStoreWeaponMaster_BP_C::MeleeWeaponEquipLoc' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, SKMeleeLocation) == 0x000264, "Member 'AStoreWeaponMaster_BP_C::SKMeleeLocation' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, SKMeleeRotation) == 0x000270, "Member 'AStoreWeaponMaster_BP_C::SKMeleeRotation' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, MeleeWeaponDownLoc) == 0x00027C, "Member 'AStoreWeaponMaster_BP_C::MeleeWeaponDownLoc' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, MeleeWeaponEquipRot) == 0x000288, "Member 'AStoreWeaponMaster_BP_C::MeleeWeaponEquipRot' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, SoundWeaponReady) == 0x000294, "Member 'AStoreWeaponMaster_BP_C::SoundWeaponReady' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, SoundCurrentWeaponReady) == 0x0002AC, "Member 'AStoreWeaponMaster_BP_C::SoundCurrentWeaponReady' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, SoundWeaponSwing) == 0x0002B0, "Member 'AStoreWeaponMaster_BP_C::SoundWeaponSwing' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, SoundCurrentWeaponSwing) == 0x0002C8, "Member 'AStoreWeaponMaster_BP_C::SoundCurrentWeaponSwing' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, SoundWeaponImpact) == 0x0002CC, "Member 'AStoreWeaponMaster_BP_C::SoundWeaponImpact' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, SoundCurrentWeaponImpact) == 0x0002E4, "Member 'AStoreWeaponMaster_BP_C::SoundCurrentWeaponImpact' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, SoundWeaponGreet) == 0x0002E8, "Member 'AStoreWeaponMaster_BP_C::SoundWeaponGreet' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, SoundCurrentWeaponGreet) == 0x000300, "Member 'AStoreWeaponMaster_BP_C::SoundCurrentWeaponGreet' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, WeaponObject) == 0x000304, "Member 'AStoreWeaponMaster_BP_C::WeaponObject' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, WeaponAssetID) == 0x000308, "Member 'AStoreWeaponMaster_BP_C::WeaponAssetID' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, Debug) == 0x000320, "Member 'AStoreWeaponMaster_BP_C::Debug' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, WeaponOffsetLoc) == 0x000324, "Member 'AStoreWeaponMaster_BP_C::WeaponOffsetLoc' has a wrong offset!");
static_assert(offsetof(AStoreWeaponMaster_BP_C, WeaponOffsetRot) == 0x000330, "Member 'AStoreWeaponMaster_BP_C::WeaponOffsetRot' has a wrong offset!");

}

#pragma pack(pop)
