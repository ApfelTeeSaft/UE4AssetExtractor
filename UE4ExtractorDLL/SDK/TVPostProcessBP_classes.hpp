#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TVPostProcessBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass TVPostProcessBP.TVPostProcessBP_C
// 0x0128 (0x0368 - 0x0240)
class ATVPostProcessBP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x0244(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UPostProcessComponent*                  just_distorted_location_switch_post;               // 0x0248(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UPostProcessComponent*                  Full_screen_tv_post;                               // 0x024C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         Jitter_Timeline_use_solid_color_3FCD803A4A5E86474EA128B9EDBED56E; // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Jitter_Timeline_LerpImageAndScreen_3FCD803A4A5E86474EA128B9EDBED56E; // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Jitter_Timeline_Noise_Distortion_Amount_3FCD803A4A5E86474EA128B9EDBED56E; // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Jitter_Timeline_Screen_Modulation_3FCD803A4A5E86474EA128B9EDBED56E; // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Jitter_Timeline__Direction_3FCD803A4A5E86474EA128B9EDBED56E; // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Jitter_Timeline;                                   // 0x0264(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_0_use_solid_color_8A3EF030490EDBCB14E0EE98F27A0CEB; // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_0_LerpImageAndScreen_8A3EF030490EDBCB14E0EE98F27A0CEB; // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_0_Noise_Distortion_Amount_8A3EF030490EDBCB14E0EE98F27A0CEB; // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Timeline_0_Screen_Modulation_8A3EF030490EDBCB14E0EE98F27A0CEB; // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Timeline_0__Direction_8A3EF030490EDBCB14E0EE98F27A0CEB; // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x027C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Camera_StartTheMonitor_Text_Timeline_SolidBackgroundModulation_8B52FB0849C47C5870E31DBE0A87A563; // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Camera_StartTheMonitor_Text_Timeline_Additive_screen_modulation_8B52FB0849C47C5870E31DBE0A87A563; // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Camera_StartTheMonitor_Text_Timeline_ReplacementAlpha_8B52FB0849C47C5870E31DBE0A87A563; // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Camera_StartTheMonitor_Text_Timeline_Vpos_8B52FB0849C47C5870E31DBE0A87A563; // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Camera_StartTheMonitor_Text_Timeline_Hpos_8B52FB0849C47C5870E31DBE0A87A563; // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Camera_StartTheMonitor_Text_Timeline_Noise_Distortion_Amount_8B52FB0849C47C5870E31DBE0A87A563; // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Camera_StartTheMonitor_Text_Timeline_Screen_Bend_Amount_8B52FB0849C47C5870E31DBE0A87A563; // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Camera_StartTheMonitor_Text_Timeline_Screen_Modulation_8B52FB0849C47C5870E31DBE0A87A563; // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Camera_StartTheMonitor_Text_Timeline__Direction_8B52FB0849C47C5870E31DBE0A87A563; // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Camera_StartTheMonitor_Text_Timeline;              // 0x02A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FadeOut_blendweight_D40D454F4B32910AAC407D9AB580EA07; // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FadeOut_Fading_D40D454F4B32910AAC407D9AB580EA07;   // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FadeOut_Effect_translucency_D40D454F4B32910AAC407D9AB580EA07; // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FadeOut_Kill_effect_amount_D40D454F4B32910AAC407D9AB580EA07; // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            FadeOut__Direction_D40D454F4B32910AAC407D9AB580EA07; // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FadeOut;                                           // 0x02BC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Switch_between_cameras_use_solid_color_E4FB35CD487A51ED1632BFAD49D21E03; // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Switch_between_cameras_LerpImageAndScreen_E4FB35CD487A51ED1632BFAD49D21E03; // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Switch_between_cameras_Noise_Distortion_Amount_E4FB35CD487A51ED1632BFAD49D21E03; // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Switch_between_cameras_Screen_Modulation_E4FB35CD487A51ED1632BFAD49D21E03; // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Switch_between_cameras__Direction_E4FB35CD487A51ED1632BFAD49D21E03; // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Switch_between_cameras;                            // 0x02D4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Switch_to_static_use_solid_color_010BC5074AA9D38B1E815EB7DA97273B; // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Switch_to_static_ShowScreenStatic_010BC5074AA9D38B1E815EB7DA97273B; // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Switch_to_static_Noise_Distortion_Amount_010BC5074AA9D38B1E815EB7DA97273B; // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Switch_to_static_Screen_Modulation_010BC5074AA9D38B1E815EB7DA97273B; // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Switch_to_static__Direction_010BC5074AA9D38B1E815EB7DA97273B; // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Switch_to_static;                                  // 0x02EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Switch_to_live_use_solid_color_DFB267304061CE3644C3E1B38972E94E; // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Switch_to_live_LerpImageAndScreen_DFB267304061CE3644C3E1B38972E94E; // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Switch_to_live_Noise_Distortion_Amount_DFB267304061CE3644C3E1B38972E94E; // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Switch_to_live_Screen_Modulation_DFB267304061CE3644C3E1B38972E94E; // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Switch_to_live__Direction_DFB267304061CE3644C3E1B38972E94E; // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Switch_to_live;                                    // 0x0304(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Show_the_troll_HideTroll_060EDD8E4EDBC900E7D2F29D7A26DBF0; // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Show_the_troll_use_solid_color_060EDD8E4EDBC900E7D2F29D7A26DBF0; // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Show_the_troll_Noise_Distortion_Amount_060EDD8E4EDBC900E7D2F29D7A26DBF0; // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Show_the_troll__Direction_060EDD8E4EDBC900E7D2F29D7A26DBF0; // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Show_the_troll;                                    // 0x0318(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         StartScreen_Replacement_randomization_676222D64F5268BA3215E5B98CEFBE8A; // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         StartScreen_ReplacementAlpha_676222D64F5268BA3215E5B98CEFBE8A; // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         StartScreen_Vpos_676222D64F5268BA3215E5B98CEFBE8A; // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         StartScreen_Hpos_676222D64F5268BA3215E5B98CEFBE8A; // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         StartScreen_Noise_Distortion_Amount_676222D64F5268BA3215E5B98CEFBE8A; // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         StartScreen_Screen_Bend_Amount_676222D64F5268BA3215E5B98CEFBE8A; // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         StartScreen_Screen_Modulation_676222D64F5268BA3215E5B98CEFBE8A; // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            StartScreen__Direction_676222D64F5268BA3215E5B98CEFBE8A; // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_339[0x3];                                      // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     StartScreen;                                       // 0x033C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          GrabNewColorBool;                                  // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          increase_distortion_;                              // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_342[0x2];                                      // 0x0342(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdditionalDistortionAmount;                        // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Show_troll;                                        // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Troll_counter;                                     // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NewVar;                                            // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Camera_hasnt_switched_to_live_yet;                 // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_352[0x2];                                      // 0x0352(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FluctuatingDisplaySceneValue;                      // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Ideal_Display_scene_min_value;                     // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Ideal_display_scene_max_value;                     // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SkipDos;                                           // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DisableOnStartup;                                  // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewVar_0;                                          // 0x0362(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_363[0x1];                                      // 0x0363(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousSceneModulation;                           // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_TVPostProcessBP(int32 EntryPoint);
	void JitterTheScreen();
	void FastForwardPostProcess();
	void Camera_DisableEffects();
	void SequenceFinished(const class FString& SequenceName);
	void WriteOutLoading();
	void Camera_Sequence_Start_StaticWhoomp();
	void Camera_LoadAndWait();
	void Camera_SwitchBetweenLocations_AfterPostProcessDisappears();
	void Camera_ReturningPlayerInitializeWithLiveVideo();
	void Camera_DosTextFinished();
	void Camera_StartTheMonitor_Text();
	void Camera_DebugEvents();
	void Camera_TurnOffThePostProcess();
	void Camera_TransitionToLiveStatic();
	void Camera_TriggerTheTroll();
	void Camera_InitializePost();
	void Camera_SwitchBetweenLocations();
	void Camera_TransitionToLiveVideo();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Jitter_Timeline__Switch_Camera_Position__EventFunc();
	void Jitter_Timeline__UpdateFunc();
	void Jitter_Timeline__FinishedFunc();
	void Timeline_0__Switch_Camera_Position__EventFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void Camera_StartTheMonitor_Text_Timeline__UpdateFunc();
	void Camera_StartTheMonitor_Text_Timeline__FinishedFunc();
	void FadeOut__UpdateFunc();
	void FadeOut__FinishedFunc();
	void Switch_to_live__UpdateFunc();
	void Switch_to_live__FinishedFunc();
	void Show_the_troll__UpdateFunc();
	void Show_the_troll__FinishedFunc();
	void Switch_between_cameras__Switch_Camera_Position__EventFunc();
	void Switch_between_cameras__UpdateFunc();
	void Switch_between_cameras__FinishedFunc();
	void Switch_to_static__UpdateFunc();
	void Switch_to_static__FinishedFunc();
	void StartScreen__UpdateFunc();
	void StartScreen__FinishedFunc();
	void UserConstructionScript();
	void RandomizeTheColor(float Use_Bluescreen, float Probablility_modulator, float Use_Flat_Blue, float MaxColorPerChannelValue, bool Control_replacement_alpha);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TVPostProcessBP_C">();
	}
	static class ATVPostProcessBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATVPostProcessBP_C>();
	}
};
static_assert(alignof(ATVPostProcessBP_C) == 0x000004, "Wrong alignment on ATVPostProcessBP_C");
static_assert(sizeof(ATVPostProcessBP_C) == 0x000368, "Wrong size on ATVPostProcessBP_C");
static_assert(offsetof(ATVPostProcessBP_C, UberGraphFrame) == 0x000240, "Member 'ATVPostProcessBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Billboard) == 0x000244, "Member 'ATVPostProcessBP_C::Billboard' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, just_distorted_location_switch_post) == 0x000248, "Member 'ATVPostProcessBP_C::just_distorted_location_switch_post' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Full_screen_tv_post) == 0x00024C, "Member 'ATVPostProcessBP_C::Full_screen_tv_post' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Jitter_Timeline_use_solid_color_3FCD803A4A5E86474EA128B9EDBED56E) == 0x000250, "Member 'ATVPostProcessBP_C::Jitter_Timeline_use_solid_color_3FCD803A4A5E86474EA128B9EDBED56E' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Jitter_Timeline_LerpImageAndScreen_3FCD803A4A5E86474EA128B9EDBED56E) == 0x000254, "Member 'ATVPostProcessBP_C::Jitter_Timeline_LerpImageAndScreen_3FCD803A4A5E86474EA128B9EDBED56E' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Jitter_Timeline_Noise_Distortion_Amount_3FCD803A4A5E86474EA128B9EDBED56E) == 0x000258, "Member 'ATVPostProcessBP_C::Jitter_Timeline_Noise_Distortion_Amount_3FCD803A4A5E86474EA128B9EDBED56E' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Jitter_Timeline_Screen_Modulation_3FCD803A4A5E86474EA128B9EDBED56E) == 0x00025C, "Member 'ATVPostProcessBP_C::Jitter_Timeline_Screen_Modulation_3FCD803A4A5E86474EA128B9EDBED56E' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Jitter_Timeline__Direction_3FCD803A4A5E86474EA128B9EDBED56E) == 0x000260, "Member 'ATVPostProcessBP_C::Jitter_Timeline__Direction_3FCD803A4A5E86474EA128B9EDBED56E' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Jitter_Timeline) == 0x000264, "Member 'ATVPostProcessBP_C::Jitter_Timeline' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Timeline_0_use_solid_color_8A3EF030490EDBCB14E0EE98F27A0CEB) == 0x000268, "Member 'ATVPostProcessBP_C::Timeline_0_use_solid_color_8A3EF030490EDBCB14E0EE98F27A0CEB' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Timeline_0_LerpImageAndScreen_8A3EF030490EDBCB14E0EE98F27A0CEB) == 0x00026C, "Member 'ATVPostProcessBP_C::Timeline_0_LerpImageAndScreen_8A3EF030490EDBCB14E0EE98F27A0CEB' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Timeline_0_Noise_Distortion_Amount_8A3EF030490EDBCB14E0EE98F27A0CEB) == 0x000270, "Member 'ATVPostProcessBP_C::Timeline_0_Noise_Distortion_Amount_8A3EF030490EDBCB14E0EE98F27A0CEB' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Timeline_0_Screen_Modulation_8A3EF030490EDBCB14E0EE98F27A0CEB) == 0x000274, "Member 'ATVPostProcessBP_C::Timeline_0_Screen_Modulation_8A3EF030490EDBCB14E0EE98F27A0CEB' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Timeline_0__Direction_8A3EF030490EDBCB14E0EE98F27A0CEB) == 0x000278, "Member 'ATVPostProcessBP_C::Timeline_0__Direction_8A3EF030490EDBCB14E0EE98F27A0CEB' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Timeline_0) == 0x00027C, "Member 'ATVPostProcessBP_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Camera_StartTheMonitor_Text_Timeline_SolidBackgroundModulation_8B52FB0849C47C5870E31DBE0A87A563) == 0x000280, "Member 'ATVPostProcessBP_C::Camera_StartTheMonitor_Text_Timeline_SolidBackgroundModulation_8B52FB0849C47C5870E31DBE0A87A563' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Camera_StartTheMonitor_Text_Timeline_Additive_screen_modulation_8B52FB0849C47C5870E31DBE0A87A563) == 0x000284, "Member 'ATVPostProcessBP_C::Camera_StartTheMonitor_Text_Timeline_Additive_screen_modulation_8B52FB0849C47C5870E31DBE0A87A563' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Camera_StartTheMonitor_Text_Timeline_ReplacementAlpha_8B52FB0849C47C5870E31DBE0A87A563) == 0x000288, "Member 'ATVPostProcessBP_C::Camera_StartTheMonitor_Text_Timeline_ReplacementAlpha_8B52FB0849C47C5870E31DBE0A87A563' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Camera_StartTheMonitor_Text_Timeline_Vpos_8B52FB0849C47C5870E31DBE0A87A563) == 0x00028C, "Member 'ATVPostProcessBP_C::Camera_StartTheMonitor_Text_Timeline_Vpos_8B52FB0849C47C5870E31DBE0A87A563' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Camera_StartTheMonitor_Text_Timeline_Hpos_8B52FB0849C47C5870E31DBE0A87A563) == 0x000290, "Member 'ATVPostProcessBP_C::Camera_StartTheMonitor_Text_Timeline_Hpos_8B52FB0849C47C5870E31DBE0A87A563' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Camera_StartTheMonitor_Text_Timeline_Noise_Distortion_Amount_8B52FB0849C47C5870E31DBE0A87A563) == 0x000294, "Member 'ATVPostProcessBP_C::Camera_StartTheMonitor_Text_Timeline_Noise_Distortion_Amount_8B52FB0849C47C5870E31DBE0A87A563' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Camera_StartTheMonitor_Text_Timeline_Screen_Bend_Amount_8B52FB0849C47C5870E31DBE0A87A563) == 0x000298, "Member 'ATVPostProcessBP_C::Camera_StartTheMonitor_Text_Timeline_Screen_Bend_Amount_8B52FB0849C47C5870E31DBE0A87A563' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Camera_StartTheMonitor_Text_Timeline_Screen_Modulation_8B52FB0849C47C5870E31DBE0A87A563) == 0x00029C, "Member 'ATVPostProcessBP_C::Camera_StartTheMonitor_Text_Timeline_Screen_Modulation_8B52FB0849C47C5870E31DBE0A87A563' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Camera_StartTheMonitor_Text_Timeline__Direction_8B52FB0849C47C5870E31DBE0A87A563) == 0x0002A0, "Member 'ATVPostProcessBP_C::Camera_StartTheMonitor_Text_Timeline__Direction_8B52FB0849C47C5870E31DBE0A87A563' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Camera_StartTheMonitor_Text_Timeline) == 0x0002A4, "Member 'ATVPostProcessBP_C::Camera_StartTheMonitor_Text_Timeline' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, FadeOut_blendweight_D40D454F4B32910AAC407D9AB580EA07) == 0x0002A8, "Member 'ATVPostProcessBP_C::FadeOut_blendweight_D40D454F4B32910AAC407D9AB580EA07' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, FadeOut_Fading_D40D454F4B32910AAC407D9AB580EA07) == 0x0002AC, "Member 'ATVPostProcessBP_C::FadeOut_Fading_D40D454F4B32910AAC407D9AB580EA07' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, FadeOut_Effect_translucency_D40D454F4B32910AAC407D9AB580EA07) == 0x0002B0, "Member 'ATVPostProcessBP_C::FadeOut_Effect_translucency_D40D454F4B32910AAC407D9AB580EA07' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, FadeOut_Kill_effect_amount_D40D454F4B32910AAC407D9AB580EA07) == 0x0002B4, "Member 'ATVPostProcessBP_C::FadeOut_Kill_effect_amount_D40D454F4B32910AAC407D9AB580EA07' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, FadeOut__Direction_D40D454F4B32910AAC407D9AB580EA07) == 0x0002B8, "Member 'ATVPostProcessBP_C::FadeOut__Direction_D40D454F4B32910AAC407D9AB580EA07' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, FadeOut) == 0x0002BC, "Member 'ATVPostProcessBP_C::FadeOut' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_between_cameras_use_solid_color_E4FB35CD487A51ED1632BFAD49D21E03) == 0x0002C0, "Member 'ATVPostProcessBP_C::Switch_between_cameras_use_solid_color_E4FB35CD487A51ED1632BFAD49D21E03' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_between_cameras_LerpImageAndScreen_E4FB35CD487A51ED1632BFAD49D21E03) == 0x0002C4, "Member 'ATVPostProcessBP_C::Switch_between_cameras_LerpImageAndScreen_E4FB35CD487A51ED1632BFAD49D21E03' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_between_cameras_Noise_Distortion_Amount_E4FB35CD487A51ED1632BFAD49D21E03) == 0x0002C8, "Member 'ATVPostProcessBP_C::Switch_between_cameras_Noise_Distortion_Amount_E4FB35CD487A51ED1632BFAD49D21E03' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_between_cameras_Screen_Modulation_E4FB35CD487A51ED1632BFAD49D21E03) == 0x0002CC, "Member 'ATVPostProcessBP_C::Switch_between_cameras_Screen_Modulation_E4FB35CD487A51ED1632BFAD49D21E03' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_between_cameras__Direction_E4FB35CD487A51ED1632BFAD49D21E03) == 0x0002D0, "Member 'ATVPostProcessBP_C::Switch_between_cameras__Direction_E4FB35CD487A51ED1632BFAD49D21E03' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_between_cameras) == 0x0002D4, "Member 'ATVPostProcessBP_C::Switch_between_cameras' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_to_static_use_solid_color_010BC5074AA9D38B1E815EB7DA97273B) == 0x0002D8, "Member 'ATVPostProcessBP_C::Switch_to_static_use_solid_color_010BC5074AA9D38B1E815EB7DA97273B' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_to_static_ShowScreenStatic_010BC5074AA9D38B1E815EB7DA97273B) == 0x0002DC, "Member 'ATVPostProcessBP_C::Switch_to_static_ShowScreenStatic_010BC5074AA9D38B1E815EB7DA97273B' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_to_static_Noise_Distortion_Amount_010BC5074AA9D38B1E815EB7DA97273B) == 0x0002E0, "Member 'ATVPostProcessBP_C::Switch_to_static_Noise_Distortion_Amount_010BC5074AA9D38B1E815EB7DA97273B' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_to_static_Screen_Modulation_010BC5074AA9D38B1E815EB7DA97273B) == 0x0002E4, "Member 'ATVPostProcessBP_C::Switch_to_static_Screen_Modulation_010BC5074AA9D38B1E815EB7DA97273B' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_to_static__Direction_010BC5074AA9D38B1E815EB7DA97273B) == 0x0002E8, "Member 'ATVPostProcessBP_C::Switch_to_static__Direction_010BC5074AA9D38B1E815EB7DA97273B' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_to_static) == 0x0002EC, "Member 'ATVPostProcessBP_C::Switch_to_static' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_to_live_use_solid_color_DFB267304061CE3644C3E1B38972E94E) == 0x0002F0, "Member 'ATVPostProcessBP_C::Switch_to_live_use_solid_color_DFB267304061CE3644C3E1B38972E94E' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_to_live_LerpImageAndScreen_DFB267304061CE3644C3E1B38972E94E) == 0x0002F4, "Member 'ATVPostProcessBP_C::Switch_to_live_LerpImageAndScreen_DFB267304061CE3644C3E1B38972E94E' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_to_live_Noise_Distortion_Amount_DFB267304061CE3644C3E1B38972E94E) == 0x0002F8, "Member 'ATVPostProcessBP_C::Switch_to_live_Noise_Distortion_Amount_DFB267304061CE3644C3E1B38972E94E' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_to_live_Screen_Modulation_DFB267304061CE3644C3E1B38972E94E) == 0x0002FC, "Member 'ATVPostProcessBP_C::Switch_to_live_Screen_Modulation_DFB267304061CE3644C3E1B38972E94E' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_to_live__Direction_DFB267304061CE3644C3E1B38972E94E) == 0x000300, "Member 'ATVPostProcessBP_C::Switch_to_live__Direction_DFB267304061CE3644C3E1B38972E94E' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Switch_to_live) == 0x000304, "Member 'ATVPostProcessBP_C::Switch_to_live' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Show_the_troll_HideTroll_060EDD8E4EDBC900E7D2F29D7A26DBF0) == 0x000308, "Member 'ATVPostProcessBP_C::Show_the_troll_HideTroll_060EDD8E4EDBC900E7D2F29D7A26DBF0' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Show_the_troll_use_solid_color_060EDD8E4EDBC900E7D2F29D7A26DBF0) == 0x00030C, "Member 'ATVPostProcessBP_C::Show_the_troll_use_solid_color_060EDD8E4EDBC900E7D2F29D7A26DBF0' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Show_the_troll_Noise_Distortion_Amount_060EDD8E4EDBC900E7D2F29D7A26DBF0) == 0x000310, "Member 'ATVPostProcessBP_C::Show_the_troll_Noise_Distortion_Amount_060EDD8E4EDBC900E7D2F29D7A26DBF0' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Show_the_troll__Direction_060EDD8E4EDBC900E7D2F29D7A26DBF0) == 0x000314, "Member 'ATVPostProcessBP_C::Show_the_troll__Direction_060EDD8E4EDBC900E7D2F29D7A26DBF0' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Show_the_troll) == 0x000318, "Member 'ATVPostProcessBP_C::Show_the_troll' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, StartScreen_Replacement_randomization_676222D64F5268BA3215E5B98CEFBE8A) == 0x00031C, "Member 'ATVPostProcessBP_C::StartScreen_Replacement_randomization_676222D64F5268BA3215E5B98CEFBE8A' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, StartScreen_ReplacementAlpha_676222D64F5268BA3215E5B98CEFBE8A) == 0x000320, "Member 'ATVPostProcessBP_C::StartScreen_ReplacementAlpha_676222D64F5268BA3215E5B98CEFBE8A' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, StartScreen_Vpos_676222D64F5268BA3215E5B98CEFBE8A) == 0x000324, "Member 'ATVPostProcessBP_C::StartScreen_Vpos_676222D64F5268BA3215E5B98CEFBE8A' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, StartScreen_Hpos_676222D64F5268BA3215E5B98CEFBE8A) == 0x000328, "Member 'ATVPostProcessBP_C::StartScreen_Hpos_676222D64F5268BA3215E5B98CEFBE8A' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, StartScreen_Noise_Distortion_Amount_676222D64F5268BA3215E5B98CEFBE8A) == 0x00032C, "Member 'ATVPostProcessBP_C::StartScreen_Noise_Distortion_Amount_676222D64F5268BA3215E5B98CEFBE8A' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, StartScreen_Screen_Bend_Amount_676222D64F5268BA3215E5B98CEFBE8A) == 0x000330, "Member 'ATVPostProcessBP_C::StartScreen_Screen_Bend_Amount_676222D64F5268BA3215E5B98CEFBE8A' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, StartScreen_Screen_Modulation_676222D64F5268BA3215E5B98CEFBE8A) == 0x000334, "Member 'ATVPostProcessBP_C::StartScreen_Screen_Modulation_676222D64F5268BA3215E5B98CEFBE8A' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, StartScreen__Direction_676222D64F5268BA3215E5B98CEFBE8A) == 0x000338, "Member 'ATVPostProcessBP_C::StartScreen__Direction_676222D64F5268BA3215E5B98CEFBE8A' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, StartScreen) == 0x00033C, "Member 'ATVPostProcessBP_C::StartScreen' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, GrabNewColorBool) == 0x000340, "Member 'ATVPostProcessBP_C::GrabNewColorBool' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, increase_distortion_) == 0x000341, "Member 'ATVPostProcessBP_C::increase_distortion_' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, AdditionalDistortionAmount) == 0x000344, "Member 'ATVPostProcessBP_C::AdditionalDistortionAmount' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Show_troll) == 0x000348, "Member 'ATVPostProcessBP_C::Show_troll' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Troll_counter) == 0x00034C, "Member 'ATVPostProcessBP_C::Troll_counter' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, NewVar) == 0x000350, "Member 'ATVPostProcessBP_C::NewVar' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Camera_hasnt_switched_to_live_yet) == 0x000351, "Member 'ATVPostProcessBP_C::Camera_hasnt_switched_to_live_yet' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, FluctuatingDisplaySceneValue) == 0x000354, "Member 'ATVPostProcessBP_C::FluctuatingDisplaySceneValue' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Ideal_Display_scene_min_value) == 0x000358, "Member 'ATVPostProcessBP_C::Ideal_Display_scene_min_value' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, Ideal_display_scene_max_value) == 0x00035C, "Member 'ATVPostProcessBP_C::Ideal_display_scene_max_value' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, SkipDos) == 0x000360, "Member 'ATVPostProcessBP_C::SkipDos' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, DisableOnStartup) == 0x000361, "Member 'ATVPostProcessBP_C::DisableOnStartup' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, NewVar_0) == 0x000362, "Member 'ATVPostProcessBP_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ATVPostProcessBP_C, PreviousSceneModulation) == 0x000364, "Member 'ATVPostProcessBP_C::PreviousSceneModulation' has a wrong offset!");

}

#pragma pack(pop)
