#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TooltipLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass TooltipLibrary.TooltipLibrary_C
// 0x0000 (0x001C - 0x001C)
class UTooltipLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void Create_Basic_Tooltip(class APlayerController* Owning_Player, const class FText& Body_Text, const class FText& Header_Text, class USlateBrushAsset* Icon_Brush, class UObject* __WorldContext, class UUserWidget** Output);
	static void Create_Custom_Tooltip(class APlayerController* Owning_Player, const class FText& Header_Text, class USlateBrushAsset* Icon_Brush, class UUserWidget* Widget, class UObject* __WorldContext, class UUserWidget** Output);
	static void Set_Enabled_And_Tooltip_Text(class UWidget* Widget, bool Enabled, const class FText& Tooltip_Text, class UObject* __WorldContext);
	static void Create_Item_Tooltip(class APlayerController* Owning_Player, const class FText& Header_Text, class USlateBrushAsset* Header_Icon, class UFortItem* Item, class UObject* __WorldContext, class UWidget** Return_Value);
	static void Create_Compare_Item_Tooltip(class APlayerController* Owning_Player, const class FText& Header_Text, class USlateBrushAsset* Header_Icon, class UFortItem* Item, class UFortItem* ComparedItem, class UObject* __WorldContext, class UWidget** Return_Value);
	static void Create_Basic_Multi_Line_Tooltip(class APlayerController* Owning_Player, TArray<class FText>& Body_Text, const class FText& Header_Text, class USlateBrushAsset* Icon_Brush, class UObject* __WorldContext, class UUserWidget** Output);
	static void Create_Core_Stat_Tooltip(class APlayerController* Owning_Player, const struct FHeroCoreStat& Data, float Value, class UObject* __WorldContext, class UUserWidget** Output);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TooltipLibrary_C">();
	}
	static class UTooltipLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTooltipLibrary_C>();
	}
};
static_assert(alignof(UTooltipLibrary_C) == 0x000004, "Wrong alignment on UTooltipLibrary_C");
static_assert(sizeof(UTooltipLibrary_C) == 0x00001C, "Wrong size on UTooltipLibrary_C");

}

#pragma pack(pop)
