#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TooltipLibrary

#include "Basic.hpp"

#include "TooltipLibrary_classes.hpp"
#include "TooltipLibrary_parameters.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// Function TooltipLibrary.TooltipLibrary_C.Create Basic Tooltip
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Owning_Player                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FText&                      Body_Text                                              (Parm)
// const class FText&                      Header_Text                                            (Parm)
// class USlateBrushAsset*                 Icon_Brush                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UUserWidget**                     Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTooltipLibrary_C::Create_Basic_Tooltip(class APlayerController* Owning_Player, const class FText& Body_Text, const class FText& Header_Text, class USlateBrushAsset* Icon_Brush, class UObject* __WorldContext, class UUserWidget** Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TooltipLibrary_C", "Create Basic Tooltip");

	Params::TooltipLibrary_C_Create_Basic_Tooltip Parms{};

	Parms.Owning_Player = Owning_Player;
	Parms.Body_Text = std::move(Body_Text);
	Parms.Header_Text = std::move(Header_Text);
	Parms.Icon_Brush = Icon_Brush;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function TooltipLibrary.TooltipLibrary_C.Create Custom Tooltip
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Owning_Player                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FText&                      Header_Text                                            (Parm)
// class USlateBrushAsset*                 Icon_Brush                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UUserWidget**                     Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTooltipLibrary_C::Create_Custom_Tooltip(class APlayerController* Owning_Player, const class FText& Header_Text, class USlateBrushAsset* Icon_Brush, class UUserWidget* Widget, class UObject* __WorldContext, class UUserWidget** Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TooltipLibrary_C", "Create Custom Tooltip");

	Params::TooltipLibrary_C_Create_Custom_Tooltip Parms{};

	Parms.Owning_Player = Owning_Player;
	Parms.Header_Text = std::move(Header_Text);
	Parms.Icon_Brush = Icon_Brush;
	Parms.Widget = Widget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function TooltipLibrary.TooltipLibrary_C.Set Enabled And Tooltip Text
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FText&                      Tooltip_Text                                           (Parm)
// class UObject*                          __WorldContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTooltipLibrary_C::Set_Enabled_And_Tooltip_Text(class UWidget* Widget, bool Enabled, const class FText& Tooltip_Text, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TooltipLibrary_C", "Set Enabled And Tooltip Text");

	Params::TooltipLibrary_C_Set_Enabled_And_Tooltip_Text Parms{};

	Parms.Widget = Widget;
	Parms.Enabled = Enabled;
	Parms.Tooltip_Text = std::move(Tooltip_Text);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function TooltipLibrary.TooltipLibrary_C.Create Item Tooltip
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Owning_Player                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FText&                      Header_Text                                            (Parm)
// class USlateBrushAsset*                 Header_Icon                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UFortItem*                        Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UWidget**                         Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTooltipLibrary_C::Create_Item_Tooltip(class APlayerController* Owning_Player, const class FText& Header_Text, class USlateBrushAsset* Header_Icon, class UFortItem* Item, class UObject* __WorldContext, class UWidget** Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TooltipLibrary_C", "Create Item Tooltip");

	Params::TooltipLibrary_C_Create_Item_Tooltip Parms{};

	Parms.Owning_Player = Owning_Player;
	Parms.Header_Text = std::move(Header_Text);
	Parms.Header_Icon = Header_Icon;
	Parms.Item = Item;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function TooltipLibrary.TooltipLibrary_C.Create Compare Item Tooltip
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Owning_Player                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FText&                      Header_Text                                            (Parm)
// class USlateBrushAsset*                 Header_Icon                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UFortItem*                        Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UFortItem*                        ComparedItem                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UWidget**                         Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTooltipLibrary_C::Create_Compare_Item_Tooltip(class APlayerController* Owning_Player, const class FText& Header_Text, class USlateBrushAsset* Header_Icon, class UFortItem* Item, class UFortItem* ComparedItem, class UObject* __WorldContext, class UWidget** Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TooltipLibrary_C", "Create Compare Item Tooltip");

	Params::TooltipLibrary_C_Create_Compare_Item_Tooltip Parms{};

	Parms.Owning_Player = Owning_Player;
	Parms.Header_Text = std::move(Header_Text);
	Parms.Header_Icon = Header_Icon;
	Parms.Item = Item;
	Parms.ComparedItem = ComparedItem;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function TooltipLibrary.TooltipLibrary_C.Create Basic Multi Line Tooltip
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Owning_Player                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class FText>&                    Body_Text                                              (Parm, OutParm, ZeroConstructor, ReferenceParm)
// const class FText&                      Header_Text                                            (Parm)
// class USlateBrushAsset*                 Icon_Brush                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UUserWidget**                     Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTooltipLibrary_C::Create_Basic_Multi_Line_Tooltip(class APlayerController* Owning_Player, TArray<class FText>& Body_Text, const class FText& Header_Text, class USlateBrushAsset* Icon_Brush, class UObject* __WorldContext, class UUserWidget** Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TooltipLibrary_C", "Create Basic Multi Line Tooltip");

	Params::TooltipLibrary_C_Create_Basic_Multi_Line_Tooltip Parms{};

	Parms.Owning_Player = Owning_Player;
	Parms.Body_Text = std::move(Body_Text);
	Parms.Header_Text = std::move(Header_Text);
	Parms.Icon_Brush = Icon_Brush;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Body_Text = std::move(Parms.Body_Text);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function TooltipLibrary.TooltipLibrary_C.Create Core Stat Tooltip
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Owning_Player                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHeroCoreStat&             Data                                                   (Parm)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UUserWidget**                     Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UTooltipLibrary_C::Create_Core_Stat_Tooltip(class APlayerController* Owning_Player, const struct FHeroCoreStat& Data, float Value, class UObject* __WorldContext, class UUserWidget** Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TooltipLibrary_C", "Create Core Stat Tooltip");

	Params::TooltipLibrary_C_Create_Core_Stat_Tooltip Parms{};

	Parms.Owning_Player = Owning_Player;
	Parms.Data = std::move(Data);
	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}

}

#pragma pack(pop)
