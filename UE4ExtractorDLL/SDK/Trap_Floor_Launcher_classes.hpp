#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Trap_Floor_Launcher

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"


#pragma pack(push, 0x4)
namespace SDK
{

// BlueprintGeneratedClass Trap_Floor_Launcher.Trap_Floor_Launcher_C
// 0x0068 (0x0A58 - 0x09F0)
class ATrap_Floor_Launcher_C final : public ABuildingTrapFloor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x09F0(0x0004)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Trigger;                                           // 0x09F4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   Base_Mesh;                                         // 0x09F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class UStaticMeshComponent*                   Jump_Mesh;                                         // 0x09FC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	class USceneComponent*                        Scene1;                                            // 0x0A00(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor)
	float                                         Fire_Z_movement_2F056E1A487C3C63C6B6C0920DFEF7E6;  // 0x0A04(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Fire__Direction_2F056E1A487C3C63C6B6C0920DFEF7E6;  // 0x0A08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A09[0x3];                                      // 0x0A09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Fire;                                              // 0x0A0C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         SpikeUP;                                           // 0x0A10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         DustParticleIndex;                                 // 0x0A14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         FireSoundIndex;                                    // 0x0A18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         ReloadBeginSoundIndex;                             // 0x0A1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         ReloadEndSoundIndex;                               // 0x0A20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         Explode_Sound;                                     // 0x0A24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         Explode_Effect;                                    // 0x0A28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Glow_Amount;                                       // 0x0A2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         Place_Sound;                                       // 0x0A30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         JumpPad_Movement;                                  // 0x0A34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Init_Position;                                     // 0x0A38(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class USoundCue*                              Trap_Placed_Sound;                                 // 0x0A44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundCue*                              Trap_Active_Sound;                                 // 0x0A48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundCue*                              Trap_Fire_Sound;                                   // 0x0A4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundCue*                              Trap_Reload_Sound;                                 // 0x0A50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	class USoundCue*                              Trap_Explode_Sound;                                // 0x0A54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_Trap_Floor_Launcher(int32 EntryPoint);
	void GameplayCue_Abilities_Activation_Traps_ActivateTrap(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void OnOutOfDurability();
	void OnFinishedBuilding();
	void OnPlaced();
	void OnReloadEnd();
	void Fire__UpdateFunc();
	void Fire__FinishedFunc();
	void UserConstructionScript();
	void SetFloorPosition(float NewFloorPosition);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Trap_Floor_Launcher_C">();
	}
	static class ATrap_Floor_Launcher_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATrap_Floor_Launcher_C>();
	}
};
static_assert(alignof(ATrap_Floor_Launcher_C) == 0x000004, "Wrong alignment on ATrap_Floor_Launcher_C");
static_assert(sizeof(ATrap_Floor_Launcher_C) == 0x000A58, "Wrong size on ATrap_Floor_Launcher_C");
static_assert(offsetof(ATrap_Floor_Launcher_C, UberGraphFrame) == 0x0009F0, "Member 'ATrap_Floor_Launcher_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Trigger) == 0x0009F4, "Member 'ATrap_Floor_Launcher_C::Trigger' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Base_Mesh) == 0x0009F8, "Member 'ATrap_Floor_Launcher_C::Base_Mesh' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Jump_Mesh) == 0x0009FC, "Member 'ATrap_Floor_Launcher_C::Jump_Mesh' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Scene1) == 0x000A00, "Member 'ATrap_Floor_Launcher_C::Scene1' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Fire_Z_movement_2F056E1A487C3C63C6B6C0920DFEF7E6) == 0x000A04, "Member 'ATrap_Floor_Launcher_C::Fire_Z_movement_2F056E1A487C3C63C6B6C0920DFEF7E6' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Fire__Direction_2F056E1A487C3C63C6B6C0920DFEF7E6) == 0x000A08, "Member 'ATrap_Floor_Launcher_C::Fire__Direction_2F056E1A487C3C63C6B6C0920DFEF7E6' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Fire) == 0x000A0C, "Member 'ATrap_Floor_Launcher_C::Fire' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, SpikeUP) == 0x000A10, "Member 'ATrap_Floor_Launcher_C::SpikeUP' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, DustParticleIndex) == 0x000A14, "Member 'ATrap_Floor_Launcher_C::DustParticleIndex' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, FireSoundIndex) == 0x000A18, "Member 'ATrap_Floor_Launcher_C::FireSoundIndex' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, ReloadBeginSoundIndex) == 0x000A1C, "Member 'ATrap_Floor_Launcher_C::ReloadBeginSoundIndex' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, ReloadEndSoundIndex) == 0x000A20, "Member 'ATrap_Floor_Launcher_C::ReloadEndSoundIndex' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Explode_Sound) == 0x000A24, "Member 'ATrap_Floor_Launcher_C::Explode_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Explode_Effect) == 0x000A28, "Member 'ATrap_Floor_Launcher_C::Explode_Effect' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Glow_Amount) == 0x000A2C, "Member 'ATrap_Floor_Launcher_C::Glow_Amount' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Place_Sound) == 0x000A30, "Member 'ATrap_Floor_Launcher_C::Place_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, JumpPad_Movement) == 0x000A34, "Member 'ATrap_Floor_Launcher_C::JumpPad_Movement' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Init_Position) == 0x000A38, "Member 'ATrap_Floor_Launcher_C::Init_Position' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Trap_Placed_Sound) == 0x000A44, "Member 'ATrap_Floor_Launcher_C::Trap_Placed_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Trap_Active_Sound) == 0x000A48, "Member 'ATrap_Floor_Launcher_C::Trap_Active_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Trap_Fire_Sound) == 0x000A4C, "Member 'ATrap_Floor_Launcher_C::Trap_Fire_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Trap_Reload_Sound) == 0x000A50, "Member 'ATrap_Floor_Launcher_C::Trap_Reload_Sound' has a wrong offset!");
static_assert(offsetof(ATrap_Floor_Launcher_C, Trap_Explode_Sound) == 0x000A54, "Member 'ATrap_Floor_Launcher_C::Trap_Explode_Sound' has a wrong offset!");

}

#pragma pack(pop)
